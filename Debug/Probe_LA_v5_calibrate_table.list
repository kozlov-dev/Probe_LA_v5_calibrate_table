
Probe_LA_v5_calibrate_table.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  0800caf8  0800caf8  0001caf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cca0  0800cca0  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800cca0  0800cca0  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cca0  0800cca0  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cca0  0800cca0  0001cca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cca4  0800cca4  0001cca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800cca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013b8  200001f8  0800ce9c  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200015b0  0800ce9c  000215b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020181  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bbf  00000000  00000000  0004039e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  00044f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d8  00000000  00000000  00046650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df92  00000000  00000000  00047b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c468  00000000  00000000  00065aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097f0e  00000000  00000000  00081f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00119e30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006934  00000000  00000000  00119e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cae0 	.word	0x0800cae0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800cae0 	.word	0x0800cae0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__gedf2>:
 80004d8:	f04f 3cff 	mov.w	ip, #4294967295
 80004dc:	e006      	b.n	80004ec <__cmpdf2+0x4>
 80004de:	bf00      	nop

080004e0 <__ledf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	e002      	b.n	80004ec <__cmpdf2+0x4>
 80004e6:	bf00      	nop

080004e8 <__cmpdf2>:
 80004e8:	f04f 0c01 	mov.w	ip, #1
 80004ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004fc:	bf18      	it	ne
 80004fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000502:	d01b      	beq.n	800053c <__cmpdf2+0x54>
 8000504:	b001      	add	sp, #4
 8000506:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800050a:	bf0c      	ite	eq
 800050c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000510:	ea91 0f03 	teqne	r1, r3
 8000514:	bf02      	ittt	eq
 8000516:	ea90 0f02 	teqeq	r0, r2
 800051a:	2000      	moveq	r0, #0
 800051c:	4770      	bxeq	lr
 800051e:	f110 0f00 	cmn.w	r0, #0
 8000522:	ea91 0f03 	teq	r1, r3
 8000526:	bf58      	it	pl
 8000528:	4299      	cmppl	r1, r3
 800052a:	bf08      	it	eq
 800052c:	4290      	cmpeq	r0, r2
 800052e:	bf2c      	ite	cs
 8000530:	17d8      	asrcs	r0, r3, #31
 8000532:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000536:	f040 0001 	orr.w	r0, r0, #1
 800053a:	4770      	bx	lr
 800053c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d102      	bne.n	800054c <__cmpdf2+0x64>
 8000546:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800054a:	d107      	bne.n	800055c <__cmpdf2+0x74>
 800054c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000550:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000554:	d1d6      	bne.n	8000504 <__cmpdf2+0x1c>
 8000556:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800055a:	d0d3      	beq.n	8000504 <__cmpdf2+0x1c>
 800055c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <__aeabi_cdrcmple>:
 8000564:	4684      	mov	ip, r0
 8000566:	4610      	mov	r0, r2
 8000568:	4662      	mov	r2, ip
 800056a:	468c      	mov	ip, r1
 800056c:	4619      	mov	r1, r3
 800056e:	4663      	mov	r3, ip
 8000570:	e000      	b.n	8000574 <__aeabi_cdcmpeq>
 8000572:	bf00      	nop

08000574 <__aeabi_cdcmpeq>:
 8000574:	b501      	push	{r0, lr}
 8000576:	f7ff ffb7 	bl	80004e8 <__cmpdf2>
 800057a:	2800      	cmp	r0, #0
 800057c:	bf48      	it	mi
 800057e:	f110 0f00 	cmnmi.w	r0, #0
 8000582:	bd01      	pop	{r0, pc}

08000584 <__aeabi_dcmpeq>:
 8000584:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000588:	f7ff fff4 	bl	8000574 <__aeabi_cdcmpeq>
 800058c:	bf0c      	ite	eq
 800058e:	2001      	moveq	r0, #1
 8000590:	2000      	movne	r0, #0
 8000592:	f85d fb08 	ldr.w	pc, [sp], #8
 8000596:	bf00      	nop

08000598 <__aeabi_dcmplt>:
 8000598:	f84d ed08 	str.w	lr, [sp, #-8]!
 800059c:	f7ff ffea 	bl	8000574 <__aeabi_cdcmpeq>
 80005a0:	bf34      	ite	cc
 80005a2:	2001      	movcc	r0, #1
 80005a4:	2000      	movcs	r0, #0
 80005a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005aa:	bf00      	nop

080005ac <__aeabi_dcmple>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff ffe0 	bl	8000574 <__aeabi_cdcmpeq>
 80005b4:	bf94      	ite	ls
 80005b6:	2001      	movls	r0, #1
 80005b8:	2000      	movhi	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmpge>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffce 	bl	8000564 <__aeabi_cdrcmple>
 80005c8:	bf94      	ite	ls
 80005ca:	2001      	movls	r0, #1
 80005cc:	2000      	movhi	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmpgt>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffc4 	bl	8000564 <__aeabi_cdrcmple>
 80005dc:	bf34      	ite	cc
 80005de:	2001      	movcc	r0, #1
 80005e0:	2000      	movcs	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2uiz>:
 80005e8:	004a      	lsls	r2, r1, #1
 80005ea:	d211      	bcs.n	8000610 <__aeabi_d2uiz+0x28>
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d211      	bcs.n	8000616 <__aeabi_d2uiz+0x2e>
 80005f2:	d50d      	bpl.n	8000610 <__aeabi_d2uiz+0x28>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d40e      	bmi.n	800061c <__aeabi_d2uiz+0x34>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	fa23 f002 	lsr.w	r0, r3, r2
 800060e:	4770      	bx	lr
 8000610:	f04f 0000 	mov.w	r0, #0
 8000614:	4770      	bx	lr
 8000616:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800061a:	d102      	bne.n	8000622 <__aeabi_d2uiz+0x3a>
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	4770      	bx	lr
 8000622:	f04f 0000 	mov.w	r0, #0
 8000626:	4770      	bx	lr

08000628 <__aeabi_frsub>:
 8000628:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800062c:	e002      	b.n	8000634 <__addsf3>
 800062e:	bf00      	nop

08000630 <__aeabi_fsub>:
 8000630:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000634 <__addsf3>:
 8000634:	0042      	lsls	r2, r0, #1
 8000636:	bf1f      	itttt	ne
 8000638:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800063c:	ea92 0f03 	teqne	r2, r3
 8000640:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000644:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000648:	d06a      	beq.n	8000720 <__addsf3+0xec>
 800064a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800064e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000652:	bfc1      	itttt	gt
 8000654:	18d2      	addgt	r2, r2, r3
 8000656:	4041      	eorgt	r1, r0
 8000658:	4048      	eorgt	r0, r1
 800065a:	4041      	eorgt	r1, r0
 800065c:	bfb8      	it	lt
 800065e:	425b      	neglt	r3, r3
 8000660:	2b19      	cmp	r3, #25
 8000662:	bf88      	it	hi
 8000664:	4770      	bxhi	lr
 8000666:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800066a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800066e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000672:	bf18      	it	ne
 8000674:	4240      	negne	r0, r0
 8000676:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800067a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800067e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000682:	bf18      	it	ne
 8000684:	4249      	negne	r1, r1
 8000686:	ea92 0f03 	teq	r2, r3
 800068a:	d03f      	beq.n	800070c <__addsf3+0xd8>
 800068c:	f1a2 0201 	sub.w	r2, r2, #1
 8000690:	fa41 fc03 	asr.w	ip, r1, r3
 8000694:	eb10 000c 	adds.w	r0, r0, ip
 8000698:	f1c3 0320 	rsb	r3, r3, #32
 800069c:	fa01 f103 	lsl.w	r1, r1, r3
 80006a0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006a4:	d502      	bpl.n	80006ac <__addsf3+0x78>
 80006a6:	4249      	negs	r1, r1
 80006a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006ac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006b0:	d313      	bcc.n	80006da <__addsf3+0xa6>
 80006b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006b6:	d306      	bcc.n	80006c6 <__addsf3+0x92>
 80006b8:	0840      	lsrs	r0, r0, #1
 80006ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80006be:	f102 0201 	add.w	r2, r2, #1
 80006c2:	2afe      	cmp	r2, #254	; 0xfe
 80006c4:	d251      	bcs.n	800076a <__addsf3+0x136>
 80006c6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80006ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006ce:	bf08      	it	eq
 80006d0:	f020 0001 	biceq.w	r0, r0, #1
 80006d4:	ea40 0003 	orr.w	r0, r0, r3
 80006d8:	4770      	bx	lr
 80006da:	0049      	lsls	r1, r1, #1
 80006dc:	eb40 0000 	adc.w	r0, r0, r0
 80006e0:	3a01      	subs	r2, #1
 80006e2:	bf28      	it	cs
 80006e4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80006e8:	d2ed      	bcs.n	80006c6 <__addsf3+0x92>
 80006ea:	fab0 fc80 	clz	ip, r0
 80006ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80006f2:	ebb2 020c 	subs.w	r2, r2, ip
 80006f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006fa:	bfaa      	itet	ge
 80006fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000700:	4252      	neglt	r2, r2
 8000702:	4318      	orrge	r0, r3
 8000704:	bfbc      	itt	lt
 8000706:	40d0      	lsrlt	r0, r2
 8000708:	4318      	orrlt	r0, r3
 800070a:	4770      	bx	lr
 800070c:	f092 0f00 	teq	r2, #0
 8000710:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000714:	bf06      	itte	eq
 8000716:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800071a:	3201      	addeq	r2, #1
 800071c:	3b01      	subne	r3, #1
 800071e:	e7b5      	b.n	800068c <__addsf3+0x58>
 8000720:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000724:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000728:	bf18      	it	ne
 800072a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800072e:	d021      	beq.n	8000774 <__addsf3+0x140>
 8000730:	ea92 0f03 	teq	r2, r3
 8000734:	d004      	beq.n	8000740 <__addsf3+0x10c>
 8000736:	f092 0f00 	teq	r2, #0
 800073a:	bf08      	it	eq
 800073c:	4608      	moveq	r0, r1
 800073e:	4770      	bx	lr
 8000740:	ea90 0f01 	teq	r0, r1
 8000744:	bf1c      	itt	ne
 8000746:	2000      	movne	r0, #0
 8000748:	4770      	bxne	lr
 800074a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800074e:	d104      	bne.n	800075a <__addsf3+0x126>
 8000750:	0040      	lsls	r0, r0, #1
 8000752:	bf28      	it	cs
 8000754:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000758:	4770      	bx	lr
 800075a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800075e:	bf3c      	itt	cc
 8000760:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000764:	4770      	bxcc	lr
 8000766:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800076a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800076e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000772:	4770      	bx	lr
 8000774:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000778:	bf16      	itet	ne
 800077a:	4608      	movne	r0, r1
 800077c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000780:	4601      	movne	r1, r0
 8000782:	0242      	lsls	r2, r0, #9
 8000784:	bf06      	itte	eq
 8000786:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800078a:	ea90 0f01 	teqeq	r0, r1
 800078e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000792:	4770      	bx	lr

08000794 <__aeabi_ui2f>:
 8000794:	f04f 0300 	mov.w	r3, #0
 8000798:	e004      	b.n	80007a4 <__aeabi_i2f+0x8>
 800079a:	bf00      	nop

0800079c <__aeabi_i2f>:
 800079c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	ea5f 0c00 	movs.w	ip, r0
 80007a8:	bf08      	it	eq
 80007aa:	4770      	bxeq	lr
 80007ac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007b0:	4601      	mov	r1, r0
 80007b2:	f04f 0000 	mov.w	r0, #0
 80007b6:	e01c      	b.n	80007f2 <__aeabi_l2f+0x2a>

080007b8 <__aeabi_ul2f>:
 80007b8:	ea50 0201 	orrs.w	r2, r0, r1
 80007bc:	bf08      	it	eq
 80007be:	4770      	bxeq	lr
 80007c0:	f04f 0300 	mov.w	r3, #0
 80007c4:	e00a      	b.n	80007dc <__aeabi_l2f+0x14>
 80007c6:	bf00      	nop

080007c8 <__aeabi_l2f>:
 80007c8:	ea50 0201 	orrs.w	r2, r0, r1
 80007cc:	bf08      	it	eq
 80007ce:	4770      	bxeq	lr
 80007d0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80007d4:	d502      	bpl.n	80007dc <__aeabi_l2f+0x14>
 80007d6:	4240      	negs	r0, r0
 80007d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007dc:	ea5f 0c01 	movs.w	ip, r1
 80007e0:	bf02      	ittt	eq
 80007e2:	4684      	moveq	ip, r0
 80007e4:	4601      	moveq	r1, r0
 80007e6:	2000      	moveq	r0, #0
 80007e8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80007ec:	bf08      	it	eq
 80007ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007f2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007f6:	fabc f28c 	clz	r2, ip
 80007fa:	3a08      	subs	r2, #8
 80007fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000800:	db10      	blt.n	8000824 <__aeabi_l2f+0x5c>
 8000802:	fa01 fc02 	lsl.w	ip, r1, r2
 8000806:	4463      	add	r3, ip
 8000808:	fa00 fc02 	lsl.w	ip, r0, r2
 800080c:	f1c2 0220 	rsb	r2, r2, #32
 8000810:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000814:	fa20 f202 	lsr.w	r2, r0, r2
 8000818:	eb43 0002 	adc.w	r0, r3, r2
 800081c:	bf08      	it	eq
 800081e:	f020 0001 	biceq.w	r0, r0, #1
 8000822:	4770      	bx	lr
 8000824:	f102 0220 	add.w	r2, r2, #32
 8000828:	fa01 fc02 	lsl.w	ip, r1, r2
 800082c:	f1c2 0220 	rsb	r2, r2, #32
 8000830:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000834:	fa21 f202 	lsr.w	r2, r1, r2
 8000838:	eb43 0002 	adc.w	r0, r3, r2
 800083c:	bf08      	it	eq
 800083e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000842:	4770      	bx	lr

08000844 <__aeabi_fmul>:
 8000844:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000848:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800084c:	bf1e      	ittt	ne
 800084e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000852:	ea92 0f0c 	teqne	r2, ip
 8000856:	ea93 0f0c 	teqne	r3, ip
 800085a:	d06f      	beq.n	800093c <__aeabi_fmul+0xf8>
 800085c:	441a      	add	r2, r3
 800085e:	ea80 0c01 	eor.w	ip, r0, r1
 8000862:	0240      	lsls	r0, r0, #9
 8000864:	bf18      	it	ne
 8000866:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800086a:	d01e      	beq.n	80008aa <__aeabi_fmul+0x66>
 800086c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000870:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000874:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000878:	fba0 3101 	umull	r3, r1, r0, r1
 800087c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000880:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000884:	bf3e      	ittt	cc
 8000886:	0049      	lslcc	r1, r1, #1
 8000888:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800088c:	005b      	lslcc	r3, r3, #1
 800088e:	ea40 0001 	orr.w	r0, r0, r1
 8000892:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000896:	2afd      	cmp	r2, #253	; 0xfd
 8000898:	d81d      	bhi.n	80008d6 <__aeabi_fmul+0x92>
 800089a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800089e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008a2:	bf08      	it	eq
 80008a4:	f020 0001 	biceq.w	r0, r0, #1
 80008a8:	4770      	bx	lr
 80008aa:	f090 0f00 	teq	r0, #0
 80008ae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008b2:	bf08      	it	eq
 80008b4:	0249      	lsleq	r1, r1, #9
 80008b6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008ba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008be:	3a7f      	subs	r2, #127	; 0x7f
 80008c0:	bfc2      	ittt	gt
 80008c2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008c6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008ca:	4770      	bxgt	lr
 80008cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008d0:	f04f 0300 	mov.w	r3, #0
 80008d4:	3a01      	subs	r2, #1
 80008d6:	dc5d      	bgt.n	8000994 <__aeabi_fmul+0x150>
 80008d8:	f112 0f19 	cmn.w	r2, #25
 80008dc:	bfdc      	itt	le
 80008de:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80008e2:	4770      	bxle	lr
 80008e4:	f1c2 0200 	rsb	r2, r2, #0
 80008e8:	0041      	lsls	r1, r0, #1
 80008ea:	fa21 f102 	lsr.w	r1, r1, r2
 80008ee:	f1c2 0220 	rsb	r2, r2, #32
 80008f2:	fa00 fc02 	lsl.w	ip, r0, r2
 80008f6:	ea5f 0031 	movs.w	r0, r1, rrx
 80008fa:	f140 0000 	adc.w	r0, r0, #0
 80008fe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000902:	bf08      	it	eq
 8000904:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000908:	4770      	bx	lr
 800090a:	f092 0f00 	teq	r2, #0
 800090e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000912:	bf02      	ittt	eq
 8000914:	0040      	lsleq	r0, r0, #1
 8000916:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800091a:	3a01      	subeq	r2, #1
 800091c:	d0f9      	beq.n	8000912 <__aeabi_fmul+0xce>
 800091e:	ea40 000c 	orr.w	r0, r0, ip
 8000922:	f093 0f00 	teq	r3, #0
 8000926:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800092a:	bf02      	ittt	eq
 800092c:	0049      	lsleq	r1, r1, #1
 800092e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000932:	3b01      	subeq	r3, #1
 8000934:	d0f9      	beq.n	800092a <__aeabi_fmul+0xe6>
 8000936:	ea41 010c 	orr.w	r1, r1, ip
 800093a:	e78f      	b.n	800085c <__aeabi_fmul+0x18>
 800093c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000940:	ea92 0f0c 	teq	r2, ip
 8000944:	bf18      	it	ne
 8000946:	ea93 0f0c 	teqne	r3, ip
 800094a:	d00a      	beq.n	8000962 <__aeabi_fmul+0x11e>
 800094c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000950:	bf18      	it	ne
 8000952:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000956:	d1d8      	bne.n	800090a <__aeabi_fmul+0xc6>
 8000958:	ea80 0001 	eor.w	r0, r0, r1
 800095c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000960:	4770      	bx	lr
 8000962:	f090 0f00 	teq	r0, #0
 8000966:	bf17      	itett	ne
 8000968:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800096c:	4608      	moveq	r0, r1
 800096e:	f091 0f00 	teqne	r1, #0
 8000972:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000976:	d014      	beq.n	80009a2 <__aeabi_fmul+0x15e>
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	d101      	bne.n	8000982 <__aeabi_fmul+0x13e>
 800097e:	0242      	lsls	r2, r0, #9
 8000980:	d10f      	bne.n	80009a2 <__aeabi_fmul+0x15e>
 8000982:	ea93 0f0c 	teq	r3, ip
 8000986:	d103      	bne.n	8000990 <__aeabi_fmul+0x14c>
 8000988:	024b      	lsls	r3, r1, #9
 800098a:	bf18      	it	ne
 800098c:	4608      	movne	r0, r1
 800098e:	d108      	bne.n	80009a2 <__aeabi_fmul+0x15e>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800099c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a0:	4770      	bx	lr
 80009a2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009aa:	4770      	bx	lr

080009ac <__aeabi_fdiv>:
 80009ac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009b0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009b4:	bf1e      	ittt	ne
 80009b6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009ba:	ea92 0f0c 	teqne	r2, ip
 80009be:	ea93 0f0c 	teqne	r3, ip
 80009c2:	d069      	beq.n	8000a98 <__aeabi_fdiv+0xec>
 80009c4:	eba2 0203 	sub.w	r2, r2, r3
 80009c8:	ea80 0c01 	eor.w	ip, r0, r1
 80009cc:	0249      	lsls	r1, r1, #9
 80009ce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80009d2:	d037      	beq.n	8000a44 <__aeabi_fdiv+0x98>
 80009d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009d8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80009dc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80009e0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009e4:	428b      	cmp	r3, r1
 80009e6:	bf38      	it	cc
 80009e8:	005b      	lslcc	r3, r3, #1
 80009ea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80009ee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80009f2:	428b      	cmp	r3, r1
 80009f4:	bf24      	itt	cs
 80009f6:	1a5b      	subcs	r3, r3, r1
 80009f8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009fc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a00:	bf24      	itt	cs
 8000a02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a0e:	bf24      	itt	cs
 8000a10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a1c:	bf24      	itt	cs
 8000a1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a26:	011b      	lsls	r3, r3, #4
 8000a28:	bf18      	it	ne
 8000a2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a2e:	d1e0      	bne.n	80009f2 <__aeabi_fdiv+0x46>
 8000a30:	2afd      	cmp	r2, #253	; 0xfd
 8000a32:	f63f af50 	bhi.w	80008d6 <__aeabi_fmul+0x92>
 8000a36:	428b      	cmp	r3, r1
 8000a38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a3c:	bf08      	it	eq
 8000a3e:	f020 0001 	biceq.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4c:	327f      	adds	r2, #127	; 0x7f
 8000a4e:	bfc2      	ittt	gt
 8000a50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a58:	4770      	bxgt	lr
 8000a5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5e:	f04f 0300 	mov.w	r3, #0
 8000a62:	3a01      	subs	r2, #1
 8000a64:	e737      	b.n	80008d6 <__aeabi_fmul+0x92>
 8000a66:	f092 0f00 	teq	r2, #0
 8000a6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a6e:	bf02      	ittt	eq
 8000a70:	0040      	lsleq	r0, r0, #1
 8000a72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a76:	3a01      	subeq	r2, #1
 8000a78:	d0f9      	beq.n	8000a6e <__aeabi_fdiv+0xc2>
 8000a7a:	ea40 000c 	orr.w	r0, r0, ip
 8000a7e:	f093 0f00 	teq	r3, #0
 8000a82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a86:	bf02      	ittt	eq
 8000a88:	0049      	lsleq	r1, r1, #1
 8000a8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a8e:	3b01      	subeq	r3, #1
 8000a90:	d0f9      	beq.n	8000a86 <__aeabi_fdiv+0xda>
 8000a92:	ea41 010c 	orr.w	r1, r1, ip
 8000a96:	e795      	b.n	80009c4 <__aeabi_fdiv+0x18>
 8000a98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a9c:	ea92 0f0c 	teq	r2, ip
 8000aa0:	d108      	bne.n	8000ab4 <__aeabi_fdiv+0x108>
 8000aa2:	0242      	lsls	r2, r0, #9
 8000aa4:	f47f af7d 	bne.w	80009a2 <__aeabi_fmul+0x15e>
 8000aa8:	ea93 0f0c 	teq	r3, ip
 8000aac:	f47f af70 	bne.w	8000990 <__aeabi_fmul+0x14c>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	e776      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ab4:	ea93 0f0c 	teq	r3, ip
 8000ab8:	d104      	bne.n	8000ac4 <__aeabi_fdiv+0x118>
 8000aba:	024b      	lsls	r3, r1, #9
 8000abc:	f43f af4c 	beq.w	8000958 <__aeabi_fmul+0x114>
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	e76e      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ac4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ac8:	bf18      	it	ne
 8000aca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ace:	d1ca      	bne.n	8000a66 <__aeabi_fdiv+0xba>
 8000ad0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ad4:	f47f af5c 	bne.w	8000990 <__aeabi_fmul+0x14c>
 8000ad8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000adc:	f47f af3c 	bne.w	8000958 <__aeabi_fmul+0x114>
 8000ae0:	e75f      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_f2uiz>:
 8000ae4:	0042      	lsls	r2, r0, #1
 8000ae6:	d20e      	bcs.n	8000b06 <__aeabi_f2uiz+0x22>
 8000ae8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000aec:	d30b      	bcc.n	8000b06 <__aeabi_f2uiz+0x22>
 8000aee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000af2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000af6:	d409      	bmi.n	8000b0c <__aeabi_f2uiz+0x28>
 8000af8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000afc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b00:	fa23 f002 	lsr.w	r0, r3, r2
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr
 8000b0c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b10:	d101      	bne.n	8000b16 <__aeabi_f2uiz+0x32>
 8000b12:	0242      	lsls	r2, r0, #9
 8000b14:	d102      	bne.n	8000b1c <__aeabi_f2uiz+0x38>
 8000b16:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <ToggleLDAC>:
// Подключение заголовочного файла
#include <DAC_AD5322.h>

//--------------------------------------------------------------------------
// Необходим для загрузки значений в ЦАП
void ToggleLDAC() {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	4804      	ldr	r0, [pc, #16]	; (8000b40 <ToggleLDAC+0x1c>)
 8000b2e:	f003 fc42 	bl	80043b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_SET);
 8000b32:	2201      	movs	r2, #1
 8000b34:	2102      	movs	r1, #2
 8000b36:	4802      	ldr	r0, [pc, #8]	; (8000b40 <ToggleLDAC+0x1c>)
 8000b38:	f003 fc3d 	bl	80043b6 <HAL_GPIO_WritePin>
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40010800 	.word	0x40010800

08000b44 <SendSPI>:
//--------------------------------------------------------------------------
void SendSPI(SPI_HandleTypeDef *pSPI,uint16_t out){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	807b      	strh	r3, [r7, #2]

  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2110      	movs	r1, #16
 8000b54:	4808      	ldr	r0, [pc, #32]	; (8000b78 <SendSPI+0x34>)
 8000b56:	f003 fc2e 	bl	80043b6 <HAL_GPIO_WritePin>

  	// Передача значений в цап
  	//out	= 0b0100000111111111;
  	HAL_SPI_Transmit(pSPI, (uint8_t*)(&out), 1, 1);
 8000b5a:	1cb9      	adds	r1, r7, #2
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	2201      	movs	r2, #1
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f005 fdd5 	bl	8006710 <HAL_SPI_Transmit>

  	// запепрет передачи CS
  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_SET);
 8000b66:	2201      	movs	r2, #1
 8000b68:	2110      	movs	r1, #16
 8000b6a:	4803      	ldr	r0, [pc, #12]	; (8000b78 <SendSPI+0x34>)
 8000b6c:	f003 fc23 	bl	80043b6 <HAL_GPIO_WritePin>

}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40010800 	.word	0x40010800

08000b7c <DAC_AD5322_Ch1>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала А
void DAC_AD5322_Ch1(SPI_HandleTypeDef *pSPI, uint16_t data_ch1) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	807b      	strh	r3, [r7, #2]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000b88:	887b      	ldrh	r3, [r7, #2]
 8000b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b8e:	d302      	bcc.n	8000b96 <DAC_AD5322_Ch1+0x1a>
 8000b90:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000b94:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000b96:	2300      	movs	r3, #0
 8000b98:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000ba6:	8afb      	ldrh	r3, [r7, #22]
 8000ba8:	03db      	lsls	r3, r3, #15
 8000baa:	b21a      	sxth	r2, r3
 8000bac:	8abb      	ldrh	r3, [r7, #20]
 8000bae:	039b      	lsls	r3, r3, #14
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	b21a      	sxth	r2, r3
 8000bb6:	8a7b      	ldrh	r3, [r7, #18]
 8000bb8:	035b      	lsls	r3, r3, #13
 8000bba:	b21b      	sxth	r3, r3
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	b21a      	sxth	r2, r3
 8000bc0:	8a3b      	ldrh	r3, [r7, #16]
 8000bc2:	031b      	lsls	r3, r3, #12
 8000bc4:	b21b      	sxth	r3, r3
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	b21b      	sxth	r3, r3
 8000bca:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000bcc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bd0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000bd4:	f023 030f 	bic.w	r3, r3, #15
 8000bd8:	b21a      	sxth	r2, r3
 8000bda:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000be2:	b21b      	sxth	r3, r3
 8000be4:	4313      	orrs	r3, r2
 8000be6:	b21b      	sxth	r3, r3
 8000be8:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000bea:	89bb      	ldrh	r3, [r7, #12]
 8000bec:	4619      	mov	r1, r3
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff ffa8 	bl	8000b44 <SendSPI>
  	SendSPI(pSPI,out);
 8000bf4:	89bb      	ldrh	r3, [r7, #12]
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff ffa3 	bl	8000b44 <SendSPI>
  	ToggleLDAC();
 8000bfe:	f7ff ff91 	bl	8000b24 <ToggleLDAC>
}
 8000c02:	bf00      	nop
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <DAC_AD5322_Ch2>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала В
void DAC_AD5322_Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch2) {
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b086      	sub	sp, #24
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	460b      	mov	r3, r1
 8000c14:	807b      	strh	r3, [r7, #2]

	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 8000c16:	887b      	ldrh	r3, [r7, #2]
 8000c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c1c:	d302      	bcc.n	8000c24 <DAC_AD5322_Ch2+0x1a>
 8000c1e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000c22:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000c24:	2301      	movs	r3, #1
 8000c26:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000c28:	2301      	movs	r3, #1
 8000c2a:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000c30:	2300      	movs	r3, #0
 8000c32:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000c34:	8afb      	ldrh	r3, [r7, #22]
 8000c36:	03db      	lsls	r3, r3, #15
 8000c38:	b21a      	sxth	r2, r3
 8000c3a:	8abb      	ldrh	r3, [r7, #20]
 8000c3c:	039b      	lsls	r3, r3, #14
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	4313      	orrs	r3, r2
 8000c42:	b21a      	sxth	r2, r3
 8000c44:	8a7b      	ldrh	r3, [r7, #18]
 8000c46:	035b      	lsls	r3, r3, #13
 8000c48:	b21b      	sxth	r3, r3
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	b21a      	sxth	r2, r3
 8000c4e:	8a3b      	ldrh	r3, [r7, #16]
 8000c50:	031b      	lsls	r3, r3, #12
 8000c52:	b21b      	sxth	r3, r3
 8000c54:	4313      	orrs	r3, r2
 8000c56:	b21b      	sxth	r3, r3
 8000c58:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000c5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c5e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000c62:	f023 030f 	bic.w	r3, r3, #15
 8000c66:	b21a      	sxth	r2, r3
 8000c68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c70:	b21b      	sxth	r3, r3
 8000c72:	4313      	orrs	r3, r2
 8000c74:	b21b      	sxth	r3, r3
 8000c76:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000c78:	89bb      	ldrh	r3, [r7, #12]
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff ff61 	bl	8000b44 <SendSPI>
  	SendSPI(pSPI,out);
 8000c82:	89bb      	ldrh	r3, [r7, #12]
 8000c84:	4619      	mov	r1, r3
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff ff5c 	bl	8000b44 <SendSPI>
  	ToggleLDAC();
 8000c8c:	f7ff ff4a 	bl	8000b24 <ToggleLDAC>
}
 8000c90:	bf00      	nop
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <DAC_AD5322_Ch1Ch2>:
//--------------------------------------------------------------------------
void DAC_AD5322_Ch1Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch1, uint16_t data_ch2) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	807b      	strh	r3, [r7, #2]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	803b      	strh	r3, [r7, #0]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000ca8:	887b      	ldrh	r3, [r7, #2]
 8000caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cae:	d302      	bcc.n	8000cb6 <DAC_AD5322_Ch1Ch2+0x1e>
 8000cb0:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000cb4:	807b      	strh	r3, [r7, #2]
	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 8000cb6:	883b      	ldrh	r3, [r7, #0]
 8000cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cbc:	d302      	bcc.n	8000cc4 <DAC_AD5322_Ch1Ch2+0x2c>
 8000cbe:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000cc2:	803b      	strh	r3, [r7, #0]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000cc8:	2301      	movs	r3, #1
 8000cca:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000ccc:	2300      	movs	r3, #0
 8000cce:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000cd4:	8afb      	ldrh	r3, [r7, #22]
 8000cd6:	03db      	lsls	r3, r3, #15
 8000cd8:	b21a      	sxth	r2, r3
 8000cda:	8abb      	ldrh	r3, [r7, #20]
 8000cdc:	039b      	lsls	r3, r3, #14
 8000cde:	b21b      	sxth	r3, r3
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	b21a      	sxth	r2, r3
 8000ce4:	8a7b      	ldrh	r3, [r7, #18]
 8000ce6:	035b      	lsls	r3, r3, #13
 8000ce8:	b21b      	sxth	r3, r3
 8000cea:	4313      	orrs	r3, r2
 8000cec:	b21a      	sxth	r2, r3
 8000cee:	8a3b      	ldrh	r3, [r7, #16]
 8000cf0:	031b      	lsls	r3, r3, #12
 8000cf2:	b21b      	sxth	r3, r3
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	b21b      	sxth	r3, r3
 8000cf8:	81fb      	strh	r3, [r7, #14]
	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000cfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cfe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000d02:	f023 030f 	bic.w	r3, r3, #15
 8000d06:	b21a      	sxth	r2, r3
 8000d08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d10:	b21b      	sxth	r3, r3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	b21b      	sxth	r3, r3
 8000d16:	81bb      	strh	r3, [r7, #12]

  	SendSPI(pSPI,out);
 8000d18:	89bb      	ldrh	r3, [r7, #12]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff ff11 	bl	8000b44 <SendSPI>
  	SendSPI(pSPI,out);
 8000d22:	89bb      	ldrh	r3, [r7, #12]
 8000d24:	4619      	mov	r1, r3
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ff0c 	bl	8000b44 <SendSPI>
  	//--------------------------------------------------------------------------
  	chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	82fb      	strh	r3, [r7, #22]
  	bufferVref 	= 1;	// bit 14: усилитель VREF?
 8000d30:	2301      	movs	r3, #1
 8000d32:	82bb      	strh	r3, [r7, #20]
  	PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000d34:	2300      	movs	r3, #0
 8000d36:	827b      	strh	r3, [r7, #18]
  	PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000d38:	2300      	movs	r3, #0
 8000d3a:	823b      	strh	r3, [r7, #16]

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000d3c:	8afb      	ldrh	r3, [r7, #22]
 8000d3e:	03db      	lsls	r3, r3, #15
 8000d40:	b21a      	sxth	r2, r3
 8000d42:	8abb      	ldrh	r3, [r7, #20]
 8000d44:	039b      	lsls	r3, r3, #14
 8000d46:	b21b      	sxth	r3, r3
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	b21a      	sxth	r2, r3
 8000d4c:	8a7b      	ldrh	r3, [r7, #18]
 8000d4e:	035b      	lsls	r3, r3, #13
 8000d50:	b21b      	sxth	r3, r3
 8000d52:	4313      	orrs	r3, r2
 8000d54:	b21a      	sxth	r2, r3
 8000d56:	8a3b      	ldrh	r3, [r7, #16]
 8000d58:	031b      	lsls	r3, r3, #12
 8000d5a:	b21b      	sxth	r3, r3
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	b21b      	sxth	r3, r3
 8000d60:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000d62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d66:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000d6a:	f023 030f 	bic.w	r3, r3, #15
 8000d6e:	b21a      	sxth	r2, r3
 8000d70:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d78:	b21b      	sxth	r3, r3
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	b21b      	sxth	r3, r3
 8000d7e:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000d80:	89bb      	ldrh	r3, [r7, #12]
 8000d82:	4619      	mov	r1, r3
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff fedd 	bl	8000b44 <SendSPI>
  	SendSPI(pSPI,out);
 8000d8a:	89bb      	ldrh	r3, [r7, #12]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff fed8 	bl	8000b44 <SendSPI>
  	ToggleLDAC();
 8000d94:	f7ff fec6 	bl	8000b24 <ToggleLDAC>
}
 8000d98:	bf00      	nop
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <flash_write_calibTable>:
/*
 * @brief   Write calibration table into flash memory
 * @retval  HAL Status
 */
HAL_StatusTypeDef flash_write_calibTable(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
    /* Create some variables */
    volatile uint32_t   addr    = FLASH_TABLE_START_ADDR;
 8000da6:	4b45      	ldr	r3, [pc, #276]	; (8000ebc <flash_write_calibTable+0x11c>)
 8000da8:	617b      	str	r3, [r7, #20]
    uint32_t            err     = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
    uint32_t            index   = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
    uint8_t             status  = HAL_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	76fb      	strb	r3, [r7, #27]

    /* Compare flash and ram content */
    while ( addr < FLASH_TABLE_STOP_ADDR ) {
 8000db6:	e010      	b.n	8000dda <flash_write_calibTable+0x3a>
        if ( DevNVRAM.data32[index] != *(uint32_t *)addr ) {
 8000db8:	4a41      	ldr	r2, [pc, #260]	; (8000ec0 <flash_write_calibTable+0x120>)
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d002      	beq.n	8000dce <flash_write_calibTable+0x2e>
            ++err;
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	613b      	str	r3, [r7, #16]
        }
        index += 1;
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	61fb      	str	r3, [r7, #28]
        addr += 4;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	3304      	adds	r3, #4
 8000dd8:	617b      	str	r3, [r7, #20]
    while ( addr < FLASH_TABLE_STOP_ADDR ) {
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	4a39      	ldr	r2, [pc, #228]	; (8000ec4 <flash_write_calibTable+0x124>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d9ea      	bls.n	8000db8 <flash_write_calibTable+0x18>
    }

    /* If there are differencies -> write new data in flash */
    if (err > 0) {
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d063      	beq.n	8000eb0 <flash_write_calibTable+0x110>
        /* Unlock flash */
        if ( HAL_FLASH_Unlock() != HAL_OK ) {
 8000de8:	f002 ffba 	bl	8003d60 <HAL_FLASH_Unlock>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <flash_write_calibTable+0x5a>
            status = HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	76fb      	strb	r3, [r7, #27]
            return status;
 8000df6:	7efb      	ldrb	r3, [r7, #27]
 8000df8:	e05b      	b.n	8000eb2 <flash_write_calibTable+0x112>
        }

        /* Erase flash */
        FLASH_EraseInitTypeDef EraseInitStruct = {
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	4b2d      	ldr	r3, [pc, #180]	; (8000ebc <flash_write_calibTable+0x11c>)
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	60fb      	str	r3, [r7, #12]
                .TypeErase      = FLASH_TYPEERASE_PAGES,
                .PageAddress    = FLASH_TABLE_START_ADDR,
                .NbPages        = 1
        };
        if ( HAL_FLASHEx_Erase(&EraseInitStruct, &err) != HAL_OK ) {
 8000e0e:	f107 0210 	add.w	r2, r7, #16
 8000e12:	463b      	mov	r3, r7
 8000e14:	4611      	mov	r1, r2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f003 f88a 	bl	8003f30 <HAL_FLASHEx_Erase>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <flash_write_calibTable+0x8a>
            status = HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	76fb      	strb	r3, [r7, #27]
            return status;
 8000e26:	7efb      	ldrb	r3, [r7, #27]
 8000e28:	e043      	b.n	8000eb2 <flash_write_calibTable+0x112>
        }
        if ( err != 0xFFFFFFFF ) {
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e30:	d003      	beq.n	8000e3a <flash_write_calibTable+0x9a>
            status = HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	76fb      	strb	r3, [r7, #27]
            return status;
 8000e36:	7efb      	ldrb	r3, [r7, #27]
 8000e38:	e03b      	b.n	8000eb2 <flash_write_calibTable+0x112>
        }

        /* Reset variables */
        addr    = FLASH_TABLE_START_ADDR;
 8000e3a:	4b20      	ldr	r3, [pc, #128]	; (8000ebc <flash_write_calibTable+0x11c>)
 8000e3c:	617b      	str	r3, [r7, #20]
        err     = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
        index   = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
        /* Increase number of rewritings */
        DevNVRAM.sector.NWrite += 1;
 8000e46:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <flash_write_calibTable+0x120>)
 8000e48:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	4a1c      	ldr	r2, [pc, #112]	; (8000ec0 <flash_write_calibTable+0x120>)
 8000e50:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
        /* Calculate calibration table checksum */
        DevNVRAM.sector.CheckSum = HAL_CRC_Calculate( &hcrc,
 8000e54:	2218      	movs	r2, #24
 8000e56:	491a      	ldr	r1, [pc, #104]	; (8000ec0 <flash_write_calibTable+0x120>)
 8000e58:	481b      	ldr	r0, [pc, #108]	; (8000ec8 <flash_write_calibTable+0x128>)
 8000e5a:	f002 fede 	bl	8003c1a <HAL_CRC_Calculate>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	4a17      	ldr	r2, [pc, #92]	; (8000ec0 <flash_write_calibTable+0x120>)
 8000e62:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
                                                      (uint32_t*)&DevNVRAM.calibration_table,
                                                      (sizeof(DevNVRAM.calibration_table)/4) );
        /* Write flash */
        while (addr < FLASH_TABLE_STOP_ADDR) {
 8000e66:	e01d      	b.n	8000ea4 <flash_write_calibTable+0x104>
            if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, DevNVRAM.data32[index]) != HAL_OK) {
 8000e68:	6979      	ldr	r1, [r7, #20]
 8000e6a:	4a15      	ldr	r2, [pc, #84]	; (8000ec0 <flash_write_calibTable+0x120>)
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e72:	461a      	mov	r2, r3
 8000e74:	f04f 0300 	mov.w	r3, #0
 8000e78:	2002      	movs	r0, #2
 8000e7a:	f002 ff01 	bl	8003c80 <HAL_FLASH_Program>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d002      	beq.n	8000e8a <flash_write_calibTable+0xea>
                err++;
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	3301      	adds	r3, #1
 8000e88:	613b      	str	r3, [r7, #16]
            }
            index += 1;
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	61fb      	str	r3, [r7, #28]
            addr += 4;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	3304      	adds	r3, #4
 8000e94:	617b      	str	r3, [r7, #20]
            /* Wait until flash is busy */
            while ( (FLASH->SR & FLASH_SR_BSY) != 0 )
 8000e96:	bf00      	nop
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <flash_write_calibTable+0x12c>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d1f9      	bne.n	8000e98 <flash_write_calibTable+0xf8>
        while (addr < FLASH_TABLE_STOP_ADDR) {
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <flash_write_calibTable+0x124>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d9dd      	bls.n	8000e68 <flash_write_calibTable+0xc8>
                ;
        }
        /* Lock flash */
        HAL_FLASH_Lock();
 8000eac:	f002 ff7e 	bl	8003dac <HAL_FLASH_Lock>
    }
    return status;
 8000eb0:	7efb      	ldrb	r3, [r7, #27]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3720      	adds	r7, #32
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	0801fc00 	.word	0x0801fc00
 8000ec0:	200004f4 	.word	0x200004f4
 8000ec4:	0801ffff 	.word	0x0801ffff
 8000ec8:	200008f4 	.word	0x200008f4
 8000ecc:	40022000 	.word	0x40022000

08000ed0 <crete_calibration_table>:
#include <logic_calibration_table.h>
#include <stdlib.h>
#include <math.h>

void crete_calibration_table(Table_t *calibTable)
{ //de
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

    calibTable->dacValA_m12[0] = 0x159;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f240 1259 	movw	r2, #345	; 0x159
 8000ede:	819a      	strh	r2, [r3, #12]
    calibTable->dacValA_m12[1] = 0x182;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8000ee6:	81da      	strh	r2, [r3, #14]
    calibTable->dacValA_m12[2] = 0x225;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f240 2225 	movw	r2, #549	; 0x225
 8000eee:	821a      	strh	r2, [r3, #16]
    calibTable->dacValA_m12[3] = 0x309;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f240 3209 	movw	r2, #777	; 0x309
 8000ef6:	825a      	strh	r2, [r3, #18]
    calibTable->dacValA_m12[4] = 0x3eb;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8000efe:	829a      	strh	r2, [r3, #20]
    calibTable->dacValA_m12[5] = 0x4cd;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f240 42cd 	movw	r2, #1229	; 0x4cd
 8000f06:	82da      	strh	r2, [r3, #22]
    calibTable->dacValA_m12[6] = 0x5b0;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f44f 62b6 	mov.w	r2, #1456	; 0x5b0
 8000f0e:	831a      	strh	r2, [r3, #24]
    calibTable->dacValA_m12[7] = 0x693;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f240 6293 	movw	r2, #1683	; 0x693
 8000f16:	835a      	strh	r2, [r3, #26]
    calibTable->dacValA_m12[8] = 0x777;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f240 7277 	movw	r2, #1911	; 0x777
 8000f1e:	839a      	strh	r2, [r3, #28]
    calibTable->dacValA_m12[9] = 0x861;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f640 0261 	movw	r2, #2145	; 0x861
 8000f26:	83da      	strh	r2, [r3, #30]
    calibTable->dacValA_m12[10] = 0x93c;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f640 123c 	movw	r2, #2364	; 0x93c
 8000f2e:	841a      	strh	r2, [r3, #32]
    calibTable->dacValA_m12[11] = 0xa20;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f44f 6222 	mov.w	r2, #2592	; 0xa20
 8000f36:	845a      	strh	r2, [r3, #34]	; 0x22
    calibTable->dacValA_m12[12] = 0xb04;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f640 3204 	movw	r2, #2820	; 0xb04
 8000f3e:	849a      	strh	r2, [r3, #36]	; 0x24
    calibTable->dacValA_m12[13] = 0xbe5;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f640 32e5 	movw	r2, #3045	; 0xbe5
 8000f46:	84da      	strh	r2, [r3, #38]	; 0x26
    calibTable->dacValA_m12[14] = 0xcc7;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f640 42c7 	movw	r2, #3271	; 0xcc7
 8000f4e:	851a      	strh	r2, [r3, #40]	; 0x28
    calibTable->dacValA_m12[15] = 0xda9;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f640 52a9 	movw	r2, #3497	; 0xda9
 8000f56:	855a      	strh	r2, [r3, #42]	; 0x2a
    calibTable->dacValA_m12[16] = 0xe62;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f640 6262 	movw	r2, #3682	; 0xe62
 8000f5e:	859a      	strh	r2, [r3, #44]	; 0x2c
    calibTable->dacValA_m12[17] = 0xe96;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f640 6296 	movw	r2, #3734	; 0xe96
 8000f66:	85da      	strh	r2, [r3, #46]	; 0x2e
    calibTable->dacValA_m12[18] = 0xeac;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f640 62ac 	movw	r2, #3756	; 0xeac
 8000f6e:	861a      	strh	r2, [r3, #48]	; 0x30

    calibTable->dacValB_m12[0] = 0x145;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f240 1245 	movw	r2, #325	; 0x145
 8000f76:	865a      	strh	r2, [r3, #50]	; 0x32
    calibTable->dacValB_m12[1] = 0x16e;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8000f7e:	869a      	strh	r2, [r3, #52]	; 0x34
    calibTable->dacValB_m12[2] = 0x212;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f240 2212 	movw	r2, #530	; 0x212
 8000f86:	86da      	strh	r2, [r3, #54]	; 0x36
    calibTable->dacValB_m12[3] = 0x2f0;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 8000f8e:	871a      	strh	r2, [r3, #56]	; 0x38
    calibTable->dacValB_m12[4] = 0x3d2;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f240 32d2 	movw	r2, #978	; 0x3d2
 8000f96:	875a      	strh	r2, [r3, #58]	; 0x3a
    calibTable->dacValB_m12[5] = 0x4b4;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8000f9e:	879a      	strh	r2, [r3, #60]	; 0x3c
    calibTable->dacValB_m12[6] = 0x597;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f240 5297 	movw	r2, #1431	; 0x597
 8000fa6:	87da      	strh	r2, [r3, #62]	; 0x3e
    calibTable->dacValB_m12[7] = 0x67a;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f240 627a 	movw	r2, #1658	; 0x67a
 8000fae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    calibTable->dacValB_m12[8] = 0x75e;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f240 725e 	movw	r2, #1886	; 0x75e
 8000fb8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    calibTable->dacValB_m12[9] = 0x84a;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f640 024a 	movw	r2, #2122	; 0x84a
 8000fc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    calibTable->dacValB_m12[10] = 0x923;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f640 1223 	movw	r2, #2339	; 0x923
 8000fcc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    calibTable->dacValB_m12[11] = 0xa07;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f640 2207 	movw	r2, #2567	; 0xa07
 8000fd6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    calibTable->dacValB_m12[12] = 0xae8;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f640 22e8 	movw	r2, #2792	; 0xae8
 8000fe0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    calibTable->dacValB_m12[13] = 0xbcc;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f640 32cc 	movw	r2, #3020	; 0xbcc
 8000fea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    calibTable->dacValB_m12[14] = 0xcae;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f640 42ae 	movw	r2, #3246	; 0xcae
 8000ff4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    calibTable->dacValB_m12[15] = 0xd90;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f44f 6259 	mov.w	r2, #3472	; 0xd90
 8000ffe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    calibTable->dacValB_m12[16] = 0xe49;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f640 6249 	movw	r2, #3657	; 0xe49
 8001008:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    calibTable->dacValB_m12[17] = 0xe7b;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f640 627b 	movw	r2, #3707	; 0xe7b
 8001012:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    calibTable->dacValB_m12[18] = 0xe92;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f640 6292 	movw	r2, #3730	; 0xe92
 800101c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    calibTable->dacValA_m27[0] = 0x0;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    calibTable->dacValA_m27[1] = 0x1000;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800102e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    calibTable->dacValB_m27[0] = 0x0;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    calibTable->dacValB_m27[1] = 0x1000;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001040:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
	...

08001050 <volt2dgt>:
// Следующий фрагмент кода выводит на экран «10»:
// printf("%f", floor(10.9));

// uint16_t volt2dgt(Table_t *calibTable, int16_t volt){
 uint16_t volt2dgt(Table_t *calibTable, RelState m, uint8_t Ch, int16_t volt)
 {
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b08b      	sub	sp, #44	; 0x2c
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	4608      	mov	r0, r1
 800105a:	4611      	mov	r1, r2
 800105c:	461a      	mov	r2, r3
 800105e:	4603      	mov	r3, r0
 8001060:	70fb      	strb	r3, [r7, #3]
 8001062:	460b      	mov	r3, r1
 8001064:	70bb      	strb	r3, [r7, #2]
 8001066:	4613      	mov	r3, r2
 8001068:	803b      	strh	r3, [r7, #0]
float count = 0 ;
 800106a:	f04f 0300 	mov.w	r3, #0
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
uint16_t yi = 0 ;
 8001070:	2300      	movs	r3, #0
 8001072:	847b      	strh	r3, [r7, #34]	; 0x22
float y = 0 ;
 8001074:	f04f 0300 	mov.w	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
uint16_t Ca0 = 0 ;
 800107a:	2300      	movs	r3, #0
 800107c:	837b      	strh	r3, [r7, #26]
uint16_t Ca1 = 0 ;
 800107e:	2300      	movs	r3, #0
 8001080:	833b      	strh	r3, [r7, #24]
float a0 = 0 ;
 8001082:	f04f 0300 	mov.w	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
uint16_t a1 = 0 ;
 8001088:	2300      	movs	r3, #0
 800108a:	827b      	strh	r3, [r7, #18]
float CodeX = 0 ;
 800108c:	f04f 0300 	mov.w	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]

     switch (Ch)
 8001092:	78bb      	ldrb	r3, [r7, #2]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d003      	beq.n	80010a0 <volt2dgt+0x50>
 8001098:	2b02      	cmp	r3, #2
 800109a:	f000 8131 	beq.w	8001300 <volt2dgt+0x2b0>
 800109e:	e25f      	b.n	8001560 <volt2dgt+0x510>
     {
     case 1:
         switch (m)
 80010a0:	78fb      	ldrb	r3, [r7, #3]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 8096 	beq.w	80011d4 <volt2dgt+0x184>
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	f040 8256 	bne.w	800155a <volt2dgt+0x50a>
         {
         case m12:
        	 yi = floor(((float)((float)(((abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/STEP_CALIBRATE)*abs(MIN_VOLT_MODE_12))/(float)(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12)))/(float)(abs(MIN_VOLT_MODE_12)))*volt+((float)(((abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/STEP_CALIBRATE)*abs(MIN_VOLT_MODE_12))/(float)(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12)))); // искомый индекс в массиве!!! найти минимальное значение от него 26.5-->26 через floor
 80010ae:	f9b7 3000 	ldrsh.w	r3, [r7]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fb72 	bl	800079c <__aeabi_i2f>
 80010b8:	4603      	mov	r3, r0
 80010ba:	498f      	ldr	r1, [pc, #572]	; (80012f8 <volt2dgt+0x2a8>)
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fbc1 	bl	8000844 <__aeabi_fmul>
 80010c2:	4603      	mov	r3, r0
 80010c4:	498d      	ldr	r1, [pc, #564]	; (80012fc <volt2dgt+0x2ac>)
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fab4 	bl	8000634 <__addsf3>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff f9aa 	bl	8000428 <__aeabi_f2d>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	f00b fc80 	bl	800c9e0 <floor>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4610      	mov	r0, r2
 80010e6:	4619      	mov	r1, r3
 80010e8:	f7ff fa7e 	bl	80005e8 <__aeabi_d2uiz>
 80010ec:	4603      	mov	r3, r0
 80010ee:	847b      	strh	r3, [r7, #34]	; 0x22
         	 Ca0 =(uint16_t *) calibTable->dacValA_m12[yi];
 80010f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	3304      	adds	r3, #4
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	4413      	add	r3, r2
 80010fa:	889b      	ldrh	r3, [r3, #4]
 80010fc:	837b      	strh	r3, [r7, #26]
        	 Ca1 = calibTable->dacValA_m12[yi+1];
 80010fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001100:	3301      	adds	r3, #1
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	3304      	adds	r3, #4
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	4413      	add	r3, r2
 800110a:	889b      	ldrh	r3, [r3, #4]
 800110c:	833b      	strh	r3, [r7, #24]
        	 y = ((float)((float)(((abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/STEP_CALIBRATE)*abs(MIN_VOLT_MODE_12))/(float)(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12)))/(float)(abs(MIN_VOLT_MODE_12)))*volt+((float)(((abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/STEP_CALIBRATE)*abs(MIN_VOLT_MODE_12))/(float)(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12)));
 800110e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fb42 	bl	800079c <__aeabi_i2f>
 8001118:	4603      	mov	r3, r0
 800111a:	4977      	ldr	r1, [pc, #476]	; (80012f8 <volt2dgt+0x2a8>)
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fb91 	bl	8000844 <__aeabi_fmul>
 8001122:	4603      	mov	r3, r0
 8001124:	4975      	ldr	r1, [pc, #468]	; (80012fc <volt2dgt+0x2ac>)
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fa84 	bl	8000634 <__addsf3>
 800112c:	4603      	mov	r3, r0
 800112e:	61fb      	str	r3, [r7, #28]
        	 a0 = (yi* STEP_CALIBRATE) - abs( MIN_VOLT_MODE_12);// FIXME: !!!!!не правильные значение 2080 вместо 2400 TODO: не правльно переводит значения!27*200 = 5400
 8001130:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001132:	4613      	mov	r3, r2
 8001134:	019b      	lsls	r3, r3, #6
 8001136:	4413      	add	r3, r2
 8001138:	011b      	lsls	r3, r3, #4
 800113a:	f5a3 5312 	sub.w	r3, r3, #9344	; 0x2480
 800113e:	3b10      	subs	r3, #16
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fb2b 	bl	800079c <__aeabi_i2f>
 8001146:	4603      	mov	r3, r0
 8001148:	617b      	str	r3, [r7, #20]
        	 a1 = ((yi+1) * STEP_CALIBRATE) -abs( MIN_VOLT_MODE_12);// TODO: не правльно переводит значения!28*200 = 5600
 800114a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800114c:	3301      	adds	r3, #1
 800114e:	b29b      	uxth	r3, r3
 8001150:	461a      	mov	r2, r3
 8001152:	0192      	lsls	r2, r2, #6
 8001154:	4413      	add	r3, r2
 8001156:	011b      	lsls	r3, r3, #4
 8001158:	b29b      	uxth	r3, r3
 800115a:	f5a3 5312 	sub.w	r3, r3, #9344	; 0x2480
 800115e:	3b10      	subs	r3, #16
 8001160:	827b      	strh	r3, [r7, #18]

        	 CodeX = ((((float)(Ca1-Ca0))/((float)a1-a0)))*(volt-a0)+Ca0;
 8001162:	8b3a      	ldrh	r2, [r7, #24]
 8001164:	8b7b      	ldrh	r3, [r7, #26]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fb17 	bl	800079c <__aeabi_i2f>
 800116e:	4604      	mov	r4, r0
 8001170:	8a7b      	ldrh	r3, [r7, #18]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fb0e 	bl	8000794 <__aeabi_ui2f>
 8001178:	4603      	mov	r3, r0
 800117a:	6979      	ldr	r1, [r7, #20]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fa57 	bl	8000630 <__aeabi_fsub>
 8001182:	4603      	mov	r3, r0
 8001184:	4619      	mov	r1, r3
 8001186:	4620      	mov	r0, r4
 8001188:	f7ff fc10 	bl	80009ac <__aeabi_fdiv>
 800118c:	4603      	mov	r3, r0
 800118e:	461c      	mov	r4, r3
 8001190:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fb01 	bl	800079c <__aeabi_i2f>
 800119a:	4603      	mov	r3, r0
 800119c:	6979      	ldr	r1, [r7, #20]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff fa46 	bl	8000630 <__aeabi_fsub>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4619      	mov	r1, r3
 80011a8:	4620      	mov	r0, r4
 80011aa:	f7ff fb4b 	bl	8000844 <__aeabi_fmul>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461c      	mov	r4, r3
 80011b2:	8b7b      	ldrh	r3, [r7, #26]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff faf1 	bl	800079c <__aeabi_i2f>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4619      	mov	r1, r3
 80011be:	4620      	mov	r0, r4
 80011c0:	f7ff fa38 	bl	8000634 <__addsf3>
 80011c4:	4603      	mov	r3, r0
 80011c6:	60fb      	str	r3, [r7, #12]
        	 return CodeX; //2400 -> 2662
 80011c8:	68f8      	ldr	r0, [r7, #12]
 80011ca:	f7ff fc8b 	bl	8000ae4 <__aeabi_f2uiz>
 80011ce:	4603      	mov	r3, r0
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	e1ca      	b.n	800156a <volt2dgt+0x51a>


             break;
         case m27:

        	 yi = floor(((float)((float)(((abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/STEP_CALIBRATE)*abs(MIN_VOLT_MODE_12))/(float)(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12)))/(float)(abs(MIN_VOLT_MODE_12)))*volt+((float)(((abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/STEP_CALIBRATE)*abs(MIN_VOLT_MODE_12))/(float)(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12)))); // искомый индекс в массиве!!! найти минимальное значение от него 26.5-->26 через floor
 80011d4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fadf 	bl	800079c <__aeabi_i2f>
 80011de:	4603      	mov	r3, r0
 80011e0:	4945      	ldr	r1, [pc, #276]	; (80012f8 <volt2dgt+0x2a8>)
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fb2e 	bl	8000844 <__aeabi_fmul>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4944      	ldr	r1, [pc, #272]	; (80012fc <volt2dgt+0x2ac>)
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fa21 	bl	8000634 <__addsf3>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff f917 	bl	8000428 <__aeabi_f2d>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	f00b fbed 	bl	800c9e0 <floor>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	f7ff f9eb 	bl	80005e8 <__aeabi_d2uiz>
 8001212:	4603      	mov	r3, r0
 8001214:	847b      	strh	r3, [r7, #34]	; 0x22
         	 Ca0 =(uint16_t *) calibTable->dacValA_m27[yi];
 8001216:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	322c      	adds	r2, #44	; 0x2c
 800121c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001220:	837b      	strh	r3, [r7, #26]
        	 Ca1 = calibTable->dacValA_m27[yi+1];
 8001222:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001224:	1c5a      	adds	r2, r3, #1
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	322c      	adds	r2, #44	; 0x2c
 800122a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800122e:	833b      	strh	r3, [r7, #24]
        	 y = ((float)((float)(((abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/STEP_CALIBRATE)*abs(MIN_VOLT_MODE_12))/(float)(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12)))/(float)(abs(MIN_VOLT_MODE_12)))*volt+((float)(((abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/STEP_CALIBRATE)*abs(MIN_VOLT_MODE_12))/(float)(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12)));
 8001230:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fab1 	bl	800079c <__aeabi_i2f>
 800123a:	4603      	mov	r3, r0
 800123c:	492e      	ldr	r1, [pc, #184]	; (80012f8 <volt2dgt+0x2a8>)
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fb00 	bl	8000844 <__aeabi_fmul>
 8001244:	4603      	mov	r3, r0
 8001246:	492d      	ldr	r1, [pc, #180]	; (80012fc <volt2dgt+0x2ac>)
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f9f3 	bl	8000634 <__addsf3>
 800124e:	4603      	mov	r3, r0
 8001250:	61fb      	str	r3, [r7, #28]
        	 a0 = (yi* STEP_CALIBRATE) - abs( MIN_VOLT_MODE_12);// FIXME: !!!!!не правильные значение 2080 вместо 2400 TODO: не правльно переводит значения!27*200 = 5400
 8001252:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001254:	4613      	mov	r3, r2
 8001256:	019b      	lsls	r3, r3, #6
 8001258:	4413      	add	r3, r2
 800125a:	011b      	lsls	r3, r3, #4
 800125c:	f5a3 5312 	sub.w	r3, r3, #9344	; 0x2480
 8001260:	3b10      	subs	r3, #16
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fa9a 	bl	800079c <__aeabi_i2f>
 8001268:	4603      	mov	r3, r0
 800126a:	617b      	str	r3, [r7, #20]
        	 a1 = ((yi+1) * STEP_CALIBRATE) -abs( MIN_VOLT_MODE_12);// TODO: не правльно переводит значения!28*200 = 5600
 800126c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800126e:	3301      	adds	r3, #1
 8001270:	b29b      	uxth	r3, r3
 8001272:	461a      	mov	r2, r3
 8001274:	0192      	lsls	r2, r2, #6
 8001276:	4413      	add	r3, r2
 8001278:	011b      	lsls	r3, r3, #4
 800127a:	b29b      	uxth	r3, r3
 800127c:	f5a3 5312 	sub.w	r3, r3, #9344	; 0x2480
 8001280:	3b10      	subs	r3, #16
 8001282:	827b      	strh	r3, [r7, #18]

        	 CodeX = ((((float)(Ca1-Ca0))/((float)a1-a0)))*(volt-a0)+Ca0;
 8001284:	8b3a      	ldrh	r2, [r7, #24]
 8001286:	8b7b      	ldrh	r3, [r7, #26]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fa86 	bl	800079c <__aeabi_i2f>
 8001290:	4604      	mov	r4, r0
 8001292:	8a7b      	ldrh	r3, [r7, #18]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fa7d 	bl	8000794 <__aeabi_ui2f>
 800129a:	4603      	mov	r3, r0
 800129c:	6979      	ldr	r1, [r7, #20]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f9c6 	bl	8000630 <__aeabi_fsub>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4619      	mov	r1, r3
 80012a8:	4620      	mov	r0, r4
 80012aa:	f7ff fb7f 	bl	80009ac <__aeabi_fdiv>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461c      	mov	r4, r3
 80012b2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fa70 	bl	800079c <__aeabi_i2f>
 80012bc:	4603      	mov	r3, r0
 80012be:	6979      	ldr	r1, [r7, #20]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f9b5 	bl	8000630 <__aeabi_fsub>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4619      	mov	r1, r3
 80012ca:	4620      	mov	r0, r4
 80012cc:	f7ff faba 	bl	8000844 <__aeabi_fmul>
 80012d0:	4603      	mov	r3, r0
 80012d2:	461c      	mov	r4, r3
 80012d4:	8b7b      	ldrh	r3, [r7, #26]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fa60 	bl	800079c <__aeabi_i2f>
 80012dc:	4603      	mov	r3, r0
 80012de:	4619      	mov	r1, r3
 80012e0:	4620      	mov	r0, r4
 80012e2:	f7ff f9a7 	bl	8000634 <__addsf3>
 80012e6:	4603      	mov	r3, r0
 80012e8:	60fb      	str	r3, [r7, #12]
        	 return CodeX; //2400 -> 2662
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f7ff fbfa 	bl	8000ae4 <__aeabi_f2uiz>
 80012f0:	4603      	mov	r3, r0
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	e139      	b.n	800156a <volt2dgt+0x51a>
 80012f6:	bf00      	nop
 80012f8:	3a7c0fc1 	.word	0x3a7c0fc1
 80012fc:	41100000 	.word	0x41100000
             break;
         }
         break;
     case 2:
         switch (m)
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 8096 	beq.w	8001434 <volt2dgt+0x3e4>
 8001308:	2b01      	cmp	r3, #1
 800130a:	f040 8128 	bne.w	800155e <volt2dgt+0x50e>
         {
         case m12:
        	 yi = floor(((float)((float)(((abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/STEP_CALIBRATE)*abs(MIN_VOLT_MODE_12))/(float)(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12)))/(float)(abs(MIN_VOLT_MODE_12)))*volt+((float)(((abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/STEP_CALIBRATE)*abs(MIN_VOLT_MODE_12))/(float)(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12)))); // искомый индекс в массиве!!! найти минимальное значение от него 26.5-->26 через floor
 800130e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fa42 	bl	800079c <__aeabi_i2f>
 8001318:	4603      	mov	r3, r0
 800131a:	4996      	ldr	r1, [pc, #600]	; (8001574 <volt2dgt+0x524>)
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fa91 	bl	8000844 <__aeabi_fmul>
 8001322:	4603      	mov	r3, r0
 8001324:	4994      	ldr	r1, [pc, #592]	; (8001578 <volt2dgt+0x528>)
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f984 	bl	8000634 <__addsf3>
 800132c:	4603      	mov	r3, r0
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f87a 	bl	8000428 <__aeabi_f2d>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4610      	mov	r0, r2
 800133a:	4619      	mov	r1, r3
 800133c:	f00b fb50 	bl	800c9e0 <floor>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff f94e 	bl	80005e8 <__aeabi_d2uiz>
 800134c:	4603      	mov	r3, r0
 800134e:	847b      	strh	r3, [r7, #34]	; 0x22
			 Ca0 =(uint16_t *) calibTable->dacValB_m12[yi];
 8001350:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	3318      	adds	r3, #24
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4413      	add	r3, r2
 800135a:	885b      	ldrh	r3, [r3, #2]
 800135c:	837b      	strh	r3, [r7, #26]
			 Ca1 = calibTable->dacValB_m12[yi+1];
 800135e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001360:	3301      	adds	r3, #1
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	3318      	adds	r3, #24
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	4413      	add	r3, r2
 800136a:	885b      	ldrh	r3, [r3, #2]
 800136c:	833b      	strh	r3, [r7, #24]
			 y = ((float)((float)(((abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/STEP_CALIBRATE)*abs(MIN_VOLT_MODE_12))/(float)(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12)))/(float)(abs(MIN_VOLT_MODE_12)))*volt+((float)(((abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/STEP_CALIBRATE)*abs(MIN_VOLT_MODE_12))/(float)(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12)));
 800136e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fa12 	bl	800079c <__aeabi_i2f>
 8001378:	4603      	mov	r3, r0
 800137a:	497e      	ldr	r1, [pc, #504]	; (8001574 <volt2dgt+0x524>)
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fa61 	bl	8000844 <__aeabi_fmul>
 8001382:	4603      	mov	r3, r0
 8001384:	497c      	ldr	r1, [pc, #496]	; (8001578 <volt2dgt+0x528>)
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f954 	bl	8000634 <__addsf3>
 800138c:	4603      	mov	r3, r0
 800138e:	61fb      	str	r3, [r7, #28]
			 a0 = (yi* STEP_CALIBRATE) - abs( MIN_VOLT_MODE_12);// FIXME: !!!!!не правильные значение 2080 вместо 2400 TODO: не правльно переводит значения!27*200 = 5400
 8001390:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001392:	4613      	mov	r3, r2
 8001394:	019b      	lsls	r3, r3, #6
 8001396:	4413      	add	r3, r2
 8001398:	011b      	lsls	r3, r3, #4
 800139a:	f5a3 5312 	sub.w	r3, r3, #9344	; 0x2480
 800139e:	3b10      	subs	r3, #16
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f9fb 	bl	800079c <__aeabi_i2f>
 80013a6:	4603      	mov	r3, r0
 80013a8:	617b      	str	r3, [r7, #20]
			 a1 = ((yi+1) * STEP_CALIBRATE) -abs( MIN_VOLT_MODE_12);// TODO: не правльно переводит значения!28*200 = 5600
 80013aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80013ac:	3301      	adds	r3, #1
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	461a      	mov	r2, r3
 80013b2:	0192      	lsls	r2, r2, #6
 80013b4:	4413      	add	r3, r2
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	f5a3 5312 	sub.w	r3, r3, #9344	; 0x2480
 80013be:	3b10      	subs	r3, #16
 80013c0:	827b      	strh	r3, [r7, #18]

			 CodeX = ((((float)(Ca1-Ca0))/((float)a1-a0)))*(volt-a0)+Ca0;
 80013c2:	8b3a      	ldrh	r2, [r7, #24]
 80013c4:	8b7b      	ldrh	r3, [r7, #26]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f9e7 	bl	800079c <__aeabi_i2f>
 80013ce:	4604      	mov	r4, r0
 80013d0:	8a7b      	ldrh	r3, [r7, #18]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f9de 	bl	8000794 <__aeabi_ui2f>
 80013d8:	4603      	mov	r3, r0
 80013da:	6979      	ldr	r1, [r7, #20]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f927 	bl	8000630 <__aeabi_fsub>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4619      	mov	r1, r3
 80013e6:	4620      	mov	r0, r4
 80013e8:	f7ff fae0 	bl	80009ac <__aeabi_fdiv>
 80013ec:	4603      	mov	r3, r0
 80013ee:	461c      	mov	r4, r3
 80013f0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f9d1 	bl	800079c <__aeabi_i2f>
 80013fa:	4603      	mov	r3, r0
 80013fc:	6979      	ldr	r1, [r7, #20]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f916 	bl	8000630 <__aeabi_fsub>
 8001404:	4603      	mov	r3, r0
 8001406:	4619      	mov	r1, r3
 8001408:	4620      	mov	r0, r4
 800140a:	f7ff fa1b 	bl	8000844 <__aeabi_fmul>
 800140e:	4603      	mov	r3, r0
 8001410:	461c      	mov	r4, r3
 8001412:	8b7b      	ldrh	r3, [r7, #26]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f9c1 	bl	800079c <__aeabi_i2f>
 800141a:	4603      	mov	r3, r0
 800141c:	4619      	mov	r1, r3
 800141e:	4620      	mov	r0, r4
 8001420:	f7ff f908 	bl	8000634 <__addsf3>
 8001424:	4603      	mov	r3, r0
 8001426:	60fb      	str	r3, [r7, #12]
			 return CodeX; //2400 -> 2662
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f7ff fb5b 	bl	8000ae4 <__aeabi_f2uiz>
 800142e:	4603      	mov	r3, r0
 8001430:	b29b      	uxth	r3, r3
 8001432:	e09a      	b.n	800156a <volt2dgt+0x51a>
             break;
         case m27:


        	 yi = floor(((float)((float)(((abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/STEP_CALIBRATE)*abs(MIN_VOLT_MODE_12))/(float)(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12)))/(float)(abs(MIN_VOLT_MODE_12)))*volt+((float)(((abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/STEP_CALIBRATE)*abs(MIN_VOLT_MODE_12))/(float)(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12)))); // искомый индекс в массиве!!! найти минимальное значение от него 26.5-->26 через floor
 8001434:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f9af 	bl	800079c <__aeabi_i2f>
 800143e:	4603      	mov	r3, r0
 8001440:	494c      	ldr	r1, [pc, #304]	; (8001574 <volt2dgt+0x524>)
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f9fe 	bl	8000844 <__aeabi_fmul>
 8001448:	4603      	mov	r3, r0
 800144a:	494b      	ldr	r1, [pc, #300]	; (8001578 <volt2dgt+0x528>)
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff f8f1 	bl	8000634 <__addsf3>
 8001452:	4603      	mov	r3, r0
 8001454:	4618      	mov	r0, r3
 8001456:	f7fe ffe7 	bl	8000428 <__aeabi_f2d>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	f00b fabd 	bl	800c9e0 <floor>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	f7ff f8bb 	bl	80005e8 <__aeabi_d2uiz>
 8001472:	4603      	mov	r3, r0
 8001474:	847b      	strh	r3, [r7, #34]	; 0x22
         	 Ca0 =(uint16_t *) calibTable->dacValB_m27[yi];
 8001476:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	332c      	adds	r3, #44	; 0x2c
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	889b      	ldrh	r3, [r3, #4]
 8001482:	837b      	strh	r3, [r7, #26]
        	 Ca1 = calibTable->dacValB_m27[yi+1];
 8001484:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001486:	3301      	adds	r3, #1
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	332c      	adds	r3, #44	; 0x2c
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4413      	add	r3, r2
 8001490:	889b      	ldrh	r3, [r3, #4]
 8001492:	833b      	strh	r3, [r7, #24]
        	 y = ((float)((float)(((abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/STEP_CALIBRATE)*abs(MIN_VOLT_MODE_12))/(float)(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12)))/(float)(abs(MIN_VOLT_MODE_12)))*volt+((float)(((abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/STEP_CALIBRATE)*abs(MIN_VOLT_MODE_12))/(float)(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12)));
 8001494:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff f97f 	bl	800079c <__aeabi_i2f>
 800149e:	4603      	mov	r3, r0
 80014a0:	4934      	ldr	r1, [pc, #208]	; (8001574 <volt2dgt+0x524>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff f9ce 	bl	8000844 <__aeabi_fmul>
 80014a8:	4603      	mov	r3, r0
 80014aa:	4933      	ldr	r1, [pc, #204]	; (8001578 <volt2dgt+0x528>)
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f8c1 	bl	8000634 <__addsf3>
 80014b2:	4603      	mov	r3, r0
 80014b4:	61fb      	str	r3, [r7, #28]
        	 a0 = (yi* STEP_CALIBRATE) - abs( MIN_VOLT_MODE_12);// FIXME: !!!!!не правильные значение 2080 вместо 2400 TODO: не правльно переводит значения!27*200 = 5400
 80014b6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80014b8:	4613      	mov	r3, r2
 80014ba:	019b      	lsls	r3, r3, #6
 80014bc:	4413      	add	r3, r2
 80014be:	011b      	lsls	r3, r3, #4
 80014c0:	f5a3 5312 	sub.w	r3, r3, #9344	; 0x2480
 80014c4:	3b10      	subs	r3, #16
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff f968 	bl	800079c <__aeabi_i2f>
 80014cc:	4603      	mov	r3, r0
 80014ce:	617b      	str	r3, [r7, #20]
        	 a1 = ((yi+1) * STEP_CALIBRATE) -abs( MIN_VOLT_MODE_12);// TODO: не правльно переводит значения!28*200 = 5600
 80014d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80014d2:	3301      	adds	r3, #1
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	461a      	mov	r2, r3
 80014d8:	0192      	lsls	r2, r2, #6
 80014da:	4413      	add	r3, r2
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	b29b      	uxth	r3, r3
 80014e0:	f5a3 5312 	sub.w	r3, r3, #9344	; 0x2480
 80014e4:	3b10      	subs	r3, #16
 80014e6:	827b      	strh	r3, [r7, #18]

        	 CodeX = ((((float)(Ca1-Ca0))/((float)a1-a0)))*(volt-a0)+Ca0;
 80014e8:	8b3a      	ldrh	r2, [r7, #24]
 80014ea:	8b7b      	ldrh	r3, [r7, #26]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f954 	bl	800079c <__aeabi_i2f>
 80014f4:	4604      	mov	r4, r0
 80014f6:	8a7b      	ldrh	r3, [r7, #18]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff f94b 	bl	8000794 <__aeabi_ui2f>
 80014fe:	4603      	mov	r3, r0
 8001500:	6979      	ldr	r1, [r7, #20]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff f894 	bl	8000630 <__aeabi_fsub>
 8001508:	4603      	mov	r3, r0
 800150a:	4619      	mov	r1, r3
 800150c:	4620      	mov	r0, r4
 800150e:	f7ff fa4d 	bl	80009ac <__aeabi_fdiv>
 8001512:	4603      	mov	r3, r0
 8001514:	461c      	mov	r4, r3
 8001516:	f9b7 3000 	ldrsh.w	r3, [r7]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff f93e 	bl	800079c <__aeabi_i2f>
 8001520:	4603      	mov	r3, r0
 8001522:	6979      	ldr	r1, [r7, #20]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f883 	bl	8000630 <__aeabi_fsub>
 800152a:	4603      	mov	r3, r0
 800152c:	4619      	mov	r1, r3
 800152e:	4620      	mov	r0, r4
 8001530:	f7ff f988 	bl	8000844 <__aeabi_fmul>
 8001534:	4603      	mov	r3, r0
 8001536:	461c      	mov	r4, r3
 8001538:	8b7b      	ldrh	r3, [r7, #26]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff f92e 	bl	800079c <__aeabi_i2f>
 8001540:	4603      	mov	r3, r0
 8001542:	4619      	mov	r1, r3
 8001544:	4620      	mov	r0, r4
 8001546:	f7ff f875 	bl	8000634 <__addsf3>
 800154a:	4603      	mov	r3, r0
 800154c:	60fb      	str	r3, [r7, #12]
        	 return CodeX; //2400 -> 2662
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f7ff fac8 	bl	8000ae4 <__aeabi_f2uiz>
 8001554:	4603      	mov	r3, r0
 8001556:	b29b      	uxth	r3, r3
 8001558:	e007      	b.n	800156a <volt2dgt+0x51a>
         break;
 800155a:	bf00      	nop
 800155c:	e000      	b.n	8001560 <volt2dgt+0x510>

             break;
         }

         break;
 800155e:	bf00      	nop
     }
     return CodeX;
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f7ff fabf 	bl	8000ae4 <__aeabi_f2uiz>
 8001566:	4603      	mov	r3, r0
 8001568:	b29b      	uxth	r3, r3
 }
 800156a:	4618      	mov	r0, r3
 800156c:	372c      	adds	r7, #44	; 0x2c
 800156e:	46bd      	mov	sp, r7
 8001570:	bd90      	pop	{r4, r7, pc}
 8001572:	bf00      	nop
 8001574:	3a7c0fc1 	.word	0x3a7c0fc1
 8001578:	41100000 	.word	0x41100000

0800157c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001588:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b00      	cmp	r3, #0
 8001592:	d013      	beq.n	80015bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001598:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800159c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d00b      	beq.n	80015bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80015a4:	e000      	b.n	80015a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80015a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80015a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f9      	beq.n	80015a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80015b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80015bc:	687b      	ldr	r3, [r7, #4]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <DWT_Init>:
#define SCB_DEMCR   *(volatile unsigned long *)0xE000EDFC

/******************************************************************************/
/* inline func */
__STATIC_INLINE void DWT_Init(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 80015cc:	4b07      	ldr	r3, [pc, #28]	; (80015ec <DWT_Init+0x24>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	4a06      	ldr	r2, [pc, #24]	; (80015ec <DWT_Init+0x24>)
 80015d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015d6:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <DWT_Init+0x28>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <DWT_Init+0x28>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6013      	str	r3, [r2, #0]
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	e000edf0 	.word	0xe000edf0
 80015f0:	e0001000 	.word	0xe0001000

080015f4 <_write>:
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */
//**************************************************************************
#if DEBUG_SWO
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	e009      	b.n	800161a <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1c5a      	adds	r2, r3, #1
 800160a:	60ba      	str	r2, [r7, #8]
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff ffb4 	bl	800157c <ITM_SendChar>
	for (int i = 0; i < len; i++)
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	3301      	adds	r3, #1
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	429a      	cmp	r2, r3
 8001620:	dbf1      	blt.n	8001606 <_write+0x12>
	}
	return len;
 8001622:	687b      	ldr	r3, [r7, #4]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <SetDacA>:
//}
//--------------------------------------------------------------------------
// Новая реализация. для приема значений в напряжениях, с поиском по структуре DevNVRAM выгруженной из памяти.
//TODO: Установка цап реализованно только для канала A и режима m12. Нужно переписать с учетом режима работы. режим работы определяет какую таблицу использовать.
void SetDacA(int16_t va,RelState m)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	460a      	mov	r2, r1
 8001636:	80fb      	strh	r3, [r7, #6]
 8001638:	4613      	mov	r3, r2
 800163a:	717b      	strb	r3, [r7, #5]
	VDAC_A = volt2dgt(&(DevNVRAM.calibration_table), m ,1, va);
 800163c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001640:	7979      	ldrb	r1, [r7, #5]
 8001642:	2201      	movs	r2, #1
 8001644:	4808      	ldr	r0, [pc, #32]	; (8001668 <SetDacA+0x3c>)
 8001646:	f7ff fd03 	bl	8001050 <volt2dgt>
 800164a:	4603      	mov	r3, r0
 800164c:	461a      	mov	r2, r3
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <SetDacA+0x40>)
 8001650:	801a      	strh	r2, [r3, #0]
	DAC_AD5322_Ch1(&hspi1, VDAC_A);
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <SetDacA+0x40>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	4619      	mov	r1, r3
 8001658:	4805      	ldr	r0, [pc, #20]	; (8001670 <SetDacA+0x44>)
 800165a:	f7ff fa8f 	bl	8000b7c <DAC_AD5322_Ch1>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200004f4 	.word	0x200004f4
 800166c:	20000256 	.word	0x20000256
 8001670:	20000974 	.word	0x20000974

08001674 <SetDacB>:
void SetDacB(int16_t vb, RelState m) //BUG: Не работает. Установка цап реализованно только для канала A и режима m12. Нужно переписать с учетом режима работы. режим работы определяет какую таблицу использовать.
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	460a      	mov	r2, r1
 800167e:	80fb      	strh	r3, [r7, #6]
 8001680:	4613      	mov	r3, r2
 8001682:	717b      	strb	r3, [r7, #5]
	VDAC_B = volt2dgt(&(DevNVRAM.calibration_table),m, 2, vb);
 8001684:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001688:	7979      	ldrb	r1, [r7, #5]
 800168a:	2202      	movs	r2, #2
 800168c:	4808      	ldr	r0, [pc, #32]	; (80016b0 <SetDacB+0x3c>)
 800168e:	f7ff fcdf 	bl	8001050 <volt2dgt>
 8001692:	4603      	mov	r3, r0
 8001694:	461a      	mov	r2, r3
 8001696:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <SetDacB+0x40>)
 8001698:	801a      	strh	r2, [r3, #0]
	DAC_AD5322_Ch2(&hspi1, VDAC_B);
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <SetDacB+0x40>)
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	4619      	mov	r1, r3
 80016a0:	4805      	ldr	r0, [pc, #20]	; (80016b8 <SetDacB+0x44>)
 80016a2:	f7ff fab2 	bl	8000c0a <DAC_AD5322_Ch2>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200004f4 	.word	0x200004f4
 80016b4:	20000258 	.word	0x20000258
 80016b8:	20000974 	.word	0x20000974

080016bc <SetAllDAC>:
void SetAllDAC()
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
	DAC_AD5322_Ch1Ch2(&hspi1, VDAC_A, VDAC_B);
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <SetAllDAC+0x18>)
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <SetAllDAC+0x1c>)
 80016c6:	8812      	ldrh	r2, [r2, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	4804      	ldr	r0, [pc, #16]	; (80016dc <SetAllDAC+0x20>)
 80016cc:	f7ff fae4 	bl	8000c98 <DAC_AD5322_Ch1Ch2>
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000256 	.word	0x20000256
 80016d8:	20000258 	.word	0x20000258
 80016dc:	20000974 	.word	0x20000974

080016e0 <GetDacA>:
uint16_t GetDacA()
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
	return VDAC_A;
 80016e4:	4b02      	ldr	r3, [pc, #8]	; (80016f0 <GetDacA+0x10>)
 80016e6:	881b      	ldrh	r3, [r3, #0]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	20000256 	.word	0x20000256

080016f4 <GetDacB>:
uint16_t GetDacB()
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
	return VDAC_B;
 80016f8:	4b02      	ldr	r3, [pc, #8]	; (8001704 <GetDacB+0x10>)
 80016fa:	881b      	ldrh	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	20000258 	.word	0x20000258

08001708 <GetBtnRunState>:

uint8_t btn3_long_rd = 0;
uint8_t btn3_short_rd = 0;
//--------------------------------------------------------------------------
uint8_t GetBtnRunState()
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x00)
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <GetBtnRunState+0x7c>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d10b      	bne.n	800172c <GetBtnRunState+0x24>
 8001714:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <GetBtnRunState+0x80>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d107      	bne.n	800172c <GetBtnRunState+0x24>
	{
		btn1_long_rd = 0;
 800171c:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <GetBtnRunState+0x80>)
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 8001722:	4b18      	ldr	r3, [pc, #96]	; (8001784 <GetBtnRunState+0x7c>)
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8001728:	2300      	movs	r3, #0
 800172a:	e026      	b.n	800177a <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x01 && btn1_long_rd == 0x00)
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <GetBtnRunState+0x7c>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d10b      	bne.n	800174c <GetBtnRunState+0x44>
 8001734:	4b14      	ldr	r3, [pc, #80]	; (8001788 <GetBtnRunState+0x80>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d107      	bne.n	800174c <GetBtnRunState+0x44>
	{
		btn1_long_rd = 0;
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <GetBtnRunState+0x80>)
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <GetBtnRunState+0x7c>)
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
		return 0x01;
 8001748:	2301      	movs	r3, #1
 800174a:	e016      	b.n	800177a <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x01)
 800174c:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <GetBtnRunState+0x7c>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10b      	bne.n	800176c <GetBtnRunState+0x64>
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <GetBtnRunState+0x80>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d107      	bne.n	800176c <GetBtnRunState+0x64>
	{
		btn1_long_rd = 0;
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <GetBtnRunState+0x80>)
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <GetBtnRunState+0x7c>)
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
		return 0x02;
 8001768:	2302      	movs	r3, #2
 800176a:	e006      	b.n	800177a <GetBtnRunState+0x72>
	}

	btn1_long_rd = 0;
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <GetBtnRunState+0x80>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
	btn1_short_rd = 0;
 8001772:	4b04      	ldr	r3, [pc, #16]	; (8001784 <GetBtnRunState+0x7c>)
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]

	//	if (short_state1 == 0x00 && long_state1 == 0x00)	return 0x00;
	//	if (short_state1 == 0x01 && long_state1 == 0x00)	return 0x01;
	//	if (short_state1 == 0x00 && long_state1 == 0x01)	return 0x02;
	return 0x00;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000261 	.word	0x20000261
 8001788:	20000260 	.word	0x20000260

0800178c <GetBtnUpState>:
//--------------------------------------------------------------------------
uint8_t GetBtnUpState()
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x00)
 8001790:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <GetBtnUpState+0x7c>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d10b      	bne.n	80017b0 <GetBtnUpState+0x24>
 8001798:	4b1c      	ldr	r3, [pc, #112]	; (800180c <GetBtnUpState+0x80>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d107      	bne.n	80017b0 <GetBtnUpState+0x24>
	{
		btn2_long_rd = 0;
 80017a0:	4b1a      	ldr	r3, [pc, #104]	; (800180c <GetBtnUpState+0x80>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 80017a6:	4b18      	ldr	r3, [pc, #96]	; (8001808 <GetBtnUpState+0x7c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
		return 0x00;
 80017ac:	2300      	movs	r3, #0
 80017ae:	e026      	b.n	80017fe <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x01 && btn2_long_rd == 0x00)
 80017b0:	4b15      	ldr	r3, [pc, #84]	; (8001808 <GetBtnUpState+0x7c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d10b      	bne.n	80017d0 <GetBtnUpState+0x44>
 80017b8:	4b14      	ldr	r3, [pc, #80]	; (800180c <GetBtnUpState+0x80>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d107      	bne.n	80017d0 <GetBtnUpState+0x44>
	{
		btn2_long_rd = 0;
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <GetBtnUpState+0x80>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <GetBtnUpState+0x7c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	701a      	strb	r2, [r3, #0]
		return 0x01;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e016      	b.n	80017fe <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x01)
 80017d0:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <GetBtnUpState+0x7c>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10b      	bne.n	80017f0 <GetBtnUpState+0x64>
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <GetBtnUpState+0x80>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d107      	bne.n	80017f0 <GetBtnUpState+0x64>
	{
		btn2_long_rd = 0;
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <GetBtnUpState+0x80>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <GetBtnUpState+0x7c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
		return 0x02;
 80017ec:	2302      	movs	r3, #2
 80017ee:	e006      	b.n	80017fe <GetBtnUpState+0x72>
	}

	btn2_long_rd = 0;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <GetBtnUpState+0x80>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]
	btn2_short_rd = 0;
 80017f6:	4b04      	ldr	r3, [pc, #16]	; (8001808 <GetBtnUpState+0x7c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]
	//	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	//	if (short_state2 == 0x00 && long_state2 == 0x00)	return 0x00;
	//	if (short_state2 == 0x01 && long_state2 == 0x00)	return 0x01;
	//	if (short_state2 == 0x00 && long_state2 == 0x01)	return 0x02;
	return 0x00;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20000269 	.word	0x20000269
 800180c:	20000268 	.word	0x20000268

08001810 <GetBtnDownState>:
//--------------------------------------------------------------------------
uint8_t GetBtnDownState()
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x00)
 8001814:	4b1d      	ldr	r3, [pc, #116]	; (800188c <GetBtnDownState+0x7c>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d10b      	bne.n	8001834 <GetBtnDownState+0x24>
 800181c:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <GetBtnDownState+0x80>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d107      	bne.n	8001834 <GetBtnDownState+0x24>
	{
		btn3_long_rd = 0;
 8001824:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <GetBtnDownState+0x80>)
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <GetBtnDownState+0x7c>)
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8001830:	2300      	movs	r3, #0
 8001832:	e026      	b.n	8001882 <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x01 && btn3_long_rd == 0x00)
 8001834:	4b15      	ldr	r3, [pc, #84]	; (800188c <GetBtnDownState+0x7c>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d10b      	bne.n	8001854 <GetBtnDownState+0x44>
 800183c:	4b14      	ldr	r3, [pc, #80]	; (8001890 <GetBtnDownState+0x80>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d107      	bne.n	8001854 <GetBtnDownState+0x44>
	{
		btn3_long_rd = 0;
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <GetBtnDownState+0x80>)
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <GetBtnDownState+0x7c>)
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
		return 0x01;
 8001850:	2301      	movs	r3, #1
 8001852:	e016      	b.n	8001882 <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x01)
 8001854:	4b0d      	ldr	r3, [pc, #52]	; (800188c <GetBtnDownState+0x7c>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d10b      	bne.n	8001874 <GetBtnDownState+0x64>
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <GetBtnDownState+0x80>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d107      	bne.n	8001874 <GetBtnDownState+0x64>
	{
		btn3_long_rd = 0;
 8001864:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <GetBtnDownState+0x80>)
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <GetBtnDownState+0x7c>)
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]
		return 0x02;
 8001870:	2302      	movs	r3, #2
 8001872:	e006      	b.n	8001882 <GetBtnDownState+0x72>
	}

	btn3_long_rd = 0;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <GetBtnDownState+0x80>)
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
	btn3_short_rd = 0;
 800187a:	4b04      	ldr	r3, [pc, #16]	; (800188c <GetBtnDownState+0x7c>)
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
	//	if (short_state3 == 0x00 && long_state3 == 0x00)	return 0x00;
	//	if (short_state3 == 0x01 && long_state3 == 0x00)	return 0x01;
	//	if (short_state3 == 0x00 && long_state3 == 0x01)	return 0x02;
	return 0x00;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000271 	.word	0x20000271
 8001890:	20000270 	.word	0x20000270

08001894 <EnableTIM3_PB4>:
// char trans2_str[64] = {
// 	0,
// };
//--------------------------------------------------------------------------
void EnableTIM3_PB4()
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
	timWork = 1;
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <EnableTIM3_PB4+0x14>)
 800189a:	2201      	movs	r2, #1
 800189c:	701a      	strb	r2, [r3, #0]
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20000272 	.word	0x20000272

080018ac <GetTIM3>:
uint16_t GetTIM3()
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
	return g_vTIM3_PB4;
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <GetTIM3+0x14>)
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	b29b      	uxth	r3, r3
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000274 	.word	0x20000274

080018c4 <resValTIM3_PB4>:
void resValTIM3_PB4()
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
	g_vTIM3_PB4 = 0;
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <resValTIM3_PB4+0x14>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	801a      	strh	r2, [r3, #0]
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000274 	.word	0x20000274

080018dc <EnableTIM4_PB6>:
//--------------------------------------------------------------------------
void EnableTIM4_PB6()
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
	timWork = 0;
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <EnableTIM4_PB6+0x14>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20000272 	.word	0x20000272

080018f4 <GetTIM4>:
uint16_t GetTIM4()
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
	return g_vTIM4_PB6;
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <GetTIM4+0x14>)
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	b29b      	uxth	r3, r3
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000276 	.word	0x20000276

0800190c <resValTIM4_PB6>:
void resValTIM4_PB6()
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
	g_vTIM4_PB6 = 0;
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <resValTIM4_PB6+0x14>)
 8001912:	2200      	movs	r2, #0
 8001914:	801a      	strh	r2, [r3, #0]
}
 8001916:	bf00      	nop
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000276 	.word	0x20000276

08001924 <HAL_TIM_IC_CaptureCallback>:
//--------------------------------------------------------------------------
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	uint16_t periodTIM3, pulseWidthTIM3, periodTIM4, pulseWidthTIM4;

	if (timWork)
 800192c:	4b2b      	ldr	r3, [pc, #172]	; (80019dc <HAL_TIM_IC_CaptureCallback+0xb8>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d027      	beq.n	8001986 <HAL_TIM_IC_CaptureCallback+0x62>
	{
		if (htim->Instance == TIM3)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a29      	ldr	r2, [pc, #164]	; (80019e0 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d149      	bne.n	80019d4 <HAL_TIM_IC_CaptureCallback+0xb0>
		{
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	7f1b      	ldrb	r3, [r3, #28]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d145      	bne.n	80019d4 <HAL_TIM_IC_CaptureCallback+0xb0>
			{
				periodTIM3 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8001948:	2100      	movs	r1, #0
 800194a:	4826      	ldr	r0, [pc, #152]	; (80019e4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800194c:	f005 fbb4 	bl	80070b8 <HAL_TIM_ReadCapturedValue>
 8001950:	4603      	mov	r3, r0
 8001952:	823b      	strh	r3, [r7, #16]
				pulseWidthTIM3 = HAL_TIM_ReadCapturedValue(&htim3,
 8001954:	2104      	movs	r1, #4
 8001956:	4823      	ldr	r0, [pc, #140]	; (80019e4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001958:	f005 fbae 	bl	80070b8 <HAL_TIM_ReadCapturedValue>
 800195c:	4603      	mov	r3, r0
 800195e:	81fb      	strh	r3, [r7, #14]
														   TIM_CHANNEL_2);

				TIM3->CNT = 0;
 8001960:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001962:	2200      	movs	r2, #0
 8001964:	625a      	str	r2, [r3, #36]	; 0x24

				int16_t deltaTIM3 = (int16_t)periodTIM3 - (int16_t)pulseWidthTIM3;
 8001966:	8a3a      	ldrh	r2, [r7, #16]
 8001968:	89fb      	ldrh	r3, [r7, #14]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	b29b      	uxth	r3, r3
 800196e:	81bb      	strh	r3, [r7, #12]
				deltaTIM3 = (deltaTIM3 < 0) ? (-1 * deltaTIM3) : deltaTIM3;
 8001970:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	bfb8      	it	lt
 8001978:	425b      	neglt	r3, r3
 800197a:	b29b      	uxth	r3, r3
 800197c:	81bb      	strh	r3, [r7, #12]
				g_vTIM3_PB4 = deltaTIM3;
 800197e:	89ba      	ldrh	r2, [r7, #12]
 8001980:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001982:	801a      	strh	r2, [r3, #0]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
				g_vTIM4_PB6 = deltaTIM4;
			}
		}
	}
}
 8001984:	e026      	b.n	80019d4 <HAL_TIM_IC_CaptureCallback+0xb0>
		if (htim->Instance == TIM4)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a18      	ldr	r2, [pc, #96]	; (80019ec <HAL_TIM_IC_CaptureCallback+0xc8>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d121      	bne.n	80019d4 <HAL_TIM_IC_CaptureCallback+0xb0>
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	7f1b      	ldrb	r3, [r3, #28]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d11d      	bne.n	80019d4 <HAL_TIM_IC_CaptureCallback+0xb0>
				periodTIM4 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8001998:	2100      	movs	r1, #0
 800199a:	4815      	ldr	r0, [pc, #84]	; (80019f0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800199c:	f005 fb8c 	bl	80070b8 <HAL_TIM_ReadCapturedValue>
 80019a0:	4603      	mov	r3, r0
 80019a2:	82fb      	strh	r3, [r7, #22]
				pulseWidthTIM4 = HAL_TIM_ReadCapturedValue(&htim4,
 80019a4:	2104      	movs	r1, #4
 80019a6:	4812      	ldr	r0, [pc, #72]	; (80019f0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80019a8:	f005 fb86 	bl	80070b8 <HAL_TIM_ReadCapturedValue>
 80019ac:	4603      	mov	r3, r0
 80019ae:	82bb      	strh	r3, [r7, #20]
				TIM4->CNT = 0;
 80019b0:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <HAL_TIM_IC_CaptureCallback+0xc8>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24
				int16_t deltaTIM4 = (int16_t)periodTIM4 - (int16_t)pulseWidthTIM4;
 80019b6:	8afa      	ldrh	r2, [r7, #22]
 80019b8:	8abb      	ldrh	r3, [r7, #20]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	b29b      	uxth	r3, r3
 80019be:	827b      	strh	r3, [r7, #18]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
 80019c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	bfb8      	it	lt
 80019c8:	425b      	neglt	r3, r3
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	827b      	strh	r3, [r7, #18]
				g_vTIM4_PB6 = deltaTIM4;
 80019ce:	8a7a      	ldrh	r2, [r7, #18]
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80019d2:	801a      	strh	r2, [r3, #0]
}
 80019d4:	bf00      	nop
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000272 	.word	0x20000272
 80019e0:	40000400 	.word	0x40000400
 80019e4:	200008fc 	.word	0x200008fc
 80019e8:	20000274 	.word	0x20000274
 80019ec:	40000800 	.word	0x40000800
 80019f0:	200004ac 	.word	0x200004ac
 80019f4:	20000276 	.word	0x20000276

080019f8 <GetADC>:
//**************************************************************************
#if TEST_ADC
volatile uint16_t g_VADC = 0;

uint16_t GetADC()
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
	return g_VADC;
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <GetADC+0x14>)
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	b29b      	uxth	r3, r3
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000278 	.word	0x20000278

08001a10 <HAL_ADC_ConvCpltCallback>:
//--------------------------------------------------------------------------
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a06      	ldr	r2, [pc, #24]	; (8001a38 <HAL_ADC_ConvCpltCallback+0x28>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d106      	bne.n	8001a30 <HAL_ADC_ConvCpltCallback+0x20>
	{
		g_VADC = HAL_ADC_GetValue(&hadc1); // глобальная переменна g_VADC вычитывается
 8001a22:	4806      	ldr	r0, [pc, #24]	; (8001a3c <HAL_ADC_ConvCpltCallback+0x2c>)
 8001a24:	f001 fcce 	bl	80033c4 <HAL_ADC_GetValue>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <HAL_ADC_ConvCpltCallback+0x30>)
 8001a2e:	801a      	strh	r2, [r3, #0]
	}
}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40012400 	.word	0x40012400
 8001a3c:	20000944 	.word	0x20000944
 8001a40:	20000278 	.word	0x20000278

08001a44 <runCommands>:
	Калибровка 
	На вход щупа подается семетричная пила с частотой 1кГц с оффестом установленным на ип.
	после компарирования сигнала МК измеряет длительность импульса
	т.к. 1 кГц соотвествет длительности в 500 мс то это означает что мы попапали в полуку офсета.
	--------------------------------------------------------------------------*/
{
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	6018      	str	r0, [r3, #0]
 8001a50:	463b      	mov	r3, r7
 8001a52:	6019      	str	r1, [r3, #0]
	if (*Len < 1)
 8001a54:	463b      	mov	r3, r7
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 83f0 	beq.w	8002240 <runCommands+0x7fc>

	//--------------------------------------------------------------------------

	uint8_t UserTxBufferFS[APP_TX_DATA_SIZE];
	uint16_t tVal16;
	uint8_t cmd = Buf[0];
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	//--------------------------------------------------------------------------
	if 		(cmd == 0x01)	// Relay:1 - 12V	[0x01 - 0x01]
 8001a6a:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d16c      	bne.n	8001b4c <runCommands+0x108>
	{
		if (*Len >= 2 && (Buf[1] == 0x01 || Buf[1] == 0x00))
 8001a72:	463b      	mov	r3, r7
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d957      	bls.n	8001b2c <runCommands+0xe8>
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	3301      	adds	r3, #1
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d005      	beq.n	8001a94 <runCommands+0x50>
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d14b      	bne.n	8001b2c <runCommands+0xe8>
		{
			if (Buf[1] == 0x01)
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d11f      	bne.n	8001ae0 <runCommands+0x9c>
			{
				#if TEST_RELAY
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	2104      	movs	r1, #4
 8001aa4:	48d6      	ldr	r0, [pc, #856]	; (8001e00 <runCommands+0x3bc>)
 8001aa6:	f002 fc86 	bl	80043b6 <HAL_GPIO_WritePin>
				RelayState = m12;
 8001aaa:	4bd6      	ldr	r3, [pc, #856]	; (8001e04 <runCommands+0x3c0>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	701a      	strb	r2, [r3, #0]
				printf("RelayState:12V - %d \n", RelayState);
 8001ab0:	4bd4      	ldr	r3, [pc, #848]	; (8001e04 <runCommands+0x3c0>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	48d4      	ldr	r0, [pc, #848]	; (8001e08 <runCommands+0x3c4>)
 8001ab8:	f009 fe6e 	bl	800b798 <iprintf>
				SetAllDAC();
 8001abc:	f7ff fdfe 	bl	80016bc <SetAllDAC>
				UserTxBufferFS[0] = cmd;
 8001ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac4:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001ac8:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 8001aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ace:	2200      	movs	r2, #0
 8001ad0:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 8001ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad6:	2102      	movs	r1, #2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f009 fa3f 	bl	800af5c <CDC_Transmit_FS>
				#endif /* TEST_RELAY */
				return;
 8001ade:	e3b4      	b.n	800224a <runCommands+0x806>
			}
			else if (Buf[1] == 0x00)
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d11f      	bne.n	8001b2c <runCommands+0xe8>
			{
				#if TEST_RELAY
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2104      	movs	r1, #4
 8001af0:	48c3      	ldr	r0, [pc, #780]	; (8001e00 <runCommands+0x3bc>)
 8001af2:	f002 fc60 	bl	80043b6 <HAL_GPIO_WritePin>
				RelayState = m27;
 8001af6:	4bc3      	ldr	r3, [pc, #780]	; (8001e04 <runCommands+0x3c0>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
				printf("RelayState:27V - %d \n", RelayState);
 8001afc:	4bc1      	ldr	r3, [pc, #772]	; (8001e04 <runCommands+0x3c0>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
 8001b02:	48c2      	ldr	r0, [pc, #776]	; (8001e0c <runCommands+0x3c8>)
 8001b04:	f009 fe48 	bl	800b798 <iprintf>
				SetAllDAC();
 8001b08:	f7ff fdd8 	bl	80016bc <SetAllDAC>

				UserTxBufferFS[0] = cmd;
 8001b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b10:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001b14:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 8001b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 8001b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b22:	2102      	movs	r1, #2
 8001b24:	4618      	mov	r0, r3
 8001b26:	f009 fa19 	bl	800af5c <CDC_Transmit_FS>
				#endif /* TEST_RELAY */
				return;
 8001b2a:	e38e      	b.n	800224a <runCommands+0x806>
			}
		}

		UserTxBufferFS[0] = cmd;
 8001b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b30:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001b34:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8001b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8001b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b42:	2102      	movs	r1, #2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f009 fa09 	bl	800af5c <CDC_Transmit_FS>
		return;
 8001b4a:	e37e      	b.n	800224a <runCommands+0x806>

		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x02)	// DA:4095
 8001b4c:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d141      	bne.n	8001bd8 <runCommands+0x194>
	{
		if (*Len >= 3)
 8001b54:	463b      	mov	r3, r7
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d92c      	bls.n	8001bb8 <runCommands+0x174>
		{
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 8001b5e:	f7ff feb1 	bl	80018c4 <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 8001b62:	f7ff fed3 	bl	800190c <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001b74:	801a      	strh	r2, [r3, #0]
			SetDacA(tVal16,RelayState);
 8001b76:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	b21b      	sxth	r3, r3
 8001b7e:	4aa1      	ldr	r2, [pc, #644]	; (8001e04 <runCommands+0x3c0>)
 8001b80:	7812      	ldrb	r2, [r2, #0]
 8001b82:	4611      	mov	r1, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fd51 	bl	800162c <SetDacA>
//						SetDacA(tVal16);

			printf("DacA: %d\n", tVal16);
 8001b8a:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	4619      	mov	r1, r3
 8001b92:	489f      	ldr	r0, [pc, #636]	; (8001e10 <runCommands+0x3cc>)
 8001b94:	f009 fe00 	bl	800b798 <iprintf>
			UserTxBufferFS[0] = cmd;
 8001b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9c:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001ba0:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 8001ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	705a      	strb	r2, [r3, #1]

			CDC_Transmit_FS(UserTxBufferFS, 2);
 8001baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bae:	2102      	movs	r1, #2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f009 f9d3 	bl	800af5c <CDC_Transmit_FS>
			return;
 8001bb6:	e348      	b.n	800224a <runCommands+0x806>
		}

		UserTxBufferFS[0] = cmd;
 8001bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bbc:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001bc0:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8001bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8001bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bce:	2102      	movs	r1, #2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f009 f9c3 	bl	800af5c <CDC_Transmit_FS>
		return;
 8001bd6:	e338      	b.n	800224a <runCommands+0x806>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x03)	// DB:4095
 8001bd8:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001bdc:	2b03      	cmp	r3, #3
 8001bde:	d141      	bne.n	8001c64 <runCommands+0x220>
	{
		if (*Len >= 3)
 8001be0:	463b      	mov	r3, r7
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d92c      	bls.n	8001c44 <runCommands+0x200>
		{
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 8001bea:	f7ff fe6b 	bl	80018c4 <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 8001bee:	f7ff fe8d 	bl	800190c <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001c00:	801a      	strh	r2, [r3, #0]
//			SetDacB(tVal16);
			SetDacB(tVal16,RelayState);
 8001c02:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	b21b      	sxth	r3, r3
 8001c0a:	4a7e      	ldr	r2, [pc, #504]	; (8001e04 <runCommands+0x3c0>)
 8001c0c:	7812      	ldrb	r2, [r2, #0]
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fd2f 	bl	8001674 <SetDacB>

			UserTxBufferFS[0] = cmd;
 8001c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c1a:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001c1e:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 8001c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c24:	2200      	movs	r2, #0
 8001c26:	705a      	strb	r2, [r3, #1]

			printf("DacB: %d \n", tVal16);
 8001c28:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4878      	ldr	r0, [pc, #480]	; (8001e14 <runCommands+0x3d0>)
 8001c32:	f009 fdb1 	bl	800b798 <iprintf>

			CDC_Transmit_FS(UserTxBufferFS, 2);
 8001c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3a:	2102      	movs	r1, #2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f009 f98d 	bl	800af5c <CDC_Transmit_FS>
			return;
 8001c42:	e302      	b.n	800224a <runCommands+0x806>
		}

		UserTxBufferFS[0] = cmd;
 8001c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c48:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001c4c:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8001c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c52:	2201      	movs	r2, #1
 8001c54:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8001c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5a:	2102      	movs	r1, #2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f009 f97d 	bl	800af5c <CDC_Transmit_FS>
		return;
 8001c62:	e2f2      	b.n	800224a <runCommands+0x806>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x04)	// ADC?
 8001c64:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d119      	bne.n	8001ca0 <runCommands+0x25c>
	{
		tVal16 = GetADC();
 8001c6c:	f7ff fec4 	bl	80019f8 <GetADC>
 8001c70:	4603      	mov	r3, r0
 8001c72:	461a      	mov	r2, r3
 8001c74:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001c78:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8001c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c7e:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001c82:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &tVal16, sizeof(tVal16));
 8001c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c88:	3301      	adds	r3, #1
 8001c8a:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8001c8e:	8812      	ldrh	r2, [r2, #0]
 8001c90:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 3);
 8001c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c96:	2103      	movs	r1, #3
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f009 f95f 	bl	800af5c <CDC_Transmit_FS>
		return;
 8001c9e:	e2d4      	b.n	800224a <runCommands+0x806>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x05)	// Relay?DA?DB?
 8001ca0:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001ca4:	2b05      	cmp	r3, #5
 8001ca6:	d12d      	bne.n	8001d04 <runCommands+0x2c0>
	{
		UserTxBufferFS[0] = cmd;
 8001ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cac:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001cb0:	701a      	strb	r2, [r3, #0]
		#if TEST_RELAY
		UserTxBufferFS[1] = RelayState;
 8001cb2:	4b54      	ldr	r3, [pc, #336]	; (8001e04 <runCommands+0x3c0>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cbc:	705a      	strb	r2, [r3, #1]
		#endif /* TEST_RELAY */

		tVal16 = GetDacA();
 8001cbe:	f7ff fd0f 	bl	80016e0 <GetDacA>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001cca:	801a      	strh	r2, [r3, #0]
		memcpy(UserTxBufferFS + 2, &tVal16, sizeof(tVal16));
 8001ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8001cd6:	8812      	ldrh	r2, [r2, #0]
 8001cd8:	801a      	strh	r2, [r3, #0]

		tVal16 = GetDacB();
 8001cda:	f7ff fd0b 	bl	80016f4 <GetDacB>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001ce6:	801a      	strh	r2, [r3, #0]
		memcpy(UserTxBufferFS + 4, &tVal16, sizeof(tVal16));
 8001ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cec:	3304      	adds	r3, #4
 8001cee:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8001cf2:	8812      	ldrh	r2, [r2, #0]
 8001cf4:	801a      	strh	r2, [r3, #0]

		CDC_Transmit_FS(UserTxBufferFS, 6);
 8001cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfa:	2106      	movs	r1, #6
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f009 f92d 	bl	800af5c <CDC_Transmit_FS>
		return;
 8001d02:	e2a2      	b.n	800224a <runCommands+0x806>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x06)	// Btn?
 8001d04:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001d08:	2b06      	cmp	r3, #6
 8001d0a:	d120      	bne.n	8001d4e <runCommands+0x30a>
	{
		UserTxBufferFS[0] = cmd;
 8001d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d10:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001d14:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = GetBtnRunState();
 8001d16:	f7ff fcf7 	bl	8001708 <GetBtnRunState>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d22:	705a      	strb	r2, [r3, #1]
		UserTxBufferFS[2] = GetBtnUpState();
 8001d24:	f7ff fd32 	bl	800178c <GetBtnUpState>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d30:	709a      	strb	r2, [r3, #2]
		UserTxBufferFS[3] = GetBtnDownState();
 8001d32:	f7ff fd6d 	bl	8001810 <GetBtnDownState>
 8001d36:	4603      	mov	r3, r0
 8001d38:	461a      	mov	r2, r3
 8001d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d3e:	70da      	strb	r2, [r3, #3]
		CDC_Transmit_FS(UserTxBufferFS, 4);
 8001d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d44:	2104      	movs	r1, #4
 8001d46:	4618      	mov	r0, r3
 8001d48:	f009 f908 	bl	800af5c <CDC_Transmit_FS>
		return;
 8001d4c:	e27d      	b.n	800224a <runCommands+0x806>
		//--------------------------------------------------------------------------
		

	// ID?
	} else if (cmd == 0x07) {
 8001d4e:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001d52:	2b07      	cmp	r3, #7
 8001d54:	d133      	bne.n	8001dbe <runCommands+0x37a>
		char str[] = "prb_v0.3";
 8001d56:	f107 0318 	add.w	r3, r7, #24
 8001d5a:	4a2f      	ldr	r2, [pc, #188]	; (8001e18 <runCommands+0x3d4>)
 8001d5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d5e:	c303      	stmia	r3!, {r0, r1}
 8001d60:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8001d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d66:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001d6a:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = strlen(str);
 8001d6c:	f107 0318 	add.w	r3, r7, #24
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe f9ed 	bl	8000150 <strlen>
 8001d76:	4603      	mov	r3, r0
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d7e:	705a      	strb	r2, [r3, #1]
		memcpy(UserTxBufferFS + 2, str, strlen(str));
 8001d80:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001d84:	3402      	adds	r4, #2
 8001d86:	f107 0318 	add.w	r3, r7, #24
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe f9e0 	bl	8000150 <strlen>
 8001d90:	4602      	mov	r2, r0
 8001d92:	f107 0318 	add.w	r3, r7, #24
 8001d96:	4619      	mov	r1, r3
 8001d98:	4620      	mov	r0, r4
 8001d9a:	f009 fce7 	bl	800b76c <memcpy>
		CDC_Transmit_FS(UserTxBufferFS, strlen(str) + 2);
 8001d9e:	f107 0318 	add.w	r3, r7, #24
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe f9d4 	bl	8000150 <strlen>
 8001da8:	4603      	mov	r3, r0
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	3302      	adds	r3, #2
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db4:	4611      	mov	r1, r2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f009 f8d0 	bl	800af5c <CDC_Transmit_FS>
 8001dbc:	e245      	b.n	800224a <runCommands+0x806>
	На вход щупа подается семетричная пила с частотой 1кГц с оффестом установленным на ип.
	после компарирования сигнала МК измеряет длительность импульса
	т.к. 1 кГц соотвествет длительности в 500 мс то это означает что мы попапали в полуку офсета.*/
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x08)	// Калибровка TIM inHL?
 8001dbe:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d12a      	bne.n	8001e1c <runCommands+0x3d8>
	{
		EnableTIM3_PB4();
 8001dc6:	f7ff fd65 	bl	8001894 <EnableTIM3_PB4>
		uint16_t temp = GetTIM3();
 8001dca:	f7ff fd6f 	bl	80018ac <GetTIM3>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	f107 0316 	add.w	r3, r7, #22
 8001dd6:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8001dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ddc:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001de0:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &temp, sizeof(uint16_t));
 8001de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de6:	3301      	adds	r3, #1
 8001de8:	f107 0216 	add.w	r2, r7, #22
 8001dec:	8812      	ldrh	r2, [r2, #0]
 8001dee:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 8001df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df4:	2103      	movs	r1, #3
 8001df6:	4618      	mov	r0, r3
 8001df8:	f009 f8b0 	bl	800af5c <CDC_Transmit_FS>
 8001dfc:	e225      	b.n	800224a <runCommands+0x806>
 8001dfe:	bf00      	nop
 8001e00:	40010800 	.word	0x40010800
 8001e04:	20000010 	.word	0x20000010
 8001e08:	0800caf8 	.word	0x0800caf8
 8001e0c:	0800cb10 	.word	0x0800cb10
 8001e10:	0800cb28 	.word	0x0800cb28
 8001e14:	0800cb34 	.word	0x0800cb34
 8001e18:	0800cb58 	.word	0x0800cb58
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x09)	// Калибровка TIM inLL?
 8001e1c:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001e20:	2b09      	cmp	r3, #9
 8001e22:	d11b      	bne.n	8001e5c <runCommands+0x418>
	{
		EnableTIM4_PB6();
 8001e24:	f7ff fd5a 	bl	80018dc <EnableTIM4_PB6>
		uint16_t temp = GetTIM4();
 8001e28:	f7ff fd64 	bl	80018f4 <GetTIM4>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	461a      	mov	r2, r3
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8001e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e3a:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001e3e:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &temp, sizeof(uint16_t));
 8001e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e44:	3301      	adds	r3, #1
 8001e46:	f107 0214 	add.w	r2, r7, #20
 8001e4a:	8812      	ldrh	r2, [r2, #0]
 8001e4c:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 8001e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e52:	2103      	movs	r1, #3
 8001e54:	4618      	mov	r0, r3
 8001e56:	f009 f881 	bl	800af5c <CDC_Transmit_FS>
 8001e5a:	e1f6      	b.n	800224a <runCommands+0x806>
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0A)	// TODO: Прием калибровочной таблицы [0x0A][1-4][offset][count][data] 	answer: [0x0A]+[1-4]+[offset]+[count]+[status] (0x00 - сработал; 0x01 - не сработал)
 8001e5c:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001e60:	2b0a      	cmp	r3, #10
 8001e62:	f040 81aa 	bne.w	80021ba <runCommands+0x776>
	{
		//Прием калибровочной таблицы [0x0A][1-4][offset][count][data]
		//FIXME: За одну посылку можно получить максимум 64 byte. Нужно организовать пакетную передачу
		uint16_t tOffset, tCount, tData;
		if (*Len >= 2 && Buf[1] >= 0x00 && Buf[1] <= 0x03)
 8001e66:	463b      	mov	r3, r7
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	f240 8194 	bls.w	800219a <runCommands+0x756>
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	3301      	adds	r3, #1
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	f200 818d 	bhi.w	800219a <runCommands+0x756>
		{
			if 		(Buf[1] == 0x00)	//А_m12
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	3301      	adds	r3, #1
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d15f      	bne.n	8001f4c <runCommands+0x508>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 8001e8c:	1d3b      	adds	r3, r7, #4
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	3302      	adds	r3, #2
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	f107 0312 	add.w	r3, r7, #18
 8001e9a:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	f107 0310 	add.w	r3, r7, #16
 8001eaa:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8001eac:	2300      	movs	r3, #0
 8001eae:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
 8001eb2:	e01f      	b.n	8001ef4 <runCommands+0x4b0>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8001eb4:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	3306      	adds	r3, #6
 8001ebc:	1d3a      	adds	r2, r7, #4
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	f107 030e 	add.w	r3, r7, #14
 8001eca:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValA_m12[i + tOffset] = tData;
 8001ecc:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8001ed0:	f107 0212 	add.w	r2, r7, #18
 8001ed4:	8812      	ldrh	r2, [r2, #0]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	f107 020e 	add.w	r2, r7, #14
 8001edc:	8811      	ldrh	r1, [r2, #0]
 8001ede:	4acd      	ldr	r2, [pc, #820]	; (8002214 <runCommands+0x7d0>)
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	460a      	mov	r2, r1
 8001ee8:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 8001eea:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8001eee:	3301      	adds	r3, #1
 8001ef0:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
 8001ef4:	f107 0310 	add.w	r3, r7, #16
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	f8b7 222e 	ldrh.w	r2, [r7, #558]	; 0x22e
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d3d8      	bcc.n	8001eb4 <runCommands+0x470>
				}

				changeTableFlag = true;
 8001f02:	4bc5      	ldr	r3, [pc, #788]	; (8002218 <runCommands+0x7d4>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	701a      	strb	r2, [r3, #0]
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 8001f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f0c:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001f10:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8001f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f16:	2201      	movs	r2, #1
 8001f18:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2			->4
 8001f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1e:	3302      	adds	r3, #2
 8001f20:	f107 0212 	add.w	r2, r7, #18
 8001f24:	8812      	ldrh	r2, [r2, #0]
 8001f26:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8001f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	f107 0210 	add.w	r2, r7, #16
 8001f32:	8812      	ldrh	r2, [r2, #0]
 8001f34:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1		->7
 8001f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8001f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f42:	2101      	movs	r1, #1
 8001f44:	4618      	mov	r0, r3
 8001f46:	f009 f809 	bl	800af5c <CDC_Transmit_FS>
				return;
 8001f4a:	e17e      	b.n	800224a <runCommands+0x806>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x01)	//B_m12
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	3301      	adds	r3, #1
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d15c      	bne.n	8002012 <runCommands+0x5ce>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 8001f58:	1d3b      	adds	r3, r7, #4
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	3302      	adds	r3, #2
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	f107 0312 	add.w	r3, r7, #18
 8001f66:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8001f68:	1d3b      	adds	r3, r7, #4
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	f107 0310 	add.w	r3, r7, #16
 8001f76:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
 8001f7e:	e01f      	b.n	8001fc0 <runCommands+0x57c>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8001f80:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	3306      	adds	r3, #6
 8001f88:	1d3a      	adds	r2, r7, #4
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	f107 030e 	add.w	r3, r7, #14
 8001f96:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValB_m12[i + tOffset] = tData;
 8001f98:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8001f9c:	f107 0212 	add.w	r2, r7, #18
 8001fa0:	8812      	ldrh	r2, [r2, #0]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f107 020e 	add.w	r2, r7, #14
 8001fa8:	8811      	ldrh	r1, [r2, #0]
 8001faa:	4a9a      	ldr	r2, [pc, #616]	; (8002214 <runCommands+0x7d0>)
 8001fac:	3318      	adds	r3, #24
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	460a      	mov	r2, r1
 8001fb4:	805a      	strh	r2, [r3, #2]
				for (uint16_t i = 0; i < tCount; i++)
 8001fb6:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8001fba:	3301      	adds	r3, #1
 8001fbc:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
 8001fc0:	f107 0310 	add.w	r3, r7, #16
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	f8b7 222c 	ldrh.w	r2, [r7, #556]	; 0x22c
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d3d8      	bcc.n	8001f80 <runCommands+0x53c>
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 8001fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd2:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001fd6:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8001fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fdc:	2201      	movs	r2, #1
 8001fde:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 8001fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	f107 0212 	add.w	r2, r7, #18
 8001fea:	8812      	ldrh	r2, [r2, #0]
 8001fec:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8001fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	f107 0210 	add.w	r2, r7, #16
 8001ff8:	8812      	ldrh	r2, [r2, #0]
 8001ffa:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 8001ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002000:	2200      	movs	r2, #0
 8002002:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8002004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002008:	2101      	movs	r1, #1
 800200a:	4618      	mov	r0, r3
 800200c:	f008 ffa6 	bl	800af5c <CDC_Transmit_FS>
				return;
 8002010:	e11b      	b.n	800224a <runCommands+0x806>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x02)	//A_m27
 8002012:	1d3b      	adds	r3, r7, #4
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	3301      	adds	r3, #1
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d15a      	bne.n	80020d4 <runCommands+0x690>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 800201e:	1d3b      	adds	r3, r7, #4
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	3302      	adds	r3, #2
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	b29a      	uxth	r2, r3
 8002028:	f107 0312 	add.w	r3, r7, #18
 800202c:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 800202e:	1d3b      	adds	r3, r7, #4
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	3304      	adds	r3, #4
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	b29a      	uxth	r2, r3
 8002038:	f107 0310 	add.w	r3, r7, #16
 800203c:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 800203e:	2300      	movs	r3, #0
 8002040:	f8a7 322a 	strh.w	r3, [r7, #554]	; 0x22a
 8002044:	e01d      	b.n	8002082 <runCommands+0x63e>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8002046:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	3306      	adds	r3, #6
 800204e:	1d3a      	adds	r2, r7, #4
 8002050:	6812      	ldr	r2, [r2, #0]
 8002052:	4413      	add	r3, r2
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	b29a      	uxth	r2, r3
 8002058:	f107 030e 	add.w	r3, r7, #14
 800205c:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValA_m27[i + tOffset] = tData;
 800205e:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 8002062:	f107 0212 	add.w	r2, r7, #18
 8002066:	8812      	ldrh	r2, [r2, #0]
 8002068:	4413      	add	r3, r2
 800206a:	f107 020e 	add.w	r2, r7, #14
 800206e:	8811      	ldrh	r1, [r2, #0]
 8002070:	4a68      	ldr	r2, [pc, #416]	; (8002214 <runCommands+0x7d0>)
 8002072:	332c      	adds	r3, #44	; 0x2c
 8002074:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for (uint16_t i = 0; i < tCount; i++)
 8002078:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 800207c:	3301      	adds	r3, #1
 800207e:	f8a7 322a 	strh.w	r3, [r7, #554]	; 0x22a
 8002082:	f107 0310 	add.w	r3, r7, #16
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	f8b7 222a 	ldrh.w	r2, [r7, #554]	; 0x22a
 800208c:	429a      	cmp	r2, r3
 800208e:	d3da      	bcc.n	8002046 <runCommands+0x602>
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 8002090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002094:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002098:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 800209a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800209e:	2201      	movs	r2, #1
 80020a0:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 80020a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a6:	3302      	adds	r3, #2
 80020a8:	f107 0212 	add.w	r2, r7, #18
 80020ac:	8812      	ldrh	r2, [r2, #0]
 80020ae:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 80020b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b4:	3304      	adds	r3, #4
 80020b6:	f107 0210 	add.w	r2, r7, #16
 80020ba:	8812      	ldrh	r2, [r2, #0]
 80020bc:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 80020be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c2:	2200      	movs	r2, #0
 80020c4:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 80020c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ca:	2101      	movs	r1, #1
 80020cc:	4618      	mov	r0, r3
 80020ce:	f008 ff45 	bl	800af5c <CDC_Transmit_FS>
				return;
 80020d2:	e0ba      	b.n	800224a <runCommands+0x806>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x03)	//B_m27
 80020d4:	1d3b      	adds	r3, r7, #4
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	3301      	adds	r3, #1
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d15c      	bne.n	800219a <runCommands+0x756>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 80020e0:	1d3b      	adds	r3, r7, #4
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	3302      	adds	r3, #2
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	f107 0312 	add.w	r3, r7, #18
 80020ee:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 80020f0:	1d3b      	adds	r3, r7, #4
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	3304      	adds	r3, #4
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	f107 0310 	add.w	r3, r7, #16
 80020fe:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8002100:	2300      	movs	r3, #0
 8002102:	f8a7 3228 	strh.w	r3, [r7, #552]	; 0x228
 8002106:	e01f      	b.n	8002148 <runCommands+0x704>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8002108:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	3306      	adds	r3, #6
 8002110:	1d3a      	adds	r2, r7, #4
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	4413      	add	r3, r2
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	b29a      	uxth	r2, r3
 800211a:	f107 030e 	add.w	r3, r7, #14
 800211e:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValB_m27[i + tOffset] = tData;
 8002120:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8002124:	f107 0212 	add.w	r2, r7, #18
 8002128:	8812      	ldrh	r2, [r2, #0]
 800212a:	4413      	add	r3, r2
 800212c:	f107 020e 	add.w	r2, r7, #14
 8002130:	8811      	ldrh	r1, [r2, #0]
 8002132:	4a38      	ldr	r2, [pc, #224]	; (8002214 <runCommands+0x7d0>)
 8002134:	332c      	adds	r3, #44	; 0x2c
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	4413      	add	r3, r2
 800213a:	460a      	mov	r2, r1
 800213c:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 800213e:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8002142:	3301      	adds	r3, #1
 8002144:	f8a7 3228 	strh.w	r3, [r7, #552]	; 0x228
 8002148:	f107 0310 	add.w	r3, r7, #16
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 8002152:	429a      	cmp	r2, r3
 8002154:	d3d8      	bcc.n	8002108 <runCommands+0x6c4>
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 8002156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800215a:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800215e:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8002160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002164:	2201      	movs	r2, #1
 8002166:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 8002168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800216c:	3302      	adds	r3, #2
 800216e:	f107 0212 	add.w	r2, r7, #18
 8002172:	8812      	ldrh	r2, [r2, #0]
 8002174:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8002176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800217a:	3304      	adds	r3, #4
 800217c:	f107 0210 	add.w	r2, r7, #16
 8002180:	8812      	ldrh	r2, [r2, #0]
 8002182:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 8002184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002188:	2200      	movs	r2, #0
 800218a:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 800218c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002190:	2101      	movs	r1, #1
 8002192:	4618      	mov	r0, r3
 8002194:	f008 fee2 	bl	800af5c <CDC_Transmit_FS>
				return;
 8002198:	e057      	b.n	800224a <runCommands+0x806>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
		}
		UserTxBufferFS[0] = cmd;
 800219a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800219e:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80021a2:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 80021a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a8:	2201      	movs	r2, #1
 80021aa:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 80021ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b0:	2102      	movs	r1, #2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f008 fed2 	bl	800af5c <CDC_Transmit_FS>
		return;
 80021b8:	e047      	b.n	800224a <runCommands+0x806>
		//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0B)	// TODO: Отправка CRC 1-4 таблицы [0x0B][1-4][CRC(1-4)]	answer:
 80021ba:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80021be:	2b0b      	cmp	r3, #11
 80021c0:	d040      	beq.n	8002244 <runCommands+0x800>
	{
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0C)	// TODO: Прием длины калибровочной таблицы [0x0C][Длина][???]
 80021c2:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80021c6:	2b0c      	cmp	r3, #12
 80021c8:	d03e      	beq.n	8002248 <runCommands+0x804>
	{
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0D)	// TODO: Запись во флеш калибровочной таблицы [0x0D] data: 1B (0x00 - успешно; 0x01 - ошибка при записи)	answer: 0x0D + 1B status
 80021ca:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80021ce:	2b0d      	cmp	r3, #13
 80021d0:	d13b      	bne.n	800224a <runCommands+0x806>
	{
		if (*Len >= 2 && (Buf[1] == 0x02))
 80021d2:	463b      	mov	r3, r7
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d921      	bls.n	8002220 <runCommands+0x7dc>
 80021dc:	1d3b      	adds	r3, r7, #4
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	3301      	adds	r3, #1
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d11b      	bne.n	8002220 <runCommands+0x7dc>
		{
			//TODO: Функция записи фо флеш. FIXME: не работает запись фо флеш!
			 changeTableFlag = true;
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <runCommands+0x7d4>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	701a      	strb	r2, [r3, #0]
			// writeTableInFlash();
			printf("changeTableFlag = true!");
 80021ee:	480b      	ldr	r0, [pc, #44]	; (800221c <runCommands+0x7d8>)
 80021f0:	f009 fad2 	bl	800b798 <iprintf>
			UserTxBufferFS[0] = cmd;
 80021f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f8:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80021fc:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 80021fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002202:	2200      	movs	r2, #0
 8002204:	705a      	strb	r2, [r3, #1]
			CDC_Transmit_FS(UserTxBufferFS, 2);
 8002206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220a:	2102      	movs	r1, #2
 800220c:	4618      	mov	r0, r3
 800220e:	f008 fea5 	bl	800af5c <CDC_Transmit_FS>
			return;
 8002212:	e01a      	b.n	800224a <runCommands+0x806>
 8002214:	200004f4 	.word	0x200004f4
 8002218:	20000254 	.word	0x20000254
 800221c:	0800cb40 	.word	0x0800cb40
		}
 		
		//--------------------------------------------------------------------------
		UserTxBufferFS[0] = cmd;
 8002220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002224:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002228:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 800222a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800222e:	2201      	movs	r2, #1
 8002230:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8002232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002236:	2102      	movs	r1, #2
 8002238:	4618      	mov	r0, r3
 800223a:	f008 fe8f 	bl	800af5c <CDC_Transmit_FS>
		return;
 800223e:	e004      	b.n	800224a <runCommands+0x806>
		return;
 8002240:	bf00      	nop
 8002242:	e002      	b.n	800224a <runCommands+0x806>
		return;
 8002244:	bf00      	nop
 8002246:	e000      	b.n	800224a <runCommands+0x806>
		return;
 8002248:	bf00      	nop
		//--------------------------------------------------------------------------
	}
//-------------------------------------------------------------------------
	
}
 800224a:	f507 770d 	add.w	r7, r7, #564	; 0x234
 800224e:	46bd      	mov	sp, r7
 8002250:	bd90      	pop	{r4, r7, pc}
 8002252:	bf00      	nop

08002254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800225a:	f000 fec3 	bl	8002fe4 <HAL_Init>

  /* USER CODE BEGIN Init */
//--------------------------------------------------------------------------
#if DWT_INIT
	DWT_Init();
 800225e:	f7ff f9b3 	bl	80015c8 <DWT_Init>
	//--------------------------------------------------------------------------

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002262:	f000 f99d 	bl	80025a0 <SystemClock_Config>
//-------------------------------------------------------------------------

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002266:	f000 fb47 	bl	80028f8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800226a:	f000 fa49 	bl	8002700 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800226e:	f008 fdb3 	bl	800add8 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8002272:	f000 f9f3 	bl	800265c <MX_ADC1_Init>
  MX_TIM3_Init();
 8002276:	f000 fa7b 	bl	8002770 <MX_TIM3_Init>
  MX_TIM4_Init();
 800227a:	f000 fadb 	bl	8002834 <MX_TIM4_Init>
  MX_CRC_Init();
 800227e:	f000 fa2b 	bl	80026d8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
	//**************************************************************************
#if TEST_UID
	sprintf(buffer, "UID %x-%x-%lx-%lx\n", *idBase0, *idBase1, *idBase2, *idBase3);
 8002282:	4bad      	ldr	r3, [pc, #692]	; (8002538 <main+0x2e4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	4619      	mov	r1, r3
 800228a:	4bac      	ldr	r3, [pc, #688]	; (800253c <main+0x2e8>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	4bab      	ldr	r3, [pc, #684]	; (8002540 <main+0x2ec>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4aaa      	ldr	r2, [pc, #680]	; (8002544 <main+0x2f0>)
 800229a:	6812      	ldr	r2, [r2, #0]
 800229c:	6812      	ldr	r2, [r2, #0]
 800229e:	9201      	str	r2, [sp, #4]
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	4603      	mov	r3, r0
 80022a4:	460a      	mov	r2, r1
 80022a6:	49a8      	ldr	r1, [pc, #672]	; (8002548 <main+0x2f4>)
 80022a8:	48a8      	ldr	r0, [pc, #672]	; (800254c <main+0x2f8>)
 80022aa:	f009 fa8d 	bl	800b7c8 <siprintf>
	printf(buffer);
 80022ae:	48a7      	ldr	r0, [pc, #668]	; (800254c <main+0x2f8>)
 80022b0:	f009 fa72 	bl	800b798 <iprintf>
#endif /* TEST_UID */

	//**************************************************************************
#if TEST_TIM_CAPTURE
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80022b4:	2100      	movs	r1, #0
 80022b6:	48a6      	ldr	r0, [pc, #664]	; (8002550 <main+0x2fc>)
 80022b8:	f004 fc5c 	bl	8006b74 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80022bc:	2104      	movs	r1, #4
 80022be:	48a4      	ldr	r0, [pc, #656]	; (8002550 <main+0x2fc>)
 80022c0:	f004 fc58 	bl	8006b74 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80022c4:	2100      	movs	r1, #0
 80022c6:	48a3      	ldr	r0, [pc, #652]	; (8002554 <main+0x300>)
 80022c8:	f004 fc54 	bl	8006b74 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 80022cc:	2104      	movs	r1, #4
 80022ce:	48a1      	ldr	r0, [pc, #644]	; (8002554 <main+0x300>)
 80022d0:	f004 fc50 	bl	8006b74 <HAL_TIM_IC_Start_IT>
#endif /* TEST_TIM_CAPTURE */
//--------------------------------------------------------------------------
#if TEST_DAC
	SetAllDAC();
 80022d4:	f7ff f9f2 	bl	80016bc <SetAllDAC>
#endif /* TEST_DAC */
	   //**************************************************************************
#if TEST_ADC
	HAL_ADCEx_Calibration_Start(&hadc1);
 80022d8:	489f      	ldr	r0, [pc, #636]	; (8002558 <main+0x304>)
 80022da:	f001 facf 	bl	800387c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_IT(&hadc1);
 80022de:	489e      	ldr	r0, [pc, #632]	; (8002558 <main+0x304>)
 80022e0:	f000 ffba 	bl	8003258 <HAL_ADC_Start_IT>
#endif /* TEST_ADC */
//**************************************************************************
#if TEST_FLASH_TABLE

//	flash_fill_calibTable();
	crete_calibration_table(&DevNVRAM.calibration_table);
 80022e4:	489d      	ldr	r0, [pc, #628]	; (800255c <main+0x308>)
 80022e6:	f7fe fdf3 	bl	8000ed0 <crete_calibration_table>
	flash_write_calibTable();
 80022ea:	f7fe fd59 	bl	8000da0 <flash_write_calibTable>
//	SetDacA(2080,m12);
//	SetDacA(3120,m12);
	SetDacA(2400,m12);
 80022ee:	2101      	movs	r1, #1
 80022f0:	f44f 6016 	mov.w	r0, #2400	; 0x960
 80022f4:	f7ff f99a 	bl	800162c <SetDacA>
	SetDacA(3120,m12);
 80022f8:	2101      	movs	r1, #1
 80022fa:	f44f 6043 	mov.w	r0, #3120	; 0xc30
 80022fe:	f7ff f995 	bl	800162c <SetDacA>
	SetDacB(2400,m12);
 8002302:	2101      	movs	r1, #1
 8002304:	f44f 6016 	mov.w	r0, #2400	; 0x960
 8002308:	f7ff f9b4 	bl	8001674 <SetDacB>
	SetDacB(3120,m12);
 800230c:	2101      	movs	r1, #1
 800230e:	f44f 6043 	mov.w	r0, #3120	; 0xc30
 8002312:	f7ff f9af 	bl	8001674 <SetDacB>

	SetDacA(2400,m27);
 8002316:	2100      	movs	r1, #0
 8002318:	f44f 6016 	mov.w	r0, #2400	; 0x960
 800231c:	f7ff f986 	bl	800162c <SetDacA>
	SetDacA(3120,m27);
 8002320:	2100      	movs	r1, #0
 8002322:	f44f 6043 	mov.w	r0, #3120	; 0xc30
 8002326:	f7ff f981 	bl	800162c <SetDacA>
	SetDacB(2400,m27);
 800232a:	2100      	movs	r1, #0
 800232c:	f44f 6016 	mov.w	r0, #2400	; 0x960
 8002330:	f7ff f9a0 	bl	8001674 <SetDacB>
	SetDacB(3120,m27);
 8002334:	2100      	movs	r1, #0
 8002336:	f44f 6043 	mov.w	r0, #3120	; 0xc30
 800233a:	f7ff f99b 	bl	8001674 <SetDacB>
    // TODO: Надо по запросе какая версия калиброчной табцы высылать значения дефолтной таблице...
    //--------------------------------------------------------------------------
*/
#endif /* TEST_FLASH_TABLE */

	uint32_t _timer = 0; // для таймера в 10 сек
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// Циклически проверяем соотвествует ли информация в памяти массиву настроек?
		if ((HAL_GetTick() - _timer) > 10000) // интервал  10сек
 8002342:	f000 fea7 	bl	8003094 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002350:	4293      	cmp	r3, r2
 8002352:	d902      	bls.n	800235a <main+0x106>
				HAL_Delay(100);
				//--------------------------------------------------------------------------
				printf("flash done");
			}*/
#endif /* TEST_FLASH_TABLE */
			_timer = HAL_GetTick();
 8002354:	f000 fe9e 	bl	8003094 <HAL_GetTick>
 8002358:	60f8      	str	r0, [r7, #12]
		}

//**************************************************************************
#if TEST_READ_BTN //TODO: данная реализация плохо отрабатывает! TODO: Нужно переделать на EXTI+TIM

		uint32_t ms = HAL_GetTick();
 800235a:	f000 fe9b 	bl	8003094 <HAL_GetTick>
 800235e:	60b8      	str	r0, [r7, #8]
		uint8_t key1_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12); // подставить свой пин //TODO: Проверить работу BACK key!
 8002360:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002364:	487e      	ldr	r0, [pc, #504]	; (8002560 <main+0x30c>)
 8002366:	f002 f80f 	bl	8004388 <HAL_GPIO_ReadPin>
 800236a:	4603      	mov	r3, r0
 800236c:	71fb      	strb	r3, [r7, #7]

		if (key1_state == 0 && !short_state1 && (ms - time_key1) > 50)
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d113      	bne.n	800239c <main+0x148>
 8002374:	4b7b      	ldr	r3, [pc, #492]	; (8002564 <main+0x310>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10f      	bne.n	800239c <main+0x148>
 800237c:	4b7a      	ldr	r3, [pc, #488]	; (8002568 <main+0x314>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b32      	cmp	r3, #50	; 0x32
 8002386:	d909      	bls.n	800239c <main+0x148>
		{
			short_state1 = 1;
 8002388:	4b76      	ldr	r3, [pc, #472]	; (8002564 <main+0x310>)
 800238a:	2201      	movs	r2, #1
 800238c:	701a      	strb	r2, [r3, #0]
			long_state1 = 0;
 800238e:	4b77      	ldr	r3, [pc, #476]	; (800256c <main+0x318>)
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 8002394:	4a74      	ldr	r2, [pc, #464]	; (8002568 <main+0x314>)
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	e02e      	b.n	80023fa <main+0x1a6>
		}
		else if (key1_state == 0 && !long_state1 && (ms - time_key1) > KEY_LONG_DELAY)
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d111      	bne.n	80023c6 <main+0x172>
 80023a2:	4b72      	ldr	r3, [pc, #456]	; (800256c <main+0x318>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10d      	bne.n	80023c6 <main+0x172>
 80023aa:	4b6f      	ldr	r3, [pc, #444]	; (8002568 <main+0x314>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023b6:	d906      	bls.n	80023c6 <main+0x172>
		{
			long_state1 = 1;
 80023b8:	4b6c      	ldr	r3, [pc, #432]	; (800256c <main+0x318>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn1_long_rd = 1;
 80023be:	4b6c      	ldr	r3, [pc, #432]	; (8002570 <main+0x31c>)
 80023c0:	2201      	movs	r2, #1
 80023c2:	701a      	strb	r2, [r3, #0]
 80023c4:	e019      	b.n	80023fa <main+0x1a6>
		}
		else if (key1_state == 1 && short_state1 && (ms - time_key1) > 50)
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d116      	bne.n	80023fa <main+0x1a6>
 80023cc:	4b65      	ldr	r3, [pc, #404]	; (8002564 <main+0x310>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d012      	beq.n	80023fa <main+0x1a6>
 80023d4:	4b64      	ldr	r3, [pc, #400]	; (8002568 <main+0x314>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b32      	cmp	r3, #50	; 0x32
 80023de:	d90c      	bls.n	80023fa <main+0x1a6>
		{
			short_state1 = 0;
 80023e0:	4b60      	ldr	r3, [pc, #384]	; (8002564 <main+0x310>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 80023e6:	4a60      	ldr	r2, [pc, #384]	; (8002568 <main+0x314>)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	6013      	str	r3, [r2, #0]

			if (!long_state1)
 80023ec:	4b5f      	ldr	r3, [pc, #380]	; (800256c <main+0x318>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d102      	bne.n	80023fa <main+0x1a6>
			{
				// действие на короткое нажатие
				btn1_short_rd = 1;
 80023f4:	4b5f      	ldr	r3, [pc, #380]	; (8002574 <main+0x320>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	701a      	strb	r2, [r3, #0]
			}
		}
		uint8_t key2_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); // подставить свой пин
 80023fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023fe:	4858      	ldr	r0, [pc, #352]	; (8002560 <main+0x30c>)
 8002400:	f001 ffc2 	bl	8004388 <HAL_GPIO_ReadPin>
 8002404:	4603      	mov	r3, r0
 8002406:	71bb      	strb	r3, [r7, #6]

		if (key2_state == 0 && !short_state2 && (ms - time_key2) > 50)
 8002408:	79bb      	ldrb	r3, [r7, #6]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d113      	bne.n	8002436 <main+0x1e2>
 800240e:	4b5a      	ldr	r3, [pc, #360]	; (8002578 <main+0x324>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10f      	bne.n	8002436 <main+0x1e2>
 8002416:	4b59      	ldr	r3, [pc, #356]	; (800257c <main+0x328>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b32      	cmp	r3, #50	; 0x32
 8002420:	d909      	bls.n	8002436 <main+0x1e2>
		{
			short_state2 = 1;
 8002422:	4b55      	ldr	r3, [pc, #340]	; (8002578 <main+0x324>)
 8002424:	2201      	movs	r2, #1
 8002426:	701a      	strb	r2, [r3, #0]
			long_state2 = 0;
 8002428:	4b55      	ldr	r3, [pc, #340]	; (8002580 <main+0x32c>)
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 800242e:	4a53      	ldr	r2, [pc, #332]	; (800257c <main+0x328>)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	e02e      	b.n	8002494 <main+0x240>
		}
		else if (key2_state == 0 && !long_state2 && (ms - time_key2) > KEY_LONG_DELAY)
 8002436:	79bb      	ldrb	r3, [r7, #6]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d111      	bne.n	8002460 <main+0x20c>
 800243c:	4b50      	ldr	r3, [pc, #320]	; (8002580 <main+0x32c>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10d      	bne.n	8002460 <main+0x20c>
 8002444:	4b4d      	ldr	r3, [pc, #308]	; (800257c <main+0x328>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002450:	d906      	bls.n	8002460 <main+0x20c>
		{
			long_state2 = 1;
 8002452:	4b4b      	ldr	r3, [pc, #300]	; (8002580 <main+0x32c>)
 8002454:	2201      	movs	r2, #1
 8002456:	701a      	strb	r2, [r3, #0]

			// действие на длинное нажатие
			btn2_long_rd = 1;
 8002458:	4b4a      	ldr	r3, [pc, #296]	; (8002584 <main+0x330>)
 800245a:	2201      	movs	r2, #1
 800245c:	701a      	strb	r2, [r3, #0]
 800245e:	e019      	b.n	8002494 <main+0x240>
		}
		else if (key2_state == 1 && short_state2 && (ms - time_key2) > 50)
 8002460:	79bb      	ldrb	r3, [r7, #6]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d116      	bne.n	8002494 <main+0x240>
 8002466:	4b44      	ldr	r3, [pc, #272]	; (8002578 <main+0x324>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d012      	beq.n	8002494 <main+0x240>
 800246e:	4b43      	ldr	r3, [pc, #268]	; (800257c <main+0x328>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b32      	cmp	r3, #50	; 0x32
 8002478:	d90c      	bls.n	8002494 <main+0x240>
		{
			short_state2 = 0;
 800247a:	4b3f      	ldr	r3, [pc, #252]	; (8002578 <main+0x324>)
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 8002480:	4a3e      	ldr	r2, [pc, #248]	; (800257c <main+0x328>)
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	6013      	str	r3, [r2, #0]

			if (!long_state2)
 8002486:	4b3e      	ldr	r3, [pc, #248]	; (8002580 <main+0x32c>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d102      	bne.n	8002494 <main+0x240>
			{
				// действие на короткое нажатие
				btn2_short_rd = 1;
 800248e:	4b3e      	ldr	r3, [pc, #248]	; (8002588 <main+0x334>)
 8002490:	2201      	movs	r2, #1
 8002492:	701a      	strb	r2, [r3, #0]
			}
		}

		uint8_t key3_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // подставить свой пин
 8002494:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002498:	4831      	ldr	r0, [pc, #196]	; (8002560 <main+0x30c>)
 800249a:	f001 ff75 	bl	8004388 <HAL_GPIO_ReadPin>
 800249e:	4603      	mov	r3, r0
 80024a0:	717b      	strb	r3, [r7, #5]
		if (key3_state == 0 && !short_state3 && (ms - time_key3) > 50)
 80024a2:	797b      	ldrb	r3, [r7, #5]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d113      	bne.n	80024d0 <main+0x27c>
 80024a8:	4b38      	ldr	r3, [pc, #224]	; (800258c <main+0x338>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10f      	bne.n	80024d0 <main+0x27c>
 80024b0:	4b37      	ldr	r3, [pc, #220]	; (8002590 <main+0x33c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b32      	cmp	r3, #50	; 0x32
 80024ba:	d909      	bls.n	80024d0 <main+0x27c>
		{
			short_state3 = 1;
 80024bc:	4b33      	ldr	r3, [pc, #204]	; (800258c <main+0x338>)
 80024be:	2201      	movs	r2, #1
 80024c0:	701a      	strb	r2, [r3, #0]
			long_state3 = 0;
 80024c2:	4b34      	ldr	r3, [pc, #208]	; (8002594 <main+0x340>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 80024c8:	4a31      	ldr	r2, [pc, #196]	; (8002590 <main+0x33c>)
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	e032      	b.n	8002536 <main+0x2e2>
		}
		else if (key3_state == 0 && !long_state3 && (ms - time_key3) > KEY_LONG_DELAY)
 80024d0:	797b      	ldrb	r3, [r7, #5]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d111      	bne.n	80024fa <main+0x2a6>
 80024d6:	4b2f      	ldr	r3, [pc, #188]	; (8002594 <main+0x340>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10d      	bne.n	80024fa <main+0x2a6>
 80024de:	4b2c      	ldr	r3, [pc, #176]	; (8002590 <main+0x33c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024ea:	d906      	bls.n	80024fa <main+0x2a6>
		{
			long_state3 = 1;
 80024ec:	4b29      	ldr	r3, [pc, #164]	; (8002594 <main+0x340>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn3_long_rd = 1;
 80024f2:	4b29      	ldr	r3, [pc, #164]	; (8002598 <main+0x344>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	701a      	strb	r2, [r3, #0]
 80024f8:	e01d      	b.n	8002536 <main+0x2e2>
		}
		else if (key3_state == 1 && short_state3 && (ms - time_key3) > 50)
 80024fa:	797b      	ldrb	r3, [r7, #5]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	f47f af20 	bne.w	8002342 <main+0xee>
 8002502:	4b22      	ldr	r3, [pc, #136]	; (800258c <main+0x338>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	f43f af1b 	beq.w	8002342 <main+0xee>
 800250c:	4b20      	ldr	r3, [pc, #128]	; (8002590 <main+0x33c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b32      	cmp	r3, #50	; 0x32
 8002516:	f67f af14 	bls.w	8002342 <main+0xee>
		{
			short_state3 = 0;
 800251a:	4b1c      	ldr	r3, [pc, #112]	; (800258c <main+0x338>)
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 8002520:	4a1b      	ldr	r2, [pc, #108]	; (8002590 <main+0x33c>)
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	6013      	str	r3, [r2, #0]

			if (!long_state3)
 8002526:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <main+0x340>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	f47f af09 	bne.w	8002342 <main+0xee>
			{
				// действие на короткое нажатие
				btn3_short_rd = 1;
 8002530:	4b1a      	ldr	r3, [pc, #104]	; (800259c <main+0x348>)
 8002532:	2201      	movs	r2, #1
 8002534:	701a      	strb	r2, [r3, #0]
	{
 8002536:	e704      	b.n	8002342 <main+0xee>
 8002538:	20000000 	.word	0x20000000
 800253c:	20000004 	.word	0x20000004
 8002540:	20000008 	.word	0x20000008
 8002544:	2000000c 	.word	0x2000000c
 8002548:	0800cb64 	.word	0x0800cb64
 800254c:	20000214 	.word	0x20000214
 8002550:	200008fc 	.word	0x200008fc
 8002554:	200004ac 	.word	0x200004ac
 8002558:	20000944 	.word	0x20000944
 800255c:	200004f4 	.word	0x200004f4
 8002560:	40010c00 	.word	0x40010c00
 8002564:	2000025a 	.word	0x2000025a
 8002568:	2000025c 	.word	0x2000025c
 800256c:	2000025b 	.word	0x2000025b
 8002570:	20000260 	.word	0x20000260
 8002574:	20000261 	.word	0x20000261
 8002578:	20000262 	.word	0x20000262
 800257c:	20000264 	.word	0x20000264
 8002580:	20000263 	.word	0x20000263
 8002584:	20000268 	.word	0x20000268
 8002588:	20000269 	.word	0x20000269
 800258c:	2000026a 	.word	0x2000026a
 8002590:	2000026c 	.word	0x2000026c
 8002594:	2000026b 	.word	0x2000026b
 8002598:	20000270 	.word	0x20000270
 800259c:	20000271 	.word	0x20000271

080025a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b094      	sub	sp, #80	; 0x50
 80025a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025aa:	2228      	movs	r2, #40	; 0x28
 80025ac:	2100      	movs	r1, #0
 80025ae:	4618      	mov	r0, r3
 80025b0:	f009 f8ea 	bl	800b788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025c4:	1d3b      	adds	r3, r7, #4
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	609a      	str	r2, [r3, #8]
 80025ce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025d0:	2301      	movs	r3, #1
 80025d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80025da:	2300      	movs	r3, #0
 80025dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025de:	2301      	movs	r3, #1
 80025e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025e2:	2302      	movs	r3, #2
 80025e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80025ec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80025f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025f6:	4618      	mov	r0, r3
 80025f8:	f003 fa86 	bl	8005b08 <HAL_RCC_OscConfig>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002602:	f000 fa51 	bl	8002aa8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002606:	230f      	movs	r3, #15
 8002608:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800260a:	2302      	movs	r3, #2
 800260c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800260e:	2300      	movs	r3, #0
 8002610:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002616:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002618:	2300      	movs	r3, #0
 800261a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800261c:	f107 0314 	add.w	r3, r7, #20
 8002620:	2102      	movs	r1, #2
 8002622:	4618      	mov	r0, r3
 8002624:	f003 fcf0 	bl	8006008 <HAL_RCC_ClockConfig>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800262e:	f000 fa3b 	bl	8002aa8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002632:	2312      	movs	r3, #18
 8002634:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800263a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800263c:	2300      	movs	r3, #0
 800263e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002640:	1d3b      	adds	r3, r7, #4
 8002642:	4618      	mov	r0, r3
 8002644:	f003 fe66 	bl	8006314 <HAL_RCCEx_PeriphCLKConfig>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800264e:	f000 fa2b 	bl	8002aa8 <Error_Handler>
  }
}
 8002652:	bf00      	nop
 8002654:	3750      	adds	r7, #80	; 0x50
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002662:	1d3b      	adds	r3, r7, #4
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800266c:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <MX_ADC1_Init+0x74>)
 800266e:	4a19      	ldr	r2, [pc, #100]	; (80026d4 <MX_ADC1_Init+0x78>)
 8002670:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002672:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <MX_ADC1_Init+0x74>)
 8002674:	2200      	movs	r2, #0
 8002676:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002678:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <MX_ADC1_Init+0x74>)
 800267a:	2201      	movs	r2, #1
 800267c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800267e:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <MX_ADC1_Init+0x74>)
 8002680:	2200      	movs	r2, #0
 8002682:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002684:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <MX_ADC1_Init+0x74>)
 8002686:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800268a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800268c:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <MX_ADC1_Init+0x74>)
 800268e:	2200      	movs	r2, #0
 8002690:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002692:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <MX_ADC1_Init+0x74>)
 8002694:	2201      	movs	r2, #1
 8002696:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002698:	480d      	ldr	r0, [pc, #52]	; (80026d0 <MX_ADC1_Init+0x74>)
 800269a:	f000 fd05 	bl	80030a8 <HAL_ADC_Init>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80026a4:	f000 fa00 	bl	8002aa8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80026a8:	2303      	movs	r3, #3
 80026aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026ac:	2301      	movs	r3, #1
 80026ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80026b0:	2302      	movs	r3, #2
 80026b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026b4:	1d3b      	adds	r3, r7, #4
 80026b6:	4619      	mov	r1, r3
 80026b8:	4805      	ldr	r0, [pc, #20]	; (80026d0 <MX_ADC1_Init+0x74>)
 80026ba:	f000 ff5b 	bl	8003574 <HAL_ADC_ConfigChannel>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80026c4:	f000 f9f0 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80026c8:	bf00      	nop
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	20000944 	.word	0x20000944
 80026d4:	40012400 	.word	0x40012400

080026d8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <MX_CRC_Init+0x20>)
 80026de:	4a07      	ldr	r2, [pc, #28]	; (80026fc <MX_CRC_Init+0x24>)
 80026e0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80026e2:	4805      	ldr	r0, [pc, #20]	; (80026f8 <MX_CRC_Init+0x20>)
 80026e4:	f001 fa7d 	bl	8003be2 <HAL_CRC_Init>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80026ee:	f000 f9db 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	200008f4 	.word	0x200008f4
 80026fc:	40023000 	.word	0x40023000

08002700 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002704:	4b18      	ldr	r3, [pc, #96]	; (8002768 <MX_SPI1_Init+0x68>)
 8002706:	4a19      	ldr	r2, [pc, #100]	; (800276c <MX_SPI1_Init+0x6c>)
 8002708:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800270a:	4b17      	ldr	r3, [pc, #92]	; (8002768 <MX_SPI1_Init+0x68>)
 800270c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002710:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002712:	4b15      	ldr	r3, [pc, #84]	; (8002768 <MX_SPI1_Init+0x68>)
 8002714:	2200      	movs	r2, #0
 8002716:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002718:	4b13      	ldr	r3, [pc, #76]	; (8002768 <MX_SPI1_Init+0x68>)
 800271a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800271e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002720:	4b11      	ldr	r3, [pc, #68]	; (8002768 <MX_SPI1_Init+0x68>)
 8002722:	2200      	movs	r2, #0
 8002724:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <MX_SPI1_Init+0x68>)
 8002728:	2200      	movs	r2, #0
 800272a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800272c:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <MX_SPI1_Init+0x68>)
 800272e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002732:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <MX_SPI1_Init+0x68>)
 8002736:	2208      	movs	r2, #8
 8002738:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800273a:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <MX_SPI1_Init+0x68>)
 800273c:	2200      	movs	r2, #0
 800273e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002740:	4b09      	ldr	r3, [pc, #36]	; (8002768 <MX_SPI1_Init+0x68>)
 8002742:	2200      	movs	r2, #0
 8002744:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002746:	4b08      	ldr	r3, [pc, #32]	; (8002768 <MX_SPI1_Init+0x68>)
 8002748:	2200      	movs	r2, #0
 800274a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <MX_SPI1_Init+0x68>)
 800274e:	220a      	movs	r2, #10
 8002750:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002752:	4805      	ldr	r0, [pc, #20]	; (8002768 <MX_SPI1_Init+0x68>)
 8002754:	f003 ff58 	bl	8006608 <HAL_SPI_Init>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800275e:	f000 f9a3 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20000974 	.word	0x20000974
 800276c:	40013000 	.word	0x40013000

08002770 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002776:	f107 0310 	add.w	r3, r7, #16
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002780:	463b      	mov	r3, r7
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	605a      	str	r2, [r3, #4]
 8002788:	609a      	str	r2, [r3, #8]
 800278a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800278c:	4b27      	ldr	r3, [pc, #156]	; (800282c <MX_TIM3_Init+0xbc>)
 800278e:	4a28      	ldr	r2, [pc, #160]	; (8002830 <MX_TIM3_Init+0xc0>)
 8002790:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8002792:	4b26      	ldr	r3, [pc, #152]	; (800282c <MX_TIM3_Init+0xbc>)
 8002794:	2247      	movs	r2, #71	; 0x47
 8002796:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002798:	4b24      	ldr	r3, [pc, #144]	; (800282c <MX_TIM3_Init+0xbc>)
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000-1;
 800279e:	4b23      	ldr	r3, [pc, #140]	; (800282c <MX_TIM3_Init+0xbc>)
 80027a0:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 80027a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a6:	4b21      	ldr	r3, [pc, #132]	; (800282c <MX_TIM3_Init+0xbc>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ac:	4b1f      	ldr	r3, [pc, #124]	; (800282c <MX_TIM3_Init+0xbc>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80027b2:	481e      	ldr	r0, [pc, #120]	; (800282c <MX_TIM3_Init+0xbc>)
 80027b4:	f004 f98e 	bl	8006ad4 <HAL_TIM_IC_Init>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80027be:	f000 f973 	bl	8002aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027ca:	f107 0310 	add.w	r3, r7, #16
 80027ce:	4619      	mov	r1, r3
 80027d0:	4816      	ldr	r0, [pc, #88]	; (800282c <MX_TIM3_Init+0xbc>)
 80027d2:	f004 fe6d 	bl	80074b0 <HAL_TIMEx_MasterConfigSynchronization>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80027dc:	f000 f964 	bl	8002aa8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80027e0:	2300      	movs	r3, #0
 80027e2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80027e4:	2301      	movs	r3, #1
 80027e6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80027f0:	463b      	mov	r3, r7
 80027f2:	2200      	movs	r2, #0
 80027f4:	4619      	mov	r1, r3
 80027f6:	480d      	ldr	r0, [pc, #52]	; (800282c <MX_TIM3_Init+0xbc>)
 80027f8:	f004 fbca 	bl	8006f90 <HAL_TIM_IC_ConfigChannel>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002802:	f000 f951 	bl	8002aa8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002806:	2302      	movs	r3, #2
 8002808:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800280a:	2302      	movs	r3, #2
 800280c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800280e:	463b      	mov	r3, r7
 8002810:	2204      	movs	r2, #4
 8002812:	4619      	mov	r1, r3
 8002814:	4805      	ldr	r0, [pc, #20]	; (800282c <MX_TIM3_Init+0xbc>)
 8002816:	f004 fbbb 	bl	8006f90 <HAL_TIM_IC_ConfigChannel>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002820:	f000 f942 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002824:	bf00      	nop
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	200008fc 	.word	0x200008fc
 8002830:	40000400 	.word	0x40000400

08002834 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800283a:	f107 0310 	add.w	r3, r7, #16
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002844:	463b      	mov	r3, r7
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	609a      	str	r2, [r3, #8]
 800284e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002850:	4b27      	ldr	r3, [pc, #156]	; (80028f0 <MX_TIM4_Init+0xbc>)
 8002852:	4a28      	ldr	r2, [pc, #160]	; (80028f4 <MX_TIM4_Init+0xc0>)
 8002854:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8002856:	4b26      	ldr	r3, [pc, #152]	; (80028f0 <MX_TIM4_Init+0xbc>)
 8002858:	2247      	movs	r2, #71	; 0x47
 800285a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800285c:	4b24      	ldr	r3, [pc, #144]	; (80028f0 <MX_TIM4_Init+0xbc>)
 800285e:	2200      	movs	r2, #0
 8002860:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000-1;
 8002862:	4b23      	ldr	r3, [pc, #140]	; (80028f0 <MX_TIM4_Init+0xbc>)
 8002864:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8002868:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800286a:	4b21      	ldr	r3, [pc, #132]	; (80028f0 <MX_TIM4_Init+0xbc>)
 800286c:	2200      	movs	r2, #0
 800286e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002870:	4b1f      	ldr	r3, [pc, #124]	; (80028f0 <MX_TIM4_Init+0xbc>)
 8002872:	2200      	movs	r2, #0
 8002874:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002876:	481e      	ldr	r0, [pc, #120]	; (80028f0 <MX_TIM4_Init+0xbc>)
 8002878:	f004 f92c 	bl	8006ad4 <HAL_TIM_IC_Init>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002882:	f000 f911 	bl	8002aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002886:	2300      	movs	r3, #0
 8002888:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800288e:	f107 0310 	add.w	r3, r7, #16
 8002892:	4619      	mov	r1, r3
 8002894:	4816      	ldr	r0, [pc, #88]	; (80028f0 <MX_TIM4_Init+0xbc>)
 8002896:	f004 fe0b 	bl	80074b0 <HAL_TIMEx_MasterConfigSynchronization>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80028a0:	f000 f902 	bl	8002aa8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80028a4:	2300      	movs	r3, #0
 80028a6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80028a8:	2301      	movs	r3, #1
 80028aa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80028ac:	2300      	movs	r3, #0
 80028ae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80028b4:	463b      	mov	r3, r7
 80028b6:	2200      	movs	r2, #0
 80028b8:	4619      	mov	r1, r3
 80028ba:	480d      	ldr	r0, [pc, #52]	; (80028f0 <MX_TIM4_Init+0xbc>)
 80028bc:	f004 fb68 	bl	8006f90 <HAL_TIM_IC_ConfigChannel>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80028c6:	f000 f8ef 	bl	8002aa8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80028ca:	2302      	movs	r3, #2
 80028cc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80028ce:	2302      	movs	r3, #2
 80028d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80028d2:	463b      	mov	r3, r7
 80028d4:	2204      	movs	r2, #4
 80028d6:	4619      	mov	r1, r3
 80028d8:	4805      	ldr	r0, [pc, #20]	; (80028f0 <MX_TIM4_Init+0xbc>)
 80028da:	f004 fb59 	bl	8006f90 <HAL_TIM_IC_ConfigChannel>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80028e4:	f000 f8e0 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80028e8:	bf00      	nop
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	200004ac 	.word	0x200004ac
 80028f4:	40000800 	.word	0x40000800

080028f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08a      	sub	sp, #40	; 0x28
 80028fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fe:	f107 0314 	add.w	r3, r7, #20
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	605a      	str	r2, [r3, #4]
 8002908:	609a      	str	r2, [r3, #8]
 800290a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800290c:	4b62      	ldr	r3, [pc, #392]	; (8002a98 <MX_GPIO_Init+0x1a0>)
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	4a61      	ldr	r2, [pc, #388]	; (8002a98 <MX_GPIO_Init+0x1a0>)
 8002912:	f043 0310 	orr.w	r3, r3, #16
 8002916:	6193      	str	r3, [r2, #24]
 8002918:	4b5f      	ldr	r3, [pc, #380]	; (8002a98 <MX_GPIO_Init+0x1a0>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	f003 0310 	and.w	r3, r3, #16
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002924:	4b5c      	ldr	r3, [pc, #368]	; (8002a98 <MX_GPIO_Init+0x1a0>)
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	4a5b      	ldr	r2, [pc, #364]	; (8002a98 <MX_GPIO_Init+0x1a0>)
 800292a:	f043 0320 	orr.w	r3, r3, #32
 800292e:	6193      	str	r3, [r2, #24]
 8002930:	4b59      	ldr	r3, [pc, #356]	; (8002a98 <MX_GPIO_Init+0x1a0>)
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	f003 0320 	and.w	r3, r3, #32
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800293c:	4b56      	ldr	r3, [pc, #344]	; (8002a98 <MX_GPIO_Init+0x1a0>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	4a55      	ldr	r2, [pc, #340]	; (8002a98 <MX_GPIO_Init+0x1a0>)
 8002942:	f043 0304 	orr.w	r3, r3, #4
 8002946:	6193      	str	r3, [r2, #24]
 8002948:	4b53      	ldr	r3, [pc, #332]	; (8002a98 <MX_GPIO_Init+0x1a0>)
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002954:	4b50      	ldr	r3, [pc, #320]	; (8002a98 <MX_GPIO_Init+0x1a0>)
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	4a4f      	ldr	r2, [pc, #316]	; (8002a98 <MX_GPIO_Init+0x1a0>)
 800295a:	f043 0308 	orr.w	r3, r3, #8
 800295e:	6193      	str	r3, [r2, #24]
 8002960:	4b4d      	ldr	r3, [pc, #308]	; (8002a98 <MX_GPIO_Init+0x1a0>)
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	687b      	ldr	r3, [r7, #4]


  // reset USB DP (D+)
  // инициализируем пин DP как выход
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800296c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002972:	2301      	movs	r3, #1
 8002974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002976:	2302      	movs	r3, #2
 8002978:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297a:	f107 0314 	add.w	r3, r7, #20
 800297e:	4619      	mov	r1, r3
 8002980:	4846      	ldr	r0, [pc, #280]	; (8002a9c <MX_GPIO_Init+0x1a4>)
 8002982:	f001 fb7d 	bl	8004080 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // прижимаем DP к "земле"
 8002986:	2200      	movs	r2, #0
 8002988:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800298c:	4843      	ldr	r0, [pc, #268]	; (8002a9c <MX_GPIO_Init+0x1a4>)
 800298e:	f001 fd12 	bl	80043b6 <HAL_GPIO_WritePin>
  for(uint16_t i = 0; i < 10000; i++) {}; // немного ждём
 8002992:	2300      	movs	r3, #0
 8002994:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002996:	e002      	b.n	800299e <MX_GPIO_Init+0xa6>
 8002998:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800299a:	3301      	adds	r3, #1
 800299c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800299e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80029a0:	f242 720f 	movw	r2, #9999	; 0x270f
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d9f7      	bls.n	8002998 <MX_GPIO_Init+0xa0>

  // переинициализируем пин для работы с USB
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029a8:	2300      	movs	r3, #0
 80029aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	4619      	mov	r1, r3
 80029b6:	4839      	ldr	r0, [pc, #228]	; (8002a9c <MX_GPIO_Init+0x1a4>)
 80029b8:	f001 fb62 	bl	8004080 <HAL_GPIO_Init>
  for(uint16_t i = 0; i < 10000; i++) {}; // немного ждём
 80029bc:	2300      	movs	r3, #0
 80029be:	84bb      	strh	r3, [r7, #36]	; 0x24
 80029c0:	e002      	b.n	80029c8 <MX_GPIO_Init+0xd0>
 80029c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029c4:	3301      	adds	r3, #1
 80029c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80029c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029ca:	f242 720f 	movw	r2, #9999	; 0x270f
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d9f7      	bls.n	80029c2 <MX_GPIO_Init+0xca>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80029d2:	2200      	movs	r2, #0
 80029d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029d8:	4831      	ldr	r0, [pc, #196]	; (8002aa0 <MX_GPIO_Init+0x1a8>)
 80029da:	f001 fcec 	bl	80043b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD5312_LDAC_Pin|AD5312_SYNC_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80029de:	2200      	movs	r2, #0
 80029e0:	f240 4112 	movw	r1, #1042	; 0x412
 80029e4:	482d      	ldr	r0, [pc, #180]	; (8002a9c <MX_GPIO_Init+0x1a4>)
 80029e6:	f001 fce6 	bl	80043b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 80029ea:	2201      	movs	r2, #1
 80029ec:	2104      	movs	r1, #4
 80029ee:	482b      	ldr	r0, [pc, #172]	; (8002a9c <MX_GPIO_Init+0x1a4>)
 80029f0:	f001 fce1 	bl	80043b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80029f4:	2200      	movs	r2, #0
 80029f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029fa:	482a      	ldr	r0, [pc, #168]	; (8002aa4 <MX_GPIO_Init+0x1ac>)
 80029fc:	f001 fcdb 	bl	80043b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002a00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a06:	2301      	movs	r3, #1
 8002a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a12:	f107 0314 	add.w	r3, r7, #20
 8002a16:	4619      	mov	r1, r3
 8002a18:	4821      	ldr	r0, [pc, #132]	; (8002aa0 <MX_GPIO_Init+0x1a8>)
 8002a1a:	f001 fb31 	bl	8004080 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD5312_LDAC_Pin Relay_Pin AD5312_SYNC_Pin PA10 */
  GPIO_InitStruct.Pin = AD5312_LDAC_Pin|Relay_Pin|AD5312_SYNC_Pin|GPIO_PIN_10;
 8002a1e:	f240 4316 	movw	r3, #1046	; 0x416
 8002a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a24:	2301      	movs	r3, #1
 8002a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a30:	f107 0314 	add.w	r3, r7, #20
 8002a34:	4619      	mov	r1, r3
 8002a36:	4819      	ldr	r0, [pc, #100]	; (8002a9c <MX_GPIO_Init+0x1a4>)
 8002a38:	f001 fb22 	bl	8004080 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a46:	2301      	movs	r3, #1
 8002a48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a4a:	f107 0314 	add.w	r3, r7, #20
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4814      	ldr	r0, [pc, #80]	; (8002aa4 <MX_GPIO_Init+0x1ac>)
 8002a52:	f001 fb15 	bl	8004080 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002a56:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a64:	f107 0314 	add.w	r3, r7, #20
 8002a68:	4619      	mov	r1, r3
 8002a6a:	480e      	ldr	r0, [pc, #56]	; (8002aa4 <MX_GPIO_Init+0x1ac>)
 8002a6c:	f001 fb08 	bl	8004080 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a76:	2301      	movs	r3, #1
 8002a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a82:	f107 0314 	add.w	r3, r7, #20
 8002a86:	4619      	mov	r1, r3
 8002a88:	4806      	ldr	r0, [pc, #24]	; (8002aa4 <MX_GPIO_Init+0x1ac>)
 8002a8a:	f001 faf9 	bl	8004080 <HAL_GPIO_Init>

}
 8002a8e:	bf00      	nop
 8002a90:	3728      	adds	r7, #40	; 0x28
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40010800 	.word	0x40010800
 8002aa0:	40011000 	.word	0x40011000
 8002aa4:	40010c00 	.word	0x40010c00

08002aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002aac:	bf00      	nop
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002aba:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <HAL_MspInit+0x5c>)
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	4a14      	ldr	r2, [pc, #80]	; (8002b10 <HAL_MspInit+0x5c>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	6193      	str	r3, [r2, #24]
 8002ac6:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <HAL_MspInit+0x5c>)
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ad2:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <HAL_MspInit+0x5c>)
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	4a0e      	ldr	r2, [pc, #56]	; (8002b10 <HAL_MspInit+0x5c>)
 8002ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002adc:	61d3      	str	r3, [r2, #28]
 8002ade:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <HAL_MspInit+0x5c>)
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	607b      	str	r3, [r7, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002aea:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <HAL_MspInit+0x60>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	4a04      	ldr	r2, [pc, #16]	; (8002b14 <HAL_MspInit+0x60>)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b06:	bf00      	nop
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40010000 	.word	0x40010000

08002b18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b088      	sub	sp, #32
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b20:	f107 0310 	add.w	r3, r7, #16
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a18      	ldr	r2, [pc, #96]	; (8002b94 <HAL_ADC_MspInit+0x7c>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d129      	bne.n	8002b8c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b38:	4b17      	ldr	r3, [pc, #92]	; (8002b98 <HAL_ADC_MspInit+0x80>)
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	4a16      	ldr	r2, [pc, #88]	; (8002b98 <HAL_ADC_MspInit+0x80>)
 8002b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b42:	6193      	str	r3, [r2, #24]
 8002b44:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <HAL_ADC_MspInit+0x80>)
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b50:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <HAL_ADC_MspInit+0x80>)
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	4a10      	ldr	r2, [pc, #64]	; (8002b98 <HAL_ADC_MspInit+0x80>)
 8002b56:	f043 0304 	orr.w	r3, r3, #4
 8002b5a:	6193      	str	r3, [r2, #24]
 8002b5c:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <HAL_ADC_MspInit+0x80>)
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	60bb      	str	r3, [r7, #8]
 8002b66:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b68:	2308      	movs	r3, #8
 8002b6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b70:	f107 0310 	add.w	r3, r7, #16
 8002b74:	4619      	mov	r1, r3
 8002b76:	4809      	ldr	r0, [pc, #36]	; (8002b9c <HAL_ADC_MspInit+0x84>)
 8002b78:	f001 fa82 	bl	8004080 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2100      	movs	r1, #0
 8002b80:	2012      	movs	r0, #18
 8002b82:	f000 fff8 	bl	8003b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002b86:	2012      	movs	r0, #18
 8002b88:	f001 f811 	bl	8003bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b8c:	bf00      	nop
 8002b8e:	3720      	adds	r7, #32
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40012400 	.word	0x40012400
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40010800 	.word	0x40010800

08002ba0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a09      	ldr	r2, [pc, #36]	; (8002bd4 <HAL_CRC_MspInit+0x34>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d10b      	bne.n	8002bca <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002bb2:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <HAL_CRC_MspInit+0x38>)
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	4a08      	ldr	r2, [pc, #32]	; (8002bd8 <HAL_CRC_MspInit+0x38>)
 8002bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bbc:	6153      	str	r3, [r2, #20]
 8002bbe:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <HAL_CRC_MspInit+0x38>)
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002bca:	bf00      	nop
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr
 8002bd4:	40023000 	.word	0x40023000
 8002bd8:	40021000 	.word	0x40021000

08002bdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b088      	sub	sp, #32
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be4:	f107 0310 	add.w	r3, r7, #16
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a15      	ldr	r2, [pc, #84]	; (8002c4c <HAL_SPI_MspInit+0x70>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d123      	bne.n	8002c44 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bfc:	4b14      	ldr	r3, [pc, #80]	; (8002c50 <HAL_SPI_MspInit+0x74>)
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	4a13      	ldr	r2, [pc, #76]	; (8002c50 <HAL_SPI_MspInit+0x74>)
 8002c02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c06:	6193      	str	r3, [r2, #24]
 8002c08:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <HAL_SPI_MspInit+0x74>)
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c14:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <HAL_SPI_MspInit+0x74>)
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	4a0d      	ldr	r2, [pc, #52]	; (8002c50 <HAL_SPI_MspInit+0x74>)
 8002c1a:	f043 0304 	orr.w	r3, r3, #4
 8002c1e:	6193      	str	r3, [r2, #24]
 8002c20:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <HAL_SPI_MspInit+0x74>)
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AD5312_SCLK_Pin|AD5312_DIN_Pin;
 8002c2c:	23a0      	movs	r3, #160	; 0xa0
 8002c2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c30:	2302      	movs	r3, #2
 8002c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c34:	2303      	movs	r3, #3
 8002c36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c38:	f107 0310 	add.w	r3, r7, #16
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4805      	ldr	r0, [pc, #20]	; (8002c54 <HAL_SPI_MspInit+0x78>)
 8002c40:	f001 fa1e 	bl	8004080 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002c44:	bf00      	nop
 8002c46:	3720      	adds	r7, #32
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40013000 	.word	0x40013000
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40010800 	.word	0x40010800

08002c58 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08c      	sub	sp, #48	; 0x30
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c60:	f107 031c 	add.w	r3, r7, #28
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a3b      	ldr	r2, [pc, #236]	; (8002d60 <HAL_TIM_IC_MspInit+0x108>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d13e      	bne.n	8002cf6 <HAL_TIM_IC_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c78:	4b3a      	ldr	r3, [pc, #232]	; (8002d64 <HAL_TIM_IC_MspInit+0x10c>)
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	4a39      	ldr	r2, [pc, #228]	; (8002d64 <HAL_TIM_IC_MspInit+0x10c>)
 8002c7e:	f043 0302 	orr.w	r3, r3, #2
 8002c82:	61d3      	str	r3, [r2, #28]
 8002c84:	4b37      	ldr	r3, [pc, #220]	; (8002d64 <HAL_TIM_IC_MspInit+0x10c>)
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	61bb      	str	r3, [r7, #24]
 8002c8e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c90:	4b34      	ldr	r3, [pc, #208]	; (8002d64 <HAL_TIM_IC_MspInit+0x10c>)
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	4a33      	ldr	r2, [pc, #204]	; (8002d64 <HAL_TIM_IC_MspInit+0x10c>)
 8002c96:	f043 0308 	orr.w	r3, r3, #8
 8002c9a:	6193      	str	r3, [r2, #24]
 8002c9c:	4b31      	ldr	r3, [pc, #196]	; (8002d64 <HAL_TIM_IC_MspInit+0x10c>)
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	617b      	str	r3, [r7, #20]
 8002ca6:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ca8:	2310      	movs	r3, #16
 8002caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cac:	2300      	movs	r3, #0
 8002cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb4:	f107 031c 	add.w	r3, r7, #28
 8002cb8:	4619      	mov	r1, r3
 8002cba:	482b      	ldr	r0, [pc, #172]	; (8002d68 <HAL_TIM_IC_MspInit+0x110>)
 8002cbc:	f001 f9e0 	bl	8004080 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002cc0:	4b2a      	ldr	r3, [pc, #168]	; (8002d6c <HAL_TIM_IC_MspInit+0x114>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cde:	4a23      	ldr	r2, [pc, #140]	; (8002d6c <HAL_TIM_IC_MspInit+0x114>)
 8002ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce2:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	201d      	movs	r0, #29
 8002cea:	f000 ff44 	bl	8003b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002cee:	201d      	movs	r0, #29
 8002cf0:	f000 ff5d 	bl	8003bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002cf4:	e030      	b.n	8002d58 <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM4)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a1d      	ldr	r2, [pc, #116]	; (8002d70 <HAL_TIM_IC_MspInit+0x118>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d12b      	bne.n	8002d58 <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d00:	4b18      	ldr	r3, [pc, #96]	; (8002d64 <HAL_TIM_IC_MspInit+0x10c>)
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	4a17      	ldr	r2, [pc, #92]	; (8002d64 <HAL_TIM_IC_MspInit+0x10c>)
 8002d06:	f043 0304 	orr.w	r3, r3, #4
 8002d0a:	61d3      	str	r3, [r2, #28]
 8002d0c:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <HAL_TIM_IC_MspInit+0x10c>)
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d18:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <HAL_TIM_IC_MspInit+0x10c>)
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	4a11      	ldr	r2, [pc, #68]	; (8002d64 <HAL_TIM_IC_MspInit+0x10c>)
 8002d1e:	f043 0308 	orr.w	r3, r3, #8
 8002d22:	6193      	str	r3, [r2, #24]
 8002d24:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <HAL_TIM_IC_MspInit+0x10c>)
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d30:	2340      	movs	r3, #64	; 0x40
 8002d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d34:	2300      	movs	r3, #0
 8002d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d3c:	f107 031c 	add.w	r3, r7, #28
 8002d40:	4619      	mov	r1, r3
 8002d42:	4809      	ldr	r0, [pc, #36]	; (8002d68 <HAL_TIM_IC_MspInit+0x110>)
 8002d44:	f001 f99c 	bl	8004080 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	201e      	movs	r0, #30
 8002d4e:	f000 ff12 	bl	8003b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d52:	201e      	movs	r0, #30
 8002d54:	f000 ff2b 	bl	8003bae <HAL_NVIC_EnableIRQ>
}
 8002d58:	bf00      	nop
 8002d5a:	3730      	adds	r7, #48	; 0x30
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40000400 	.word	0x40000400
 8002d64:	40021000 	.word	0x40021000
 8002d68:	40010c00 	.word	0x40010c00
 8002d6c:	40010000 	.word	0x40010000
 8002d70:	40000800 	.word	0x40000800

08002d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr

08002d80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 8002d84:	4806      	ldr	r0, [pc, #24]	; (8002da0 <HardFault_Handler+0x20>)
 8002d86:	f008 fd07 	bl	800b798 <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 8002d8a:	4805      	ldr	r0, [pc, #20]	; (8002da0 <HardFault_Handler+0x20>)
 8002d8c:	f008 fd04 	bl	800b798 <iprintf>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002d90:	2200      	movs	r2, #0
 8002d92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d96:	4803      	ldr	r0, [pc, #12]	; (8002da4 <HardFault_Handler+0x24>)
 8002d98:	f001 fb0d 	bl	80043b6 <HAL_GPIO_WritePin>
	  printf("HardFault_IRQn");
 8002d9c:	e7f5      	b.n	8002d8a <HardFault_Handler+0xa>
 8002d9e:	bf00      	nop
 8002da0:	0800cb78 	.word	0x0800cb78
 8002da4:	40011000 	.word	0x40011000

08002da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dac:	e7fe      	b.n	8002dac <MemManage_Handler+0x4>

08002dae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dae:	b480      	push	{r7}
 8002db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002db2:	e7fe      	b.n	8002db2 <BusFault_Handler+0x4>

08002db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002db8:	e7fe      	b.n	8002db8 <UsageFault_Handler+0x4>

08002dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dbe:	bf00      	nop
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr

08002dc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr

08002dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr

08002dde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002de2:	f000 f945 	bl	8003070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002df0:	4802      	ldr	r0, [pc, #8]	; (8002dfc <ADC1_2_IRQHandler+0x10>)
 8002df2:	f000 faf3 	bl	80033dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000944 	.word	0x20000944

08002e00 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002e04:	4802      	ldr	r0, [pc, #8]	; (8002e10 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002e06:	f001 fc1f 	bl	8004648 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	200012b4 	.word	0x200012b4

08002e14 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e18:	4802      	ldr	r0, [pc, #8]	; (8002e24 <TIM3_IRQHandler+0x10>)
 8002e1a:	f003 ffb1 	bl	8006d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	200008fc 	.word	0x200008fc

08002e28 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002e2c:	4802      	ldr	r0, [pc, #8]	; (8002e38 <TIM4_IRQHandler+0x10>)
 8002e2e:	f003 ffa7 	bl	8006d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	200004ac 	.word	0x200004ac

08002e3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	e00a      	b.n	8002e64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e4e:	f3af 8000 	nop.w
 8002e52:	4601      	mov	r1, r0
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	60ba      	str	r2, [r7, #8]
 8002e5a:	b2ca      	uxtb	r2, r1
 8002e5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	3301      	adds	r3, #1
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	dbf0      	blt.n	8002e4e <_read+0x12>
	}

return len;
 8002e6c:	687b      	ldr	r3, [r7, #4]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
	return -1;
 8002e7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e9c:	605a      	str	r2, [r3, #4]
	return 0;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <_isatty>:

int _isatty(int file)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
	return 1;
 8002eb2:	2301      	movs	r3, #1
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr

08002ebe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b085      	sub	sp, #20
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	60f8      	str	r0, [r7, #12]
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	607a      	str	r2, [r7, #4]
	return 0;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr
	...

08002ed8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002ee0:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <_sbrk+0x50>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d102      	bne.n	8002eee <_sbrk+0x16>
		heap_end = &end;
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <_sbrk+0x50>)
 8002eea:	4a10      	ldr	r2, [pc, #64]	; (8002f2c <_sbrk+0x54>)
 8002eec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002eee:	4b0e      	ldr	r3, [pc, #56]	; (8002f28 <_sbrk+0x50>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <_sbrk+0x50>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4413      	add	r3, r2
 8002efc:	466a      	mov	r2, sp
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d907      	bls.n	8002f12 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002f02:	f008 fc09 	bl	800b718 <__errno>
 8002f06:	4603      	mov	r3, r0
 8002f08:	220c      	movs	r2, #12
 8002f0a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f10:	e006      	b.n	8002f20 <_sbrk+0x48>
	}

	heap_end += incr;
 8002f12:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <_sbrk+0x50>)
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4413      	add	r3, r2
 8002f1a:	4a03      	ldr	r2, [pc, #12]	; (8002f28 <_sbrk+0x50>)
 8002f1c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	2000027c 	.word	0x2000027c
 8002f2c:	200015b0 	.word	0x200015b0

08002f30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002f34:	4b15      	ldr	r3, [pc, #84]	; (8002f8c <SystemInit+0x5c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a14      	ldr	r2, [pc, #80]	; (8002f8c <SystemInit+0x5c>)
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002f40:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <SystemInit+0x5c>)
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	4911      	ldr	r1, [pc, #68]	; (8002f8c <SystemInit+0x5c>)
 8002f46:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <SystemInit+0x60>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002f4c:	4b0f      	ldr	r3, [pc, #60]	; (8002f8c <SystemInit+0x5c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a0e      	ldr	r2, [pc, #56]	; (8002f8c <SystemInit+0x5c>)
 8002f52:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <SystemInit+0x5c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <SystemInit+0x5c>)
 8002f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f66:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002f68:	4b08      	ldr	r3, [pc, #32]	; (8002f8c <SystemInit+0x5c>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	4a07      	ldr	r2, [pc, #28]	; (8002f8c <SystemInit+0x5c>)
 8002f6e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002f72:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <SystemInit+0x5c>)
 8002f76:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002f7a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002f7c:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <SystemInit+0x64>)
 8002f7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f82:	609a      	str	r2, [r3, #8]
#endif 
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	f8ff0000 	.word	0xf8ff0000
 8002f94:	e000ed00 	.word	0xe000ed00

08002f98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002f98:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002f9a:	e003      	b.n	8002fa4 <LoopCopyDataInit>

08002f9c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002f9e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002fa0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002fa2:	3104      	adds	r1, #4

08002fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002fa4:	480a      	ldr	r0, [pc, #40]	; (8002fd0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002fa6:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002fa8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002faa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002fac:	d3f6      	bcc.n	8002f9c <CopyDataInit>
  ldr r2, =_sbss
 8002fae:	4a0a      	ldr	r2, [pc, #40]	; (8002fd8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002fb0:	e002      	b.n	8002fb8 <LoopFillZerobss>

08002fb2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002fb2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002fb4:	f842 3b04 	str.w	r3, [r2], #4

08002fb8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002fb8:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002fba:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002fbc:	d3f9      	bcc.n	8002fb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002fbe:	f7ff ffb7 	bl	8002f30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fc2:	f008 fbaf 	bl	800b724 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fc6:	f7ff f945 	bl	8002254 <main>
  bx lr
 8002fca:	4770      	bx	lr
  ldr r3, =_sidata
 8002fcc:	0800cca8 	.word	0x0800cca8
  ldr r0, =_sdata
 8002fd0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002fd4:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8002fd8:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 8002fdc:	200015b0 	.word	0x200015b0

08002fe0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fe0:	e7fe      	b.n	8002fe0 <CAN1_RX1_IRQHandler>
	...

08002fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fe8:	4b08      	ldr	r3, [pc, #32]	; (800300c <HAL_Init+0x28>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a07      	ldr	r2, [pc, #28]	; (800300c <HAL_Init+0x28>)
 8002fee:	f043 0310 	orr.w	r3, r3, #16
 8002ff2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ff4:	2003      	movs	r0, #3
 8002ff6:	f000 fdb3 	bl	8003b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	f000 f808 	bl	8003010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003000:	f7ff fd58 	bl	8002ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40022000 	.word	0x40022000

08003010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003018:	4b12      	ldr	r3, [pc, #72]	; (8003064 <HAL_InitTick+0x54>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4b12      	ldr	r3, [pc, #72]	; (8003068 <HAL_InitTick+0x58>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	4619      	mov	r1, r3
 8003022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003026:	fbb3 f3f1 	udiv	r3, r3, r1
 800302a:	fbb2 f3f3 	udiv	r3, r2, r3
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fdcb 	bl	8003bca <HAL_SYSTICK_Config>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e00e      	b.n	800305c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b0f      	cmp	r3, #15
 8003042:	d80a      	bhi.n	800305a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003044:	2200      	movs	r2, #0
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	f04f 30ff 	mov.w	r0, #4294967295
 800304c:	f000 fd93 	bl	8003b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003050:	4a06      	ldr	r2, [pc, #24]	; (800306c <HAL_InitTick+0x5c>)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	e000      	b.n	800305c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
}
 800305c:	4618      	mov	r0, r3
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	20000014 	.word	0x20000014
 8003068:	2000001c 	.word	0x2000001c
 800306c:	20000018 	.word	0x20000018

08003070 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003074:	4b05      	ldr	r3, [pc, #20]	; (800308c <HAL_IncTick+0x1c>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	4b05      	ldr	r3, [pc, #20]	; (8003090 <HAL_IncTick+0x20>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4413      	add	r3, r2
 8003080:	4a03      	ldr	r2, [pc, #12]	; (8003090 <HAL_IncTick+0x20>)
 8003082:	6013      	str	r3, [r2, #0]
}
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr
 800308c:	2000001c 	.word	0x2000001c
 8003090:	200009cc 	.word	0x200009cc

08003094 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  return uwTick;
 8003098:	4b02      	ldr	r3, [pc, #8]	; (80030a4 <HAL_GetTick+0x10>)
 800309a:	681b      	ldr	r3, [r3, #0]
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr
 80030a4:	200009cc 	.word	0x200009cc

080030a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e0be      	b.n	8003248 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d109      	bne.n	80030ec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7ff fd16 	bl	8002b18 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 fb8b 	bl	8003808 <ADC_ConversionStop_Disable>
 80030f2:	4603      	mov	r3, r0
 80030f4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fa:	f003 0310 	and.w	r3, r3, #16
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f040 8099 	bne.w	8003236 <HAL_ADC_Init+0x18e>
 8003104:	7dfb      	ldrb	r3, [r7, #23]
 8003106:	2b00      	cmp	r3, #0
 8003108:	f040 8095 	bne.w	8003236 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003110:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003114:	f023 0302 	bic.w	r3, r3, #2
 8003118:	f043 0202 	orr.w	r2, r3, #2
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003128:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	7b1b      	ldrb	r3, [r3, #12]
 800312e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003130:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	4313      	orrs	r3, r2
 8003136:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003140:	d003      	beq.n	800314a <HAL_ADC_Init+0xa2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d102      	bne.n	8003150 <HAL_ADC_Init+0xa8>
 800314a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800314e:	e000      	b.n	8003152 <HAL_ADC_Init+0xaa>
 8003150:	2300      	movs	r3, #0
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	7d1b      	ldrb	r3, [r3, #20]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d119      	bne.n	8003194 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	7b1b      	ldrb	r3, [r3, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d109      	bne.n	800317c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	3b01      	subs	r3, #1
 800316e:	035a      	lsls	r2, r3, #13
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003178:	613b      	str	r3, [r7, #16]
 800317a:	e00b      	b.n	8003194 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	f043 0220 	orr.w	r2, r3, #32
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318c:	f043 0201 	orr.w	r2, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	4b28      	ldr	r3, [pc, #160]	; (8003250 <HAL_ADC_Init+0x1a8>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	68b9      	ldr	r1, [r7, #8]
 80031b8:	430b      	orrs	r3, r1
 80031ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031c4:	d003      	beq.n	80031ce <HAL_ADC_Init+0x126>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d104      	bne.n	80031d8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	051b      	lsls	r3, r3, #20
 80031d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031de:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	4b18      	ldr	r3, [pc, #96]	; (8003254 <HAL_ADC_Init+0x1ac>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d10b      	bne.n	8003214 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003206:	f023 0303 	bic.w	r3, r3, #3
 800320a:	f043 0201 	orr.w	r2, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003212:	e018      	b.n	8003246 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	f023 0312 	bic.w	r3, r3, #18
 800321c:	f043 0210 	orr.w	r2, r3, #16
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	f043 0201 	orr.w	r2, r3, #1
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003234:	e007      	b.n	8003246 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323a:	f043 0210 	orr.w	r2, r3, #16
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003246:	7dfb      	ldrb	r3, [r7, #23]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	ffe1f7fd 	.word	0xffe1f7fd
 8003254:	ff1f0efe 	.word	0xff1f0efe

08003258 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_ADC_Start_IT+0x1a>
 800326e:	2302      	movs	r3, #2
 8003270:	e0a0      	b.n	80033b4 <HAL_ADC_Start_IT+0x15c>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 fa72 	bl	8003764 <ADC_Enable>
 8003280:	4603      	mov	r3, r0
 8003282:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	2b00      	cmp	r3, #0
 8003288:	f040 808f 	bne.w	80033aa <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003294:	f023 0301 	bic.w	r3, r3, #1
 8003298:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a45      	ldr	r2, [pc, #276]	; (80033bc <HAL_ADC_Start_IT+0x164>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d105      	bne.n	80032b6 <HAL_ADC_Start_IT+0x5e>
 80032aa:	4b45      	ldr	r3, [pc, #276]	; (80033c0 <HAL_ADC_Start_IT+0x168>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d115      	bne.n	80032e2 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d026      	beq.n	800331e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032e0:	e01d      	b.n	800331e <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a33      	ldr	r2, [pc, #204]	; (80033c0 <HAL_ADC_Start_IT+0x168>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d004      	beq.n	8003302 <HAL_ADC_Start_IT+0xaa>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a2f      	ldr	r2, [pc, #188]	; (80033bc <HAL_ADC_Start_IT+0x164>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d10d      	bne.n	800331e <HAL_ADC_Start_IT+0xc6>
 8003302:	4b2f      	ldr	r3, [pc, #188]	; (80033c0 <HAL_ADC_Start_IT+0x168>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800330a:	2b00      	cmp	r3, #0
 800330c:	d007      	beq.n	800331e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003312:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003316:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003322:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d006      	beq.n	8003338 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332e:	f023 0206 	bic.w	r2, r3, #6
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	62da      	str	r2, [r3, #44]	; 0x2c
 8003336:	e002      	b.n	800333e <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f06f 0202 	mvn.w	r2, #2
 800334e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0220 	orr.w	r2, r2, #32
 800335e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800336a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800336e:	d113      	bne.n	8003398 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003374:	4a11      	ldr	r2, [pc, #68]	; (80033bc <HAL_ADC_Start_IT+0x164>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d105      	bne.n	8003386 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800337a:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <HAL_ADC_Start_IT+0x168>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003382:	2b00      	cmp	r3, #0
 8003384:	d108      	bne.n	8003398 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003394:	609a      	str	r2, [r3, #8]
 8003396:	e00c      	b.n	80033b2 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80033a6:	609a      	str	r2, [r3, #8]
 80033a8:	e003      	b.n	80033b2 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40012800 	.word	0x40012800
 80033c0:	40012400 	.word	0x40012400

080033c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr

080033dc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f003 0320 	and.w	r3, r3, #32
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	d140      	bne.n	8003474 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d139      	bne.n	8003474 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	f003 0310 	and.w	r3, r3, #16
 8003408:	2b00      	cmp	r3, #0
 800340a:	d105      	bne.n	8003418 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003410:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003422:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003426:	d11d      	bne.n	8003464 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800342c:	2b00      	cmp	r3, #0
 800342e:	d119      	bne.n	8003464 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0220 	bic.w	r2, r2, #32
 800343e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d105      	bne.n	8003464 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345c:	f043 0201 	orr.w	r2, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7fe fad3 	bl	8001a10 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f06f 0212 	mvn.w	r2, #18
 8003472:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347e:	2b80      	cmp	r3, #128	; 0x80
 8003480:	d14f      	bne.n	8003522 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b04      	cmp	r3, #4
 800348e:	d148      	bne.n	8003522 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b00      	cmp	r3, #0
 800349a:	d105      	bne.n	80034a8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80034b2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80034b6:	d012      	beq.n	80034de <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d125      	bne.n	8003512 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80034d0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80034d4:	d11d      	bne.n	8003512 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d119      	bne.n	8003512 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034ec:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003502:	2b00      	cmp	r3, #0
 8003504:	d105      	bne.n	8003512 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	f043 0201 	orr.w	r2, r3, #1
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fa4e 	bl	80039b4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f06f 020c 	mvn.w	r2, #12
 8003520:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352c:	2b40      	cmp	r3, #64	; 0x40
 800352e:	d114      	bne.n	800355a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b01      	cmp	r3, #1
 800353c:	d10d      	bne.n	800355a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003542:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f809 	bl	8003562 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f06f 0201 	mvn.w	r2, #1
 8003558:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr

08003574 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003582:	2300      	movs	r3, #0
 8003584:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x20>
 8003590:	2302      	movs	r3, #2
 8003592:	e0dc      	b.n	800374e <HAL_ADC_ConfigChannel+0x1da>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b06      	cmp	r3, #6
 80035a2:	d81c      	bhi.n	80035de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	3b05      	subs	r3, #5
 80035b6:	221f      	movs	r2, #31
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	43db      	mvns	r3, r3
 80035be:	4019      	ands	r1, r3
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	6818      	ldr	r0, [r3, #0]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	3b05      	subs	r3, #5
 80035d0:	fa00 f203 	lsl.w	r2, r0, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	635a      	str	r2, [r3, #52]	; 0x34
 80035dc:	e03c      	b.n	8003658 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b0c      	cmp	r3, #12
 80035e4:	d81c      	bhi.n	8003620 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	3b23      	subs	r3, #35	; 0x23
 80035f8:	221f      	movs	r2, #31
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	4019      	ands	r1, r3
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	4613      	mov	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	3b23      	subs	r3, #35	; 0x23
 8003612:	fa00 f203 	lsl.w	r2, r0, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	631a      	str	r2, [r3, #48]	; 0x30
 800361e:	e01b      	b.n	8003658 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	3b41      	subs	r3, #65	; 0x41
 8003632:	221f      	movs	r2, #31
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	4019      	ands	r1, r3
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	3b41      	subs	r3, #65	; 0x41
 800364c:	fa00 f203 	lsl.w	r2, r0, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b09      	cmp	r3, #9
 800365e:	d91c      	bls.n	800369a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68d9      	ldr	r1, [r3, #12]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	4613      	mov	r3, r2
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	4413      	add	r3, r2
 8003670:	3b1e      	subs	r3, #30
 8003672:	2207      	movs	r2, #7
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	4019      	ands	r1, r3
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	6898      	ldr	r0, [r3, #8]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	4613      	mov	r3, r2
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	4413      	add	r3, r2
 800368a:	3b1e      	subs	r3, #30
 800368c:	fa00 f203 	lsl.w	r2, r0, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	60da      	str	r2, [r3, #12]
 8003698:	e019      	b.n	80036ce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6919      	ldr	r1, [r3, #16]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	4613      	mov	r3, r2
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	4413      	add	r3, r2
 80036aa:	2207      	movs	r2, #7
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	4019      	ands	r1, r3
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	6898      	ldr	r0, [r3, #8]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	4613      	mov	r3, r2
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	4413      	add	r3, r2
 80036c2:	fa00 f203 	lsl.w	r2, r0, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b10      	cmp	r3, #16
 80036d4:	d003      	beq.n	80036de <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80036da:	2b11      	cmp	r3, #17
 80036dc:	d132      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a1d      	ldr	r2, [pc, #116]	; (8003758 <HAL_ADC_ConfigChannel+0x1e4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d125      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d126      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003704:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b10      	cmp	r3, #16
 800370c:	d11a      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800370e:	4b13      	ldr	r3, [pc, #76]	; (800375c <HAL_ADC_ConfigChannel+0x1e8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a13      	ldr	r2, [pc, #76]	; (8003760 <HAL_ADC_ConfigChannel+0x1ec>)
 8003714:	fba2 2303 	umull	r2, r3, r2, r3
 8003718:	0c9a      	lsrs	r2, r3, #18
 800371a:	4613      	mov	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003724:	e002      	b.n	800372c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	3b01      	subs	r3, #1
 800372a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f9      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x1b2>
 8003732:	e007      	b.n	8003744 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003738:	f043 0220 	orr.w	r2, r3, #32
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800374c:	7bfb      	ldrb	r3, [r7, #15]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr
 8003758:	40012400 	.word	0x40012400
 800375c:	20000014 	.word	0x20000014
 8003760:	431bde83 	.word	0x431bde83

08003764 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b01      	cmp	r3, #1
 8003780:	d039      	beq.n	80037f6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f042 0201 	orr.w	r2, r2, #1
 8003790:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003792:	4b1b      	ldr	r3, [pc, #108]	; (8003800 <ADC_Enable+0x9c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a1b      	ldr	r2, [pc, #108]	; (8003804 <ADC_Enable+0xa0>)
 8003798:	fba2 2303 	umull	r2, r3, r2, r3
 800379c:	0c9b      	lsrs	r3, r3, #18
 800379e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80037a0:	e002      	b.n	80037a8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f9      	bne.n	80037a2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80037ae:	f7ff fc71 	bl	8003094 <HAL_GetTick>
 80037b2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80037b4:	e018      	b.n	80037e8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037b6:	f7ff fc6d 	bl	8003094 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d911      	bls.n	80037e8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c8:	f043 0210 	orr.w	r2, r3, #16
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	f043 0201 	orr.w	r2, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e007      	b.n	80037f8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d1df      	bne.n	80037b6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	20000014 	.word	0x20000014
 8003804:	431bde83 	.word	0x431bde83

08003808 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b01      	cmp	r3, #1
 8003820:	d127      	bne.n	8003872 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0201 	bic.w	r2, r2, #1
 8003830:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003832:	f7ff fc2f 	bl	8003094 <HAL_GetTick>
 8003836:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003838:	e014      	b.n	8003864 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800383a:	f7ff fc2b 	bl	8003094 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d90d      	bls.n	8003864 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384c:	f043 0210 	orr.w	r2, r3, #16
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003858:	f043 0201 	orr.w	r2, r3, #1
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e007      	b.n	8003874 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b01      	cmp	r3, #1
 8003870:	d0e3      	beq.n	800383a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800387c:	b590      	push	{r4, r7, lr}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_ADCEx_Calibration_Start+0x1e>
 8003896:	2302      	movs	r3, #2
 8003898:	e086      	b.n	80039a8 <HAL_ADCEx_Calibration_Start+0x12c>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff ffb0 	bl	8003808 <ADC_ConversionStop_Disable>
 80038a8:	4603      	mov	r3, r0
 80038aa:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80038ac:	7dfb      	ldrb	r3, [r7, #23]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d175      	bne.n	800399e <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80038ba:	f023 0302 	bic.w	r3, r3, #2
 80038be:	f043 0202 	orr.w	r2, r3, #2
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80038c6:	4b3a      	ldr	r3, [pc, #232]	; (80039b0 <HAL_ADCEx_Calibration_Start+0x134>)
 80038c8:	681c      	ldr	r4, [r3, #0]
 80038ca:	2002      	movs	r0, #2
 80038cc:	f002 fdd8 	bl	8006480 <HAL_RCCEx_GetPeriphCLKFreq>
 80038d0:	4603      	mov	r3, r0
 80038d2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80038d6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80038d8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80038da:	e002      	b.n	80038e2 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	3b01      	subs	r3, #1
 80038e0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1f9      	bne.n	80038dc <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7ff ff3b 	bl	8003764 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f042 0208 	orr.w	r2, r2, #8
 80038fc:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80038fe:	f7ff fbc9 	bl	8003094 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003904:	e014      	b.n	8003930 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003906:	f7ff fbc5 	bl	8003094 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b0a      	cmp	r3, #10
 8003912:	d90d      	bls.n	8003930 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003918:	f023 0312 	bic.w	r3, r3, #18
 800391c:	f043 0210 	orr.w	r2, r3, #16
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e03b      	b.n	80039a8 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1e3      	bne.n	8003906 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f042 0204 	orr.w	r2, r2, #4
 800394c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800394e:	f7ff fba1 	bl	8003094 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003954:	e014      	b.n	8003980 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003956:	f7ff fb9d 	bl	8003094 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b0a      	cmp	r3, #10
 8003962:	d90d      	bls.n	8003980 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003968:	f023 0312 	bic.w	r3, r3, #18
 800396c:	f043 0210 	orr.w	r2, r3, #16
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e013      	b.n	80039a8 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1e3      	bne.n	8003956 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003992:	f023 0303 	bic.w	r3, r3, #3
 8003996:	f043 0201 	orr.w	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80039a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	371c      	adds	r7, #28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd90      	pop	{r4, r7, pc}
 80039b0:	20000014 	.word	0x20000014

080039b4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bc80      	pop	{r7}
 80039c4:	4770      	bx	lr
	...

080039c8 <__NVIC_SetPriorityGrouping>:
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039d8:	4b0c      	ldr	r3, [pc, #48]	; (8003a0c <__NVIC_SetPriorityGrouping+0x44>)
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039e4:	4013      	ands	r3, r2
 80039e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039fa:	4a04      	ldr	r2, [pc, #16]	; (8003a0c <__NVIC_SetPriorityGrouping+0x44>)
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	60d3      	str	r3, [r2, #12]
}
 8003a00:	bf00      	nop
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bc80      	pop	{r7}
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	e000ed00 	.word	0xe000ed00

08003a10 <__NVIC_GetPriorityGrouping>:
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a14:	4b04      	ldr	r3, [pc, #16]	; (8003a28 <__NVIC_GetPriorityGrouping+0x18>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	0a1b      	lsrs	r3, r3, #8
 8003a1a:	f003 0307 	and.w	r3, r3, #7
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	e000ed00 	.word	0xe000ed00

08003a2c <__NVIC_EnableIRQ>:
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	db0b      	blt.n	8003a56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a3e:	79fb      	ldrb	r3, [r7, #7]
 8003a40:	f003 021f 	and.w	r2, r3, #31
 8003a44:	4906      	ldr	r1, [pc, #24]	; (8003a60 <__NVIC_EnableIRQ+0x34>)
 8003a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4a:	095b      	lsrs	r3, r3, #5
 8003a4c:	2001      	movs	r0, #1
 8003a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr
 8003a60:	e000e100 	.word	0xe000e100

08003a64 <__NVIC_SetPriority>:
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	6039      	str	r1, [r7, #0]
 8003a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	db0a      	blt.n	8003a8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	490c      	ldr	r1, [pc, #48]	; (8003ab0 <__NVIC_SetPriority+0x4c>)
 8003a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a82:	0112      	lsls	r2, r2, #4
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	440b      	add	r3, r1
 8003a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a8c:	e00a      	b.n	8003aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	4908      	ldr	r1, [pc, #32]	; (8003ab4 <__NVIC_SetPriority+0x50>)
 8003a94:	79fb      	ldrb	r3, [r7, #7]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	3b04      	subs	r3, #4
 8003a9c:	0112      	lsls	r2, r2, #4
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	761a      	strb	r2, [r3, #24]
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bc80      	pop	{r7}
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	e000e100 	.word	0xe000e100
 8003ab4:	e000ed00 	.word	0xe000ed00

08003ab8 <NVIC_EncodePriority>:
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b089      	sub	sp, #36	; 0x24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	f1c3 0307 	rsb	r3, r3, #7
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	bf28      	it	cs
 8003ad6:	2304      	movcs	r3, #4
 8003ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	3304      	adds	r3, #4
 8003ade:	2b06      	cmp	r3, #6
 8003ae0:	d902      	bls.n	8003ae8 <NVIC_EncodePriority+0x30>
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	3b03      	subs	r3, #3
 8003ae6:	e000      	b.n	8003aea <NVIC_EncodePriority+0x32>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aec:	f04f 32ff 	mov.w	r2, #4294967295
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	43da      	mvns	r2, r3
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	401a      	ands	r2, r3
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b00:	f04f 31ff 	mov.w	r1, #4294967295
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0a:	43d9      	mvns	r1, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b10:	4313      	orrs	r3, r2
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3724      	adds	r7, #36	; 0x24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bc80      	pop	{r7}
 8003b1a:	4770      	bx	lr

08003b1c <SysTick_Config>:
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b2c:	d301      	bcc.n	8003b32 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e00f      	b.n	8003b52 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b32:	4a0a      	ldr	r2, [pc, #40]	; (8003b5c <SysTick_Config+0x40>)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b3a:	210f      	movs	r1, #15
 8003b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b40:	f7ff ff90 	bl	8003a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <SysTick_Config+0x40>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b4a:	4b04      	ldr	r3, [pc, #16]	; (8003b5c <SysTick_Config+0x40>)
 8003b4c:	2207      	movs	r2, #7
 8003b4e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	e000e010 	.word	0xe000e010

08003b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff ff2d 	bl	80039c8 <__NVIC_SetPriorityGrouping>
}
 8003b6e:	bf00      	nop
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b086      	sub	sp, #24
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	607a      	str	r2, [r7, #4]
 8003b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b88:	f7ff ff42 	bl	8003a10 <__NVIC_GetPriorityGrouping>
 8003b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	68b9      	ldr	r1, [r7, #8]
 8003b92:	6978      	ldr	r0, [r7, #20]
 8003b94:	f7ff ff90 	bl	8003ab8 <NVIC_EncodePriority>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff ff5f 	bl	8003a64 <__NVIC_SetPriority>
}
 8003ba6:	bf00      	nop
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b082      	sub	sp, #8
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff ff35 	bl	8003a2c <__NVIC_EnableIRQ>
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b082      	sub	sp, #8
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7ff ffa2 	bl	8003b1c <SysTick_Config>
 8003bd8:	4603      	mov	r3, r0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e00e      	b.n	8003c12 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	795b      	ldrb	r3, [r3, #5]
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d105      	bne.n	8003c0a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7fe ffcb 	bl	8002ba0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b087      	sub	sp, #28
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	60f8      	str	r0, [r7, #12]
 8003c22:	60b9      	str	r1, [r7, #8]
 8003c24:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003c26:	2300      	movs	r3, #0
 8003c28:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0201 	orr.w	r2, r2, #1
 8003c3e:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	e00a      	b.n	8003c5c <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	441a      	add	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6812      	ldr	r2, [r2, #0]
 8003c54:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	617b      	str	r3, [r7, #20]
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d3f0      	bcc.n	8003c46 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8003c72:	693b      	ldr	r3, [r7, #16]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	371c      	adds	r7, #28
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr
	...

08003c80 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003c92:	2300      	movs	r3, #0
 8003c94:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003c96:	2300      	movs	r3, #0
 8003c98:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003c9a:	4b2f      	ldr	r3, [pc, #188]	; (8003d58 <HAL_FLASH_Program+0xd8>)
 8003c9c:	7e1b      	ldrb	r3, [r3, #24]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_FLASH_Program+0x26>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e054      	b.n	8003d50 <HAL_FLASH_Program+0xd0>
 8003ca6:	4b2c      	ldr	r3, [pc, #176]	; (8003d58 <HAL_FLASH_Program+0xd8>)
 8003ca8:	2201      	movs	r2, #1
 8003caa:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003cac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003cb0:	f000 f8a8 	bl	8003e04 <FLASH_WaitForLastOperation>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003cb8:	7dfb      	ldrb	r3, [r7, #23]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d144      	bne.n	8003d48 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d102      	bne.n	8003cca <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	757b      	strb	r3, [r7, #21]
 8003cc8:	e007      	b.n	8003cda <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d102      	bne.n	8003cd6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	757b      	strb	r3, [r7, #21]
 8003cd4:	e001      	b.n	8003cda <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003cd6:	2304      	movs	r3, #4
 8003cd8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003cda:	2300      	movs	r3, #0
 8003cdc:	75bb      	strb	r3, [r7, #22]
 8003cde:	e02d      	b.n	8003d3c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003ce0:	7dbb      	ldrb	r3, [r7, #22]
 8003ce2:	005a      	lsls	r2, r3, #1
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	eb02 0c03 	add.w	ip, r2, r3
 8003cea:	7dbb      	ldrb	r3, [r7, #22]
 8003cec:	0119      	lsls	r1, r3, #4
 8003cee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cf2:	f1c1 0620 	rsb	r6, r1, #32
 8003cf6:	f1a1 0020 	sub.w	r0, r1, #32
 8003cfa:	fa22 f401 	lsr.w	r4, r2, r1
 8003cfe:	fa03 f606 	lsl.w	r6, r3, r6
 8003d02:	4334      	orrs	r4, r6
 8003d04:	fa23 f000 	lsr.w	r0, r3, r0
 8003d08:	4304      	orrs	r4, r0
 8003d0a:	fa23 f501 	lsr.w	r5, r3, r1
 8003d0e:	b2a3      	uxth	r3, r4
 8003d10:	4619      	mov	r1, r3
 8003d12:	4660      	mov	r0, ip
 8003d14:	f000 f85a 	bl	8003dcc <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003d1c:	f000 f872 	bl	8003e04 <FLASH_WaitForLastOperation>
 8003d20:	4603      	mov	r3, r0
 8003d22:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003d24:	4b0d      	ldr	r3, [pc, #52]	; (8003d5c <HAL_FLASH_Program+0xdc>)
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	4a0c      	ldr	r2, [pc, #48]	; (8003d5c <HAL_FLASH_Program+0xdc>)
 8003d2a:	f023 0301 	bic.w	r3, r3, #1
 8003d2e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d107      	bne.n	8003d46 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003d36:	7dbb      	ldrb	r3, [r7, #22]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	75bb      	strb	r3, [r7, #22]
 8003d3c:	7dba      	ldrb	r2, [r7, #22]
 8003d3e:	7d7b      	ldrb	r3, [r7, #21]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d3cd      	bcc.n	8003ce0 <HAL_FLASH_Program+0x60>
 8003d44:	e000      	b.n	8003d48 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003d46:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003d48:	4b03      	ldr	r3, [pc, #12]	; (8003d58 <HAL_FLASH_Program+0xd8>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	761a      	strb	r2, [r3, #24]

  return status;
 8003d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	371c      	adds	r7, #28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d58:	200009d0 	.word	0x200009d0
 8003d5c:	40022000 	.word	0x40022000

08003d60 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003d6a:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <HAL_FLASH_Unlock+0x40>)
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00d      	beq.n	8003d92 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003d76:	4b0a      	ldr	r3, [pc, #40]	; (8003da0 <HAL_FLASH_Unlock+0x40>)
 8003d78:	4a0a      	ldr	r2, [pc, #40]	; (8003da4 <HAL_FLASH_Unlock+0x44>)
 8003d7a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003d7c:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <HAL_FLASH_Unlock+0x40>)
 8003d7e:	4a0a      	ldr	r2, [pc, #40]	; (8003da8 <HAL_FLASH_Unlock+0x48>)
 8003d80:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003d82:	4b07      	ldr	r3, [pc, #28]	; (8003da0 <HAL_FLASH_Unlock+0x40>)
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003d92:	79fb      	ldrb	r3, [r7, #7]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bc80      	pop	{r7}
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40022000 	.word	0x40022000
 8003da4:	45670123 	.word	0x45670123
 8003da8:	cdef89ab 	.word	0xcdef89ab

08003dac <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003db0:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <HAL_FLASH_Lock+0x1c>)
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	4a04      	ldr	r2, [pc, #16]	; (8003dc8 <HAL_FLASH_Lock+0x1c>)
 8003db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dba:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	40022000 	.word	0x40022000

08003dcc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003dd8:	4b08      	ldr	r3, [pc, #32]	; (8003dfc <FLASH_Program_HalfWord+0x30>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003dde:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <FLASH_Program_HalfWord+0x34>)
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	4a07      	ldr	r2, [pc, #28]	; (8003e00 <FLASH_Program_HalfWord+0x34>)
 8003de4:	f043 0301 	orr.w	r3, r3, #1
 8003de8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	887a      	ldrh	r2, [r7, #2]
 8003dee:	801a      	strh	r2, [r3, #0]
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bc80      	pop	{r7}
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	200009d0 	.word	0x200009d0
 8003e00:	40022000 	.word	0x40022000

08003e04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003e0c:	f7ff f942 	bl	8003094 <HAL_GetTick>
 8003e10:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003e12:	e010      	b.n	8003e36 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1a:	d00c      	beq.n	8003e36 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d007      	beq.n	8003e32 <FLASH_WaitForLastOperation+0x2e>
 8003e22:	f7ff f937 	bl	8003094 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d201      	bcs.n	8003e36 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e025      	b.n	8003e82 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003e36:	4b15      	ldr	r3, [pc, #84]	; (8003e8c <FLASH_WaitForLastOperation+0x88>)
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1e8      	bne.n	8003e14 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003e42:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <FLASH_WaitForLastOperation+0x88>)
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f003 0320 	and.w	r3, r3, #32
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003e4e:	4b0f      	ldr	r3, [pc, #60]	; (8003e8c <FLASH_WaitForLastOperation+0x88>)
 8003e50:	2220      	movs	r2, #32
 8003e52:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003e54:	4b0d      	ldr	r3, [pc, #52]	; (8003e8c <FLASH_WaitForLastOperation+0x88>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10b      	bne.n	8003e78 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003e60:	4b0a      	ldr	r3, [pc, #40]	; (8003e8c <FLASH_WaitForLastOperation+0x88>)
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d105      	bne.n	8003e78 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003e6c:	4b07      	ldr	r3, [pc, #28]	; (8003e8c <FLASH_WaitForLastOperation+0x88>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003e78:	f000 f80a 	bl	8003e90 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40022000 	.word	0x40022000

08003e90 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003e9a:	4b23      	ldr	r3, [pc, #140]	; (8003f28 <FLASH_SetErrorCode+0x98>)
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f003 0310 	and.w	r3, r3, #16
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d009      	beq.n	8003eba <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003ea6:	4b21      	ldr	r3, [pc, #132]	; (8003f2c <FLASH_SetErrorCode+0x9c>)
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	f043 0302 	orr.w	r3, r3, #2
 8003eae:	4a1f      	ldr	r2, [pc, #124]	; (8003f2c <FLASH_SetErrorCode+0x9c>)
 8003eb0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f043 0310 	orr.w	r3, r3, #16
 8003eb8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003eba:	4b1b      	ldr	r3, [pc, #108]	; (8003f28 <FLASH_SetErrorCode+0x98>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f003 0304 	and.w	r3, r3, #4
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d009      	beq.n	8003eda <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003ec6:	4b19      	ldr	r3, [pc, #100]	; (8003f2c <FLASH_SetErrorCode+0x9c>)
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	4a17      	ldr	r2, [pc, #92]	; (8003f2c <FLASH_SetErrorCode+0x9c>)
 8003ed0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f043 0304 	orr.w	r3, r3, #4
 8003ed8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003eda:	4b13      	ldr	r3, [pc, #76]	; (8003f28 <FLASH_SetErrorCode+0x98>)
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00b      	beq.n	8003efe <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003ee6:	4b11      	ldr	r3, [pc, #68]	; (8003f2c <FLASH_SetErrorCode+0x9c>)
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	f043 0304 	orr.w	r3, r3, #4
 8003eee:	4a0f      	ldr	r2, [pc, #60]	; (8003f2c <FLASH_SetErrorCode+0x9c>)
 8003ef0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003ef2:	4b0d      	ldr	r3, [pc, #52]	; (8003f28 <FLASH_SetErrorCode+0x98>)
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	4a0c      	ldr	r2, [pc, #48]	; (8003f28 <FLASH_SetErrorCode+0x98>)
 8003ef8:	f023 0301 	bic.w	r3, r3, #1
 8003efc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f240 1201 	movw	r2, #257	; 0x101
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d106      	bne.n	8003f16 <FLASH_SetErrorCode+0x86>
 8003f08:	4b07      	ldr	r3, [pc, #28]	; (8003f28 <FLASH_SetErrorCode+0x98>)
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	4a06      	ldr	r2, [pc, #24]	; (8003f28 <FLASH_SetErrorCode+0x98>)
 8003f0e:	f023 0301 	bic.w	r3, r3, #1
 8003f12:	61d3      	str	r3, [r2, #28]
}  
 8003f14:	e002      	b.n	8003f1c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003f16:	4a04      	ldr	r2, [pc, #16]	; (8003f28 <FLASH_SetErrorCode+0x98>)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	60d3      	str	r3, [r2, #12]
}  
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40022000 	.word	0x40022000
 8003f2c:	200009d0 	.word	0x200009d0

08003f30 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003f42:	4b2f      	ldr	r3, [pc, #188]	; (8004000 <HAL_FLASHEx_Erase+0xd0>)
 8003f44:	7e1b      	ldrb	r3, [r3, #24]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d101      	bne.n	8003f4e <HAL_FLASHEx_Erase+0x1e>
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	e053      	b.n	8003ff6 <HAL_FLASHEx_Erase+0xc6>
 8003f4e:	4b2c      	ldr	r3, [pc, #176]	; (8004000 <HAL_FLASHEx_Erase+0xd0>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d116      	bne.n	8003f8a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003f5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f60:	f7ff ff50 	bl	8003e04 <FLASH_WaitForLastOperation>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d141      	bne.n	8003fee <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003f6a:	2001      	movs	r0, #1
 8003f6c:	f000 f84c 	bl	8004008 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f74:	f7ff ff46 	bl	8003e04 <FLASH_WaitForLastOperation>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003f7c:	4b21      	ldr	r3, [pc, #132]	; (8004004 <HAL_FLASHEx_Erase+0xd4>)
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	4a20      	ldr	r2, [pc, #128]	; (8004004 <HAL_FLASHEx_Erase+0xd4>)
 8003f82:	f023 0304 	bic.w	r3, r3, #4
 8003f86:	6113      	str	r3, [r2, #16]
 8003f88:	e031      	b.n	8003fee <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003f8a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f8e:	f7ff ff39 	bl	8003e04 <FLASH_WaitForLastOperation>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d12a      	bne.n	8003fee <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f9e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	e019      	b.n	8003fdc <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003fa8:	68b8      	ldr	r0, [r7, #8]
 8003faa:	f000 f849 	bl	8004040 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003fae:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003fb2:	f7ff ff27 	bl	8003e04 <FLASH_WaitForLastOperation>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003fba:	4b12      	ldr	r3, [pc, #72]	; (8004004 <HAL_FLASHEx_Erase+0xd4>)
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	4a11      	ldr	r2, [pc, #68]	; (8004004 <HAL_FLASHEx_Erase+0xd4>)
 8003fc0:	f023 0302 	bic.w	r3, r3, #2
 8003fc4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	601a      	str	r2, [r3, #0]
            break;
 8003fd2:	e00c      	b.n	8003fee <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fda:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	029a      	lsls	r2, r3, #10
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d3dc      	bcc.n	8003fa8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003fee:	4b04      	ldr	r3, [pc, #16]	; (8004000 <HAL_FLASHEx_Erase+0xd0>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	761a      	strb	r2, [r3, #24]

  return status;
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	200009d0 	.word	0x200009d0
 8004004:	40022000 	.word	0x40022000

08004008 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004010:	4b09      	ldr	r3, [pc, #36]	; (8004038 <FLASH_MassErase+0x30>)
 8004012:	2200      	movs	r2, #0
 8004014:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004016:	4b09      	ldr	r3, [pc, #36]	; (800403c <FLASH_MassErase+0x34>)
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	4a08      	ldr	r2, [pc, #32]	; (800403c <FLASH_MassErase+0x34>)
 800401c:	f043 0304 	orr.w	r3, r3, #4
 8004020:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004022:	4b06      	ldr	r3, [pc, #24]	; (800403c <FLASH_MassErase+0x34>)
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	4a05      	ldr	r2, [pc, #20]	; (800403c <FLASH_MassErase+0x34>)
 8004028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800402c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr
 8004038:	200009d0 	.word	0x200009d0
 800403c:	40022000 	.word	0x40022000

08004040 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004048:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <FLASH_PageErase+0x38>)
 800404a:	2200      	movs	r2, #0
 800404c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800404e:	4b0b      	ldr	r3, [pc, #44]	; (800407c <FLASH_PageErase+0x3c>)
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	4a0a      	ldr	r2, [pc, #40]	; (800407c <FLASH_PageErase+0x3c>)
 8004054:	f043 0302 	orr.w	r3, r3, #2
 8004058:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800405a:	4a08      	ldr	r2, [pc, #32]	; (800407c <FLASH_PageErase+0x3c>)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004060:	4b06      	ldr	r3, [pc, #24]	; (800407c <FLASH_PageErase+0x3c>)
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	4a05      	ldr	r2, [pc, #20]	; (800407c <FLASH_PageErase+0x3c>)
 8004066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800406a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	bc80      	pop	{r7}
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	200009d0 	.word	0x200009d0
 800407c:	40022000 	.word	0x40022000

08004080 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004080:	b480      	push	{r7}
 8004082:	b08b      	sub	sp, #44	; 0x2c
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800408a:	2300      	movs	r3, #0
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800408e:	2300      	movs	r3, #0
 8004090:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004092:	e169      	b.n	8004368 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004094:	2201      	movs	r2, #1
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	4013      	ands	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	f040 8158 	bne.w	8004362 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	4a9a      	ldr	r2, [pc, #616]	; (8004320 <HAL_GPIO_Init+0x2a0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d05e      	beq.n	800417a <HAL_GPIO_Init+0xfa>
 80040bc:	4a98      	ldr	r2, [pc, #608]	; (8004320 <HAL_GPIO_Init+0x2a0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d875      	bhi.n	80041ae <HAL_GPIO_Init+0x12e>
 80040c2:	4a98      	ldr	r2, [pc, #608]	; (8004324 <HAL_GPIO_Init+0x2a4>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d058      	beq.n	800417a <HAL_GPIO_Init+0xfa>
 80040c8:	4a96      	ldr	r2, [pc, #600]	; (8004324 <HAL_GPIO_Init+0x2a4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d86f      	bhi.n	80041ae <HAL_GPIO_Init+0x12e>
 80040ce:	4a96      	ldr	r2, [pc, #600]	; (8004328 <HAL_GPIO_Init+0x2a8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d052      	beq.n	800417a <HAL_GPIO_Init+0xfa>
 80040d4:	4a94      	ldr	r2, [pc, #592]	; (8004328 <HAL_GPIO_Init+0x2a8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d869      	bhi.n	80041ae <HAL_GPIO_Init+0x12e>
 80040da:	4a94      	ldr	r2, [pc, #592]	; (800432c <HAL_GPIO_Init+0x2ac>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d04c      	beq.n	800417a <HAL_GPIO_Init+0xfa>
 80040e0:	4a92      	ldr	r2, [pc, #584]	; (800432c <HAL_GPIO_Init+0x2ac>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d863      	bhi.n	80041ae <HAL_GPIO_Init+0x12e>
 80040e6:	4a92      	ldr	r2, [pc, #584]	; (8004330 <HAL_GPIO_Init+0x2b0>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d046      	beq.n	800417a <HAL_GPIO_Init+0xfa>
 80040ec:	4a90      	ldr	r2, [pc, #576]	; (8004330 <HAL_GPIO_Init+0x2b0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d85d      	bhi.n	80041ae <HAL_GPIO_Init+0x12e>
 80040f2:	2b12      	cmp	r3, #18
 80040f4:	d82a      	bhi.n	800414c <HAL_GPIO_Init+0xcc>
 80040f6:	2b12      	cmp	r3, #18
 80040f8:	d859      	bhi.n	80041ae <HAL_GPIO_Init+0x12e>
 80040fa:	a201      	add	r2, pc, #4	; (adr r2, 8004100 <HAL_GPIO_Init+0x80>)
 80040fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004100:	0800417b 	.word	0x0800417b
 8004104:	08004155 	.word	0x08004155
 8004108:	08004167 	.word	0x08004167
 800410c:	080041a9 	.word	0x080041a9
 8004110:	080041af 	.word	0x080041af
 8004114:	080041af 	.word	0x080041af
 8004118:	080041af 	.word	0x080041af
 800411c:	080041af 	.word	0x080041af
 8004120:	080041af 	.word	0x080041af
 8004124:	080041af 	.word	0x080041af
 8004128:	080041af 	.word	0x080041af
 800412c:	080041af 	.word	0x080041af
 8004130:	080041af 	.word	0x080041af
 8004134:	080041af 	.word	0x080041af
 8004138:	080041af 	.word	0x080041af
 800413c:	080041af 	.word	0x080041af
 8004140:	080041af 	.word	0x080041af
 8004144:	0800415d 	.word	0x0800415d
 8004148:	08004171 	.word	0x08004171
 800414c:	4a79      	ldr	r2, [pc, #484]	; (8004334 <HAL_GPIO_Init+0x2b4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d013      	beq.n	800417a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004152:	e02c      	b.n	80041ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	623b      	str	r3, [r7, #32]
          break;
 800415a:	e029      	b.n	80041b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	3304      	adds	r3, #4
 8004162:	623b      	str	r3, [r7, #32]
          break;
 8004164:	e024      	b.n	80041b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	3308      	adds	r3, #8
 800416c:	623b      	str	r3, [r7, #32]
          break;
 800416e:	e01f      	b.n	80041b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	330c      	adds	r3, #12
 8004176:	623b      	str	r3, [r7, #32]
          break;
 8004178:	e01a      	b.n	80041b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d102      	bne.n	8004188 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004182:	2304      	movs	r3, #4
 8004184:	623b      	str	r3, [r7, #32]
          break;
 8004186:	e013      	b.n	80041b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d105      	bne.n	800419c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004190:	2308      	movs	r3, #8
 8004192:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69fa      	ldr	r2, [r7, #28]
 8004198:	611a      	str	r2, [r3, #16]
          break;
 800419a:	e009      	b.n	80041b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800419c:	2308      	movs	r3, #8
 800419e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	69fa      	ldr	r2, [r7, #28]
 80041a4:	615a      	str	r2, [r3, #20]
          break;
 80041a6:	e003      	b.n	80041b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80041a8:	2300      	movs	r3, #0
 80041aa:	623b      	str	r3, [r7, #32]
          break;
 80041ac:	e000      	b.n	80041b0 <HAL_GPIO_Init+0x130>
          break;
 80041ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	2bff      	cmp	r3, #255	; 0xff
 80041b4:	d801      	bhi.n	80041ba <HAL_GPIO_Init+0x13a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	e001      	b.n	80041be <HAL_GPIO_Init+0x13e>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3304      	adds	r3, #4
 80041be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	2bff      	cmp	r3, #255	; 0xff
 80041c4:	d802      	bhi.n	80041cc <HAL_GPIO_Init+0x14c>
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	e002      	b.n	80041d2 <HAL_GPIO_Init+0x152>
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	3b08      	subs	r3, #8
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	210f      	movs	r1, #15
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	fa01 f303 	lsl.w	r3, r1, r3
 80041e0:	43db      	mvns	r3, r3
 80041e2:	401a      	ands	r2, r3
 80041e4:	6a39      	ldr	r1, [r7, #32]
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ec:	431a      	orrs	r2, r3
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 80b1 	beq.w	8004362 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004200:	4b4d      	ldr	r3, [pc, #308]	; (8004338 <HAL_GPIO_Init+0x2b8>)
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	4a4c      	ldr	r2, [pc, #304]	; (8004338 <HAL_GPIO_Init+0x2b8>)
 8004206:	f043 0301 	orr.w	r3, r3, #1
 800420a:	6193      	str	r3, [r2, #24]
 800420c:	4b4a      	ldr	r3, [pc, #296]	; (8004338 <HAL_GPIO_Init+0x2b8>)
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	60bb      	str	r3, [r7, #8]
 8004216:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004218:	4a48      	ldr	r2, [pc, #288]	; (800433c <HAL_GPIO_Init+0x2bc>)
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	089b      	lsrs	r3, r3, #2
 800421e:	3302      	adds	r3, #2
 8004220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004224:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	f003 0303 	and.w	r3, r3, #3
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	220f      	movs	r2, #15
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	43db      	mvns	r3, r3
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4013      	ands	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a40      	ldr	r2, [pc, #256]	; (8004340 <HAL_GPIO_Init+0x2c0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d013      	beq.n	800426c <HAL_GPIO_Init+0x1ec>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a3f      	ldr	r2, [pc, #252]	; (8004344 <HAL_GPIO_Init+0x2c4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d00d      	beq.n	8004268 <HAL_GPIO_Init+0x1e8>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a3e      	ldr	r2, [pc, #248]	; (8004348 <HAL_GPIO_Init+0x2c8>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d007      	beq.n	8004264 <HAL_GPIO_Init+0x1e4>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a3d      	ldr	r2, [pc, #244]	; (800434c <HAL_GPIO_Init+0x2cc>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d101      	bne.n	8004260 <HAL_GPIO_Init+0x1e0>
 800425c:	2303      	movs	r3, #3
 800425e:	e006      	b.n	800426e <HAL_GPIO_Init+0x1ee>
 8004260:	2304      	movs	r3, #4
 8004262:	e004      	b.n	800426e <HAL_GPIO_Init+0x1ee>
 8004264:	2302      	movs	r3, #2
 8004266:	e002      	b.n	800426e <HAL_GPIO_Init+0x1ee>
 8004268:	2301      	movs	r3, #1
 800426a:	e000      	b.n	800426e <HAL_GPIO_Init+0x1ee>
 800426c:	2300      	movs	r3, #0
 800426e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004270:	f002 0203 	and.w	r2, r2, #3
 8004274:	0092      	lsls	r2, r2, #2
 8004276:	4093      	lsls	r3, r2
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800427e:	492f      	ldr	r1, [pc, #188]	; (800433c <HAL_GPIO_Init+0x2bc>)
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	089b      	lsrs	r3, r3, #2
 8004284:	3302      	adds	r3, #2
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d006      	beq.n	80042a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004298:	4b2d      	ldr	r3, [pc, #180]	; (8004350 <HAL_GPIO_Init+0x2d0>)
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	492c      	ldr	r1, [pc, #176]	; (8004350 <HAL_GPIO_Init+0x2d0>)
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	600b      	str	r3, [r1, #0]
 80042a4:	e006      	b.n	80042b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80042a6:	4b2a      	ldr	r3, [pc, #168]	; (8004350 <HAL_GPIO_Init+0x2d0>)
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	43db      	mvns	r3, r3
 80042ae:	4928      	ldr	r1, [pc, #160]	; (8004350 <HAL_GPIO_Init+0x2d0>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d006      	beq.n	80042ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80042c0:	4b23      	ldr	r3, [pc, #140]	; (8004350 <HAL_GPIO_Init+0x2d0>)
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	4922      	ldr	r1, [pc, #136]	; (8004350 <HAL_GPIO_Init+0x2d0>)
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	604b      	str	r3, [r1, #4]
 80042cc:	e006      	b.n	80042dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80042ce:	4b20      	ldr	r3, [pc, #128]	; (8004350 <HAL_GPIO_Init+0x2d0>)
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	43db      	mvns	r3, r3
 80042d6:	491e      	ldr	r1, [pc, #120]	; (8004350 <HAL_GPIO_Init+0x2d0>)
 80042d8:	4013      	ands	r3, r2
 80042da:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d006      	beq.n	80042f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80042e8:	4b19      	ldr	r3, [pc, #100]	; (8004350 <HAL_GPIO_Init+0x2d0>)
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	4918      	ldr	r1, [pc, #96]	; (8004350 <HAL_GPIO_Init+0x2d0>)
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	608b      	str	r3, [r1, #8]
 80042f4:	e006      	b.n	8004304 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80042f6:	4b16      	ldr	r3, [pc, #88]	; (8004350 <HAL_GPIO_Init+0x2d0>)
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	43db      	mvns	r3, r3
 80042fe:	4914      	ldr	r1, [pc, #80]	; (8004350 <HAL_GPIO_Init+0x2d0>)
 8004300:	4013      	ands	r3, r2
 8004302:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d021      	beq.n	8004354 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004310:	4b0f      	ldr	r3, [pc, #60]	; (8004350 <HAL_GPIO_Init+0x2d0>)
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	490e      	ldr	r1, [pc, #56]	; (8004350 <HAL_GPIO_Init+0x2d0>)
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	4313      	orrs	r3, r2
 800431a:	60cb      	str	r3, [r1, #12]
 800431c:	e021      	b.n	8004362 <HAL_GPIO_Init+0x2e2>
 800431e:	bf00      	nop
 8004320:	10320000 	.word	0x10320000
 8004324:	10310000 	.word	0x10310000
 8004328:	10220000 	.word	0x10220000
 800432c:	10210000 	.word	0x10210000
 8004330:	10120000 	.word	0x10120000
 8004334:	10110000 	.word	0x10110000
 8004338:	40021000 	.word	0x40021000
 800433c:	40010000 	.word	0x40010000
 8004340:	40010800 	.word	0x40010800
 8004344:	40010c00 	.word	0x40010c00
 8004348:	40011000 	.word	0x40011000
 800434c:	40011400 	.word	0x40011400
 8004350:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004354:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <HAL_GPIO_Init+0x304>)
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	43db      	mvns	r3, r3
 800435c:	4909      	ldr	r1, [pc, #36]	; (8004384 <HAL_GPIO_Init+0x304>)
 800435e:	4013      	ands	r3, r2
 8004360:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	3301      	adds	r3, #1
 8004366:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	fa22 f303 	lsr.w	r3, r2, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	f47f ae8e 	bne.w	8004094 <HAL_GPIO_Init+0x14>
  }
}
 8004378:	bf00      	nop
 800437a:	bf00      	nop
 800437c:	372c      	adds	r7, #44	; 0x2c
 800437e:	46bd      	mov	sp, r7
 8004380:	bc80      	pop	{r7}
 8004382:	4770      	bx	lr
 8004384:	40010400 	.word	0x40010400

08004388 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	887b      	ldrh	r3, [r7, #2]
 800439a:	4013      	ands	r3, r2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043a0:	2301      	movs	r3, #1
 80043a2:	73fb      	strb	r3, [r7, #15]
 80043a4:	e001      	b.n	80043aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043a6:	2300      	movs	r3, #0
 80043a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3714      	adds	r7, #20
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc80      	pop	{r7}
 80043b4:	4770      	bx	lr

080043b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
 80043be:	460b      	mov	r3, r1
 80043c0:	807b      	strh	r3, [r7, #2]
 80043c2:	4613      	mov	r3, r2
 80043c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043c6:	787b      	ldrb	r3, [r7, #1]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043cc:	887a      	ldrh	r2, [r7, #2]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80043d2:	e003      	b.n	80043dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80043d4:	887b      	ldrh	r3, [r7, #2]
 80043d6:	041a      	lsls	r2, r3, #16
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	611a      	str	r2, [r3, #16]
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bc80      	pop	{r7}
 80043e4:	4770      	bx	lr

080043e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80043e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e8:	b08b      	sub	sp, #44	; 0x2c
 80043ea:	af06      	add	r7, sp, #24
 80043ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e0fd      	b.n	80045f4 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d106      	bne.n	8004412 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f006 fed9 	bl	800b1c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2203      	movs	r2, #3
 8004416:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f003 f8dc 	bl	80075dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	603b      	str	r3, [r7, #0]
 800442a:	687e      	ldr	r6, [r7, #4]
 800442c:	466d      	mov	r5, sp
 800442e:	f106 0410 	add.w	r4, r6, #16
 8004432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004434:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	602b      	str	r3, [r5, #0]
 800443a:	1d33      	adds	r3, r6, #4
 800443c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800443e:	6838      	ldr	r0, [r7, #0]
 8004440:	f003 f8a6 	bl	8007590 <USB_CoreInit>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d005      	beq.n	8004456 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2202      	movs	r2, #2
 800444e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e0ce      	b.n	80045f4 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2100      	movs	r1, #0
 800445c:	4618      	mov	r0, r3
 800445e:	f003 f8d7 	bl	8007610 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004462:	2300      	movs	r3, #0
 8004464:	73fb      	strb	r3, [r7, #15]
 8004466:	e04c      	b.n	8004502 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004468:	7bfb      	ldrb	r3, [r7, #15]
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	4613      	mov	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4413      	add	r3, r2
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	440b      	add	r3, r1
 8004478:	3301      	adds	r3, #1
 800447a:	2201      	movs	r2, #1
 800447c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800447e:	7bfb      	ldrb	r3, [r7, #15]
 8004480:	6879      	ldr	r1, [r7, #4]
 8004482:	1c5a      	adds	r2, r3, #1
 8004484:	4613      	mov	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	440b      	add	r3, r1
 800448e:	7bfa      	ldrb	r2, [r7, #15]
 8004490:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004492:	7bfa      	ldrb	r2, [r7, #15]
 8004494:	7bfb      	ldrb	r3, [r7, #15]
 8004496:	b298      	uxth	r0, r3
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	4613      	mov	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	440b      	add	r3, r1
 80044a4:	3336      	adds	r3, #54	; 0x36
 80044a6:	4602      	mov	r2, r0
 80044a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80044aa:	7bfb      	ldrb	r3, [r7, #15]
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	4613      	mov	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	440b      	add	r3, r1
 80044ba:	3303      	adds	r3, #3
 80044bc:	2200      	movs	r2, #0
 80044be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80044c0:	7bfa      	ldrb	r2, [r7, #15]
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	4613      	mov	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	440b      	add	r3, r1
 80044ce:	3338      	adds	r3, #56	; 0x38
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80044d4:	7bfa      	ldrb	r2, [r7, #15]
 80044d6:	6879      	ldr	r1, [r7, #4]
 80044d8:	4613      	mov	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	440b      	add	r3, r1
 80044e2:	333c      	adds	r3, #60	; 0x3c
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80044e8:	7bfa      	ldrb	r2, [r7, #15]
 80044ea:	6879      	ldr	r1, [r7, #4]
 80044ec:	4613      	mov	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	440b      	add	r3, r1
 80044f6:	3340      	adds	r3, #64	; 0x40
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044fc:	7bfb      	ldrb	r3, [r7, #15]
 80044fe:	3301      	adds	r3, #1
 8004500:	73fb      	strb	r3, [r7, #15]
 8004502:	7bfa      	ldrb	r2, [r7, #15]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	429a      	cmp	r2, r3
 800450a:	d3ad      	bcc.n	8004468 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800450c:	2300      	movs	r3, #0
 800450e:	73fb      	strb	r3, [r7, #15]
 8004510:	e044      	b.n	800459c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004512:	7bfa      	ldrb	r2, [r7, #15]
 8004514:	6879      	ldr	r1, [r7, #4]
 8004516:	4613      	mov	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	440b      	add	r3, r1
 8004520:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004524:	2200      	movs	r2, #0
 8004526:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004528:	7bfa      	ldrb	r2, [r7, #15]
 800452a:	6879      	ldr	r1, [r7, #4]
 800452c:	4613      	mov	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	440b      	add	r3, r1
 8004536:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800453a:	7bfa      	ldrb	r2, [r7, #15]
 800453c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800453e:	7bfa      	ldrb	r2, [r7, #15]
 8004540:	6879      	ldr	r1, [r7, #4]
 8004542:	4613      	mov	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	440b      	add	r3, r1
 800454c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004550:	2200      	movs	r2, #0
 8004552:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004554:	7bfa      	ldrb	r2, [r7, #15]
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	4613      	mov	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	440b      	add	r3, r1
 8004562:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004566:	2200      	movs	r2, #0
 8004568:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800456a:	7bfa      	ldrb	r2, [r7, #15]
 800456c:	6879      	ldr	r1, [r7, #4]
 800456e:	4613      	mov	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	440b      	add	r3, r1
 8004578:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800457c:	2200      	movs	r2, #0
 800457e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004580:	7bfa      	ldrb	r2, [r7, #15]
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	4613      	mov	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	440b      	add	r3, r1
 800458e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004596:	7bfb      	ldrb	r3, [r7, #15]
 8004598:	3301      	adds	r3, #1
 800459a:	73fb      	strb	r3, [r7, #15]
 800459c:	7bfa      	ldrb	r2, [r7, #15]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d3b5      	bcc.n	8004512 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	603b      	str	r3, [r7, #0]
 80045ac:	687e      	ldr	r6, [r7, #4]
 80045ae:	466d      	mov	r5, sp
 80045b0:	f106 0410 	add.w	r4, r6, #16
 80045b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045b8:	6823      	ldr	r3, [r4, #0]
 80045ba:	602b      	str	r3, [r5, #0]
 80045bc:	1d33      	adds	r3, r6, #4
 80045be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045c0:	6838      	ldr	r0, [r7, #0]
 80045c2:	f003 f831 	bl	8007628 <USB_DevInit>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d005      	beq.n	80045d8 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e00d      	b.n	80045f4 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f004 ffcb 	bl	8009588 <USB_DevDisconnect>

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045fc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_PCD_Start+0x16>
 800460e:	2302      	movs	r3, #2
 8004610:	e016      	b.n	8004640 <HAL_PCD_Start+0x44>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f002 ffc6 	bl	80075b0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004624:	2101      	movs	r1, #1
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f007 f83f 	bl	800b6aa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4618      	mov	r0, r3
 8004632:	f004 ff9f 	bl	8009574 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3708      	adds	r7, #8
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b088      	sub	sp, #32
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4618      	mov	r0, r3
 8004656:	f004 ffa1 	bl	800959c <USB_ReadInterrupts>
 800465a:	4603      	mov	r3, r0
 800465c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004664:	d102      	bne.n	800466c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fb61 	bl	8004d2e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4618      	mov	r0, r3
 8004672:	f004 ff93 	bl	800959c <USB_ReadInterrupts>
 8004676:	4603      	mov	r3, r0
 8004678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800467c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004680:	d112      	bne.n	80046a8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800468a:	b29a      	uxth	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004694:	b292      	uxth	r2, r2
 8004696:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f006 fe0d 	bl	800b2ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80046a0:	2100      	movs	r1, #0
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f925 	bl	80048f2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f004 ff75 	bl	800959c <USB_ReadInterrupts>
 80046b2:	4603      	mov	r3, r0
 80046b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046bc:	d10b      	bne.n	80046d6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046d0:	b292      	uxth	r2, r2
 80046d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f004 ff5e 	bl	800959c <USB_ReadInterrupts>
 80046e0:	4603      	mov	r3, r0
 80046e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ea:	d10b      	bne.n	8004704 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046fe:	b292      	uxth	r2, r2
 8004700:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4618      	mov	r0, r3
 800470a:	f004 ff47 	bl	800959c <USB_ReadInterrupts>
 800470e:	4603      	mov	r3, r0
 8004710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004718:	d126      	bne.n	8004768 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004722:	b29a      	uxth	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0204 	bic.w	r2, r2, #4
 800472c:	b292      	uxth	r2, r2
 800472e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800473a:	b29a      	uxth	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0208 	bic.w	r2, r2, #8
 8004744:	b292      	uxth	r2, r2
 8004746:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f006 fdee 	bl	800b32c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004758:	b29a      	uxth	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004762:	b292      	uxth	r2, r2
 8004764:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4618      	mov	r0, r3
 800476e:	f004 ff15 	bl	800959c <USB_ReadInterrupts>
 8004772:	4603      	mov	r3, r0
 8004774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800477c:	f040 8084 	bne.w	8004888 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004780:	2300      	movs	r3, #0
 8004782:	77fb      	strb	r3, [r7, #31]
 8004784:	e011      	b.n	80047aa <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	7ffb      	ldrb	r3, [r7, #31]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	441a      	add	r2, r3
 8004792:	7ffb      	ldrb	r3, [r7, #31]
 8004794:	8812      	ldrh	r2, [r2, #0]
 8004796:	b292      	uxth	r2, r2
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	f107 0120 	add.w	r1, r7, #32
 800479e:	440b      	add	r3, r1
 80047a0:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80047a4:	7ffb      	ldrb	r3, [r7, #31]
 80047a6:	3301      	adds	r3, #1
 80047a8:	77fb      	strb	r3, [r7, #31]
 80047aa:	7ffb      	ldrb	r3, [r7, #31]
 80047ac:	2b07      	cmp	r3, #7
 80047ae:	d9ea      	bls.n	8004786 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0201 	orr.w	r2, r2, #1
 80047c2:	b292      	uxth	r2, r2
 80047c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0201 	bic.w	r2, r2, #1
 80047da:	b292      	uxth	r2, r2
 80047dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80047e0:	bf00      	nop
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0f6      	beq.n	80047e2 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004806:	b292      	uxth	r2, r2
 8004808:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800480c:	2300      	movs	r3, #0
 800480e:	77fb      	strb	r3, [r7, #31]
 8004810:	e010      	b.n	8004834 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004812:	7ffb      	ldrb	r3, [r7, #31]
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	4611      	mov	r1, r2
 800481a:	7ffa      	ldrb	r2, [r7, #31]
 800481c:	0092      	lsls	r2, r2, #2
 800481e:	440a      	add	r2, r1
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	f107 0120 	add.w	r1, r7, #32
 8004826:	440b      	add	r3, r1
 8004828:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800482c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800482e:	7ffb      	ldrb	r3, [r7, #31]
 8004830:	3301      	adds	r3, #1
 8004832:	77fb      	strb	r3, [r7, #31]
 8004834:	7ffb      	ldrb	r3, [r7, #31]
 8004836:	2b07      	cmp	r3, #7
 8004838:	d9eb      	bls.n	8004812 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004842:	b29a      	uxth	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f042 0208 	orr.w	r2, r2, #8
 800484c:	b292      	uxth	r2, r2
 800484e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800485a:	b29a      	uxth	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004864:	b292      	uxth	r2, r2
 8004866:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004872:	b29a      	uxth	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f042 0204 	orr.w	r2, r2, #4
 800487c:	b292      	uxth	r2, r2
 800487e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f006 fd38 	bl	800b2f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4618      	mov	r0, r3
 800488e:	f004 fe85 	bl	800959c <USB_ReadInterrupts>
 8004892:	4603      	mov	r3, r0
 8004894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800489c:	d10e      	bne.n	80048bc <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80048b0:	b292      	uxth	r2, r2
 80048b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f006 fcf1 	bl	800b29e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f004 fe6b 	bl	800959c <USB_ReadInterrupts>
 80048c6:	4603      	mov	r3, r0
 80048c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048d0:	d10b      	bne.n	80048ea <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048da:	b29a      	uxth	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048e4:	b292      	uxth	r2, r2
 80048e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80048ea:	bf00      	nop
 80048ec:	3720      	adds	r7, #32
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b082      	sub	sp, #8
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	460b      	mov	r3, r1
 80048fc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004904:	2b01      	cmp	r3, #1
 8004906:	d101      	bne.n	800490c <HAL_PCD_SetAddress+0x1a>
 8004908:	2302      	movs	r3, #2
 800490a:	e013      	b.n	8004934 <HAL_PCD_SetAddress+0x42>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	78fa      	ldrb	r2, [r7, #3]
 8004918:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	78fa      	ldrb	r2, [r7, #3]
 8004922:	4611      	mov	r1, r2
 8004924:	4618      	mov	r0, r3
 8004926:	f004 fe12 	bl	800954e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	4608      	mov	r0, r1
 8004946:	4611      	mov	r1, r2
 8004948:	461a      	mov	r2, r3
 800494a:	4603      	mov	r3, r0
 800494c:	70fb      	strb	r3, [r7, #3]
 800494e:	460b      	mov	r3, r1
 8004950:	803b      	strh	r3, [r7, #0]
 8004952:	4613      	mov	r3, r2
 8004954:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004956:	2300      	movs	r3, #0
 8004958:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800495a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800495e:	2b00      	cmp	r3, #0
 8004960:	da0e      	bge.n	8004980 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	4613      	mov	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	4413      	add	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2201      	movs	r2, #1
 800497c:	705a      	strb	r2, [r3, #1]
 800497e:	e00e      	b.n	800499e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004980:	78fb      	ldrb	r3, [r7, #3]
 8004982:	f003 0207 	and.w	r2, r3, #7
 8004986:	4613      	mov	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	4413      	add	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800499e:	78fb      	ldrb	r3, [r7, #3]
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80049aa:	883a      	ldrh	r2, [r7, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	78ba      	ldrb	r2, [r7, #2]
 80049b4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	785b      	ldrb	r3, [r3, #1]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d004      	beq.n	80049c8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80049c8:	78bb      	ldrb	r3, [r7, #2]
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d102      	bne.n	80049d4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d101      	bne.n	80049e2 <HAL_PCD_EP_Open+0xa6>
 80049de:	2302      	movs	r3, #2
 80049e0:	e00e      	b.n	8004a00 <HAL_PCD_EP_Open+0xc4>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68f9      	ldr	r1, [r7, #12]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f002 fe39 	bl	8007668 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80049fe:	7afb      	ldrb	r3, [r7, #11]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	460b      	mov	r3, r1
 8004a12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	da0e      	bge.n	8004a3a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a1c:	78fb      	ldrb	r3, [r7, #3]
 8004a1e:	f003 0307 	and.w	r3, r3, #7
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	4413      	add	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2201      	movs	r2, #1
 8004a36:	705a      	strb	r2, [r3, #1]
 8004a38:	e00e      	b.n	8004a58 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	f003 0207 	and.w	r2, r3, #7
 8004a40:	4613      	mov	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	4413      	add	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004a58:	78fb      	ldrb	r3, [r7, #3]
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	b2da      	uxtb	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d101      	bne.n	8004a72 <HAL_PCD_EP_Close+0x6a>
 8004a6e:	2302      	movs	r3, #2
 8004a70:	e00e      	b.n	8004a90 <HAL_PCD_EP_Close+0x88>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68f9      	ldr	r1, [r7, #12]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f003 f95b 	bl	8007d3c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	607a      	str	r2, [r7, #4]
 8004aa2:	603b      	str	r3, [r7, #0]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004aa8:	7afb      	ldrb	r3, [r7, #11]
 8004aaa:	f003 0207 	and.w	r2, r3, #7
 8004aae:	4613      	mov	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	4413      	add	r3, r2
 8004abe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ad8:	7afb      	ldrb	r3, [r7, #11]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ae4:	7afb      	ldrb	r3, [r7, #11]
 8004ae6:	f003 0307 	and.w	r3, r3, #7
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d106      	bne.n	8004afc <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6979      	ldr	r1, [r7, #20]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f003 fb0d 	bl	8008114 <USB_EPStartXfer>
 8004afa:	e005      	b.n	8004b08 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6979      	ldr	r1, [r7, #20]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f003 fb06 	bl	8008114 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3718      	adds	r7, #24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004b1e:	78fb      	ldrb	r3, [r7, #3]
 8004b20:	f003 0207 	and.w	r2, r3, #7
 8004b24:	6879      	ldr	r1, [r7, #4]
 8004b26:	4613      	mov	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	440b      	add	r3, r1
 8004b30:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004b34:	681b      	ldr	r3, [r3, #0]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr

08004b40 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	607a      	str	r2, [r7, #4]
 8004b4a:	603b      	str	r3, [r7, #0]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b50:	7afb      	ldrb	r3, [r7, #11]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	4613      	mov	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	4413      	add	r3, r2
 8004b64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	2200      	movs	r2, #0
 8004b84:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b8c:	7afb      	ldrb	r3, [r7, #11]
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b98:	7afb      	ldrb	r3, [r7, #11]
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d106      	bne.n	8004bb0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6979      	ldr	r1, [r7, #20]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f003 fab3 	bl	8008114 <USB_EPStartXfer>
 8004bae:	e005      	b.n	8004bbc <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6979      	ldr	r1, [r7, #20]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f003 faac 	bl	8008114 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b084      	sub	sp, #16
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
 8004bce:	460b      	mov	r3, r1
 8004bd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004bd2:	78fb      	ldrb	r3, [r7, #3]
 8004bd4:	f003 0207 	and.w	r2, r3, #7
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d901      	bls.n	8004be4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e04c      	b.n	8004c7e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004be4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	da0e      	bge.n	8004c0a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bec:	78fb      	ldrb	r3, [r7, #3]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	4413      	add	r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2201      	movs	r2, #1
 8004c06:	705a      	strb	r2, [r3, #1]
 8004c08:	e00c      	b.n	8004c24 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c0a:	78fa      	ldrb	r2, [r7, #3]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	00db      	lsls	r3, r3, #3
 8004c14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2201      	movs	r2, #1
 8004c28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c2a:	78fb      	ldrb	r3, [r7, #3]
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d101      	bne.n	8004c44 <HAL_PCD_EP_SetStall+0x7e>
 8004c40:	2302      	movs	r3, #2
 8004c42:	e01c      	b.n	8004c7e <HAL_PCD_EP_SetStall+0xb8>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68f9      	ldr	r1, [r7, #12]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f004 fb7e 	bl	8009354 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c58:	78fb      	ldrb	r3, [r7, #3]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d108      	bne.n	8004c74 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4610      	mov	r0, r2
 8004c70:	f004 fca3 	bl	80095ba <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b084      	sub	sp, #16
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
 8004c8e:	460b      	mov	r3, r1
 8004c90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c92:	78fb      	ldrb	r3, [r7, #3]
 8004c94:	f003 020f 	and.w	r2, r3, #15
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d901      	bls.n	8004ca4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e040      	b.n	8004d26 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	da0e      	bge.n	8004cca <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cac:	78fb      	ldrb	r3, [r7, #3]
 8004cae:	f003 0307 	and.w	r3, r3, #7
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	705a      	strb	r2, [r3, #1]
 8004cc8:	e00e      	b.n	8004ce8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cca:	78fb      	ldrb	r3, [r7, #3]
 8004ccc:	f003 0207 	and.w	r2, r3, #7
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	4413      	add	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cee:	78fb      	ldrb	r3, [r7, #3]
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d101      	bne.n	8004d08 <HAL_PCD_EP_ClrStall+0x82>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e00e      	b.n	8004d26 <HAL_PCD_EP_ClrStall+0xa0>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68f9      	ldr	r1, [r7, #12]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f004 fb6c 	bl	80093f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b08e      	sub	sp, #56	; 0x38
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004d36:	e2df      	b.n	80052f8 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d40:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004d42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004d4e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f040 8158 	bne.w	8005008 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004d58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d5a:	f003 0310 	and.w	r3, r3, #16
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d152      	bne.n	8004e08 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d72:	81fb      	strh	r3, [r7, #14]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	89fb      	ldrh	r3, [r7, #14]
 8004d7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	3328      	adds	r3, #40	; 0x28
 8004d8a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	461a      	mov	r2, r3
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	4413      	add	r3, r2
 8004da0:	3302      	adds	r3, #2
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6812      	ldr	r2, [r2, #0]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dae:	881b      	ldrh	r3, [r3, #0]
 8004db0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	695a      	ldr	r2, [r3, #20]
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	69db      	ldr	r3, [r3, #28]
 8004dc0:	441a      	add	r2, r3
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f006 fa4e 	bl	800b26a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 828e 	beq.w	80052f8 <PCD_EP_ISR_Handler+0x5ca>
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f040 8289 	bne.w	80052f8 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	b292      	uxth	r2, r2
 8004dfa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004e06:	e277      	b.n	80052f8 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e0e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004e18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d034      	beq.n	8004e8c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	4413      	add	r3, r2
 8004e36:	3306      	adds	r3, #6
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6812      	ldr	r2, [r2, #0]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e44:	881b      	ldrh	r3, [r3, #0]
 8004e46:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6818      	ldr	r0, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	f004 fbfa 	bl	800965a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004e72:	4013      	ands	r3, r2
 8004e74:	823b      	strh	r3, [r7, #16]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	8a3a      	ldrh	r2, [r7, #16]
 8004e7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e80:	b292      	uxth	r2, r2
 8004e82:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f006 f9c3 	bl	800b210 <HAL_PCD_SetupStageCallback>
 8004e8a:	e235      	b.n	80052f8 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004e8c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f280 8231 	bge.w	80052f8 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	83bb      	strh	r3, [r7, #28]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	8bba      	ldrh	r2, [r7, #28]
 8004eac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004eb0:	b292      	uxth	r2, r2
 8004eb2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	4413      	add	r3, r2
 8004ec8:	3306      	adds	r3, #6
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	6812      	ldr	r2, [r2, #0]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d019      	beq.n	8004f1c <PCD_EP_ISR_Handler+0x1ee>
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d015      	beq.n	8004f1c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6818      	ldr	r0, [r3, #0]
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	6959      	ldr	r1, [r3, #20]
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	f004 fbaa 	bl	800965a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	695a      	ldr	r2, [r3, #20]
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	441a      	add	r2, r3
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004f14:	2100      	movs	r1, #0
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f006 f98c 	bl	800b234 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	61bb      	str	r3, [r7, #24]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	4413      	add	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d112      	bne.n	8004f6a <PCD_EP_ISR_Handler+0x23c>
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	801a      	strh	r2, [r3, #0]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	881b      	ldrh	r3, [r3, #0]
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	801a      	strh	r2, [r3, #0]
 8004f68:	e02f      	b.n	8004fca <PCD_EP_ISR_Handler+0x29c>
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	2b3e      	cmp	r3, #62	; 0x3e
 8004f70:	d813      	bhi.n	8004f9a <PCD_EP_ISR_Handler+0x26c>
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	085b      	lsrs	r3, r3, #1
 8004f78:	633b      	str	r3, [r7, #48]	; 0x30
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d002      	beq.n	8004f8c <PCD_EP_ISR_Handler+0x25e>
 8004f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f88:	3301      	adds	r3, #1
 8004f8a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	029b      	lsls	r3, r3, #10
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	801a      	strh	r2, [r3, #0]
 8004f98:	e017      	b.n	8004fca <PCD_EP_ISR_Handler+0x29c>
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	095b      	lsrs	r3, r3, #5
 8004fa0:	633b      	str	r3, [r7, #48]	; 0x30
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	f003 031f 	and.w	r3, r3, #31
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d102      	bne.n	8004fb4 <PCD_EP_ISR_Handler+0x286>
 8004fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	633b      	str	r3, [r7, #48]	; 0x30
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	029b      	lsls	r3, r3, #10
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fda:	827b      	strh	r3, [r7, #18]
 8004fdc:	8a7b      	ldrh	r3, [r7, #18]
 8004fde:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004fe2:	827b      	strh	r3, [r7, #18]
 8004fe4:	8a7b      	ldrh	r3, [r7, #18]
 8004fe6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004fea:	827b      	strh	r3, [r7, #18]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	8a7b      	ldrh	r3, [r7, #18]
 8004ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005002:	b29b      	uxth	r3, r3
 8005004:	8013      	strh	r3, [r2, #0]
 8005006:	e177      	b.n	80052f8 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	461a      	mov	r2, r3
 800500e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800501a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800501e:	2b00      	cmp	r3, #0
 8005020:	f280 80ea 	bge.w	80051f8 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	461a      	mov	r2, r3
 800502a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	b29a      	uxth	r2, r3
 8005036:	f640 738f 	movw	r3, #3983	; 0xf8f
 800503a:	4013      	ands	r3, r2
 800503c:	853b      	strh	r3, [r7, #40]	; 0x28
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800504e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005052:	b292      	uxth	r2, r2
 8005054:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005056:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800505a:	4613      	mov	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	4413      	add	r3, r2
 800506a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	7b1b      	ldrb	r3, [r3, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d122      	bne.n	80050ba <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800507c:	b29b      	uxth	r3, r3
 800507e:	461a      	mov	r2, r3
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	4413      	add	r3, r2
 8005088:	3306      	adds	r3, #6
 800508a:	005b      	lsls	r3, r3, #1
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6812      	ldr	r2, [r2, #0]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800509c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800509e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 8087 	beq.w	80051b4 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6818      	ldr	r0, [r3, #0]
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	6959      	ldr	r1, [r3, #20]
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	88da      	ldrh	r2, [r3, #6]
 80050b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050b4:	f004 fad1 	bl	800965a <USB_ReadPMA>
 80050b8:	e07c      	b.n	80051b4 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	78db      	ldrb	r3, [r3, #3]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d108      	bne.n	80050d4 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80050c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80050c4:	461a      	mov	r2, r3
 80050c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f923 	bl	8005314 <HAL_PCD_EP_DB_Receive>
 80050ce:	4603      	mov	r3, r0
 80050d0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80050d2:	e06f      	b.n	80051b4 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	461a      	mov	r2, r3
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	881b      	ldrh	r3, [r3, #0]
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	461a      	mov	r2, r3
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	441a      	add	r2, r3
 80050fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800510c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005110:	b29b      	uxth	r3, r3
 8005112:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	461a      	mov	r2, r3
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	b29b      	uxth	r3, r3
 8005126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d021      	beq.n	8005172 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005136:	b29b      	uxth	r3, r3
 8005138:	461a      	mov	r2, r3
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	4413      	add	r3, r2
 8005142:	3302      	adds	r3, #2
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6812      	ldr	r2, [r2, #0]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005156:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005158:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800515a:	2b00      	cmp	r3, #0
 800515c:	d02a      	beq.n	80051b4 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6818      	ldr	r0, [r3, #0]
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	6959      	ldr	r1, [r3, #20]
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	891a      	ldrh	r2, [r3, #8]
 800516a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800516c:	f004 fa75 	bl	800965a <USB_ReadPMA>
 8005170:	e020      	b.n	80051b4 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800517a:	b29b      	uxth	r3, r3
 800517c:	461a      	mov	r2, r3
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	4413      	add	r3, r2
 8005186:	3306      	adds	r3, #6
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6812      	ldr	r2, [r2, #0]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800519a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800519c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d008      	beq.n	80051b4 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6818      	ldr	r0, [r3, #0]
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	6959      	ldr	r1, [r3, #20]
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	895a      	ldrh	r2, [r3, #10]
 80051ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051b0:	f004 fa53 	bl	800965a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	69da      	ldr	r2, [r3, #28]
 80051b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051ba:	441a      	add	r2, r3
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80051c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c2:	695a      	ldr	r2, [r3, #20]
 80051c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051c6:	441a      	add	r2, r3
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d004      	beq.n	80051de <PCD_EP_ISR_Handler+0x4b0>
 80051d4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d206      	bcs.n	80051ec <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	4619      	mov	r1, r3
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f006 f825 	bl	800b234 <HAL_PCD_DataOutStageCallback>
 80051ea:	e005      	b.n	80051f8 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051f2:	4618      	mov	r0, r3
 80051f4:	f002 ff8e 	bl	8008114 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80051f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80051fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d07a      	beq.n	80052f8 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8005202:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	4413      	add	r3, r2
 8005214:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	b29b      	uxth	r3, r3
 8005228:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800522c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005230:	843b      	strh	r3, [r7, #32]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	461a      	mov	r2, r3
 8005238:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	441a      	add	r2, r3
 8005240:	8c3b      	ldrh	r3, [r7, #32]
 8005242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800524a:	b29b      	uxth	r3, r3
 800524c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	78db      	ldrb	r3, [r3, #3]
 8005252:	2b02      	cmp	r3, #2
 8005254:	d108      	bne.n	8005268 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800525a:	2b02      	cmp	r3, #2
 800525c:	d146      	bne.n	80052ec <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800525e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005264:	2b00      	cmp	r3, #0
 8005266:	d141      	bne.n	80052ec <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005270:	b29b      	uxth	r3, r3
 8005272:	461a      	mov	r2, r3
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	4413      	add	r3, r2
 800527c:	3302      	adds	r3, #2
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6812      	ldr	r2, [r2, #0]
 8005284:	4413      	add	r3, r2
 8005286:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005290:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	699a      	ldr	r2, [r3, #24]
 8005296:	8bfb      	ldrh	r3, [r7, #30]
 8005298:	429a      	cmp	r2, r3
 800529a:	d906      	bls.n	80052aa <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	699a      	ldr	r2, [r3, #24]
 80052a0:	8bfb      	ldrh	r3, [r7, #30]
 80052a2:	1ad2      	subs	r2, r2, r3
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	619a      	str	r2, [r3, #24]
 80052a8:	e002      	b.n	80052b0 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	2200      	movs	r2, #0
 80052ae:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d106      	bne.n	80052c6 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	4619      	mov	r1, r3
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f005 ffd3 	bl	800b26a <HAL_PCD_DataInStageCallback>
 80052c4:	e018      	b.n	80052f8 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	695a      	ldr	r2, [r3, #20]
 80052ca:	8bfb      	ldrh	r3, [r7, #30]
 80052cc:	441a      	add	r2, r3
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	69da      	ldr	r2, [r3, #28]
 80052d6:	8bfb      	ldrh	r3, [r7, #30]
 80052d8:	441a      	add	r2, r3
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052e4:	4618      	mov	r0, r3
 80052e6:	f002 ff15 	bl	8008114 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80052ea:	e005      	b.n	80052f8 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80052ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80052ee:	461a      	mov	r2, r3
 80052f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f91b 	bl	800552e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005300:	b29b      	uxth	r3, r3
 8005302:	b21b      	sxth	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	f6ff ad17 	blt.w	8004d38 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3738      	adds	r7, #56	; 0x38
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b088      	sub	sp, #32
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	4613      	mov	r3, r2
 8005320:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005322:	88fb      	ldrh	r3, [r7, #6]
 8005324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d07e      	beq.n	800542a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005334:	b29b      	uxth	r3, r3
 8005336:	461a      	mov	r2, r3
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	4413      	add	r3, r2
 8005340:	3302      	adds	r3, #2
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	6812      	ldr	r2, [r2, #0]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800534e:	881b      	ldrh	r3, [r3, #0]
 8005350:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005354:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	699a      	ldr	r2, [r3, #24]
 800535a:	8b7b      	ldrh	r3, [r7, #26]
 800535c:	429a      	cmp	r2, r3
 800535e:	d306      	bcc.n	800536e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	699a      	ldr	r2, [r3, #24]
 8005364:	8b7b      	ldrh	r3, [r7, #26]
 8005366:	1ad2      	subs	r2, r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	619a      	str	r2, [r3, #24]
 800536c:	e002      	b.n	8005374 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2200      	movs	r2, #0
 8005372:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d123      	bne.n	80053c4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	461a      	mov	r2, r3
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	b29b      	uxth	r3, r3
 800538e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005396:	833b      	strh	r3, [r7, #24]
 8005398:	8b3b      	ldrh	r3, [r7, #24]
 800539a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800539e:	833b      	strh	r3, [r7, #24]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	461a      	mov	r2, r3
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	441a      	add	r2, r3
 80053ae:	8b3b      	ldrh	r3, [r7, #24]
 80053b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80053c4:	88fb      	ldrh	r3, [r7, #6]
 80053c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d01f      	beq.n	800540e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	b29b      	uxth	r3, r3
 80053e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e8:	82fb      	strh	r3, [r7, #22]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	441a      	add	r2, r3
 80053f8:	8afb      	ldrh	r3, [r7, #22]
 80053fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005406:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800540a:	b29b      	uxth	r3, r3
 800540c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800540e:	8b7b      	ldrh	r3, [r7, #26]
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 8087 	beq.w	8005524 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6818      	ldr	r0, [r3, #0]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	6959      	ldr	r1, [r3, #20]
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	891a      	ldrh	r2, [r3, #8]
 8005422:	8b7b      	ldrh	r3, [r7, #26]
 8005424:	f004 f919 	bl	800965a <USB_ReadPMA>
 8005428:	e07c      	b.n	8005524 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005432:	b29b      	uxth	r3, r3
 8005434:	461a      	mov	r2, r3
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	4413      	add	r3, r2
 800543e:	3306      	adds	r3, #6
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	6812      	ldr	r2, [r2, #0]
 8005446:	4413      	add	r3, r2
 8005448:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005452:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	699a      	ldr	r2, [r3, #24]
 8005458:	8b7b      	ldrh	r3, [r7, #26]
 800545a:	429a      	cmp	r2, r3
 800545c:	d306      	bcc.n	800546c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	699a      	ldr	r2, [r3, #24]
 8005462:	8b7b      	ldrh	r3, [r7, #26]
 8005464:	1ad2      	subs	r2, r2, r3
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	619a      	str	r2, [r3, #24]
 800546a:	e002      	b.n	8005472 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2200      	movs	r2, #0
 8005470:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d123      	bne.n	80054c2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	461a      	mov	r2, r3
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	881b      	ldrh	r3, [r3, #0]
 800548a:	b29b      	uxth	r3, r3
 800548c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005494:	83fb      	strh	r3, [r7, #30]
 8005496:	8bfb      	ldrh	r3, [r7, #30]
 8005498:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800549c:	83fb      	strh	r3, [r7, #30]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	441a      	add	r2, r3
 80054ac:	8bfb      	ldrh	r3, [r7, #30]
 80054ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054be:	b29b      	uxth	r3, r3
 80054c0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80054c2:	88fb      	ldrh	r3, [r7, #6]
 80054c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d11f      	bne.n	800550c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	461a      	mov	r2, r3
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	b29b      	uxth	r3, r3
 80054de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e6:	83bb      	strh	r3, [r7, #28]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	461a      	mov	r2, r3
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	441a      	add	r2, r3
 80054f6:	8bbb      	ldrh	r3, [r7, #28]
 80054f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005504:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005508:	b29b      	uxth	r3, r3
 800550a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800550c:	8b7b      	ldrh	r3, [r7, #26]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d008      	beq.n	8005524 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6818      	ldr	r0, [r3, #0]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	6959      	ldr	r1, [r3, #20]
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	895a      	ldrh	r2, [r3, #10]
 800551e:	8b7b      	ldrh	r3, [r7, #26]
 8005520:	f004 f89b 	bl	800965a <USB_ReadPMA>
    }
  }

  return count;
 8005524:	8b7b      	ldrh	r3, [r7, #26]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3720      	adds	r7, #32
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b094      	sub	sp, #80	; 0x50
 8005532:	af00      	add	r7, sp, #0
 8005534:	60f8      	str	r0, [r7, #12]
 8005536:	60b9      	str	r1, [r7, #8]
 8005538:	4613      	mov	r3, r2
 800553a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800553c:	88fb      	ldrh	r3, [r7, #6]
 800553e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 8138 	beq.w	80057b8 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005550:	b29b      	uxth	r3, r3
 8005552:	461a      	mov	r2, r3
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	4413      	add	r3, r2
 800555c:	3302      	adds	r3, #2
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	6812      	ldr	r2, [r2, #0]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005570:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	699a      	ldr	r2, [r3, #24]
 8005578:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800557c:	429a      	cmp	r2, r3
 800557e:	d907      	bls.n	8005590 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	699a      	ldr	r2, [r3, #24]
 8005584:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005588:	1ad2      	subs	r2, r2, r3
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	619a      	str	r2, [r3, #24]
 800558e:	e002      	b.n	8005596 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2200      	movs	r2, #0
 8005594:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d12c      	bne.n	80055f8 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	4619      	mov	r1, r3
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f005 fe60 	bl	800b26a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80055aa:	88fb      	ldrh	r3, [r7, #6]
 80055ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 823a 	beq.w	8005a2a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	461a      	mov	r2, r3
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	881b      	ldrh	r3, [r3, #0]
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d0:	82fb      	strh	r3, [r7, #22]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	461a      	mov	r2, r3
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	441a      	add	r2, r3
 80055e0:	8afb      	ldrh	r3, [r7, #22]
 80055e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	8013      	strh	r3, [r2, #0]
 80055f6:	e218      	b.n	8005a2a <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80055f8:	88fb      	ldrh	r3, [r7, #6]
 80055fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d01f      	beq.n	8005642 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	461a      	mov	r2, r3
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	b29b      	uxth	r3, r3
 8005614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800561c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	441a      	add	r2, r3
 800562c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800562e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005636:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800563a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800563e:	b29b      	uxth	r3, r3
 8005640:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005648:	2b01      	cmp	r3, #1
 800564a:	f040 81ee 	bne.w	8005a2a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	695a      	ldr	r2, [r3, #20]
 8005652:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005656:	441a      	add	r2, r3
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	69da      	ldr	r2, [r3, #28]
 8005660:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005664:	441a      	add	r2, r3
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	6a1a      	ldr	r2, [r3, #32]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	429a      	cmp	r2, r3
 8005674:	d309      	bcc.n	800568a <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	6a1a      	ldr	r2, [r3, #32]
 8005680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005682:	1ad2      	subs	r2, r2, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	621a      	str	r2, [r3, #32]
 8005688:	e015      	b.n	80056b6 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d107      	bne.n	80056a2 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8005692:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005696:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80056a0:	e009      	b.n	80056b6 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2200      	movs	r2, #0
 80056b4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	785b      	ldrb	r3, [r3, #1]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d155      	bne.n	800576a <HAL_PCD_EP_DB_Transmit+0x23c>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	61fb      	str	r3, [r7, #28]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	461a      	mov	r2, r3
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	4413      	add	r3, r2
 80056d4:	61fb      	str	r3, [r7, #28]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	011a      	lsls	r2, r3, #4
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	4413      	add	r3, r2
 80056e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056e4:	61bb      	str	r3, [r7, #24]
 80056e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d112      	bne.n	8005712 <HAL_PCD_EP_DB_Transmit+0x1e4>
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	801a      	strh	r2, [r3, #0]
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	b29b      	uxth	r3, r3
 8005702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800570a:	b29a      	uxth	r2, r3
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	801a      	strh	r2, [r3, #0]
 8005710:	e047      	b.n	80057a2 <HAL_PCD_EP_DB_Transmit+0x274>
 8005712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005714:	2b3e      	cmp	r3, #62	; 0x3e
 8005716:	d811      	bhi.n	800573c <HAL_PCD_EP_DB_Transmit+0x20e>
 8005718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800571a:	085b      	lsrs	r3, r3, #1
 800571c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800571e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <HAL_PCD_EP_DB_Transmit+0x200>
 8005728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572a:	3301      	adds	r3, #1
 800572c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800572e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005730:	b29b      	uxth	r3, r3
 8005732:	029b      	lsls	r3, r3, #10
 8005734:	b29a      	uxth	r2, r3
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	801a      	strh	r2, [r3, #0]
 800573a:	e032      	b.n	80057a2 <HAL_PCD_EP_DB_Transmit+0x274>
 800573c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800573e:	095b      	lsrs	r3, r3, #5
 8005740:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005744:	f003 031f 	and.w	r3, r3, #31
 8005748:	2b00      	cmp	r3, #0
 800574a:	d102      	bne.n	8005752 <HAL_PCD_EP_DB_Transmit+0x224>
 800574c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574e:	3b01      	subs	r3, #1
 8005750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005754:	b29b      	uxth	r3, r3
 8005756:	029b      	lsls	r3, r3, #10
 8005758:	b29b      	uxth	r3, r3
 800575a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800575e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005762:	b29a      	uxth	r2, r3
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	801a      	strh	r2, [r3, #0]
 8005768:	e01b      	b.n	80057a2 <HAL_PCD_EP_DB_Transmit+0x274>
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	785b      	ldrb	r3, [r3, #1]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d117      	bne.n	80057a2 <HAL_PCD_EP_DB_Transmit+0x274>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	627b      	str	r3, [r7, #36]	; 0x24
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005780:	b29b      	uxth	r3, r3
 8005782:	461a      	mov	r2, r3
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	4413      	add	r3, r2
 8005788:	627b      	str	r3, [r7, #36]	; 0x24
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	011a      	lsls	r2, r3, #4
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	4413      	add	r3, r2
 8005794:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005798:	623b      	str	r3, [r7, #32]
 800579a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800579c:	b29a      	uxth	r2, r3
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6818      	ldr	r0, [r3, #0]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	6959      	ldr	r1, [r3, #20]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	891a      	ldrh	r2, [r3, #8]
 80057ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	f003 ff0d 	bl	80095d0 <USB_WritePMA>
 80057b6:	e138      	b.n	8005a2a <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	461a      	mov	r2, r3
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	4413      	add	r3, r2
 80057cc:	3306      	adds	r3, #6
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	6812      	ldr	r2, [r2, #0]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057e0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	699a      	ldr	r2, [r3, #24]
 80057e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d307      	bcc.n	8005800 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	699a      	ldr	r2, [r3, #24]
 80057f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80057f8:	1ad2      	subs	r2, r2, r3
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	619a      	str	r2, [r3, #24]
 80057fe:	e002      	b.n	8005806 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	2200      	movs	r2, #0
 8005804:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d12e      	bne.n	800586c <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	4619      	mov	r1, r3
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f005 fd28 	bl	800b26a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800581a:	88fb      	ldrh	r3, [r7, #6]
 800581c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005820:	2b00      	cmp	r3, #0
 8005822:	f040 8102 	bne.w	8005a2a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	461a      	mov	r2, r3
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	b29b      	uxth	r3, r3
 8005838:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800583c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005840:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	461a      	mov	r2, r3
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	441a      	add	r2, r3
 8005852:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005856:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800585a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800585e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005866:	b29b      	uxth	r3, r3
 8005868:	8013      	strh	r3, [r2, #0]
 800586a:	e0de      	b.n	8005a2a <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800586c:	88fb      	ldrh	r3, [r7, #6]
 800586e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d11f      	bne.n	80058b6 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	461a      	mov	r2, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4413      	add	r3, r2
 8005884:	881b      	ldrh	r3, [r3, #0]
 8005886:	b29b      	uxth	r3, r3
 8005888:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800588c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005890:	867b      	strh	r3, [r7, #50]	; 0x32
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	461a      	mov	r2, r3
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	441a      	add	r2, r3
 80058a0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80058a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80058bc:	2b01      	cmp	r3, #1
 80058be:	f040 80b4 	bne.w	8005a2a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	695a      	ldr	r2, [r3, #20]
 80058c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80058ca:	441a      	add	r2, r3
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	69da      	ldr	r2, [r3, #28]
 80058d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80058d8:	441a      	add	r2, r3
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	6a1a      	ldr	r2, [r3, #32]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d309      	bcc.n	80058fe <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	6a1a      	ldr	r2, [r3, #32]
 80058f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058f6:	1ad2      	subs	r2, r2, r3
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	621a      	str	r2, [r3, #32]
 80058fc:	e015      	b.n	800592a <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d107      	bne.n	8005916 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8005906:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800590a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005914:	e009      	b.n	800592a <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2200      	movs	r2, #0
 8005920:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	643b      	str	r3, [r7, #64]	; 0x40
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	785b      	ldrb	r3, [r3, #1]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d155      	bne.n	80059e4 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	63bb      	str	r3, [r7, #56]	; 0x38
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005946:	b29b      	uxth	r3, r3
 8005948:	461a      	mov	r2, r3
 800594a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594c:	4413      	add	r3, r2
 800594e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	011a      	lsls	r2, r3, #4
 8005956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005958:	4413      	add	r3, r2
 800595a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800595e:	637b      	str	r3, [r7, #52]	; 0x34
 8005960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005962:	2b00      	cmp	r3, #0
 8005964:	d112      	bne.n	800598c <HAL_PCD_EP_DB_Transmit+0x45e>
 8005966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	b29b      	uxth	r3, r3
 800596c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005970:	b29a      	uxth	r2, r3
 8005972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005974:	801a      	strh	r2, [r3, #0]
 8005976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005978:	881b      	ldrh	r3, [r3, #0]
 800597a:	b29b      	uxth	r3, r3
 800597c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005984:	b29a      	uxth	r2, r3
 8005986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005988:	801a      	strh	r2, [r3, #0]
 800598a:	e044      	b.n	8005a16 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800598c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800598e:	2b3e      	cmp	r3, #62	; 0x3e
 8005990:	d811      	bhi.n	80059b6 <HAL_PCD_EP_DB_Transmit+0x488>
 8005992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005994:	085b      	lsrs	r3, r3, #1
 8005996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <HAL_PCD_EP_DB_Transmit+0x47a>
 80059a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a4:	3301      	adds	r3, #1
 80059a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	029b      	lsls	r3, r3, #10
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b2:	801a      	strh	r2, [r3, #0]
 80059b4:	e02f      	b.n	8005a16 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80059b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059b8:	095b      	lsrs	r3, r3, #5
 80059ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059be:	f003 031f 	and.w	r3, r3, #31
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d102      	bne.n	80059cc <HAL_PCD_EP_DB_Transmit+0x49e>
 80059c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059c8:	3b01      	subs	r3, #1
 80059ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	029b      	lsls	r3, r3, #10
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059dc:	b29a      	uxth	r2, r3
 80059de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e0:	801a      	strh	r2, [r3, #0]
 80059e2:	e018      	b.n	8005a16 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	785b      	ldrb	r3, [r3, #1]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d114      	bne.n	8005a16 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	461a      	mov	r2, r3
 80059f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059fa:	4413      	add	r3, r2
 80059fc:	643b      	str	r3, [r7, #64]	; 0x40
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	011a      	lsls	r2, r3, #4
 8005a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a06:	4413      	add	r3, r2
 8005a08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a14:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6818      	ldr	r0, [r3, #0]
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	6959      	ldr	r1, [r3, #20]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	895a      	ldrh	r2, [r3, #10]
 8005a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	f003 fdd3 	bl	80095d0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a44:	82bb      	strh	r3, [r7, #20]
 8005a46:	8abb      	ldrh	r3, [r7, #20]
 8005a48:	f083 0310 	eor.w	r3, r3, #16
 8005a4c:	82bb      	strh	r3, [r7, #20]
 8005a4e:	8abb      	ldrh	r3, [r7, #20]
 8005a50:	f083 0320 	eor.w	r3, r3, #32
 8005a54:	82bb      	strh	r3, [r7, #20]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	441a      	add	r2, r3
 8005a64:	8abb      	ldrh	r3, [r7, #20]
 8005a66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3750      	adds	r7, #80	; 0x50
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	607b      	str	r3, [r7, #4]
 8005a8e:	460b      	mov	r3, r1
 8005a90:	817b      	strh	r3, [r7, #10]
 8005a92:	4613      	mov	r3, r2
 8005a94:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005a96:	897b      	ldrh	r3, [r7, #10]
 8005a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00b      	beq.n	8005aba <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005aa2:	897b      	ldrh	r3, [r7, #10]
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	4613      	mov	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]
 8005ab8:	e009      	b.n	8005ace <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005aba:	897a      	ldrh	r2, [r7, #10]
 8005abc:	4613      	mov	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	4413      	add	r3, r2
 8005acc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005ace:	893b      	ldrh	r3, [r7, #8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d107      	bne.n	8005ae4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	80da      	strh	r2, [r3, #6]
 8005ae2:	e00b      	b.n	8005afc <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	0c1b      	lsrs	r3, r3, #16
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	371c      	adds	r7, #28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bc80      	pop	{r7}
 8005b06:	4770      	bx	lr

08005b08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e26c      	b.n	8005ff4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 8087 	beq.w	8005c36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b28:	4b92      	ldr	r3, [pc, #584]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f003 030c 	and.w	r3, r3, #12
 8005b30:	2b04      	cmp	r3, #4
 8005b32:	d00c      	beq.n	8005b4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005b34:	4b8f      	ldr	r3, [pc, #572]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f003 030c 	and.w	r3, r3, #12
 8005b3c:	2b08      	cmp	r3, #8
 8005b3e:	d112      	bne.n	8005b66 <HAL_RCC_OscConfig+0x5e>
 8005b40:	4b8c      	ldr	r3, [pc, #560]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b4c:	d10b      	bne.n	8005b66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b4e:	4b89      	ldr	r3, [pc, #548]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d06c      	beq.n	8005c34 <HAL_RCC_OscConfig+0x12c>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d168      	bne.n	8005c34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e246      	b.n	8005ff4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b6e:	d106      	bne.n	8005b7e <HAL_RCC_OscConfig+0x76>
 8005b70:	4b80      	ldr	r3, [pc, #512]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a7f      	ldr	r2, [pc, #508]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b7a:	6013      	str	r3, [r2, #0]
 8005b7c:	e02e      	b.n	8005bdc <HAL_RCC_OscConfig+0xd4>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10c      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x98>
 8005b86:	4b7b      	ldr	r3, [pc, #492]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a7a      	ldr	r2, [pc, #488]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	4b78      	ldr	r3, [pc, #480]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a77      	ldr	r2, [pc, #476]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005b98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b9c:	6013      	str	r3, [r2, #0]
 8005b9e:	e01d      	b.n	8005bdc <HAL_RCC_OscConfig+0xd4>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ba8:	d10c      	bne.n	8005bc4 <HAL_RCC_OscConfig+0xbc>
 8005baa:	4b72      	ldr	r3, [pc, #456]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a71      	ldr	r2, [pc, #452]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	4b6f      	ldr	r3, [pc, #444]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a6e      	ldr	r2, [pc, #440]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bc0:	6013      	str	r3, [r2, #0]
 8005bc2:	e00b      	b.n	8005bdc <HAL_RCC_OscConfig+0xd4>
 8005bc4:	4b6b      	ldr	r3, [pc, #428]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a6a      	ldr	r2, [pc, #424]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bce:	6013      	str	r3, [r2, #0]
 8005bd0:	4b68      	ldr	r3, [pc, #416]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a67      	ldr	r2, [pc, #412]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d013      	beq.n	8005c0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be4:	f7fd fa56 	bl	8003094 <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bec:	f7fd fa52 	bl	8003094 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b64      	cmp	r3, #100	; 0x64
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e1fa      	b.n	8005ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bfe:	4b5d      	ldr	r3, [pc, #372]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0f0      	beq.n	8005bec <HAL_RCC_OscConfig+0xe4>
 8005c0a:	e014      	b.n	8005c36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c0c:	f7fd fa42 	bl	8003094 <HAL_GetTick>
 8005c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c14:	f7fd fa3e 	bl	8003094 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b64      	cmp	r3, #100	; 0x64
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e1e6      	b.n	8005ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c26:	4b53      	ldr	r3, [pc, #332]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1f0      	bne.n	8005c14 <HAL_RCC_OscConfig+0x10c>
 8005c32:	e000      	b.n	8005c36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d063      	beq.n	8005d0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c42:	4b4c      	ldr	r3, [pc, #304]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f003 030c 	and.w	r3, r3, #12
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00b      	beq.n	8005c66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005c4e:	4b49      	ldr	r3, [pc, #292]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f003 030c 	and.w	r3, r3, #12
 8005c56:	2b08      	cmp	r3, #8
 8005c58:	d11c      	bne.n	8005c94 <HAL_RCC_OscConfig+0x18c>
 8005c5a:	4b46      	ldr	r3, [pc, #280]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d116      	bne.n	8005c94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c66:	4b43      	ldr	r3, [pc, #268]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d005      	beq.n	8005c7e <HAL_RCC_OscConfig+0x176>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d001      	beq.n	8005c7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e1ba      	b.n	8005ff4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c7e:	4b3d      	ldr	r3, [pc, #244]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	00db      	lsls	r3, r3, #3
 8005c8c:	4939      	ldr	r1, [pc, #228]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c92:	e03a      	b.n	8005d0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d020      	beq.n	8005cde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c9c:	4b36      	ldr	r3, [pc, #216]	; (8005d78 <HAL_RCC_OscConfig+0x270>)
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca2:	f7fd f9f7 	bl	8003094 <HAL_GetTick>
 8005ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ca8:	e008      	b.n	8005cbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005caa:	f7fd f9f3 	bl	8003094 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d901      	bls.n	8005cbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e19b      	b.n	8005ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cbc:	4b2d      	ldr	r3, [pc, #180]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d0f0      	beq.n	8005caa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cc8:	4b2a      	ldr	r3, [pc, #168]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	00db      	lsls	r3, r3, #3
 8005cd6:	4927      	ldr	r1, [pc, #156]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	600b      	str	r3, [r1, #0]
 8005cdc:	e015      	b.n	8005d0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cde:	4b26      	ldr	r3, [pc, #152]	; (8005d78 <HAL_RCC_OscConfig+0x270>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ce4:	f7fd f9d6 	bl	8003094 <HAL_GetTick>
 8005ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cea:	e008      	b.n	8005cfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cec:	f7fd f9d2 	bl	8003094 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e17a      	b.n	8005ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cfe:	4b1d      	ldr	r3, [pc, #116]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1f0      	bne.n	8005cec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0308 	and.w	r3, r3, #8
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d03a      	beq.n	8005d8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d019      	beq.n	8005d52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d1e:	4b17      	ldr	r3, [pc, #92]	; (8005d7c <HAL_RCC_OscConfig+0x274>)
 8005d20:	2201      	movs	r2, #1
 8005d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d24:	f7fd f9b6 	bl	8003094 <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d2c:	f7fd f9b2 	bl	8003094 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e15a      	b.n	8005ff4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d3e:	4b0d      	ldr	r3, [pc, #52]	; (8005d74 <HAL_RCC_OscConfig+0x26c>)
 8005d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0f0      	beq.n	8005d2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005d4a:	2001      	movs	r0, #1
 8005d4c:	f000 fac4 	bl	80062d8 <RCC_Delay>
 8005d50:	e01c      	b.n	8005d8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d52:	4b0a      	ldr	r3, [pc, #40]	; (8005d7c <HAL_RCC_OscConfig+0x274>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d58:	f7fd f99c 	bl	8003094 <HAL_GetTick>
 8005d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d5e:	e00f      	b.n	8005d80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d60:	f7fd f998 	bl	8003094 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d908      	bls.n	8005d80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e140      	b.n	8005ff4 <HAL_RCC_OscConfig+0x4ec>
 8005d72:	bf00      	nop
 8005d74:	40021000 	.word	0x40021000
 8005d78:	42420000 	.word	0x42420000
 8005d7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d80:	4b9e      	ldr	r3, [pc, #632]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	f003 0302 	and.w	r3, r3, #2
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1e9      	bne.n	8005d60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0304 	and.w	r3, r3, #4
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 80a6 	beq.w	8005ee6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d9e:	4b97      	ldr	r3, [pc, #604]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10d      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005daa:	4b94      	ldr	r3, [pc, #592]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	4a93      	ldr	r2, [pc, #588]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005db4:	61d3      	str	r3, [r2, #28]
 8005db6:	4b91      	ldr	r3, [pc, #580]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dbe:	60bb      	str	r3, [r7, #8]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dc6:	4b8e      	ldr	r3, [pc, #568]	; (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d118      	bne.n	8005e04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dd2:	4b8b      	ldr	r3, [pc, #556]	; (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a8a      	ldr	r2, [pc, #552]	; (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dde:	f7fd f959 	bl	8003094 <HAL_GetTick>
 8005de2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005de4:	e008      	b.n	8005df8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005de6:	f7fd f955 	bl	8003094 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b64      	cmp	r3, #100	; 0x64
 8005df2:	d901      	bls.n	8005df8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e0fd      	b.n	8005ff4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005df8:	4b81      	ldr	r3, [pc, #516]	; (8006000 <HAL_RCC_OscConfig+0x4f8>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0f0      	beq.n	8005de6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d106      	bne.n	8005e1a <HAL_RCC_OscConfig+0x312>
 8005e0c:	4b7b      	ldr	r3, [pc, #492]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	4a7a      	ldr	r2, [pc, #488]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005e12:	f043 0301 	orr.w	r3, r3, #1
 8005e16:	6213      	str	r3, [r2, #32]
 8005e18:	e02d      	b.n	8005e76 <HAL_RCC_OscConfig+0x36e>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10c      	bne.n	8005e3c <HAL_RCC_OscConfig+0x334>
 8005e22:	4b76      	ldr	r3, [pc, #472]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	4a75      	ldr	r2, [pc, #468]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005e28:	f023 0301 	bic.w	r3, r3, #1
 8005e2c:	6213      	str	r3, [r2, #32]
 8005e2e:	4b73      	ldr	r3, [pc, #460]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	4a72      	ldr	r2, [pc, #456]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005e34:	f023 0304 	bic.w	r3, r3, #4
 8005e38:	6213      	str	r3, [r2, #32]
 8005e3a:	e01c      	b.n	8005e76 <HAL_RCC_OscConfig+0x36e>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	2b05      	cmp	r3, #5
 8005e42:	d10c      	bne.n	8005e5e <HAL_RCC_OscConfig+0x356>
 8005e44:	4b6d      	ldr	r3, [pc, #436]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	4a6c      	ldr	r2, [pc, #432]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005e4a:	f043 0304 	orr.w	r3, r3, #4
 8005e4e:	6213      	str	r3, [r2, #32]
 8005e50:	4b6a      	ldr	r3, [pc, #424]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	4a69      	ldr	r2, [pc, #420]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005e56:	f043 0301 	orr.w	r3, r3, #1
 8005e5a:	6213      	str	r3, [r2, #32]
 8005e5c:	e00b      	b.n	8005e76 <HAL_RCC_OscConfig+0x36e>
 8005e5e:	4b67      	ldr	r3, [pc, #412]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	4a66      	ldr	r2, [pc, #408]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005e64:	f023 0301 	bic.w	r3, r3, #1
 8005e68:	6213      	str	r3, [r2, #32]
 8005e6a:	4b64      	ldr	r3, [pc, #400]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	4a63      	ldr	r2, [pc, #396]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005e70:	f023 0304 	bic.w	r3, r3, #4
 8005e74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d015      	beq.n	8005eaa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e7e:	f7fd f909 	bl	8003094 <HAL_GetTick>
 8005e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e84:	e00a      	b.n	8005e9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e86:	f7fd f905 	bl	8003094 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d901      	bls.n	8005e9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e0ab      	b.n	8005ff4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e9c:	4b57      	ldr	r3, [pc, #348]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d0ee      	beq.n	8005e86 <HAL_RCC_OscConfig+0x37e>
 8005ea8:	e014      	b.n	8005ed4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eaa:	f7fd f8f3 	bl	8003094 <HAL_GetTick>
 8005eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eb0:	e00a      	b.n	8005ec8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eb2:	f7fd f8ef 	bl	8003094 <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d901      	bls.n	8005ec8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e095      	b.n	8005ff4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ec8:	4b4c      	ldr	r3, [pc, #304]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	f003 0302 	and.w	r3, r3, #2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1ee      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ed4:	7dfb      	ldrb	r3, [r7, #23]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d105      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eda:	4b48      	ldr	r3, [pc, #288]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	4a47      	ldr	r2, [pc, #284]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ee4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 8081 	beq.w	8005ff2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ef0:	4b42      	ldr	r3, [pc, #264]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f003 030c 	and.w	r3, r3, #12
 8005ef8:	2b08      	cmp	r3, #8
 8005efa:	d061      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d146      	bne.n	8005f92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f04:	4b3f      	ldr	r3, [pc, #252]	; (8006004 <HAL_RCC_OscConfig+0x4fc>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f0a:	f7fd f8c3 	bl	8003094 <HAL_GetTick>
 8005f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f10:	e008      	b.n	8005f24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f12:	f7fd f8bf 	bl	8003094 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d901      	bls.n	8005f24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e067      	b.n	8005ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f24:	4b35      	ldr	r3, [pc, #212]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1f0      	bne.n	8005f12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a1b      	ldr	r3, [r3, #32]
 8005f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f38:	d108      	bne.n	8005f4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005f3a:	4b30      	ldr	r3, [pc, #192]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	492d      	ldr	r1, [pc, #180]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f4c:	4b2b      	ldr	r3, [pc, #172]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a19      	ldr	r1, [r3, #32]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	430b      	orrs	r3, r1
 8005f5e:	4927      	ldr	r1, [pc, #156]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f64:	4b27      	ldr	r3, [pc, #156]	; (8006004 <HAL_RCC_OscConfig+0x4fc>)
 8005f66:	2201      	movs	r2, #1
 8005f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f6a:	f7fd f893 	bl	8003094 <HAL_GetTick>
 8005f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f70:	e008      	b.n	8005f84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f72:	f7fd f88f 	bl	8003094 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d901      	bls.n	8005f84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e037      	b.n	8005ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f84:	4b1d      	ldr	r3, [pc, #116]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d0f0      	beq.n	8005f72 <HAL_RCC_OscConfig+0x46a>
 8005f90:	e02f      	b.n	8005ff2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f92:	4b1c      	ldr	r3, [pc, #112]	; (8006004 <HAL_RCC_OscConfig+0x4fc>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f98:	f7fd f87c 	bl	8003094 <HAL_GetTick>
 8005f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f9e:	e008      	b.n	8005fb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fa0:	f7fd f878 	bl	8003094 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e020      	b.n	8005ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fb2:	4b12      	ldr	r3, [pc, #72]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1f0      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x498>
 8005fbe:	e018      	b.n	8005ff2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	69db      	ldr	r3, [r3, #28]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d101      	bne.n	8005fcc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e013      	b.n	8005ff4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005fcc:	4b0b      	ldr	r3, [pc, #44]	; (8005ffc <HAL_RCC_OscConfig+0x4f4>)
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d106      	bne.n	8005fee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d001      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e000      	b.n	8005ff4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3718      	adds	r7, #24
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	40021000 	.word	0x40021000
 8006000:	40007000 	.word	0x40007000
 8006004:	42420060 	.word	0x42420060

08006008 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e0d0      	b.n	80061be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800601c:	4b6a      	ldr	r3, [pc, #424]	; (80061c8 <HAL_RCC_ClockConfig+0x1c0>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0307 	and.w	r3, r3, #7
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	429a      	cmp	r2, r3
 8006028:	d910      	bls.n	800604c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800602a:	4b67      	ldr	r3, [pc, #412]	; (80061c8 <HAL_RCC_ClockConfig+0x1c0>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f023 0207 	bic.w	r2, r3, #7
 8006032:	4965      	ldr	r1, [pc, #404]	; (80061c8 <HAL_RCC_ClockConfig+0x1c0>)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	4313      	orrs	r3, r2
 8006038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800603a:	4b63      	ldr	r3, [pc, #396]	; (80061c8 <HAL_RCC_ClockConfig+0x1c0>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0307 	and.w	r3, r3, #7
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	429a      	cmp	r2, r3
 8006046:	d001      	beq.n	800604c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e0b8      	b.n	80061be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	2b00      	cmp	r3, #0
 8006056:	d020      	beq.n	800609a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	d005      	beq.n	8006070 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006064:	4b59      	ldr	r3, [pc, #356]	; (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	4a58      	ldr	r2, [pc, #352]	; (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 800606a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800606e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0308 	and.w	r3, r3, #8
 8006078:	2b00      	cmp	r3, #0
 800607a:	d005      	beq.n	8006088 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800607c:	4b53      	ldr	r3, [pc, #332]	; (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	4a52      	ldr	r2, [pc, #328]	; (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 8006082:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006086:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006088:	4b50      	ldr	r3, [pc, #320]	; (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	494d      	ldr	r1, [pc, #308]	; (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 8006096:	4313      	orrs	r3, r2
 8006098:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d040      	beq.n	8006128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d107      	bne.n	80060be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ae:	4b47      	ldr	r3, [pc, #284]	; (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d115      	bne.n	80060e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e07f      	b.n	80061be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d107      	bne.n	80060d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060c6:	4b41      	ldr	r3, [pc, #260]	; (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d109      	bne.n	80060e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e073      	b.n	80061be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060d6:	4b3d      	ldr	r3, [pc, #244]	; (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e06b      	b.n	80061be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060e6:	4b39      	ldr	r3, [pc, #228]	; (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f023 0203 	bic.w	r2, r3, #3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	4936      	ldr	r1, [pc, #216]	; (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060f8:	f7fc ffcc 	bl	8003094 <HAL_GetTick>
 80060fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060fe:	e00a      	b.n	8006116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006100:	f7fc ffc8 	bl	8003094 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	f241 3288 	movw	r2, #5000	; 0x1388
 800610e:	4293      	cmp	r3, r2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e053      	b.n	80061be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006116:	4b2d      	ldr	r3, [pc, #180]	; (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f003 020c 	and.w	r2, r3, #12
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	429a      	cmp	r2, r3
 8006126:	d1eb      	bne.n	8006100 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006128:	4b27      	ldr	r3, [pc, #156]	; (80061c8 <HAL_RCC_ClockConfig+0x1c0>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0307 	and.w	r3, r3, #7
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	429a      	cmp	r2, r3
 8006134:	d210      	bcs.n	8006158 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006136:	4b24      	ldr	r3, [pc, #144]	; (80061c8 <HAL_RCC_ClockConfig+0x1c0>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f023 0207 	bic.w	r2, r3, #7
 800613e:	4922      	ldr	r1, [pc, #136]	; (80061c8 <HAL_RCC_ClockConfig+0x1c0>)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	4313      	orrs	r3, r2
 8006144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006146:	4b20      	ldr	r3, [pc, #128]	; (80061c8 <HAL_RCC_ClockConfig+0x1c0>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0307 	and.w	r3, r3, #7
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	429a      	cmp	r2, r3
 8006152:	d001      	beq.n	8006158 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e032      	b.n	80061be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b00      	cmp	r3, #0
 8006162:	d008      	beq.n	8006176 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006164:	4b19      	ldr	r3, [pc, #100]	; (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	4916      	ldr	r1, [pc, #88]	; (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 8006172:	4313      	orrs	r3, r2
 8006174:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0308 	and.w	r3, r3, #8
 800617e:	2b00      	cmp	r3, #0
 8006180:	d009      	beq.n	8006196 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006182:	4b12      	ldr	r3, [pc, #72]	; (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	00db      	lsls	r3, r3, #3
 8006190:	490e      	ldr	r1, [pc, #56]	; (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 8006192:	4313      	orrs	r3, r2
 8006194:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006196:	f000 f821 	bl	80061dc <HAL_RCC_GetSysClockFreq>
 800619a:	4602      	mov	r2, r0
 800619c:	4b0b      	ldr	r3, [pc, #44]	; (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	091b      	lsrs	r3, r3, #4
 80061a2:	f003 030f 	and.w	r3, r3, #15
 80061a6:	490a      	ldr	r1, [pc, #40]	; (80061d0 <HAL_RCC_ClockConfig+0x1c8>)
 80061a8:	5ccb      	ldrb	r3, [r1, r3]
 80061aa:	fa22 f303 	lsr.w	r3, r2, r3
 80061ae:	4a09      	ldr	r2, [pc, #36]	; (80061d4 <HAL_RCC_ClockConfig+0x1cc>)
 80061b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80061b2:	4b09      	ldr	r3, [pc, #36]	; (80061d8 <HAL_RCC_ClockConfig+0x1d0>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fc ff2a 	bl	8003010 <HAL_InitTick>

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	40022000 	.word	0x40022000
 80061cc:	40021000 	.word	0x40021000
 80061d0:	0800cbf0 	.word	0x0800cbf0
 80061d4:	20000014 	.word	0x20000014
 80061d8:	20000018 	.word	0x20000018

080061dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061dc:	b490      	push	{r4, r7}
 80061de:	b08a      	sub	sp, #40	; 0x28
 80061e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80061e2:	4b2a      	ldr	r3, [pc, #168]	; (800628c <HAL_RCC_GetSysClockFreq+0xb0>)
 80061e4:	1d3c      	adds	r4, r7, #4
 80061e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80061e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80061ec:	f240 2301 	movw	r3, #513	; 0x201
 80061f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	61fb      	str	r3, [r7, #28]
 80061f6:	2300      	movs	r3, #0
 80061f8:	61bb      	str	r3, [r7, #24]
 80061fa:	2300      	movs	r3, #0
 80061fc:	627b      	str	r3, [r7, #36]	; 0x24
 80061fe:	2300      	movs	r3, #0
 8006200:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006202:	2300      	movs	r3, #0
 8006204:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006206:	4b22      	ldr	r3, [pc, #136]	; (8006290 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	f003 030c 	and.w	r3, r3, #12
 8006212:	2b04      	cmp	r3, #4
 8006214:	d002      	beq.n	800621c <HAL_RCC_GetSysClockFreq+0x40>
 8006216:	2b08      	cmp	r3, #8
 8006218:	d003      	beq.n	8006222 <HAL_RCC_GetSysClockFreq+0x46>
 800621a:	e02d      	b.n	8006278 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800621c:	4b1d      	ldr	r3, [pc, #116]	; (8006294 <HAL_RCC_GetSysClockFreq+0xb8>)
 800621e:	623b      	str	r3, [r7, #32]
      break;
 8006220:	e02d      	b.n	800627e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	0c9b      	lsrs	r3, r3, #18
 8006226:	f003 030f 	and.w	r3, r3, #15
 800622a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800622e:	4413      	add	r3, r2
 8006230:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006234:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d013      	beq.n	8006268 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006240:	4b13      	ldr	r3, [pc, #76]	; (8006290 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	0c5b      	lsrs	r3, r3, #17
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800624e:	4413      	add	r3, r2
 8006250:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006254:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	4a0e      	ldr	r2, [pc, #56]	; (8006294 <HAL_RCC_GetSysClockFreq+0xb8>)
 800625a:	fb02 f203 	mul.w	r2, r2, r3
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	fbb2 f3f3 	udiv	r3, r2, r3
 8006264:	627b      	str	r3, [r7, #36]	; 0x24
 8006266:	e004      	b.n	8006272 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	4a0b      	ldr	r2, [pc, #44]	; (8006298 <HAL_RCC_GetSysClockFreq+0xbc>)
 800626c:	fb02 f303 	mul.w	r3, r2, r3
 8006270:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	623b      	str	r3, [r7, #32]
      break;
 8006276:	e002      	b.n	800627e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006278:	4b06      	ldr	r3, [pc, #24]	; (8006294 <HAL_RCC_GetSysClockFreq+0xb8>)
 800627a:	623b      	str	r3, [r7, #32]
      break;
 800627c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800627e:	6a3b      	ldr	r3, [r7, #32]
}
 8006280:	4618      	mov	r0, r3
 8006282:	3728      	adds	r7, #40	; 0x28
 8006284:	46bd      	mov	sp, r7
 8006286:	bc90      	pop	{r4, r7}
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	0800cb88 	.word	0x0800cb88
 8006290:	40021000 	.word	0x40021000
 8006294:	007a1200 	.word	0x007a1200
 8006298:	003d0900 	.word	0x003d0900

0800629c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800629c:	b480      	push	{r7}
 800629e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062a0:	4b02      	ldr	r3, [pc, #8]	; (80062ac <HAL_RCC_GetHCLKFreq+0x10>)
 80062a2:	681b      	ldr	r3, [r3, #0]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bc80      	pop	{r7}
 80062aa:	4770      	bx	lr
 80062ac:	20000014 	.word	0x20000014

080062b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80062b4:	f7ff fff2 	bl	800629c <HAL_RCC_GetHCLKFreq>
 80062b8:	4602      	mov	r2, r0
 80062ba:	4b05      	ldr	r3, [pc, #20]	; (80062d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	0adb      	lsrs	r3, r3, #11
 80062c0:	f003 0307 	and.w	r3, r3, #7
 80062c4:	4903      	ldr	r1, [pc, #12]	; (80062d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062c6:	5ccb      	ldrb	r3, [r1, r3]
 80062c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	40021000 	.word	0x40021000
 80062d4:	0800cc00 	.word	0x0800cc00

080062d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80062e0:	4b0a      	ldr	r3, [pc, #40]	; (800630c <RCC_Delay+0x34>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a0a      	ldr	r2, [pc, #40]	; (8006310 <RCC_Delay+0x38>)
 80062e6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ea:	0a5b      	lsrs	r3, r3, #9
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	fb02 f303 	mul.w	r3, r2, r3
 80062f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80062f4:	bf00      	nop
  }
  while (Delay --);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	1e5a      	subs	r2, r3, #1
 80062fa:	60fa      	str	r2, [r7, #12]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1f9      	bne.n	80062f4 <RCC_Delay+0x1c>
}
 8006300:	bf00      	nop
 8006302:	bf00      	nop
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	bc80      	pop	{r7}
 800630a:	4770      	bx	lr
 800630c:	20000014 	.word	0x20000014
 8006310:	10624dd3 	.word	0x10624dd3

08006314 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800631c:	2300      	movs	r3, #0
 800631e:	613b      	str	r3, [r7, #16]
 8006320:	2300      	movs	r3, #0
 8006322:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b00      	cmp	r3, #0
 800632e:	d07d      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006330:	2300      	movs	r3, #0
 8006332:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006334:	4b4f      	ldr	r3, [pc, #316]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006336:	69db      	ldr	r3, [r3, #28]
 8006338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10d      	bne.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006340:	4b4c      	ldr	r3, [pc, #304]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	4a4b      	ldr	r2, [pc, #300]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800634a:	61d3      	str	r3, [r2, #28]
 800634c:	4b49      	ldr	r3, [pc, #292]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800634e:	69db      	ldr	r3, [r3, #28]
 8006350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006354:	60bb      	str	r3, [r7, #8]
 8006356:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006358:	2301      	movs	r3, #1
 800635a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800635c:	4b46      	ldr	r3, [pc, #280]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006364:	2b00      	cmp	r3, #0
 8006366:	d118      	bne.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006368:	4b43      	ldr	r3, [pc, #268]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a42      	ldr	r2, [pc, #264]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800636e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006372:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006374:	f7fc fe8e 	bl	8003094 <HAL_GetTick>
 8006378:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800637a:	e008      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800637c:	f7fc fe8a 	bl	8003094 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	2b64      	cmp	r3, #100	; 0x64
 8006388:	d901      	bls.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e06d      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800638e:	4b3a      	ldr	r3, [pc, #232]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006396:	2b00      	cmp	r3, #0
 8006398:	d0f0      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800639a:	4b36      	ldr	r3, [pc, #216]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063a2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d02e      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d027      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063b8:	4b2e      	ldr	r3, [pc, #184]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80063c2:	4b2e      	ldr	r3, [pc, #184]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80063c4:	2201      	movs	r2, #1
 80063c6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80063c8:	4b2c      	ldr	r3, [pc, #176]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80063ce:	4a29      	ldr	r2, [pc, #164]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d014      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063de:	f7fc fe59 	bl	8003094 <HAL_GetTick>
 80063e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063e4:	e00a      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063e6:	f7fc fe55 	bl	8003094 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d901      	bls.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e036      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063fc:	4b1d      	ldr	r3, [pc, #116]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063fe:	6a1b      	ldr	r3, [r3, #32]
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	2b00      	cmp	r3, #0
 8006406:	d0ee      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006408:	4b1a      	ldr	r3, [pc, #104]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	4917      	ldr	r1, [pc, #92]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006416:	4313      	orrs	r3, r2
 8006418:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800641a:	7dfb      	ldrb	r3, [r7, #23]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d105      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006420:	4b14      	ldr	r3, [pc, #80]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006422:	69db      	ldr	r3, [r3, #28]
 8006424:	4a13      	ldr	r2, [pc, #76]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800642a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d008      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006438:	4b0e      	ldr	r3, [pc, #56]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	490b      	ldr	r1, [pc, #44]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006446:	4313      	orrs	r3, r2
 8006448:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0310 	and.w	r3, r3, #16
 8006452:	2b00      	cmp	r3, #0
 8006454:	d008      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006456:	4b07      	ldr	r3, [pc, #28]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	4904      	ldr	r1, [pc, #16]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006464:	4313      	orrs	r3, r2
 8006466:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3718      	adds	r7, #24
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	40021000 	.word	0x40021000
 8006478:	40007000 	.word	0x40007000
 800647c:	42420440 	.word	0x42420440

08006480 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006480:	b590      	push	{r4, r7, lr}
 8006482:	b08d      	sub	sp, #52	; 0x34
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006488:	4b5a      	ldr	r3, [pc, #360]	; (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800648a:	f107 040c 	add.w	r4, r7, #12
 800648e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006490:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006494:	f240 2301 	movw	r3, #513	; 0x201
 8006498:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800649a:	2300      	movs	r3, #0
 800649c:	627b      	str	r3, [r7, #36]	; 0x24
 800649e:	2300      	movs	r3, #0
 80064a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064a2:	2300      	movs	r3, #0
 80064a4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80064a6:	2300      	movs	r3, #0
 80064a8:	61fb      	str	r3, [r7, #28]
 80064aa:	2300      	movs	r3, #0
 80064ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b10      	cmp	r3, #16
 80064b2:	d00a      	beq.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b10      	cmp	r3, #16
 80064b8:	f200 8091 	bhi.w	80065de <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d04c      	beq.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d07c      	beq.n	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80064c8:	e089      	b.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80064ca:	4b4b      	ldr	r3, [pc, #300]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80064d0:	4b49      	ldr	r3, [pc, #292]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 8082 	beq.w	80065e2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	0c9b      	lsrs	r3, r3, #18
 80064e2:	f003 030f 	and.w	r3, r3, #15
 80064e6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80064ea:	4413      	add	r3, r2
 80064ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80064f0:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d018      	beq.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80064fc:	4b3e      	ldr	r3, [pc, #248]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	0c5b      	lsrs	r3, r3, #17
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800650a:	4413      	add	r3, r2
 800650c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006510:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00d      	beq.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800651c:	4a37      	ldr	r2, [pc, #220]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	fbb2 f2f3 	udiv	r2, r2, r3
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	fb02 f303 	mul.w	r3, r2, r3
 800652a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800652c:	e004      	b.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800652e:	6a3b      	ldr	r3, [r7, #32]
 8006530:	4a33      	ldr	r2, [pc, #204]	; (8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8006532:	fb02 f303 	mul.w	r3, r2, r3
 8006536:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006538:	4b2f      	ldr	r3, [pc, #188]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006540:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006544:	d102      	bne.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8006546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006548:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800654a:	e04a      	b.n	80065e2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 800654c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654e:	005b      	lsls	r3, r3, #1
 8006550:	4a2c      	ldr	r2, [pc, #176]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8006552:	fba2 2303 	umull	r2, r3, r2, r3
 8006556:	085b      	lsrs	r3, r3, #1
 8006558:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800655a:	e042      	b.n	80065e2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 800655c:	4b26      	ldr	r3, [pc, #152]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800656c:	d108      	bne.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d003      	beq.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8006578:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800657c:	62bb      	str	r3, [r7, #40]	; 0x28
 800657e:	e01f      	b.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800658a:	d109      	bne.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800658c:	4b1a      	ldr	r3, [pc, #104]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800658e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d003      	beq.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8006598:	f649 4340 	movw	r3, #40000	; 0x9c40
 800659c:	62bb      	str	r3, [r7, #40]	; 0x28
 800659e:	e00f      	b.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065aa:	d11c      	bne.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80065ac:	4b12      	ldr	r3, [pc, #72]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d016      	beq.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80065b8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80065bc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80065be:	e012      	b.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80065c0:	e011      	b.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80065c2:	f7ff fe75 	bl	80062b0 <HAL_RCC_GetPCLK2Freq>
 80065c6:	4602      	mov	r2, r0
 80065c8:	4b0b      	ldr	r3, [pc, #44]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	0b9b      	lsrs	r3, r3, #14
 80065ce:	f003 0303 	and.w	r3, r3, #3
 80065d2:	3301      	adds	r3, #1
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065da:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80065dc:	e004      	b.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80065de:	bf00      	nop
 80065e0:	e002      	b.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80065e2:	bf00      	nop
 80065e4:	e000      	b.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80065e6:	bf00      	nop
    }
  }
  return (frequency);
 80065e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3734      	adds	r7, #52	; 0x34
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd90      	pop	{r4, r7, pc}
 80065f2:	bf00      	nop
 80065f4:	0800cb98 	.word	0x0800cb98
 80065f8:	40021000 	.word	0x40021000
 80065fc:	007a1200 	.word	0x007a1200
 8006600:	003d0900 	.word	0x003d0900
 8006604:	aaaaaaab 	.word	0xaaaaaaab

08006608 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e076      	b.n	8006708 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	2b00      	cmp	r3, #0
 8006620:	d108      	bne.n	8006634 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800662a:	d009      	beq.n	8006640 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	61da      	str	r2, [r3, #28]
 8006632:	e005      	b.n	8006640 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d106      	bne.n	8006660 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7fc fabe 	bl	8002bdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006676:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006692:	431a      	orrs	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	f003 0302 	and.w	r3, r3, #2
 800669c:	431a      	orrs	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	431a      	orrs	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066b0:	431a      	orrs	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066ba:	431a      	orrs	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a1b      	ldr	r3, [r3, #32]
 80066c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c4:	ea42 0103 	orr.w	r1, r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	0c1a      	lsrs	r2, r3, #16
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f002 0204 	and.w	r2, r2, #4
 80066e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	69da      	ldr	r2, [r3, #28]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	603b      	str	r3, [r7, #0]
 800671c:	4613      	mov	r3, r2
 800671e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800672a:	2b01      	cmp	r3, #1
 800672c:	d101      	bne.n	8006732 <HAL_SPI_Transmit+0x22>
 800672e:	2302      	movs	r3, #2
 8006730:	e126      	b.n	8006980 <HAL_SPI_Transmit+0x270>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800673a:	f7fc fcab 	bl	8003094 <HAL_GetTick>
 800673e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006740:	88fb      	ldrh	r3, [r7, #6]
 8006742:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b01      	cmp	r3, #1
 800674e:	d002      	beq.n	8006756 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006750:	2302      	movs	r3, #2
 8006752:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006754:	e10b      	b.n	800696e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <HAL_SPI_Transmit+0x52>
 800675c:	88fb      	ldrh	r3, [r7, #6]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d102      	bne.n	8006768 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006766:	e102      	b.n	800696e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2203      	movs	r2, #3
 800676c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	88fa      	ldrh	r2, [r7, #6]
 8006780:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	88fa      	ldrh	r2, [r7, #6]
 8006786:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067ae:	d10f      	bne.n	80067d0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067da:	2b40      	cmp	r3, #64	; 0x40
 80067dc:	d007      	beq.n	80067ee <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067f6:	d14b      	bne.n	8006890 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d002      	beq.n	8006806 <HAL_SPI_Transmit+0xf6>
 8006800:	8afb      	ldrh	r3, [r7, #22]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d13e      	bne.n	8006884 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680a:	881a      	ldrh	r2, [r3, #0]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006816:	1c9a      	adds	r2, r3, #2
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006820:	b29b      	uxth	r3, r3
 8006822:	3b01      	subs	r3, #1
 8006824:	b29a      	uxth	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800682a:	e02b      	b.n	8006884 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b02      	cmp	r3, #2
 8006838:	d112      	bne.n	8006860 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683e:	881a      	ldrh	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684a:	1c9a      	adds	r2, r3, #2
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006854:	b29b      	uxth	r3, r3
 8006856:	3b01      	subs	r3, #1
 8006858:	b29a      	uxth	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	86da      	strh	r2, [r3, #54]	; 0x36
 800685e:	e011      	b.n	8006884 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006860:	f7fc fc18 	bl	8003094 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	429a      	cmp	r2, r3
 800686e:	d803      	bhi.n	8006878 <HAL_SPI_Transmit+0x168>
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006876:	d102      	bne.n	800687e <HAL_SPI_Transmit+0x16e>
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d102      	bne.n	8006884 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006882:	e074      	b.n	800696e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006888:	b29b      	uxth	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1ce      	bne.n	800682c <HAL_SPI_Transmit+0x11c>
 800688e:	e04c      	b.n	800692a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d002      	beq.n	800689e <HAL_SPI_Transmit+0x18e>
 8006898:	8afb      	ldrh	r3, [r7, #22]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d140      	bne.n	8006920 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	330c      	adds	r3, #12
 80068a8:	7812      	ldrb	r2, [r2, #0]
 80068aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b0:	1c5a      	adds	r2, r3, #1
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	3b01      	subs	r3, #1
 80068be:	b29a      	uxth	r2, r3
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80068c4:	e02c      	b.n	8006920 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f003 0302 	and.w	r3, r3, #2
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d113      	bne.n	80068fc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	330c      	adds	r3, #12
 80068de:	7812      	ldrb	r2, [r2, #0]
 80068e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e6:	1c5a      	adds	r2, r3, #1
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	3b01      	subs	r3, #1
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	86da      	strh	r2, [r3, #54]	; 0x36
 80068fa:	e011      	b.n	8006920 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068fc:	f7fc fbca 	bl	8003094 <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	429a      	cmp	r2, r3
 800690a:	d803      	bhi.n	8006914 <HAL_SPI_Transmit+0x204>
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006912:	d102      	bne.n	800691a <HAL_SPI_Transmit+0x20a>
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d102      	bne.n	8006920 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800691e:	e026      	b.n	800696e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006924:	b29b      	uxth	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1cd      	bne.n	80068c6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800692a:	69ba      	ldr	r2, [r7, #24]
 800692c:	6839      	ldr	r1, [r7, #0]
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f000 f8b2 	bl	8006a98 <SPI_EndRxTxTransaction>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d002      	beq.n	8006940 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2220      	movs	r2, #32
 800693e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10a      	bne.n	800695e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006948:	2300      	movs	r3, #0
 800694a:	613b      	str	r3, [r7, #16]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	613b      	str	r3, [r7, #16]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	613b      	str	r3, [r7, #16]
 800695c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006962:	2b00      	cmp	r3, #0
 8006964:	d002      	beq.n	800696c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	77fb      	strb	r3, [r7, #31]
 800696a:	e000      	b.n	800696e <HAL_SPI_Transmit+0x25e>
  }

error:
 800696c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800697e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006980:	4618      	mov	r0, r3
 8006982:	3720      	adds	r7, #32
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b088      	sub	sp, #32
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	603b      	str	r3, [r7, #0]
 8006994:	4613      	mov	r3, r2
 8006996:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006998:	f7fc fb7c 	bl	8003094 <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a0:	1a9b      	subs	r3, r3, r2
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	4413      	add	r3, r2
 80069a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80069a8:	f7fc fb74 	bl	8003094 <HAL_GetTick>
 80069ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069ae:	4b39      	ldr	r3, [pc, #228]	; (8006a94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	015b      	lsls	r3, r3, #5
 80069b4:	0d1b      	lsrs	r3, r3, #20
 80069b6:	69fa      	ldr	r2, [r7, #28]
 80069b8:	fb02 f303 	mul.w	r3, r2, r3
 80069bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069be:	e054      	b.n	8006a6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c6:	d050      	beq.n	8006a6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069c8:	f7fc fb64 	bl	8003094 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	69fa      	ldr	r2, [r7, #28]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d902      	bls.n	80069de <SPI_WaitFlagStateUntilTimeout+0x56>
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d13d      	bne.n	8006a5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80069ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069f6:	d111      	bne.n	8006a1c <SPI_WaitFlagStateUntilTimeout+0x94>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a00:	d004      	beq.n	8006a0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a0a:	d107      	bne.n	8006a1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a24:	d10f      	bne.n	8006a46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e017      	b.n	8006a8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d101      	bne.n	8006a64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	3b01      	subs	r3, #1
 8006a68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	689a      	ldr	r2, [r3, #8]
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	4013      	ands	r3, r2
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	bf0c      	ite	eq
 8006a7a:	2301      	moveq	r3, #1
 8006a7c:	2300      	movne	r3, #0
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	461a      	mov	r2, r3
 8006a82:	79fb      	ldrb	r3, [r7, #7]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d19b      	bne.n	80069c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3720      	adds	r7, #32
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	20000014 	.word	0x20000014

08006a98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af02      	add	r7, sp, #8
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	2180      	movs	r1, #128	; 0x80
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f7ff ff6a 	bl	8006988 <SPI_WaitFlagStateUntilTimeout>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d007      	beq.n	8006aca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006abe:	f043 0220 	orr.w	r2, r3, #32
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e000      	b.n	8006acc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3710      	adds	r7, #16
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e041      	b.n	8006b6a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d106      	bne.n	8006b00 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7fc f8ac 	bl	8002c58 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2202      	movs	r2, #2
 8006b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	3304      	adds	r3, #4
 8006b10:	4619      	mov	r1, r3
 8006b12:	4610      	mov	r0, r2
 8006b14:	f000 fb38 	bl	8007188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
	...

08006b74 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d104      	bne.n	8006b8e <HAL_TIM_IC_Start_IT+0x1a>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	e013      	b.n	8006bb6 <HAL_TIM_IC_Start_IT+0x42>
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2b04      	cmp	r3, #4
 8006b92:	d104      	bne.n	8006b9e <HAL_TIM_IC_Start_IT+0x2a>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	e00b      	b.n	8006bb6 <HAL_TIM_IC_Start_IT+0x42>
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	2b08      	cmp	r3, #8
 8006ba2:	d104      	bne.n	8006bae <HAL_TIM_IC_Start_IT+0x3a>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	e003      	b.n	8006bb6 <HAL_TIM_IC_Start_IT+0x42>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d104      	bne.n	8006bc8 <HAL_TIM_IC_Start_IT+0x54>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	e013      	b.n	8006bf0 <HAL_TIM_IC_Start_IT+0x7c>
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	2b04      	cmp	r3, #4
 8006bcc:	d104      	bne.n	8006bd8 <HAL_TIM_IC_Start_IT+0x64>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	e00b      	b.n	8006bf0 <HAL_TIM_IC_Start_IT+0x7c>
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	2b08      	cmp	r3, #8
 8006bdc:	d104      	bne.n	8006be8 <HAL_TIM_IC_Start_IT+0x74>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	e003      	b.n	8006bf0 <HAL_TIM_IC_Start_IT+0x7c>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bf2:	7bfb      	ldrb	r3, [r7, #15]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d102      	bne.n	8006bfe <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bf8:	7bbb      	ldrb	r3, [r7, #14]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d001      	beq.n	8006c02 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e0b3      	b.n	8006d6a <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d104      	bne.n	8006c12 <HAL_TIM_IC_Start_IT+0x9e>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c10:	e013      	b.n	8006c3a <HAL_TIM_IC_Start_IT+0xc6>
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	2b04      	cmp	r3, #4
 8006c16:	d104      	bne.n	8006c22 <HAL_TIM_IC_Start_IT+0xae>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c20:	e00b      	b.n	8006c3a <HAL_TIM_IC_Start_IT+0xc6>
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2b08      	cmp	r3, #8
 8006c26:	d104      	bne.n	8006c32 <HAL_TIM_IC_Start_IT+0xbe>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c30:	e003      	b.n	8006c3a <HAL_TIM_IC_Start_IT+0xc6>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2202      	movs	r2, #2
 8006c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d104      	bne.n	8006c4a <HAL_TIM_IC_Start_IT+0xd6>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2202      	movs	r2, #2
 8006c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c48:	e013      	b.n	8006c72 <HAL_TIM_IC_Start_IT+0xfe>
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	2b04      	cmp	r3, #4
 8006c4e:	d104      	bne.n	8006c5a <HAL_TIM_IC_Start_IT+0xe6>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2202      	movs	r2, #2
 8006c54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c58:	e00b      	b.n	8006c72 <HAL_TIM_IC_Start_IT+0xfe>
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d104      	bne.n	8006c6a <HAL_TIM_IC_Start_IT+0xf6>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2202      	movs	r2, #2
 8006c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c68:	e003      	b.n	8006c72 <HAL_TIM_IC_Start_IT+0xfe>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b0c      	cmp	r3, #12
 8006c76:	d841      	bhi.n	8006cfc <HAL_TIM_IC_Start_IT+0x188>
 8006c78:	a201      	add	r2, pc, #4	; (adr r2, 8006c80 <HAL_TIM_IC_Start_IT+0x10c>)
 8006c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7e:	bf00      	nop
 8006c80:	08006cb5 	.word	0x08006cb5
 8006c84:	08006cfd 	.word	0x08006cfd
 8006c88:	08006cfd 	.word	0x08006cfd
 8006c8c:	08006cfd 	.word	0x08006cfd
 8006c90:	08006cc7 	.word	0x08006cc7
 8006c94:	08006cfd 	.word	0x08006cfd
 8006c98:	08006cfd 	.word	0x08006cfd
 8006c9c:	08006cfd 	.word	0x08006cfd
 8006ca0:	08006cd9 	.word	0x08006cd9
 8006ca4:	08006cfd 	.word	0x08006cfd
 8006ca8:	08006cfd 	.word	0x08006cfd
 8006cac:	08006cfd 	.word	0x08006cfd
 8006cb0:	08006ceb 	.word	0x08006ceb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68da      	ldr	r2, [r3, #12]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f042 0202 	orr.w	r2, r2, #2
 8006cc2:	60da      	str	r2, [r3, #12]
      break;
 8006cc4:	e01b      	b.n	8006cfe <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68da      	ldr	r2, [r3, #12]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f042 0204 	orr.w	r2, r2, #4
 8006cd4:	60da      	str	r2, [r3, #12]
      break;
 8006cd6:	e012      	b.n	8006cfe <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68da      	ldr	r2, [r3, #12]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f042 0208 	orr.w	r2, r2, #8
 8006ce6:	60da      	str	r2, [r3, #12]
      break;
 8006ce8:	e009      	b.n	8006cfe <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68da      	ldr	r2, [r3, #12]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f042 0210 	orr.w	r2, r2, #16
 8006cf8:	60da      	str	r2, [r3, #12]
      break;
 8006cfa:	e000      	b.n	8006cfe <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8006cfc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2201      	movs	r2, #1
 8006d04:	6839      	ldr	r1, [r7, #0]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f000 fbad 	bl	8007466 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a18      	ldr	r2, [pc, #96]	; (8006d74 <HAL_TIM_IC_Start_IT+0x200>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d00e      	beq.n	8006d34 <HAL_TIM_IC_Start_IT+0x1c0>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d1e:	d009      	beq.n	8006d34 <HAL_TIM_IC_Start_IT+0x1c0>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a14      	ldr	r2, [pc, #80]	; (8006d78 <HAL_TIM_IC_Start_IT+0x204>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d004      	beq.n	8006d34 <HAL_TIM_IC_Start_IT+0x1c0>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a13      	ldr	r2, [pc, #76]	; (8006d7c <HAL_TIM_IC_Start_IT+0x208>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d111      	bne.n	8006d58 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f003 0307 	and.w	r3, r3, #7
 8006d3e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	2b06      	cmp	r3, #6
 8006d44:	d010      	beq.n	8006d68 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f042 0201 	orr.w	r2, r2, #1
 8006d54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d56:	e007      	b.n	8006d68 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f042 0201 	orr.w	r2, r2, #1
 8006d66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	40012c00 	.word	0x40012c00
 8006d78:	40000400 	.word	0x40000400
 8006d7c:	40000800 	.word	0x40000800

08006d80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	f003 0302 	and.w	r3, r3, #2
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d122      	bne.n	8006ddc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	f003 0302 	and.w	r3, r3, #2
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d11b      	bne.n	8006ddc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f06f 0202 	mvn.w	r2, #2
 8006dac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	f003 0303 	and.w	r3, r3, #3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d003      	beq.n	8006dca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f7fa fdae 	bl	8001924 <HAL_TIM_IC_CaptureCallback>
 8006dc8:	e005      	b.n	8006dd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f9c1 	bl	8007152 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f9c7 	bl	8007164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	f003 0304 	and.w	r3, r3, #4
 8006de6:	2b04      	cmp	r3, #4
 8006de8:	d122      	bne.n	8006e30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	f003 0304 	and.w	r3, r3, #4
 8006df4:	2b04      	cmp	r3, #4
 8006df6:	d11b      	bne.n	8006e30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f06f 0204 	mvn.w	r2, #4
 8006e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2202      	movs	r2, #2
 8006e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d003      	beq.n	8006e1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7fa fd84 	bl	8001924 <HAL_TIM_IC_CaptureCallback>
 8006e1c:	e005      	b.n	8006e2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f997 	bl	8007152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f99d 	bl	8007164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	f003 0308 	and.w	r3, r3, #8
 8006e3a:	2b08      	cmp	r3, #8
 8006e3c:	d122      	bne.n	8006e84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	f003 0308 	and.w	r3, r3, #8
 8006e48:	2b08      	cmp	r3, #8
 8006e4a:	d11b      	bne.n	8006e84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f06f 0208 	mvn.w	r2, #8
 8006e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2204      	movs	r2, #4
 8006e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	f003 0303 	and.w	r3, r3, #3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d003      	beq.n	8006e72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7fa fd5a 	bl	8001924 <HAL_TIM_IC_CaptureCallback>
 8006e70:	e005      	b.n	8006e7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f96d 	bl	8007152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 f973 	bl	8007164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	f003 0310 	and.w	r3, r3, #16
 8006e8e:	2b10      	cmp	r3, #16
 8006e90:	d122      	bne.n	8006ed8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	f003 0310 	and.w	r3, r3, #16
 8006e9c:	2b10      	cmp	r3, #16
 8006e9e:	d11b      	bne.n	8006ed8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f06f 0210 	mvn.w	r2, #16
 8006ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2208      	movs	r2, #8
 8006eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	69db      	ldr	r3, [r3, #28]
 8006eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f7fa fd30 	bl	8001924 <HAL_TIM_IC_CaptureCallback>
 8006ec4:	e005      	b.n	8006ed2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f943 	bl	8007152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f949 	bl	8007164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d10e      	bne.n	8006f04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	f003 0301 	and.w	r3, r3, #1
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d107      	bne.n	8006f04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f06f 0201 	mvn.w	r2, #1
 8006efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f91e 	bl	8007140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f0e:	2b80      	cmp	r3, #128	; 0x80
 8006f10:	d10e      	bne.n	8006f30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f1c:	2b80      	cmp	r3, #128	; 0x80
 8006f1e:	d107      	bne.n	8006f30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fb27 	bl	800757e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f3a:	2b40      	cmp	r3, #64	; 0x40
 8006f3c:	d10e      	bne.n	8006f5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f48:	2b40      	cmp	r3, #64	; 0x40
 8006f4a:	d107      	bne.n	8006f5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f90d 	bl	8007176 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	f003 0320 	and.w	r3, r3, #32
 8006f66:	2b20      	cmp	r3, #32
 8006f68:	d10e      	bne.n	8006f88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f003 0320 	and.w	r3, r3, #32
 8006f74:	2b20      	cmp	r3, #32
 8006f76:	d107      	bne.n	8006f88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f06f 0220 	mvn.w	r2, #32
 8006f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 faf2 	bl	800756c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f88:	bf00      	nop
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d101      	bne.n	8006faa <HAL_TIM_IC_ConfigChannel+0x1a>
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	e082      	b.n	80070b0 <HAL_TIM_IC_ConfigChannel+0x120>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d11b      	bne.n	8006ff0 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6818      	ldr	r0, [r3, #0]
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	6819      	ldr	r1, [r3, #0]
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	685a      	ldr	r2, [r3, #4]
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	f000 f940 	bl	800724c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	699a      	ldr	r2, [r3, #24]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 020c 	bic.w	r2, r2, #12
 8006fda:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6999      	ldr	r1, [r3, #24]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	689a      	ldr	r2, [r3, #8]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	619a      	str	r2, [r3, #24]
 8006fee:	e05a      	b.n	80070a6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b04      	cmp	r3, #4
 8006ff4:	d11c      	bne.n	8007030 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6818      	ldr	r0, [r3, #0]
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	6819      	ldr	r1, [r3, #0]
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	685a      	ldr	r2, [r3, #4]
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	f000 f97b 	bl	8007300 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	699a      	ldr	r2, [r3, #24]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007018:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	6999      	ldr	r1, [r3, #24]
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	021a      	lsls	r2, r3, #8
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	430a      	orrs	r2, r1
 800702c:	619a      	str	r2, [r3, #24]
 800702e:	e03a      	b.n	80070a6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b08      	cmp	r3, #8
 8007034:	d11b      	bne.n	800706e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6818      	ldr	r0, [r3, #0]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	6819      	ldr	r1, [r3, #0]
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	f000 f997 	bl	8007378 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	69da      	ldr	r2, [r3, #28]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 020c 	bic.w	r2, r2, #12
 8007058:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	69d9      	ldr	r1, [r3, #28]
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	689a      	ldr	r2, [r3, #8]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	430a      	orrs	r2, r1
 800706a:	61da      	str	r2, [r3, #28]
 800706c:	e01b      	b.n	80070a6 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6818      	ldr	r0, [r3, #0]
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	6819      	ldr	r1, [r3, #0]
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	685a      	ldr	r2, [r3, #4]
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	f000 f9b6 	bl	80073ee <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	69da      	ldr	r2, [r3, #28]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007090:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	69d9      	ldr	r1, [r3, #28]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	021a      	lsls	r2, r3, #8
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80070c2:	2300      	movs	r3, #0
 80070c4:	60fb      	str	r3, [r7, #12]
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	2b0c      	cmp	r3, #12
 80070ca:	d831      	bhi.n	8007130 <HAL_TIM_ReadCapturedValue+0x78>
 80070cc:	a201      	add	r2, pc, #4	; (adr r2, 80070d4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80070ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d2:	bf00      	nop
 80070d4:	08007109 	.word	0x08007109
 80070d8:	08007131 	.word	0x08007131
 80070dc:	08007131 	.word	0x08007131
 80070e0:	08007131 	.word	0x08007131
 80070e4:	08007113 	.word	0x08007113
 80070e8:	08007131 	.word	0x08007131
 80070ec:	08007131 	.word	0x08007131
 80070f0:	08007131 	.word	0x08007131
 80070f4:	0800711d 	.word	0x0800711d
 80070f8:	08007131 	.word	0x08007131
 80070fc:	08007131 	.word	0x08007131
 8007100:	08007131 	.word	0x08007131
 8007104:	08007127 	.word	0x08007127
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800710e:	60fb      	str	r3, [r7, #12]

      break;
 8007110:	e00f      	b.n	8007132 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007118:	60fb      	str	r3, [r7, #12]

      break;
 800711a:	e00a      	b.n	8007132 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007122:	60fb      	str	r3, [r7, #12]

      break;
 8007124:	e005      	b.n	8007132 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712c:	60fb      	str	r3, [r7, #12]

      break;
 800712e:	e000      	b.n	8007132 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007130:	bf00      	nop
  }

  return tmpreg;
 8007132:	68fb      	ldr	r3, [r7, #12]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	bc80      	pop	{r7}
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop

08007140 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007148:	bf00      	nop
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	bc80      	pop	{r7}
 8007150:	4770      	bx	lr

08007152 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007152:	b480      	push	{r7}
 8007154:	b083      	sub	sp, #12
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800715a:	bf00      	nop
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	bc80      	pop	{r7}
 8007162:	4770      	bx	lr

08007164 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	bc80      	pop	{r7}
 8007174:	4770      	bx	lr

08007176 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007176:	b480      	push	{r7}
 8007178:	b083      	sub	sp, #12
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800717e:	bf00      	nop
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	bc80      	pop	{r7}
 8007186:	4770      	bx	lr

08007188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a29      	ldr	r2, [pc, #164]	; (8007240 <TIM_Base_SetConfig+0xb8>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d00b      	beq.n	80071b8 <TIM_Base_SetConfig+0x30>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071a6:	d007      	beq.n	80071b8 <TIM_Base_SetConfig+0x30>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a26      	ldr	r2, [pc, #152]	; (8007244 <TIM_Base_SetConfig+0xbc>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d003      	beq.n	80071b8 <TIM_Base_SetConfig+0x30>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a25      	ldr	r2, [pc, #148]	; (8007248 <TIM_Base_SetConfig+0xc0>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d108      	bne.n	80071ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a1c      	ldr	r2, [pc, #112]	; (8007240 <TIM_Base_SetConfig+0xb8>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d00b      	beq.n	80071ea <TIM_Base_SetConfig+0x62>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071d8:	d007      	beq.n	80071ea <TIM_Base_SetConfig+0x62>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a19      	ldr	r2, [pc, #100]	; (8007244 <TIM_Base_SetConfig+0xbc>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d003      	beq.n	80071ea <TIM_Base_SetConfig+0x62>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a18      	ldr	r2, [pc, #96]	; (8007248 <TIM_Base_SetConfig+0xc0>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d108      	bne.n	80071fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	4313      	orrs	r3, r2
 8007208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	689a      	ldr	r2, [r3, #8]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a07      	ldr	r2, [pc, #28]	; (8007240 <TIM_Base_SetConfig+0xb8>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d103      	bne.n	8007230 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	691a      	ldr	r2, [r3, #16]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	615a      	str	r2, [r3, #20]
}
 8007236:	bf00      	nop
 8007238:	3714      	adds	r7, #20
 800723a:	46bd      	mov	sp, r7
 800723c:	bc80      	pop	{r7}
 800723e:	4770      	bx	lr
 8007240:	40012c00 	.word	0x40012c00
 8007244:	40000400 	.word	0x40000400
 8007248:	40000800 	.word	0x40000800

0800724c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
 8007258:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	f023 0201 	bic.w	r2, r3, #1
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6a1b      	ldr	r3, [r3, #32]
 8007270:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4a1f      	ldr	r2, [pc, #124]	; (80072f4 <TIM_TI1_SetConfig+0xa8>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d00b      	beq.n	8007292 <TIM_TI1_SetConfig+0x46>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007280:	d007      	beq.n	8007292 <TIM_TI1_SetConfig+0x46>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	4a1c      	ldr	r2, [pc, #112]	; (80072f8 <TIM_TI1_SetConfig+0xac>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d003      	beq.n	8007292 <TIM_TI1_SetConfig+0x46>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	4a1b      	ldr	r2, [pc, #108]	; (80072fc <TIM_TI1_SetConfig+0xb0>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d101      	bne.n	8007296 <TIM_TI1_SetConfig+0x4a>
 8007292:	2301      	movs	r3, #1
 8007294:	e000      	b.n	8007298 <TIM_TI1_SetConfig+0x4c>
 8007296:	2300      	movs	r3, #0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d008      	beq.n	80072ae <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	f023 0303 	bic.w	r3, r3, #3
 80072a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	617b      	str	r3, [r7, #20]
 80072ac:	e003      	b.n	80072b6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f043 0301 	orr.w	r3, r3, #1
 80072b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	011b      	lsls	r3, r3, #4
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	f023 030a 	bic.w	r3, r3, #10
 80072d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	f003 030a 	and.w	r3, r3, #10
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	4313      	orrs	r3, r2
 80072dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	621a      	str	r2, [r3, #32]
}
 80072ea:	bf00      	nop
 80072ec:	371c      	adds	r7, #28
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bc80      	pop	{r7}
 80072f2:	4770      	bx	lr
 80072f4:	40012c00 	.word	0x40012c00
 80072f8:	40000400 	.word	0x40000400
 80072fc:	40000800 	.word	0x40000800

08007300 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007300:	b480      	push	{r7}
 8007302:	b087      	sub	sp, #28
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]
 800730c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	f023 0210 	bic.w	r2, r3, #16
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6a1b      	ldr	r3, [r3, #32]
 8007324:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800732c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	021b      	lsls	r3, r3, #8
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	4313      	orrs	r3, r2
 8007336:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800733e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	031b      	lsls	r3, r3, #12
 8007344:	b29b      	uxth	r3, r3
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	4313      	orrs	r3, r2
 800734a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007352:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	011b      	lsls	r3, r3, #4
 8007358:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	4313      	orrs	r3, r2
 8007360:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	621a      	str	r2, [r3, #32]
}
 800736e:	bf00      	nop
 8007370:	371c      	adds	r7, #28
 8007372:	46bd      	mov	sp, r7
 8007374:	bc80      	pop	{r7}
 8007376:	4770      	bx	lr

08007378 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007378:	b480      	push	{r7}
 800737a:	b087      	sub	sp, #28
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
 8007384:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	69db      	ldr	r3, [r3, #28]
 8007396:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6a1b      	ldr	r3, [r3, #32]
 800739c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f023 0303 	bic.w	r3, r3, #3
 80073a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	011b      	lsls	r3, r3, #4
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	697a      	ldr	r2, [r7, #20]
 80073be:	4313      	orrs	r3, r2
 80073c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	021b      	lsls	r3, r3, #8
 80073ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	621a      	str	r2, [r3, #32]
}
 80073e4:	bf00      	nop
 80073e6:	371c      	adds	r7, #28
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bc80      	pop	{r7}
 80073ec:	4770      	bx	lr

080073ee <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b087      	sub	sp, #28
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	60f8      	str	r0, [r7, #12]
 80073f6:	60b9      	str	r1, [r7, #8]
 80073f8:	607a      	str	r2, [r7, #4]
 80073fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6a1b      	ldr	r3, [r3, #32]
 8007400:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	69db      	ldr	r3, [r3, #28]
 800740c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6a1b      	ldr	r3, [r3, #32]
 8007412:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800741a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	021b      	lsls	r3, r3, #8
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	4313      	orrs	r3, r2
 8007424:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800742c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	031b      	lsls	r3, r3, #12
 8007432:	b29b      	uxth	r3, r3
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	4313      	orrs	r3, r2
 8007438:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007440:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	031b      	lsls	r3, r3, #12
 8007446:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800744a:	693a      	ldr	r2, [r7, #16]
 800744c:	4313      	orrs	r3, r2
 800744e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	621a      	str	r2, [r3, #32]
}
 800745c:	bf00      	nop
 800745e:	371c      	adds	r7, #28
 8007460:	46bd      	mov	sp, r7
 8007462:	bc80      	pop	{r7}
 8007464:	4770      	bx	lr

08007466 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007466:	b480      	push	{r7}
 8007468:	b087      	sub	sp, #28
 800746a:	af00      	add	r7, sp, #0
 800746c:	60f8      	str	r0, [r7, #12]
 800746e:	60b9      	str	r1, [r7, #8]
 8007470:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	f003 031f 	and.w	r3, r3, #31
 8007478:	2201      	movs	r2, #1
 800747a:	fa02 f303 	lsl.w	r3, r2, r3
 800747e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6a1a      	ldr	r2, [r3, #32]
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	43db      	mvns	r3, r3
 8007488:	401a      	ands	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6a1a      	ldr	r2, [r3, #32]
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	f003 031f 	and.w	r3, r3, #31
 8007498:	6879      	ldr	r1, [r7, #4]
 800749a:	fa01 f303 	lsl.w	r3, r1, r3
 800749e:	431a      	orrs	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	621a      	str	r2, [r3, #32]
}
 80074a4:	bf00      	nop
 80074a6:	371c      	adds	r7, #28
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bc80      	pop	{r7}
 80074ac:	4770      	bx	lr
	...

080074b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d101      	bne.n	80074c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074c4:	2302      	movs	r3, #2
 80074c6:	e046      	b.n	8007556 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2202      	movs	r2, #2
 80074d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a16      	ldr	r2, [pc, #88]	; (8007560 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d00e      	beq.n	800752a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007514:	d009      	beq.n	800752a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a12      	ldr	r2, [pc, #72]	; (8007564 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d004      	beq.n	800752a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a10      	ldr	r2, [pc, #64]	; (8007568 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d10c      	bne.n	8007544 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007530:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	4313      	orrs	r3, r2
 800753a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3714      	adds	r7, #20
 800755a:	46bd      	mov	sp, r7
 800755c:	bc80      	pop	{r7}
 800755e:	4770      	bx	lr
 8007560:	40012c00 	.word	0x40012c00
 8007564:	40000400 	.word	0x40000400
 8007568:	40000800 	.word	0x40000800

0800756c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	bc80      	pop	{r7}
 800757c:	4770      	bx	lr

0800757e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800757e:	b480      	push	{r7}
 8007580:	b083      	sub	sp, #12
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007586:	bf00      	nop
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	bc80      	pop	{r7}
 800758e:	4770      	bx	lr

08007590 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007590:	b084      	sub	sp, #16
 8007592:	b480      	push	{r7}
 8007594:	b083      	sub	sp, #12
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	f107 0014 	add.w	r0, r7, #20
 800759e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bc80      	pop	{r7}
 80075ac:	b004      	add	sp, #16
 80075ae:	4770      	bx	lr

080075b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80075c0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80075c4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3714      	adds	r7, #20
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bc80      	pop	{r7}
 80075da:	4770      	bx	lr

080075dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80075e4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80075e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	43db      	mvns	r3, r3
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	4013      	ands	r3, r2
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3714      	adds	r7, #20
 800760a:	46bd      	mov	sp, r7
 800760c:	bc80      	pop	{r7}
 800760e:	4770      	bx	lr

08007610 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	460b      	mov	r3, r1
 800761a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	bc80      	pop	{r7}
 8007626:	4770      	bx	lr

08007628 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007628:	b084      	sub	sp, #16
 800762a:	b480      	push	{r7}
 800762c:	b083      	sub	sp, #12
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	f107 0014 	add.w	r0, r7, #20
 8007636:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	bc80      	pop	{r7}
 8007664:	b004      	add	sp, #16
 8007666:	4770      	bx	lr

08007668 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007668:	b480      	push	{r7}
 800766a:	b09b      	sub	sp, #108	; 0x6c
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4413      	add	r3, r2
 8007682:	881b      	ldrh	r3, [r3, #0]
 8007684:	b29b      	uxth	r3, r3
 8007686:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800768a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800768e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	78db      	ldrb	r3, [r3, #3]
 8007696:	2b03      	cmp	r3, #3
 8007698:	d81f      	bhi.n	80076da <USB_ActivateEndpoint+0x72>
 800769a:	a201      	add	r2, pc, #4	; (adr r2, 80076a0 <USB_ActivateEndpoint+0x38>)
 800769c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a0:	080076b1 	.word	0x080076b1
 80076a4:	080076cd 	.word	0x080076cd
 80076a8:	080076e3 	.word	0x080076e3
 80076ac:	080076bf 	.word	0x080076bf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80076b0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80076b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80076b8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80076bc:	e012      	b.n	80076e4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80076be:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80076c2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80076c6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80076ca:	e00b      	b.n	80076e4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80076cc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80076d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80076d4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80076d8:	e004      	b.n	80076e4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80076e0:	e000      	b.n	80076e4 <USB_ActivateEndpoint+0x7c>
      break;
 80076e2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	441a      	add	r2, r3
 80076ee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80076f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007702:	b29b      	uxth	r3, r3
 8007704:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4413      	add	r3, r2
 8007710:	881b      	ldrh	r3, [r3, #0]
 8007712:	b29b      	uxth	r3, r3
 8007714:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800771c:	b29a      	uxth	r2, r3
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	b29b      	uxth	r3, r3
 8007724:	4313      	orrs	r3, r2
 8007726:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	441a      	add	r2, r3
 8007734:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800773c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007748:	b29b      	uxth	r3, r3
 800774a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	7b1b      	ldrb	r3, [r3, #12]
 8007750:	2b00      	cmp	r3, #0
 8007752:	f040 8149 	bne.w	80079e8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	785b      	ldrb	r3, [r3, #1]
 800775a:	2b00      	cmp	r3, #0
 800775c:	f000 8084 	beq.w	8007868 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	617b      	str	r3, [r7, #20]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800776a:	b29b      	uxth	r3, r3
 800776c:	461a      	mov	r2, r3
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	4413      	add	r3, r2
 8007772:	617b      	str	r3, [r7, #20]
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	011a      	lsls	r2, r3, #4
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	4413      	add	r3, r2
 800777e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007782:	613b      	str	r3, [r7, #16]
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	88db      	ldrh	r3, [r3, #6]
 8007788:	085b      	lsrs	r3, r3, #1
 800778a:	b29b      	uxth	r3, r3
 800778c:	005b      	lsls	r3, r3, #1
 800778e:	b29a      	uxth	r2, r3
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4413      	add	r3, r2
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	81fb      	strh	r3, [r7, #14]
 80077a2:	89fb      	ldrh	r3, [r7, #14]
 80077a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d01b      	beq.n	80077e4 <USB_ActivateEndpoint+0x17c>
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4413      	add	r3, r2
 80077b6:	881b      	ldrh	r3, [r3, #0]
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077c2:	81bb      	strh	r3, [r7, #12]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	441a      	add	r2, r3
 80077ce:	89bb      	ldrh	r3, [r7, #12]
 80077d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	78db      	ldrb	r3, [r3, #3]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d020      	beq.n	800782e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	881b      	ldrh	r3, [r3, #0]
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007802:	813b      	strh	r3, [r7, #8]
 8007804:	893b      	ldrh	r3, [r7, #8]
 8007806:	f083 0320 	eor.w	r3, r3, #32
 800780a:	813b      	strh	r3, [r7, #8]
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	441a      	add	r2, r3
 8007816:	893b      	ldrh	r3, [r7, #8]
 8007818:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800781c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007828:	b29b      	uxth	r3, r3
 800782a:	8013      	strh	r3, [r2, #0]
 800782c:	e27f      	b.n	8007d2e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4413      	add	r3, r2
 8007838:	881b      	ldrh	r3, [r3, #0]
 800783a:	b29b      	uxth	r3, r3
 800783c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007844:	817b      	strh	r3, [r7, #10]
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	441a      	add	r2, r3
 8007850:	897b      	ldrh	r3, [r7, #10]
 8007852:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007856:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800785a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800785e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007862:	b29b      	uxth	r3, r3
 8007864:	8013      	strh	r3, [r2, #0]
 8007866:	e262      	b.n	8007d2e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007872:	b29b      	uxth	r3, r3
 8007874:	461a      	mov	r2, r3
 8007876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007878:	4413      	add	r3, r2
 800787a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	011a      	lsls	r2, r3, #4
 8007882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007884:	4413      	add	r3, r2
 8007886:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800788a:	62bb      	str	r3, [r7, #40]	; 0x28
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	88db      	ldrh	r3, [r3, #6]
 8007890:	085b      	lsrs	r3, r3, #1
 8007892:	b29b      	uxth	r3, r3
 8007894:	005b      	lsls	r3, r3, #1
 8007896:	b29a      	uxth	r2, r3
 8007898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	627b      	str	r3, [r7, #36]	; 0x24
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	461a      	mov	r2, r3
 80078aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ac:	4413      	add	r3, r2
 80078ae:	627b      	str	r3, [r7, #36]	; 0x24
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	011a      	lsls	r2, r3, #4
 80078b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b8:	4413      	add	r3, r2
 80078ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078be:	623b      	str	r3, [r7, #32]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d112      	bne.n	80078ee <USB_ActivateEndpoint+0x286>
 80078c8:	6a3b      	ldr	r3, [r7, #32]
 80078ca:	881b      	ldrh	r3, [r3, #0]
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	6a3b      	ldr	r3, [r7, #32]
 80078d6:	801a      	strh	r2, [r3, #0]
 80078d8:	6a3b      	ldr	r3, [r7, #32]
 80078da:	881b      	ldrh	r3, [r3, #0]
 80078dc:	b29b      	uxth	r3, r3
 80078de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	6a3b      	ldr	r3, [r7, #32]
 80078ea:	801a      	strh	r2, [r3, #0]
 80078ec:	e02f      	b.n	800794e <USB_ActivateEndpoint+0x2e6>
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	2b3e      	cmp	r3, #62	; 0x3e
 80078f4:	d813      	bhi.n	800791e <USB_ActivateEndpoint+0x2b6>
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	085b      	lsrs	r3, r3, #1
 80078fc:	663b      	str	r3, [r7, #96]	; 0x60
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	f003 0301 	and.w	r3, r3, #1
 8007906:	2b00      	cmp	r3, #0
 8007908:	d002      	beq.n	8007910 <USB_ActivateEndpoint+0x2a8>
 800790a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800790c:	3301      	adds	r3, #1
 800790e:	663b      	str	r3, [r7, #96]	; 0x60
 8007910:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007912:	b29b      	uxth	r3, r3
 8007914:	029b      	lsls	r3, r3, #10
 8007916:	b29a      	uxth	r2, r3
 8007918:	6a3b      	ldr	r3, [r7, #32]
 800791a:	801a      	strh	r2, [r3, #0]
 800791c:	e017      	b.n	800794e <USB_ActivateEndpoint+0x2e6>
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	095b      	lsrs	r3, r3, #5
 8007924:	663b      	str	r3, [r7, #96]	; 0x60
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	f003 031f 	and.w	r3, r3, #31
 800792e:	2b00      	cmp	r3, #0
 8007930:	d102      	bne.n	8007938 <USB_ActivateEndpoint+0x2d0>
 8007932:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007934:	3b01      	subs	r3, #1
 8007936:	663b      	str	r3, [r7, #96]	; 0x60
 8007938:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800793a:	b29b      	uxth	r3, r3
 800793c:	029b      	lsls	r3, r3, #10
 800793e:	b29b      	uxth	r3, r3
 8007940:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007944:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007948:	b29a      	uxth	r2, r3
 800794a:	6a3b      	ldr	r3, [r7, #32]
 800794c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4413      	add	r3, r2
 8007958:	881b      	ldrh	r3, [r3, #0]
 800795a:	83fb      	strh	r3, [r7, #30]
 800795c:	8bfb      	ldrh	r3, [r7, #30]
 800795e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007962:	2b00      	cmp	r3, #0
 8007964:	d01b      	beq.n	800799e <USB_ActivateEndpoint+0x336>
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4413      	add	r3, r2
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	b29b      	uxth	r3, r3
 8007974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800797c:	83bb      	strh	r3, [r7, #28]
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	441a      	add	r2, r3
 8007988:	8bbb      	ldrh	r3, [r7, #28]
 800798a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800798e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007992:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800799a:	b29b      	uxth	r3, r3
 800799c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	4413      	add	r3, r2
 80079a8:	881b      	ldrh	r3, [r3, #0]
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079b4:	837b      	strh	r3, [r7, #26]
 80079b6:	8b7b      	ldrh	r3, [r7, #26]
 80079b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80079bc:	837b      	strh	r3, [r7, #26]
 80079be:	8b7b      	ldrh	r3, [r7, #26]
 80079c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80079c4:	837b      	strh	r3, [r7, #26]
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	441a      	add	r2, r3
 80079d0:	8b7b      	ldrh	r3, [r7, #26]
 80079d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	8013      	strh	r3, [r2, #0]
 80079e6:	e1a2      	b.n	8007d2e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	881b      	ldrh	r3, [r3, #0]
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079fe:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	441a      	add	r2, r3
 8007a0c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a18:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	461a      	mov	r2, r3
 8007a32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a34:	4413      	add	r3, r2
 8007a36:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	011a      	lsls	r2, r3, #4
 8007a3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a40:	4413      	add	r3, r2
 8007a42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a46:	657b      	str	r3, [r7, #84]	; 0x54
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	891b      	ldrh	r3, [r3, #8]
 8007a4c:	085b      	lsrs	r3, r3, #1
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	005b      	lsls	r3, r3, #1
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a56:	801a      	strh	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	653b      	str	r3, [r7, #80]	; 0x50
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	461a      	mov	r2, r3
 8007a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a68:	4413      	add	r3, r2
 8007a6a:	653b      	str	r3, [r7, #80]	; 0x50
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	011a      	lsls	r2, r3, #4
 8007a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a74:	4413      	add	r3, r2
 8007a76:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	895b      	ldrh	r3, [r3, #10]
 8007a80:	085b      	lsrs	r3, r3, #1
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	005b      	lsls	r3, r3, #1
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a8a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	785b      	ldrb	r3, [r3, #1]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f040 8091 	bne.w	8007bb8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4413      	add	r3, r2
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007aa4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d01b      	beq.n	8007ae6 <USB_ActivateEndpoint+0x47e>
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	4413      	add	r3, r2
 8007ab8:	881b      	ldrh	r3, [r3, #0]
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	441a      	add	r2, r3
 8007ad0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007ad2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ad6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ada:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4413      	add	r3, r2
 8007af0:	881b      	ldrh	r3, [r3, #0]
 8007af2:	873b      	strh	r3, [r7, #56]	; 0x38
 8007af4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d01b      	beq.n	8007b36 <USB_ActivateEndpoint+0x4ce>
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	881b      	ldrh	r3, [r3, #0]
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b14:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	441a      	add	r2, r3
 8007b20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b4c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007b4e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007b50:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b54:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007b56:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007b58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007b5c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	441a      	add	r2, r3
 8007b68:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4413      	add	r3, r2
 8007b88:	881b      	ldrh	r3, [r3, #0]
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b94:	867b      	strh	r3, [r7, #50]	; 0x32
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	441a      	add	r2, r3
 8007ba0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007ba2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ba6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	8013      	strh	r3, [r2, #0]
 8007bb6:	e0ba      	b.n	8007d2e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4413      	add	r3, r2
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007bc8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d01d      	beq.n	8007c10 <USB_ActivateEndpoint+0x5a8>
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4413      	add	r3, r2
 8007bde:	881b      	ldrh	r3, [r3, #0]
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	441a      	add	r2, r3
 8007bf8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007bfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4413      	add	r3, r2
 8007c1a:	881b      	ldrh	r3, [r3, #0]
 8007c1c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007c20:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d01d      	beq.n	8007c68 <USB_ActivateEndpoint+0x600>
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	4413      	add	r3, r2
 8007c36:	881b      	ldrh	r3, [r3, #0]
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c42:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	441a      	add	r2, r3
 8007c50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007c54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	78db      	ldrb	r3, [r3, #3]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d024      	beq.n	8007cba <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	4413      	add	r3, r2
 8007c7a:	881b      	ldrh	r3, [r3, #0]
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c86:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007c8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007c8e:	f083 0320 	eor.w	r3, r3, #32
 8007c92:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	441a      	add	r2, r3
 8007ca0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007ca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	8013      	strh	r3, [r2, #0]
 8007cb8:	e01d      	b.n	8007cf6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4413      	add	r3, r2
 8007cc4:	881b      	ldrh	r3, [r3, #0]
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cd0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	441a      	add	r2, r3
 8007cde:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	4413      	add	r3, r2
 8007d00:	881b      	ldrh	r3, [r3, #0]
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d0c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	441a      	add	r2, r3
 8007d18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007d2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	376c      	adds	r7, #108	; 0x6c
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bc80      	pop	{r7}
 8007d3a:	4770      	bx	lr

08007d3c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b08d      	sub	sp, #52	; 0x34
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	7b1b      	ldrb	r3, [r3, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f040 808e 	bne.w	8007e6c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	785b      	ldrb	r3, [r3, #1]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d044      	beq.n	8007de2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4413      	add	r3, r2
 8007d62:	881b      	ldrh	r3, [r3, #0]
 8007d64:	81bb      	strh	r3, [r7, #12]
 8007d66:	89bb      	ldrh	r3, [r7, #12]
 8007d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d01b      	beq.n	8007da8 <USB_DeactivateEndpoint+0x6c>
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4413      	add	r3, r2
 8007d7a:	881b      	ldrh	r3, [r3, #0]
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d86:	817b      	strh	r3, [r7, #10]
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	441a      	add	r2, r3
 8007d92:	897b      	ldrh	r3, [r7, #10]
 8007d94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007da0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	4413      	add	r3, r2
 8007db2:	881b      	ldrh	r3, [r3, #0]
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dbe:	813b      	strh	r3, [r7, #8]
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	441a      	add	r2, r3
 8007dca:	893b      	ldrh	r3, [r7, #8]
 8007dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	8013      	strh	r3, [r2, #0]
 8007de0:	e192      	b.n	8008108 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	881b      	ldrh	r3, [r3, #0]
 8007dee:	827b      	strh	r3, [r7, #18]
 8007df0:	8a7b      	ldrh	r3, [r7, #18]
 8007df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d01b      	beq.n	8007e32 <USB_DeactivateEndpoint+0xf6>
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4413      	add	r3, r2
 8007e04:	881b      	ldrh	r3, [r3, #0]
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e10:	823b      	strh	r3, [r7, #16]
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	441a      	add	r2, r3
 8007e1c:	8a3b      	ldrh	r3, [r7, #16]
 8007e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4413      	add	r3, r2
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e48:	81fb      	strh	r3, [r7, #14]
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	441a      	add	r2, r3
 8007e54:	89fb      	ldrh	r3, [r7, #14]
 8007e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	8013      	strh	r3, [r2, #0]
 8007e6a:	e14d      	b.n	8008108 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	785b      	ldrb	r3, [r3, #1]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f040 80a5 	bne.w	8007fc0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4413      	add	r3, r2
 8007e80:	881b      	ldrh	r3, [r3, #0]
 8007e82:	843b      	strh	r3, [r7, #32]
 8007e84:	8c3b      	ldrh	r3, [r7, #32]
 8007e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d01b      	beq.n	8007ec6 <USB_DeactivateEndpoint+0x18a>
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	4413      	add	r3, r2
 8007e98:	881b      	ldrh	r3, [r3, #0]
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ea4:	83fb      	strh	r3, [r7, #30]
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	441a      	add	r2, r3
 8007eb0:	8bfb      	ldrh	r3, [r7, #30]
 8007eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	881b      	ldrh	r3, [r3, #0]
 8007ed2:	83bb      	strh	r3, [r7, #28]
 8007ed4:	8bbb      	ldrh	r3, [r7, #28]
 8007ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d01b      	beq.n	8007f16 <USB_DeactivateEndpoint+0x1da>
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	4413      	add	r3, r2
 8007ee8:	881b      	ldrh	r3, [r3, #0]
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ef4:	837b      	strh	r3, [r7, #26]
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	441a      	add	r2, r3
 8007f00:	8b7b      	ldrh	r3, [r7, #26]
 8007f02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	881b      	ldrh	r3, [r3, #0]
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f2c:	833b      	strh	r3, [r7, #24]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	441a      	add	r2, r3
 8007f38:	8b3b      	ldrh	r3, [r7, #24]
 8007f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	881b      	ldrh	r3, [r3, #0]
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f64:	82fb      	strh	r3, [r7, #22]
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	441a      	add	r2, r3
 8007f70:	8afb      	ldrh	r3, [r7, #22]
 8007f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	881b      	ldrh	r3, [r3, #0]
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f9c:	82bb      	strh	r3, [r7, #20]
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	441a      	add	r2, r3
 8007fa8:	8abb      	ldrh	r3, [r7, #20]
 8007faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	8013      	strh	r3, [r2, #0]
 8007fbe:	e0a3      	b.n	8008108 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	4413      	add	r3, r2
 8007fca:	881b      	ldrh	r3, [r3, #0]
 8007fcc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007fce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d01b      	beq.n	8008010 <USB_DeactivateEndpoint+0x2d4>
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	881b      	ldrh	r3, [r3, #0]
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fee:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	441a      	add	r2, r3
 8007ffa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008004:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800800c:	b29b      	uxth	r3, r3
 800800e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	4413      	add	r3, r2
 800801a:	881b      	ldrh	r3, [r3, #0]
 800801c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800801e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008024:	2b00      	cmp	r3, #0
 8008026:	d01b      	beq.n	8008060 <USB_DeactivateEndpoint+0x324>
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	4413      	add	r3, r2
 8008032:	881b      	ldrh	r3, [r3, #0]
 8008034:	b29b      	uxth	r3, r3
 8008036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800803a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800803e:	853b      	strh	r3, [r7, #40]	; 0x28
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	441a      	add	r2, r3
 800804a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800804c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008058:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800805c:	b29b      	uxth	r3, r3
 800805e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4413      	add	r3, r2
 800806a:	881b      	ldrh	r3, [r3, #0]
 800806c:	b29b      	uxth	r3, r3
 800806e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008076:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	441a      	add	r2, r3
 8008082:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800808c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008094:	b29b      	uxth	r3, r3
 8008096:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	4413      	add	r3, r2
 80080a2:	881b      	ldrh	r3, [r3, #0]
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	441a      	add	r2, r3
 80080ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80080bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4413      	add	r3, r2
 80080da:	881b      	ldrh	r3, [r3, #0]
 80080dc:	b29b      	uxth	r3, r3
 80080de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080e6:	847b      	strh	r3, [r7, #34]	; 0x22
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	441a      	add	r2, r3
 80080f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80080f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008104:	b29b      	uxth	r3, r3
 8008106:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3734      	adds	r7, #52	; 0x34
 800810e:	46bd      	mov	sp, r7
 8008110:	bc80      	pop	{r7}
 8008112:	4770      	bx	lr

08008114 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b0c4      	sub	sp, #272	; 0x110
 8008118:	af00      	add	r7, sp, #0
 800811a:	1d3b      	adds	r3, r7, #4
 800811c:	6018      	str	r0, [r3, #0]
 800811e:	463b      	mov	r3, r7
 8008120:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008122:	463b      	mov	r3, r7
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	785b      	ldrb	r3, [r3, #1]
 8008128:	2b01      	cmp	r3, #1
 800812a:	f040 8557 	bne.w	8008bdc <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800812e:	463b      	mov	r3, r7
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	699a      	ldr	r2, [r3, #24]
 8008134:	463b      	mov	r3, r7
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	429a      	cmp	r2, r3
 800813c:	d905      	bls.n	800814a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800813e:	463b      	mov	r3, r7
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008148:	e004      	b.n	8008154 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800814a:	463b      	mov	r3, r7
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	699b      	ldr	r3, [r3, #24]
 8008150:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008154:	463b      	mov	r3, r7
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	7b1b      	ldrb	r3, [r3, #12]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d12c      	bne.n	80081b8 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800815e:	463b      	mov	r3, r7
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	6959      	ldr	r1, [r3, #20]
 8008164:	463b      	mov	r3, r7
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	88da      	ldrh	r2, [r3, #6]
 800816a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800816e:	b29b      	uxth	r3, r3
 8008170:	1d38      	adds	r0, r7, #4
 8008172:	6800      	ldr	r0, [r0, #0]
 8008174:	f001 fa2c 	bl	80095d0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008178:	1d3b      	adds	r3, r7, #4
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	617b      	str	r3, [r7, #20]
 800817e:	1d3b      	adds	r3, r7, #4
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008186:	b29b      	uxth	r3, r3
 8008188:	461a      	mov	r2, r3
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	4413      	add	r3, r2
 800818e:	617b      	str	r3, [r7, #20]
 8008190:	463b      	mov	r3, r7
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	011a      	lsls	r2, r3, #4
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	4413      	add	r3, r2
 800819c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80081a0:	f107 0310 	add.w	r3, r7, #16
 80081a4:	601a      	str	r2, [r3, #0]
 80081a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081aa:	b29a      	uxth	r2, r3
 80081ac:	f107 0310 	add.w	r3, r7, #16
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	801a      	strh	r2, [r3, #0]
 80081b4:	f000 bcdd 	b.w	8008b72 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80081b8:	463b      	mov	r3, r7
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	78db      	ldrb	r3, [r3, #3]
 80081be:	2b02      	cmp	r3, #2
 80081c0:	f040 8347 	bne.w	8008852 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80081c4:	463b      	mov	r3, r7
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	6a1a      	ldr	r2, [r3, #32]
 80081ca:	463b      	mov	r3, r7
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	f240 82eb 	bls.w	80087ac <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80081d6:	1d3b      	adds	r3, r7, #4
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	463b      	mov	r3, r7
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	881b      	ldrh	r3, [r3, #0]
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081f0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80081f4:	1d3b      	adds	r3, r7, #4
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	463b      	mov	r3, r7
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	441a      	add	r2, r3
 8008202:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008206:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800820a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800820e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008216:	b29b      	uxth	r3, r3
 8008218:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800821a:	463b      	mov	r3, r7
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	6a1a      	ldr	r2, [r3, #32]
 8008220:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008224:	1ad2      	subs	r2, r2, r3
 8008226:	463b      	mov	r3, r7
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800822c:	1d3b      	adds	r3, r7, #4
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	463b      	mov	r3, r7
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	4413      	add	r3, r2
 800823a:	881b      	ldrh	r3, [r3, #0]
 800823c:	b29b      	uxth	r3, r3
 800823e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008242:	2b00      	cmp	r3, #0
 8008244:	f000 8159 	beq.w	80084fa <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008248:	1d3b      	adds	r3, r7, #4
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	637b      	str	r3, [r7, #52]	; 0x34
 800824e:	463b      	mov	r3, r7
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	785b      	ldrb	r3, [r3, #1]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d164      	bne.n	8008322 <USB_EPStartXfer+0x20e>
 8008258:	1d3b      	adds	r3, r7, #4
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800825e:	1d3b      	adds	r3, r7, #4
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008266:	b29b      	uxth	r3, r3
 8008268:	461a      	mov	r2, r3
 800826a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800826c:	4413      	add	r3, r2
 800826e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008270:	463b      	mov	r3, r7
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	011a      	lsls	r2, r3, #4
 8008278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827a:	4413      	add	r3, r2
 800827c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008280:	62bb      	str	r3, [r7, #40]	; 0x28
 8008282:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008286:	2b00      	cmp	r3, #0
 8008288:	d112      	bne.n	80082b0 <USB_EPStartXfer+0x19c>
 800828a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828c:	881b      	ldrh	r3, [r3, #0]
 800828e:	b29b      	uxth	r3, r3
 8008290:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008294:	b29a      	uxth	r2, r3
 8008296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008298:	801a      	strh	r2, [r3, #0]
 800829a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829c:	881b      	ldrh	r3, [r3, #0]
 800829e:	b29b      	uxth	r3, r3
 80082a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ac:	801a      	strh	r2, [r3, #0]
 80082ae:	e054      	b.n	800835a <USB_EPStartXfer+0x246>
 80082b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082b4:	2b3e      	cmp	r3, #62	; 0x3e
 80082b6:	d817      	bhi.n	80082e8 <USB_EPStartXfer+0x1d4>
 80082b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082bc:	085b      	lsrs	r3, r3, #1
 80082be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80082c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082c6:	f003 0301 	and.w	r3, r3, #1
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d004      	beq.n	80082d8 <USB_EPStartXfer+0x1c4>
 80082ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082d2:	3301      	adds	r3, #1
 80082d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80082d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082dc:	b29b      	uxth	r3, r3
 80082de:	029b      	lsls	r3, r3, #10
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e4:	801a      	strh	r2, [r3, #0]
 80082e6:	e038      	b.n	800835a <USB_EPStartXfer+0x246>
 80082e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082ec:	095b      	lsrs	r3, r3, #5
 80082ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80082f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082f6:	f003 031f 	and.w	r3, r3, #31
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d104      	bne.n	8008308 <USB_EPStartXfer+0x1f4>
 80082fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008302:	3b01      	subs	r3, #1
 8008304:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800830c:	b29b      	uxth	r3, r3
 800830e:	029b      	lsls	r3, r3, #10
 8008310:	b29b      	uxth	r3, r3
 8008312:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008316:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800831a:	b29a      	uxth	r2, r3
 800831c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831e:	801a      	strh	r2, [r3, #0]
 8008320:	e01b      	b.n	800835a <USB_EPStartXfer+0x246>
 8008322:	463b      	mov	r3, r7
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	785b      	ldrb	r3, [r3, #1]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d116      	bne.n	800835a <USB_EPStartXfer+0x246>
 800832c:	1d3b      	adds	r3, r7, #4
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008334:	b29b      	uxth	r3, r3
 8008336:	461a      	mov	r2, r3
 8008338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800833a:	4413      	add	r3, r2
 800833c:	637b      	str	r3, [r7, #52]	; 0x34
 800833e:	463b      	mov	r3, r7
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	011a      	lsls	r2, r3, #4
 8008346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008348:	4413      	add	r3, r2
 800834a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800834e:	633b      	str	r3, [r7, #48]	; 0x30
 8008350:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008354:	b29a      	uxth	r2, r3
 8008356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008358:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800835a:	463b      	mov	r3, r7
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	895b      	ldrh	r3, [r3, #10]
 8008360:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008364:	463b      	mov	r3, r7
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	6959      	ldr	r1, [r3, #20]
 800836a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800836e:	b29b      	uxth	r3, r3
 8008370:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008374:	1d38      	adds	r0, r7, #4
 8008376:	6800      	ldr	r0, [r0, #0]
 8008378:	f001 f92a 	bl	80095d0 <USB_WritePMA>
            ep->xfer_buff += len;
 800837c:	463b      	mov	r3, r7
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	695a      	ldr	r2, [r3, #20]
 8008382:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008386:	441a      	add	r2, r3
 8008388:	463b      	mov	r3, r7
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800838e:	463b      	mov	r3, r7
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	6a1a      	ldr	r2, [r3, #32]
 8008394:	463b      	mov	r3, r7
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	429a      	cmp	r2, r3
 800839c:	d909      	bls.n	80083b2 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 800839e:	463b      	mov	r3, r7
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6a1a      	ldr	r2, [r3, #32]
 80083a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083a8:	1ad2      	subs	r2, r2, r3
 80083aa:	463b      	mov	r3, r7
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	621a      	str	r2, [r3, #32]
 80083b0:	e008      	b.n	80083c4 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80083b2:	463b      	mov	r3, r7
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	6a1b      	ldr	r3, [r3, #32]
 80083b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80083bc:	463b      	mov	r3, r7
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2200      	movs	r2, #0
 80083c2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80083c4:	463b      	mov	r3, r7
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	785b      	ldrb	r3, [r3, #1]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d164      	bne.n	8008498 <USB_EPStartXfer+0x384>
 80083ce:	1d3b      	adds	r3, r7, #4
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	61fb      	str	r3, [r7, #28]
 80083d4:	1d3b      	adds	r3, r7, #4
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083dc:	b29b      	uxth	r3, r3
 80083de:	461a      	mov	r2, r3
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	4413      	add	r3, r2
 80083e4:	61fb      	str	r3, [r7, #28]
 80083e6:	463b      	mov	r3, r7
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	011a      	lsls	r2, r3, #4
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	4413      	add	r3, r2
 80083f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80083f6:	61bb      	str	r3, [r7, #24]
 80083f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d112      	bne.n	8008426 <USB_EPStartXfer+0x312>
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	881b      	ldrh	r3, [r3, #0]
 8008404:	b29b      	uxth	r3, r3
 8008406:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800840a:	b29a      	uxth	r2, r3
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	801a      	strh	r2, [r3, #0]
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	881b      	ldrh	r3, [r3, #0]
 8008414:	b29b      	uxth	r3, r3
 8008416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800841a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800841e:	b29a      	uxth	r2, r3
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	801a      	strh	r2, [r3, #0]
 8008424:	e057      	b.n	80084d6 <USB_EPStartXfer+0x3c2>
 8008426:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800842a:	2b3e      	cmp	r3, #62	; 0x3e
 800842c:	d817      	bhi.n	800845e <USB_EPStartXfer+0x34a>
 800842e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008432:	085b      	lsrs	r3, r3, #1
 8008434:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008438:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	2b00      	cmp	r3, #0
 8008442:	d004      	beq.n	800844e <USB_EPStartXfer+0x33a>
 8008444:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008448:	3301      	adds	r3, #1
 800844a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800844e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008452:	b29b      	uxth	r3, r3
 8008454:	029b      	lsls	r3, r3, #10
 8008456:	b29a      	uxth	r2, r3
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	801a      	strh	r2, [r3, #0]
 800845c:	e03b      	b.n	80084d6 <USB_EPStartXfer+0x3c2>
 800845e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008462:	095b      	lsrs	r3, r3, #5
 8008464:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008468:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800846c:	f003 031f 	and.w	r3, r3, #31
 8008470:	2b00      	cmp	r3, #0
 8008472:	d104      	bne.n	800847e <USB_EPStartXfer+0x36a>
 8008474:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008478:	3b01      	subs	r3, #1
 800847a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800847e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008482:	b29b      	uxth	r3, r3
 8008484:	029b      	lsls	r3, r3, #10
 8008486:	b29b      	uxth	r3, r3
 8008488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800848c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008490:	b29a      	uxth	r2, r3
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	801a      	strh	r2, [r3, #0]
 8008496:	e01e      	b.n	80084d6 <USB_EPStartXfer+0x3c2>
 8008498:	463b      	mov	r3, r7
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	785b      	ldrb	r3, [r3, #1]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d119      	bne.n	80084d6 <USB_EPStartXfer+0x3c2>
 80084a2:	1d3b      	adds	r3, r7, #4
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	627b      	str	r3, [r7, #36]	; 0x24
 80084a8:	1d3b      	adds	r3, r7, #4
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	461a      	mov	r2, r3
 80084b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b6:	4413      	add	r3, r2
 80084b8:	627b      	str	r3, [r7, #36]	; 0x24
 80084ba:	463b      	mov	r3, r7
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	011a      	lsls	r2, r3, #4
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	4413      	add	r3, r2
 80084c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80084ca:	623b      	str	r3, [r7, #32]
 80084cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	6a3b      	ldr	r3, [r7, #32]
 80084d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80084d6:	463b      	mov	r3, r7
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	891b      	ldrh	r3, [r3, #8]
 80084dc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80084e0:	463b      	mov	r3, r7
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6959      	ldr	r1, [r3, #20]
 80084e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80084f0:	1d38      	adds	r0, r7, #4
 80084f2:	6800      	ldr	r0, [r0, #0]
 80084f4:	f001 f86c 	bl	80095d0 <USB_WritePMA>
 80084f8:	e33b      	b.n	8008b72 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80084fa:	463b      	mov	r3, r7
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	785b      	ldrb	r3, [r3, #1]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d164      	bne.n	80085ce <USB_EPStartXfer+0x4ba>
 8008504:	1d3b      	adds	r3, r7, #4
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	64fb      	str	r3, [r7, #76]	; 0x4c
 800850a:	1d3b      	adds	r3, r7, #4
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008512:	b29b      	uxth	r3, r3
 8008514:	461a      	mov	r2, r3
 8008516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008518:	4413      	add	r3, r2
 800851a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800851c:	463b      	mov	r3, r7
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	011a      	lsls	r2, r3, #4
 8008524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008526:	4413      	add	r3, r2
 8008528:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800852c:	64bb      	str	r3, [r7, #72]	; 0x48
 800852e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008532:	2b00      	cmp	r3, #0
 8008534:	d112      	bne.n	800855c <USB_EPStartXfer+0x448>
 8008536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008538:	881b      	ldrh	r3, [r3, #0]
 800853a:	b29b      	uxth	r3, r3
 800853c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008540:	b29a      	uxth	r2, r3
 8008542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008544:	801a      	strh	r2, [r3, #0]
 8008546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008548:	881b      	ldrh	r3, [r3, #0]
 800854a:	b29b      	uxth	r3, r3
 800854c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008550:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008554:	b29a      	uxth	r2, r3
 8008556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008558:	801a      	strh	r2, [r3, #0]
 800855a:	e057      	b.n	800860c <USB_EPStartXfer+0x4f8>
 800855c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008560:	2b3e      	cmp	r3, #62	; 0x3e
 8008562:	d817      	bhi.n	8008594 <USB_EPStartXfer+0x480>
 8008564:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008568:	085b      	lsrs	r3, r3, #1
 800856a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800856e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	2b00      	cmp	r3, #0
 8008578:	d004      	beq.n	8008584 <USB_EPStartXfer+0x470>
 800857a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800857e:	3301      	adds	r3, #1
 8008580:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008588:	b29b      	uxth	r3, r3
 800858a:	029b      	lsls	r3, r3, #10
 800858c:	b29a      	uxth	r2, r3
 800858e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008590:	801a      	strh	r2, [r3, #0]
 8008592:	e03b      	b.n	800860c <USB_EPStartXfer+0x4f8>
 8008594:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008598:	095b      	lsrs	r3, r3, #5
 800859a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800859e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085a2:	f003 031f 	and.w	r3, r3, #31
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d104      	bne.n	80085b4 <USB_EPStartXfer+0x4a0>
 80085aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085ae:	3b01      	subs	r3, #1
 80085b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80085b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	029b      	lsls	r3, r3, #10
 80085bc:	b29b      	uxth	r3, r3
 80085be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085c6:	b29a      	uxth	r2, r3
 80085c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085ca:	801a      	strh	r2, [r3, #0]
 80085cc:	e01e      	b.n	800860c <USB_EPStartXfer+0x4f8>
 80085ce:	463b      	mov	r3, r7
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	785b      	ldrb	r3, [r3, #1]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d119      	bne.n	800860c <USB_EPStartXfer+0x4f8>
 80085d8:	1d3b      	adds	r3, r7, #4
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	657b      	str	r3, [r7, #84]	; 0x54
 80085de:	1d3b      	adds	r3, r7, #4
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	461a      	mov	r2, r3
 80085ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085ec:	4413      	add	r3, r2
 80085ee:	657b      	str	r3, [r7, #84]	; 0x54
 80085f0:	463b      	mov	r3, r7
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	011a      	lsls	r2, r3, #4
 80085f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085fa:	4413      	add	r3, r2
 80085fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008600:	653b      	str	r3, [r7, #80]	; 0x50
 8008602:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008606:	b29a      	uxth	r2, r3
 8008608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800860a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800860c:	463b      	mov	r3, r7
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	891b      	ldrh	r3, [r3, #8]
 8008612:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008616:	463b      	mov	r3, r7
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	6959      	ldr	r1, [r3, #20]
 800861c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008620:	b29b      	uxth	r3, r3
 8008622:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008626:	1d38      	adds	r0, r7, #4
 8008628:	6800      	ldr	r0, [r0, #0]
 800862a:	f000 ffd1 	bl	80095d0 <USB_WritePMA>
            ep->xfer_buff += len;
 800862e:	463b      	mov	r3, r7
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	695a      	ldr	r2, [r3, #20]
 8008634:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008638:	441a      	add	r2, r3
 800863a:	463b      	mov	r3, r7
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008640:	463b      	mov	r3, r7
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	6a1a      	ldr	r2, [r3, #32]
 8008646:	463b      	mov	r3, r7
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	429a      	cmp	r2, r3
 800864e:	d909      	bls.n	8008664 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8008650:	463b      	mov	r3, r7
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	6a1a      	ldr	r2, [r3, #32]
 8008656:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800865a:	1ad2      	subs	r2, r2, r3
 800865c:	463b      	mov	r3, r7
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	621a      	str	r2, [r3, #32]
 8008662:	e008      	b.n	8008676 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8008664:	463b      	mov	r3, r7
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800866e:	463b      	mov	r3, r7
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2200      	movs	r2, #0
 8008674:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008676:	1d3b      	adds	r3, r7, #4
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	647b      	str	r3, [r7, #68]	; 0x44
 800867c:	463b      	mov	r3, r7
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	785b      	ldrb	r3, [r3, #1]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d164      	bne.n	8008750 <USB_EPStartXfer+0x63c>
 8008686:	1d3b      	adds	r3, r7, #4
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800868c:	1d3b      	adds	r3, r7, #4
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008694:	b29b      	uxth	r3, r3
 8008696:	461a      	mov	r2, r3
 8008698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800869a:	4413      	add	r3, r2
 800869c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800869e:	463b      	mov	r3, r7
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	011a      	lsls	r2, r3, #4
 80086a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086a8:	4413      	add	r3, r2
 80086aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80086ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80086b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d112      	bne.n	80086de <USB_EPStartXfer+0x5ca>
 80086b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ba:	881b      	ldrh	r3, [r3, #0]
 80086bc:	b29b      	uxth	r3, r3
 80086be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c6:	801a      	strh	r2, [r3, #0]
 80086c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ca:	881b      	ldrh	r3, [r3, #0]
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086d6:	b29a      	uxth	r2, r3
 80086d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086da:	801a      	strh	r2, [r3, #0]
 80086dc:	e054      	b.n	8008788 <USB_EPStartXfer+0x674>
 80086de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086e2:	2b3e      	cmp	r3, #62	; 0x3e
 80086e4:	d817      	bhi.n	8008716 <USB_EPStartXfer+0x602>
 80086e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086ea:	085b      	lsrs	r3, r3, #1
 80086ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80086f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086f4:	f003 0301 	and.w	r3, r3, #1
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d004      	beq.n	8008706 <USB_EPStartXfer+0x5f2>
 80086fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008700:	3301      	adds	r3, #1
 8008702:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008706:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800870a:	b29b      	uxth	r3, r3
 800870c:	029b      	lsls	r3, r3, #10
 800870e:	b29a      	uxth	r2, r3
 8008710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008712:	801a      	strh	r2, [r3, #0]
 8008714:	e038      	b.n	8008788 <USB_EPStartXfer+0x674>
 8008716:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800871a:	095b      	lsrs	r3, r3, #5
 800871c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008720:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008724:	f003 031f 	and.w	r3, r3, #31
 8008728:	2b00      	cmp	r3, #0
 800872a:	d104      	bne.n	8008736 <USB_EPStartXfer+0x622>
 800872c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008730:	3b01      	subs	r3, #1
 8008732:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008736:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800873a:	b29b      	uxth	r3, r3
 800873c:	029b      	lsls	r3, r3, #10
 800873e:	b29b      	uxth	r3, r3
 8008740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008748:	b29a      	uxth	r2, r3
 800874a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874c:	801a      	strh	r2, [r3, #0]
 800874e:	e01b      	b.n	8008788 <USB_EPStartXfer+0x674>
 8008750:	463b      	mov	r3, r7
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	785b      	ldrb	r3, [r3, #1]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d116      	bne.n	8008788 <USB_EPStartXfer+0x674>
 800875a:	1d3b      	adds	r3, r7, #4
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008762:	b29b      	uxth	r3, r3
 8008764:	461a      	mov	r2, r3
 8008766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008768:	4413      	add	r3, r2
 800876a:	647b      	str	r3, [r7, #68]	; 0x44
 800876c:	463b      	mov	r3, r7
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	011a      	lsls	r2, r3, #4
 8008774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008776:	4413      	add	r3, r2
 8008778:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800877c:	643b      	str	r3, [r7, #64]	; 0x40
 800877e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008782:	b29a      	uxth	r2, r3
 8008784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008786:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008788:	463b      	mov	r3, r7
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	895b      	ldrh	r3, [r3, #10]
 800878e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008792:	463b      	mov	r3, r7
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	6959      	ldr	r1, [r3, #20]
 8008798:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800879c:	b29b      	uxth	r3, r3
 800879e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80087a2:	1d38      	adds	r0, r7, #4
 80087a4:	6800      	ldr	r0, [r0, #0]
 80087a6:	f000 ff13 	bl	80095d0 <USB_WritePMA>
 80087aa:	e1e2      	b.n	8008b72 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80087ac:	463b      	mov	r3, r7
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	6a1b      	ldr	r3, [r3, #32]
 80087b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80087b6:	1d3b      	adds	r3, r7, #4
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	463b      	mov	r3, r7
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	881b      	ldrh	r3, [r3, #0]
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80087cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087d0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80087d4:	1d3b      	adds	r3, r7, #4
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	463b      	mov	r3, r7
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	441a      	add	r2, r3
 80087e2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80087e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80087fa:	1d3b      	adds	r3, r7, #4
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	663b      	str	r3, [r7, #96]	; 0x60
 8008800:	1d3b      	adds	r3, r7, #4
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008808:	b29b      	uxth	r3, r3
 800880a:	461a      	mov	r2, r3
 800880c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800880e:	4413      	add	r3, r2
 8008810:	663b      	str	r3, [r7, #96]	; 0x60
 8008812:	463b      	mov	r3, r7
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	011a      	lsls	r2, r3, #4
 800881a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800881c:	4413      	add	r3, r2
 800881e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008822:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008824:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008828:	b29a      	uxth	r2, r3
 800882a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800882c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800882e:	463b      	mov	r3, r7
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	891b      	ldrh	r3, [r3, #8]
 8008834:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008838:	463b      	mov	r3, r7
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	6959      	ldr	r1, [r3, #20]
 800883e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008842:	b29b      	uxth	r3, r3
 8008844:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008848:	1d38      	adds	r0, r7, #4
 800884a:	6800      	ldr	r0, [r0, #0]
 800884c:	f000 fec0 	bl	80095d0 <USB_WritePMA>
 8008850:	e18f      	b.n	8008b72 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008852:	1d3b      	adds	r3, r7, #4
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	463b      	mov	r3, r7
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	4413      	add	r3, r2
 8008860:	881b      	ldrh	r3, [r3, #0]
 8008862:	b29b      	uxth	r3, r3
 8008864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008868:	2b00      	cmp	r3, #0
 800886a:	f000 808f 	beq.w	800898c <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800886e:	1d3b      	adds	r3, r7, #4
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	67bb      	str	r3, [r7, #120]	; 0x78
 8008874:	463b      	mov	r3, r7
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	785b      	ldrb	r3, [r3, #1]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d164      	bne.n	8008948 <USB_EPStartXfer+0x834>
 800887e:	1d3b      	adds	r3, r7, #4
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	673b      	str	r3, [r7, #112]	; 0x70
 8008884:	1d3b      	adds	r3, r7, #4
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800888c:	b29b      	uxth	r3, r3
 800888e:	461a      	mov	r2, r3
 8008890:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008892:	4413      	add	r3, r2
 8008894:	673b      	str	r3, [r7, #112]	; 0x70
 8008896:	463b      	mov	r3, r7
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	011a      	lsls	r2, r3, #4
 800889e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088a0:	4413      	add	r3, r2
 80088a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d112      	bne.n	80088d6 <USB_EPStartXfer+0x7c2>
 80088b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088b2:	881b      	ldrh	r3, [r3, #0]
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088ba:	b29a      	uxth	r2, r3
 80088bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088be:	801a      	strh	r2, [r3, #0]
 80088c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088c2:	881b      	ldrh	r3, [r3, #0]
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088d2:	801a      	strh	r2, [r3, #0]
 80088d4:	e054      	b.n	8008980 <USB_EPStartXfer+0x86c>
 80088d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088da:	2b3e      	cmp	r3, #62	; 0x3e
 80088dc:	d817      	bhi.n	800890e <USB_EPStartXfer+0x7fa>
 80088de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088e2:	085b      	lsrs	r3, r3, #1
 80088e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80088e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088ec:	f003 0301 	and.w	r3, r3, #1
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d004      	beq.n	80088fe <USB_EPStartXfer+0x7ea>
 80088f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088f8:	3301      	adds	r3, #1
 80088fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80088fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008902:	b29b      	uxth	r3, r3
 8008904:	029b      	lsls	r3, r3, #10
 8008906:	b29a      	uxth	r2, r3
 8008908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800890a:	801a      	strh	r2, [r3, #0]
 800890c:	e038      	b.n	8008980 <USB_EPStartXfer+0x86c>
 800890e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008912:	095b      	lsrs	r3, r3, #5
 8008914:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008918:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800891c:	f003 031f 	and.w	r3, r3, #31
 8008920:	2b00      	cmp	r3, #0
 8008922:	d104      	bne.n	800892e <USB_EPStartXfer+0x81a>
 8008924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008928:	3b01      	subs	r3, #1
 800892a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800892e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008932:	b29b      	uxth	r3, r3
 8008934:	029b      	lsls	r3, r3, #10
 8008936:	b29b      	uxth	r3, r3
 8008938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800893c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008940:	b29a      	uxth	r2, r3
 8008942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008944:	801a      	strh	r2, [r3, #0]
 8008946:	e01b      	b.n	8008980 <USB_EPStartXfer+0x86c>
 8008948:	463b      	mov	r3, r7
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	785b      	ldrb	r3, [r3, #1]
 800894e:	2b01      	cmp	r3, #1
 8008950:	d116      	bne.n	8008980 <USB_EPStartXfer+0x86c>
 8008952:	1d3b      	adds	r3, r7, #4
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800895a:	b29b      	uxth	r3, r3
 800895c:	461a      	mov	r2, r3
 800895e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008960:	4413      	add	r3, r2
 8008962:	67bb      	str	r3, [r7, #120]	; 0x78
 8008964:	463b      	mov	r3, r7
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	011a      	lsls	r2, r3, #4
 800896c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800896e:	4413      	add	r3, r2
 8008970:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008974:	677b      	str	r3, [r7, #116]	; 0x74
 8008976:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800897a:	b29a      	uxth	r2, r3
 800897c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800897e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008980:	463b      	mov	r3, r7
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	895b      	ldrh	r3, [r3, #10]
 8008986:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800898a:	e097      	b.n	8008abc <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800898c:	463b      	mov	r3, r7
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	785b      	ldrb	r3, [r3, #1]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d168      	bne.n	8008a68 <USB_EPStartXfer+0x954>
 8008996:	1d3b      	adds	r3, r7, #4
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800899e:	1d3b      	adds	r3, r7, #4
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	461a      	mov	r2, r3
 80089aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80089ae:	4413      	add	r3, r2
 80089b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80089b4:	463b      	mov	r3, r7
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	011a      	lsls	r2, r3, #4
 80089bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80089c0:	4413      	add	r3, r2
 80089c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80089c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80089c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d112      	bne.n	80089f6 <USB_EPStartXfer+0x8e2>
 80089d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80089d2:	881b      	ldrh	r3, [r3, #0]
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80089da:	b29a      	uxth	r2, r3
 80089dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80089de:	801a      	strh	r2, [r3, #0]
 80089e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80089e2:	881b      	ldrh	r3, [r3, #0]
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80089f2:	801a      	strh	r2, [r3, #0]
 80089f4:	e05d      	b.n	8008ab2 <USB_EPStartXfer+0x99e>
 80089f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089fa:	2b3e      	cmp	r3, #62	; 0x3e
 80089fc:	d817      	bhi.n	8008a2e <USB_EPStartXfer+0x91a>
 80089fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a02:	085b      	lsrs	r3, r3, #1
 8008a04:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008a08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a0c:	f003 0301 	and.w	r3, r3, #1
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d004      	beq.n	8008a1e <USB_EPStartXfer+0x90a>
 8008a14:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008a18:	3301      	adds	r3, #1
 8008a1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008a1e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	029b      	lsls	r3, r3, #10
 8008a26:	b29a      	uxth	r2, r3
 8008a28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a2a:	801a      	strh	r2, [r3, #0]
 8008a2c:	e041      	b.n	8008ab2 <USB_EPStartXfer+0x99e>
 8008a2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a32:	095b      	lsrs	r3, r3, #5
 8008a34:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a3c:	f003 031f 	and.w	r3, r3, #31
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d104      	bne.n	8008a4e <USB_EPStartXfer+0x93a>
 8008a44:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008a4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	029b      	lsls	r3, r3, #10
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a64:	801a      	strh	r2, [r3, #0]
 8008a66:	e024      	b.n	8008ab2 <USB_EPStartXfer+0x99e>
 8008a68:	463b      	mov	r3, r7
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	785b      	ldrb	r3, [r3, #1]
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d11f      	bne.n	8008ab2 <USB_EPStartXfer+0x99e>
 8008a72:	1d3b      	adds	r3, r7, #4
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008a7a:	1d3b      	adds	r3, r7, #4
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	461a      	mov	r2, r3
 8008a86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008a90:	463b      	mov	r3, r7
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	011a      	lsls	r2, r3, #4
 8008a98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008aa2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ab0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008ab2:	463b      	mov	r3, r7
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	891b      	ldrh	r3, [r3, #8]
 8008ab8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008abc:	463b      	mov	r3, r7
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6959      	ldr	r1, [r3, #20]
 8008ac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008acc:	1d38      	adds	r0, r7, #4
 8008ace:	6800      	ldr	r0, [r0, #0]
 8008ad0:	f000 fd7e 	bl	80095d0 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8008ad4:	463b      	mov	r3, r7
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	785b      	ldrb	r3, [r3, #1]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d122      	bne.n	8008b24 <USB_EPStartXfer+0xa10>
 8008ade:	1d3b      	adds	r3, r7, #4
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	463b      	mov	r3, r7
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	4413      	add	r3, r2
 8008aec:	881b      	ldrh	r3, [r3, #0]
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008af8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8008afc:	1d3b      	adds	r3, r7, #4
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	463b      	mov	r3, r7
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	441a      	add	r2, r3
 8008b0a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8008b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	8013      	strh	r3, [r2, #0]
 8008b22:	e026      	b.n	8008b72 <USB_EPStartXfer+0xa5e>
 8008b24:	463b      	mov	r3, r7
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	785b      	ldrb	r3, [r3, #1]
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d121      	bne.n	8008b72 <USB_EPStartXfer+0xa5e>
 8008b2e:	1d3b      	adds	r3, r7, #4
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	463b      	mov	r3, r7
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	881b      	ldrh	r3, [r3, #0]
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b48:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8008b4c:	1d3b      	adds	r3, r7, #4
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	463b      	mov	r3, r7
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	441a      	add	r2, r3
 8008b5a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8008b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008b72:	1d3b      	adds	r3, r7, #4
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	463b      	mov	r3, r7
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	4413      	add	r3, r2
 8008b80:	881b      	ldrh	r3, [r3, #0]
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	f107 020e 	add.w	r2, r7, #14
 8008b88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b90:	8013      	strh	r3, [r2, #0]
 8008b92:	f107 030e 	add.w	r3, r7, #14
 8008b96:	f107 020e 	add.w	r2, r7, #14
 8008b9a:	8812      	ldrh	r2, [r2, #0]
 8008b9c:	f082 0210 	eor.w	r2, r2, #16
 8008ba0:	801a      	strh	r2, [r3, #0]
 8008ba2:	f107 030e 	add.w	r3, r7, #14
 8008ba6:	f107 020e 	add.w	r2, r7, #14
 8008baa:	8812      	ldrh	r2, [r2, #0]
 8008bac:	f082 0220 	eor.w	r2, r2, #32
 8008bb0:	801a      	strh	r2, [r3, #0]
 8008bb2:	1d3b      	adds	r3, r7, #4
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	463b      	mov	r3, r7
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	441a      	add	r2, r3
 8008bc0:	f107 030e 	add.w	r3, r7, #14
 8008bc4:	881b      	ldrh	r3, [r3, #0]
 8008bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	8013      	strh	r3, [r2, #0]
 8008bda:	e3b5      	b.n	8009348 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008bdc:	463b      	mov	r3, r7
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	7b1b      	ldrb	r3, [r3, #12]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f040 8090 	bne.w	8008d08 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008be8:	463b      	mov	r3, r7
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	699a      	ldr	r2, [r3, #24]
 8008bee:	463b      	mov	r3, r7
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d90e      	bls.n	8008c16 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8008bf8:	463b      	mov	r3, r7
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8008c02:	463b      	mov	r3, r7
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	699a      	ldr	r2, [r3, #24]
 8008c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c0c:	1ad2      	subs	r2, r2, r3
 8008c0e:	463b      	mov	r3, r7
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	619a      	str	r2, [r3, #24]
 8008c14:	e008      	b.n	8008c28 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8008c16:	463b      	mov	r3, r7
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8008c20:	463b      	mov	r3, r7
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2200      	movs	r2, #0
 8008c26:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008c28:	1d3b      	adds	r3, r7, #4
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008c30:	1d3b      	adds	r3, r7, #4
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008c40:	4413      	add	r3, r2
 8008c42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008c46:	463b      	mov	r3, r7
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	011a      	lsls	r2, r3, #4
 8008c4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008c52:	4413      	add	r3, r2
 8008c54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d116      	bne.n	8008c92 <USB_EPStartXfer+0xb7e>
 8008c64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c68:	881b      	ldrh	r3, [r3, #0]
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c70:	b29a      	uxth	r2, r3
 8008c72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c76:	801a      	strh	r2, [r3, #0]
 8008c78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c7c:	881b      	ldrh	r3, [r3, #0]
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c8e:	801a      	strh	r2, [r3, #0]
 8008c90:	e32c      	b.n	80092ec <USB_EPStartXfer+0x11d8>
 8008c92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c96:	2b3e      	cmp	r3, #62	; 0x3e
 8008c98:	d818      	bhi.n	8008ccc <USB_EPStartXfer+0xbb8>
 8008c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c9e:	085b      	lsrs	r3, r3, #1
 8008ca0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ca8:	f003 0301 	and.w	r3, r3, #1
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d004      	beq.n	8008cba <USB_EPStartXfer+0xba6>
 8008cb0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008cba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	029b      	lsls	r3, r3, #10
 8008cc2:	b29a      	uxth	r2, r3
 8008cc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008cc8:	801a      	strh	r2, [r3, #0]
 8008cca:	e30f      	b.n	80092ec <USB_EPStartXfer+0x11d8>
 8008ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cd0:	095b      	lsrs	r3, r3, #5
 8008cd2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cda:	f003 031f 	and.w	r3, r3, #31
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d104      	bne.n	8008cec <USB_EPStartXfer+0xbd8>
 8008ce2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008ce6:	3b01      	subs	r3, #1
 8008ce8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008cec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	029b      	lsls	r3, r3, #10
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cfe:	b29a      	uxth	r2, r3
 8008d00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008d04:	801a      	strh	r2, [r3, #0]
 8008d06:	e2f1      	b.n	80092ec <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008d08:	463b      	mov	r3, r7
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	78db      	ldrb	r3, [r3, #3]
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	f040 818f 	bne.w	8009032 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008d14:	463b      	mov	r3, r7
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	785b      	ldrb	r3, [r3, #1]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d175      	bne.n	8008e0a <USB_EPStartXfer+0xcf6>
 8008d1e:	1d3b      	adds	r3, r7, #4
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d26:	1d3b      	adds	r3, r7, #4
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	461a      	mov	r2, r3
 8008d32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008d36:	4413      	add	r3, r2
 8008d38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d3c:	463b      	mov	r3, r7
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	011a      	lsls	r2, r3, #4
 8008d44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008d48:	4413      	add	r3, r2
 8008d4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d52:	463b      	mov	r3, r7
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d116      	bne.n	8008d8a <USB_EPStartXfer+0xc76>
 8008d5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d60:	881b      	ldrh	r3, [r3, #0]
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d68:	b29a      	uxth	r2, r3
 8008d6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d6e:	801a      	strh	r2, [r3, #0]
 8008d70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d74:	881b      	ldrh	r3, [r3, #0]
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d86:	801a      	strh	r2, [r3, #0]
 8008d88:	e065      	b.n	8008e56 <USB_EPStartXfer+0xd42>
 8008d8a:	463b      	mov	r3, r7
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	2b3e      	cmp	r3, #62	; 0x3e
 8008d92:	d81a      	bhi.n	8008dca <USB_EPStartXfer+0xcb6>
 8008d94:	463b      	mov	r3, r7
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	085b      	lsrs	r3, r3, #1
 8008d9c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008da0:	463b      	mov	r3, r7
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	f003 0301 	and.w	r3, r3, #1
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d004      	beq.n	8008db8 <USB_EPStartXfer+0xca4>
 8008dae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008db2:	3301      	adds	r3, #1
 8008db4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008db8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	029b      	lsls	r3, r3, #10
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008dc6:	801a      	strh	r2, [r3, #0]
 8008dc8:	e045      	b.n	8008e56 <USB_EPStartXfer+0xd42>
 8008dca:	463b      	mov	r3, r7
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	095b      	lsrs	r3, r3, #5
 8008dd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008dd6:	463b      	mov	r3, r7
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	f003 031f 	and.w	r3, r3, #31
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d104      	bne.n	8008dee <USB_EPStartXfer+0xcda>
 8008de4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008de8:	3b01      	subs	r3, #1
 8008dea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008dee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	029b      	lsls	r3, r3, #10
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e00:	b29a      	uxth	r2, r3
 8008e02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e06:	801a      	strh	r2, [r3, #0]
 8008e08:	e025      	b.n	8008e56 <USB_EPStartXfer+0xd42>
 8008e0a:	463b      	mov	r3, r7
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	785b      	ldrb	r3, [r3, #1]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d120      	bne.n	8008e56 <USB_EPStartXfer+0xd42>
 8008e14:	1d3b      	adds	r3, r7, #4
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e1c:	1d3b      	adds	r3, r7, #4
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	461a      	mov	r2, r3
 8008e28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e32:	463b      	mov	r3, r7
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	011a      	lsls	r2, r3, #4
 8008e3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e3e:	4413      	add	r3, r2
 8008e40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e48:	463b      	mov	r3, r7
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e54:	801a      	strh	r2, [r3, #0]
 8008e56:	1d3b      	adds	r3, r7, #4
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e5e:	463b      	mov	r3, r7
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	785b      	ldrb	r3, [r3, #1]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d175      	bne.n	8008f54 <USB_EPStartXfer+0xe40>
 8008e68:	1d3b      	adds	r3, r7, #4
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008e70:	1d3b      	adds	r3, r7, #4
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008e80:	4413      	add	r3, r2
 8008e82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008e86:	463b      	mov	r3, r7
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	011a      	lsls	r2, r3, #4
 8008e8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008e92:	4413      	add	r3, r2
 8008e94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008e98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e9c:	463b      	mov	r3, r7
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d116      	bne.n	8008ed4 <USB_EPStartXfer+0xdc0>
 8008ea6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008eaa:	881b      	ldrh	r3, [r3, #0]
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008eb8:	801a      	strh	r2, [r3, #0]
 8008eba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ebe:	881b      	ldrh	r3, [r3, #0]
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ec6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ed0:	801a      	strh	r2, [r3, #0]
 8008ed2:	e061      	b.n	8008f98 <USB_EPStartXfer+0xe84>
 8008ed4:	463b      	mov	r3, r7
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	2b3e      	cmp	r3, #62	; 0x3e
 8008edc:	d81a      	bhi.n	8008f14 <USB_EPStartXfer+0xe00>
 8008ede:	463b      	mov	r3, r7
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	085b      	lsrs	r3, r3, #1
 8008ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008eea:	463b      	mov	r3, r7
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	f003 0301 	and.w	r3, r3, #1
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d004      	beq.n	8008f02 <USB_EPStartXfer+0xdee>
 8008ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008efc:	3301      	adds	r3, #1
 8008efe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	029b      	lsls	r3, r3, #10
 8008f0a:	b29a      	uxth	r2, r3
 8008f0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f10:	801a      	strh	r2, [r3, #0]
 8008f12:	e041      	b.n	8008f98 <USB_EPStartXfer+0xe84>
 8008f14:	463b      	mov	r3, r7
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	095b      	lsrs	r3, r3, #5
 8008f1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008f20:	463b      	mov	r3, r7
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	f003 031f 	and.w	r3, r3, #31
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d104      	bne.n	8008f38 <USB_EPStartXfer+0xe24>
 8008f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f32:	3b01      	subs	r3, #1
 8008f34:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	029b      	lsls	r3, r3, #10
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f50:	801a      	strh	r2, [r3, #0]
 8008f52:	e021      	b.n	8008f98 <USB_EPStartXfer+0xe84>
 8008f54:	463b      	mov	r3, r7
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	785b      	ldrb	r3, [r3, #1]
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d11c      	bne.n	8008f98 <USB_EPStartXfer+0xe84>
 8008f5e:	1d3b      	adds	r3, r7, #4
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	461a      	mov	r2, r3
 8008f6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008f6e:	4413      	add	r3, r2
 8008f70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008f74:	463b      	mov	r3, r7
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	011a      	lsls	r2, r3, #4
 8008f7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008f80:	4413      	add	r3, r2
 8008f82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008f86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008f8a:	463b      	mov	r3, r7
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	691b      	ldr	r3, [r3, #16]
 8008f90:	b29a      	uxth	r2, r3
 8008f92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008f96:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008f98:	463b      	mov	r3, r7
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	69db      	ldr	r3, [r3, #28]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f000 81a4 	beq.w	80092ec <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008fa4:	1d3b      	adds	r3, r7, #4
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	463b      	mov	r3, r7
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	4413      	add	r3, r2
 8008fb2:	881b      	ldrh	r3, [r3, #0]
 8008fb4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008fb8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d005      	beq.n	8008fd0 <USB_EPStartXfer+0xebc>
 8008fc4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d10d      	bne.n	8008fec <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008fd0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	f040 8187 	bne.w	80092ec <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008fde:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f040 8180 	bne.w	80092ec <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008fec:	1d3b      	adds	r3, r7, #4
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	463b      	mov	r3, r7
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	4413      	add	r3, r2
 8008ffa:	881b      	ldrh	r3, [r3, #0]
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009006:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800900a:	1d3b      	adds	r3, r7, #4
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	463b      	mov	r3, r7
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	441a      	add	r2, r3
 8009018:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800901c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009028:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800902c:	b29b      	uxth	r3, r3
 800902e:	8013      	strh	r3, [r2, #0]
 8009030:	e15c      	b.n	80092ec <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009032:	463b      	mov	r3, r7
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	78db      	ldrb	r3, [r3, #3]
 8009038:	2b01      	cmp	r3, #1
 800903a:	f040 8155 	bne.w	80092e8 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800903e:	463b      	mov	r3, r7
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	699a      	ldr	r2, [r3, #24]
 8009044:	463b      	mov	r3, r7
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	429a      	cmp	r2, r3
 800904c:	d90e      	bls.n	800906c <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800904e:	463b      	mov	r3, r7
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8009058:	463b      	mov	r3, r7
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	699a      	ldr	r2, [r3, #24]
 800905e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009062:	1ad2      	subs	r2, r2, r3
 8009064:	463b      	mov	r3, r7
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	619a      	str	r2, [r3, #24]
 800906a:	e008      	b.n	800907e <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 800906c:	463b      	mov	r3, r7
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	699b      	ldr	r3, [r3, #24]
 8009072:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8009076:	463b      	mov	r3, r7
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2200      	movs	r2, #0
 800907c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800907e:	463b      	mov	r3, r7
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	785b      	ldrb	r3, [r3, #1]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d16f      	bne.n	8009168 <USB_EPStartXfer+0x1054>
 8009088:	1d3b      	adds	r3, r7, #4
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009090:	1d3b      	adds	r3, r7, #4
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009098:	b29b      	uxth	r3, r3
 800909a:	461a      	mov	r2, r3
 800909c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80090a0:	4413      	add	r3, r2
 80090a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80090a6:	463b      	mov	r3, r7
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	011a      	lsls	r2, r3, #4
 80090ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80090b2:	4413      	add	r3, r2
 80090b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80090b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80090bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d116      	bne.n	80090f2 <USB_EPStartXfer+0xfde>
 80090c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80090c8:	881b      	ldrh	r3, [r3, #0]
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80090d0:	b29a      	uxth	r2, r3
 80090d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80090d6:	801a      	strh	r2, [r3, #0]
 80090d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80090dc:	881b      	ldrh	r3, [r3, #0]
 80090de:	b29b      	uxth	r3, r3
 80090e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80090ee:	801a      	strh	r2, [r3, #0]
 80090f0:	e05f      	b.n	80091b2 <USB_EPStartXfer+0x109e>
 80090f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090f6:	2b3e      	cmp	r3, #62	; 0x3e
 80090f8:	d818      	bhi.n	800912c <USB_EPStartXfer+0x1018>
 80090fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090fe:	085b      	lsrs	r3, r3, #1
 8009100:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009104:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009108:	f003 0301 	and.w	r3, r3, #1
 800910c:	2b00      	cmp	r3, #0
 800910e:	d004      	beq.n	800911a <USB_EPStartXfer+0x1006>
 8009110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009114:	3301      	adds	r3, #1
 8009116:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800911a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800911e:	b29b      	uxth	r3, r3
 8009120:	029b      	lsls	r3, r3, #10
 8009122:	b29a      	uxth	r2, r3
 8009124:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009128:	801a      	strh	r2, [r3, #0]
 800912a:	e042      	b.n	80091b2 <USB_EPStartXfer+0x109e>
 800912c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009130:	095b      	lsrs	r3, r3, #5
 8009132:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009136:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800913a:	f003 031f 	and.w	r3, r3, #31
 800913e:	2b00      	cmp	r3, #0
 8009140:	d104      	bne.n	800914c <USB_EPStartXfer+0x1038>
 8009142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009146:	3b01      	subs	r3, #1
 8009148:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800914c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009150:	b29b      	uxth	r3, r3
 8009152:	029b      	lsls	r3, r3, #10
 8009154:	b29b      	uxth	r3, r3
 8009156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800915a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800915e:	b29a      	uxth	r2, r3
 8009160:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009164:	801a      	strh	r2, [r3, #0]
 8009166:	e024      	b.n	80091b2 <USB_EPStartXfer+0x109e>
 8009168:	463b      	mov	r3, r7
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	785b      	ldrb	r3, [r3, #1]
 800916e:	2b01      	cmp	r3, #1
 8009170:	d11f      	bne.n	80091b2 <USB_EPStartXfer+0x109e>
 8009172:	1d3b      	adds	r3, r7, #4
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800917a:	1d3b      	adds	r3, r7, #4
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009182:	b29b      	uxth	r3, r3
 8009184:	461a      	mov	r2, r3
 8009186:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800918a:	4413      	add	r3, r2
 800918c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009190:	463b      	mov	r3, r7
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	011a      	lsls	r2, r3, #4
 8009198:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800919c:	4413      	add	r3, r2
 800919e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80091a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80091a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80091b0:	801a      	strh	r2, [r3, #0]
 80091b2:	1d3b      	adds	r3, r7, #4
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80091ba:	463b      	mov	r3, r7
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	785b      	ldrb	r3, [r3, #1]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d16f      	bne.n	80092a4 <USB_EPStartXfer+0x1190>
 80091c4:	1d3b      	adds	r3, r7, #4
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80091cc:	1d3b      	adds	r3, r7, #4
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	461a      	mov	r2, r3
 80091d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80091dc:	4413      	add	r3, r2
 80091de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80091e2:	463b      	mov	r3, r7
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	011a      	lsls	r2, r3, #4
 80091ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80091ee:	4413      	add	r3, r2
 80091f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80091f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80091f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d116      	bne.n	800922e <USB_EPStartXfer+0x111a>
 8009200:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009204:	881b      	ldrh	r3, [r3, #0]
 8009206:	b29b      	uxth	r3, r3
 8009208:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800920c:	b29a      	uxth	r2, r3
 800920e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009212:	801a      	strh	r2, [r3, #0]
 8009214:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009218:	881b      	ldrh	r3, [r3, #0]
 800921a:	b29b      	uxth	r3, r3
 800921c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009224:	b29a      	uxth	r2, r3
 8009226:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800922a:	801a      	strh	r2, [r3, #0]
 800922c:	e05e      	b.n	80092ec <USB_EPStartXfer+0x11d8>
 800922e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009232:	2b3e      	cmp	r3, #62	; 0x3e
 8009234:	d818      	bhi.n	8009268 <USB_EPStartXfer+0x1154>
 8009236:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800923a:	085b      	lsrs	r3, r3, #1
 800923c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009240:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009244:	f003 0301 	and.w	r3, r3, #1
 8009248:	2b00      	cmp	r3, #0
 800924a:	d004      	beq.n	8009256 <USB_EPStartXfer+0x1142>
 800924c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009250:	3301      	adds	r3, #1
 8009252:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800925a:	b29b      	uxth	r3, r3
 800925c:	029b      	lsls	r3, r3, #10
 800925e:	b29a      	uxth	r2, r3
 8009260:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009264:	801a      	strh	r2, [r3, #0]
 8009266:	e041      	b.n	80092ec <USB_EPStartXfer+0x11d8>
 8009268:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800926c:	095b      	lsrs	r3, r3, #5
 800926e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009272:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009276:	f003 031f 	and.w	r3, r3, #31
 800927a:	2b00      	cmp	r3, #0
 800927c:	d104      	bne.n	8009288 <USB_EPStartXfer+0x1174>
 800927e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009282:	3b01      	subs	r3, #1
 8009284:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800928c:	b29b      	uxth	r3, r3
 800928e:	029b      	lsls	r3, r3, #10
 8009290:	b29b      	uxth	r3, r3
 8009292:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009296:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800929a:	b29a      	uxth	r2, r3
 800929c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80092a0:	801a      	strh	r2, [r3, #0]
 80092a2:	e023      	b.n	80092ec <USB_EPStartXfer+0x11d8>
 80092a4:	463b      	mov	r3, r7
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	785b      	ldrb	r3, [r3, #1]
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d11e      	bne.n	80092ec <USB_EPStartXfer+0x11d8>
 80092ae:	1d3b      	adds	r3, r7, #4
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	461a      	mov	r2, r3
 80092ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80092be:	4413      	add	r3, r2
 80092c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092c4:	463b      	mov	r3, r7
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	011a      	lsls	r2, r3, #4
 80092cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80092d0:	4413      	add	r3, r2
 80092d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80092d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80092da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092de:	b29a      	uxth	r2, r3
 80092e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80092e4:	801a      	strh	r2, [r3, #0]
 80092e6:	e001      	b.n	80092ec <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80092e8:	2301      	movs	r3, #1
 80092ea:	e02e      	b.n	800934a <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80092ec:	1d3b      	adds	r3, r7, #4
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	463b      	mov	r3, r7
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	4413      	add	r3, r2
 80092fa:	881b      	ldrh	r3, [r3, #0]
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009306:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800930a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800930e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009312:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009316:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800931a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800931e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009322:	1d3b      	adds	r3, r7, #4
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	463b      	mov	r3, r7
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	441a      	add	r2, r3
 8009330:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009334:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009338:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800933c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009344:	b29b      	uxth	r3, r3
 8009346:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009354:	b480      	push	{r7}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	785b      	ldrb	r3, [r3, #1]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d020      	beq.n	80093a8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	4413      	add	r3, r2
 8009370:	881b      	ldrh	r3, [r3, #0]
 8009372:	b29b      	uxth	r3, r3
 8009374:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800937c:	81bb      	strh	r3, [r7, #12]
 800937e:	89bb      	ldrh	r3, [r7, #12]
 8009380:	f083 0310 	eor.w	r3, r3, #16
 8009384:	81bb      	strh	r3, [r7, #12]
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	441a      	add	r2, r3
 8009390:	89bb      	ldrh	r3, [r7, #12]
 8009392:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009396:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800939a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800939e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	8013      	strh	r3, [r2, #0]
 80093a6:	e01f      	b.n	80093e8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	4413      	add	r3, r2
 80093b2:	881b      	ldrh	r3, [r3, #0]
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093be:	81fb      	strh	r3, [r7, #14]
 80093c0:	89fb      	ldrh	r3, [r7, #14]
 80093c2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80093c6:	81fb      	strh	r3, [r7, #14]
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	441a      	add	r2, r3
 80093d2:	89fb      	ldrh	r3, [r7, #14]
 80093d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3714      	adds	r7, #20
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bc80      	pop	{r7}
 80093f2:	4770      	bx	lr

080093f4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b087      	sub	sp, #28
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	7b1b      	ldrb	r3, [r3, #12]
 8009402:	2b00      	cmp	r3, #0
 8009404:	f040 809d 	bne.w	8009542 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	785b      	ldrb	r3, [r3, #1]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d04c      	beq.n	80094aa <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4413      	add	r3, r2
 800941a:	881b      	ldrh	r3, [r3, #0]
 800941c:	823b      	strh	r3, [r7, #16]
 800941e:	8a3b      	ldrh	r3, [r7, #16]
 8009420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009424:	2b00      	cmp	r3, #0
 8009426:	d01b      	beq.n	8009460 <USB_EPClearStall+0x6c>
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4413      	add	r3, r2
 8009432:	881b      	ldrh	r3, [r3, #0]
 8009434:	b29b      	uxth	r3, r3
 8009436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800943a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800943e:	81fb      	strh	r3, [r7, #14]
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	441a      	add	r2, r3
 800944a:	89fb      	ldrh	r3, [r7, #14]
 800944c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009458:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800945c:	b29b      	uxth	r3, r3
 800945e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	78db      	ldrb	r3, [r3, #3]
 8009464:	2b01      	cmp	r3, #1
 8009466:	d06c      	beq.n	8009542 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4413      	add	r3, r2
 8009472:	881b      	ldrh	r3, [r3, #0]
 8009474:	b29b      	uxth	r3, r3
 8009476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800947a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800947e:	81bb      	strh	r3, [r7, #12]
 8009480:	89bb      	ldrh	r3, [r7, #12]
 8009482:	f083 0320 	eor.w	r3, r3, #32
 8009486:	81bb      	strh	r3, [r7, #12]
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	441a      	add	r2, r3
 8009492:	89bb      	ldrh	r3, [r7, #12]
 8009494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800949c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	8013      	strh	r3, [r2, #0]
 80094a8:	e04b      	b.n	8009542 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	4413      	add	r3, r2
 80094b4:	881b      	ldrh	r3, [r3, #0]
 80094b6:	82fb      	strh	r3, [r7, #22]
 80094b8:	8afb      	ldrh	r3, [r7, #22]
 80094ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d01b      	beq.n	80094fa <USB_EPClearStall+0x106>
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4413      	add	r3, r2
 80094cc:	881b      	ldrh	r3, [r3, #0]
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094d8:	82bb      	strh	r3, [r7, #20]
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	441a      	add	r2, r3
 80094e4:	8abb      	ldrh	r3, [r7, #20]
 80094e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80094f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	4413      	add	r3, r2
 8009504:	881b      	ldrh	r3, [r3, #0]
 8009506:	b29b      	uxth	r3, r3
 8009508:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800950c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009510:	827b      	strh	r3, [r7, #18]
 8009512:	8a7b      	ldrh	r3, [r7, #18]
 8009514:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009518:	827b      	strh	r3, [r7, #18]
 800951a:	8a7b      	ldrh	r3, [r7, #18]
 800951c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009520:	827b      	strh	r3, [r7, #18]
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	441a      	add	r2, r3
 800952c:	8a7b      	ldrh	r3, [r7, #18]
 800952e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800953a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800953e:	b29b      	uxth	r3, r3
 8009540:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	371c      	adds	r7, #28
 8009548:	46bd      	mov	sp, r7
 800954a:	bc80      	pop	{r7}
 800954c:	4770      	bx	lr

0800954e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800954e:	b480      	push	{r7}
 8009550:	b083      	sub	sp, #12
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
 8009556:	460b      	mov	r3, r1
 8009558:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800955a:	78fb      	ldrb	r3, [r7, #3]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d103      	bne.n	8009568 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2280      	movs	r2, #128	; 0x80
 8009564:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009568:	2300      	movs	r3, #0
}
 800956a:	4618      	mov	r0, r3
 800956c:	370c      	adds	r7, #12
 800956e:	46bd      	mov	sp, r7
 8009570:	bc80      	pop	{r7}
 8009572:	4770      	bx	lr

08009574 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	370c      	adds	r7, #12
 8009582:	46bd      	mov	sp, r7
 8009584:	bc80      	pop	{r7}
 8009586:	4770      	bx	lr

08009588 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	4618      	mov	r0, r3
 8009594:	370c      	adds	r7, #12
 8009596:	46bd      	mov	sp, r7
 8009598:	bc80      	pop	{r7}
 800959a:	4770      	bx	lr

0800959c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800959c:	b480      	push	{r7}
 800959e:	b085      	sub	sp, #20
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80095ae:	68fb      	ldr	r3, [r7, #12]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3714      	adds	r7, #20
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bc80      	pop	{r7}
 80095b8:	4770      	bx	lr

080095ba <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80095ba:	b480      	push	{r7}
 80095bc:	b083      	sub	sp, #12
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
 80095c2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bc80      	pop	{r7}
 80095ce:	4770      	bx	lr

080095d0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b08d      	sub	sp, #52	; 0x34
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	4611      	mov	r1, r2
 80095dc:	461a      	mov	r2, r3
 80095de:	460b      	mov	r3, r1
 80095e0:	80fb      	strh	r3, [r7, #6]
 80095e2:	4613      	mov	r3, r2
 80095e4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80095e6:	88bb      	ldrh	r3, [r7, #4]
 80095e8:	3301      	adds	r3, #1
 80095ea:	085b      	lsrs	r3, r3, #1
 80095ec:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80095f6:	88fb      	ldrh	r3, [r7, #6]
 80095f8:	005a      	lsls	r2, r3, #1
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	4413      	add	r3, r2
 80095fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009602:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009604:	6a3b      	ldr	r3, [r7, #32]
 8009606:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009608:	e01e      	b.n	8009648 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800960a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009612:	3301      	adds	r3, #1
 8009614:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	b29b      	uxth	r3, r3
 800961c:	021b      	lsls	r3, r3, #8
 800961e:	b29b      	uxth	r3, r3
 8009620:	461a      	mov	r2, r3
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	4313      	orrs	r3, r2
 8009626:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	b29a      	uxth	r2, r3
 800962c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009632:	3302      	adds	r3, #2
 8009634:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009638:	3302      	adds	r3, #2
 800963a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800963c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963e:	3301      	adds	r3, #1
 8009640:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009644:	3b01      	subs	r3, #1
 8009646:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800964a:	2b00      	cmp	r3, #0
 800964c:	d1dd      	bne.n	800960a <USB_WritePMA+0x3a>
  }
}
 800964e:	bf00      	nop
 8009650:	bf00      	nop
 8009652:	3734      	adds	r7, #52	; 0x34
 8009654:	46bd      	mov	sp, r7
 8009656:	bc80      	pop	{r7}
 8009658:	4770      	bx	lr

0800965a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800965a:	b480      	push	{r7}
 800965c:	b08b      	sub	sp, #44	; 0x2c
 800965e:	af00      	add	r7, sp, #0
 8009660:	60f8      	str	r0, [r7, #12]
 8009662:	60b9      	str	r1, [r7, #8]
 8009664:	4611      	mov	r1, r2
 8009666:	461a      	mov	r2, r3
 8009668:	460b      	mov	r3, r1
 800966a:	80fb      	strh	r3, [r7, #6]
 800966c:	4613      	mov	r3, r2
 800966e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009670:	88bb      	ldrh	r3, [r7, #4]
 8009672:	085b      	lsrs	r3, r3, #1
 8009674:	b29b      	uxth	r3, r3
 8009676:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009680:	88fb      	ldrh	r3, [r7, #6]
 8009682:	005a      	lsls	r2, r3, #1
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	4413      	add	r3, r2
 8009688:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800968c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	627b      	str	r3, [r7, #36]	; 0x24
 8009692:	e01b      	b.n	80096cc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009694:	6a3b      	ldr	r3, [r7, #32]
 8009696:	881b      	ldrh	r3, [r3, #0]
 8009698:	b29b      	uxth	r3, r3
 800969a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800969c:	6a3b      	ldr	r3, [r7, #32]
 800969e:	3302      	adds	r3, #2
 80096a0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	b2da      	uxtb	r2, r3
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	3301      	adds	r3, #1
 80096ae:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	0a1b      	lsrs	r3, r3, #8
 80096b4:	b2da      	uxtb	r2, r3
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	3301      	adds	r3, #1
 80096be:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80096c0:	6a3b      	ldr	r3, [r7, #32]
 80096c2:	3302      	adds	r3, #2
 80096c4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80096c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c8:	3b01      	subs	r3, #1
 80096ca:	627b      	str	r3, [r7, #36]	; 0x24
 80096cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d1e0      	bne.n	8009694 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80096d2:	88bb      	ldrh	r3, [r7, #4]
 80096d4:	f003 0301 	and.w	r3, r3, #1
 80096d8:	b29b      	uxth	r3, r3
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d007      	beq.n	80096ee <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80096de:	6a3b      	ldr	r3, [r7, #32]
 80096e0:	881b      	ldrh	r3, [r3, #0]
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	b2da      	uxtb	r2, r3
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	701a      	strb	r2, [r3, #0]
  }
}
 80096ee:	bf00      	nop
 80096f0:	372c      	adds	r7, #44	; 0x2c
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bc80      	pop	{r7}
 80096f6:	4770      	bx	lr

080096f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	460b      	mov	r3, r1
 8009702:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009704:	2300      	movs	r3, #0
 8009706:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	7c1b      	ldrb	r3, [r3, #16]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d115      	bne.n	800973c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009714:	2202      	movs	r2, #2
 8009716:	2181      	movs	r1, #129	; 0x81
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f001 fe8a 	bl	800b432 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2201      	movs	r2, #1
 8009722:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009728:	2202      	movs	r2, #2
 800972a:	2101      	movs	r1, #1
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f001 fe80 	bl	800b432 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2201      	movs	r2, #1
 8009736:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800973a:	e012      	b.n	8009762 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800973c:	2340      	movs	r3, #64	; 0x40
 800973e:	2202      	movs	r2, #2
 8009740:	2181      	movs	r1, #129	; 0x81
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f001 fe75 	bl	800b432 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800974e:	2340      	movs	r3, #64	; 0x40
 8009750:	2202      	movs	r2, #2
 8009752:	2101      	movs	r1, #1
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f001 fe6c 	bl	800b432 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2201      	movs	r2, #1
 800975e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009762:	2308      	movs	r3, #8
 8009764:	2203      	movs	r2, #3
 8009766:	2182      	movs	r1, #130	; 0x82
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f001 fe62 	bl	800b432 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2201      	movs	r2, #1
 8009772:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009774:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009778:	f001 ff82 	bl	800b680 <USBD_static_malloc>
 800977c:	4602      	mov	r2, r0
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800978a:	2b00      	cmp	r3, #0
 800978c:	d102      	bne.n	8009794 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800978e:	2301      	movs	r3, #1
 8009790:	73fb      	strb	r3, [r7, #15]
 8009792:	e026      	b.n	80097e2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800979a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	7c1b      	ldrb	r3, [r3, #16]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d109      	bne.n	80097d2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80097c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097c8:	2101      	movs	r1, #1
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f001 ff22 	bl	800b614 <USBD_LL_PrepareReceive>
 80097d0:	e007      	b.n	80097e2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80097d8:	2340      	movs	r3, #64	; 0x40
 80097da:	2101      	movs	r1, #1
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f001 ff19 	bl	800b614 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80097e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3710      	adds	r7, #16
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	460b      	mov	r3, r1
 80097f6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80097f8:	2300      	movs	r3, #0
 80097fa:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80097fc:	2181      	movs	r1, #129	; 0x81
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f001 fe3d 	bl	800b47e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800980a:	2101      	movs	r1, #1
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f001 fe36 	bl	800b47e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800981a:	2182      	movs	r1, #130	; 0x82
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f001 fe2e 	bl	800b47e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800982e:	2b00      	cmp	r3, #0
 8009830:	d00e      	beq.n	8009850 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009842:	4618      	mov	r0, r3
 8009844:	f001 ff28 	bl	800b698 <USBD_static_free>
    pdev->pClassData = NULL;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009850:	7bfb      	ldrb	r3, [r7, #15]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b086      	sub	sp, #24
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
 8009862:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800986a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800986c:	2300      	movs	r3, #0
 800986e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009870:	2300      	movs	r3, #0
 8009872:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009874:	2300      	movs	r3, #0
 8009876:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009880:	2b00      	cmp	r3, #0
 8009882:	d039      	beq.n	80098f8 <USBD_CDC_Setup+0x9e>
 8009884:	2b20      	cmp	r3, #32
 8009886:	d17f      	bne.n	8009988 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	88db      	ldrh	r3, [r3, #6]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d029      	beq.n	80098e4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	b25b      	sxtb	r3, r3
 8009896:	2b00      	cmp	r3, #0
 8009898:	da11      	bge.n	80098be <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	683a      	ldr	r2, [r7, #0]
 80098a4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80098a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80098a8:	683a      	ldr	r2, [r7, #0]
 80098aa:	88d2      	ldrh	r2, [r2, #6]
 80098ac:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80098ae:	6939      	ldr	r1, [r7, #16]
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	88db      	ldrh	r3, [r3, #6]
 80098b4:	461a      	mov	r2, r3
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f001 fa09 	bl	800acce <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80098bc:	e06b      	b.n	8009996 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	785a      	ldrb	r2, [r3, #1]
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	88db      	ldrh	r3, [r3, #6]
 80098cc:	b2da      	uxtb	r2, r3
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80098d4:	6939      	ldr	r1, [r7, #16]
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	88db      	ldrh	r3, [r3, #6]
 80098da:	461a      	mov	r2, r3
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f001 fa24 	bl	800ad2a <USBD_CtlPrepareRx>
      break;
 80098e2:	e058      	b.n	8009996 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	683a      	ldr	r2, [r7, #0]
 80098ee:	7850      	ldrb	r0, [r2, #1]
 80098f0:	2200      	movs	r2, #0
 80098f2:	6839      	ldr	r1, [r7, #0]
 80098f4:	4798      	blx	r3
      break;
 80098f6:	e04e      	b.n	8009996 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	785b      	ldrb	r3, [r3, #1]
 80098fc:	2b0b      	cmp	r3, #11
 80098fe:	d02e      	beq.n	800995e <USBD_CDC_Setup+0x104>
 8009900:	2b0b      	cmp	r3, #11
 8009902:	dc38      	bgt.n	8009976 <USBD_CDC_Setup+0x11c>
 8009904:	2b00      	cmp	r3, #0
 8009906:	d002      	beq.n	800990e <USBD_CDC_Setup+0xb4>
 8009908:	2b0a      	cmp	r3, #10
 800990a:	d014      	beq.n	8009936 <USBD_CDC_Setup+0xdc>
 800990c:	e033      	b.n	8009976 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009914:	2b03      	cmp	r3, #3
 8009916:	d107      	bne.n	8009928 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009918:	f107 030c 	add.w	r3, r7, #12
 800991c:	2202      	movs	r2, #2
 800991e:	4619      	mov	r1, r3
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f001 f9d4 	bl	800acce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009926:	e02e      	b.n	8009986 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009928:	6839      	ldr	r1, [r7, #0]
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f001 f965 	bl	800abfa <USBD_CtlError>
            ret = USBD_FAIL;
 8009930:	2302      	movs	r3, #2
 8009932:	75fb      	strb	r3, [r7, #23]
          break;
 8009934:	e027      	b.n	8009986 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800993c:	2b03      	cmp	r3, #3
 800993e:	d107      	bne.n	8009950 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009940:	f107 030f 	add.w	r3, r7, #15
 8009944:	2201      	movs	r2, #1
 8009946:	4619      	mov	r1, r3
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f001 f9c0 	bl	800acce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800994e:	e01a      	b.n	8009986 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009950:	6839      	ldr	r1, [r7, #0]
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f001 f951 	bl	800abfa <USBD_CtlError>
            ret = USBD_FAIL;
 8009958:	2302      	movs	r3, #2
 800995a:	75fb      	strb	r3, [r7, #23]
          break;
 800995c:	e013      	b.n	8009986 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009964:	2b03      	cmp	r3, #3
 8009966:	d00d      	beq.n	8009984 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009968:	6839      	ldr	r1, [r7, #0]
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f001 f945 	bl	800abfa <USBD_CtlError>
            ret = USBD_FAIL;
 8009970:	2302      	movs	r3, #2
 8009972:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009974:	e006      	b.n	8009984 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009976:	6839      	ldr	r1, [r7, #0]
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f001 f93e 	bl	800abfa <USBD_CtlError>
          ret = USBD_FAIL;
 800997e:	2302      	movs	r3, #2
 8009980:	75fb      	strb	r3, [r7, #23]
          break;
 8009982:	e000      	b.n	8009986 <USBD_CDC_Setup+0x12c>
          break;
 8009984:	bf00      	nop
      }
      break;
 8009986:	e006      	b.n	8009996 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009988:	6839      	ldr	r1, [r7, #0]
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f001 f935 	bl	800abfa <USBD_CtlError>
      ret = USBD_FAIL;
 8009990:	2302      	movs	r3, #2
 8009992:	75fb      	strb	r3, [r7, #23]
      break;
 8009994:	bf00      	nop
  }

  return ret;
 8009996:	7dfb      	ldrb	r3, [r7, #23]
}
 8009998:	4618      	mov	r0, r3
 800999a:	3718      	adds	r7, #24
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	460b      	mov	r3, r1
 80099aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099b2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099ba:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d03a      	beq.n	8009a3c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80099c6:	78fa      	ldrb	r2, [r7, #3]
 80099c8:	6879      	ldr	r1, [r7, #4]
 80099ca:	4613      	mov	r3, r2
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	4413      	add	r3, r2
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	440b      	add	r3, r1
 80099d4:	331c      	adds	r3, #28
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d029      	beq.n	8009a30 <USBD_CDC_DataIn+0x90>
 80099dc:	78fa      	ldrb	r2, [r7, #3]
 80099de:	6879      	ldr	r1, [r7, #4]
 80099e0:	4613      	mov	r3, r2
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	4413      	add	r3, r2
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	440b      	add	r3, r1
 80099ea:	331c      	adds	r3, #28
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	78f9      	ldrb	r1, [r7, #3]
 80099f0:	68b8      	ldr	r0, [r7, #8]
 80099f2:	460b      	mov	r3, r1
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	440b      	add	r3, r1
 80099f8:	00db      	lsls	r3, r3, #3
 80099fa:	4403      	add	r3, r0
 80099fc:	3338      	adds	r3, #56	; 0x38
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	fbb2 f1f3 	udiv	r1, r2, r3
 8009a04:	fb03 f301 	mul.w	r3, r3, r1
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d110      	bne.n	8009a30 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009a0e:	78fa      	ldrb	r2, [r7, #3]
 8009a10:	6879      	ldr	r1, [r7, #4]
 8009a12:	4613      	mov	r3, r2
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	4413      	add	r3, r2
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	440b      	add	r3, r1
 8009a1c:	331c      	adds	r3, #28
 8009a1e:	2200      	movs	r2, #0
 8009a20:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009a22:	78f9      	ldrb	r1, [r7, #3]
 8009a24:	2300      	movs	r3, #0
 8009a26:	2200      	movs	r2, #0
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f001 fdd0 	bl	800b5ce <USBD_LL_Transmit>
 8009a2e:	e003      	b.n	8009a38 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	e000      	b.n	8009a3e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009a3c:	2302      	movs	r3, #2
  }
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b084      	sub	sp, #16
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
 8009a4e:	460b      	mov	r3, r1
 8009a50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a58:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009a5a:	78fb      	ldrb	r3, [r7, #3]
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f001 fdfb 	bl	800b65a <USBD_LL_GetRxDataSize>
 8009a64:	4602      	mov	r2, r0
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d00d      	beq.n	8009a92 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	68fa      	ldr	r2, [r7, #12]
 8009a80:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009a84:	68fa      	ldr	r2, [r7, #12]
 8009a86:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009a8a:	4611      	mov	r1, r2
 8009a8c:	4798      	blx	r3

    return USBD_OK;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	e000      	b.n	8009a94 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009a92:	2302      	movs	r3, #2
  }
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aaa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d015      	beq.n	8009ae2 <USBD_CDC_EP0_RxReady+0x46>
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009abc:	2bff      	cmp	r3, #255	; 0xff
 8009abe:	d010      	beq.n	8009ae2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009ace:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009ad6:	b292      	uxth	r2, r2
 8009ad8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	22ff      	movs	r2, #255	; 0xff
 8009ade:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2243      	movs	r2, #67	; 0x43
 8009af8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009afa:	4b03      	ldr	r3, [pc, #12]	; (8009b08 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bc80      	pop	{r7}
 8009b04:	4770      	bx	lr
 8009b06:	bf00      	nop
 8009b08:	200000a8 	.word	0x200000a8

08009b0c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2243      	movs	r2, #67	; 0x43
 8009b18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009b1a:	4b03      	ldr	r3, [pc, #12]	; (8009b28 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bc80      	pop	{r7}
 8009b24:	4770      	bx	lr
 8009b26:	bf00      	nop
 8009b28:	20000064 	.word	0x20000064

08009b2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2243      	movs	r2, #67	; 0x43
 8009b38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009b3a:	4b03      	ldr	r3, [pc, #12]	; (8009b48 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bc80      	pop	{r7}
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
 8009b48:	200000ec 	.word	0x200000ec

08009b4c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	220a      	movs	r2, #10
 8009b58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009b5a:	4b03      	ldr	r3, [pc, #12]	; (8009b68 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bc80      	pop	{r7}
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
 8009b68:	20000020 	.word	0x20000020

08009b6c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b085      	sub	sp, #20
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009b76:	2302      	movs	r3, #2
 8009b78:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d005      	beq.n	8009b8c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	683a      	ldr	r2, [r7, #0]
 8009b84:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3714      	adds	r7, #20
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bc80      	pop	{r7}
 8009b96:	4770      	bx	lr

08009b98 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b087      	sub	sp, #28
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bac:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	68ba      	ldr	r2, [r7, #8]
 8009bb2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009bb6:	88fa      	ldrh	r2, [r7, #6]
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009bbe:	2300      	movs	r3, #0
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	371c      	adds	r7, #28
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bc80      	pop	{r7}
 8009bc8:	4770      	bx	lr

08009bca <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009bca:	b480      	push	{r7}
 8009bcc:	b085      	sub	sp, #20
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
 8009bd2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bda:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	683a      	ldr	r2, [r7, #0]
 8009be0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3714      	adds	r7, #20
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bc80      	pop	{r7}
 8009bee:	4770      	bx	lr

08009bf0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bfe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d01c      	beq.n	8009c44 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d115      	bne.n	8009c40 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	2181      	movs	r1, #129	; 0x81
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f001 fcc9 	bl	800b5ce <USBD_LL_Transmit>

      return USBD_OK;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	e002      	b.n	8009c46 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009c40:	2301      	movs	r3, #1
 8009c42:	e000      	b.n	8009c46 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009c44:	2302      	movs	r3, #2
  }
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3710      	adds	r7, #16
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b084      	sub	sp, #16
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c5c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d017      	beq.n	8009c98 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	7c1b      	ldrb	r3, [r3, #16]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d109      	bne.n	8009c84 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c7a:	2101      	movs	r1, #1
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f001 fcc9 	bl	800b614 <USBD_LL_PrepareReceive>
 8009c82:	e007      	b.n	8009c94 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c8a:	2340      	movs	r3, #64	; 0x40
 8009c8c:	2101      	movs	r1, #1
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f001 fcc0 	bl	800b614 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009c94:	2300      	movs	r3, #0
 8009c96:	e000      	b.n	8009c9a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009c98:	2302      	movs	r3, #2
  }
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3710      	adds	r7, #16
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	b084      	sub	sp, #16
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	60f8      	str	r0, [r7, #12]
 8009caa:	60b9      	str	r1, [r7, #8]
 8009cac:	4613      	mov	r3, r2
 8009cae:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d101      	bne.n	8009cba <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009cb6:	2302      	movs	r3, #2
 8009cb8:	e01a      	b.n	8009cf0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d003      	beq.n	8009ccc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d003      	beq.n	8009cda <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	68ba      	ldr	r2, [r7, #8]
 8009cd6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	79fa      	ldrb	r2, [r7, #7]
 8009ce6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009ce8:	68f8      	ldr	r0, [r7, #12]
 8009cea:	f001 fb2d 	bl	800b348 <USBD_LL_Init>

  return USBD_OK;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b085      	sub	sp, #20
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009d02:	2300      	movs	r3, #0
 8009d04:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d006      	beq.n	8009d1a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	683a      	ldr	r2, [r7, #0]
 8009d10:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009d14:	2300      	movs	r3, #0
 8009d16:	73fb      	strb	r3, [r7, #15]
 8009d18:	e001      	b.n	8009d1e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009d1a:	2302      	movs	r3, #2
 8009d1c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3714      	adds	r7, #20
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bc80      	pop	{r7}
 8009d28:	4770      	bx	lr

08009d2a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b082      	sub	sp, #8
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f001 fb62 	bl	800b3fc <USBD_LL_Start>

  return USBD_OK;
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3708      	adds	r7, #8
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009d42:	b480      	push	{r7}
 8009d44:	b083      	sub	sp, #12
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d4a:	2300      	movs	r3, #0
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bc80      	pop	{r7}
 8009d54:	4770      	bx	lr

08009d56 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	b084      	sub	sp, #16
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
 8009d5e:	460b      	mov	r3, r1
 8009d60:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009d62:	2302      	movs	r3, #2
 8009d64:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d00c      	beq.n	8009d8a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	78fa      	ldrb	r2, [r7, #3]
 8009d7a:	4611      	mov	r1, r2
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	4798      	blx	r3
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d101      	bne.n	8009d8a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009d86:	2300      	movs	r3, #0
 8009d88:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3710      	adds	r7, #16
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	78fa      	ldrb	r2, [r7, #3]
 8009daa:	4611      	mov	r1, r2
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	4798      	blx	r3

  return USBD_OK;
 8009db0:	2300      	movs	r3, #0
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3708      	adds	r7, #8
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b082      	sub	sp, #8
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
 8009dc2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f000 fed8 	bl	800ab82 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009de0:	461a      	mov	r2, r3
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009dee:	f003 031f 	and.w	r3, r3, #31
 8009df2:	2b02      	cmp	r3, #2
 8009df4:	d016      	beq.n	8009e24 <USBD_LL_SetupStage+0x6a>
 8009df6:	2b02      	cmp	r3, #2
 8009df8:	d81c      	bhi.n	8009e34 <USBD_LL_SetupStage+0x7a>
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d002      	beq.n	8009e04 <USBD_LL_SetupStage+0x4a>
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d008      	beq.n	8009e14 <USBD_LL_SetupStage+0x5a>
 8009e02:	e017      	b.n	8009e34 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 f9cb 	bl	800a1a8 <USBD_StdDevReq>
      break;
 8009e12:	e01a      	b.n	8009e4a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 fa2d 	bl	800a27c <USBD_StdItfReq>
      break;
 8009e22:	e012      	b.n	8009e4a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 fa6d 	bl	800a30c <USBD_StdEPReq>
      break;
 8009e32:	e00a      	b.n	8009e4a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009e3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009e3e:	b2db      	uxtb	r3, r3
 8009e40:	4619      	mov	r1, r3
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f001 fb3a 	bl	800b4bc <USBD_LL_StallEP>
      break;
 8009e48:	bf00      	nop
  }

  return USBD_OK;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3708      	adds	r7, #8
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b086      	sub	sp, #24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	607a      	str	r2, [r7, #4]
 8009e60:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009e62:	7afb      	ldrb	r3, [r7, #11]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d14b      	bne.n	8009f00 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009e6e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e76:	2b03      	cmp	r3, #3
 8009e78:	d134      	bne.n	8009ee4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	68da      	ldr	r2, [r3, #12]
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d919      	bls.n	8009eba <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	68da      	ldr	r2, [r3, #12]
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	691b      	ldr	r3, [r3, #16]
 8009e8e:	1ad2      	subs	r2, r2, r3
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	68da      	ldr	r2, [r3, #12]
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d203      	bcs.n	8009ea8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	e002      	b.n	8009eae <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	461a      	mov	r2, r3
 8009eb0:	6879      	ldr	r1, [r7, #4]
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	f000 ff57 	bl	800ad66 <USBD_CtlContinueRx>
 8009eb8:	e038      	b.n	8009f2c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00a      	beq.n	8009edc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009ecc:	2b03      	cmp	r3, #3
 8009ece:	d105      	bne.n	8009edc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ed6:	691b      	ldr	r3, [r3, #16]
 8009ed8:	68f8      	ldr	r0, [r7, #12]
 8009eda:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009edc:	68f8      	ldr	r0, [r7, #12]
 8009ede:	f000 ff54 	bl	800ad8a <USBD_CtlSendStatus>
 8009ee2:	e023      	b.n	8009f2c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009eea:	2b05      	cmp	r3, #5
 8009eec:	d11e      	bne.n	8009f2c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009ef6:	2100      	movs	r1, #0
 8009ef8:	68f8      	ldr	r0, [r7, #12]
 8009efa:	f001 fadf 	bl	800b4bc <USBD_LL_StallEP>
 8009efe:	e015      	b.n	8009f2c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f06:	699b      	ldr	r3, [r3, #24]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d00d      	beq.n	8009f28 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009f12:	2b03      	cmp	r3, #3
 8009f14:	d108      	bne.n	8009f28 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f1c:	699b      	ldr	r3, [r3, #24]
 8009f1e:	7afa      	ldrb	r2, [r7, #11]
 8009f20:	4611      	mov	r1, r2
 8009f22:	68f8      	ldr	r0, [r7, #12]
 8009f24:	4798      	blx	r3
 8009f26:	e001      	b.n	8009f2c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009f28:	2302      	movs	r3, #2
 8009f2a:	e000      	b.n	8009f2e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3718      	adds	r7, #24
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b086      	sub	sp, #24
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	60f8      	str	r0, [r7, #12]
 8009f3e:	460b      	mov	r3, r1
 8009f40:	607a      	str	r2, [r7, #4]
 8009f42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009f44:	7afb      	ldrb	r3, [r7, #11]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d17f      	bne.n	800a04a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	3314      	adds	r3, #20
 8009f4e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	d15c      	bne.n	800a014 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	68da      	ldr	r2, [r3, #12]
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d915      	bls.n	8009f92 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	68da      	ldr	r2, [r3, #12]
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	691b      	ldr	r3, [r3, #16]
 8009f6e:	1ad2      	subs	r2, r2, r3
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	6879      	ldr	r1, [r7, #4]
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	f000 fec1 	bl	800ad06 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f84:	2300      	movs	r3, #0
 8009f86:	2200      	movs	r2, #0
 8009f88:	2100      	movs	r1, #0
 8009f8a:	68f8      	ldr	r0, [r7, #12]
 8009f8c:	f001 fb42 	bl	800b614 <USBD_LL_PrepareReceive>
 8009f90:	e04e      	b.n	800a030 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	689b      	ldr	r3, [r3, #8]
 8009f96:	697a      	ldr	r2, [r7, #20]
 8009f98:	6912      	ldr	r2, [r2, #16]
 8009f9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f9e:	fb02 f201 	mul.w	r2, r2, r1
 8009fa2:	1a9b      	subs	r3, r3, r2
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d11c      	bne.n	8009fe2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	689a      	ldr	r2, [r3, #8]
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d316      	bcc.n	8009fe2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	689a      	ldr	r2, [r3, #8]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d20f      	bcs.n	8009fe2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	2100      	movs	r1, #0
 8009fc6:	68f8      	ldr	r0, [r7, #12]
 8009fc8:	f000 fe9d 	bl	800ad06 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	2100      	movs	r1, #0
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	f001 fb1a 	bl	800b614 <USBD_LL_PrepareReceive>
 8009fe0:	e026      	b.n	800a030 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d00a      	beq.n	800a004 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009ff4:	2b03      	cmp	r3, #3
 8009ff6:	d105      	bne.n	800a004 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a004:	2180      	movs	r1, #128	; 0x80
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f001 fa58 	bl	800b4bc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a00c:	68f8      	ldr	r0, [r7, #12]
 800a00e:	f000 fecf 	bl	800adb0 <USBD_CtlReceiveStatus>
 800a012:	e00d      	b.n	800a030 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a01a:	2b04      	cmp	r3, #4
 800a01c:	d004      	beq.n	800a028 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a024:	2b00      	cmp	r3, #0
 800a026:	d103      	bne.n	800a030 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a028:	2180      	movs	r1, #128	; 0x80
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	f001 fa46 	bl	800b4bc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a036:	2b01      	cmp	r3, #1
 800a038:	d11d      	bne.n	800a076 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a03a:	68f8      	ldr	r0, [r7, #12]
 800a03c:	f7ff fe81 	bl	8009d42 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2200      	movs	r2, #0
 800a044:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a048:	e015      	b.n	800a076 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a050:	695b      	ldr	r3, [r3, #20]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d00d      	beq.n	800a072 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a05c:	2b03      	cmp	r3, #3
 800a05e:	d108      	bne.n	800a072 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a066:	695b      	ldr	r3, [r3, #20]
 800a068:	7afa      	ldrb	r2, [r7, #11]
 800a06a:	4611      	mov	r1, r2
 800a06c:	68f8      	ldr	r0, [r7, #12]
 800a06e:	4798      	blx	r3
 800a070:	e001      	b.n	800a076 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a072:	2302      	movs	r3, #2
 800a074:	e000      	b.n	800a078 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3718      	adds	r7, #24
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a088:	2340      	movs	r3, #64	; 0x40
 800a08a:	2200      	movs	r2, #0
 800a08c:	2100      	movs	r1, #0
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f001 f9cf 	bl	800b432 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2201      	movs	r2, #1
 800a098:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2240      	movs	r2, #64	; 0x40
 800a0a0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a0a4:	2340      	movs	r3, #64	; 0x40
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	2180      	movs	r1, #128	; 0x80
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f001 f9c1 	bl	800b432 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2240      	movs	r2, #64	; 0x40
 800a0ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d009      	beq.n	800a0f8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	6852      	ldr	r2, [r2, #4]
 800a0f0:	b2d2      	uxtb	r2, r2
 800a0f2:	4611      	mov	r1, r2
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	4798      	blx	r3
  }

  return USBD_OK;
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3708      	adds	r7, #8
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a102:	b480      	push	{r7}
 800a104:	b083      	sub	sp, #12
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
 800a10a:	460b      	mov	r3, r1
 800a10c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	78fa      	ldrb	r2, [r7, #3]
 800a112:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	370c      	adds	r7, #12
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bc80      	pop	{r7}
 800a11e:	4770      	bx	lr

0800a120 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2204      	movs	r2, #4
 800a138:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a13c:	2300      	movs	r3, #0
}
 800a13e:	4618      	mov	r0, r3
 800a140:	370c      	adds	r7, #12
 800a142:	46bd      	mov	sp, r7
 800a144:	bc80      	pop	{r7}
 800a146:	4770      	bx	lr

0800a148 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a148:	b480      	push	{r7}
 800a14a:	b083      	sub	sp, #12
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a156:	2b04      	cmp	r3, #4
 800a158:	d105      	bne.n	800a166 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bc80      	pop	{r7}
 800a170:	4770      	bx	lr

0800a172 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b082      	sub	sp, #8
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a180:	2b03      	cmp	r3, #3
 800a182:	d10b      	bne.n	800a19c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a18a:	69db      	ldr	r3, [r3, #28]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d005      	beq.n	800a19c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a196:	69db      	ldr	r3, [r3, #28]
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3708      	adds	r7, #8
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
	...

0800a1a8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a1be:	2b40      	cmp	r3, #64	; 0x40
 800a1c0:	d005      	beq.n	800a1ce <USBD_StdDevReq+0x26>
 800a1c2:	2b40      	cmp	r3, #64	; 0x40
 800a1c4:	d84f      	bhi.n	800a266 <USBD_StdDevReq+0xbe>
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d009      	beq.n	800a1de <USBD_StdDevReq+0x36>
 800a1ca:	2b20      	cmp	r3, #32
 800a1cc:	d14b      	bne.n	800a266 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	6839      	ldr	r1, [r7, #0]
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	4798      	blx	r3
      break;
 800a1dc:	e048      	b.n	800a270 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	785b      	ldrb	r3, [r3, #1]
 800a1e2:	2b09      	cmp	r3, #9
 800a1e4:	d839      	bhi.n	800a25a <USBD_StdDevReq+0xb2>
 800a1e6:	a201      	add	r2, pc, #4	; (adr r2, 800a1ec <USBD_StdDevReq+0x44>)
 800a1e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ec:	0800a23d 	.word	0x0800a23d
 800a1f0:	0800a251 	.word	0x0800a251
 800a1f4:	0800a25b 	.word	0x0800a25b
 800a1f8:	0800a247 	.word	0x0800a247
 800a1fc:	0800a25b 	.word	0x0800a25b
 800a200:	0800a21f 	.word	0x0800a21f
 800a204:	0800a215 	.word	0x0800a215
 800a208:	0800a25b 	.word	0x0800a25b
 800a20c:	0800a233 	.word	0x0800a233
 800a210:	0800a229 	.word	0x0800a229
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a214:	6839      	ldr	r1, [r7, #0]
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 f9dc 	bl	800a5d4 <USBD_GetDescriptor>
          break;
 800a21c:	e022      	b.n	800a264 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a21e:	6839      	ldr	r1, [r7, #0]
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 fb3f 	bl	800a8a4 <USBD_SetAddress>
          break;
 800a226:	e01d      	b.n	800a264 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a228:	6839      	ldr	r1, [r7, #0]
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 fb7e 	bl	800a92c <USBD_SetConfig>
          break;
 800a230:	e018      	b.n	800a264 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a232:	6839      	ldr	r1, [r7, #0]
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 fc07 	bl	800aa48 <USBD_GetConfig>
          break;
 800a23a:	e013      	b.n	800a264 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a23c:	6839      	ldr	r1, [r7, #0]
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 fc37 	bl	800aab2 <USBD_GetStatus>
          break;
 800a244:	e00e      	b.n	800a264 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a246:	6839      	ldr	r1, [r7, #0]
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 fc65 	bl	800ab18 <USBD_SetFeature>
          break;
 800a24e:	e009      	b.n	800a264 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a250:	6839      	ldr	r1, [r7, #0]
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 fc74 	bl	800ab40 <USBD_ClrFeature>
          break;
 800a258:	e004      	b.n	800a264 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a25a:	6839      	ldr	r1, [r7, #0]
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 fccc 	bl	800abfa <USBD_CtlError>
          break;
 800a262:	bf00      	nop
      }
      break;
 800a264:	e004      	b.n	800a270 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a266:	6839      	ldr	r1, [r7, #0]
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 fcc6 	bl	800abfa <USBD_CtlError>
      break;
 800a26e:	bf00      	nop
  }

  return ret;
 800a270:	7bfb      	ldrb	r3, [r7, #15]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop

0800a27c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a286:	2300      	movs	r3, #0
 800a288:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a292:	2b40      	cmp	r3, #64	; 0x40
 800a294:	d005      	beq.n	800a2a2 <USBD_StdItfReq+0x26>
 800a296:	2b40      	cmp	r3, #64	; 0x40
 800a298:	d82e      	bhi.n	800a2f8 <USBD_StdItfReq+0x7c>
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d001      	beq.n	800a2a2 <USBD_StdItfReq+0x26>
 800a29e:	2b20      	cmp	r3, #32
 800a2a0:	d12a      	bne.n	800a2f8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2a8:	3b01      	subs	r3, #1
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	d81d      	bhi.n	800a2ea <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	889b      	ldrh	r3, [r3, #4]
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d813      	bhi.n	800a2e0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	6839      	ldr	r1, [r7, #0]
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	4798      	blx	r3
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	88db      	ldrh	r3, [r3, #6]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d110      	bne.n	800a2f4 <USBD_StdItfReq+0x78>
 800a2d2:	7bfb      	ldrb	r3, [r7, #15]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d10d      	bne.n	800a2f4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 fd56 	bl	800ad8a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a2de:	e009      	b.n	800a2f4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a2e0:	6839      	ldr	r1, [r7, #0]
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 fc89 	bl	800abfa <USBD_CtlError>
          break;
 800a2e8:	e004      	b.n	800a2f4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a2ea:	6839      	ldr	r1, [r7, #0]
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 fc84 	bl	800abfa <USBD_CtlError>
          break;
 800a2f2:	e000      	b.n	800a2f6 <USBD_StdItfReq+0x7a>
          break;
 800a2f4:	bf00      	nop
      }
      break;
 800a2f6:	e004      	b.n	800a302 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a2f8:	6839      	ldr	r1, [r7, #0]
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 fc7d 	bl	800abfa <USBD_CtlError>
      break;
 800a300:	bf00      	nop
  }

  return USBD_OK;
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	3710      	adds	r7, #16
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a316:	2300      	movs	r3, #0
 800a318:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	889b      	ldrh	r3, [r3, #4]
 800a31e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a328:	2b40      	cmp	r3, #64	; 0x40
 800a32a:	d007      	beq.n	800a33c <USBD_StdEPReq+0x30>
 800a32c:	2b40      	cmp	r3, #64	; 0x40
 800a32e:	f200 8146 	bhi.w	800a5be <USBD_StdEPReq+0x2b2>
 800a332:	2b00      	cmp	r3, #0
 800a334:	d00a      	beq.n	800a34c <USBD_StdEPReq+0x40>
 800a336:	2b20      	cmp	r3, #32
 800a338:	f040 8141 	bne.w	800a5be <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	6839      	ldr	r1, [r7, #0]
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	4798      	blx	r3
      break;
 800a34a:	e13d      	b.n	800a5c8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a354:	2b20      	cmp	r3, #32
 800a356:	d10a      	bne.n	800a36e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	6839      	ldr	r1, [r7, #0]
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	4798      	blx	r3
 800a366:	4603      	mov	r3, r0
 800a368:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a36a:	7bfb      	ldrb	r3, [r7, #15]
 800a36c:	e12d      	b.n	800a5ca <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	785b      	ldrb	r3, [r3, #1]
 800a372:	2b03      	cmp	r3, #3
 800a374:	d007      	beq.n	800a386 <USBD_StdEPReq+0x7a>
 800a376:	2b03      	cmp	r3, #3
 800a378:	f300 811b 	bgt.w	800a5b2 <USBD_StdEPReq+0x2a6>
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d072      	beq.n	800a466 <USBD_StdEPReq+0x15a>
 800a380:	2b01      	cmp	r3, #1
 800a382:	d03a      	beq.n	800a3fa <USBD_StdEPReq+0xee>
 800a384:	e115      	b.n	800a5b2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a38c:	2b02      	cmp	r3, #2
 800a38e:	d002      	beq.n	800a396 <USBD_StdEPReq+0x8a>
 800a390:	2b03      	cmp	r3, #3
 800a392:	d015      	beq.n	800a3c0 <USBD_StdEPReq+0xb4>
 800a394:	e02b      	b.n	800a3ee <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a396:	7bbb      	ldrb	r3, [r7, #14]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d00c      	beq.n	800a3b6 <USBD_StdEPReq+0xaa>
 800a39c:	7bbb      	ldrb	r3, [r7, #14]
 800a39e:	2b80      	cmp	r3, #128	; 0x80
 800a3a0:	d009      	beq.n	800a3b6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a3a2:	7bbb      	ldrb	r3, [r7, #14]
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f001 f888 	bl	800b4bc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a3ac:	2180      	movs	r1, #128	; 0x80
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f001 f884 	bl	800b4bc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a3b4:	e020      	b.n	800a3f8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a3b6:	6839      	ldr	r1, [r7, #0]
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 fc1e 	bl	800abfa <USBD_CtlError>
              break;
 800a3be:	e01b      	b.n	800a3f8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	885b      	ldrh	r3, [r3, #2]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10e      	bne.n	800a3e6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a3c8:	7bbb      	ldrb	r3, [r7, #14]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00b      	beq.n	800a3e6 <USBD_StdEPReq+0xda>
 800a3ce:	7bbb      	ldrb	r3, [r7, #14]
 800a3d0:	2b80      	cmp	r3, #128	; 0x80
 800a3d2:	d008      	beq.n	800a3e6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	88db      	ldrh	r3, [r3, #6]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d104      	bne.n	800a3e6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a3dc:	7bbb      	ldrb	r3, [r7, #14]
 800a3de:	4619      	mov	r1, r3
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f001 f86b 	bl	800b4bc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 fccf 	bl	800ad8a <USBD_CtlSendStatus>

              break;
 800a3ec:	e004      	b.n	800a3f8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a3ee:	6839      	ldr	r1, [r7, #0]
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 fc02 	bl	800abfa <USBD_CtlError>
              break;
 800a3f6:	bf00      	nop
          }
          break;
 800a3f8:	e0e0      	b.n	800a5bc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a400:	2b02      	cmp	r3, #2
 800a402:	d002      	beq.n	800a40a <USBD_StdEPReq+0xfe>
 800a404:	2b03      	cmp	r3, #3
 800a406:	d015      	beq.n	800a434 <USBD_StdEPReq+0x128>
 800a408:	e026      	b.n	800a458 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a40a:	7bbb      	ldrb	r3, [r7, #14]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d00c      	beq.n	800a42a <USBD_StdEPReq+0x11e>
 800a410:	7bbb      	ldrb	r3, [r7, #14]
 800a412:	2b80      	cmp	r3, #128	; 0x80
 800a414:	d009      	beq.n	800a42a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a416:	7bbb      	ldrb	r3, [r7, #14]
 800a418:	4619      	mov	r1, r3
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f001 f84e 	bl	800b4bc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a420:	2180      	movs	r1, #128	; 0x80
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f001 f84a 	bl	800b4bc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a428:	e01c      	b.n	800a464 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a42a:	6839      	ldr	r1, [r7, #0]
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 fbe4 	bl	800abfa <USBD_CtlError>
              break;
 800a432:	e017      	b.n	800a464 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	885b      	ldrh	r3, [r3, #2]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d112      	bne.n	800a462 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a43c:	7bbb      	ldrb	r3, [r7, #14]
 800a43e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a442:	2b00      	cmp	r3, #0
 800a444:	d004      	beq.n	800a450 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a446:	7bbb      	ldrb	r3, [r7, #14]
 800a448:	4619      	mov	r1, r3
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f001 f855 	bl	800b4fa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 fc9a 	bl	800ad8a <USBD_CtlSendStatus>
              }
              break;
 800a456:	e004      	b.n	800a462 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a458:	6839      	ldr	r1, [r7, #0]
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 fbcd 	bl	800abfa <USBD_CtlError>
              break;
 800a460:	e000      	b.n	800a464 <USBD_StdEPReq+0x158>
              break;
 800a462:	bf00      	nop
          }
          break;
 800a464:	e0aa      	b.n	800a5bc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a46c:	2b02      	cmp	r3, #2
 800a46e:	d002      	beq.n	800a476 <USBD_StdEPReq+0x16a>
 800a470:	2b03      	cmp	r3, #3
 800a472:	d032      	beq.n	800a4da <USBD_StdEPReq+0x1ce>
 800a474:	e097      	b.n	800a5a6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a476:	7bbb      	ldrb	r3, [r7, #14]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d007      	beq.n	800a48c <USBD_StdEPReq+0x180>
 800a47c:	7bbb      	ldrb	r3, [r7, #14]
 800a47e:	2b80      	cmp	r3, #128	; 0x80
 800a480:	d004      	beq.n	800a48c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a482:	6839      	ldr	r1, [r7, #0]
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 fbb8 	bl	800abfa <USBD_CtlError>
                break;
 800a48a:	e091      	b.n	800a5b0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a48c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a490:	2b00      	cmp	r3, #0
 800a492:	da0b      	bge.n	800a4ac <USBD_StdEPReq+0x1a0>
 800a494:	7bbb      	ldrb	r3, [r7, #14]
 800a496:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a49a:	4613      	mov	r3, r2
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	4413      	add	r3, r2
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	3310      	adds	r3, #16
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	4413      	add	r3, r2
 800a4a8:	3304      	adds	r3, #4
 800a4aa:	e00b      	b.n	800a4c4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a4ac:	7bbb      	ldrb	r3, [r7, #14]
 800a4ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	4413      	add	r3, r2
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	3304      	adds	r3, #4
 800a4c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	2202      	movs	r2, #2
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 fbfb 	bl	800acce <USBD_CtlSendData>
              break;
 800a4d8:	e06a      	b.n	800a5b0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a4da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	da11      	bge.n	800a506 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a4e2:	7bbb      	ldrb	r3, [r7, #14]
 800a4e4:	f003 020f 	and.w	r2, r3, #15
 800a4e8:	6879      	ldr	r1, [r7, #4]
 800a4ea:	4613      	mov	r3, r2
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	4413      	add	r3, r2
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	440b      	add	r3, r1
 800a4f4:	3318      	adds	r3, #24
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d117      	bne.n	800a52c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a4fc:	6839      	ldr	r1, [r7, #0]
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f000 fb7b 	bl	800abfa <USBD_CtlError>
                  break;
 800a504:	e054      	b.n	800a5b0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a506:	7bbb      	ldrb	r3, [r7, #14]
 800a508:	f003 020f 	and.w	r2, r3, #15
 800a50c:	6879      	ldr	r1, [r7, #4]
 800a50e:	4613      	mov	r3, r2
 800a510:	009b      	lsls	r3, r3, #2
 800a512:	4413      	add	r3, r2
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	440b      	add	r3, r1
 800a518:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d104      	bne.n	800a52c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a522:	6839      	ldr	r1, [r7, #0]
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 fb68 	bl	800abfa <USBD_CtlError>
                  break;
 800a52a:	e041      	b.n	800a5b0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a52c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a530:	2b00      	cmp	r3, #0
 800a532:	da0b      	bge.n	800a54c <USBD_StdEPReq+0x240>
 800a534:	7bbb      	ldrb	r3, [r7, #14]
 800a536:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a53a:	4613      	mov	r3, r2
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	4413      	add	r3, r2
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	3310      	adds	r3, #16
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	4413      	add	r3, r2
 800a548:	3304      	adds	r3, #4
 800a54a:	e00b      	b.n	800a564 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a54c:	7bbb      	ldrb	r3, [r7, #14]
 800a54e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a552:	4613      	mov	r3, r2
 800a554:	009b      	lsls	r3, r3, #2
 800a556:	4413      	add	r3, r2
 800a558:	009b      	lsls	r3, r3, #2
 800a55a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	4413      	add	r3, r2
 800a562:	3304      	adds	r3, #4
 800a564:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a566:	7bbb      	ldrb	r3, [r7, #14]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d002      	beq.n	800a572 <USBD_StdEPReq+0x266>
 800a56c:	7bbb      	ldrb	r3, [r7, #14]
 800a56e:	2b80      	cmp	r3, #128	; 0x80
 800a570:	d103      	bne.n	800a57a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	2200      	movs	r2, #0
 800a576:	601a      	str	r2, [r3, #0]
 800a578:	e00e      	b.n	800a598 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a57a:	7bbb      	ldrb	r3, [r7, #14]
 800a57c:	4619      	mov	r1, r3
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 ffda 	bl	800b538 <USBD_LL_IsStallEP>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d003      	beq.n	800a592 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	2201      	movs	r2, #1
 800a58e:	601a      	str	r2, [r3, #0]
 800a590:	e002      	b.n	800a598 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	2200      	movs	r2, #0
 800a596:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	2202      	movs	r2, #2
 800a59c:	4619      	mov	r1, r3
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 fb95 	bl	800acce <USBD_CtlSendData>
              break;
 800a5a4:	e004      	b.n	800a5b0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a5a6:	6839      	ldr	r1, [r7, #0]
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 fb26 	bl	800abfa <USBD_CtlError>
              break;
 800a5ae:	bf00      	nop
          }
          break;
 800a5b0:	e004      	b.n	800a5bc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a5b2:	6839      	ldr	r1, [r7, #0]
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 fb20 	bl	800abfa <USBD_CtlError>
          break;
 800a5ba:	bf00      	nop
      }
      break;
 800a5bc:	e004      	b.n	800a5c8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a5be:	6839      	ldr	r1, [r7, #0]
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 fb1a 	bl	800abfa <USBD_CtlError>
      break;
 800a5c6:	bf00      	nop
  }

  return ret;
 800a5c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
	...

0800a5d4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	885b      	ldrh	r3, [r3, #2]
 800a5ee:	0a1b      	lsrs	r3, r3, #8
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	3b01      	subs	r3, #1
 800a5f4:	2b06      	cmp	r3, #6
 800a5f6:	f200 8128 	bhi.w	800a84a <USBD_GetDescriptor+0x276>
 800a5fa:	a201      	add	r2, pc, #4	; (adr r2, 800a600 <USBD_GetDescriptor+0x2c>)
 800a5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a600:	0800a61d 	.word	0x0800a61d
 800a604:	0800a635 	.word	0x0800a635
 800a608:	0800a675 	.word	0x0800a675
 800a60c:	0800a84b 	.word	0x0800a84b
 800a610:	0800a84b 	.word	0x0800a84b
 800a614:	0800a7eb 	.word	0x0800a7eb
 800a618:	0800a817 	.word	0x0800a817
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	7c12      	ldrb	r2, [r2, #16]
 800a628:	f107 0108 	add.w	r1, r7, #8
 800a62c:	4610      	mov	r0, r2
 800a62e:	4798      	blx	r3
 800a630:	60f8      	str	r0, [r7, #12]
      break;
 800a632:	e112      	b.n	800a85a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	7c1b      	ldrb	r3, [r3, #16]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d10d      	bne.n	800a658 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a644:	f107 0208 	add.w	r2, r7, #8
 800a648:	4610      	mov	r0, r2
 800a64a:	4798      	blx	r3
 800a64c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	3301      	adds	r3, #1
 800a652:	2202      	movs	r2, #2
 800a654:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a656:	e100      	b.n	800a85a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a660:	f107 0208 	add.w	r2, r7, #8
 800a664:	4610      	mov	r0, r2
 800a666:	4798      	blx	r3
 800a668:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	3301      	adds	r3, #1
 800a66e:	2202      	movs	r2, #2
 800a670:	701a      	strb	r2, [r3, #0]
      break;
 800a672:	e0f2      	b.n	800a85a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	885b      	ldrh	r3, [r3, #2]
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	2b05      	cmp	r3, #5
 800a67c:	f200 80ac 	bhi.w	800a7d8 <USBD_GetDescriptor+0x204>
 800a680:	a201      	add	r2, pc, #4	; (adr r2, 800a688 <USBD_GetDescriptor+0xb4>)
 800a682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a686:	bf00      	nop
 800a688:	0800a6a1 	.word	0x0800a6a1
 800a68c:	0800a6d5 	.word	0x0800a6d5
 800a690:	0800a709 	.word	0x0800a709
 800a694:	0800a73d 	.word	0x0800a73d
 800a698:	0800a771 	.word	0x0800a771
 800a69c:	0800a7a5 	.word	0x0800a7a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d00b      	beq.n	800a6c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	7c12      	ldrb	r2, [r2, #16]
 800a6b8:	f107 0108 	add.w	r1, r7, #8
 800a6bc:	4610      	mov	r0, r2
 800a6be:	4798      	blx	r3
 800a6c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6c2:	e091      	b.n	800a7e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a6c4:	6839      	ldr	r1, [r7, #0]
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 fa97 	bl	800abfa <USBD_CtlError>
            err++;
 800a6cc:	7afb      	ldrb	r3, [r7, #11]
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	72fb      	strb	r3, [r7, #11]
          break;
 800a6d2:	e089      	b.n	800a7e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d00b      	beq.n	800a6f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	687a      	ldr	r2, [r7, #4]
 800a6ea:	7c12      	ldrb	r2, [r2, #16]
 800a6ec:	f107 0108 	add.w	r1, r7, #8
 800a6f0:	4610      	mov	r0, r2
 800a6f2:	4798      	blx	r3
 800a6f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6f6:	e077      	b.n	800a7e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a6f8:	6839      	ldr	r1, [r7, #0]
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 fa7d 	bl	800abfa <USBD_CtlError>
            err++;
 800a700:	7afb      	ldrb	r3, [r7, #11]
 800a702:	3301      	adds	r3, #1
 800a704:	72fb      	strb	r3, [r7, #11]
          break;
 800a706:	e06f      	b.n	800a7e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d00b      	beq.n	800a72c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	7c12      	ldrb	r2, [r2, #16]
 800a720:	f107 0108 	add.w	r1, r7, #8
 800a724:	4610      	mov	r0, r2
 800a726:	4798      	blx	r3
 800a728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a72a:	e05d      	b.n	800a7e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a72c:	6839      	ldr	r1, [r7, #0]
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 fa63 	bl	800abfa <USBD_CtlError>
            err++;
 800a734:	7afb      	ldrb	r3, [r7, #11]
 800a736:	3301      	adds	r3, #1
 800a738:	72fb      	strb	r3, [r7, #11]
          break;
 800a73a:	e055      	b.n	800a7e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a742:	691b      	ldr	r3, [r3, #16]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d00b      	beq.n	800a760 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a74e:	691b      	ldr	r3, [r3, #16]
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	7c12      	ldrb	r2, [r2, #16]
 800a754:	f107 0108 	add.w	r1, r7, #8
 800a758:	4610      	mov	r0, r2
 800a75a:	4798      	blx	r3
 800a75c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a75e:	e043      	b.n	800a7e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a760:	6839      	ldr	r1, [r7, #0]
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 fa49 	bl	800abfa <USBD_CtlError>
            err++;
 800a768:	7afb      	ldrb	r3, [r7, #11]
 800a76a:	3301      	adds	r3, #1
 800a76c:	72fb      	strb	r3, [r7, #11]
          break;
 800a76e:	e03b      	b.n	800a7e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a776:	695b      	ldr	r3, [r3, #20]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d00b      	beq.n	800a794 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a782:	695b      	ldr	r3, [r3, #20]
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	7c12      	ldrb	r2, [r2, #16]
 800a788:	f107 0108 	add.w	r1, r7, #8
 800a78c:	4610      	mov	r0, r2
 800a78e:	4798      	blx	r3
 800a790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a792:	e029      	b.n	800a7e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a794:	6839      	ldr	r1, [r7, #0]
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 fa2f 	bl	800abfa <USBD_CtlError>
            err++;
 800a79c:	7afb      	ldrb	r3, [r7, #11]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	72fb      	strb	r3, [r7, #11]
          break;
 800a7a2:	e021      	b.n	800a7e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a7aa:	699b      	ldr	r3, [r3, #24]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d00b      	beq.n	800a7c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a7b6:	699b      	ldr	r3, [r3, #24]
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	7c12      	ldrb	r2, [r2, #16]
 800a7bc:	f107 0108 	add.w	r1, r7, #8
 800a7c0:	4610      	mov	r0, r2
 800a7c2:	4798      	blx	r3
 800a7c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7c6:	e00f      	b.n	800a7e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7c8:	6839      	ldr	r1, [r7, #0]
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 fa15 	bl	800abfa <USBD_CtlError>
            err++;
 800a7d0:	7afb      	ldrb	r3, [r7, #11]
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	72fb      	strb	r3, [r7, #11]
          break;
 800a7d6:	e007      	b.n	800a7e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a7d8:	6839      	ldr	r1, [r7, #0]
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 fa0d 	bl	800abfa <USBD_CtlError>
          err++;
 800a7e0:	7afb      	ldrb	r3, [r7, #11]
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a7e6:	e038      	b.n	800a85a <USBD_GetDescriptor+0x286>
 800a7e8:	e037      	b.n	800a85a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	7c1b      	ldrb	r3, [r3, #16]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d109      	bne.n	800a806 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7fa:	f107 0208 	add.w	r2, r7, #8
 800a7fe:	4610      	mov	r0, r2
 800a800:	4798      	blx	r3
 800a802:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a804:	e029      	b.n	800a85a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a806:	6839      	ldr	r1, [r7, #0]
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 f9f6 	bl	800abfa <USBD_CtlError>
        err++;
 800a80e:	7afb      	ldrb	r3, [r7, #11]
 800a810:	3301      	adds	r3, #1
 800a812:	72fb      	strb	r3, [r7, #11]
      break;
 800a814:	e021      	b.n	800a85a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	7c1b      	ldrb	r3, [r3, #16]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d10d      	bne.n	800a83a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a826:	f107 0208 	add.w	r2, r7, #8
 800a82a:	4610      	mov	r0, r2
 800a82c:	4798      	blx	r3
 800a82e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	3301      	adds	r3, #1
 800a834:	2207      	movs	r2, #7
 800a836:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a838:	e00f      	b.n	800a85a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a83a:	6839      	ldr	r1, [r7, #0]
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 f9dc 	bl	800abfa <USBD_CtlError>
        err++;
 800a842:	7afb      	ldrb	r3, [r7, #11]
 800a844:	3301      	adds	r3, #1
 800a846:	72fb      	strb	r3, [r7, #11]
      break;
 800a848:	e007      	b.n	800a85a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a84a:	6839      	ldr	r1, [r7, #0]
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 f9d4 	bl	800abfa <USBD_CtlError>
      err++;
 800a852:	7afb      	ldrb	r3, [r7, #11]
 800a854:	3301      	adds	r3, #1
 800a856:	72fb      	strb	r3, [r7, #11]
      break;
 800a858:	bf00      	nop
  }

  if (err != 0U)
 800a85a:	7afb      	ldrb	r3, [r7, #11]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d11c      	bne.n	800a89a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a860:	893b      	ldrh	r3, [r7, #8]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d011      	beq.n	800a88a <USBD_GetDescriptor+0x2b6>
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	88db      	ldrh	r3, [r3, #6]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d00d      	beq.n	800a88a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	88da      	ldrh	r2, [r3, #6]
 800a872:	893b      	ldrh	r3, [r7, #8]
 800a874:	4293      	cmp	r3, r2
 800a876:	bf28      	it	cs
 800a878:	4613      	movcs	r3, r2
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a87e:	893b      	ldrh	r3, [r7, #8]
 800a880:	461a      	mov	r2, r3
 800a882:	68f9      	ldr	r1, [r7, #12]
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 fa22 	bl	800acce <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	88db      	ldrh	r3, [r3, #6]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d104      	bne.n	800a89c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 fa79 	bl	800ad8a <USBD_CtlSendStatus>
 800a898:	e000      	b.n	800a89c <USBD_GetDescriptor+0x2c8>
    return;
 800a89a:	bf00      	nop
    }
  }
}
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop

0800a8a4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	889b      	ldrh	r3, [r3, #4]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d130      	bne.n	800a918 <USBD_SetAddress+0x74>
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	88db      	ldrh	r3, [r3, #6]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d12c      	bne.n	800a918 <USBD_SetAddress+0x74>
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	885b      	ldrh	r3, [r3, #2]
 800a8c2:	2b7f      	cmp	r3, #127	; 0x7f
 800a8c4:	d828      	bhi.n	800a918 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	885b      	ldrh	r3, [r3, #2]
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8d8:	2b03      	cmp	r3, #3
 800a8da:	d104      	bne.n	800a8e6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a8dc:	6839      	ldr	r1, [r7, #0]
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 f98b 	bl	800abfa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8e4:	e01d      	b.n	800a922 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	7bfa      	ldrb	r2, [r7, #15]
 800a8ea:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a8ee:	7bfb      	ldrb	r3, [r7, #15]
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 fe4c 	bl	800b590 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f000 fa46 	bl	800ad8a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a8fe:	7bfb      	ldrb	r3, [r7, #15]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d004      	beq.n	800a90e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2202      	movs	r2, #2
 800a908:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a90c:	e009      	b.n	800a922 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2201      	movs	r2, #1
 800a912:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a916:	e004      	b.n	800a922 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a918:	6839      	ldr	r1, [r7, #0]
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 f96d 	bl	800abfa <USBD_CtlError>
  }
}
 800a920:	bf00      	nop
 800a922:	bf00      	nop
 800a924:	3710      	adds	r7, #16
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
	...

0800a92c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	885b      	ldrh	r3, [r3, #2]
 800a93a:	b2da      	uxtb	r2, r3
 800a93c:	4b41      	ldr	r3, [pc, #260]	; (800aa44 <USBD_SetConfig+0x118>)
 800a93e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a940:	4b40      	ldr	r3, [pc, #256]	; (800aa44 <USBD_SetConfig+0x118>)
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	2b01      	cmp	r3, #1
 800a946:	d904      	bls.n	800a952 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a948:	6839      	ldr	r1, [r7, #0]
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 f955 	bl	800abfa <USBD_CtlError>
 800a950:	e075      	b.n	800aa3e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a958:	2b02      	cmp	r3, #2
 800a95a:	d002      	beq.n	800a962 <USBD_SetConfig+0x36>
 800a95c:	2b03      	cmp	r3, #3
 800a95e:	d023      	beq.n	800a9a8 <USBD_SetConfig+0x7c>
 800a960:	e062      	b.n	800aa28 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a962:	4b38      	ldr	r3, [pc, #224]	; (800aa44 <USBD_SetConfig+0x118>)
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d01a      	beq.n	800a9a0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a96a:	4b36      	ldr	r3, [pc, #216]	; (800aa44 <USBD_SetConfig+0x118>)
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	461a      	mov	r2, r3
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2203      	movs	r2, #3
 800a978:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a97c:	4b31      	ldr	r3, [pc, #196]	; (800aa44 <USBD_SetConfig+0x118>)
 800a97e:	781b      	ldrb	r3, [r3, #0]
 800a980:	4619      	mov	r1, r3
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f7ff f9e7 	bl	8009d56 <USBD_SetClassConfig>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b02      	cmp	r3, #2
 800a98c:	d104      	bne.n	800a998 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a98e:	6839      	ldr	r1, [r7, #0]
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 f932 	bl	800abfa <USBD_CtlError>
            return;
 800a996:	e052      	b.n	800aa3e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 f9f6 	bl	800ad8a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a99e:	e04e      	b.n	800aa3e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 f9f2 	bl	800ad8a <USBD_CtlSendStatus>
        break;
 800a9a6:	e04a      	b.n	800aa3e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a9a8:	4b26      	ldr	r3, [pc, #152]	; (800aa44 <USBD_SetConfig+0x118>)
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d112      	bne.n	800a9d6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2202      	movs	r2, #2
 800a9b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a9b8:	4b22      	ldr	r3, [pc, #136]	; (800aa44 <USBD_SetConfig+0x118>)
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	461a      	mov	r2, r3
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a9c2:	4b20      	ldr	r3, [pc, #128]	; (800aa44 <USBD_SetConfig+0x118>)
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f7ff f9e3 	bl	8009d94 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 f9db 	bl	800ad8a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a9d4:	e033      	b.n	800aa3e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a9d6:	4b1b      	ldr	r3, [pc, #108]	; (800aa44 <USBD_SetConfig+0x118>)
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	461a      	mov	r2, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d01d      	beq.n	800aa20 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f7ff f9d1 	bl	8009d94 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a9f2:	4b14      	ldr	r3, [pc, #80]	; (800aa44 <USBD_SetConfig+0x118>)
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a9fc:	4b11      	ldr	r3, [pc, #68]	; (800aa44 <USBD_SetConfig+0x118>)
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	4619      	mov	r1, r3
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f7ff f9a7 	bl	8009d56 <USBD_SetClassConfig>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b02      	cmp	r3, #2
 800aa0c:	d104      	bne.n	800aa18 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800aa0e:	6839      	ldr	r1, [r7, #0]
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f000 f8f2 	bl	800abfa <USBD_CtlError>
            return;
 800aa16:	e012      	b.n	800aa3e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 f9b6 	bl	800ad8a <USBD_CtlSendStatus>
        break;
 800aa1e:	e00e      	b.n	800aa3e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 f9b2 	bl	800ad8a <USBD_CtlSendStatus>
        break;
 800aa26:	e00a      	b.n	800aa3e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800aa28:	6839      	ldr	r1, [r7, #0]
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 f8e5 	bl	800abfa <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800aa30:	4b04      	ldr	r3, [pc, #16]	; (800aa44 <USBD_SetConfig+0x118>)
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	4619      	mov	r1, r3
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f7ff f9ac 	bl	8009d94 <USBD_ClrClassConfig>
        break;
 800aa3c:	bf00      	nop
    }
  }
}
 800aa3e:	3708      	adds	r7, #8
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	20000280 	.word	0x20000280

0800aa48 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	88db      	ldrh	r3, [r3, #6]
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d004      	beq.n	800aa64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aa5a:	6839      	ldr	r1, [r7, #0]
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f000 f8cc 	bl	800abfa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aa62:	e022      	b.n	800aaaa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa6a:	2b02      	cmp	r3, #2
 800aa6c:	dc02      	bgt.n	800aa74 <USBD_GetConfig+0x2c>
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	dc03      	bgt.n	800aa7a <USBD_GetConfig+0x32>
 800aa72:	e015      	b.n	800aaa0 <USBD_GetConfig+0x58>
 800aa74:	2b03      	cmp	r3, #3
 800aa76:	d00b      	beq.n	800aa90 <USBD_GetConfig+0x48>
 800aa78:	e012      	b.n	800aaa0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	3308      	adds	r3, #8
 800aa84:	2201      	movs	r2, #1
 800aa86:	4619      	mov	r1, r3
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 f920 	bl	800acce <USBD_CtlSendData>
        break;
 800aa8e:	e00c      	b.n	800aaaa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	3304      	adds	r3, #4
 800aa94:	2201      	movs	r2, #1
 800aa96:	4619      	mov	r1, r3
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 f918 	bl	800acce <USBD_CtlSendData>
        break;
 800aa9e:	e004      	b.n	800aaaa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800aaa0:	6839      	ldr	r1, [r7, #0]
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f8a9 	bl	800abfa <USBD_CtlError>
        break;
 800aaa8:	bf00      	nop
}
 800aaaa:	bf00      	nop
 800aaac:	3708      	adds	r7, #8
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}

0800aab2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aab2:	b580      	push	{r7, lr}
 800aab4:	b082      	sub	sp, #8
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	6078      	str	r0, [r7, #4]
 800aaba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aac2:	3b01      	subs	r3, #1
 800aac4:	2b02      	cmp	r3, #2
 800aac6:	d81e      	bhi.n	800ab06 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	88db      	ldrh	r3, [r3, #6]
 800aacc:	2b02      	cmp	r3, #2
 800aace:	d004      	beq.n	800aada <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800aad0:	6839      	ldr	r1, [r7, #0]
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 f891 	bl	800abfa <USBD_CtlError>
        break;
 800aad8:	e01a      	b.n	800ab10 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2201      	movs	r2, #1
 800aade:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d005      	beq.n	800aaf6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	68db      	ldr	r3, [r3, #12]
 800aaee:	f043 0202 	orr.w	r2, r3, #2
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	330c      	adds	r3, #12
 800aafa:	2202      	movs	r2, #2
 800aafc:	4619      	mov	r1, r3
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 f8e5 	bl	800acce <USBD_CtlSendData>
      break;
 800ab04:	e004      	b.n	800ab10 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800ab06:	6839      	ldr	r1, [r7, #0]
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 f876 	bl	800abfa <USBD_CtlError>
      break;
 800ab0e:	bf00      	nop
  }
}
 800ab10:	bf00      	nop
 800ab12:	3708      	adds	r7, #8
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	885b      	ldrh	r3, [r3, #2]
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d106      	bne.n	800ab38 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 f929 	bl	800ad8a <USBD_CtlSendStatus>
  }
}
 800ab38:	bf00      	nop
 800ab3a:	3708      	adds	r7, #8
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab50:	3b01      	subs	r3, #1
 800ab52:	2b02      	cmp	r3, #2
 800ab54:	d80b      	bhi.n	800ab6e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	885b      	ldrh	r3, [r3, #2]
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d10c      	bne.n	800ab78 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2200      	movs	r2, #0
 800ab62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 f90f 	bl	800ad8a <USBD_CtlSendStatus>
      }
      break;
 800ab6c:	e004      	b.n	800ab78 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ab6e:	6839      	ldr	r1, [r7, #0]
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 f842 	bl	800abfa <USBD_CtlError>
      break;
 800ab76:	e000      	b.n	800ab7a <USBD_ClrFeature+0x3a>
      break;
 800ab78:	bf00      	nop
  }
}
 800ab7a:	bf00      	nop
 800ab7c:	3708      	adds	r7, #8
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ab82:	b480      	push	{r7}
 800ab84:	b083      	sub	sp, #12
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
 800ab8a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	781a      	ldrb	r2, [r3, #0]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	785a      	ldrb	r2, [r3, #1]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	3302      	adds	r3, #2
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	b29a      	uxth	r2, r3
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	3303      	adds	r3, #3
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	b29b      	uxth	r3, r3
 800abac:	021b      	lsls	r3, r3, #8
 800abae:	b29b      	uxth	r3, r3
 800abb0:	4413      	add	r3, r2
 800abb2:	b29a      	uxth	r2, r3
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	3304      	adds	r3, #4
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	b29a      	uxth	r2, r3
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	3305      	adds	r3, #5
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	021b      	lsls	r3, r3, #8
 800abca:	b29b      	uxth	r3, r3
 800abcc:	4413      	add	r3, r2
 800abce:	b29a      	uxth	r2, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	3306      	adds	r3, #6
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	b29a      	uxth	r2, r3
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	3307      	adds	r3, #7
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	021b      	lsls	r3, r3, #8
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	4413      	add	r3, r2
 800abea:	b29a      	uxth	r2, r3
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	80da      	strh	r2, [r3, #6]

}
 800abf0:	bf00      	nop
 800abf2:	370c      	adds	r7, #12
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bc80      	pop	{r7}
 800abf8:	4770      	bx	lr

0800abfa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b082      	sub	sp, #8
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
 800ac02:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ac04:	2180      	movs	r1, #128	; 0x80
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 fc58 	bl	800b4bc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ac0c:	2100      	movs	r1, #0
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 fc54 	bl	800b4bc <USBD_LL_StallEP>
}
 800ac14:	bf00      	nop
 800ac16:	3708      	adds	r7, #8
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b086      	sub	sp, #24
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d032      	beq.n	800ac98 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ac32:	68f8      	ldr	r0, [r7, #12]
 800ac34:	f000 f834 	bl	800aca0 <USBD_GetLen>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	005b      	lsls	r3, r3, #1
 800ac40:	b29a      	uxth	r2, r3
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ac46:	7dfb      	ldrb	r3, [r7, #23]
 800ac48:	1c5a      	adds	r2, r3, #1
 800ac4a:	75fa      	strb	r2, [r7, #23]
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	4413      	add	r3, r2
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	7812      	ldrb	r2, [r2, #0]
 800ac56:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ac58:	7dfb      	ldrb	r3, [r7, #23]
 800ac5a:	1c5a      	adds	r2, r3, #1
 800ac5c:	75fa      	strb	r2, [r7, #23]
 800ac5e:	461a      	mov	r2, r3
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	4413      	add	r3, r2
 800ac64:	2203      	movs	r2, #3
 800ac66:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ac68:	e012      	b.n	800ac90 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	1c5a      	adds	r2, r3, #1
 800ac6e:	60fa      	str	r2, [r7, #12]
 800ac70:	7dfa      	ldrb	r2, [r7, #23]
 800ac72:	1c51      	adds	r1, r2, #1
 800ac74:	75f9      	strb	r1, [r7, #23]
 800ac76:	4611      	mov	r1, r2
 800ac78:	68ba      	ldr	r2, [r7, #8]
 800ac7a:	440a      	add	r2, r1
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ac80:	7dfb      	ldrb	r3, [r7, #23]
 800ac82:	1c5a      	adds	r2, r3, #1
 800ac84:	75fa      	strb	r2, [r7, #23]
 800ac86:	461a      	mov	r2, r3
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	4413      	add	r3, r2
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d1e8      	bne.n	800ac6a <USBD_GetString+0x4e>
    }
  }
}
 800ac98:	bf00      	nop
 800ac9a:	3718      	adds	r7, #24
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b085      	sub	sp, #20
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aca8:	2300      	movs	r3, #0
 800acaa:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800acac:	e005      	b.n	800acba <USBD_GetLen+0x1a>
  {
    len++;
 800acae:	7bfb      	ldrb	r3, [r7, #15]
 800acb0:	3301      	adds	r3, #1
 800acb2:	73fb      	strb	r3, [r7, #15]
    buf++;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	3301      	adds	r3, #1
 800acb8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1f5      	bne.n	800acae <USBD_GetLen+0xe>
  }

  return len;
 800acc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3714      	adds	r7, #20
 800acc8:	46bd      	mov	sp, r7
 800acca:	bc80      	pop	{r7}
 800accc:	4770      	bx	lr

0800acce <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b084      	sub	sp, #16
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	60f8      	str	r0, [r7, #12]
 800acd6:	60b9      	str	r1, [r7, #8]
 800acd8:	4613      	mov	r3, r2
 800acda:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2202      	movs	r2, #2
 800ace0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ace4:	88fa      	ldrh	r2, [r7, #6]
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800acea:	88fa      	ldrh	r2, [r7, #6]
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800acf0:	88fb      	ldrh	r3, [r7, #6]
 800acf2:	68ba      	ldr	r2, [r7, #8]
 800acf4:	2100      	movs	r1, #0
 800acf6:	68f8      	ldr	r0, [r7, #12]
 800acf8:	f000 fc69 	bl	800b5ce <USBD_LL_Transmit>

  return USBD_OK;
 800acfc:	2300      	movs	r3, #0
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3710      	adds	r7, #16
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b084      	sub	sp, #16
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	60f8      	str	r0, [r7, #12]
 800ad0e:	60b9      	str	r1, [r7, #8]
 800ad10:	4613      	mov	r3, r2
 800ad12:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad14:	88fb      	ldrh	r3, [r7, #6]
 800ad16:	68ba      	ldr	r2, [r7, #8]
 800ad18:	2100      	movs	r1, #0
 800ad1a:	68f8      	ldr	r0, [r7, #12]
 800ad1c:	f000 fc57 	bl	800b5ce <USBD_LL_Transmit>

  return USBD_OK;
 800ad20:	2300      	movs	r3, #0
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800ad2a:	b580      	push	{r7, lr}
 800ad2c:	b084      	sub	sp, #16
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	60f8      	str	r0, [r7, #12]
 800ad32:	60b9      	str	r1, [r7, #8]
 800ad34:	4613      	mov	r3, r2
 800ad36:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2203      	movs	r2, #3
 800ad3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ad40:	88fa      	ldrh	r2, [r7, #6]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800ad48:	88fa      	ldrh	r2, [r7, #6]
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ad50:	88fb      	ldrh	r3, [r7, #6]
 800ad52:	68ba      	ldr	r2, [r7, #8]
 800ad54:	2100      	movs	r1, #0
 800ad56:	68f8      	ldr	r0, [r7, #12]
 800ad58:	f000 fc5c 	bl	800b614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ad5c:	2300      	movs	r3, #0
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b084      	sub	sp, #16
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	60f8      	str	r0, [r7, #12]
 800ad6e:	60b9      	str	r1, [r7, #8]
 800ad70:	4613      	mov	r3, r2
 800ad72:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ad74:	88fb      	ldrh	r3, [r7, #6]
 800ad76:	68ba      	ldr	r2, [r7, #8]
 800ad78:	2100      	movs	r1, #0
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f000 fc4a 	bl	800b614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ad80:	2300      	movs	r3, #0
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3710      	adds	r7, #16
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b082      	sub	sp, #8
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2204      	movs	r2, #4
 800ad96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	2100      	movs	r1, #0
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 fc14 	bl	800b5ce <USBD_LL_Transmit>

  return USBD_OK;
 800ada6:	2300      	movs	r3, #0
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3708      	adds	r7, #8
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2205      	movs	r2, #5
 800adbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800adc0:	2300      	movs	r3, #0
 800adc2:	2200      	movs	r2, #0
 800adc4:	2100      	movs	r1, #0
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 fc24 	bl	800b614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	3708      	adds	r7, #8
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
	...

0800add8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800addc:	2200      	movs	r2, #0
 800adde:	4912      	ldr	r1, [pc, #72]	; (800ae28 <MX_USB_DEVICE_Init+0x50>)
 800ade0:	4812      	ldr	r0, [pc, #72]	; (800ae2c <MX_USB_DEVICE_Init+0x54>)
 800ade2:	f7fe ff5e 	bl	8009ca2 <USBD_Init>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d001      	beq.n	800adf0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800adec:	f7f7 fe5c 	bl	8002aa8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800adf0:	490f      	ldr	r1, [pc, #60]	; (800ae30 <MX_USB_DEVICE_Init+0x58>)
 800adf2:	480e      	ldr	r0, [pc, #56]	; (800ae2c <MX_USB_DEVICE_Init+0x54>)
 800adf4:	f7fe ff80 	bl	8009cf8 <USBD_RegisterClass>
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d001      	beq.n	800ae02 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800adfe:	f7f7 fe53 	bl	8002aa8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ae02:	490c      	ldr	r1, [pc, #48]	; (800ae34 <MX_USB_DEVICE_Init+0x5c>)
 800ae04:	4809      	ldr	r0, [pc, #36]	; (800ae2c <MX_USB_DEVICE_Init+0x54>)
 800ae06:	f7fe feb1 	bl	8009b6c <USBD_CDC_RegisterInterface>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d001      	beq.n	800ae14 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ae10:	f7f7 fe4a 	bl	8002aa8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ae14:	4805      	ldr	r0, [pc, #20]	; (800ae2c <MX_USB_DEVICE_Init+0x54>)
 800ae16:	f7fe ff88 	bl	8009d2a <USBD_Start>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d001      	beq.n	800ae24 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ae20:	f7f7 fe42 	bl	8002aa8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ae24:	bf00      	nop
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	20000140 	.word	0x20000140
 800ae2c:	200009f0 	.word	0x200009f0
 800ae30:	2000002c 	.word	0x2000002c
 800ae34:	20000130 	.word	0x20000130

0800ae38 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	4905      	ldr	r1, [pc, #20]	; (800ae54 <CDC_Init_FS+0x1c>)
 800ae40:	4805      	ldr	r0, [pc, #20]	; (800ae58 <CDC_Init_FS+0x20>)
 800ae42:	f7fe fea9 	bl	8009b98 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ae46:	4905      	ldr	r1, [pc, #20]	; (800ae5c <CDC_Init_FS+0x24>)
 800ae48:	4803      	ldr	r0, [pc, #12]	; (800ae58 <CDC_Init_FS+0x20>)
 800ae4a:	f7fe febe 	bl	8009bca <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800ae4e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	bd80      	pop	{r7, pc}
 800ae54:	20000eb4 	.word	0x20000eb4
 800ae58:	200009f0 	.word	0x200009f0
 800ae5c:	20000cb4 	.word	0x20000cb4

0800ae60 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ae60:	b480      	push	{r7}
 800ae62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 800ae64:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bc80      	pop	{r7}
 800ae6c:	4770      	bx	lr
	...

0800ae70 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	4603      	mov	r3, r0
 800ae78:	6039      	str	r1, [r7, #0]
 800ae7a:	71fb      	strb	r3, [r7, #7]
 800ae7c:	4613      	mov	r3, r2
 800ae7e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd)
 800ae80:	79fb      	ldrb	r3, [r7, #7]
 800ae82:	2b23      	cmp	r3, #35	; 0x23
 800ae84:	d84a      	bhi.n	800af1c <CDC_Control_FS+0xac>
 800ae86:	a201      	add	r2, pc, #4	; (adr r2, 800ae8c <CDC_Control_FS+0x1c>)
 800ae88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae8c:	0800af1d 	.word	0x0800af1d
 800ae90:	0800af1d 	.word	0x0800af1d
 800ae94:	0800af1d 	.word	0x0800af1d
 800ae98:	0800af1d 	.word	0x0800af1d
 800ae9c:	0800af1d 	.word	0x0800af1d
 800aea0:	0800af1d 	.word	0x0800af1d
 800aea4:	0800af1d 	.word	0x0800af1d
 800aea8:	0800af1d 	.word	0x0800af1d
 800aeac:	0800af1d 	.word	0x0800af1d
 800aeb0:	0800af1d 	.word	0x0800af1d
 800aeb4:	0800af1d 	.word	0x0800af1d
 800aeb8:	0800af1d 	.word	0x0800af1d
 800aebc:	0800af1d 	.word	0x0800af1d
 800aec0:	0800af1d 	.word	0x0800af1d
 800aec4:	0800af1d 	.word	0x0800af1d
 800aec8:	0800af1d 	.word	0x0800af1d
 800aecc:	0800af1d 	.word	0x0800af1d
 800aed0:	0800af1d 	.word	0x0800af1d
 800aed4:	0800af1d 	.word	0x0800af1d
 800aed8:	0800af1d 	.word	0x0800af1d
 800aedc:	0800af1d 	.word	0x0800af1d
 800aee0:	0800af1d 	.word	0x0800af1d
 800aee4:	0800af1d 	.word	0x0800af1d
 800aee8:	0800af1d 	.word	0x0800af1d
 800aeec:	0800af1d 	.word	0x0800af1d
 800aef0:	0800af1d 	.word	0x0800af1d
 800aef4:	0800af1d 	.word	0x0800af1d
 800aef8:	0800af1d 	.word	0x0800af1d
 800aefc:	0800af1d 	.word	0x0800af1d
 800af00:	0800af1d 	.word	0x0800af1d
 800af04:	0800af1d 	.word	0x0800af1d
 800af08:	0800af1d 	.word	0x0800af1d
 800af0c:	0800af1d 	.word	0x0800af1d
 800af10:	0800af1d 	.word	0x0800af1d
 800af14:	0800af1d 	.word	0x0800af1d
 800af18:	0800af1d 	.word	0x0800af1d
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800af1c:	bf00      	nop
	}

	return (USBD_OK);
 800af1e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800af20:	4618      	mov	r0, r3
 800af22:	370c      	adds	r7, #12
 800af24:	46bd      	mov	sp, r7
 800af26:	bc80      	pop	{r7}
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop

0800af2c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b082      	sub	sp, #8
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800af36:	6879      	ldr	r1, [r7, #4]
 800af38:	4807      	ldr	r0, [pc, #28]	; (800af58 <CDC_Receive_FS+0x2c>)
 800af3a:	f7fe fe46 	bl	8009bca <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800af3e:	4806      	ldr	r0, [pc, #24]	; (800af58 <CDC_Receive_FS+0x2c>)
 800af40:	f7fe fe85 	bl	8009c4e <USBD_CDC_ReceivePacket>

	runCommands(Buf, Len);
 800af44:	6839      	ldr	r1, [r7, #0]
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f7f6 fd7c 	bl	8001a44 <runCommands>
	return (USBD_OK);
 800af4c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3708      	adds	r7, #8
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	200009f0 	.word	0x200009f0

0800af5c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b084      	sub	sp, #16
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	460b      	mov	r3, r1
 800af66:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800af68:	2300      	movs	r3, #0
 800af6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800af6c:	4b0d      	ldr	r3, [pc, #52]	; (800afa4 <CDC_Transmit_FS+0x48>)
 800af6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af72:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0)
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d001      	beq.n	800af82 <CDC_Transmit_FS+0x26>
	{
		return USBD_BUSY;
 800af7e:	2301      	movs	r3, #1
 800af80:	e00b      	b.n	800af9a <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800af82:	887b      	ldrh	r3, [r7, #2]
 800af84:	461a      	mov	r2, r3
 800af86:	6879      	ldr	r1, [r7, #4]
 800af88:	4806      	ldr	r0, [pc, #24]	; (800afa4 <CDC_Transmit_FS+0x48>)
 800af8a:	f7fe fe05 	bl	8009b98 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800af8e:	4805      	ldr	r0, [pc, #20]	; (800afa4 <CDC_Transmit_FS+0x48>)
 800af90:	f7fe fe2e 	bl	8009bf0 <USBD_CDC_TransmitPacket>
 800af94:	4603      	mov	r3, r0
 800af96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800af98:	7bfb      	ldrb	r3, [r7, #15]
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3710      	adds	r7, #16
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop
 800afa4:	200009f0 	.word	0x200009f0

0800afa8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b083      	sub	sp, #12
 800afac:	af00      	add	r7, sp, #0
 800afae:	4603      	mov	r3, r0
 800afb0:	6039      	str	r1, [r7, #0]
 800afb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	2212      	movs	r2, #18
 800afb8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800afba:	4b03      	ldr	r3, [pc, #12]	; (800afc8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	370c      	adds	r7, #12
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bc80      	pop	{r7}
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	2000015c 	.word	0x2000015c

0800afcc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afcc:	b480      	push	{r7}
 800afce:	b083      	sub	sp, #12
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	4603      	mov	r3, r0
 800afd4:	6039      	str	r1, [r7, #0]
 800afd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	2204      	movs	r2, #4
 800afdc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800afde:	4b03      	ldr	r3, [pc, #12]	; (800afec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	370c      	adds	r7, #12
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bc80      	pop	{r7}
 800afe8:	4770      	bx	lr
 800afea:	bf00      	nop
 800afec:	20000170 	.word	0x20000170

0800aff0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	4603      	mov	r3, r0
 800aff8:	6039      	str	r1, [r7, #0]
 800affa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800affc:	79fb      	ldrb	r3, [r7, #7]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d105      	bne.n	800b00e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b002:	683a      	ldr	r2, [r7, #0]
 800b004:	4907      	ldr	r1, [pc, #28]	; (800b024 <USBD_FS_ProductStrDescriptor+0x34>)
 800b006:	4808      	ldr	r0, [pc, #32]	; (800b028 <USBD_FS_ProductStrDescriptor+0x38>)
 800b008:	f7ff fe08 	bl	800ac1c <USBD_GetString>
 800b00c:	e004      	b.n	800b018 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b00e:	683a      	ldr	r2, [r7, #0]
 800b010:	4904      	ldr	r1, [pc, #16]	; (800b024 <USBD_FS_ProductStrDescriptor+0x34>)
 800b012:	4805      	ldr	r0, [pc, #20]	; (800b028 <USBD_FS_ProductStrDescriptor+0x38>)
 800b014:	f7ff fe02 	bl	800ac1c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b018:	4b02      	ldr	r3, [pc, #8]	; (800b024 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3708      	adds	r7, #8
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop
 800b024:	200010b4 	.word	0x200010b4
 800b028:	0800cba8 	.word	0x0800cba8

0800b02c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b082      	sub	sp, #8
 800b030:	af00      	add	r7, sp, #0
 800b032:	4603      	mov	r3, r0
 800b034:	6039      	str	r1, [r7, #0]
 800b036:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b038:	683a      	ldr	r2, [r7, #0]
 800b03a:	4904      	ldr	r1, [pc, #16]	; (800b04c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b03c:	4804      	ldr	r0, [pc, #16]	; (800b050 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b03e:	f7ff fded 	bl	800ac1c <USBD_GetString>
  return USBD_StrDesc;
 800b042:	4b02      	ldr	r3, [pc, #8]	; (800b04c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b044:	4618      	mov	r0, r3
 800b046:	3708      	adds	r7, #8
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	200010b4 	.word	0x200010b4
 800b050:	0800cbc0 	.word	0x0800cbc0

0800b054 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	4603      	mov	r3, r0
 800b05c:	6039      	str	r1, [r7, #0]
 800b05e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	221a      	movs	r2, #26
 800b064:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b066:	f000 f843 	bl	800b0f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b06a:	4b02      	ldr	r3, [pc, #8]	; (800b074 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3708      	adds	r7, #8
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}
 800b074:	20000174 	.word	0x20000174

0800b078 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	4603      	mov	r3, r0
 800b080:	6039      	str	r1, [r7, #0]
 800b082:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b084:	79fb      	ldrb	r3, [r7, #7]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d105      	bne.n	800b096 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b08a:	683a      	ldr	r2, [r7, #0]
 800b08c:	4907      	ldr	r1, [pc, #28]	; (800b0ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800b08e:	4808      	ldr	r0, [pc, #32]	; (800b0b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b090:	f7ff fdc4 	bl	800ac1c <USBD_GetString>
 800b094:	e004      	b.n	800b0a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b096:	683a      	ldr	r2, [r7, #0]
 800b098:	4904      	ldr	r1, [pc, #16]	; (800b0ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800b09a:	4805      	ldr	r0, [pc, #20]	; (800b0b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b09c:	f7ff fdbe 	bl	800ac1c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b0a0:	4b02      	ldr	r3, [pc, #8]	; (800b0ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3708      	adds	r7, #8
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	200010b4 	.word	0x200010b4
 800b0b0:	0800cbd4 	.word	0x0800cbd4

0800b0b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	6039      	str	r1, [r7, #0]
 800b0be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b0c0:	79fb      	ldrb	r3, [r7, #7]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d105      	bne.n	800b0d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b0c6:	683a      	ldr	r2, [r7, #0]
 800b0c8:	4907      	ldr	r1, [pc, #28]	; (800b0e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b0ca:	4808      	ldr	r0, [pc, #32]	; (800b0ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b0cc:	f7ff fda6 	bl	800ac1c <USBD_GetString>
 800b0d0:	e004      	b.n	800b0dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b0d2:	683a      	ldr	r2, [r7, #0]
 800b0d4:	4904      	ldr	r1, [pc, #16]	; (800b0e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b0d6:	4805      	ldr	r0, [pc, #20]	; (800b0ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b0d8:	f7ff fda0 	bl	800ac1c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b0dc:	4b02      	ldr	r3, [pc, #8]	; (800b0e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3708      	adds	r7, #8
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	200010b4 	.word	0x200010b4
 800b0ec:	0800cbe0 	.word	0x0800cbe0

0800b0f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b084      	sub	sp, #16
 800b0f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b0f6:	4b0f      	ldr	r3, [pc, #60]	; (800b134 <Get_SerialNum+0x44>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b0fc:	4b0e      	ldr	r3, [pc, #56]	; (800b138 <Get_SerialNum+0x48>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b102:	4b0e      	ldr	r3, [pc, #56]	; (800b13c <Get_SerialNum+0x4c>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b108:	68fa      	ldr	r2, [r7, #12]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	4413      	add	r3, r2
 800b10e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d009      	beq.n	800b12a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b116:	2208      	movs	r2, #8
 800b118:	4909      	ldr	r1, [pc, #36]	; (800b140 <Get_SerialNum+0x50>)
 800b11a:	68f8      	ldr	r0, [r7, #12]
 800b11c:	f000 f814 	bl	800b148 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b120:	2204      	movs	r2, #4
 800b122:	4908      	ldr	r1, [pc, #32]	; (800b144 <Get_SerialNum+0x54>)
 800b124:	68b8      	ldr	r0, [r7, #8]
 800b126:	f000 f80f 	bl	800b148 <IntToUnicode>
  }
}
 800b12a:	bf00      	nop
 800b12c:	3710      	adds	r7, #16
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop
 800b134:	1ffff7e8 	.word	0x1ffff7e8
 800b138:	1ffff7ec 	.word	0x1ffff7ec
 800b13c:	1ffff7f0 	.word	0x1ffff7f0
 800b140:	20000176 	.word	0x20000176
 800b144:	20000186 	.word	0x20000186

0800b148 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b148:	b480      	push	{r7}
 800b14a:	b087      	sub	sp, #28
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	4613      	mov	r3, r2
 800b154:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b156:	2300      	movs	r3, #0
 800b158:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b15a:	2300      	movs	r3, #0
 800b15c:	75fb      	strb	r3, [r7, #23]
 800b15e:	e027      	b.n	800b1b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	0f1b      	lsrs	r3, r3, #28
 800b164:	2b09      	cmp	r3, #9
 800b166:	d80b      	bhi.n	800b180 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	0f1b      	lsrs	r3, r3, #28
 800b16c:	b2da      	uxtb	r2, r3
 800b16e:	7dfb      	ldrb	r3, [r7, #23]
 800b170:	005b      	lsls	r3, r3, #1
 800b172:	4619      	mov	r1, r3
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	440b      	add	r3, r1
 800b178:	3230      	adds	r2, #48	; 0x30
 800b17a:	b2d2      	uxtb	r2, r2
 800b17c:	701a      	strb	r2, [r3, #0]
 800b17e:	e00a      	b.n	800b196 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	0f1b      	lsrs	r3, r3, #28
 800b184:	b2da      	uxtb	r2, r3
 800b186:	7dfb      	ldrb	r3, [r7, #23]
 800b188:	005b      	lsls	r3, r3, #1
 800b18a:	4619      	mov	r1, r3
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	440b      	add	r3, r1
 800b190:	3237      	adds	r2, #55	; 0x37
 800b192:	b2d2      	uxtb	r2, r2
 800b194:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	011b      	lsls	r3, r3, #4
 800b19a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b19c:	7dfb      	ldrb	r3, [r7, #23]
 800b19e:	005b      	lsls	r3, r3, #1
 800b1a0:	3301      	adds	r3, #1
 800b1a2:	68ba      	ldr	r2, [r7, #8]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b1aa:	7dfb      	ldrb	r3, [r7, #23]
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	75fb      	strb	r3, [r7, #23]
 800b1b0:	7dfa      	ldrb	r2, [r7, #23]
 800b1b2:	79fb      	ldrb	r3, [r7, #7]
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d3d3      	bcc.n	800b160 <IntToUnicode+0x18>
  }
}
 800b1b8:	bf00      	nop
 800b1ba:	bf00      	nop
 800b1bc:	371c      	adds	r7, #28
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bc80      	pop	{r7}
 800b1c2:	4770      	bx	lr

0800b1c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4a0d      	ldr	r2, [pc, #52]	; (800b208 <HAL_PCD_MspInit+0x44>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d113      	bne.n	800b1fe <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b1d6:	4b0d      	ldr	r3, [pc, #52]	; (800b20c <HAL_PCD_MspInit+0x48>)
 800b1d8:	69db      	ldr	r3, [r3, #28]
 800b1da:	4a0c      	ldr	r2, [pc, #48]	; (800b20c <HAL_PCD_MspInit+0x48>)
 800b1dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b1e0:	61d3      	str	r3, [r2, #28]
 800b1e2:	4b0a      	ldr	r3, [pc, #40]	; (800b20c <HAL_PCD_MspInit+0x48>)
 800b1e4:	69db      	ldr	r3, [r3, #28]
 800b1e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b1ea:	60fb      	str	r3, [r7, #12]
 800b1ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	2100      	movs	r1, #0
 800b1f2:	2014      	movs	r0, #20
 800b1f4:	f7f8 fcbf 	bl	8003b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b1f8:	2014      	movs	r0, #20
 800b1fa:	f7f8 fcd8 	bl	8003bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b1fe:	bf00      	nop
 800b200:	3710      	adds	r7, #16
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	40005c00 	.word	0x40005c00
 800b20c:	40021000 	.word	0x40021000

0800b210 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b224:	4619      	mov	r1, r3
 800b226:	4610      	mov	r0, r2
 800b228:	f7fe fdc7 	bl	8009dba <USBD_LL_SetupStage>
}
 800b22c:	bf00      	nop
 800b22e:	3708      	adds	r7, #8
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	460b      	mov	r3, r1
 800b23e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b246:	78fa      	ldrb	r2, [r7, #3]
 800b248:	6879      	ldr	r1, [r7, #4]
 800b24a:	4613      	mov	r3, r2
 800b24c:	009b      	lsls	r3, r3, #2
 800b24e:	4413      	add	r3, r2
 800b250:	00db      	lsls	r3, r3, #3
 800b252:	440b      	add	r3, r1
 800b254:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	78fb      	ldrb	r3, [r7, #3]
 800b25c:	4619      	mov	r1, r3
 800b25e:	f7fe fdf9 	bl	8009e54 <USBD_LL_DataOutStage>
}
 800b262:	bf00      	nop
 800b264:	3708      	adds	r7, #8
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}

0800b26a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b26a:	b580      	push	{r7, lr}
 800b26c:	b082      	sub	sp, #8
 800b26e:	af00      	add	r7, sp, #0
 800b270:	6078      	str	r0, [r7, #4]
 800b272:	460b      	mov	r3, r1
 800b274:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b27c:	78fa      	ldrb	r2, [r7, #3]
 800b27e:	6879      	ldr	r1, [r7, #4]
 800b280:	4613      	mov	r3, r2
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	4413      	add	r3, r2
 800b286:	00db      	lsls	r3, r3, #3
 800b288:	440b      	add	r3, r1
 800b28a:	333c      	adds	r3, #60	; 0x3c
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	78fb      	ldrb	r3, [r7, #3]
 800b290:	4619      	mov	r1, r3
 800b292:	f7fe fe50 	bl	8009f36 <USBD_LL_DataInStage>
}
 800b296:	bf00      	nop
 800b298:	3708      	adds	r7, #8
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}

0800b29e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b29e:	b580      	push	{r7, lr}
 800b2a0:	b082      	sub	sp, #8
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7fe ff60 	bl	800a172 <USBD_LL_SOF>
}
 800b2b2:	bf00      	nop
 800b2b4:	3708      	adds	r7, #8
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}

0800b2ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2ba:	b580      	push	{r7, lr}
 800b2bc:	b084      	sub	sp, #16
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	689b      	ldr	r3, [r3, #8]
 800b2ca:	2b02      	cmp	r3, #2
 800b2cc:	d001      	beq.n	800b2d2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b2ce:	f7f7 fbeb 	bl	8002aa8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b2d8:	7bfa      	ldrb	r2, [r7, #15]
 800b2da:	4611      	mov	r1, r2
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f7fe ff10 	bl	800a102 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7fe fec9 	bl	800a080 <USBD_LL_Reset>
}
 800b2ee:	bf00      	nop
 800b2f0:	3710      	adds	r7, #16
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
	...

0800b2f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b306:	4618      	mov	r0, r3
 800b308:	f7fe ff0a 	bl	800a120 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	699b      	ldr	r3, [r3, #24]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d005      	beq.n	800b320 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b314:	4b04      	ldr	r3, [pc, #16]	; (800b328 <HAL_PCD_SuspendCallback+0x30>)
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	4a03      	ldr	r2, [pc, #12]	; (800b328 <HAL_PCD_SuspendCallback+0x30>)
 800b31a:	f043 0306 	orr.w	r3, r3, #6
 800b31e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b320:	bf00      	nop
 800b322:	3708      	adds	r7, #8
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	e000ed00 	.word	0xe000ed00

0800b32c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b082      	sub	sp, #8
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7fe ff04 	bl	800a148 <USBD_LL_Resume>
}
 800b340:	bf00      	nop
 800b342:	3708      	adds	r7, #8
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b350:	4a28      	ldr	r2, [pc, #160]	; (800b3f4 <USBD_LL_Init+0xac>)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	4a26      	ldr	r2, [pc, #152]	; (800b3f4 <USBD_LL_Init+0xac>)
 800b35c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b360:	4b24      	ldr	r3, [pc, #144]	; (800b3f4 <USBD_LL_Init+0xac>)
 800b362:	4a25      	ldr	r2, [pc, #148]	; (800b3f8 <USBD_LL_Init+0xb0>)
 800b364:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b366:	4b23      	ldr	r3, [pc, #140]	; (800b3f4 <USBD_LL_Init+0xac>)
 800b368:	2208      	movs	r2, #8
 800b36a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b36c:	4b21      	ldr	r3, [pc, #132]	; (800b3f4 <USBD_LL_Init+0xac>)
 800b36e:	2202      	movs	r2, #2
 800b370:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b372:	4b20      	ldr	r3, [pc, #128]	; (800b3f4 <USBD_LL_Init+0xac>)
 800b374:	2200      	movs	r2, #0
 800b376:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b378:	4b1e      	ldr	r3, [pc, #120]	; (800b3f4 <USBD_LL_Init+0xac>)
 800b37a:	2200      	movs	r2, #0
 800b37c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b37e:	4b1d      	ldr	r3, [pc, #116]	; (800b3f4 <USBD_LL_Init+0xac>)
 800b380:	2200      	movs	r2, #0
 800b382:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b384:	481b      	ldr	r0, [pc, #108]	; (800b3f4 <USBD_LL_Init+0xac>)
 800b386:	f7f9 f82e 	bl	80043e6 <HAL_PCD_Init>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d001      	beq.n	800b394 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b390:	f7f7 fb8a 	bl	8002aa8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b39a:	2318      	movs	r3, #24
 800b39c:	2200      	movs	r2, #0
 800b39e:	2100      	movs	r1, #0
 800b3a0:	f7fa fb70 	bl	8005a84 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b3aa:	2358      	movs	r3, #88	; 0x58
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	2180      	movs	r1, #128	; 0x80
 800b3b0:	f7fa fb68 	bl	8005a84 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b3ba:	23c0      	movs	r3, #192	; 0xc0
 800b3bc:	2200      	movs	r2, #0
 800b3be:	2181      	movs	r1, #129	; 0x81
 800b3c0:	f7fa fb60 	bl	8005a84 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b3ca:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	2101      	movs	r1, #1
 800b3d2:	f7fa fb57 	bl	8005a84 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b3dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	2182      	movs	r1, #130	; 0x82
 800b3e4:	f7fa fb4e 	bl	8005a84 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b3e8:	2300      	movs	r3, #0
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3708      	adds	r7, #8
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	200012b4 	.word	0x200012b4
 800b3f8:	40005c00 	.word	0x40005c00

0800b3fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b404:	2300      	movs	r3, #0
 800b406:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b408:	2300      	movs	r3, #0
 800b40a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b412:	4618      	mov	r0, r3
 800b414:	f7f9 f8f2 	bl	80045fc <HAL_PCD_Start>
 800b418:	4603      	mov	r3, r0
 800b41a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b41c:	7bfb      	ldrb	r3, [r7, #15]
 800b41e:	4618      	mov	r0, r3
 800b420:	f000 f94e 	bl	800b6c0 <USBD_Get_USB_Status>
 800b424:	4603      	mov	r3, r0
 800b426:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b428:	7bbb      	ldrb	r3, [r7, #14]
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3710      	adds	r7, #16
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b432:	b580      	push	{r7, lr}
 800b434:	b084      	sub	sp, #16
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
 800b43a:	4608      	mov	r0, r1
 800b43c:	4611      	mov	r1, r2
 800b43e:	461a      	mov	r2, r3
 800b440:	4603      	mov	r3, r0
 800b442:	70fb      	strb	r3, [r7, #3]
 800b444:	460b      	mov	r3, r1
 800b446:	70bb      	strb	r3, [r7, #2]
 800b448:	4613      	mov	r3, r2
 800b44a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b44c:	2300      	movs	r3, #0
 800b44e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b450:	2300      	movs	r3, #0
 800b452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b45a:	78bb      	ldrb	r3, [r7, #2]
 800b45c:	883a      	ldrh	r2, [r7, #0]
 800b45e:	78f9      	ldrb	r1, [r7, #3]
 800b460:	f7f9 fa6c 	bl	800493c <HAL_PCD_EP_Open>
 800b464:	4603      	mov	r3, r0
 800b466:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b468:	7bfb      	ldrb	r3, [r7, #15]
 800b46a:	4618      	mov	r0, r3
 800b46c:	f000 f928 	bl	800b6c0 <USBD_Get_USB_Status>
 800b470:	4603      	mov	r3, r0
 800b472:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b474:	7bbb      	ldrb	r3, [r7, #14]
}
 800b476:	4618      	mov	r0, r3
 800b478:	3710      	adds	r7, #16
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}

0800b47e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b47e:	b580      	push	{r7, lr}
 800b480:	b084      	sub	sp, #16
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
 800b486:	460b      	mov	r3, r1
 800b488:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b48a:	2300      	movs	r3, #0
 800b48c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b48e:	2300      	movs	r3, #0
 800b490:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b498:	78fa      	ldrb	r2, [r7, #3]
 800b49a:	4611      	mov	r1, r2
 800b49c:	4618      	mov	r0, r3
 800b49e:	f7f9 fab3 	bl	8004a08 <HAL_PCD_EP_Close>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4a6:	7bfb      	ldrb	r3, [r7, #15]
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f000 f909 	bl	800b6c0 <USBD_Get_USB_Status>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3710      	adds	r7, #16
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4d6:	78fa      	ldrb	r2, [r7, #3]
 800b4d8:	4611      	mov	r1, r2
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7f9 fb73 	bl	8004bc6 <HAL_PCD_EP_SetStall>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4e4:	7bfb      	ldrb	r3, [r7, #15]
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f000 f8ea 	bl	800b6c0 <USBD_Get_USB_Status>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3710      	adds	r7, #16
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}

0800b4fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4fa:	b580      	push	{r7, lr}
 800b4fc:	b084      	sub	sp, #16
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
 800b502:	460b      	mov	r3, r1
 800b504:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b506:	2300      	movs	r3, #0
 800b508:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b50a:	2300      	movs	r3, #0
 800b50c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b514:	78fa      	ldrb	r2, [r7, #3]
 800b516:	4611      	mov	r1, r2
 800b518:	4618      	mov	r0, r3
 800b51a:	f7f9 fbb4 	bl	8004c86 <HAL_PCD_EP_ClrStall>
 800b51e:	4603      	mov	r3, r0
 800b520:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b522:	7bfb      	ldrb	r3, [r7, #15]
 800b524:	4618      	mov	r0, r3
 800b526:	f000 f8cb 	bl	800b6c0 <USBD_Get_USB_Status>
 800b52a:	4603      	mov	r3, r0
 800b52c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b52e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b530:	4618      	mov	r0, r3
 800b532:	3710      	adds	r7, #16
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b538:	b480      	push	{r7}
 800b53a:	b085      	sub	sp, #20
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	460b      	mov	r3, r1
 800b542:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b54a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b54c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b550:	2b00      	cmp	r3, #0
 800b552:	da0c      	bge.n	800b56e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b554:	78fb      	ldrb	r3, [r7, #3]
 800b556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b55a:	68f9      	ldr	r1, [r7, #12]
 800b55c:	1c5a      	adds	r2, r3, #1
 800b55e:	4613      	mov	r3, r2
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	4413      	add	r3, r2
 800b564:	00db      	lsls	r3, r3, #3
 800b566:	440b      	add	r3, r1
 800b568:	3302      	adds	r3, #2
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	e00b      	b.n	800b586 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b56e:	78fb      	ldrb	r3, [r7, #3]
 800b570:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b574:	68f9      	ldr	r1, [r7, #12]
 800b576:	4613      	mov	r3, r2
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	4413      	add	r3, r2
 800b57c:	00db      	lsls	r3, r3, #3
 800b57e:	440b      	add	r3, r1
 800b580:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b584:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b586:	4618      	mov	r0, r3
 800b588:	3714      	adds	r7, #20
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bc80      	pop	{r7}
 800b58e:	4770      	bx	lr

0800b590 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	460b      	mov	r3, r1
 800b59a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b59c:	2300      	movs	r3, #0
 800b59e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5aa:	78fa      	ldrb	r2, [r7, #3]
 800b5ac:	4611      	mov	r1, r2
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7f9 f99f 	bl	80048f2 <HAL_PCD_SetAddress>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5b8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f000 f880 	bl	800b6c0 <USBD_Get_USB_Status>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3710      	adds	r7, #16
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}

0800b5ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b5ce:	b580      	push	{r7, lr}
 800b5d0:	b086      	sub	sp, #24
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	60f8      	str	r0, [r7, #12]
 800b5d6:	607a      	str	r2, [r7, #4]
 800b5d8:	461a      	mov	r2, r3
 800b5da:	460b      	mov	r3, r1
 800b5dc:	72fb      	strb	r3, [r7, #11]
 800b5de:	4613      	mov	r3, r2
 800b5e0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b5f0:	893b      	ldrh	r3, [r7, #8]
 800b5f2:	7af9      	ldrb	r1, [r7, #11]
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	f7f9 faa3 	bl	8004b40 <HAL_PCD_EP_Transmit>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5fe:	7dfb      	ldrb	r3, [r7, #23]
 800b600:	4618      	mov	r0, r3
 800b602:	f000 f85d 	bl	800b6c0 <USBD_Get_USB_Status>
 800b606:	4603      	mov	r3, r0
 800b608:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b60a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3718      	adds	r7, #24
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b086      	sub	sp, #24
 800b618:	af00      	add	r7, sp, #0
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	607a      	str	r2, [r7, #4]
 800b61e:	461a      	mov	r2, r3
 800b620:	460b      	mov	r3, r1
 800b622:	72fb      	strb	r3, [r7, #11]
 800b624:	4613      	mov	r3, r2
 800b626:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b628:	2300      	movs	r3, #0
 800b62a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b62c:	2300      	movs	r3, #0
 800b62e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b636:	893b      	ldrh	r3, [r7, #8]
 800b638:	7af9      	ldrb	r1, [r7, #11]
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	f7f9 fa2c 	bl	8004a98 <HAL_PCD_EP_Receive>
 800b640:	4603      	mov	r3, r0
 800b642:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b644:	7dfb      	ldrb	r3, [r7, #23]
 800b646:	4618      	mov	r0, r3
 800b648:	f000 f83a 	bl	800b6c0 <USBD_Get_USB_Status>
 800b64c:	4603      	mov	r3, r0
 800b64e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b650:	7dbb      	ldrb	r3, [r7, #22]
}
 800b652:	4618      	mov	r0, r3
 800b654:	3718      	adds	r7, #24
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}

0800b65a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b65a:	b580      	push	{r7, lr}
 800b65c:	b082      	sub	sp, #8
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
 800b662:	460b      	mov	r3, r1
 800b664:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b66c:	78fa      	ldrb	r2, [r7, #3]
 800b66e:	4611      	mov	r1, r2
 800b670:	4618      	mov	r0, r3
 800b672:	f7f9 fa4e 	bl	8004b12 <HAL_PCD_EP_GetRxCount>
 800b676:	4603      	mov	r3, r0
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3708      	adds	r7, #8
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b680:	b480      	push	{r7}
 800b682:	b083      	sub	sp, #12
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b688:	4b02      	ldr	r3, [pc, #8]	; (800b694 <USBD_static_malloc+0x14>)
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	370c      	adds	r7, #12
 800b68e:	46bd      	mov	sp, r7
 800b690:	bc80      	pop	{r7}
 800b692:	4770      	bx	lr
 800b694:	20000284 	.word	0x20000284

0800b698 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b698:	b480      	push	{r7}
 800b69a:	b083      	sub	sp, #12
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]

}
 800b6a0:	bf00      	nop
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bc80      	pop	{r7}
 800b6a8:	4770      	bx	lr

0800b6aa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6aa:	b480      	push	{r7}
 800b6ac:	b083      	sub	sp, #12
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b6b6:	bf00      	nop
 800b6b8:	370c      	adds	r7, #12
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bc80      	pop	{r7}
 800b6be:	4770      	bx	lr

0800b6c0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b085      	sub	sp, #20
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b6ce:	79fb      	ldrb	r3, [r7, #7]
 800b6d0:	2b03      	cmp	r3, #3
 800b6d2:	d817      	bhi.n	800b704 <USBD_Get_USB_Status+0x44>
 800b6d4:	a201      	add	r2, pc, #4	; (adr r2, 800b6dc <USBD_Get_USB_Status+0x1c>)
 800b6d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6da:	bf00      	nop
 800b6dc:	0800b6ed 	.word	0x0800b6ed
 800b6e0:	0800b6f3 	.word	0x0800b6f3
 800b6e4:	0800b6f9 	.word	0x0800b6f9
 800b6e8:	0800b6ff 	.word	0x0800b6ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	73fb      	strb	r3, [r7, #15]
    break;
 800b6f0:	e00b      	b.n	800b70a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b6f2:	2302      	movs	r3, #2
 800b6f4:	73fb      	strb	r3, [r7, #15]
    break;
 800b6f6:	e008      	b.n	800b70a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	73fb      	strb	r3, [r7, #15]
    break;
 800b6fc:	e005      	b.n	800b70a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b6fe:	2302      	movs	r3, #2
 800b700:	73fb      	strb	r3, [r7, #15]
    break;
 800b702:	e002      	b.n	800b70a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b704:	2302      	movs	r3, #2
 800b706:	73fb      	strb	r3, [r7, #15]
    break;
 800b708:	bf00      	nop
  }
  return usb_status;
 800b70a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3714      	adds	r7, #20
 800b710:	46bd      	mov	sp, r7
 800b712:	bc80      	pop	{r7}
 800b714:	4770      	bx	lr
 800b716:	bf00      	nop

0800b718 <__errno>:
 800b718:	4b01      	ldr	r3, [pc, #4]	; (800b720 <__errno+0x8>)
 800b71a:	6818      	ldr	r0, [r3, #0]
 800b71c:	4770      	bx	lr
 800b71e:	bf00      	nop
 800b720:	20000190 	.word	0x20000190

0800b724 <__libc_init_array>:
 800b724:	b570      	push	{r4, r5, r6, lr}
 800b726:	2600      	movs	r6, #0
 800b728:	4d0c      	ldr	r5, [pc, #48]	; (800b75c <__libc_init_array+0x38>)
 800b72a:	4c0d      	ldr	r4, [pc, #52]	; (800b760 <__libc_init_array+0x3c>)
 800b72c:	1b64      	subs	r4, r4, r5
 800b72e:	10a4      	asrs	r4, r4, #2
 800b730:	42a6      	cmp	r6, r4
 800b732:	d109      	bne.n	800b748 <__libc_init_array+0x24>
 800b734:	f001 f9d4 	bl	800cae0 <_init>
 800b738:	2600      	movs	r6, #0
 800b73a:	4d0a      	ldr	r5, [pc, #40]	; (800b764 <__libc_init_array+0x40>)
 800b73c:	4c0a      	ldr	r4, [pc, #40]	; (800b768 <__libc_init_array+0x44>)
 800b73e:	1b64      	subs	r4, r4, r5
 800b740:	10a4      	asrs	r4, r4, #2
 800b742:	42a6      	cmp	r6, r4
 800b744:	d105      	bne.n	800b752 <__libc_init_array+0x2e>
 800b746:	bd70      	pop	{r4, r5, r6, pc}
 800b748:	f855 3b04 	ldr.w	r3, [r5], #4
 800b74c:	4798      	blx	r3
 800b74e:	3601      	adds	r6, #1
 800b750:	e7ee      	b.n	800b730 <__libc_init_array+0xc>
 800b752:	f855 3b04 	ldr.w	r3, [r5], #4
 800b756:	4798      	blx	r3
 800b758:	3601      	adds	r6, #1
 800b75a:	e7f2      	b.n	800b742 <__libc_init_array+0x1e>
 800b75c:	0800cca0 	.word	0x0800cca0
 800b760:	0800cca0 	.word	0x0800cca0
 800b764:	0800cca0 	.word	0x0800cca0
 800b768:	0800cca4 	.word	0x0800cca4

0800b76c <memcpy>:
 800b76c:	440a      	add	r2, r1
 800b76e:	4291      	cmp	r1, r2
 800b770:	f100 33ff 	add.w	r3, r0, #4294967295
 800b774:	d100      	bne.n	800b778 <memcpy+0xc>
 800b776:	4770      	bx	lr
 800b778:	b510      	push	{r4, lr}
 800b77a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b77e:	4291      	cmp	r1, r2
 800b780:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b784:	d1f9      	bne.n	800b77a <memcpy+0xe>
 800b786:	bd10      	pop	{r4, pc}

0800b788 <memset>:
 800b788:	4603      	mov	r3, r0
 800b78a:	4402      	add	r2, r0
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d100      	bne.n	800b792 <memset+0xa>
 800b790:	4770      	bx	lr
 800b792:	f803 1b01 	strb.w	r1, [r3], #1
 800b796:	e7f9      	b.n	800b78c <memset+0x4>

0800b798 <iprintf>:
 800b798:	b40f      	push	{r0, r1, r2, r3}
 800b79a:	4b0a      	ldr	r3, [pc, #40]	; (800b7c4 <iprintf+0x2c>)
 800b79c:	b513      	push	{r0, r1, r4, lr}
 800b79e:	681c      	ldr	r4, [r3, #0]
 800b7a0:	b124      	cbz	r4, 800b7ac <iprintf+0x14>
 800b7a2:	69a3      	ldr	r3, [r4, #24]
 800b7a4:	b913      	cbnz	r3, 800b7ac <iprintf+0x14>
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	f000 f886 	bl	800b8b8 <__sinit>
 800b7ac:	ab05      	add	r3, sp, #20
 800b7ae:	4620      	mov	r0, r4
 800b7b0:	9a04      	ldr	r2, [sp, #16]
 800b7b2:	68a1      	ldr	r1, [r4, #8]
 800b7b4:	9301      	str	r3, [sp, #4]
 800b7b6:	f000 fafd 	bl	800bdb4 <_vfiprintf_r>
 800b7ba:	b002      	add	sp, #8
 800b7bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7c0:	b004      	add	sp, #16
 800b7c2:	4770      	bx	lr
 800b7c4:	20000190 	.word	0x20000190

0800b7c8 <siprintf>:
 800b7c8:	b40e      	push	{r1, r2, r3}
 800b7ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b7ce:	b500      	push	{lr}
 800b7d0:	b09c      	sub	sp, #112	; 0x70
 800b7d2:	ab1d      	add	r3, sp, #116	; 0x74
 800b7d4:	9002      	str	r0, [sp, #8]
 800b7d6:	9006      	str	r0, [sp, #24]
 800b7d8:	9107      	str	r1, [sp, #28]
 800b7da:	9104      	str	r1, [sp, #16]
 800b7dc:	4808      	ldr	r0, [pc, #32]	; (800b800 <siprintf+0x38>)
 800b7de:	4909      	ldr	r1, [pc, #36]	; (800b804 <siprintf+0x3c>)
 800b7e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7e4:	9105      	str	r1, [sp, #20]
 800b7e6:	6800      	ldr	r0, [r0, #0]
 800b7e8:	a902      	add	r1, sp, #8
 800b7ea:	9301      	str	r3, [sp, #4]
 800b7ec:	f000 f9ba 	bl	800bb64 <_svfiprintf_r>
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	9b02      	ldr	r3, [sp, #8]
 800b7f4:	701a      	strb	r2, [r3, #0]
 800b7f6:	b01c      	add	sp, #112	; 0x70
 800b7f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7fc:	b003      	add	sp, #12
 800b7fe:	4770      	bx	lr
 800b800:	20000190 	.word	0x20000190
 800b804:	ffff0208 	.word	0xffff0208

0800b808 <std>:
 800b808:	2300      	movs	r3, #0
 800b80a:	b510      	push	{r4, lr}
 800b80c:	4604      	mov	r4, r0
 800b80e:	e9c0 3300 	strd	r3, r3, [r0]
 800b812:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b816:	6083      	str	r3, [r0, #8]
 800b818:	8181      	strh	r1, [r0, #12]
 800b81a:	6643      	str	r3, [r0, #100]	; 0x64
 800b81c:	81c2      	strh	r2, [r0, #14]
 800b81e:	6183      	str	r3, [r0, #24]
 800b820:	4619      	mov	r1, r3
 800b822:	2208      	movs	r2, #8
 800b824:	305c      	adds	r0, #92	; 0x5c
 800b826:	f7ff ffaf 	bl	800b788 <memset>
 800b82a:	4b05      	ldr	r3, [pc, #20]	; (800b840 <std+0x38>)
 800b82c:	6224      	str	r4, [r4, #32]
 800b82e:	6263      	str	r3, [r4, #36]	; 0x24
 800b830:	4b04      	ldr	r3, [pc, #16]	; (800b844 <std+0x3c>)
 800b832:	62a3      	str	r3, [r4, #40]	; 0x28
 800b834:	4b04      	ldr	r3, [pc, #16]	; (800b848 <std+0x40>)
 800b836:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b838:	4b04      	ldr	r3, [pc, #16]	; (800b84c <std+0x44>)
 800b83a:	6323      	str	r3, [r4, #48]	; 0x30
 800b83c:	bd10      	pop	{r4, pc}
 800b83e:	bf00      	nop
 800b840:	0800c361 	.word	0x0800c361
 800b844:	0800c383 	.word	0x0800c383
 800b848:	0800c3bb 	.word	0x0800c3bb
 800b84c:	0800c3df 	.word	0x0800c3df

0800b850 <_cleanup_r>:
 800b850:	4901      	ldr	r1, [pc, #4]	; (800b858 <_cleanup_r+0x8>)
 800b852:	f000 b8af 	b.w	800b9b4 <_fwalk_reent>
 800b856:	bf00      	nop
 800b858:	0800c6b9 	.word	0x0800c6b9

0800b85c <__sfmoreglue>:
 800b85c:	b570      	push	{r4, r5, r6, lr}
 800b85e:	2568      	movs	r5, #104	; 0x68
 800b860:	1e4a      	subs	r2, r1, #1
 800b862:	4355      	muls	r5, r2
 800b864:	460e      	mov	r6, r1
 800b866:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b86a:	f000 f8c5 	bl	800b9f8 <_malloc_r>
 800b86e:	4604      	mov	r4, r0
 800b870:	b140      	cbz	r0, 800b884 <__sfmoreglue+0x28>
 800b872:	2100      	movs	r1, #0
 800b874:	e9c0 1600 	strd	r1, r6, [r0]
 800b878:	300c      	adds	r0, #12
 800b87a:	60a0      	str	r0, [r4, #8]
 800b87c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b880:	f7ff ff82 	bl	800b788 <memset>
 800b884:	4620      	mov	r0, r4
 800b886:	bd70      	pop	{r4, r5, r6, pc}

0800b888 <__sfp_lock_acquire>:
 800b888:	4801      	ldr	r0, [pc, #4]	; (800b890 <__sfp_lock_acquire+0x8>)
 800b88a:	f000 b8b3 	b.w	800b9f4 <__retarget_lock_acquire_recursive>
 800b88e:	bf00      	nop
 800b890:	200015a8 	.word	0x200015a8

0800b894 <__sfp_lock_release>:
 800b894:	4801      	ldr	r0, [pc, #4]	; (800b89c <__sfp_lock_release+0x8>)
 800b896:	f000 b8ae 	b.w	800b9f6 <__retarget_lock_release_recursive>
 800b89a:	bf00      	nop
 800b89c:	200015a8 	.word	0x200015a8

0800b8a0 <__sinit_lock_acquire>:
 800b8a0:	4801      	ldr	r0, [pc, #4]	; (800b8a8 <__sinit_lock_acquire+0x8>)
 800b8a2:	f000 b8a7 	b.w	800b9f4 <__retarget_lock_acquire_recursive>
 800b8a6:	bf00      	nop
 800b8a8:	200015a3 	.word	0x200015a3

0800b8ac <__sinit_lock_release>:
 800b8ac:	4801      	ldr	r0, [pc, #4]	; (800b8b4 <__sinit_lock_release+0x8>)
 800b8ae:	f000 b8a2 	b.w	800b9f6 <__retarget_lock_release_recursive>
 800b8b2:	bf00      	nop
 800b8b4:	200015a3 	.word	0x200015a3

0800b8b8 <__sinit>:
 800b8b8:	b510      	push	{r4, lr}
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	f7ff fff0 	bl	800b8a0 <__sinit_lock_acquire>
 800b8c0:	69a3      	ldr	r3, [r4, #24]
 800b8c2:	b11b      	cbz	r3, 800b8cc <__sinit+0x14>
 800b8c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8c8:	f7ff bff0 	b.w	800b8ac <__sinit_lock_release>
 800b8cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b8d0:	6523      	str	r3, [r4, #80]	; 0x50
 800b8d2:	4b13      	ldr	r3, [pc, #76]	; (800b920 <__sinit+0x68>)
 800b8d4:	4a13      	ldr	r2, [pc, #76]	; (800b924 <__sinit+0x6c>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b8da:	42a3      	cmp	r3, r4
 800b8dc:	bf08      	it	eq
 800b8de:	2301      	moveq	r3, #1
 800b8e0:	4620      	mov	r0, r4
 800b8e2:	bf08      	it	eq
 800b8e4:	61a3      	streq	r3, [r4, #24]
 800b8e6:	f000 f81f 	bl	800b928 <__sfp>
 800b8ea:	6060      	str	r0, [r4, #4]
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	f000 f81b 	bl	800b928 <__sfp>
 800b8f2:	60a0      	str	r0, [r4, #8]
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	f000 f817 	bl	800b928 <__sfp>
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	2104      	movs	r1, #4
 800b8fe:	60e0      	str	r0, [r4, #12]
 800b900:	6860      	ldr	r0, [r4, #4]
 800b902:	f7ff ff81 	bl	800b808 <std>
 800b906:	2201      	movs	r2, #1
 800b908:	2109      	movs	r1, #9
 800b90a:	68a0      	ldr	r0, [r4, #8]
 800b90c:	f7ff ff7c 	bl	800b808 <std>
 800b910:	2202      	movs	r2, #2
 800b912:	2112      	movs	r1, #18
 800b914:	68e0      	ldr	r0, [r4, #12]
 800b916:	f7ff ff77 	bl	800b808 <std>
 800b91a:	2301      	movs	r3, #1
 800b91c:	61a3      	str	r3, [r4, #24]
 800b91e:	e7d1      	b.n	800b8c4 <__sinit+0xc>
 800b920:	0800cc08 	.word	0x0800cc08
 800b924:	0800b851 	.word	0x0800b851

0800b928 <__sfp>:
 800b928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b92a:	4607      	mov	r7, r0
 800b92c:	f7ff ffac 	bl	800b888 <__sfp_lock_acquire>
 800b930:	4b1e      	ldr	r3, [pc, #120]	; (800b9ac <__sfp+0x84>)
 800b932:	681e      	ldr	r6, [r3, #0]
 800b934:	69b3      	ldr	r3, [r6, #24]
 800b936:	b913      	cbnz	r3, 800b93e <__sfp+0x16>
 800b938:	4630      	mov	r0, r6
 800b93a:	f7ff ffbd 	bl	800b8b8 <__sinit>
 800b93e:	3648      	adds	r6, #72	; 0x48
 800b940:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b944:	3b01      	subs	r3, #1
 800b946:	d503      	bpl.n	800b950 <__sfp+0x28>
 800b948:	6833      	ldr	r3, [r6, #0]
 800b94a:	b30b      	cbz	r3, 800b990 <__sfp+0x68>
 800b94c:	6836      	ldr	r6, [r6, #0]
 800b94e:	e7f7      	b.n	800b940 <__sfp+0x18>
 800b950:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b954:	b9d5      	cbnz	r5, 800b98c <__sfp+0x64>
 800b956:	4b16      	ldr	r3, [pc, #88]	; (800b9b0 <__sfp+0x88>)
 800b958:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b95c:	60e3      	str	r3, [r4, #12]
 800b95e:	6665      	str	r5, [r4, #100]	; 0x64
 800b960:	f000 f847 	bl	800b9f2 <__retarget_lock_init_recursive>
 800b964:	f7ff ff96 	bl	800b894 <__sfp_lock_release>
 800b968:	2208      	movs	r2, #8
 800b96a:	4629      	mov	r1, r5
 800b96c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b970:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b974:	6025      	str	r5, [r4, #0]
 800b976:	61a5      	str	r5, [r4, #24]
 800b978:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b97c:	f7ff ff04 	bl	800b788 <memset>
 800b980:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b984:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b988:	4620      	mov	r0, r4
 800b98a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b98c:	3468      	adds	r4, #104	; 0x68
 800b98e:	e7d9      	b.n	800b944 <__sfp+0x1c>
 800b990:	2104      	movs	r1, #4
 800b992:	4638      	mov	r0, r7
 800b994:	f7ff ff62 	bl	800b85c <__sfmoreglue>
 800b998:	4604      	mov	r4, r0
 800b99a:	6030      	str	r0, [r6, #0]
 800b99c:	2800      	cmp	r0, #0
 800b99e:	d1d5      	bne.n	800b94c <__sfp+0x24>
 800b9a0:	f7ff ff78 	bl	800b894 <__sfp_lock_release>
 800b9a4:	230c      	movs	r3, #12
 800b9a6:	603b      	str	r3, [r7, #0]
 800b9a8:	e7ee      	b.n	800b988 <__sfp+0x60>
 800b9aa:	bf00      	nop
 800b9ac:	0800cc08 	.word	0x0800cc08
 800b9b0:	ffff0001 	.word	0xffff0001

0800b9b4 <_fwalk_reent>:
 800b9b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9b8:	4606      	mov	r6, r0
 800b9ba:	4688      	mov	r8, r1
 800b9bc:	2700      	movs	r7, #0
 800b9be:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b9c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b9c6:	f1b9 0901 	subs.w	r9, r9, #1
 800b9ca:	d505      	bpl.n	800b9d8 <_fwalk_reent+0x24>
 800b9cc:	6824      	ldr	r4, [r4, #0]
 800b9ce:	2c00      	cmp	r4, #0
 800b9d0:	d1f7      	bne.n	800b9c2 <_fwalk_reent+0xe>
 800b9d2:	4638      	mov	r0, r7
 800b9d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9d8:	89ab      	ldrh	r3, [r5, #12]
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d907      	bls.n	800b9ee <_fwalk_reent+0x3a>
 800b9de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	d003      	beq.n	800b9ee <_fwalk_reent+0x3a>
 800b9e6:	4629      	mov	r1, r5
 800b9e8:	4630      	mov	r0, r6
 800b9ea:	47c0      	blx	r8
 800b9ec:	4307      	orrs	r7, r0
 800b9ee:	3568      	adds	r5, #104	; 0x68
 800b9f0:	e7e9      	b.n	800b9c6 <_fwalk_reent+0x12>

0800b9f2 <__retarget_lock_init_recursive>:
 800b9f2:	4770      	bx	lr

0800b9f4 <__retarget_lock_acquire_recursive>:
 800b9f4:	4770      	bx	lr

0800b9f6 <__retarget_lock_release_recursive>:
 800b9f6:	4770      	bx	lr

0800b9f8 <_malloc_r>:
 800b9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9fa:	1ccd      	adds	r5, r1, #3
 800b9fc:	f025 0503 	bic.w	r5, r5, #3
 800ba00:	3508      	adds	r5, #8
 800ba02:	2d0c      	cmp	r5, #12
 800ba04:	bf38      	it	cc
 800ba06:	250c      	movcc	r5, #12
 800ba08:	2d00      	cmp	r5, #0
 800ba0a:	4606      	mov	r6, r0
 800ba0c:	db01      	blt.n	800ba12 <_malloc_r+0x1a>
 800ba0e:	42a9      	cmp	r1, r5
 800ba10:	d903      	bls.n	800ba1a <_malloc_r+0x22>
 800ba12:	230c      	movs	r3, #12
 800ba14:	6033      	str	r3, [r6, #0]
 800ba16:	2000      	movs	r0, #0
 800ba18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba1a:	f000 ff27 	bl	800c86c <__malloc_lock>
 800ba1e:	4921      	ldr	r1, [pc, #132]	; (800baa4 <_malloc_r+0xac>)
 800ba20:	680a      	ldr	r2, [r1, #0]
 800ba22:	4614      	mov	r4, r2
 800ba24:	b99c      	cbnz	r4, 800ba4e <_malloc_r+0x56>
 800ba26:	4f20      	ldr	r7, [pc, #128]	; (800baa8 <_malloc_r+0xb0>)
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	b923      	cbnz	r3, 800ba36 <_malloc_r+0x3e>
 800ba2c:	4621      	mov	r1, r4
 800ba2e:	4630      	mov	r0, r6
 800ba30:	f000 fc86 	bl	800c340 <_sbrk_r>
 800ba34:	6038      	str	r0, [r7, #0]
 800ba36:	4629      	mov	r1, r5
 800ba38:	4630      	mov	r0, r6
 800ba3a:	f000 fc81 	bl	800c340 <_sbrk_r>
 800ba3e:	1c43      	adds	r3, r0, #1
 800ba40:	d123      	bne.n	800ba8a <_malloc_r+0x92>
 800ba42:	230c      	movs	r3, #12
 800ba44:	4630      	mov	r0, r6
 800ba46:	6033      	str	r3, [r6, #0]
 800ba48:	f000 ff16 	bl	800c878 <__malloc_unlock>
 800ba4c:	e7e3      	b.n	800ba16 <_malloc_r+0x1e>
 800ba4e:	6823      	ldr	r3, [r4, #0]
 800ba50:	1b5b      	subs	r3, r3, r5
 800ba52:	d417      	bmi.n	800ba84 <_malloc_r+0x8c>
 800ba54:	2b0b      	cmp	r3, #11
 800ba56:	d903      	bls.n	800ba60 <_malloc_r+0x68>
 800ba58:	6023      	str	r3, [r4, #0]
 800ba5a:	441c      	add	r4, r3
 800ba5c:	6025      	str	r5, [r4, #0]
 800ba5e:	e004      	b.n	800ba6a <_malloc_r+0x72>
 800ba60:	6863      	ldr	r3, [r4, #4]
 800ba62:	42a2      	cmp	r2, r4
 800ba64:	bf0c      	ite	eq
 800ba66:	600b      	streq	r3, [r1, #0]
 800ba68:	6053      	strne	r3, [r2, #4]
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	f000 ff04 	bl	800c878 <__malloc_unlock>
 800ba70:	f104 000b 	add.w	r0, r4, #11
 800ba74:	1d23      	adds	r3, r4, #4
 800ba76:	f020 0007 	bic.w	r0, r0, #7
 800ba7a:	1ac2      	subs	r2, r0, r3
 800ba7c:	d0cc      	beq.n	800ba18 <_malloc_r+0x20>
 800ba7e:	1a1b      	subs	r3, r3, r0
 800ba80:	50a3      	str	r3, [r4, r2]
 800ba82:	e7c9      	b.n	800ba18 <_malloc_r+0x20>
 800ba84:	4622      	mov	r2, r4
 800ba86:	6864      	ldr	r4, [r4, #4]
 800ba88:	e7cc      	b.n	800ba24 <_malloc_r+0x2c>
 800ba8a:	1cc4      	adds	r4, r0, #3
 800ba8c:	f024 0403 	bic.w	r4, r4, #3
 800ba90:	42a0      	cmp	r0, r4
 800ba92:	d0e3      	beq.n	800ba5c <_malloc_r+0x64>
 800ba94:	1a21      	subs	r1, r4, r0
 800ba96:	4630      	mov	r0, r6
 800ba98:	f000 fc52 	bl	800c340 <_sbrk_r>
 800ba9c:	3001      	adds	r0, #1
 800ba9e:	d1dd      	bne.n	800ba5c <_malloc_r+0x64>
 800baa0:	e7cf      	b.n	800ba42 <_malloc_r+0x4a>
 800baa2:	bf00      	nop
 800baa4:	200004a4 	.word	0x200004a4
 800baa8:	200004a8 	.word	0x200004a8

0800baac <__ssputs_r>:
 800baac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bab0:	688e      	ldr	r6, [r1, #8]
 800bab2:	4682      	mov	sl, r0
 800bab4:	429e      	cmp	r6, r3
 800bab6:	460c      	mov	r4, r1
 800bab8:	4690      	mov	r8, r2
 800baba:	461f      	mov	r7, r3
 800babc:	d838      	bhi.n	800bb30 <__ssputs_r+0x84>
 800babe:	898a      	ldrh	r2, [r1, #12]
 800bac0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bac4:	d032      	beq.n	800bb2c <__ssputs_r+0x80>
 800bac6:	6825      	ldr	r5, [r4, #0]
 800bac8:	6909      	ldr	r1, [r1, #16]
 800baca:	3301      	adds	r3, #1
 800bacc:	eba5 0901 	sub.w	r9, r5, r1
 800bad0:	6965      	ldr	r5, [r4, #20]
 800bad2:	444b      	add	r3, r9
 800bad4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bad8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800badc:	106d      	asrs	r5, r5, #1
 800bade:	429d      	cmp	r5, r3
 800bae0:	bf38      	it	cc
 800bae2:	461d      	movcc	r5, r3
 800bae4:	0553      	lsls	r3, r2, #21
 800bae6:	d531      	bpl.n	800bb4c <__ssputs_r+0xa0>
 800bae8:	4629      	mov	r1, r5
 800baea:	f7ff ff85 	bl	800b9f8 <_malloc_r>
 800baee:	4606      	mov	r6, r0
 800baf0:	b950      	cbnz	r0, 800bb08 <__ssputs_r+0x5c>
 800baf2:	230c      	movs	r3, #12
 800baf4:	f04f 30ff 	mov.w	r0, #4294967295
 800baf8:	f8ca 3000 	str.w	r3, [sl]
 800bafc:	89a3      	ldrh	r3, [r4, #12]
 800bafe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb02:	81a3      	strh	r3, [r4, #12]
 800bb04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb08:	464a      	mov	r2, r9
 800bb0a:	6921      	ldr	r1, [r4, #16]
 800bb0c:	f7ff fe2e 	bl	800b76c <memcpy>
 800bb10:	89a3      	ldrh	r3, [r4, #12]
 800bb12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb1a:	81a3      	strh	r3, [r4, #12]
 800bb1c:	6126      	str	r6, [r4, #16]
 800bb1e:	444e      	add	r6, r9
 800bb20:	6026      	str	r6, [r4, #0]
 800bb22:	463e      	mov	r6, r7
 800bb24:	6165      	str	r5, [r4, #20]
 800bb26:	eba5 0509 	sub.w	r5, r5, r9
 800bb2a:	60a5      	str	r5, [r4, #8]
 800bb2c:	42be      	cmp	r6, r7
 800bb2e:	d900      	bls.n	800bb32 <__ssputs_r+0x86>
 800bb30:	463e      	mov	r6, r7
 800bb32:	4632      	mov	r2, r6
 800bb34:	4641      	mov	r1, r8
 800bb36:	6820      	ldr	r0, [r4, #0]
 800bb38:	f000 fe7e 	bl	800c838 <memmove>
 800bb3c:	68a3      	ldr	r3, [r4, #8]
 800bb3e:	6822      	ldr	r2, [r4, #0]
 800bb40:	1b9b      	subs	r3, r3, r6
 800bb42:	4432      	add	r2, r6
 800bb44:	2000      	movs	r0, #0
 800bb46:	60a3      	str	r3, [r4, #8]
 800bb48:	6022      	str	r2, [r4, #0]
 800bb4a:	e7db      	b.n	800bb04 <__ssputs_r+0x58>
 800bb4c:	462a      	mov	r2, r5
 800bb4e:	f000 fee5 	bl	800c91c <_realloc_r>
 800bb52:	4606      	mov	r6, r0
 800bb54:	2800      	cmp	r0, #0
 800bb56:	d1e1      	bne.n	800bb1c <__ssputs_r+0x70>
 800bb58:	4650      	mov	r0, sl
 800bb5a:	6921      	ldr	r1, [r4, #16]
 800bb5c:	f000 fe92 	bl	800c884 <_free_r>
 800bb60:	e7c7      	b.n	800baf2 <__ssputs_r+0x46>
	...

0800bb64 <_svfiprintf_r>:
 800bb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb68:	4698      	mov	r8, r3
 800bb6a:	898b      	ldrh	r3, [r1, #12]
 800bb6c:	4607      	mov	r7, r0
 800bb6e:	061b      	lsls	r3, r3, #24
 800bb70:	460d      	mov	r5, r1
 800bb72:	4614      	mov	r4, r2
 800bb74:	b09d      	sub	sp, #116	; 0x74
 800bb76:	d50e      	bpl.n	800bb96 <_svfiprintf_r+0x32>
 800bb78:	690b      	ldr	r3, [r1, #16]
 800bb7a:	b963      	cbnz	r3, 800bb96 <_svfiprintf_r+0x32>
 800bb7c:	2140      	movs	r1, #64	; 0x40
 800bb7e:	f7ff ff3b 	bl	800b9f8 <_malloc_r>
 800bb82:	6028      	str	r0, [r5, #0]
 800bb84:	6128      	str	r0, [r5, #16]
 800bb86:	b920      	cbnz	r0, 800bb92 <_svfiprintf_r+0x2e>
 800bb88:	230c      	movs	r3, #12
 800bb8a:	603b      	str	r3, [r7, #0]
 800bb8c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb90:	e0d1      	b.n	800bd36 <_svfiprintf_r+0x1d2>
 800bb92:	2340      	movs	r3, #64	; 0x40
 800bb94:	616b      	str	r3, [r5, #20]
 800bb96:	2300      	movs	r3, #0
 800bb98:	9309      	str	r3, [sp, #36]	; 0x24
 800bb9a:	2320      	movs	r3, #32
 800bb9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bba0:	2330      	movs	r3, #48	; 0x30
 800bba2:	f04f 0901 	mov.w	r9, #1
 800bba6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbaa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bd50 <_svfiprintf_r+0x1ec>
 800bbae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbb2:	4623      	mov	r3, r4
 800bbb4:	469a      	mov	sl, r3
 800bbb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbba:	b10a      	cbz	r2, 800bbc0 <_svfiprintf_r+0x5c>
 800bbbc:	2a25      	cmp	r2, #37	; 0x25
 800bbbe:	d1f9      	bne.n	800bbb4 <_svfiprintf_r+0x50>
 800bbc0:	ebba 0b04 	subs.w	fp, sl, r4
 800bbc4:	d00b      	beq.n	800bbde <_svfiprintf_r+0x7a>
 800bbc6:	465b      	mov	r3, fp
 800bbc8:	4622      	mov	r2, r4
 800bbca:	4629      	mov	r1, r5
 800bbcc:	4638      	mov	r0, r7
 800bbce:	f7ff ff6d 	bl	800baac <__ssputs_r>
 800bbd2:	3001      	adds	r0, #1
 800bbd4:	f000 80aa 	beq.w	800bd2c <_svfiprintf_r+0x1c8>
 800bbd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbda:	445a      	add	r2, fp
 800bbdc:	9209      	str	r2, [sp, #36]	; 0x24
 800bbde:	f89a 3000 	ldrb.w	r3, [sl]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	f000 80a2 	beq.w	800bd2c <_svfiprintf_r+0x1c8>
 800bbe8:	2300      	movs	r3, #0
 800bbea:	f04f 32ff 	mov.w	r2, #4294967295
 800bbee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbf2:	f10a 0a01 	add.w	sl, sl, #1
 800bbf6:	9304      	str	r3, [sp, #16]
 800bbf8:	9307      	str	r3, [sp, #28]
 800bbfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbfe:	931a      	str	r3, [sp, #104]	; 0x68
 800bc00:	4654      	mov	r4, sl
 800bc02:	2205      	movs	r2, #5
 800bc04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc08:	4851      	ldr	r0, [pc, #324]	; (800bd50 <_svfiprintf_r+0x1ec>)
 800bc0a:	f000 fe07 	bl	800c81c <memchr>
 800bc0e:	9a04      	ldr	r2, [sp, #16]
 800bc10:	b9d8      	cbnz	r0, 800bc4a <_svfiprintf_r+0xe6>
 800bc12:	06d0      	lsls	r0, r2, #27
 800bc14:	bf44      	itt	mi
 800bc16:	2320      	movmi	r3, #32
 800bc18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc1c:	0711      	lsls	r1, r2, #28
 800bc1e:	bf44      	itt	mi
 800bc20:	232b      	movmi	r3, #43	; 0x2b
 800bc22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc26:	f89a 3000 	ldrb.w	r3, [sl]
 800bc2a:	2b2a      	cmp	r3, #42	; 0x2a
 800bc2c:	d015      	beq.n	800bc5a <_svfiprintf_r+0xf6>
 800bc2e:	4654      	mov	r4, sl
 800bc30:	2000      	movs	r0, #0
 800bc32:	f04f 0c0a 	mov.w	ip, #10
 800bc36:	9a07      	ldr	r2, [sp, #28]
 800bc38:	4621      	mov	r1, r4
 800bc3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc3e:	3b30      	subs	r3, #48	; 0x30
 800bc40:	2b09      	cmp	r3, #9
 800bc42:	d94e      	bls.n	800bce2 <_svfiprintf_r+0x17e>
 800bc44:	b1b0      	cbz	r0, 800bc74 <_svfiprintf_r+0x110>
 800bc46:	9207      	str	r2, [sp, #28]
 800bc48:	e014      	b.n	800bc74 <_svfiprintf_r+0x110>
 800bc4a:	eba0 0308 	sub.w	r3, r0, r8
 800bc4e:	fa09 f303 	lsl.w	r3, r9, r3
 800bc52:	4313      	orrs	r3, r2
 800bc54:	46a2      	mov	sl, r4
 800bc56:	9304      	str	r3, [sp, #16]
 800bc58:	e7d2      	b.n	800bc00 <_svfiprintf_r+0x9c>
 800bc5a:	9b03      	ldr	r3, [sp, #12]
 800bc5c:	1d19      	adds	r1, r3, #4
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	9103      	str	r1, [sp, #12]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	bfbb      	ittet	lt
 800bc66:	425b      	neglt	r3, r3
 800bc68:	f042 0202 	orrlt.w	r2, r2, #2
 800bc6c:	9307      	strge	r3, [sp, #28]
 800bc6e:	9307      	strlt	r3, [sp, #28]
 800bc70:	bfb8      	it	lt
 800bc72:	9204      	strlt	r2, [sp, #16]
 800bc74:	7823      	ldrb	r3, [r4, #0]
 800bc76:	2b2e      	cmp	r3, #46	; 0x2e
 800bc78:	d10c      	bne.n	800bc94 <_svfiprintf_r+0x130>
 800bc7a:	7863      	ldrb	r3, [r4, #1]
 800bc7c:	2b2a      	cmp	r3, #42	; 0x2a
 800bc7e:	d135      	bne.n	800bcec <_svfiprintf_r+0x188>
 800bc80:	9b03      	ldr	r3, [sp, #12]
 800bc82:	3402      	adds	r4, #2
 800bc84:	1d1a      	adds	r2, r3, #4
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	9203      	str	r2, [sp, #12]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	bfb8      	it	lt
 800bc8e:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc92:	9305      	str	r3, [sp, #20]
 800bc94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bd60 <_svfiprintf_r+0x1fc>
 800bc98:	2203      	movs	r2, #3
 800bc9a:	4650      	mov	r0, sl
 800bc9c:	7821      	ldrb	r1, [r4, #0]
 800bc9e:	f000 fdbd 	bl	800c81c <memchr>
 800bca2:	b140      	cbz	r0, 800bcb6 <_svfiprintf_r+0x152>
 800bca4:	2340      	movs	r3, #64	; 0x40
 800bca6:	eba0 000a 	sub.w	r0, r0, sl
 800bcaa:	fa03 f000 	lsl.w	r0, r3, r0
 800bcae:	9b04      	ldr	r3, [sp, #16]
 800bcb0:	3401      	adds	r4, #1
 800bcb2:	4303      	orrs	r3, r0
 800bcb4:	9304      	str	r3, [sp, #16]
 800bcb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcba:	2206      	movs	r2, #6
 800bcbc:	4825      	ldr	r0, [pc, #148]	; (800bd54 <_svfiprintf_r+0x1f0>)
 800bcbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcc2:	f000 fdab 	bl	800c81c <memchr>
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	d038      	beq.n	800bd3c <_svfiprintf_r+0x1d8>
 800bcca:	4b23      	ldr	r3, [pc, #140]	; (800bd58 <_svfiprintf_r+0x1f4>)
 800bccc:	bb1b      	cbnz	r3, 800bd16 <_svfiprintf_r+0x1b2>
 800bcce:	9b03      	ldr	r3, [sp, #12]
 800bcd0:	3307      	adds	r3, #7
 800bcd2:	f023 0307 	bic.w	r3, r3, #7
 800bcd6:	3308      	adds	r3, #8
 800bcd8:	9303      	str	r3, [sp, #12]
 800bcda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcdc:	4433      	add	r3, r6
 800bcde:	9309      	str	r3, [sp, #36]	; 0x24
 800bce0:	e767      	b.n	800bbb2 <_svfiprintf_r+0x4e>
 800bce2:	460c      	mov	r4, r1
 800bce4:	2001      	movs	r0, #1
 800bce6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcea:	e7a5      	b.n	800bc38 <_svfiprintf_r+0xd4>
 800bcec:	2300      	movs	r3, #0
 800bcee:	f04f 0c0a 	mov.w	ip, #10
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	3401      	adds	r4, #1
 800bcf6:	9305      	str	r3, [sp, #20]
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcfe:	3a30      	subs	r2, #48	; 0x30
 800bd00:	2a09      	cmp	r2, #9
 800bd02:	d903      	bls.n	800bd0c <_svfiprintf_r+0x1a8>
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d0c5      	beq.n	800bc94 <_svfiprintf_r+0x130>
 800bd08:	9105      	str	r1, [sp, #20]
 800bd0a:	e7c3      	b.n	800bc94 <_svfiprintf_r+0x130>
 800bd0c:	4604      	mov	r4, r0
 800bd0e:	2301      	movs	r3, #1
 800bd10:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd14:	e7f0      	b.n	800bcf8 <_svfiprintf_r+0x194>
 800bd16:	ab03      	add	r3, sp, #12
 800bd18:	9300      	str	r3, [sp, #0]
 800bd1a:	462a      	mov	r2, r5
 800bd1c:	4638      	mov	r0, r7
 800bd1e:	4b0f      	ldr	r3, [pc, #60]	; (800bd5c <_svfiprintf_r+0x1f8>)
 800bd20:	a904      	add	r1, sp, #16
 800bd22:	f3af 8000 	nop.w
 800bd26:	1c42      	adds	r2, r0, #1
 800bd28:	4606      	mov	r6, r0
 800bd2a:	d1d6      	bne.n	800bcda <_svfiprintf_r+0x176>
 800bd2c:	89ab      	ldrh	r3, [r5, #12]
 800bd2e:	065b      	lsls	r3, r3, #25
 800bd30:	f53f af2c 	bmi.w	800bb8c <_svfiprintf_r+0x28>
 800bd34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd36:	b01d      	add	sp, #116	; 0x74
 800bd38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd3c:	ab03      	add	r3, sp, #12
 800bd3e:	9300      	str	r3, [sp, #0]
 800bd40:	462a      	mov	r2, r5
 800bd42:	4638      	mov	r0, r7
 800bd44:	4b05      	ldr	r3, [pc, #20]	; (800bd5c <_svfiprintf_r+0x1f8>)
 800bd46:	a904      	add	r1, sp, #16
 800bd48:	f000 f9d4 	bl	800c0f4 <_printf_i>
 800bd4c:	e7eb      	b.n	800bd26 <_svfiprintf_r+0x1c2>
 800bd4e:	bf00      	nop
 800bd50:	0800cc6c 	.word	0x0800cc6c
 800bd54:	0800cc76 	.word	0x0800cc76
 800bd58:	00000000 	.word	0x00000000
 800bd5c:	0800baad 	.word	0x0800baad
 800bd60:	0800cc72 	.word	0x0800cc72

0800bd64 <__sfputc_r>:
 800bd64:	6893      	ldr	r3, [r2, #8]
 800bd66:	b410      	push	{r4}
 800bd68:	3b01      	subs	r3, #1
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	6093      	str	r3, [r2, #8]
 800bd6e:	da07      	bge.n	800bd80 <__sfputc_r+0x1c>
 800bd70:	6994      	ldr	r4, [r2, #24]
 800bd72:	42a3      	cmp	r3, r4
 800bd74:	db01      	blt.n	800bd7a <__sfputc_r+0x16>
 800bd76:	290a      	cmp	r1, #10
 800bd78:	d102      	bne.n	800bd80 <__sfputc_r+0x1c>
 800bd7a:	bc10      	pop	{r4}
 800bd7c:	f000 bb34 	b.w	800c3e8 <__swbuf_r>
 800bd80:	6813      	ldr	r3, [r2, #0]
 800bd82:	1c58      	adds	r0, r3, #1
 800bd84:	6010      	str	r0, [r2, #0]
 800bd86:	7019      	strb	r1, [r3, #0]
 800bd88:	4608      	mov	r0, r1
 800bd8a:	bc10      	pop	{r4}
 800bd8c:	4770      	bx	lr

0800bd8e <__sfputs_r>:
 800bd8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd90:	4606      	mov	r6, r0
 800bd92:	460f      	mov	r7, r1
 800bd94:	4614      	mov	r4, r2
 800bd96:	18d5      	adds	r5, r2, r3
 800bd98:	42ac      	cmp	r4, r5
 800bd9a:	d101      	bne.n	800bda0 <__sfputs_r+0x12>
 800bd9c:	2000      	movs	r0, #0
 800bd9e:	e007      	b.n	800bdb0 <__sfputs_r+0x22>
 800bda0:	463a      	mov	r2, r7
 800bda2:	4630      	mov	r0, r6
 800bda4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bda8:	f7ff ffdc 	bl	800bd64 <__sfputc_r>
 800bdac:	1c43      	adds	r3, r0, #1
 800bdae:	d1f3      	bne.n	800bd98 <__sfputs_r+0xa>
 800bdb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bdb4 <_vfiprintf_r>:
 800bdb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb8:	460d      	mov	r5, r1
 800bdba:	4614      	mov	r4, r2
 800bdbc:	4698      	mov	r8, r3
 800bdbe:	4606      	mov	r6, r0
 800bdc0:	b09d      	sub	sp, #116	; 0x74
 800bdc2:	b118      	cbz	r0, 800bdcc <_vfiprintf_r+0x18>
 800bdc4:	6983      	ldr	r3, [r0, #24]
 800bdc6:	b90b      	cbnz	r3, 800bdcc <_vfiprintf_r+0x18>
 800bdc8:	f7ff fd76 	bl	800b8b8 <__sinit>
 800bdcc:	4b89      	ldr	r3, [pc, #548]	; (800bff4 <_vfiprintf_r+0x240>)
 800bdce:	429d      	cmp	r5, r3
 800bdd0:	d11b      	bne.n	800be0a <_vfiprintf_r+0x56>
 800bdd2:	6875      	ldr	r5, [r6, #4]
 800bdd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdd6:	07d9      	lsls	r1, r3, #31
 800bdd8:	d405      	bmi.n	800bde6 <_vfiprintf_r+0x32>
 800bdda:	89ab      	ldrh	r3, [r5, #12]
 800bddc:	059a      	lsls	r2, r3, #22
 800bdde:	d402      	bmi.n	800bde6 <_vfiprintf_r+0x32>
 800bde0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bde2:	f7ff fe07 	bl	800b9f4 <__retarget_lock_acquire_recursive>
 800bde6:	89ab      	ldrh	r3, [r5, #12]
 800bde8:	071b      	lsls	r3, r3, #28
 800bdea:	d501      	bpl.n	800bdf0 <_vfiprintf_r+0x3c>
 800bdec:	692b      	ldr	r3, [r5, #16]
 800bdee:	b9eb      	cbnz	r3, 800be2c <_vfiprintf_r+0x78>
 800bdf0:	4629      	mov	r1, r5
 800bdf2:	4630      	mov	r0, r6
 800bdf4:	f000 fb5c 	bl	800c4b0 <__swsetup_r>
 800bdf8:	b1c0      	cbz	r0, 800be2c <_vfiprintf_r+0x78>
 800bdfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdfc:	07dc      	lsls	r4, r3, #31
 800bdfe:	d50e      	bpl.n	800be1e <_vfiprintf_r+0x6a>
 800be00:	f04f 30ff 	mov.w	r0, #4294967295
 800be04:	b01d      	add	sp, #116	; 0x74
 800be06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be0a:	4b7b      	ldr	r3, [pc, #492]	; (800bff8 <_vfiprintf_r+0x244>)
 800be0c:	429d      	cmp	r5, r3
 800be0e:	d101      	bne.n	800be14 <_vfiprintf_r+0x60>
 800be10:	68b5      	ldr	r5, [r6, #8]
 800be12:	e7df      	b.n	800bdd4 <_vfiprintf_r+0x20>
 800be14:	4b79      	ldr	r3, [pc, #484]	; (800bffc <_vfiprintf_r+0x248>)
 800be16:	429d      	cmp	r5, r3
 800be18:	bf08      	it	eq
 800be1a:	68f5      	ldreq	r5, [r6, #12]
 800be1c:	e7da      	b.n	800bdd4 <_vfiprintf_r+0x20>
 800be1e:	89ab      	ldrh	r3, [r5, #12]
 800be20:	0598      	lsls	r0, r3, #22
 800be22:	d4ed      	bmi.n	800be00 <_vfiprintf_r+0x4c>
 800be24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be26:	f7ff fde6 	bl	800b9f6 <__retarget_lock_release_recursive>
 800be2a:	e7e9      	b.n	800be00 <_vfiprintf_r+0x4c>
 800be2c:	2300      	movs	r3, #0
 800be2e:	9309      	str	r3, [sp, #36]	; 0x24
 800be30:	2320      	movs	r3, #32
 800be32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be36:	2330      	movs	r3, #48	; 0x30
 800be38:	f04f 0901 	mov.w	r9, #1
 800be3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800be40:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c000 <_vfiprintf_r+0x24c>
 800be44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be48:	4623      	mov	r3, r4
 800be4a:	469a      	mov	sl, r3
 800be4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be50:	b10a      	cbz	r2, 800be56 <_vfiprintf_r+0xa2>
 800be52:	2a25      	cmp	r2, #37	; 0x25
 800be54:	d1f9      	bne.n	800be4a <_vfiprintf_r+0x96>
 800be56:	ebba 0b04 	subs.w	fp, sl, r4
 800be5a:	d00b      	beq.n	800be74 <_vfiprintf_r+0xc0>
 800be5c:	465b      	mov	r3, fp
 800be5e:	4622      	mov	r2, r4
 800be60:	4629      	mov	r1, r5
 800be62:	4630      	mov	r0, r6
 800be64:	f7ff ff93 	bl	800bd8e <__sfputs_r>
 800be68:	3001      	adds	r0, #1
 800be6a:	f000 80aa 	beq.w	800bfc2 <_vfiprintf_r+0x20e>
 800be6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be70:	445a      	add	r2, fp
 800be72:	9209      	str	r2, [sp, #36]	; 0x24
 800be74:	f89a 3000 	ldrb.w	r3, [sl]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	f000 80a2 	beq.w	800bfc2 <_vfiprintf_r+0x20e>
 800be7e:	2300      	movs	r3, #0
 800be80:	f04f 32ff 	mov.w	r2, #4294967295
 800be84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be88:	f10a 0a01 	add.w	sl, sl, #1
 800be8c:	9304      	str	r3, [sp, #16]
 800be8e:	9307      	str	r3, [sp, #28]
 800be90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be94:	931a      	str	r3, [sp, #104]	; 0x68
 800be96:	4654      	mov	r4, sl
 800be98:	2205      	movs	r2, #5
 800be9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be9e:	4858      	ldr	r0, [pc, #352]	; (800c000 <_vfiprintf_r+0x24c>)
 800bea0:	f000 fcbc 	bl	800c81c <memchr>
 800bea4:	9a04      	ldr	r2, [sp, #16]
 800bea6:	b9d8      	cbnz	r0, 800bee0 <_vfiprintf_r+0x12c>
 800bea8:	06d1      	lsls	r1, r2, #27
 800beaa:	bf44      	itt	mi
 800beac:	2320      	movmi	r3, #32
 800beae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800beb2:	0713      	lsls	r3, r2, #28
 800beb4:	bf44      	itt	mi
 800beb6:	232b      	movmi	r3, #43	; 0x2b
 800beb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bebc:	f89a 3000 	ldrb.w	r3, [sl]
 800bec0:	2b2a      	cmp	r3, #42	; 0x2a
 800bec2:	d015      	beq.n	800bef0 <_vfiprintf_r+0x13c>
 800bec4:	4654      	mov	r4, sl
 800bec6:	2000      	movs	r0, #0
 800bec8:	f04f 0c0a 	mov.w	ip, #10
 800becc:	9a07      	ldr	r2, [sp, #28]
 800bece:	4621      	mov	r1, r4
 800bed0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bed4:	3b30      	subs	r3, #48	; 0x30
 800bed6:	2b09      	cmp	r3, #9
 800bed8:	d94e      	bls.n	800bf78 <_vfiprintf_r+0x1c4>
 800beda:	b1b0      	cbz	r0, 800bf0a <_vfiprintf_r+0x156>
 800bedc:	9207      	str	r2, [sp, #28]
 800bede:	e014      	b.n	800bf0a <_vfiprintf_r+0x156>
 800bee0:	eba0 0308 	sub.w	r3, r0, r8
 800bee4:	fa09 f303 	lsl.w	r3, r9, r3
 800bee8:	4313      	orrs	r3, r2
 800beea:	46a2      	mov	sl, r4
 800beec:	9304      	str	r3, [sp, #16]
 800beee:	e7d2      	b.n	800be96 <_vfiprintf_r+0xe2>
 800bef0:	9b03      	ldr	r3, [sp, #12]
 800bef2:	1d19      	adds	r1, r3, #4
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	9103      	str	r1, [sp, #12]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	bfbb      	ittet	lt
 800befc:	425b      	neglt	r3, r3
 800befe:	f042 0202 	orrlt.w	r2, r2, #2
 800bf02:	9307      	strge	r3, [sp, #28]
 800bf04:	9307      	strlt	r3, [sp, #28]
 800bf06:	bfb8      	it	lt
 800bf08:	9204      	strlt	r2, [sp, #16]
 800bf0a:	7823      	ldrb	r3, [r4, #0]
 800bf0c:	2b2e      	cmp	r3, #46	; 0x2e
 800bf0e:	d10c      	bne.n	800bf2a <_vfiprintf_r+0x176>
 800bf10:	7863      	ldrb	r3, [r4, #1]
 800bf12:	2b2a      	cmp	r3, #42	; 0x2a
 800bf14:	d135      	bne.n	800bf82 <_vfiprintf_r+0x1ce>
 800bf16:	9b03      	ldr	r3, [sp, #12]
 800bf18:	3402      	adds	r4, #2
 800bf1a:	1d1a      	adds	r2, r3, #4
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	9203      	str	r2, [sp, #12]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	bfb8      	it	lt
 800bf24:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf28:	9305      	str	r3, [sp, #20]
 800bf2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c010 <_vfiprintf_r+0x25c>
 800bf2e:	2203      	movs	r2, #3
 800bf30:	4650      	mov	r0, sl
 800bf32:	7821      	ldrb	r1, [r4, #0]
 800bf34:	f000 fc72 	bl	800c81c <memchr>
 800bf38:	b140      	cbz	r0, 800bf4c <_vfiprintf_r+0x198>
 800bf3a:	2340      	movs	r3, #64	; 0x40
 800bf3c:	eba0 000a 	sub.w	r0, r0, sl
 800bf40:	fa03 f000 	lsl.w	r0, r3, r0
 800bf44:	9b04      	ldr	r3, [sp, #16]
 800bf46:	3401      	adds	r4, #1
 800bf48:	4303      	orrs	r3, r0
 800bf4a:	9304      	str	r3, [sp, #16]
 800bf4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf50:	2206      	movs	r2, #6
 800bf52:	482c      	ldr	r0, [pc, #176]	; (800c004 <_vfiprintf_r+0x250>)
 800bf54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf58:	f000 fc60 	bl	800c81c <memchr>
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	d03f      	beq.n	800bfe0 <_vfiprintf_r+0x22c>
 800bf60:	4b29      	ldr	r3, [pc, #164]	; (800c008 <_vfiprintf_r+0x254>)
 800bf62:	bb1b      	cbnz	r3, 800bfac <_vfiprintf_r+0x1f8>
 800bf64:	9b03      	ldr	r3, [sp, #12]
 800bf66:	3307      	adds	r3, #7
 800bf68:	f023 0307 	bic.w	r3, r3, #7
 800bf6c:	3308      	adds	r3, #8
 800bf6e:	9303      	str	r3, [sp, #12]
 800bf70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf72:	443b      	add	r3, r7
 800bf74:	9309      	str	r3, [sp, #36]	; 0x24
 800bf76:	e767      	b.n	800be48 <_vfiprintf_r+0x94>
 800bf78:	460c      	mov	r4, r1
 800bf7a:	2001      	movs	r0, #1
 800bf7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf80:	e7a5      	b.n	800bece <_vfiprintf_r+0x11a>
 800bf82:	2300      	movs	r3, #0
 800bf84:	f04f 0c0a 	mov.w	ip, #10
 800bf88:	4619      	mov	r1, r3
 800bf8a:	3401      	adds	r4, #1
 800bf8c:	9305      	str	r3, [sp, #20]
 800bf8e:	4620      	mov	r0, r4
 800bf90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf94:	3a30      	subs	r2, #48	; 0x30
 800bf96:	2a09      	cmp	r2, #9
 800bf98:	d903      	bls.n	800bfa2 <_vfiprintf_r+0x1ee>
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d0c5      	beq.n	800bf2a <_vfiprintf_r+0x176>
 800bf9e:	9105      	str	r1, [sp, #20]
 800bfa0:	e7c3      	b.n	800bf2a <_vfiprintf_r+0x176>
 800bfa2:	4604      	mov	r4, r0
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfaa:	e7f0      	b.n	800bf8e <_vfiprintf_r+0x1da>
 800bfac:	ab03      	add	r3, sp, #12
 800bfae:	9300      	str	r3, [sp, #0]
 800bfb0:	462a      	mov	r2, r5
 800bfb2:	4630      	mov	r0, r6
 800bfb4:	4b15      	ldr	r3, [pc, #84]	; (800c00c <_vfiprintf_r+0x258>)
 800bfb6:	a904      	add	r1, sp, #16
 800bfb8:	f3af 8000 	nop.w
 800bfbc:	4607      	mov	r7, r0
 800bfbe:	1c78      	adds	r0, r7, #1
 800bfc0:	d1d6      	bne.n	800bf70 <_vfiprintf_r+0x1bc>
 800bfc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfc4:	07d9      	lsls	r1, r3, #31
 800bfc6:	d405      	bmi.n	800bfd4 <_vfiprintf_r+0x220>
 800bfc8:	89ab      	ldrh	r3, [r5, #12]
 800bfca:	059a      	lsls	r2, r3, #22
 800bfcc:	d402      	bmi.n	800bfd4 <_vfiprintf_r+0x220>
 800bfce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfd0:	f7ff fd11 	bl	800b9f6 <__retarget_lock_release_recursive>
 800bfd4:	89ab      	ldrh	r3, [r5, #12]
 800bfd6:	065b      	lsls	r3, r3, #25
 800bfd8:	f53f af12 	bmi.w	800be00 <_vfiprintf_r+0x4c>
 800bfdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfde:	e711      	b.n	800be04 <_vfiprintf_r+0x50>
 800bfe0:	ab03      	add	r3, sp, #12
 800bfe2:	9300      	str	r3, [sp, #0]
 800bfe4:	462a      	mov	r2, r5
 800bfe6:	4630      	mov	r0, r6
 800bfe8:	4b08      	ldr	r3, [pc, #32]	; (800c00c <_vfiprintf_r+0x258>)
 800bfea:	a904      	add	r1, sp, #16
 800bfec:	f000 f882 	bl	800c0f4 <_printf_i>
 800bff0:	e7e4      	b.n	800bfbc <_vfiprintf_r+0x208>
 800bff2:	bf00      	nop
 800bff4:	0800cc2c 	.word	0x0800cc2c
 800bff8:	0800cc4c 	.word	0x0800cc4c
 800bffc:	0800cc0c 	.word	0x0800cc0c
 800c000:	0800cc6c 	.word	0x0800cc6c
 800c004:	0800cc76 	.word	0x0800cc76
 800c008:	00000000 	.word	0x00000000
 800c00c:	0800bd8f 	.word	0x0800bd8f
 800c010:	0800cc72 	.word	0x0800cc72

0800c014 <_printf_common>:
 800c014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c018:	4616      	mov	r6, r2
 800c01a:	4699      	mov	r9, r3
 800c01c:	688a      	ldr	r2, [r1, #8]
 800c01e:	690b      	ldr	r3, [r1, #16]
 800c020:	4607      	mov	r7, r0
 800c022:	4293      	cmp	r3, r2
 800c024:	bfb8      	it	lt
 800c026:	4613      	movlt	r3, r2
 800c028:	6033      	str	r3, [r6, #0]
 800c02a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c02e:	460c      	mov	r4, r1
 800c030:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c034:	b10a      	cbz	r2, 800c03a <_printf_common+0x26>
 800c036:	3301      	adds	r3, #1
 800c038:	6033      	str	r3, [r6, #0]
 800c03a:	6823      	ldr	r3, [r4, #0]
 800c03c:	0699      	lsls	r1, r3, #26
 800c03e:	bf42      	ittt	mi
 800c040:	6833      	ldrmi	r3, [r6, #0]
 800c042:	3302      	addmi	r3, #2
 800c044:	6033      	strmi	r3, [r6, #0]
 800c046:	6825      	ldr	r5, [r4, #0]
 800c048:	f015 0506 	ands.w	r5, r5, #6
 800c04c:	d106      	bne.n	800c05c <_printf_common+0x48>
 800c04e:	f104 0a19 	add.w	sl, r4, #25
 800c052:	68e3      	ldr	r3, [r4, #12]
 800c054:	6832      	ldr	r2, [r6, #0]
 800c056:	1a9b      	subs	r3, r3, r2
 800c058:	42ab      	cmp	r3, r5
 800c05a:	dc28      	bgt.n	800c0ae <_printf_common+0x9a>
 800c05c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c060:	1e13      	subs	r3, r2, #0
 800c062:	6822      	ldr	r2, [r4, #0]
 800c064:	bf18      	it	ne
 800c066:	2301      	movne	r3, #1
 800c068:	0692      	lsls	r2, r2, #26
 800c06a:	d42d      	bmi.n	800c0c8 <_printf_common+0xb4>
 800c06c:	4649      	mov	r1, r9
 800c06e:	4638      	mov	r0, r7
 800c070:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c074:	47c0      	blx	r8
 800c076:	3001      	adds	r0, #1
 800c078:	d020      	beq.n	800c0bc <_printf_common+0xa8>
 800c07a:	6823      	ldr	r3, [r4, #0]
 800c07c:	68e5      	ldr	r5, [r4, #12]
 800c07e:	f003 0306 	and.w	r3, r3, #6
 800c082:	2b04      	cmp	r3, #4
 800c084:	bf18      	it	ne
 800c086:	2500      	movne	r5, #0
 800c088:	6832      	ldr	r2, [r6, #0]
 800c08a:	f04f 0600 	mov.w	r6, #0
 800c08e:	68a3      	ldr	r3, [r4, #8]
 800c090:	bf08      	it	eq
 800c092:	1aad      	subeq	r5, r5, r2
 800c094:	6922      	ldr	r2, [r4, #16]
 800c096:	bf08      	it	eq
 800c098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c09c:	4293      	cmp	r3, r2
 800c09e:	bfc4      	itt	gt
 800c0a0:	1a9b      	subgt	r3, r3, r2
 800c0a2:	18ed      	addgt	r5, r5, r3
 800c0a4:	341a      	adds	r4, #26
 800c0a6:	42b5      	cmp	r5, r6
 800c0a8:	d11a      	bne.n	800c0e0 <_printf_common+0xcc>
 800c0aa:	2000      	movs	r0, #0
 800c0ac:	e008      	b.n	800c0c0 <_printf_common+0xac>
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	4652      	mov	r2, sl
 800c0b2:	4649      	mov	r1, r9
 800c0b4:	4638      	mov	r0, r7
 800c0b6:	47c0      	blx	r8
 800c0b8:	3001      	adds	r0, #1
 800c0ba:	d103      	bne.n	800c0c4 <_printf_common+0xb0>
 800c0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0c4:	3501      	adds	r5, #1
 800c0c6:	e7c4      	b.n	800c052 <_printf_common+0x3e>
 800c0c8:	2030      	movs	r0, #48	; 0x30
 800c0ca:	18e1      	adds	r1, r4, r3
 800c0cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c0d0:	1c5a      	adds	r2, r3, #1
 800c0d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c0d6:	4422      	add	r2, r4
 800c0d8:	3302      	adds	r3, #2
 800c0da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c0de:	e7c5      	b.n	800c06c <_printf_common+0x58>
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	4622      	mov	r2, r4
 800c0e4:	4649      	mov	r1, r9
 800c0e6:	4638      	mov	r0, r7
 800c0e8:	47c0      	blx	r8
 800c0ea:	3001      	adds	r0, #1
 800c0ec:	d0e6      	beq.n	800c0bc <_printf_common+0xa8>
 800c0ee:	3601      	adds	r6, #1
 800c0f0:	e7d9      	b.n	800c0a6 <_printf_common+0x92>
	...

0800c0f4 <_printf_i>:
 800c0f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0f8:	460c      	mov	r4, r1
 800c0fa:	7e27      	ldrb	r7, [r4, #24]
 800c0fc:	4691      	mov	r9, r2
 800c0fe:	2f78      	cmp	r7, #120	; 0x78
 800c100:	4680      	mov	r8, r0
 800c102:	469a      	mov	sl, r3
 800c104:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c106:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c10a:	d807      	bhi.n	800c11c <_printf_i+0x28>
 800c10c:	2f62      	cmp	r7, #98	; 0x62
 800c10e:	d80a      	bhi.n	800c126 <_printf_i+0x32>
 800c110:	2f00      	cmp	r7, #0
 800c112:	f000 80d9 	beq.w	800c2c8 <_printf_i+0x1d4>
 800c116:	2f58      	cmp	r7, #88	; 0x58
 800c118:	f000 80a4 	beq.w	800c264 <_printf_i+0x170>
 800c11c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c120:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c124:	e03a      	b.n	800c19c <_printf_i+0xa8>
 800c126:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c12a:	2b15      	cmp	r3, #21
 800c12c:	d8f6      	bhi.n	800c11c <_printf_i+0x28>
 800c12e:	a001      	add	r0, pc, #4	; (adr r0, 800c134 <_printf_i+0x40>)
 800c130:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c134:	0800c18d 	.word	0x0800c18d
 800c138:	0800c1a1 	.word	0x0800c1a1
 800c13c:	0800c11d 	.word	0x0800c11d
 800c140:	0800c11d 	.word	0x0800c11d
 800c144:	0800c11d 	.word	0x0800c11d
 800c148:	0800c11d 	.word	0x0800c11d
 800c14c:	0800c1a1 	.word	0x0800c1a1
 800c150:	0800c11d 	.word	0x0800c11d
 800c154:	0800c11d 	.word	0x0800c11d
 800c158:	0800c11d 	.word	0x0800c11d
 800c15c:	0800c11d 	.word	0x0800c11d
 800c160:	0800c2af 	.word	0x0800c2af
 800c164:	0800c1d1 	.word	0x0800c1d1
 800c168:	0800c291 	.word	0x0800c291
 800c16c:	0800c11d 	.word	0x0800c11d
 800c170:	0800c11d 	.word	0x0800c11d
 800c174:	0800c2d1 	.word	0x0800c2d1
 800c178:	0800c11d 	.word	0x0800c11d
 800c17c:	0800c1d1 	.word	0x0800c1d1
 800c180:	0800c11d 	.word	0x0800c11d
 800c184:	0800c11d 	.word	0x0800c11d
 800c188:	0800c299 	.word	0x0800c299
 800c18c:	680b      	ldr	r3, [r1, #0]
 800c18e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c192:	1d1a      	adds	r2, r3, #4
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	600a      	str	r2, [r1, #0]
 800c198:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c19c:	2301      	movs	r3, #1
 800c19e:	e0a4      	b.n	800c2ea <_printf_i+0x1f6>
 800c1a0:	6825      	ldr	r5, [r4, #0]
 800c1a2:	6808      	ldr	r0, [r1, #0]
 800c1a4:	062e      	lsls	r6, r5, #24
 800c1a6:	f100 0304 	add.w	r3, r0, #4
 800c1aa:	d50a      	bpl.n	800c1c2 <_printf_i+0xce>
 800c1ac:	6805      	ldr	r5, [r0, #0]
 800c1ae:	600b      	str	r3, [r1, #0]
 800c1b0:	2d00      	cmp	r5, #0
 800c1b2:	da03      	bge.n	800c1bc <_printf_i+0xc8>
 800c1b4:	232d      	movs	r3, #45	; 0x2d
 800c1b6:	426d      	negs	r5, r5
 800c1b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1bc:	230a      	movs	r3, #10
 800c1be:	485e      	ldr	r0, [pc, #376]	; (800c338 <_printf_i+0x244>)
 800c1c0:	e019      	b.n	800c1f6 <_printf_i+0x102>
 800c1c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c1c6:	6805      	ldr	r5, [r0, #0]
 800c1c8:	600b      	str	r3, [r1, #0]
 800c1ca:	bf18      	it	ne
 800c1cc:	b22d      	sxthne	r5, r5
 800c1ce:	e7ef      	b.n	800c1b0 <_printf_i+0xbc>
 800c1d0:	680b      	ldr	r3, [r1, #0]
 800c1d2:	6825      	ldr	r5, [r4, #0]
 800c1d4:	1d18      	adds	r0, r3, #4
 800c1d6:	6008      	str	r0, [r1, #0]
 800c1d8:	0628      	lsls	r0, r5, #24
 800c1da:	d501      	bpl.n	800c1e0 <_printf_i+0xec>
 800c1dc:	681d      	ldr	r5, [r3, #0]
 800c1de:	e002      	b.n	800c1e6 <_printf_i+0xf2>
 800c1e0:	0669      	lsls	r1, r5, #25
 800c1e2:	d5fb      	bpl.n	800c1dc <_printf_i+0xe8>
 800c1e4:	881d      	ldrh	r5, [r3, #0]
 800c1e6:	2f6f      	cmp	r7, #111	; 0x6f
 800c1e8:	bf0c      	ite	eq
 800c1ea:	2308      	moveq	r3, #8
 800c1ec:	230a      	movne	r3, #10
 800c1ee:	4852      	ldr	r0, [pc, #328]	; (800c338 <_printf_i+0x244>)
 800c1f0:	2100      	movs	r1, #0
 800c1f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c1f6:	6866      	ldr	r6, [r4, #4]
 800c1f8:	2e00      	cmp	r6, #0
 800c1fa:	bfa8      	it	ge
 800c1fc:	6821      	ldrge	r1, [r4, #0]
 800c1fe:	60a6      	str	r6, [r4, #8]
 800c200:	bfa4      	itt	ge
 800c202:	f021 0104 	bicge.w	r1, r1, #4
 800c206:	6021      	strge	r1, [r4, #0]
 800c208:	b90d      	cbnz	r5, 800c20e <_printf_i+0x11a>
 800c20a:	2e00      	cmp	r6, #0
 800c20c:	d04d      	beq.n	800c2aa <_printf_i+0x1b6>
 800c20e:	4616      	mov	r6, r2
 800c210:	fbb5 f1f3 	udiv	r1, r5, r3
 800c214:	fb03 5711 	mls	r7, r3, r1, r5
 800c218:	5dc7      	ldrb	r7, [r0, r7]
 800c21a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c21e:	462f      	mov	r7, r5
 800c220:	42bb      	cmp	r3, r7
 800c222:	460d      	mov	r5, r1
 800c224:	d9f4      	bls.n	800c210 <_printf_i+0x11c>
 800c226:	2b08      	cmp	r3, #8
 800c228:	d10b      	bne.n	800c242 <_printf_i+0x14e>
 800c22a:	6823      	ldr	r3, [r4, #0]
 800c22c:	07df      	lsls	r7, r3, #31
 800c22e:	d508      	bpl.n	800c242 <_printf_i+0x14e>
 800c230:	6923      	ldr	r3, [r4, #16]
 800c232:	6861      	ldr	r1, [r4, #4]
 800c234:	4299      	cmp	r1, r3
 800c236:	bfde      	ittt	le
 800c238:	2330      	movle	r3, #48	; 0x30
 800c23a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c23e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c242:	1b92      	subs	r2, r2, r6
 800c244:	6122      	str	r2, [r4, #16]
 800c246:	464b      	mov	r3, r9
 800c248:	4621      	mov	r1, r4
 800c24a:	4640      	mov	r0, r8
 800c24c:	f8cd a000 	str.w	sl, [sp]
 800c250:	aa03      	add	r2, sp, #12
 800c252:	f7ff fedf 	bl	800c014 <_printf_common>
 800c256:	3001      	adds	r0, #1
 800c258:	d14c      	bne.n	800c2f4 <_printf_i+0x200>
 800c25a:	f04f 30ff 	mov.w	r0, #4294967295
 800c25e:	b004      	add	sp, #16
 800c260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c264:	4834      	ldr	r0, [pc, #208]	; (800c338 <_printf_i+0x244>)
 800c266:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c26a:	680e      	ldr	r6, [r1, #0]
 800c26c:	6823      	ldr	r3, [r4, #0]
 800c26e:	f856 5b04 	ldr.w	r5, [r6], #4
 800c272:	061f      	lsls	r7, r3, #24
 800c274:	600e      	str	r6, [r1, #0]
 800c276:	d514      	bpl.n	800c2a2 <_printf_i+0x1ae>
 800c278:	07d9      	lsls	r1, r3, #31
 800c27a:	bf44      	itt	mi
 800c27c:	f043 0320 	orrmi.w	r3, r3, #32
 800c280:	6023      	strmi	r3, [r4, #0]
 800c282:	b91d      	cbnz	r5, 800c28c <_printf_i+0x198>
 800c284:	6823      	ldr	r3, [r4, #0]
 800c286:	f023 0320 	bic.w	r3, r3, #32
 800c28a:	6023      	str	r3, [r4, #0]
 800c28c:	2310      	movs	r3, #16
 800c28e:	e7af      	b.n	800c1f0 <_printf_i+0xfc>
 800c290:	6823      	ldr	r3, [r4, #0]
 800c292:	f043 0320 	orr.w	r3, r3, #32
 800c296:	6023      	str	r3, [r4, #0]
 800c298:	2378      	movs	r3, #120	; 0x78
 800c29a:	4828      	ldr	r0, [pc, #160]	; (800c33c <_printf_i+0x248>)
 800c29c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c2a0:	e7e3      	b.n	800c26a <_printf_i+0x176>
 800c2a2:	065e      	lsls	r6, r3, #25
 800c2a4:	bf48      	it	mi
 800c2a6:	b2ad      	uxthmi	r5, r5
 800c2a8:	e7e6      	b.n	800c278 <_printf_i+0x184>
 800c2aa:	4616      	mov	r6, r2
 800c2ac:	e7bb      	b.n	800c226 <_printf_i+0x132>
 800c2ae:	680b      	ldr	r3, [r1, #0]
 800c2b0:	6826      	ldr	r6, [r4, #0]
 800c2b2:	1d1d      	adds	r5, r3, #4
 800c2b4:	6960      	ldr	r0, [r4, #20]
 800c2b6:	600d      	str	r5, [r1, #0]
 800c2b8:	0635      	lsls	r5, r6, #24
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	d501      	bpl.n	800c2c2 <_printf_i+0x1ce>
 800c2be:	6018      	str	r0, [r3, #0]
 800c2c0:	e002      	b.n	800c2c8 <_printf_i+0x1d4>
 800c2c2:	0671      	lsls	r1, r6, #25
 800c2c4:	d5fb      	bpl.n	800c2be <_printf_i+0x1ca>
 800c2c6:	8018      	strh	r0, [r3, #0]
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	4616      	mov	r6, r2
 800c2cc:	6123      	str	r3, [r4, #16]
 800c2ce:	e7ba      	b.n	800c246 <_printf_i+0x152>
 800c2d0:	680b      	ldr	r3, [r1, #0]
 800c2d2:	1d1a      	adds	r2, r3, #4
 800c2d4:	600a      	str	r2, [r1, #0]
 800c2d6:	681e      	ldr	r6, [r3, #0]
 800c2d8:	2100      	movs	r1, #0
 800c2da:	4630      	mov	r0, r6
 800c2dc:	6862      	ldr	r2, [r4, #4]
 800c2de:	f000 fa9d 	bl	800c81c <memchr>
 800c2e2:	b108      	cbz	r0, 800c2e8 <_printf_i+0x1f4>
 800c2e4:	1b80      	subs	r0, r0, r6
 800c2e6:	6060      	str	r0, [r4, #4]
 800c2e8:	6863      	ldr	r3, [r4, #4]
 800c2ea:	6123      	str	r3, [r4, #16]
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2f2:	e7a8      	b.n	800c246 <_printf_i+0x152>
 800c2f4:	4632      	mov	r2, r6
 800c2f6:	4649      	mov	r1, r9
 800c2f8:	4640      	mov	r0, r8
 800c2fa:	6923      	ldr	r3, [r4, #16]
 800c2fc:	47d0      	blx	sl
 800c2fe:	3001      	adds	r0, #1
 800c300:	d0ab      	beq.n	800c25a <_printf_i+0x166>
 800c302:	6823      	ldr	r3, [r4, #0]
 800c304:	079b      	lsls	r3, r3, #30
 800c306:	d413      	bmi.n	800c330 <_printf_i+0x23c>
 800c308:	68e0      	ldr	r0, [r4, #12]
 800c30a:	9b03      	ldr	r3, [sp, #12]
 800c30c:	4298      	cmp	r0, r3
 800c30e:	bfb8      	it	lt
 800c310:	4618      	movlt	r0, r3
 800c312:	e7a4      	b.n	800c25e <_printf_i+0x16a>
 800c314:	2301      	movs	r3, #1
 800c316:	4632      	mov	r2, r6
 800c318:	4649      	mov	r1, r9
 800c31a:	4640      	mov	r0, r8
 800c31c:	47d0      	blx	sl
 800c31e:	3001      	adds	r0, #1
 800c320:	d09b      	beq.n	800c25a <_printf_i+0x166>
 800c322:	3501      	adds	r5, #1
 800c324:	68e3      	ldr	r3, [r4, #12]
 800c326:	9903      	ldr	r1, [sp, #12]
 800c328:	1a5b      	subs	r3, r3, r1
 800c32a:	42ab      	cmp	r3, r5
 800c32c:	dcf2      	bgt.n	800c314 <_printf_i+0x220>
 800c32e:	e7eb      	b.n	800c308 <_printf_i+0x214>
 800c330:	2500      	movs	r5, #0
 800c332:	f104 0619 	add.w	r6, r4, #25
 800c336:	e7f5      	b.n	800c324 <_printf_i+0x230>
 800c338:	0800cc7d 	.word	0x0800cc7d
 800c33c:	0800cc8e 	.word	0x0800cc8e

0800c340 <_sbrk_r>:
 800c340:	b538      	push	{r3, r4, r5, lr}
 800c342:	2300      	movs	r3, #0
 800c344:	4d05      	ldr	r5, [pc, #20]	; (800c35c <_sbrk_r+0x1c>)
 800c346:	4604      	mov	r4, r0
 800c348:	4608      	mov	r0, r1
 800c34a:	602b      	str	r3, [r5, #0]
 800c34c:	f7f6 fdc4 	bl	8002ed8 <_sbrk>
 800c350:	1c43      	adds	r3, r0, #1
 800c352:	d102      	bne.n	800c35a <_sbrk_r+0x1a>
 800c354:	682b      	ldr	r3, [r5, #0]
 800c356:	b103      	cbz	r3, 800c35a <_sbrk_r+0x1a>
 800c358:	6023      	str	r3, [r4, #0]
 800c35a:	bd38      	pop	{r3, r4, r5, pc}
 800c35c:	200015ac 	.word	0x200015ac

0800c360 <__sread>:
 800c360:	b510      	push	{r4, lr}
 800c362:	460c      	mov	r4, r1
 800c364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c368:	f000 fafe 	bl	800c968 <_read_r>
 800c36c:	2800      	cmp	r0, #0
 800c36e:	bfab      	itete	ge
 800c370:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c372:	89a3      	ldrhlt	r3, [r4, #12]
 800c374:	181b      	addge	r3, r3, r0
 800c376:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c37a:	bfac      	ite	ge
 800c37c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c37e:	81a3      	strhlt	r3, [r4, #12]
 800c380:	bd10      	pop	{r4, pc}

0800c382 <__swrite>:
 800c382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c386:	461f      	mov	r7, r3
 800c388:	898b      	ldrh	r3, [r1, #12]
 800c38a:	4605      	mov	r5, r0
 800c38c:	05db      	lsls	r3, r3, #23
 800c38e:	460c      	mov	r4, r1
 800c390:	4616      	mov	r6, r2
 800c392:	d505      	bpl.n	800c3a0 <__swrite+0x1e>
 800c394:	2302      	movs	r3, #2
 800c396:	2200      	movs	r2, #0
 800c398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c39c:	f000 f9c8 	bl	800c730 <_lseek_r>
 800c3a0:	89a3      	ldrh	r3, [r4, #12]
 800c3a2:	4632      	mov	r2, r6
 800c3a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3a8:	81a3      	strh	r3, [r4, #12]
 800c3aa:	4628      	mov	r0, r5
 800c3ac:	463b      	mov	r3, r7
 800c3ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3b6:	f000 b869 	b.w	800c48c <_write_r>

0800c3ba <__sseek>:
 800c3ba:	b510      	push	{r4, lr}
 800c3bc:	460c      	mov	r4, r1
 800c3be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3c2:	f000 f9b5 	bl	800c730 <_lseek_r>
 800c3c6:	1c43      	adds	r3, r0, #1
 800c3c8:	89a3      	ldrh	r3, [r4, #12]
 800c3ca:	bf15      	itete	ne
 800c3cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c3ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c3d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c3d6:	81a3      	strheq	r3, [r4, #12]
 800c3d8:	bf18      	it	ne
 800c3da:	81a3      	strhne	r3, [r4, #12]
 800c3dc:	bd10      	pop	{r4, pc}

0800c3de <__sclose>:
 800c3de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3e2:	f000 b8d3 	b.w	800c58c <_close_r>
	...

0800c3e8 <__swbuf_r>:
 800c3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ea:	460e      	mov	r6, r1
 800c3ec:	4614      	mov	r4, r2
 800c3ee:	4605      	mov	r5, r0
 800c3f0:	b118      	cbz	r0, 800c3fa <__swbuf_r+0x12>
 800c3f2:	6983      	ldr	r3, [r0, #24]
 800c3f4:	b90b      	cbnz	r3, 800c3fa <__swbuf_r+0x12>
 800c3f6:	f7ff fa5f 	bl	800b8b8 <__sinit>
 800c3fa:	4b21      	ldr	r3, [pc, #132]	; (800c480 <__swbuf_r+0x98>)
 800c3fc:	429c      	cmp	r4, r3
 800c3fe:	d12b      	bne.n	800c458 <__swbuf_r+0x70>
 800c400:	686c      	ldr	r4, [r5, #4]
 800c402:	69a3      	ldr	r3, [r4, #24]
 800c404:	60a3      	str	r3, [r4, #8]
 800c406:	89a3      	ldrh	r3, [r4, #12]
 800c408:	071a      	lsls	r2, r3, #28
 800c40a:	d52f      	bpl.n	800c46c <__swbuf_r+0x84>
 800c40c:	6923      	ldr	r3, [r4, #16]
 800c40e:	b36b      	cbz	r3, 800c46c <__swbuf_r+0x84>
 800c410:	6923      	ldr	r3, [r4, #16]
 800c412:	6820      	ldr	r0, [r4, #0]
 800c414:	b2f6      	uxtb	r6, r6
 800c416:	1ac0      	subs	r0, r0, r3
 800c418:	6963      	ldr	r3, [r4, #20]
 800c41a:	4637      	mov	r7, r6
 800c41c:	4283      	cmp	r3, r0
 800c41e:	dc04      	bgt.n	800c42a <__swbuf_r+0x42>
 800c420:	4621      	mov	r1, r4
 800c422:	4628      	mov	r0, r5
 800c424:	f000 f948 	bl	800c6b8 <_fflush_r>
 800c428:	bb30      	cbnz	r0, 800c478 <__swbuf_r+0x90>
 800c42a:	68a3      	ldr	r3, [r4, #8]
 800c42c:	3001      	adds	r0, #1
 800c42e:	3b01      	subs	r3, #1
 800c430:	60a3      	str	r3, [r4, #8]
 800c432:	6823      	ldr	r3, [r4, #0]
 800c434:	1c5a      	adds	r2, r3, #1
 800c436:	6022      	str	r2, [r4, #0]
 800c438:	701e      	strb	r6, [r3, #0]
 800c43a:	6963      	ldr	r3, [r4, #20]
 800c43c:	4283      	cmp	r3, r0
 800c43e:	d004      	beq.n	800c44a <__swbuf_r+0x62>
 800c440:	89a3      	ldrh	r3, [r4, #12]
 800c442:	07db      	lsls	r3, r3, #31
 800c444:	d506      	bpl.n	800c454 <__swbuf_r+0x6c>
 800c446:	2e0a      	cmp	r6, #10
 800c448:	d104      	bne.n	800c454 <__swbuf_r+0x6c>
 800c44a:	4621      	mov	r1, r4
 800c44c:	4628      	mov	r0, r5
 800c44e:	f000 f933 	bl	800c6b8 <_fflush_r>
 800c452:	b988      	cbnz	r0, 800c478 <__swbuf_r+0x90>
 800c454:	4638      	mov	r0, r7
 800c456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c458:	4b0a      	ldr	r3, [pc, #40]	; (800c484 <__swbuf_r+0x9c>)
 800c45a:	429c      	cmp	r4, r3
 800c45c:	d101      	bne.n	800c462 <__swbuf_r+0x7a>
 800c45e:	68ac      	ldr	r4, [r5, #8]
 800c460:	e7cf      	b.n	800c402 <__swbuf_r+0x1a>
 800c462:	4b09      	ldr	r3, [pc, #36]	; (800c488 <__swbuf_r+0xa0>)
 800c464:	429c      	cmp	r4, r3
 800c466:	bf08      	it	eq
 800c468:	68ec      	ldreq	r4, [r5, #12]
 800c46a:	e7ca      	b.n	800c402 <__swbuf_r+0x1a>
 800c46c:	4621      	mov	r1, r4
 800c46e:	4628      	mov	r0, r5
 800c470:	f000 f81e 	bl	800c4b0 <__swsetup_r>
 800c474:	2800      	cmp	r0, #0
 800c476:	d0cb      	beq.n	800c410 <__swbuf_r+0x28>
 800c478:	f04f 37ff 	mov.w	r7, #4294967295
 800c47c:	e7ea      	b.n	800c454 <__swbuf_r+0x6c>
 800c47e:	bf00      	nop
 800c480:	0800cc2c 	.word	0x0800cc2c
 800c484:	0800cc4c 	.word	0x0800cc4c
 800c488:	0800cc0c 	.word	0x0800cc0c

0800c48c <_write_r>:
 800c48c:	b538      	push	{r3, r4, r5, lr}
 800c48e:	4604      	mov	r4, r0
 800c490:	4608      	mov	r0, r1
 800c492:	4611      	mov	r1, r2
 800c494:	2200      	movs	r2, #0
 800c496:	4d05      	ldr	r5, [pc, #20]	; (800c4ac <_write_r+0x20>)
 800c498:	602a      	str	r2, [r5, #0]
 800c49a:	461a      	mov	r2, r3
 800c49c:	f7f5 f8aa 	bl	80015f4 <_write>
 800c4a0:	1c43      	adds	r3, r0, #1
 800c4a2:	d102      	bne.n	800c4aa <_write_r+0x1e>
 800c4a4:	682b      	ldr	r3, [r5, #0]
 800c4a6:	b103      	cbz	r3, 800c4aa <_write_r+0x1e>
 800c4a8:	6023      	str	r3, [r4, #0]
 800c4aa:	bd38      	pop	{r3, r4, r5, pc}
 800c4ac:	200015ac 	.word	0x200015ac

0800c4b0 <__swsetup_r>:
 800c4b0:	4b32      	ldr	r3, [pc, #200]	; (800c57c <__swsetup_r+0xcc>)
 800c4b2:	b570      	push	{r4, r5, r6, lr}
 800c4b4:	681d      	ldr	r5, [r3, #0]
 800c4b6:	4606      	mov	r6, r0
 800c4b8:	460c      	mov	r4, r1
 800c4ba:	b125      	cbz	r5, 800c4c6 <__swsetup_r+0x16>
 800c4bc:	69ab      	ldr	r3, [r5, #24]
 800c4be:	b913      	cbnz	r3, 800c4c6 <__swsetup_r+0x16>
 800c4c0:	4628      	mov	r0, r5
 800c4c2:	f7ff f9f9 	bl	800b8b8 <__sinit>
 800c4c6:	4b2e      	ldr	r3, [pc, #184]	; (800c580 <__swsetup_r+0xd0>)
 800c4c8:	429c      	cmp	r4, r3
 800c4ca:	d10f      	bne.n	800c4ec <__swsetup_r+0x3c>
 800c4cc:	686c      	ldr	r4, [r5, #4]
 800c4ce:	89a3      	ldrh	r3, [r4, #12]
 800c4d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c4d4:	0719      	lsls	r1, r3, #28
 800c4d6:	d42c      	bmi.n	800c532 <__swsetup_r+0x82>
 800c4d8:	06dd      	lsls	r5, r3, #27
 800c4da:	d411      	bmi.n	800c500 <__swsetup_r+0x50>
 800c4dc:	2309      	movs	r3, #9
 800c4de:	6033      	str	r3, [r6, #0]
 800c4e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4e8:	81a3      	strh	r3, [r4, #12]
 800c4ea:	e03e      	b.n	800c56a <__swsetup_r+0xba>
 800c4ec:	4b25      	ldr	r3, [pc, #148]	; (800c584 <__swsetup_r+0xd4>)
 800c4ee:	429c      	cmp	r4, r3
 800c4f0:	d101      	bne.n	800c4f6 <__swsetup_r+0x46>
 800c4f2:	68ac      	ldr	r4, [r5, #8]
 800c4f4:	e7eb      	b.n	800c4ce <__swsetup_r+0x1e>
 800c4f6:	4b24      	ldr	r3, [pc, #144]	; (800c588 <__swsetup_r+0xd8>)
 800c4f8:	429c      	cmp	r4, r3
 800c4fa:	bf08      	it	eq
 800c4fc:	68ec      	ldreq	r4, [r5, #12]
 800c4fe:	e7e6      	b.n	800c4ce <__swsetup_r+0x1e>
 800c500:	0758      	lsls	r0, r3, #29
 800c502:	d512      	bpl.n	800c52a <__swsetup_r+0x7a>
 800c504:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c506:	b141      	cbz	r1, 800c51a <__swsetup_r+0x6a>
 800c508:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c50c:	4299      	cmp	r1, r3
 800c50e:	d002      	beq.n	800c516 <__swsetup_r+0x66>
 800c510:	4630      	mov	r0, r6
 800c512:	f000 f9b7 	bl	800c884 <_free_r>
 800c516:	2300      	movs	r3, #0
 800c518:	6363      	str	r3, [r4, #52]	; 0x34
 800c51a:	89a3      	ldrh	r3, [r4, #12]
 800c51c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c520:	81a3      	strh	r3, [r4, #12]
 800c522:	2300      	movs	r3, #0
 800c524:	6063      	str	r3, [r4, #4]
 800c526:	6923      	ldr	r3, [r4, #16]
 800c528:	6023      	str	r3, [r4, #0]
 800c52a:	89a3      	ldrh	r3, [r4, #12]
 800c52c:	f043 0308 	orr.w	r3, r3, #8
 800c530:	81a3      	strh	r3, [r4, #12]
 800c532:	6923      	ldr	r3, [r4, #16]
 800c534:	b94b      	cbnz	r3, 800c54a <__swsetup_r+0x9a>
 800c536:	89a3      	ldrh	r3, [r4, #12]
 800c538:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c53c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c540:	d003      	beq.n	800c54a <__swsetup_r+0x9a>
 800c542:	4621      	mov	r1, r4
 800c544:	4630      	mov	r0, r6
 800c546:	f000 f929 	bl	800c79c <__smakebuf_r>
 800c54a:	89a0      	ldrh	r0, [r4, #12]
 800c54c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c550:	f010 0301 	ands.w	r3, r0, #1
 800c554:	d00a      	beq.n	800c56c <__swsetup_r+0xbc>
 800c556:	2300      	movs	r3, #0
 800c558:	60a3      	str	r3, [r4, #8]
 800c55a:	6963      	ldr	r3, [r4, #20]
 800c55c:	425b      	negs	r3, r3
 800c55e:	61a3      	str	r3, [r4, #24]
 800c560:	6923      	ldr	r3, [r4, #16]
 800c562:	b943      	cbnz	r3, 800c576 <__swsetup_r+0xc6>
 800c564:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c568:	d1ba      	bne.n	800c4e0 <__swsetup_r+0x30>
 800c56a:	bd70      	pop	{r4, r5, r6, pc}
 800c56c:	0781      	lsls	r1, r0, #30
 800c56e:	bf58      	it	pl
 800c570:	6963      	ldrpl	r3, [r4, #20]
 800c572:	60a3      	str	r3, [r4, #8]
 800c574:	e7f4      	b.n	800c560 <__swsetup_r+0xb0>
 800c576:	2000      	movs	r0, #0
 800c578:	e7f7      	b.n	800c56a <__swsetup_r+0xba>
 800c57a:	bf00      	nop
 800c57c:	20000190 	.word	0x20000190
 800c580:	0800cc2c 	.word	0x0800cc2c
 800c584:	0800cc4c 	.word	0x0800cc4c
 800c588:	0800cc0c 	.word	0x0800cc0c

0800c58c <_close_r>:
 800c58c:	b538      	push	{r3, r4, r5, lr}
 800c58e:	2300      	movs	r3, #0
 800c590:	4d05      	ldr	r5, [pc, #20]	; (800c5a8 <_close_r+0x1c>)
 800c592:	4604      	mov	r4, r0
 800c594:	4608      	mov	r0, r1
 800c596:	602b      	str	r3, [r5, #0]
 800c598:	f7f6 fc6d 	bl	8002e76 <_close>
 800c59c:	1c43      	adds	r3, r0, #1
 800c59e:	d102      	bne.n	800c5a6 <_close_r+0x1a>
 800c5a0:	682b      	ldr	r3, [r5, #0]
 800c5a2:	b103      	cbz	r3, 800c5a6 <_close_r+0x1a>
 800c5a4:	6023      	str	r3, [r4, #0]
 800c5a6:	bd38      	pop	{r3, r4, r5, pc}
 800c5a8:	200015ac 	.word	0x200015ac

0800c5ac <__sflush_r>:
 800c5ac:	898a      	ldrh	r2, [r1, #12]
 800c5ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5b2:	4605      	mov	r5, r0
 800c5b4:	0710      	lsls	r0, r2, #28
 800c5b6:	460c      	mov	r4, r1
 800c5b8:	d458      	bmi.n	800c66c <__sflush_r+0xc0>
 800c5ba:	684b      	ldr	r3, [r1, #4]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	dc05      	bgt.n	800c5cc <__sflush_r+0x20>
 800c5c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	dc02      	bgt.n	800c5cc <__sflush_r+0x20>
 800c5c6:	2000      	movs	r0, #0
 800c5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c5ce:	2e00      	cmp	r6, #0
 800c5d0:	d0f9      	beq.n	800c5c6 <__sflush_r+0x1a>
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c5d8:	682f      	ldr	r7, [r5, #0]
 800c5da:	602b      	str	r3, [r5, #0]
 800c5dc:	d032      	beq.n	800c644 <__sflush_r+0x98>
 800c5de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c5e0:	89a3      	ldrh	r3, [r4, #12]
 800c5e2:	075a      	lsls	r2, r3, #29
 800c5e4:	d505      	bpl.n	800c5f2 <__sflush_r+0x46>
 800c5e6:	6863      	ldr	r3, [r4, #4]
 800c5e8:	1ac0      	subs	r0, r0, r3
 800c5ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c5ec:	b10b      	cbz	r3, 800c5f2 <__sflush_r+0x46>
 800c5ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c5f0:	1ac0      	subs	r0, r0, r3
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c5f8:	4628      	mov	r0, r5
 800c5fa:	6a21      	ldr	r1, [r4, #32]
 800c5fc:	47b0      	blx	r6
 800c5fe:	1c43      	adds	r3, r0, #1
 800c600:	89a3      	ldrh	r3, [r4, #12]
 800c602:	d106      	bne.n	800c612 <__sflush_r+0x66>
 800c604:	6829      	ldr	r1, [r5, #0]
 800c606:	291d      	cmp	r1, #29
 800c608:	d82c      	bhi.n	800c664 <__sflush_r+0xb8>
 800c60a:	4a2a      	ldr	r2, [pc, #168]	; (800c6b4 <__sflush_r+0x108>)
 800c60c:	40ca      	lsrs	r2, r1
 800c60e:	07d6      	lsls	r6, r2, #31
 800c610:	d528      	bpl.n	800c664 <__sflush_r+0xb8>
 800c612:	2200      	movs	r2, #0
 800c614:	6062      	str	r2, [r4, #4]
 800c616:	6922      	ldr	r2, [r4, #16]
 800c618:	04d9      	lsls	r1, r3, #19
 800c61a:	6022      	str	r2, [r4, #0]
 800c61c:	d504      	bpl.n	800c628 <__sflush_r+0x7c>
 800c61e:	1c42      	adds	r2, r0, #1
 800c620:	d101      	bne.n	800c626 <__sflush_r+0x7a>
 800c622:	682b      	ldr	r3, [r5, #0]
 800c624:	b903      	cbnz	r3, 800c628 <__sflush_r+0x7c>
 800c626:	6560      	str	r0, [r4, #84]	; 0x54
 800c628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c62a:	602f      	str	r7, [r5, #0]
 800c62c:	2900      	cmp	r1, #0
 800c62e:	d0ca      	beq.n	800c5c6 <__sflush_r+0x1a>
 800c630:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c634:	4299      	cmp	r1, r3
 800c636:	d002      	beq.n	800c63e <__sflush_r+0x92>
 800c638:	4628      	mov	r0, r5
 800c63a:	f000 f923 	bl	800c884 <_free_r>
 800c63e:	2000      	movs	r0, #0
 800c640:	6360      	str	r0, [r4, #52]	; 0x34
 800c642:	e7c1      	b.n	800c5c8 <__sflush_r+0x1c>
 800c644:	6a21      	ldr	r1, [r4, #32]
 800c646:	2301      	movs	r3, #1
 800c648:	4628      	mov	r0, r5
 800c64a:	47b0      	blx	r6
 800c64c:	1c41      	adds	r1, r0, #1
 800c64e:	d1c7      	bne.n	800c5e0 <__sflush_r+0x34>
 800c650:	682b      	ldr	r3, [r5, #0]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d0c4      	beq.n	800c5e0 <__sflush_r+0x34>
 800c656:	2b1d      	cmp	r3, #29
 800c658:	d001      	beq.n	800c65e <__sflush_r+0xb2>
 800c65a:	2b16      	cmp	r3, #22
 800c65c:	d101      	bne.n	800c662 <__sflush_r+0xb6>
 800c65e:	602f      	str	r7, [r5, #0]
 800c660:	e7b1      	b.n	800c5c6 <__sflush_r+0x1a>
 800c662:	89a3      	ldrh	r3, [r4, #12]
 800c664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c668:	81a3      	strh	r3, [r4, #12]
 800c66a:	e7ad      	b.n	800c5c8 <__sflush_r+0x1c>
 800c66c:	690f      	ldr	r7, [r1, #16]
 800c66e:	2f00      	cmp	r7, #0
 800c670:	d0a9      	beq.n	800c5c6 <__sflush_r+0x1a>
 800c672:	0793      	lsls	r3, r2, #30
 800c674:	bf18      	it	ne
 800c676:	2300      	movne	r3, #0
 800c678:	680e      	ldr	r6, [r1, #0]
 800c67a:	bf08      	it	eq
 800c67c:	694b      	ldreq	r3, [r1, #20]
 800c67e:	eba6 0807 	sub.w	r8, r6, r7
 800c682:	600f      	str	r7, [r1, #0]
 800c684:	608b      	str	r3, [r1, #8]
 800c686:	f1b8 0f00 	cmp.w	r8, #0
 800c68a:	dd9c      	ble.n	800c5c6 <__sflush_r+0x1a>
 800c68c:	4643      	mov	r3, r8
 800c68e:	463a      	mov	r2, r7
 800c690:	4628      	mov	r0, r5
 800c692:	6a21      	ldr	r1, [r4, #32]
 800c694:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c696:	47b0      	blx	r6
 800c698:	2800      	cmp	r0, #0
 800c69a:	dc06      	bgt.n	800c6aa <__sflush_r+0xfe>
 800c69c:	89a3      	ldrh	r3, [r4, #12]
 800c69e:	f04f 30ff 	mov.w	r0, #4294967295
 800c6a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6a6:	81a3      	strh	r3, [r4, #12]
 800c6a8:	e78e      	b.n	800c5c8 <__sflush_r+0x1c>
 800c6aa:	4407      	add	r7, r0
 800c6ac:	eba8 0800 	sub.w	r8, r8, r0
 800c6b0:	e7e9      	b.n	800c686 <__sflush_r+0xda>
 800c6b2:	bf00      	nop
 800c6b4:	20400001 	.word	0x20400001

0800c6b8 <_fflush_r>:
 800c6b8:	b538      	push	{r3, r4, r5, lr}
 800c6ba:	690b      	ldr	r3, [r1, #16]
 800c6bc:	4605      	mov	r5, r0
 800c6be:	460c      	mov	r4, r1
 800c6c0:	b913      	cbnz	r3, 800c6c8 <_fflush_r+0x10>
 800c6c2:	2500      	movs	r5, #0
 800c6c4:	4628      	mov	r0, r5
 800c6c6:	bd38      	pop	{r3, r4, r5, pc}
 800c6c8:	b118      	cbz	r0, 800c6d2 <_fflush_r+0x1a>
 800c6ca:	6983      	ldr	r3, [r0, #24]
 800c6cc:	b90b      	cbnz	r3, 800c6d2 <_fflush_r+0x1a>
 800c6ce:	f7ff f8f3 	bl	800b8b8 <__sinit>
 800c6d2:	4b14      	ldr	r3, [pc, #80]	; (800c724 <_fflush_r+0x6c>)
 800c6d4:	429c      	cmp	r4, r3
 800c6d6:	d11b      	bne.n	800c710 <_fflush_r+0x58>
 800c6d8:	686c      	ldr	r4, [r5, #4]
 800c6da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d0ef      	beq.n	800c6c2 <_fflush_r+0xa>
 800c6e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c6e4:	07d0      	lsls	r0, r2, #31
 800c6e6:	d404      	bmi.n	800c6f2 <_fflush_r+0x3a>
 800c6e8:	0599      	lsls	r1, r3, #22
 800c6ea:	d402      	bmi.n	800c6f2 <_fflush_r+0x3a>
 800c6ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6ee:	f7ff f981 	bl	800b9f4 <__retarget_lock_acquire_recursive>
 800c6f2:	4628      	mov	r0, r5
 800c6f4:	4621      	mov	r1, r4
 800c6f6:	f7ff ff59 	bl	800c5ac <__sflush_r>
 800c6fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c6fc:	4605      	mov	r5, r0
 800c6fe:	07da      	lsls	r2, r3, #31
 800c700:	d4e0      	bmi.n	800c6c4 <_fflush_r+0xc>
 800c702:	89a3      	ldrh	r3, [r4, #12]
 800c704:	059b      	lsls	r3, r3, #22
 800c706:	d4dd      	bmi.n	800c6c4 <_fflush_r+0xc>
 800c708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c70a:	f7ff f974 	bl	800b9f6 <__retarget_lock_release_recursive>
 800c70e:	e7d9      	b.n	800c6c4 <_fflush_r+0xc>
 800c710:	4b05      	ldr	r3, [pc, #20]	; (800c728 <_fflush_r+0x70>)
 800c712:	429c      	cmp	r4, r3
 800c714:	d101      	bne.n	800c71a <_fflush_r+0x62>
 800c716:	68ac      	ldr	r4, [r5, #8]
 800c718:	e7df      	b.n	800c6da <_fflush_r+0x22>
 800c71a:	4b04      	ldr	r3, [pc, #16]	; (800c72c <_fflush_r+0x74>)
 800c71c:	429c      	cmp	r4, r3
 800c71e:	bf08      	it	eq
 800c720:	68ec      	ldreq	r4, [r5, #12]
 800c722:	e7da      	b.n	800c6da <_fflush_r+0x22>
 800c724:	0800cc2c 	.word	0x0800cc2c
 800c728:	0800cc4c 	.word	0x0800cc4c
 800c72c:	0800cc0c 	.word	0x0800cc0c

0800c730 <_lseek_r>:
 800c730:	b538      	push	{r3, r4, r5, lr}
 800c732:	4604      	mov	r4, r0
 800c734:	4608      	mov	r0, r1
 800c736:	4611      	mov	r1, r2
 800c738:	2200      	movs	r2, #0
 800c73a:	4d05      	ldr	r5, [pc, #20]	; (800c750 <_lseek_r+0x20>)
 800c73c:	602a      	str	r2, [r5, #0]
 800c73e:	461a      	mov	r2, r3
 800c740:	f7f6 fbbd 	bl	8002ebe <_lseek>
 800c744:	1c43      	adds	r3, r0, #1
 800c746:	d102      	bne.n	800c74e <_lseek_r+0x1e>
 800c748:	682b      	ldr	r3, [r5, #0]
 800c74a:	b103      	cbz	r3, 800c74e <_lseek_r+0x1e>
 800c74c:	6023      	str	r3, [r4, #0]
 800c74e:	bd38      	pop	{r3, r4, r5, pc}
 800c750:	200015ac 	.word	0x200015ac

0800c754 <__swhatbuf_r>:
 800c754:	b570      	push	{r4, r5, r6, lr}
 800c756:	460e      	mov	r6, r1
 800c758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c75c:	4614      	mov	r4, r2
 800c75e:	2900      	cmp	r1, #0
 800c760:	461d      	mov	r5, r3
 800c762:	b096      	sub	sp, #88	; 0x58
 800c764:	da07      	bge.n	800c776 <__swhatbuf_r+0x22>
 800c766:	2300      	movs	r3, #0
 800c768:	602b      	str	r3, [r5, #0]
 800c76a:	89b3      	ldrh	r3, [r6, #12]
 800c76c:	061a      	lsls	r2, r3, #24
 800c76e:	d410      	bmi.n	800c792 <__swhatbuf_r+0x3e>
 800c770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c774:	e00e      	b.n	800c794 <__swhatbuf_r+0x40>
 800c776:	466a      	mov	r2, sp
 800c778:	f000 f908 	bl	800c98c <_fstat_r>
 800c77c:	2800      	cmp	r0, #0
 800c77e:	dbf2      	blt.n	800c766 <__swhatbuf_r+0x12>
 800c780:	9a01      	ldr	r2, [sp, #4]
 800c782:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c786:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c78a:	425a      	negs	r2, r3
 800c78c:	415a      	adcs	r2, r3
 800c78e:	602a      	str	r2, [r5, #0]
 800c790:	e7ee      	b.n	800c770 <__swhatbuf_r+0x1c>
 800c792:	2340      	movs	r3, #64	; 0x40
 800c794:	2000      	movs	r0, #0
 800c796:	6023      	str	r3, [r4, #0]
 800c798:	b016      	add	sp, #88	; 0x58
 800c79a:	bd70      	pop	{r4, r5, r6, pc}

0800c79c <__smakebuf_r>:
 800c79c:	898b      	ldrh	r3, [r1, #12]
 800c79e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c7a0:	079d      	lsls	r5, r3, #30
 800c7a2:	4606      	mov	r6, r0
 800c7a4:	460c      	mov	r4, r1
 800c7a6:	d507      	bpl.n	800c7b8 <__smakebuf_r+0x1c>
 800c7a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c7ac:	6023      	str	r3, [r4, #0]
 800c7ae:	6123      	str	r3, [r4, #16]
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	6163      	str	r3, [r4, #20]
 800c7b4:	b002      	add	sp, #8
 800c7b6:	bd70      	pop	{r4, r5, r6, pc}
 800c7b8:	466a      	mov	r2, sp
 800c7ba:	ab01      	add	r3, sp, #4
 800c7bc:	f7ff ffca 	bl	800c754 <__swhatbuf_r>
 800c7c0:	9900      	ldr	r1, [sp, #0]
 800c7c2:	4605      	mov	r5, r0
 800c7c4:	4630      	mov	r0, r6
 800c7c6:	f7ff f917 	bl	800b9f8 <_malloc_r>
 800c7ca:	b948      	cbnz	r0, 800c7e0 <__smakebuf_r+0x44>
 800c7cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7d0:	059a      	lsls	r2, r3, #22
 800c7d2:	d4ef      	bmi.n	800c7b4 <__smakebuf_r+0x18>
 800c7d4:	f023 0303 	bic.w	r3, r3, #3
 800c7d8:	f043 0302 	orr.w	r3, r3, #2
 800c7dc:	81a3      	strh	r3, [r4, #12]
 800c7de:	e7e3      	b.n	800c7a8 <__smakebuf_r+0xc>
 800c7e0:	4b0d      	ldr	r3, [pc, #52]	; (800c818 <__smakebuf_r+0x7c>)
 800c7e2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c7e4:	89a3      	ldrh	r3, [r4, #12]
 800c7e6:	6020      	str	r0, [r4, #0]
 800c7e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7ec:	81a3      	strh	r3, [r4, #12]
 800c7ee:	9b00      	ldr	r3, [sp, #0]
 800c7f0:	6120      	str	r0, [r4, #16]
 800c7f2:	6163      	str	r3, [r4, #20]
 800c7f4:	9b01      	ldr	r3, [sp, #4]
 800c7f6:	b15b      	cbz	r3, 800c810 <__smakebuf_r+0x74>
 800c7f8:	4630      	mov	r0, r6
 800c7fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7fe:	f000 f8d7 	bl	800c9b0 <_isatty_r>
 800c802:	b128      	cbz	r0, 800c810 <__smakebuf_r+0x74>
 800c804:	89a3      	ldrh	r3, [r4, #12]
 800c806:	f023 0303 	bic.w	r3, r3, #3
 800c80a:	f043 0301 	orr.w	r3, r3, #1
 800c80e:	81a3      	strh	r3, [r4, #12]
 800c810:	89a0      	ldrh	r0, [r4, #12]
 800c812:	4305      	orrs	r5, r0
 800c814:	81a5      	strh	r5, [r4, #12]
 800c816:	e7cd      	b.n	800c7b4 <__smakebuf_r+0x18>
 800c818:	0800b851 	.word	0x0800b851

0800c81c <memchr>:
 800c81c:	4603      	mov	r3, r0
 800c81e:	b510      	push	{r4, lr}
 800c820:	b2c9      	uxtb	r1, r1
 800c822:	4402      	add	r2, r0
 800c824:	4293      	cmp	r3, r2
 800c826:	4618      	mov	r0, r3
 800c828:	d101      	bne.n	800c82e <memchr+0x12>
 800c82a:	2000      	movs	r0, #0
 800c82c:	e003      	b.n	800c836 <memchr+0x1a>
 800c82e:	7804      	ldrb	r4, [r0, #0]
 800c830:	3301      	adds	r3, #1
 800c832:	428c      	cmp	r4, r1
 800c834:	d1f6      	bne.n	800c824 <memchr+0x8>
 800c836:	bd10      	pop	{r4, pc}

0800c838 <memmove>:
 800c838:	4288      	cmp	r0, r1
 800c83a:	b510      	push	{r4, lr}
 800c83c:	eb01 0402 	add.w	r4, r1, r2
 800c840:	d902      	bls.n	800c848 <memmove+0x10>
 800c842:	4284      	cmp	r4, r0
 800c844:	4623      	mov	r3, r4
 800c846:	d807      	bhi.n	800c858 <memmove+0x20>
 800c848:	1e43      	subs	r3, r0, #1
 800c84a:	42a1      	cmp	r1, r4
 800c84c:	d008      	beq.n	800c860 <memmove+0x28>
 800c84e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c852:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c856:	e7f8      	b.n	800c84a <memmove+0x12>
 800c858:	4601      	mov	r1, r0
 800c85a:	4402      	add	r2, r0
 800c85c:	428a      	cmp	r2, r1
 800c85e:	d100      	bne.n	800c862 <memmove+0x2a>
 800c860:	bd10      	pop	{r4, pc}
 800c862:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c866:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c86a:	e7f7      	b.n	800c85c <memmove+0x24>

0800c86c <__malloc_lock>:
 800c86c:	4801      	ldr	r0, [pc, #4]	; (800c874 <__malloc_lock+0x8>)
 800c86e:	f7ff b8c1 	b.w	800b9f4 <__retarget_lock_acquire_recursive>
 800c872:	bf00      	nop
 800c874:	200015a4 	.word	0x200015a4

0800c878 <__malloc_unlock>:
 800c878:	4801      	ldr	r0, [pc, #4]	; (800c880 <__malloc_unlock+0x8>)
 800c87a:	f7ff b8bc 	b.w	800b9f6 <__retarget_lock_release_recursive>
 800c87e:	bf00      	nop
 800c880:	200015a4 	.word	0x200015a4

0800c884 <_free_r>:
 800c884:	b538      	push	{r3, r4, r5, lr}
 800c886:	4605      	mov	r5, r0
 800c888:	2900      	cmp	r1, #0
 800c88a:	d043      	beq.n	800c914 <_free_r+0x90>
 800c88c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c890:	1f0c      	subs	r4, r1, #4
 800c892:	2b00      	cmp	r3, #0
 800c894:	bfb8      	it	lt
 800c896:	18e4      	addlt	r4, r4, r3
 800c898:	f7ff ffe8 	bl	800c86c <__malloc_lock>
 800c89c:	4a1e      	ldr	r2, [pc, #120]	; (800c918 <_free_r+0x94>)
 800c89e:	6813      	ldr	r3, [r2, #0]
 800c8a0:	4610      	mov	r0, r2
 800c8a2:	b933      	cbnz	r3, 800c8b2 <_free_r+0x2e>
 800c8a4:	6063      	str	r3, [r4, #4]
 800c8a6:	6014      	str	r4, [r2, #0]
 800c8a8:	4628      	mov	r0, r5
 800c8aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8ae:	f7ff bfe3 	b.w	800c878 <__malloc_unlock>
 800c8b2:	42a3      	cmp	r3, r4
 800c8b4:	d90a      	bls.n	800c8cc <_free_r+0x48>
 800c8b6:	6821      	ldr	r1, [r4, #0]
 800c8b8:	1862      	adds	r2, r4, r1
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	bf01      	itttt	eq
 800c8be:	681a      	ldreq	r2, [r3, #0]
 800c8c0:	685b      	ldreq	r3, [r3, #4]
 800c8c2:	1852      	addeq	r2, r2, r1
 800c8c4:	6022      	streq	r2, [r4, #0]
 800c8c6:	6063      	str	r3, [r4, #4]
 800c8c8:	6004      	str	r4, [r0, #0]
 800c8ca:	e7ed      	b.n	800c8a8 <_free_r+0x24>
 800c8cc:	461a      	mov	r2, r3
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	b10b      	cbz	r3, 800c8d6 <_free_r+0x52>
 800c8d2:	42a3      	cmp	r3, r4
 800c8d4:	d9fa      	bls.n	800c8cc <_free_r+0x48>
 800c8d6:	6811      	ldr	r1, [r2, #0]
 800c8d8:	1850      	adds	r0, r2, r1
 800c8da:	42a0      	cmp	r0, r4
 800c8dc:	d10b      	bne.n	800c8f6 <_free_r+0x72>
 800c8de:	6820      	ldr	r0, [r4, #0]
 800c8e0:	4401      	add	r1, r0
 800c8e2:	1850      	adds	r0, r2, r1
 800c8e4:	4283      	cmp	r3, r0
 800c8e6:	6011      	str	r1, [r2, #0]
 800c8e8:	d1de      	bne.n	800c8a8 <_free_r+0x24>
 800c8ea:	6818      	ldr	r0, [r3, #0]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	4401      	add	r1, r0
 800c8f0:	6011      	str	r1, [r2, #0]
 800c8f2:	6053      	str	r3, [r2, #4]
 800c8f4:	e7d8      	b.n	800c8a8 <_free_r+0x24>
 800c8f6:	d902      	bls.n	800c8fe <_free_r+0x7a>
 800c8f8:	230c      	movs	r3, #12
 800c8fa:	602b      	str	r3, [r5, #0]
 800c8fc:	e7d4      	b.n	800c8a8 <_free_r+0x24>
 800c8fe:	6820      	ldr	r0, [r4, #0]
 800c900:	1821      	adds	r1, r4, r0
 800c902:	428b      	cmp	r3, r1
 800c904:	bf01      	itttt	eq
 800c906:	6819      	ldreq	r1, [r3, #0]
 800c908:	685b      	ldreq	r3, [r3, #4]
 800c90a:	1809      	addeq	r1, r1, r0
 800c90c:	6021      	streq	r1, [r4, #0]
 800c90e:	6063      	str	r3, [r4, #4]
 800c910:	6054      	str	r4, [r2, #4]
 800c912:	e7c9      	b.n	800c8a8 <_free_r+0x24>
 800c914:	bd38      	pop	{r3, r4, r5, pc}
 800c916:	bf00      	nop
 800c918:	200004a4 	.word	0x200004a4

0800c91c <_realloc_r>:
 800c91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c91e:	4607      	mov	r7, r0
 800c920:	4614      	mov	r4, r2
 800c922:	460e      	mov	r6, r1
 800c924:	b921      	cbnz	r1, 800c930 <_realloc_r+0x14>
 800c926:	4611      	mov	r1, r2
 800c928:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c92c:	f7ff b864 	b.w	800b9f8 <_malloc_r>
 800c930:	b922      	cbnz	r2, 800c93c <_realloc_r+0x20>
 800c932:	f7ff ffa7 	bl	800c884 <_free_r>
 800c936:	4625      	mov	r5, r4
 800c938:	4628      	mov	r0, r5
 800c93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c93c:	f000 f848 	bl	800c9d0 <_malloc_usable_size_r>
 800c940:	42a0      	cmp	r0, r4
 800c942:	d20f      	bcs.n	800c964 <_realloc_r+0x48>
 800c944:	4621      	mov	r1, r4
 800c946:	4638      	mov	r0, r7
 800c948:	f7ff f856 	bl	800b9f8 <_malloc_r>
 800c94c:	4605      	mov	r5, r0
 800c94e:	2800      	cmp	r0, #0
 800c950:	d0f2      	beq.n	800c938 <_realloc_r+0x1c>
 800c952:	4631      	mov	r1, r6
 800c954:	4622      	mov	r2, r4
 800c956:	f7fe ff09 	bl	800b76c <memcpy>
 800c95a:	4631      	mov	r1, r6
 800c95c:	4638      	mov	r0, r7
 800c95e:	f7ff ff91 	bl	800c884 <_free_r>
 800c962:	e7e9      	b.n	800c938 <_realloc_r+0x1c>
 800c964:	4635      	mov	r5, r6
 800c966:	e7e7      	b.n	800c938 <_realloc_r+0x1c>

0800c968 <_read_r>:
 800c968:	b538      	push	{r3, r4, r5, lr}
 800c96a:	4604      	mov	r4, r0
 800c96c:	4608      	mov	r0, r1
 800c96e:	4611      	mov	r1, r2
 800c970:	2200      	movs	r2, #0
 800c972:	4d05      	ldr	r5, [pc, #20]	; (800c988 <_read_r+0x20>)
 800c974:	602a      	str	r2, [r5, #0]
 800c976:	461a      	mov	r2, r3
 800c978:	f7f6 fa60 	bl	8002e3c <_read>
 800c97c:	1c43      	adds	r3, r0, #1
 800c97e:	d102      	bne.n	800c986 <_read_r+0x1e>
 800c980:	682b      	ldr	r3, [r5, #0]
 800c982:	b103      	cbz	r3, 800c986 <_read_r+0x1e>
 800c984:	6023      	str	r3, [r4, #0]
 800c986:	bd38      	pop	{r3, r4, r5, pc}
 800c988:	200015ac 	.word	0x200015ac

0800c98c <_fstat_r>:
 800c98c:	b538      	push	{r3, r4, r5, lr}
 800c98e:	2300      	movs	r3, #0
 800c990:	4d06      	ldr	r5, [pc, #24]	; (800c9ac <_fstat_r+0x20>)
 800c992:	4604      	mov	r4, r0
 800c994:	4608      	mov	r0, r1
 800c996:	4611      	mov	r1, r2
 800c998:	602b      	str	r3, [r5, #0]
 800c99a:	f7f6 fa77 	bl	8002e8c <_fstat>
 800c99e:	1c43      	adds	r3, r0, #1
 800c9a0:	d102      	bne.n	800c9a8 <_fstat_r+0x1c>
 800c9a2:	682b      	ldr	r3, [r5, #0]
 800c9a4:	b103      	cbz	r3, 800c9a8 <_fstat_r+0x1c>
 800c9a6:	6023      	str	r3, [r4, #0]
 800c9a8:	bd38      	pop	{r3, r4, r5, pc}
 800c9aa:	bf00      	nop
 800c9ac:	200015ac 	.word	0x200015ac

0800c9b0 <_isatty_r>:
 800c9b0:	b538      	push	{r3, r4, r5, lr}
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	4d05      	ldr	r5, [pc, #20]	; (800c9cc <_isatty_r+0x1c>)
 800c9b6:	4604      	mov	r4, r0
 800c9b8:	4608      	mov	r0, r1
 800c9ba:	602b      	str	r3, [r5, #0]
 800c9bc:	f7f6 fa75 	bl	8002eaa <_isatty>
 800c9c0:	1c43      	adds	r3, r0, #1
 800c9c2:	d102      	bne.n	800c9ca <_isatty_r+0x1a>
 800c9c4:	682b      	ldr	r3, [r5, #0]
 800c9c6:	b103      	cbz	r3, 800c9ca <_isatty_r+0x1a>
 800c9c8:	6023      	str	r3, [r4, #0]
 800c9ca:	bd38      	pop	{r3, r4, r5, pc}
 800c9cc:	200015ac 	.word	0x200015ac

0800c9d0 <_malloc_usable_size_r>:
 800c9d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9d4:	1f18      	subs	r0, r3, #4
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	bfbc      	itt	lt
 800c9da:	580b      	ldrlt	r3, [r1, r0]
 800c9dc:	18c0      	addlt	r0, r0, r3
 800c9de:	4770      	bx	lr

0800c9e0 <floor>:
 800c9e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9e4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800c9e8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800c9ec:	2e13      	cmp	r6, #19
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	4607      	mov	r7, r0
 800c9f4:	460c      	mov	r4, r1
 800c9f6:	4605      	mov	r5, r0
 800c9f8:	dc34      	bgt.n	800ca64 <floor+0x84>
 800c9fa:	2e00      	cmp	r6, #0
 800c9fc:	da15      	bge.n	800ca2a <floor+0x4a>
 800c9fe:	a334      	add	r3, pc, #208	; (adr r3, 800cad0 <floor+0xf0>)
 800ca00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca04:	f7f3 fbb2 	bl	800016c <__adddf3>
 800ca08:	2200      	movs	r2, #0
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	f7f3 fde2 	bl	80005d4 <__aeabi_dcmpgt>
 800ca10:	b140      	cbz	r0, 800ca24 <floor+0x44>
 800ca12:	2c00      	cmp	r4, #0
 800ca14:	da59      	bge.n	800caca <floor+0xea>
 800ca16:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ca1a:	ea57 0503 	orrs.w	r5, r7, r3
 800ca1e:	d001      	beq.n	800ca24 <floor+0x44>
 800ca20:	2500      	movs	r5, #0
 800ca22:	4c2d      	ldr	r4, [pc, #180]	; (800cad8 <floor+0xf8>)
 800ca24:	4623      	mov	r3, r4
 800ca26:	462f      	mov	r7, r5
 800ca28:	e025      	b.n	800ca76 <floor+0x96>
 800ca2a:	4a2c      	ldr	r2, [pc, #176]	; (800cadc <floor+0xfc>)
 800ca2c:	fa42 f806 	asr.w	r8, r2, r6
 800ca30:	ea01 0208 	and.w	r2, r1, r8
 800ca34:	4302      	orrs	r2, r0
 800ca36:	d01e      	beq.n	800ca76 <floor+0x96>
 800ca38:	a325      	add	r3, pc, #148	; (adr r3, 800cad0 <floor+0xf0>)
 800ca3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3e:	f7f3 fb95 	bl	800016c <__adddf3>
 800ca42:	2200      	movs	r2, #0
 800ca44:	2300      	movs	r3, #0
 800ca46:	f7f3 fdc5 	bl	80005d4 <__aeabi_dcmpgt>
 800ca4a:	2800      	cmp	r0, #0
 800ca4c:	d0ea      	beq.n	800ca24 <floor+0x44>
 800ca4e:	2c00      	cmp	r4, #0
 800ca50:	bfbe      	ittt	lt
 800ca52:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ca56:	fa43 f606 	asrlt.w	r6, r3, r6
 800ca5a:	19a4      	addlt	r4, r4, r6
 800ca5c:	2500      	movs	r5, #0
 800ca5e:	ea24 0408 	bic.w	r4, r4, r8
 800ca62:	e7df      	b.n	800ca24 <floor+0x44>
 800ca64:	2e33      	cmp	r6, #51	; 0x33
 800ca66:	dd0a      	ble.n	800ca7e <floor+0x9e>
 800ca68:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ca6c:	d103      	bne.n	800ca76 <floor+0x96>
 800ca6e:	f7f3 fb7d 	bl	800016c <__adddf3>
 800ca72:	4607      	mov	r7, r0
 800ca74:	460b      	mov	r3, r1
 800ca76:	4638      	mov	r0, r7
 800ca78:	4619      	mov	r1, r3
 800ca7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ca82:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800ca86:	fa22 f808 	lsr.w	r8, r2, r8
 800ca8a:	ea18 0f00 	tst.w	r8, r0
 800ca8e:	d0f2      	beq.n	800ca76 <floor+0x96>
 800ca90:	a30f      	add	r3, pc, #60	; (adr r3, 800cad0 <floor+0xf0>)
 800ca92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca96:	f7f3 fb69 	bl	800016c <__adddf3>
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	f7f3 fd99 	bl	80005d4 <__aeabi_dcmpgt>
 800caa2:	2800      	cmp	r0, #0
 800caa4:	d0be      	beq.n	800ca24 <floor+0x44>
 800caa6:	2c00      	cmp	r4, #0
 800caa8:	da02      	bge.n	800cab0 <floor+0xd0>
 800caaa:	2e14      	cmp	r6, #20
 800caac:	d103      	bne.n	800cab6 <floor+0xd6>
 800caae:	3401      	adds	r4, #1
 800cab0:	ea25 0508 	bic.w	r5, r5, r8
 800cab4:	e7b6      	b.n	800ca24 <floor+0x44>
 800cab6:	2301      	movs	r3, #1
 800cab8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cabc:	fa03 f606 	lsl.w	r6, r3, r6
 800cac0:	4435      	add	r5, r6
 800cac2:	42bd      	cmp	r5, r7
 800cac4:	bf38      	it	cc
 800cac6:	18e4      	addcc	r4, r4, r3
 800cac8:	e7f2      	b.n	800cab0 <floor+0xd0>
 800caca:	2500      	movs	r5, #0
 800cacc:	462c      	mov	r4, r5
 800cace:	e7a9      	b.n	800ca24 <floor+0x44>
 800cad0:	8800759c 	.word	0x8800759c
 800cad4:	7e37e43c 	.word	0x7e37e43c
 800cad8:	bff00000 	.word	0xbff00000
 800cadc:	000fffff 	.word	0x000fffff

0800cae0 <_init>:
 800cae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cae2:	bf00      	nop
 800cae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cae6:	bc08      	pop	{r3}
 800cae8:	469e      	mov	lr, r3
 800caea:	4770      	bx	lr

0800caec <_fini>:
 800caec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caee:	bf00      	nop
 800caf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caf2:	bc08      	pop	{r3}
 800caf4:	469e      	mov	lr, r3
 800caf6:	4770      	bx	lr
