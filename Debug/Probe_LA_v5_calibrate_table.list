
Probe_LA_v5_calibrate_table.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d828  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  0800d938  0800d938  0001d938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db44  0800db44  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800db44  0800db44  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800db44  0800db44  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db44  0800db44  0001db44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db48  0800db48  0001db48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800db4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c8  200001f8  0800dd40  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200015c0  0800dd40  000215c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fb57  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a8b  00000000  00000000  0003fd74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c8  00000000  00000000  00044800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c0  00000000  00000000  00045ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dd2a  00000000  00000000  00047388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001be00  00000000  00000000  000650b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097f01  00000000  00000000  00080eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00118db3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006934  00000000  00000000  00118e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d920 	.word	0x0800d920

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800d920 	.word	0x0800d920

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__gedf2>:
 80004d8:	f04f 3cff 	mov.w	ip, #4294967295
 80004dc:	e006      	b.n	80004ec <__cmpdf2+0x4>
 80004de:	bf00      	nop

080004e0 <__ledf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	e002      	b.n	80004ec <__cmpdf2+0x4>
 80004e6:	bf00      	nop

080004e8 <__cmpdf2>:
 80004e8:	f04f 0c01 	mov.w	ip, #1
 80004ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004fc:	bf18      	it	ne
 80004fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000502:	d01b      	beq.n	800053c <__cmpdf2+0x54>
 8000504:	b001      	add	sp, #4
 8000506:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800050a:	bf0c      	ite	eq
 800050c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000510:	ea91 0f03 	teqne	r1, r3
 8000514:	bf02      	ittt	eq
 8000516:	ea90 0f02 	teqeq	r0, r2
 800051a:	2000      	moveq	r0, #0
 800051c:	4770      	bxeq	lr
 800051e:	f110 0f00 	cmn.w	r0, #0
 8000522:	ea91 0f03 	teq	r1, r3
 8000526:	bf58      	it	pl
 8000528:	4299      	cmppl	r1, r3
 800052a:	bf08      	it	eq
 800052c:	4290      	cmpeq	r0, r2
 800052e:	bf2c      	ite	cs
 8000530:	17d8      	asrcs	r0, r3, #31
 8000532:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000536:	f040 0001 	orr.w	r0, r0, #1
 800053a:	4770      	bx	lr
 800053c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d102      	bne.n	800054c <__cmpdf2+0x64>
 8000546:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800054a:	d107      	bne.n	800055c <__cmpdf2+0x74>
 800054c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000550:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000554:	d1d6      	bne.n	8000504 <__cmpdf2+0x1c>
 8000556:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800055a:	d0d3      	beq.n	8000504 <__cmpdf2+0x1c>
 800055c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <__aeabi_cdrcmple>:
 8000564:	4684      	mov	ip, r0
 8000566:	4610      	mov	r0, r2
 8000568:	4662      	mov	r2, ip
 800056a:	468c      	mov	ip, r1
 800056c:	4619      	mov	r1, r3
 800056e:	4663      	mov	r3, ip
 8000570:	e000      	b.n	8000574 <__aeabi_cdcmpeq>
 8000572:	bf00      	nop

08000574 <__aeabi_cdcmpeq>:
 8000574:	b501      	push	{r0, lr}
 8000576:	f7ff ffb7 	bl	80004e8 <__cmpdf2>
 800057a:	2800      	cmp	r0, #0
 800057c:	bf48      	it	mi
 800057e:	f110 0f00 	cmnmi.w	r0, #0
 8000582:	bd01      	pop	{r0, pc}

08000584 <__aeabi_dcmpeq>:
 8000584:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000588:	f7ff fff4 	bl	8000574 <__aeabi_cdcmpeq>
 800058c:	bf0c      	ite	eq
 800058e:	2001      	moveq	r0, #1
 8000590:	2000      	movne	r0, #0
 8000592:	f85d fb08 	ldr.w	pc, [sp], #8
 8000596:	bf00      	nop

08000598 <__aeabi_dcmplt>:
 8000598:	f84d ed08 	str.w	lr, [sp, #-8]!
 800059c:	f7ff ffea 	bl	8000574 <__aeabi_cdcmpeq>
 80005a0:	bf34      	ite	cc
 80005a2:	2001      	movcc	r0, #1
 80005a4:	2000      	movcs	r0, #0
 80005a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005aa:	bf00      	nop

080005ac <__aeabi_dcmple>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff ffe0 	bl	8000574 <__aeabi_cdcmpeq>
 80005b4:	bf94      	ite	ls
 80005b6:	2001      	movls	r0, #1
 80005b8:	2000      	movhi	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmpge>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffce 	bl	8000564 <__aeabi_cdrcmple>
 80005c8:	bf94      	ite	ls
 80005ca:	2001      	movls	r0, #1
 80005cc:	2000      	movhi	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmpgt>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffc4 	bl	8000564 <__aeabi_cdrcmple>
 80005dc:	bf34      	ite	cc
 80005de:	2001      	movcc	r0, #1
 80005e0:	2000      	movcs	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2uiz>:
 80005e8:	004a      	lsls	r2, r1, #1
 80005ea:	d211      	bcs.n	8000610 <__aeabi_d2uiz+0x28>
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d211      	bcs.n	8000616 <__aeabi_d2uiz+0x2e>
 80005f2:	d50d      	bpl.n	8000610 <__aeabi_d2uiz+0x28>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d40e      	bmi.n	800061c <__aeabi_d2uiz+0x34>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	fa23 f002 	lsr.w	r0, r3, r2
 800060e:	4770      	bx	lr
 8000610:	f04f 0000 	mov.w	r0, #0
 8000614:	4770      	bx	lr
 8000616:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800061a:	d102      	bne.n	8000622 <__aeabi_d2uiz+0x3a>
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	4770      	bx	lr
 8000622:	f04f 0000 	mov.w	r0, #0
 8000626:	4770      	bx	lr

08000628 <__aeabi_frsub>:
 8000628:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800062c:	e002      	b.n	8000634 <__addsf3>
 800062e:	bf00      	nop

08000630 <__aeabi_fsub>:
 8000630:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000634 <__addsf3>:
 8000634:	0042      	lsls	r2, r0, #1
 8000636:	bf1f      	itttt	ne
 8000638:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800063c:	ea92 0f03 	teqne	r2, r3
 8000640:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000644:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000648:	d06a      	beq.n	8000720 <__addsf3+0xec>
 800064a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800064e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000652:	bfc1      	itttt	gt
 8000654:	18d2      	addgt	r2, r2, r3
 8000656:	4041      	eorgt	r1, r0
 8000658:	4048      	eorgt	r0, r1
 800065a:	4041      	eorgt	r1, r0
 800065c:	bfb8      	it	lt
 800065e:	425b      	neglt	r3, r3
 8000660:	2b19      	cmp	r3, #25
 8000662:	bf88      	it	hi
 8000664:	4770      	bxhi	lr
 8000666:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800066a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800066e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000672:	bf18      	it	ne
 8000674:	4240      	negne	r0, r0
 8000676:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800067a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800067e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000682:	bf18      	it	ne
 8000684:	4249      	negne	r1, r1
 8000686:	ea92 0f03 	teq	r2, r3
 800068a:	d03f      	beq.n	800070c <__addsf3+0xd8>
 800068c:	f1a2 0201 	sub.w	r2, r2, #1
 8000690:	fa41 fc03 	asr.w	ip, r1, r3
 8000694:	eb10 000c 	adds.w	r0, r0, ip
 8000698:	f1c3 0320 	rsb	r3, r3, #32
 800069c:	fa01 f103 	lsl.w	r1, r1, r3
 80006a0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006a4:	d502      	bpl.n	80006ac <__addsf3+0x78>
 80006a6:	4249      	negs	r1, r1
 80006a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006ac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006b0:	d313      	bcc.n	80006da <__addsf3+0xa6>
 80006b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006b6:	d306      	bcc.n	80006c6 <__addsf3+0x92>
 80006b8:	0840      	lsrs	r0, r0, #1
 80006ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80006be:	f102 0201 	add.w	r2, r2, #1
 80006c2:	2afe      	cmp	r2, #254	; 0xfe
 80006c4:	d251      	bcs.n	800076a <__addsf3+0x136>
 80006c6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80006ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006ce:	bf08      	it	eq
 80006d0:	f020 0001 	biceq.w	r0, r0, #1
 80006d4:	ea40 0003 	orr.w	r0, r0, r3
 80006d8:	4770      	bx	lr
 80006da:	0049      	lsls	r1, r1, #1
 80006dc:	eb40 0000 	adc.w	r0, r0, r0
 80006e0:	3a01      	subs	r2, #1
 80006e2:	bf28      	it	cs
 80006e4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80006e8:	d2ed      	bcs.n	80006c6 <__addsf3+0x92>
 80006ea:	fab0 fc80 	clz	ip, r0
 80006ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80006f2:	ebb2 020c 	subs.w	r2, r2, ip
 80006f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006fa:	bfaa      	itet	ge
 80006fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000700:	4252      	neglt	r2, r2
 8000702:	4318      	orrge	r0, r3
 8000704:	bfbc      	itt	lt
 8000706:	40d0      	lsrlt	r0, r2
 8000708:	4318      	orrlt	r0, r3
 800070a:	4770      	bx	lr
 800070c:	f092 0f00 	teq	r2, #0
 8000710:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000714:	bf06      	itte	eq
 8000716:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800071a:	3201      	addeq	r2, #1
 800071c:	3b01      	subne	r3, #1
 800071e:	e7b5      	b.n	800068c <__addsf3+0x58>
 8000720:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000724:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000728:	bf18      	it	ne
 800072a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800072e:	d021      	beq.n	8000774 <__addsf3+0x140>
 8000730:	ea92 0f03 	teq	r2, r3
 8000734:	d004      	beq.n	8000740 <__addsf3+0x10c>
 8000736:	f092 0f00 	teq	r2, #0
 800073a:	bf08      	it	eq
 800073c:	4608      	moveq	r0, r1
 800073e:	4770      	bx	lr
 8000740:	ea90 0f01 	teq	r0, r1
 8000744:	bf1c      	itt	ne
 8000746:	2000      	movne	r0, #0
 8000748:	4770      	bxne	lr
 800074a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800074e:	d104      	bne.n	800075a <__addsf3+0x126>
 8000750:	0040      	lsls	r0, r0, #1
 8000752:	bf28      	it	cs
 8000754:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000758:	4770      	bx	lr
 800075a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800075e:	bf3c      	itt	cc
 8000760:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000764:	4770      	bxcc	lr
 8000766:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800076a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800076e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000772:	4770      	bx	lr
 8000774:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000778:	bf16      	itet	ne
 800077a:	4608      	movne	r0, r1
 800077c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000780:	4601      	movne	r1, r0
 8000782:	0242      	lsls	r2, r0, #9
 8000784:	bf06      	itte	eq
 8000786:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800078a:	ea90 0f01 	teqeq	r0, r1
 800078e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000792:	4770      	bx	lr

08000794 <__aeabi_ui2f>:
 8000794:	f04f 0300 	mov.w	r3, #0
 8000798:	e004      	b.n	80007a4 <__aeabi_i2f+0x8>
 800079a:	bf00      	nop

0800079c <__aeabi_i2f>:
 800079c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	ea5f 0c00 	movs.w	ip, r0
 80007a8:	bf08      	it	eq
 80007aa:	4770      	bxeq	lr
 80007ac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007b0:	4601      	mov	r1, r0
 80007b2:	f04f 0000 	mov.w	r0, #0
 80007b6:	e01c      	b.n	80007f2 <__aeabi_l2f+0x2a>

080007b8 <__aeabi_ul2f>:
 80007b8:	ea50 0201 	orrs.w	r2, r0, r1
 80007bc:	bf08      	it	eq
 80007be:	4770      	bxeq	lr
 80007c0:	f04f 0300 	mov.w	r3, #0
 80007c4:	e00a      	b.n	80007dc <__aeabi_l2f+0x14>
 80007c6:	bf00      	nop

080007c8 <__aeabi_l2f>:
 80007c8:	ea50 0201 	orrs.w	r2, r0, r1
 80007cc:	bf08      	it	eq
 80007ce:	4770      	bxeq	lr
 80007d0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80007d4:	d502      	bpl.n	80007dc <__aeabi_l2f+0x14>
 80007d6:	4240      	negs	r0, r0
 80007d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007dc:	ea5f 0c01 	movs.w	ip, r1
 80007e0:	bf02      	ittt	eq
 80007e2:	4684      	moveq	ip, r0
 80007e4:	4601      	moveq	r1, r0
 80007e6:	2000      	moveq	r0, #0
 80007e8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80007ec:	bf08      	it	eq
 80007ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007f2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007f6:	fabc f28c 	clz	r2, ip
 80007fa:	3a08      	subs	r2, #8
 80007fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000800:	db10      	blt.n	8000824 <__aeabi_l2f+0x5c>
 8000802:	fa01 fc02 	lsl.w	ip, r1, r2
 8000806:	4463      	add	r3, ip
 8000808:	fa00 fc02 	lsl.w	ip, r0, r2
 800080c:	f1c2 0220 	rsb	r2, r2, #32
 8000810:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000814:	fa20 f202 	lsr.w	r2, r0, r2
 8000818:	eb43 0002 	adc.w	r0, r3, r2
 800081c:	bf08      	it	eq
 800081e:	f020 0001 	biceq.w	r0, r0, #1
 8000822:	4770      	bx	lr
 8000824:	f102 0220 	add.w	r2, r2, #32
 8000828:	fa01 fc02 	lsl.w	ip, r1, r2
 800082c:	f1c2 0220 	rsb	r2, r2, #32
 8000830:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000834:	fa21 f202 	lsr.w	r2, r1, r2
 8000838:	eb43 0002 	adc.w	r0, r3, r2
 800083c:	bf08      	it	eq
 800083e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000842:	4770      	bx	lr

08000844 <__aeabi_fmul>:
 8000844:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000848:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800084c:	bf1e      	ittt	ne
 800084e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000852:	ea92 0f0c 	teqne	r2, ip
 8000856:	ea93 0f0c 	teqne	r3, ip
 800085a:	d06f      	beq.n	800093c <__aeabi_fmul+0xf8>
 800085c:	441a      	add	r2, r3
 800085e:	ea80 0c01 	eor.w	ip, r0, r1
 8000862:	0240      	lsls	r0, r0, #9
 8000864:	bf18      	it	ne
 8000866:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800086a:	d01e      	beq.n	80008aa <__aeabi_fmul+0x66>
 800086c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000870:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000874:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000878:	fba0 3101 	umull	r3, r1, r0, r1
 800087c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000880:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000884:	bf3e      	ittt	cc
 8000886:	0049      	lslcc	r1, r1, #1
 8000888:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800088c:	005b      	lslcc	r3, r3, #1
 800088e:	ea40 0001 	orr.w	r0, r0, r1
 8000892:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000896:	2afd      	cmp	r2, #253	; 0xfd
 8000898:	d81d      	bhi.n	80008d6 <__aeabi_fmul+0x92>
 800089a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800089e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008a2:	bf08      	it	eq
 80008a4:	f020 0001 	biceq.w	r0, r0, #1
 80008a8:	4770      	bx	lr
 80008aa:	f090 0f00 	teq	r0, #0
 80008ae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008b2:	bf08      	it	eq
 80008b4:	0249      	lsleq	r1, r1, #9
 80008b6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008ba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008be:	3a7f      	subs	r2, #127	; 0x7f
 80008c0:	bfc2      	ittt	gt
 80008c2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008c6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008ca:	4770      	bxgt	lr
 80008cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008d0:	f04f 0300 	mov.w	r3, #0
 80008d4:	3a01      	subs	r2, #1
 80008d6:	dc5d      	bgt.n	8000994 <__aeabi_fmul+0x150>
 80008d8:	f112 0f19 	cmn.w	r2, #25
 80008dc:	bfdc      	itt	le
 80008de:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80008e2:	4770      	bxle	lr
 80008e4:	f1c2 0200 	rsb	r2, r2, #0
 80008e8:	0041      	lsls	r1, r0, #1
 80008ea:	fa21 f102 	lsr.w	r1, r1, r2
 80008ee:	f1c2 0220 	rsb	r2, r2, #32
 80008f2:	fa00 fc02 	lsl.w	ip, r0, r2
 80008f6:	ea5f 0031 	movs.w	r0, r1, rrx
 80008fa:	f140 0000 	adc.w	r0, r0, #0
 80008fe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000902:	bf08      	it	eq
 8000904:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000908:	4770      	bx	lr
 800090a:	f092 0f00 	teq	r2, #0
 800090e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000912:	bf02      	ittt	eq
 8000914:	0040      	lsleq	r0, r0, #1
 8000916:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800091a:	3a01      	subeq	r2, #1
 800091c:	d0f9      	beq.n	8000912 <__aeabi_fmul+0xce>
 800091e:	ea40 000c 	orr.w	r0, r0, ip
 8000922:	f093 0f00 	teq	r3, #0
 8000926:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800092a:	bf02      	ittt	eq
 800092c:	0049      	lsleq	r1, r1, #1
 800092e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000932:	3b01      	subeq	r3, #1
 8000934:	d0f9      	beq.n	800092a <__aeabi_fmul+0xe6>
 8000936:	ea41 010c 	orr.w	r1, r1, ip
 800093a:	e78f      	b.n	800085c <__aeabi_fmul+0x18>
 800093c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000940:	ea92 0f0c 	teq	r2, ip
 8000944:	bf18      	it	ne
 8000946:	ea93 0f0c 	teqne	r3, ip
 800094a:	d00a      	beq.n	8000962 <__aeabi_fmul+0x11e>
 800094c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000950:	bf18      	it	ne
 8000952:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000956:	d1d8      	bne.n	800090a <__aeabi_fmul+0xc6>
 8000958:	ea80 0001 	eor.w	r0, r0, r1
 800095c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000960:	4770      	bx	lr
 8000962:	f090 0f00 	teq	r0, #0
 8000966:	bf17      	itett	ne
 8000968:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800096c:	4608      	moveq	r0, r1
 800096e:	f091 0f00 	teqne	r1, #0
 8000972:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000976:	d014      	beq.n	80009a2 <__aeabi_fmul+0x15e>
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	d101      	bne.n	8000982 <__aeabi_fmul+0x13e>
 800097e:	0242      	lsls	r2, r0, #9
 8000980:	d10f      	bne.n	80009a2 <__aeabi_fmul+0x15e>
 8000982:	ea93 0f0c 	teq	r3, ip
 8000986:	d103      	bne.n	8000990 <__aeabi_fmul+0x14c>
 8000988:	024b      	lsls	r3, r1, #9
 800098a:	bf18      	it	ne
 800098c:	4608      	movne	r0, r1
 800098e:	d108      	bne.n	80009a2 <__aeabi_fmul+0x15e>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800099c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a0:	4770      	bx	lr
 80009a2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009aa:	4770      	bx	lr

080009ac <__aeabi_fdiv>:
 80009ac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009b0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009b4:	bf1e      	ittt	ne
 80009b6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009ba:	ea92 0f0c 	teqne	r2, ip
 80009be:	ea93 0f0c 	teqne	r3, ip
 80009c2:	d069      	beq.n	8000a98 <__aeabi_fdiv+0xec>
 80009c4:	eba2 0203 	sub.w	r2, r2, r3
 80009c8:	ea80 0c01 	eor.w	ip, r0, r1
 80009cc:	0249      	lsls	r1, r1, #9
 80009ce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80009d2:	d037      	beq.n	8000a44 <__aeabi_fdiv+0x98>
 80009d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009d8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80009dc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80009e0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009e4:	428b      	cmp	r3, r1
 80009e6:	bf38      	it	cc
 80009e8:	005b      	lslcc	r3, r3, #1
 80009ea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80009ee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80009f2:	428b      	cmp	r3, r1
 80009f4:	bf24      	itt	cs
 80009f6:	1a5b      	subcs	r3, r3, r1
 80009f8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009fc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a00:	bf24      	itt	cs
 8000a02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a0e:	bf24      	itt	cs
 8000a10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a1c:	bf24      	itt	cs
 8000a1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a26:	011b      	lsls	r3, r3, #4
 8000a28:	bf18      	it	ne
 8000a2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a2e:	d1e0      	bne.n	80009f2 <__aeabi_fdiv+0x46>
 8000a30:	2afd      	cmp	r2, #253	; 0xfd
 8000a32:	f63f af50 	bhi.w	80008d6 <__aeabi_fmul+0x92>
 8000a36:	428b      	cmp	r3, r1
 8000a38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a3c:	bf08      	it	eq
 8000a3e:	f020 0001 	biceq.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4c:	327f      	adds	r2, #127	; 0x7f
 8000a4e:	bfc2      	ittt	gt
 8000a50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a58:	4770      	bxgt	lr
 8000a5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5e:	f04f 0300 	mov.w	r3, #0
 8000a62:	3a01      	subs	r2, #1
 8000a64:	e737      	b.n	80008d6 <__aeabi_fmul+0x92>
 8000a66:	f092 0f00 	teq	r2, #0
 8000a6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a6e:	bf02      	ittt	eq
 8000a70:	0040      	lsleq	r0, r0, #1
 8000a72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a76:	3a01      	subeq	r2, #1
 8000a78:	d0f9      	beq.n	8000a6e <__aeabi_fdiv+0xc2>
 8000a7a:	ea40 000c 	orr.w	r0, r0, ip
 8000a7e:	f093 0f00 	teq	r3, #0
 8000a82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a86:	bf02      	ittt	eq
 8000a88:	0049      	lsleq	r1, r1, #1
 8000a8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a8e:	3b01      	subeq	r3, #1
 8000a90:	d0f9      	beq.n	8000a86 <__aeabi_fdiv+0xda>
 8000a92:	ea41 010c 	orr.w	r1, r1, ip
 8000a96:	e795      	b.n	80009c4 <__aeabi_fdiv+0x18>
 8000a98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a9c:	ea92 0f0c 	teq	r2, ip
 8000aa0:	d108      	bne.n	8000ab4 <__aeabi_fdiv+0x108>
 8000aa2:	0242      	lsls	r2, r0, #9
 8000aa4:	f47f af7d 	bne.w	80009a2 <__aeabi_fmul+0x15e>
 8000aa8:	ea93 0f0c 	teq	r3, ip
 8000aac:	f47f af70 	bne.w	8000990 <__aeabi_fmul+0x14c>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	e776      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ab4:	ea93 0f0c 	teq	r3, ip
 8000ab8:	d104      	bne.n	8000ac4 <__aeabi_fdiv+0x118>
 8000aba:	024b      	lsls	r3, r1, #9
 8000abc:	f43f af4c 	beq.w	8000958 <__aeabi_fmul+0x114>
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	e76e      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ac4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ac8:	bf18      	it	ne
 8000aca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ace:	d1ca      	bne.n	8000a66 <__aeabi_fdiv+0xba>
 8000ad0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ad4:	f47f af5c 	bne.w	8000990 <__aeabi_fmul+0x14c>
 8000ad8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000adc:	f47f af3c 	bne.w	8000958 <__aeabi_fmul+0x114>
 8000ae0:	e75f      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ae2:	bf00      	nop

08000ae4 <ToggleLDAC>:
// Подключение заголовочного файла
#include <DAC_AD5322.h>

//--------------------------------------------------------------------------
// Необходим для загрузки значений в ЦАП
void ToggleLDAC() {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2102      	movs	r1, #2
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <ToggleLDAC+0x1c>)
 8000aee:	f004 fb26 	bl	800513e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	2102      	movs	r1, #2
 8000af6:	4802      	ldr	r0, [pc, #8]	; (8000b00 <ToggleLDAC+0x1c>)
 8000af8:	f004 fb21 	bl	800513e <HAL_GPIO_WritePin>
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40010800 	.word	0x40010800

08000b04 <SendSPI>:
//--------------------------------------------------------------------------
void SendSPI(SPI_HandleTypeDef *pSPI,uint16_t out){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	807b      	strh	r3, [r7, #2]

  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2110      	movs	r1, #16
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <SendSPI+0x34>)
 8000b16:	f004 fb12 	bl	800513e <HAL_GPIO_WritePin>

  	// Передача значений в цап
  	//out	= 0b0100000111111111;
  	HAL_SPI_Transmit(pSPI, (uint8_t*)(&out), 1, 1);
 8000b1a:	1cb9      	adds	r1, r7, #2
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	2201      	movs	r2, #1
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f006 fcb9 	bl	8007498 <HAL_SPI_Transmit>

  	// запепрет передачи CS
  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2110      	movs	r1, #16
 8000b2a:	4803      	ldr	r0, [pc, #12]	; (8000b38 <SendSPI+0x34>)
 8000b2c:	f004 fb07 	bl	800513e <HAL_GPIO_WritePin>

}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40010800 	.word	0x40010800

08000b3c <DAC_AD5322_Ch1>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала А
void DAC_AD5322_Ch1(SPI_HandleTypeDef *pSPI, uint16_t data_ch1) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	807b      	strh	r3, [r7, #2]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000b48:	887b      	ldrh	r3, [r7, #2]
 8000b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b4e:	d302      	bcc.n	8000b56 <DAC_AD5322_Ch1+0x1a>
 8000b50:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000b54:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000b56:	2300      	movs	r3, #0
 8000b58:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000b5e:	2300      	movs	r3, #0
 8000b60:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000b62:	2300      	movs	r3, #0
 8000b64:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000b66:	8afb      	ldrh	r3, [r7, #22]
 8000b68:	03db      	lsls	r3, r3, #15
 8000b6a:	b21a      	sxth	r2, r3
 8000b6c:	8abb      	ldrh	r3, [r7, #20]
 8000b6e:	039b      	lsls	r3, r3, #14
 8000b70:	b21b      	sxth	r3, r3
 8000b72:	4313      	orrs	r3, r2
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	8a7b      	ldrh	r3, [r7, #18]
 8000b78:	035b      	lsls	r3, r3, #13
 8000b7a:	b21b      	sxth	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b21a      	sxth	r2, r3
 8000b80:	8a3b      	ldrh	r3, [r7, #16]
 8000b82:	031b      	lsls	r3, r3, #12
 8000b84:	b21b      	sxth	r3, r3
 8000b86:	4313      	orrs	r3, r2
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000b8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b90:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000b94:	f023 030f 	bic.w	r3, r3, #15
 8000b98:	b21a      	sxth	r2, r3
 8000b9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ba2:	b21b      	sxth	r3, r3
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	b21b      	sxth	r3, r3
 8000ba8:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000baa:	89bb      	ldrh	r3, [r7, #12]
 8000bac:	4619      	mov	r1, r3
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ffa8 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000bb4:	89bb      	ldrh	r3, [r7, #12]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ffa3 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000bbe:	f7ff ff91 	bl	8000ae4 <ToggleLDAC>
}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <DAC_AD5322_Ch2>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала В
void DAC_AD5322_Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch2) {
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	807b      	strh	r3, [r7, #2]

	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 8000bd6:	887b      	ldrh	r3, [r7, #2]
 8000bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bdc:	d302      	bcc.n	8000be4 <DAC_AD5322_Ch2+0x1a>
 8000bde:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000be2:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000be4:	2301      	movs	r3, #1
 8000be6:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000be8:	2301      	movs	r3, #1
 8000bea:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000bec:	2300      	movs	r3, #0
 8000bee:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000bf4:	8afb      	ldrh	r3, [r7, #22]
 8000bf6:	03db      	lsls	r3, r3, #15
 8000bf8:	b21a      	sxth	r2, r3
 8000bfa:	8abb      	ldrh	r3, [r7, #20]
 8000bfc:	039b      	lsls	r3, r3, #14
 8000bfe:	b21b      	sxth	r3, r3
 8000c00:	4313      	orrs	r3, r2
 8000c02:	b21a      	sxth	r2, r3
 8000c04:	8a7b      	ldrh	r3, [r7, #18]
 8000c06:	035b      	lsls	r3, r3, #13
 8000c08:	b21b      	sxth	r3, r3
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	b21a      	sxth	r2, r3
 8000c0e:	8a3b      	ldrh	r3, [r7, #16]
 8000c10:	031b      	lsls	r3, r3, #12
 8000c12:	b21b      	sxth	r3, r3
 8000c14:	4313      	orrs	r3, r2
 8000c16:	b21b      	sxth	r3, r3
 8000c18:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000c1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c1e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000c22:	f023 030f 	bic.w	r3, r3, #15
 8000c26:	b21a      	sxth	r2, r3
 8000c28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000c38:	89bb      	ldrh	r3, [r7, #12]
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ff61 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000c42:	89bb      	ldrh	r3, [r7, #12]
 8000c44:	4619      	mov	r1, r3
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ff5c 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000c4c:	f7ff ff4a 	bl	8000ae4 <ToggleLDAC>
}
 8000c50:	bf00      	nop
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <DAC_AD5322_Ch1Ch2>:
//--------------------------------------------------------------------------
void DAC_AD5322_Ch1Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch1, uint16_t data_ch2) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	807b      	strh	r3, [r7, #2]
 8000c64:	4613      	mov	r3, r2
 8000c66:	803b      	strh	r3, [r7, #0]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000c68:	887b      	ldrh	r3, [r7, #2]
 8000c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c6e:	d302      	bcc.n	8000c76 <DAC_AD5322_Ch1Ch2+0x1e>
 8000c70:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000c74:	807b      	strh	r3, [r7, #2]
	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 8000c76:	883b      	ldrh	r3, [r7, #0]
 8000c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c7c:	d302      	bcc.n	8000c84 <DAC_AD5322_Ch1Ch2+0x2c>
 8000c7e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000c82:	803b      	strh	r3, [r7, #0]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000c84:	2300      	movs	r3, #0
 8000c86:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000c88:	2301      	movs	r3, #1
 8000c8a:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000c90:	2300      	movs	r3, #0
 8000c92:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000c94:	8afb      	ldrh	r3, [r7, #22]
 8000c96:	03db      	lsls	r3, r3, #15
 8000c98:	b21a      	sxth	r2, r3
 8000c9a:	8abb      	ldrh	r3, [r7, #20]
 8000c9c:	039b      	lsls	r3, r3, #14
 8000c9e:	b21b      	sxth	r3, r3
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	b21a      	sxth	r2, r3
 8000ca4:	8a7b      	ldrh	r3, [r7, #18]
 8000ca6:	035b      	lsls	r3, r3, #13
 8000ca8:	b21b      	sxth	r3, r3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b21a      	sxth	r2, r3
 8000cae:	8a3b      	ldrh	r3, [r7, #16]
 8000cb0:	031b      	lsls	r3, r3, #12
 8000cb2:	b21b      	sxth	r3, r3
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	b21b      	sxth	r3, r3
 8000cb8:	81fb      	strh	r3, [r7, #14]
	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000cba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cbe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000cc2:	f023 030f 	bic.w	r3, r3, #15
 8000cc6:	b21a      	sxth	r2, r3
 8000cc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	81bb      	strh	r3, [r7, #12]

  	SendSPI(pSPI,out);
 8000cd8:	89bb      	ldrh	r3, [r7, #12]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ff11 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000ce2:	89bb      	ldrh	r3, [r7, #12]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff ff0c 	bl	8000b04 <SendSPI>
  	//--------------------------------------------------------------------------
  	chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000cec:	2301      	movs	r3, #1
 8000cee:	82fb      	strh	r3, [r7, #22]
  	bufferVref 	= 1;	// bit 14: усилитель VREF?
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	82bb      	strh	r3, [r7, #20]
  	PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	827b      	strh	r3, [r7, #18]
  	PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	823b      	strh	r3, [r7, #16]

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000cfc:	8afb      	ldrh	r3, [r7, #22]
 8000cfe:	03db      	lsls	r3, r3, #15
 8000d00:	b21a      	sxth	r2, r3
 8000d02:	8abb      	ldrh	r3, [r7, #20]
 8000d04:	039b      	lsls	r3, r3, #14
 8000d06:	b21b      	sxth	r3, r3
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	b21a      	sxth	r2, r3
 8000d0c:	8a7b      	ldrh	r3, [r7, #18]
 8000d0e:	035b      	lsls	r3, r3, #13
 8000d10:	b21b      	sxth	r3, r3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	b21a      	sxth	r2, r3
 8000d16:	8a3b      	ldrh	r3, [r7, #16]
 8000d18:	031b      	lsls	r3, r3, #12
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	b21b      	sxth	r3, r3
 8000d20:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000d22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d26:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000d2a:	f023 030f 	bic.w	r3, r3, #15
 8000d2e:	b21a      	sxth	r2, r3
 8000d30:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d38:	b21b      	sxth	r3, r3
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	b21b      	sxth	r3, r3
 8000d3e:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000d40:	89bb      	ldrh	r3, [r7, #12]
 8000d42:	4619      	mov	r1, r3
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff fedd 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000d4a:	89bb      	ldrh	r3, [r7, #12]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff fed8 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000d54:	f7ff fec6 	bl	8000ae4 <ToggleLDAC>
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <crete_calibration_table>:
 * @Purpose: Calibration table volt2dac
 *******************************************************************************/
#include <logic_calibration_table.h>
#include <math.h>

void crete_calibration_table(Table_t *calibTable){//de
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

     calibTable->dacValA_m12[0] = 0x0;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	819a      	strh	r2, [r3, #12]
     calibTable->dacValA_m12[1] = 0x189;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f240 1289 	movw	r2, #393	; 0x189
 8000d74:	81da      	strh	r2, [r3, #14]
     calibTable->dacValA_m12[2] = 0x31d;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f240 321d 	movw	r2, #797	; 0x31d
 8000d7c:	821a      	strh	r2, [r3, #16]
     calibTable->dacValA_m12[3] = 0x223;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f240 2223 	movw	r2, #547	; 0x223
 8000d84:	825a      	strh	r2, [r3, #18]
     calibTable->dacValA_m12[4] = 0x21f;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f240 221f 	movw	r2, #543	; 0x21f
 8000d8c:	829a      	strh	r2, [r3, #20]
     calibTable->dacValA_m12[5] = 0x19d;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f240 129d 	movw	r2, #413	; 0x19d
 8000d94:	82da      	strh	r2, [r3, #22]
     calibTable->dacValA_m12[6] = 0x27e;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f240 227e 	movw	r2, #638	; 0x27e
 8000d9c:	831a      	strh	r2, [r3, #24]
     calibTable->dacValA_m12[7] = 0x297;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f240 2297 	movw	r2, #663	; 0x297
 8000da4:	835a      	strh	r2, [r3, #26]
     calibTable->dacValA_m12[8] = 0x27e;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f240 227e 	movw	r2, #638	; 0x27e
 8000dac:	839a      	strh	r2, [r3, #28]
     calibTable->dacValA_m12[9] = 0x297;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f240 2297 	movw	r2, #663	; 0x297
 8000db4:	83da      	strh	r2, [r3, #30]
     calibTable->dacValA_m12[10] = 0x1a1;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f240 12a1 	movw	r2, #417	; 0x1a1
 8000dbc:	841a      	strh	r2, [r3, #32]
     calibTable->dacValA_m12[11] = 0x223;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f240 2223 	movw	r2, #547	; 0x223
 8000dc4:	845a      	strh	r2, [r3, #34]	; 0x22
     calibTable->dacValA_m12[12] = 0x21e;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f240 221e 	movw	r2, #542	; 0x21e
 8000dcc:	849a      	strh	r2, [r3, #36]	; 0x24
     calibTable->dacValA_m12[13] = 0x1b6;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8000dd4:	84da      	strh	r2, [r3, #38]	; 0x26
     calibTable->dacValA_m12[14] = 0x297;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f240 2297 	movw	r2, #663	; 0x297
 8000ddc:	851a      	strh	r2, [r3, #40]	; 0x28
     calibTable->dacValA_m12[15] = 0x188;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8000de4:	855a      	strh	r2, [r3, #42]	; 0x2a
     calibTable->dacValA_m12[16] = 0x223;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f240 2223 	movw	r2, #547	; 0x223
 8000dec:	859a      	strh	r2, [r3, #44]	; 0x2c
     calibTable->dacValA_m12[17] = 0x1a6;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 8000df4:	85da      	strh	r2, [r3, #46]	; 0x2e
     calibTable->dacValA_m12[18] = 0x233;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f240 2233 	movw	r2, #563	; 0x233
 8000dfc:	861a      	strh	r2, [r3, #48]	; 0x30
     calibTable->dacValA_m12[19] = 0x29b;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f240 229b 	movw	r2, #667	; 0x29b
 8000e04:	865a      	strh	r2, [r3, #50]	; 0x32
     calibTable->dacValA_m12[20] = 0x21e;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f240 221e 	movw	r2, #542	; 0x21e
 8000e0c:	869a      	strh	r2, [r3, #52]	; 0x34
     calibTable->dacValA_m12[21] = 0x1b6;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8000e14:	86da      	strh	r2, [r3, #54]	; 0x36
     calibTable->dacValA_m12[22] = 0x2e6;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f240 22e6 	movw	r2, #742	; 0x2e6
 8000e1c:	871a      	strh	r2, [r3, #56]	; 0x38
     calibTable->dacValA_m12[23] = 0x233;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f240 2233 	movw	r2, #563	; 0x233
 8000e24:	875a      	strh	r2, [r3, #58]	; 0x3a
     calibTable->dacValA_m12[24] = 0x184;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8000e2c:	879a      	strh	r2, [r3, #60]	; 0x3c
     calibTable->dacValA_m12[25] = 0x27e;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f240 227e 	movw	r2, #638	; 0x27e
 8000e34:	87da      	strh	r2, [r3, #62]	; 0x3e
     calibTable->dacValA_m12[26] = 0x855;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f640 0255 	movw	r2, #2133	; 0x855
 8000e3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
     calibTable->dacValA_m12[27] = 0x877;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f640 0277 	movw	r2, #2167	; 0x877
 8000e46:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
     calibTable->dacValA_m12[28] = 0x8b1;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f640 02b1 	movw	r2, #2225	; 0x8b1
 8000e50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
     calibTable->dacValA_m12[29] = 0x8cb;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f640 02cb 	movw	r2, #2251	; 0x8cb
 8000e5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
     calibTable->dacValA_m12[30] = 0x8fc;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8000e64:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
     calibTable->dacValA_m12[31] = 0x960;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8000e6e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
     calibTable->dacValA_m12[32] = 0x953;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f640 1253 	movw	r2, #2387	; 0x953
 8000e78:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
     calibTable->dacValA_m12[33] = 0x992;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f640 1292 	movw	r2, #2450	; 0x992
 8000e82:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
     calibTable->dacValA_m12[34] = 0x9c4;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000e8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
     calibTable->dacValA_m12[35] = 0x9d6;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f640 12d6 	movw	r2, #2518	; 0x9d6
 8000e96:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
     calibTable->dacValA_m12[36] = 0xa02;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f640 2202 	movw	r2, #2562	; 0xa02
 8000ea0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
     calibTable->dacValA_m12[37] = 0xa2f;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f640 222f 	movw	r2, #2607	; 0xa2f
 8000eaa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
     calibTable->dacValA_m12[38] = 0x9dd;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f640 12dd 	movw	r2, #2525	; 0x9dd
 8000eb4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
     calibTable->dacValA_m12[39] = 0xa89;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f640 2289 	movw	r2, #2697	; 0xa89
 8000ebe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
     calibTable->dacValA_m12[40] = 0xab4;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f640 22b4 	movw	r2, #2740	; 0xab4
 8000ec8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
     calibTable->dacValA_m12[41] = 0xae1;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f640 22e1 	movw	r2, #2785	; 0xae1
 8000ed2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
     calibTable->dacValA_m12[42] = 0xb0b;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f640 320b 	movw	r2, #2827	; 0xb0b
 8000edc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
     calibTable->dacValA_m12[43] = 0xb36;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f640 3236 	movw	r2, #2870	; 0xb36
 8000ee6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
     calibTable->dacValA_m12[44] = 0xb8b;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f640 328b 	movw	r2, #2955	; 0xb8b
 8000ef0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
     calibTable->dacValA_m12[45] = 0xb8f;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f640 328f 	movw	r2, #2959	; 0xb8f
 8000efa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
     calibTable->dacValA_m12[46] = 0xbd1;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f640 32d1 	movw	r2, #3025	; 0xbd1
 8000f04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
     calibTable->dacValA_m12[47] = 0xbe6;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f640 32e6 	movw	r2, #3046	; 0xbe6
 8000f0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
     calibTable->dacValA_m12[48] = 0xc12;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f640 4212 	movw	r2, #3090	; 0xc12
 8000f18:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
     calibTable->dacValA_m12[49] = 0xc4e;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f640 424e 	movw	r2, #3150	; 0xc4e
 8000f22:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
     calibTable->dacValA_m12[50] = 0xc69;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f640 4269 	movw	r2, #3177	; 0xc69
 8000f2c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
     calibTable->dacValA_m12[51] = 0xc96;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f640 4296 	movw	r2, #3222	; 0xc96
 8000f36:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
     calibTable->dacValA_m12[52] = 0xcd5;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f640 42d5 	movw	r2, #3285	; 0xcd5
 8000f40:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
     calibTable->dacValA_m12[53] = 0xcee;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f640 42ee 	movw	r2, #3310	; 0xcee
 8000f4a:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
     calibTable->dacValA_m12[54] = 0xd19;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f640 5219 	movw	r2, #3353	; 0xd19
 8000f54:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
     calibTable->dacValA_m12[55] = 0xc98;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f640 4298 	movw	r2, #3224	; 0xc98
 8000f5e:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
     calibTable->dacValA_m12[56] = 0xd70;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f44f 6257 	mov.w	r2, #3440	; 0xd70
 8000f68:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
     calibTable->dacValA_m12[57] = 0xd99;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f640 5299 	movw	r2, #3481	; 0xd99
 8000f72:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
     calibTable->dacValA_m12[58] = 0xdb7;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f640 52b7 	movw	r2, #3511	; 0xdb7
 8000f7c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
     calibTable->dacValA_m12[59] = 0xdca;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f640 52ca 	movw	r2, #3530	; 0xdca
 8000f86:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
     calibTable->dacValA_m12[60] = 0xdd8;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f640 52d8 	movw	r2, #3544	; 0xdd8
 8000f90:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
     calibTable->dacValA_m12[61] = 0xddc;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f640 52dc 	movw	r2, #3548	; 0xddc
 8000f9a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
     calibTable->dacValA_m12[62] = 0xde9;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f640 52e9 	movw	r2, #3561	; 0xde9
 8000fa4:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
     calibTable->dacValA_m12[63] = 0xded;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f640 52ed 	movw	r2, #3565	; 0xded
 8000fae:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
     calibTable->dacValA_m12[64] = 0xdf4;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f640 52f4 	movw	r2, #3572	; 0xdf4
 8000fb8:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
     calibTable->dacValA_m12[65] = 0xdf9;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f640 52f9 	movw	r2, #3577	; 0xdf9
 8000fc2:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
     calibTable->dacValA_m12[66] = 0xdfc;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f640 52fc 	movw	r2, #3580	; 0xdfc
 8000fcc:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
     calibTable->dacValA_m12[67] = 0xdf7;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f640 52f7 	movw	r2, #3575	; 0xdf7
 8000fd6:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
     calibTable->dacValA_m12[68] = 0xdf8;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f640 52f8 	movw	r2, #3576	; 0xdf8
 8000fe0:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
     calibTable->dacValA_m12[69] = 0xdfa;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f640 52fa 	movw	r2, #3578	; 0xdfa
 8000fea:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
     calibTable->dacValA_m12[70] = 0xdfc;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f640 52fc 	movw	r2, #3580	; 0xdfc
 8000ff4:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
     calibTable->dacValA_m12[71] = 0xdfe;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f640 52fe 	movw	r2, #3582	; 0xdfe
 8000ffe:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
     calibTable->dacValA_m12[72] = 0xe01;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f640 6201 	movw	r2, #3585	; 0xe01
 8001008:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
     calibTable->dacValA_m12[73] = 0xe01;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f640 6201 	movw	r2, #3585	; 0xe01
 8001012:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
     calibTable->dacValA_m12[74] = 0xe06;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f640 6206 	movw	r2, #3590	; 0xe06
 800101c:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
     calibTable->dacValA_m12[75] = 0xe06;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f640 6206 	movw	r2, #3590	; 0xe06
 8001026:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
     calibTable->dacValA_m12[76] = 0xe0a;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f640 620a 	movw	r2, #3594	; 0xe0a
 8001030:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
     calibTable->dacValA_m12[77] = 0xe0e;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f640 620e 	movw	r2, #3598	; 0xe0e
 800103a:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
     calibTable->dacValA_m12[78] = 0xe05;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f640 6205 	movw	r2, #3589	; 0xe05
 8001044:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
     calibTable->dacValA_m12[79] = 0xe01;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f640 6201 	movw	r2, #3585	; 0xe01
 800104e:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
     calibTable->dacValA_m12[80] = 0xe09;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f640 6209 	movw	r2, #3593	; 0xe09
 8001058:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
     calibTable->dacValA_m12[81] = 0x7d0;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001062:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
     calibTable->dacValA_m12[82] = 0xe06;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f640 6206 	movw	r2, #3590	; 0xe06
 800106c:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
     calibTable->dacValA_m12[83] = 0x7d0;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001076:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
     calibTable->dacValA_m12[84] = 0xe06;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f640 6206 	movw	r2, #3590	; 0xe06
 8001080:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
     calibTable->dacValA_m12[85] = 0xe00;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 800108a:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
     calibTable->dacValA_m12[86] = 0xdfe;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f640 52fe 	movw	r2, #3582	; 0xdfe
 8001094:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
     calibTable->dacValA_m12[87] = 0x1000;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800109e:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba

     calibTable->dacValB_m12[0] = 0x0;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
     calibTable->dacValB_m12[1] = 0x1bb;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f240 12bb 	movw	r2, #443	; 0x1bb
 80010b0:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
     calibTable->dacValB_m12[2] = 0x1ed;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f240 12ed 	movw	r2, #493	; 0x1ed
 80010ba:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
     calibTable->dacValB_m12[3] = 0x251;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f240 2251 	movw	r2, #593	; 0x251
 80010c4:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
     calibTable->dacValB_m12[4] = 0x1bb;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f240 12bb 	movw	r2, #443	; 0x1bb
 80010ce:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
     calibTable->dacValB_m12[5] = 0x1ed;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f240 12ed 	movw	r2, #493	; 0x1ed
 80010d8:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
     calibTable->dacValB_m12[6] = 0x2ce;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f240 22ce 	movw	r2, #718	; 0x2ce
 80010e2:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
     calibTable->dacValB_m12[7] = 0x1d4;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 80010ec:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
     calibTable->dacValB_m12[8] = 0x1f2;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 80010f6:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
     calibTable->dacValB_m12[9] = 0x1d9;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f240 12d9 	movw	r2, #473	; 0x1d9
 8001100:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
     calibTable->dacValB_m12[10] = 0x1bc;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 800110a:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
     calibTable->dacValB_m12[11] = 0x1bb;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001114:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
     calibTable->dacValB_m12[12] = 0x1f3;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800111e:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
     calibTable->dacValB_m12[13] = 0x1d9;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f240 12d9 	movw	r2, #473	; 0x1d9
 8001128:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
     calibTable->dacValB_m12[14] = 0x1ed;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f240 12ed 	movw	r2, #493	; 0x1ed
 8001132:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
     calibTable->dacValB_m12[15] = 0x1f3;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f240 12f3 	movw	r2, #499	; 0x1f3
 800113c:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
     calibTable->dacValB_m12[16] = 0x1c0;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8001146:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
     calibTable->dacValB_m12[17] = 0x1c1;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f240 12c1 	movw	r2, #449	; 0x1c1
 8001150:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
     calibTable->dacValB_m12[18] = 0x1c0;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800115a:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
     calibTable->dacValB_m12[19] = 0x2ec;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 8001164:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
     calibTable->dacValB_m12[20] = 0x1d4;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800116e:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
     calibTable->dacValB_m12[21] = 0x251;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f240 2251 	movw	r2, #593	; 0x251
 8001178:	f8a3 20e6 	strh.w	r2, [r3, #230]	; 0xe6
     calibTable->dacValB_m12[22] = 0x1d4;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8001182:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
     calibTable->dacValB_m12[23] = 0x1d4;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800118c:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
     calibTable->dacValB_m12[24] = 0x2ce;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f240 22ce 	movw	r2, #718	; 0x2ce
 8001196:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
     calibTable->dacValB_m12[25] = 0x1cb;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f240 12cb 	movw	r2, #459	; 0x1cb
 80011a0:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
     calibTable->dacValB_m12[26] = 0x857;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f640 0257 	movw	r2, #2135	; 0x857
 80011aa:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
     calibTable->dacValB_m12[27] = 0x877;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f640 0277 	movw	r2, #2167	; 0x877
 80011b4:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
     calibTable->dacValB_m12[28] = 0x8a4;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f640 02a4 	movw	r2, #2212	; 0x8a4
 80011be:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
     calibTable->dacValB_m12[29] = 0x8cf;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f640 02cf 	movw	r2, #2255	; 0x8cf
 80011c8:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
     calibTable->dacValB_m12[30] = 0x8fb;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f640 02fb 	movw	r2, #2299	; 0x8fb
 80011d2:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
     calibTable->dacValB_m12[31] = 0x926;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f640 1226 	movw	r2, #2342	; 0x926
 80011dc:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
     calibTable->dacValB_m12[32] = 0x954;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f640 1254 	movw	r2, #2388	; 0x954
 80011e6:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
     calibTable->dacValB_m12[33] = 0x980;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f44f 6218 	mov.w	r2, #2432	; 0x980
 80011f0:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
     calibTable->dacValB_m12[34] = 0x9ac;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f640 12ac 	movw	r2, #2476	; 0x9ac
 80011fa:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
     calibTable->dacValB_m12[35] = 0x9d8;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f640 12d8 	movw	r2, #2520	; 0x9d8
 8001204:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
     calibTable->dacValB_m12[36] = 0xa04;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f640 2204 	movw	r2, #2564	; 0xa04
 800120e:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
     calibTable->dacValB_m12[37] = 0xa30;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f44f 6223 	mov.w	r2, #2608	; 0xa30
 8001218:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
     calibTable->dacValB_m12[38] = 0xa5b;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f640 225b 	movw	r2, #2651	; 0xa5b
 8001222:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
     calibTable->dacValB_m12[39] = 0xa86;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f640 2286 	movw	r2, #2694	; 0xa86
 800122c:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
     calibTable->dacValB_m12[40] = 0xab2;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f640 22b2 	movw	r2, #2738	; 0xab2
 8001236:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
     calibTable->dacValB_m12[41] = 0xadf;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f640 22df 	movw	r2, #2783	; 0xadf
 8001240:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
     calibTable->dacValB_m12[42] = 0xb0b;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f640 320b 	movw	r2, #2827	; 0xb0b
 800124a:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
     calibTable->dacValB_m12[43] = 0xb36;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f640 3236 	movw	r2, #2870	; 0xb36
 8001254:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
     calibTable->dacValB_m12[44] = 0xb63;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f640 3263 	movw	r2, #2915	; 0xb63
 800125e:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
     calibTable->dacValB_m12[45] = 0xb8e;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f640 328e 	movw	r2, #2958	; 0xb8e
 8001268:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
     calibTable->dacValB_m12[46] = 0xbea;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f640 32ea 	movw	r2, #3050	; 0xbea
 8001272:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
     calibTable->dacValB_m12[47] = 0xafd;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f640 22fd 	movw	r2, #2813	; 0xafd
 800127c:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
     calibTable->dacValB_m12[48] = 0xb91;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f640 3291 	movw	r2, #2961	; 0xb91
 8001286:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
     calibTable->dacValB_m12[49] = 0xc3d;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f640 423d 	movw	r2, #3133	; 0xc3d
 8001290:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
     calibTable->dacValB_m12[50] = 0xc69;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f640 4269 	movw	r2, #3177	; 0xc69
 800129a:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
     calibTable->dacValB_m12[51] = 0xbbe;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f640 32be 	movw	r2, #3006	; 0xbbe
 80012a4:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
     calibTable->dacValB_m12[52] = 0xcc2;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f640 42c2 	movw	r2, #3266	; 0xcc2
 80012ae:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
     calibTable->dacValB_m12[53] = 0xd20;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 80012b8:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
     calibTable->dacValB_m12[54] = 0xd19;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f640 5219 	movw	r2, #3353	; 0xd19
 80012c2:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
     calibTable->dacValB_m12[55] = 0xd44;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f640 5244 	movw	r2, #3396	; 0xd44
 80012cc:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
     calibTable->dacValB_m12[56] = 0xd6e;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f640 526e 	movw	r2, #3438	; 0xd6e
 80012d6:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
     calibTable->dacValB_m12[57] = 0xd92;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f640 5292 	movw	r2, #3474	; 0xd92
 80012e0:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
     calibTable->dacValB_m12[58] = 0xd17;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f640 5217 	movw	r2, #3351	; 0xd17
 80012ea:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
     calibTable->dacValB_m12[59] = 0xdc5;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f640 52c5 	movw	r2, #3525	; 0xdc5
 80012f4:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
     calibTable->dacValB_m12[60] = 0xdc2;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f640 52c2 	movw	r2, #3522	; 0xdc2
 80012fe:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
     calibTable->dacValB_m12[61] = 0xdcb;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f640 52cb 	movw	r2, #3531	; 0xdcb
 8001308:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
     calibTable->dacValB_m12[62] = 0xdd4;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f640 52d4 	movw	r2, #3540	; 0xdd4
 8001312:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
     calibTable->dacValB_m12[63] = 0xdd9;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f640 52d9 	movw	r2, #3545	; 0xdd9
 800131c:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
     calibTable->dacValB_m12[64] = 0xe09;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f640 6209 	movw	r2, #3593	; 0xe09
 8001326:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
     calibTable->dacValB_m12[65] = 0xc6a;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f640 426a 	movw	r2, #3178	; 0xc6a
 8001330:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
     calibTable->dacValB_m12[66] = 0xbbc;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f640 32bc 	movw	r2, #3004	; 0xbbc
 800133a:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
     calibTable->dacValB_m12[67] = 0xc5d;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f640 425d 	movw	r2, #3165	; 0xc5d
 8001344:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
     calibTable->dacValB_m12[68] = 0xc4f;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f640 424f 	movw	r2, #3151	; 0xc4f
 800134e:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
     calibTable->dacValB_m12[69] = 0xcde;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f640 42de 	movw	r2, #3294	; 0xcde
 8001358:	f8a3 2146 	strh.w	r2, [r3, #326]	; 0x146
     calibTable->dacValB_m12[70] = 0xc52;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f640 4252 	movw	r2, #3154	; 0xc52
 8001362:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
     calibTable->dacValB_m12[71] = 0xdde;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f640 52de 	movw	r2, #3550	; 0xdde
 800136c:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
     calibTable->dacValB_m12[72] = 0xdff;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f640 52ff 	movw	r2, #3583	; 0xdff
 8001376:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
     calibTable->dacValB_m12[73] = 0xe05;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f640 6205 	movw	r2, #3589	; 0xe05
 8001380:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
     calibTable->dacValB_m12[74] = 0xe0b;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f640 620b 	movw	r2, #3595	; 0xe0b
 800138a:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
     calibTable->dacValB_m12[75] = 0xc80;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001394:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152
     calibTable->dacValB_m12[76] = 0xc1f;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f640 421f 	movw	r2, #3103	; 0xc1f
 800139e:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
     calibTable->dacValB_m12[77] = 0xe0d;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f640 620d 	movw	r2, #3597	; 0xe0d
 80013a8:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
     calibTable->dacValB_m12[78] = 0xc77;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f640 4277 	movw	r2, #3191	; 0xc77
 80013b2:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
     calibTable->dacValB_m12[79] = 0xd49;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f640 5249 	movw	r2, #3401	; 0xd49
 80013bc:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
     calibTable->dacValB_m12[80] = 0xd55;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f640 5255 	movw	r2, #3413	; 0xd55
 80013c6:	f8a3 215c 	strh.w	r2, [r3, #348]	; 0x15c
     calibTable->dacValB_m12[81] = 0xcf5;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f640 42f5 	movw	r2, #3317	; 0xcf5
 80013d0:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e
     calibTable->dacValB_m12[82] = 0xe14;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f640 6214 	movw	r2, #3604	; 0xe14
 80013da:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
     calibTable->dacValB_m12[83] = 0xd7f;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f640 527f 	movw	r2, #3455	; 0xd7f
 80013e4:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
     calibTable->dacValB_m12[84] = 0xd2a;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f640 522a 	movw	r2, #3370	; 0xd2a
 80013ee:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
     calibTable->dacValB_m12[85] = 0xd51;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f640 5251 	movw	r2, #3409	; 0xd51
 80013f8:	f8a3 2166 	strh.w	r2, [r3, #358]	; 0x166
     calibTable->dacValB_m12[86] = 0xde0;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f44f 625e 	mov.w	r2, #3552	; 0xde0
 8001402:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
     calibTable->dacValB_m12[87] = 0x1000;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800140c:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a

     calibTable->dacValA_m27[0] = 0x0;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
     calibTable->dacValA_m27[1] = 0x1f1;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f240 12f1 	movw	r2, #497	; 0x1f1
 800141e:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
     calibTable->dacValA_m27[2] = 0x1a6;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 8001428:	f8a3 2170 	strh.w	r2, [r3, #368]	; 0x170
     calibTable->dacValA_m27[3] = 0x21e;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f240 221e 	movw	r2, #542	; 0x21e
 8001432:	f8a3 2172 	strh.w	r2, [r3, #370]	; 0x172
     calibTable->dacValA_m27[4] = 0x233;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f240 2233 	movw	r2, #563	; 0x233
 800143c:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
     calibTable->dacValA_m27[5] = 0x27e;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f240 227e 	movw	r2, #638	; 0x27e
 8001446:	f8a3 2176 	strh.w	r2, [r3, #374]	; 0x176
     calibTable->dacValA_m27[6] = 0x27e;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f240 227e 	movw	r2, #638	; 0x27e
 8001450:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
     calibTable->dacValA_m27[7] = 0x1bb;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f240 12bb 	movw	r2, #443	; 0x1bb
 800145a:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
     calibTable->dacValA_m27[8] = 0x1bb;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001464:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
     calibTable->dacValA_m27[9] = 0x1bb;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f240 12bb 	movw	r2, #443	; 0x1bb
 800146e:	f8a3 217e 	strh.w	r2, [r3, #382]	; 0x17e
     calibTable->dacValA_m27[10] = 0x477;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f240 4277 	movw	r2, #1143	; 0x477
 8001478:	f8a3 2180 	strh.w	r2, [r3, #384]	; 0x180
     calibTable->dacValA_m27[11] = 0x5a3;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f240 52a3 	movw	r2, #1443	; 0x5a3
 8001482:	f8a3 2182 	strh.w	r2, [r3, #386]	; 0x182
     calibTable->dacValA_m27[12] = 0x1c4;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 800148c:	f8a3 2184 	strh.w	r2, [r3, #388]	; 0x184
     calibTable->dacValA_m27[13] = 0x1bb;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001496:	f8a3 2186 	strh.w	r2, [r3, #390]	; 0x186
     calibTable->dacValA_m27[14] = 0x1bb;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f240 12bb 	movw	r2, #443	; 0x1bb
 80014a0:	f8a3 2188 	strh.w	r2, [r3, #392]	; 0x188
     calibTable->dacValA_m27[15] = 0x29c;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f44f 7227 	mov.w	r2, #668	; 0x29c
 80014aa:	f8a3 218a 	strh.w	r2, [r3, #394]	; 0x18a
     calibTable->dacValA_m27[16] = 0x1bf;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f240 12bf 	movw	r2, #447	; 0x1bf
 80014b4:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
     calibTable->dacValA_m27[17] = 0x1bb;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f240 12bb 	movw	r2, #443	; 0x1bb
 80014be:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e
     calibTable->dacValA_m27[18] = 0x386;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f240 3286 	movw	r2, #902	; 0x386
 80014c8:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190
     calibTable->dacValA_m27[19] = 0x1bf;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f240 12bf 	movw	r2, #447	; 0x1bf
 80014d2:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192
     calibTable->dacValA_m27[20] = 0x1bb;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f240 12bb 	movw	r2, #443	; 0x1bb
 80014dc:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
     calibTable->dacValA_m27[21] = 0x283;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f240 2283 	movw	r2, #643	; 0x283
 80014e6:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
     calibTable->dacValA_m27[22] = 0x37d;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f240 327d 	movw	r2, #893	; 0x37d
 80014f0:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
     calibTable->dacValA_m27[23] = 0x283;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f240 2283 	movw	r2, #643	; 0x283
 80014fa:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
     calibTable->dacValA_m27[24] = 0x37d;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f240 327d 	movw	r2, #893	; 0x37d
 8001504:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
     calibTable->dacValA_m27[25] = 0x37d;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f240 327d 	movw	r2, #893	; 0x37d
 800150e:	f8a3 219e 	strh.w	r2, [r3, #414]	; 0x19e
     calibTable->dacValA_m27[26] = 0x843;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f640 0243 	movw	r2, #2115	; 0x843
 8001518:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0
     calibTable->dacValA_m27[27] = 0x843;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f640 0243 	movw	r2, #2115	; 0x843
 8001522:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2
     calibTable->dacValA_m27[28] = 0x83e;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f640 023e 	movw	r2, #2110	; 0x83e
 800152c:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4
     calibTable->dacValA_m27[29] = 0x869;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f640 0269 	movw	r2, #2153	; 0x869
 8001536:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
     calibTable->dacValA_m27[30] = 0x870;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f44f 6207 	mov.w	r2, #2160	; 0x870
 8001540:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
     calibTable->dacValA_m27[31] = 0x877;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f640 0277 	movw	r2, #2167	; 0x877
 800154a:	f8a3 21aa 	strh.w	r2, [r3, #426]	; 0x1aa
     calibTable->dacValA_m27[32] = 0x7d9;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f240 72d9 	movw	r2, #2009	; 0x7d9
 8001554:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
     calibTable->dacValA_m27[33] = 0x7e3;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f240 72e3 	movw	r2, #2019	; 0x7e3
 800155e:	f8a3 21ae 	strh.w	r2, [r3, #430]	; 0x1ae
     calibTable->dacValA_m27[34] = 0x864;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f640 0264 	movw	r2, #2148	; 0x864
 8001568:	f8a3 21b0 	strh.w	r2, [r3, #432]	; 0x1b0
     calibTable->dacValA_m27[35] = 0x800;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001572:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2
     calibTable->dacValA_m27[36] = 0x864;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f640 0264 	movw	r2, #2148	; 0x864
 800157c:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4
     calibTable->dacValA_m27[37] = 0x828;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f640 0228 	movw	r2, #2088	; 0x828
 8001586:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6
     calibTable->dacValA_m27[38] = 0x8cc;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f640 02cc 	movw	r2, #2252	; 0x8cc
 8001590:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
     calibTable->dacValA_m27[39] = 0x8d2;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f640 02d2 	movw	r2, #2258	; 0x8d2
 800159a:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba
     calibTable->dacValA_m27[40] = 0x7fc;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f240 72fc 	movw	r2, #2044	; 0x7fc
 80015a4:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
     calibTable->dacValA_m27[41] = 0x864;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f640 0264 	movw	r2, #2148	; 0x864
 80015ae:	f8a3 21be 	strh.w	r2, [r3, #446]	; 0x1be
     calibTable->dacValA_m27[42] = 0x7fc;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f240 72fc 	movw	r2, #2044	; 0x7fc
 80015b8:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0
     calibTable->dacValA_m27[43] = 0x8ff;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f640 02ff 	movw	r2, #2303	; 0x8ff
 80015c2:	f8a3 21c2 	strh.w	r2, [r3, #450]	; 0x1c2
     calibTable->dacValA_m27[44] = 0x87e;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f640 027e 	movw	r2, #2174	; 0x87e
 80015cc:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
     calibTable->dacValA_m27[45] = 0x834;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f640 0234 	movw	r2, #2100	; 0x834
 80015d6:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
     calibTable->dacValA_m27[46] = 0x828;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f640 0228 	movw	r2, #2088	; 0x828
 80015e0:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8
     calibTable->dacValA_m27[47] = 0x847;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f640 0247 	movw	r2, #2119	; 0x847
 80015ea:	f8a3 21ca 	strh.w	r2, [r3, #458]	; 0x1ca
     calibTable->dacValA_m27[48] = 0x800;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015f4:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
     calibTable->dacValA_m27[49] = 0x87d;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f640 027d 	movw	r2, #2173	; 0x87d
 80015fe:	f8a3 21ce 	strh.w	r2, [r3, #462]	; 0x1ce
     calibTable->dacValA_m27[50] = 0x94a;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f640 124a 	movw	r2, #2378	; 0x94a
 8001608:	f8a3 21d0 	strh.w	r2, [r3, #464]	; 0x1d0
     calibTable->dacValA_m27[51] = 0x977;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f640 1277 	movw	r2, #2423	; 0x977
 8001612:	f8a3 21d2 	strh.w	r2, [r3, #466]	; 0x1d2
     calibTable->dacValA_m27[52] = 0x7de;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f240 72de 	movw	r2, #2014	; 0x7de
 800161c:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
     calibTable->dacValA_m27[53] = 0x864;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f640 0264 	movw	r2, #2148	; 0x864
 8001626:	f8a3 21d6 	strh.w	r2, [r3, #470]	; 0x1d6
     calibTable->dacValA_m27[54] = 0x974;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f640 1274 	movw	r2, #2420	; 0x974
 8001630:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
     calibTable->dacValA_m27[55] = 0x90f;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f640 120f 	movw	r2, #2319	; 0x90f
 800163a:	f8a3 21da 	strh.w	r2, [r3, #474]	; 0x1da
     calibTable->dacValA_m27[56] = 0x8dd;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f640 02dd 	movw	r2, #2269	; 0x8dd
 8001644:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc
     calibTable->dacValA_m27[57] = 0x874;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f640 0274 	movw	r2, #2164	; 0x874
 800164e:	f8a3 21de 	strh.w	r2, [r3, #478]	; 0x1de
     calibTable->dacValA_m27[58] = 0x7d4;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f240 72d4 	movw	r2, #2004	; 0x7d4
 8001658:	f8a3 21e0 	strh.w	r2, [r3, #480]	; 0x1e0
     calibTable->dacValA_m27[59] = 0x7e3;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f240 72e3 	movw	r2, #2019	; 0x7e3
 8001662:	f8a3 21e2 	strh.w	r2, [r3, #482]	; 0x1e2
     calibTable->dacValA_m27[60] = 0x7e8;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f44f 62fd 	mov.w	r2, #2024	; 0x7e8
 800166c:	f8a3 21e4 	strh.w	r2, [r3, #484]	; 0x1e4
     calibTable->dacValA_m27[61] = 0x914;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f640 1214 	movw	r2, #2324	; 0x914
 8001676:	f8a3 21e6 	strh.w	r2, [r3, #486]	; 0x1e6
     calibTable->dacValA_m27[62] = 0x9d3;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f640 12d3 	movw	r2, #2515	; 0x9d3
 8001680:	f8a3 21e8 	strh.w	r2, [r3, #488]	; 0x1e8
     calibTable->dacValA_m27[63] = 0x919;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f640 1219 	movw	r2, #2329	; 0x919
 800168a:	f8a3 21ea 	strh.w	r2, [r3, #490]	; 0x1ea
     calibTable->dacValA_m27[64] = 0x8fb;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f640 02fb 	movw	r2, #2299	; 0x8fb
 8001694:	f8a3 21ec 	strh.w	r2, [r3, #492]	; 0x1ec
     calibTable->dacValA_m27[65] = 0x7e4;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f240 72e4 	movw	r2, #2020	; 0x7e4
 800169e:	f8a3 21ee 	strh.w	r2, [r3, #494]	; 0x1ee
     calibTable->dacValA_m27[66] = 0x86b;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f640 026b 	movw	r2, #2155	; 0x86b
 80016a8:	f8a3 21f0 	strh.w	r2, [r3, #496]	; 0x1f0
     calibTable->dacValA_m27[67] = 0x814;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f640 0214 	movw	r2, #2068	; 0x814
 80016b2:	f8a3 21f2 	strh.w	r2, [r3, #498]	; 0x1f2
     calibTable->dacValA_m27[68] = 0x823;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f640 0223 	movw	r2, #2083	; 0x823
 80016bc:	f8a3 21f4 	strh.w	r2, [r3, #500]	; 0x1f4
     calibTable->dacValA_m27[69] = 0x826;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f640 0226 	movw	r2, #2086	; 0x826
 80016c6:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6
     calibTable->dacValA_m27[70] = 0x8af;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f640 02af 	movw	r2, #2223	; 0x8af
 80016d0:	f8a3 21f8 	strh.w	r2, [r3, #504]	; 0x1f8
     calibTable->dacValA_m27[71] = 0x804;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f640 0204 	movw	r2, #2052	; 0x804
 80016da:	f8a3 21fa 	strh.w	r2, [r3, #506]	; 0x1fa
     calibTable->dacValA_m27[72] = 0xa44;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f640 2244 	movw	r2, #2628	; 0xa44
 80016e4:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
     calibTable->dacValA_m27[73] = 0x7ef;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f240 72ef 	movw	r2, #2031	; 0x7ef
 80016ee:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
     calibTable->dacValA_m27[74] = 0x8f0;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f44f 620f 	mov.w	r2, #2288	; 0x8f0
 80016f8:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
     calibTable->dacValA_m27[75] = 0x853;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f640 0253 	movw	r2, #2131	; 0x853
 8001702:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
     calibTable->dacValA_m27[76] = 0x7d4;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f240 72d4 	movw	r2, #2004	; 0x7d4
 800170c:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
     calibTable->dacValA_m27[77] = 0x900;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8001716:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
     calibTable->dacValA_m27[78] = 0x949;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f640 1249 	movw	r2, #2377	; 0x949
 8001720:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
     calibTable->dacValA_m27[79] = 0x951;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f640 1251 	movw	r2, #2385	; 0x951
 800172a:	f8a3 220a 	strh.w	r2, [r3, #522]	; 0x20a
     calibTable->dacValA_m27[80] = 0xa80;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f44f 6228 	mov.w	r2, #2688	; 0xa80
 8001734:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
     calibTable->dacValA_m27[81] = 0x832;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f640 0232 	movw	r2, #2098	; 0x832
 800173e:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
     calibTable->dacValA_m27[82] = 0x899;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f640 0299 	movw	r2, #2201	; 0x899
 8001748:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
     calibTable->dacValA_m27[83] = 0x879;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f640 0279 	movw	r2, #2169	; 0x879
 8001752:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
     calibTable->dacValA_m27[84] = 0xac1;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f640 22c1 	movw	r2, #2753	; 0xac1
 800175c:	f8a3 2214 	strh.w	r2, [r3, #532]	; 0x214
     calibTable->dacValA_m27[85] = 0x8b7;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f640 02b7 	movw	r2, #2231	; 0x8b7
 8001766:	f8a3 2216 	strh.w	r2, [r3, #534]	; 0x216
     calibTable->dacValA_m27[86] = 0x8dd;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f640 02dd 	movw	r2, #2269	; 0x8dd
 8001770:	f8a3 2218 	strh.w	r2, [r3, #536]	; 0x218
     calibTable->dacValA_m27[87] = 0x7d0;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800177a:	f8a3 221a 	strh.w	r2, [r3, #538]	; 0x21a
     calibTable->dacValA_m27[88] = 0x897;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f640 0297 	movw	r2, #2199	; 0x897
 8001784:	f8a3 221c 	strh.w	r2, [r3, #540]	; 0x21c
     calibTable->dacValA_m27[89] = 0x7d3;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f240 72d3 	movw	r2, #2003	; 0x7d3
 800178e:	f8a3 221e 	strh.w	r2, [r3, #542]	; 0x21e
     calibTable->dacValA_m27[90] = 0x94b;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f640 124b 	movw	r2, #2379	; 0x94b
 8001798:	f8a3 2220 	strh.w	r2, [r3, #544]	; 0x220
     calibTable->dacValA_m27[91] = 0x8e9;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f640 02e9 	movw	r2, #2281	; 0x8e9
 80017a2:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
     calibTable->dacValA_m27[92] = 0x8e9;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f640 02e9 	movw	r2, #2281	; 0x8e9
 80017ac:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
     calibTable->dacValA_m27[93] = 0x7da;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f240 72da 	movw	r2, #2010	; 0x7da
 80017b6:	f8a3 2226 	strh.w	r2, [r3, #550]	; 0x226
     calibTable->dacValA_m27[94] = 0x836;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f640 0236 	movw	r2, #2102	; 0x836
 80017c0:	f8a3 2228 	strh.w	r2, [r3, #552]	; 0x228
     calibTable->dacValA_m27[95] = 0x802;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f640 0202 	movw	r2, #2050	; 0x802
 80017ca:	f8a3 222a 	strh.w	r2, [r3, #554]	; 0x22a
     calibTable->dacValA_m27[96] = 0x836;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f640 0236 	movw	r2, #2102	; 0x836
 80017d4:	f8a3 222c 	strh.w	r2, [r3, #556]	; 0x22c
     calibTable->dacValA_m27[97] = 0x802;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f640 0202 	movw	r2, #2050	; 0x802
 80017de:	f8a3 222e 	strh.w	r2, [r3, #558]	; 0x22e
     calibTable->dacValA_m27[98] = 0x8cc;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f640 02cc 	movw	r2, #2252	; 0x8cc
 80017e8:	f8a3 2230 	strh.w	r2, [r3, #560]	; 0x230
     calibTable->dacValA_m27[99] = 0x8e3;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f640 02e3 	movw	r2, #2275	; 0x8e3
 80017f2:	f8a3 2232 	strh.w	r2, [r3, #562]	; 0x232
     calibTable->dacValA_m27[100] = 0x8cc;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f640 02cc 	movw	r2, #2252	; 0x8cc
 80017fc:	f8a3 2234 	strh.w	r2, [r3, #564]	; 0x234
     calibTable->dacValA_m27[101] = 0x917;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f640 1217 	movw	r2, #2327	; 0x917
 8001806:	f8a3 2236 	strh.w	r2, [r3, #566]	; 0x236
     calibTable->dacValA_m27[102] = 0x917;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f640 1217 	movw	r2, #2327	; 0x917
 8001810:	f8a3 2238 	strh.w	r2, [r3, #568]	; 0x238
     calibTable->dacValA_m27[103] = 0x931;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f640 1231 	movw	r2, #2353	; 0x931
 800181a:	f8a3 223a 	strh.w	r2, [r3, #570]	; 0x23a
     calibTable->dacValA_m27[104] = 0x930;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f44f 6213 	mov.w	r2, #2352	; 0x930
 8001824:	f8a3 223c 	strh.w	r2, [r3, #572]	; 0x23c
     calibTable->dacValA_m27[105] = 0xb95;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f640 3295 	movw	r2, #2965	; 0xb95
 800182e:	f8a3 223e 	strh.w	r2, [r3, #574]	; 0x23e
     calibTable->dacValA_m27[106] = 0xb90;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f44f 6239 	mov.w	r2, #2960	; 0xb90
 8001838:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
     calibTable->dacValA_m27[107] = 0xbc2;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f640 32c2 	movw	r2, #3010	; 0xbc2
 8001842:	f8a3 2242 	strh.w	r2, [r3, #578]	; 0x242
     calibTable->dacValA_m27[108] = 0x962;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f640 1262 	movw	r2, #2402	; 0x962
 800184c:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
     calibTable->dacValA_m27[109] = 0x992;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f640 1292 	movw	r2, #2450	; 0x992
 8001856:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246
     calibTable->dacValA_m27[110] = 0x992;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f640 1292 	movw	r2, #2450	; 0x992
 8001860:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248
     calibTable->dacValA_m27[111] = 0x9ab;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f640 12ab 	movw	r2, #2475	; 0x9ab
 800186a:	f8a3 224a 	strh.w	r2, [r3, #586]	; 0x24a
     calibTable->dacValA_m27[112] = 0x994;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f640 1294 	movw	r2, #2452	; 0x994
 8001874:	f8a3 224c 	strh.w	r2, [r3, #588]	; 0x24c
     calibTable->dacValA_m27[113] = 0xa9f;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f640 229f 	movw	r2, #2719	; 0xa9f
 800187e:	f8a3 224e 	strh.w	r2, [r3, #590]	; 0x24e
     calibTable->dacValA_m27[114] = 0xbd0;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f44f 623d 	mov.w	r2, #3024	; 0xbd0
 8001888:	f8a3 2250 	strh.w	r2, [r3, #592]	; 0x250
     calibTable->dacValA_m27[115] = 0xbea;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f640 32ea 	movw	r2, #3050	; 0xbea
 8001892:	f8a3 2252 	strh.w	r2, [r3, #594]	; 0x252
     calibTable->dacValA_m27[116] = 0x9c6;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f640 12c6 	movw	r2, #2502	; 0x9c6
 800189c:	f8a3 2254 	strh.w	r2, [r3, #596]	; 0x254
     calibTable->dacValA_m27[117] = 0xb31;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f640 3231 	movw	r2, #2865	; 0xb31
 80018a6:	f8a3 2256 	strh.w	r2, [r3, #598]	; 0x256
     calibTable->dacValA_m27[118] = 0xc1c;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f640 421c 	movw	r2, #3100	; 0xc1c
 80018b0:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
     calibTable->dacValA_m27[119] = 0x9ec;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f640 12ec 	movw	r2, #2540	; 0x9ec
 80018ba:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
     calibTable->dacValA_m27[120] = 0x9f8;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f640 12f8 	movw	r2, #2552	; 0x9f8
 80018c4:	f8a3 225c 	strh.w	r2, [r3, #604]	; 0x25c
     calibTable->dacValA_m27[121] = 0xa0f;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f640 220f 	movw	r2, #2575	; 0xa0f
 80018ce:	f8a3 225e 	strh.w	r2, [r3, #606]	; 0x25e
     calibTable->dacValA_m27[122] = 0x9fa;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f640 12fa 	movw	r2, #2554	; 0x9fa
 80018d8:	f8a3 2260 	strh.w	r2, [r3, #608]	; 0x260
     calibTable->dacValA_m27[123] = 0xc46;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f640 4246 	movw	r2, #3142	; 0xc46
 80018e2:	f8a3 2262 	strh.w	r2, [r3, #610]	; 0x262
     calibTable->dacValA_m27[124] = 0xc43;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f640 4243 	movw	r2, #3139	; 0xc43
 80018ec:	f8a3 2264 	strh.w	r2, [r3, #612]	; 0x264
     calibTable->dacValA_m27[125] = 0xa1e;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f640 221e 	movw	r2, #2590	; 0xa1e
 80018f6:	f8a3 2266 	strh.w	r2, [r3, #614]	; 0x266
     calibTable->dacValA_m27[126] = 0xa32;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f640 2232 	movw	r2, #2610	; 0xa32
 8001900:	f8a3 2268 	strh.w	r2, [r3, #616]	; 0x268
     calibTable->dacValA_m27[127] = 0xa32;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f640 2232 	movw	r2, #2610	; 0xa32
 800190a:	f8a3 226a 	strh.w	r2, [r3, #618]	; 0x26a
     calibTable->dacValA_m27[128] = 0xa39;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f640 2239 	movw	r2, #2617	; 0xa39
 8001914:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
     calibTable->dacValA_m27[129] = 0xa50;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f44f 6225 	mov.w	r2, #2640	; 0xa50
 800191e:	f8a3 226e 	strh.w	r2, [r3, #622]	; 0x26e
     calibTable->dacValA_m27[130] = 0xcb0;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f44f 624b 	mov.w	r2, #3248	; 0xcb0
 8001928:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
     calibTable->dacValA_m27[131] = 0xa5a;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f640 225a 	movw	r2, #2650	; 0xa5a
 8001932:	f8a3 2272 	strh.w	r2, [r3, #626]	; 0x272
     calibTable->dacValA_m27[132] = 0xa64;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f640 2264 	movw	r2, #2660	; 0xa64
 800193c:	f8a3 2274 	strh.w	r2, [r3, #628]	; 0x274
     calibTable->dacValA_m27[133] = 0xcb0;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f44f 624b 	mov.w	r2, #3248	; 0xcb0
 8001946:	f8a3 2276 	strh.w	r2, [r3, #630]	; 0x276
     calibTable->dacValA_m27[134] = 0xa76;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f640 2276 	movw	r2, #2678	; 0xa76
 8001950:	f8a3 2278 	strh.w	r2, [r3, #632]	; 0x278
     calibTable->dacValA_m27[135] = 0xcbf;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f640 42bf 	movw	r2, #3263	; 0xcbf
 800195a:	f8a3 227a 	strh.w	r2, [r3, #634]	; 0x27a
     calibTable->dacValA_m27[136] = 0xa8c;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f640 228c 	movw	r2, #2700	; 0xa8c
 8001964:	f8a3 227c 	strh.w	r2, [r3, #636]	; 0x27c
     calibTable->dacValA_m27[137] = 0xa95;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f640 2295 	movw	r2, #2709	; 0xa95
 800196e:	f8a3 227e 	strh.w	r2, [r3, #638]	; 0x27e
     calibTable->dacValA_m27[138] = 0xcd9;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f640 42d9 	movw	r2, #3289	; 0xcd9
 8001978:	f8a3 2280 	strh.w	r2, [r3, #640]	; 0x280
     calibTable->dacValA_m27[139] = 0xaaa;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f640 22aa 	movw	r2, #2730	; 0xaaa
 8001982:	f8a3 2282 	strh.w	r2, [r3, #642]	; 0x282
     calibTable->dacValA_m27[140] = 0xbcb;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f640 32cb 	movw	r2, #3019	; 0xbcb
 800198c:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
     calibTable->dacValA_m27[141] = 0xbcf;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f640 32cf 	movw	r2, #3023	; 0xbcf
 8001996:	f8a3 2286 	strh.w	r2, [r3, #646]	; 0x286
     calibTable->dacValA_m27[142] = 0xacb;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f640 22cb 	movw	r2, #2763	; 0xacb
 80019a0:	f8a3 2288 	strh.w	r2, [r3, #648]	; 0x288
     calibTable->dacValA_m27[143] = 0xae1;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f640 22e1 	movw	r2, #2785	; 0xae1
 80019aa:	f8a3 228a 	strh.w	r2, [r3, #650]	; 0x28a
     calibTable->dacValA_m27[144] = 0xaeb;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f640 22eb 	movw	r2, #2795	; 0xaeb
 80019b4:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
     calibTable->dacValA_m27[145] = 0xaeb;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f640 22eb 	movw	r2, #2795	; 0xaeb
 80019be:	f8a3 228e 	strh.w	r2, [r3, #654]	; 0x28e
     calibTable->dacValA_m27[146] = 0xaec;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f640 22ec 	movw	r2, #2796	; 0xaec
 80019c8:	f8a3 2290 	strh.w	r2, [r3, #656]	; 0x290
     calibTable->dacValA_m27[147] = 0xaf4;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f640 22f4 	movw	r2, #2804	; 0xaf4
 80019d2:	f8a3 2292 	strh.w	r2, [r3, #658]	; 0x292
     calibTable->dacValA_m27[148] = 0xafc;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f640 22fc 	movw	r2, #2812	; 0xafc
 80019dc:	f8a3 2294 	strh.w	r2, [r3, #660]	; 0x294
     calibTable->dacValA_m27[149] = 0xc38;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f640 4238 	movw	r2, #3128	; 0xc38
 80019e6:	f8a3 2296 	strh.w	r2, [r3, #662]	; 0x296
     calibTable->dacValA_m27[150] = 0xb18;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f640 3218 	movw	r2, #2840	; 0xb18
 80019f0:	f8a3 2298 	strh.w	r2, [r3, #664]	; 0x298
     calibTable->dacValA_m27[151] = 0xb11;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f640 3211 	movw	r2, #2833	; 0xb11
 80019fa:	f8a3 229a 	strh.w	r2, [r3, #666]	; 0x29a
     calibTable->dacValA_m27[152] = 0xb27;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f640 3227 	movw	r2, #2855	; 0xb27
 8001a04:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
     calibTable->dacValA_m27[153] = 0xb25;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f640 3225 	movw	r2, #2853	; 0xb25
 8001a0e:	f8a3 229e 	strh.w	r2, [r3, #670]	; 0x29e
     calibTable->dacValA_m27[154] = 0xb2c;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f640 322c 	movw	r2, #2860	; 0xb2c
 8001a18:	f8a3 22a0 	strh.w	r2, [r3, #672]	; 0x2a0
     calibTable->dacValA_m27[155] = 0xb31;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f640 3231 	movw	r2, #2865	; 0xb31
 8001a22:	f8a3 22a2 	strh.w	r2, [r3, #674]	; 0x2a2
     calibTable->dacValA_m27[156] = 0xb45;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f640 3245 	movw	r2, #2885	; 0xb45
 8001a2c:	f8a3 22a4 	strh.w	r2, [r3, #676]	; 0x2a4
     calibTable->dacValA_m27[157] = 0xb56;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f640 3256 	movw	r2, #2902	; 0xb56
 8001a36:	f8a3 22a6 	strh.w	r2, [r3, #678]	; 0x2a6
     calibTable->dacValA_m27[158] = 0xb54;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f640 3254 	movw	r2, #2900	; 0xb54
 8001a40:	f8a3 22a8 	strh.w	r2, [r3, #680]	; 0x2a8
     calibTable->dacValA_m27[159] = 0xb56;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f640 3256 	movw	r2, #2902	; 0xb56
 8001a4a:	f8a3 22aa 	strh.w	r2, [r3, #682]	; 0x2aa
     calibTable->dacValA_m27[160] = 0xb63;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f640 3263 	movw	r2, #2915	; 0xb63
 8001a54:	f8a3 22ac 	strh.w	r2, [r3, #684]	; 0x2ac
     calibTable->dacValA_m27[161] = 0xb62;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f640 3262 	movw	r2, #2914	; 0xb62
 8001a5e:	f8a3 22ae 	strh.w	r2, [r3, #686]	; 0x2ae
     calibTable->dacValA_m27[162] = 0x1000;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a68:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0

     calibTable->dacValB_m27[0] = 0x0;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f8a3 22b2 	strh.w	r2, [r3, #690]	; 0x2b2
     calibTable->dacValB_m27[1] = 0x1c1;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f240 12c1 	movw	r2, #449	; 0x1c1
 8001a7a:	f8a3 22b4 	strh.w	r2, [r3, #692]	; 0x2b4
     calibTable->dacValB_m27[2] = 0x1d5;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f240 12d5 	movw	r2, #469	; 0x1d5
 8001a84:	f8a3 22b6 	strh.w	r2, [r3, #694]	; 0x2b6
     calibTable->dacValB_m27[3] = 0x1d5;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f240 12d5 	movw	r2, #469	; 0x1d5
 8001a8e:	f8a3 22b8 	strh.w	r2, [r3, #696]	; 0x2b8
     calibTable->dacValB_m27[4] = 0x1d5;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f240 12d5 	movw	r2, #469	; 0x1d5
 8001a98:	f8a3 22ba 	strh.w	r2, [r3, #698]	; 0x2ba
     calibTable->dacValB_m27[5] = 0x1d5;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8001aa2:	f8a3 22bc 	strh.w	r2, [r3, #700]	; 0x2bc
     calibTable->dacValB_m27[6] = 0x1d5;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f240 12d5 	movw	r2, #469	; 0x1d5
 8001aac:	f8a3 22be 	strh.w	r2, [r3, #702]	; 0x2be
     calibTable->dacValB_m27[7] = 0x1d5;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f240 12d5 	movw	r2, #469	; 0x1d5
 8001ab6:	f8a3 22c0 	strh.w	r2, [r3, #704]	; 0x2c0
     calibTable->dacValB_m27[8] = 0x1d9;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f240 12d9 	movw	r2, #473	; 0x1d9
 8001ac0:	f8a3 22c2 	strh.w	r2, [r3, #706]	; 0x2c2
     calibTable->dacValB_m27[9] = 0x1f8;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8001aca:	f8a3 22c4 	strh.w	r2, [r3, #708]	; 0x2c4
     calibTable->dacValB_m27[10] = 0x1bb;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001ad4:	f8a3 22c6 	strh.w	r2, [r3, #710]	; 0x2c6
     calibTable->dacValB_m27[11] = 0x1bb;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001ade:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8
     calibTable->dacValB_m27[12] = 0x1bb;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001ae8:	f8a3 22ca 	strh.w	r2, [r3, #714]	; 0x2ca
     calibTable->dacValB_m27[13] = 0x571;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f240 5271 	movw	r2, #1393	; 0x571
 8001af2:	f8a3 22cc 	strh.w	r2, [r3, #716]	; 0x2cc
     calibTable->dacValB_m27[14] = 0x1bb;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001afc:	f8a3 22ce 	strh.w	r2, [r3, #718]	; 0x2ce
     calibTable->dacValB_m27[15] = 0x283;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f240 2283 	movw	r2, #643	; 0x283
 8001b06:	f8a3 22d0 	strh.w	r2, [r3, #720]	; 0x2d0
     calibTable->dacValB_m27[16] = 0x1cf;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f240 12cf 	movw	r2, #463	; 0x1cf
 8001b10:	f8a3 22d2 	strh.w	r2, [r3, #722]	; 0x2d2
     calibTable->dacValB_m27[17] = 0x1c9;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f240 12c9 	movw	r2, #457	; 0x1c9
 8001b1a:	f8a3 22d4 	strh.w	r2, [r3, #724]	; 0x2d4
     calibTable->dacValB_m27[18] = 0x1bf;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f240 12bf 	movw	r2, #447	; 0x1bf
 8001b24:	f8a3 22d6 	strh.w	r2, [r3, #726]	; 0x2d6
     calibTable->dacValB_m27[19] = 0x1bb;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001b2e:	f8a3 22d8 	strh.w	r2, [r3, #728]	; 0x2d8
     calibTable->dacValB_m27[20] = 0x21f;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f240 221f 	movw	r2, #543	; 0x21f
 8001b38:	f8a3 22da 	strh.w	r2, [r3, #730]	; 0x2da
     calibTable->dacValB_m27[21] = 0x1cf;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f240 12cf 	movw	r2, #463	; 0x1cf
 8001b42:	f8a3 22dc 	strh.w	r2, [r3, #732]	; 0x2dc
     calibTable->dacValB_m27[22] = 0x1e8;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8001b4c:	f8a3 22de 	strh.w	r2, [r3, #734]	; 0x2de
     calibTable->dacValB_m27[23] = 0x1e8;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8001b56:	f8a3 22e0 	strh.w	r2, [r3, #736]	; 0x2e0
     calibTable->dacValB_m27[24] = 0x1cf;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f240 12cf 	movw	r2, #463	; 0x1cf
 8001b60:	f8a3 22e2 	strh.w	r2, [r3, #738]	; 0x2e2
     calibTable->dacValB_m27[25] = 0x1e8;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8001b6a:	f8a3 22e4 	strh.w	r2, [r3, #740]	; 0x2e4
     calibTable->dacValB_m27[26] = 0x7d3;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f240 72d3 	movw	r2, #2003	; 0x7d3
 8001b74:	f8a3 22e6 	strh.w	r2, [r3, #742]	; 0x2e6
     calibTable->dacValB_m27[27] = 0x80b;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f640 020b 	movw	r2, #2059	; 0x80b
 8001b7e:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8
     calibTable->dacValB_m27[28] = 0x857;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f640 0257 	movw	r2, #2135	; 0x857
 8001b88:	f8a3 22ea 	strh.w	r2, [r3, #746]	; 0x2ea
     calibTable->dacValB_m27[29] = 0x875;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f640 0275 	movw	r2, #2165	; 0x875
 8001b92:	f8a3 22ec 	strh.w	r2, [r3, #748]	; 0x2ec
     calibTable->dacValB_m27[30] = 0x866;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f640 0266 	movw	r2, #2150	; 0x866
 8001b9c:	f8a3 22ee 	strh.w	r2, [r3, #750]	; 0x2ee
     calibTable->dacValB_m27[31] = 0x7d0;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ba6:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
     calibTable->dacValB_m27[32] = 0x877;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f640 0277 	movw	r2, #2167	; 0x877
 8001bb0:	f8a3 22f2 	strh.w	r2, [r3, #754]	; 0x2f2
     calibTable->dacValB_m27[33] = 0x8a7;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f640 02a7 	movw	r2, #2215	; 0x8a7
 8001bba:	f8a3 22f4 	strh.w	r2, [r3, #756]	; 0x2f4
     calibTable->dacValB_m27[34] = 0x8a2;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f640 02a2 	movw	r2, #2210	; 0x8a2
 8001bc4:	f8a3 22f6 	strh.w	r2, [r3, #758]	; 0x2f6
     calibTable->dacValB_m27[35] = 0x7f7;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f240 72f7 	movw	r2, #2039	; 0x7f7
 8001bce:	f8a3 22f8 	strh.w	r2, [r3, #760]	; 0x2f8
     calibTable->dacValB_m27[36] = 0x857;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f640 0257 	movw	r2, #2135	; 0x857
 8001bd8:	f8a3 22fa 	strh.w	r2, [r3, #762]	; 0x2fa
     calibTable->dacValB_m27[37] = 0x829;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f640 0229 	movw	r2, #2089	; 0x829
 8001be2:	f8a3 22fc 	strh.w	r2, [r3, #764]	; 0x2fc
     calibTable->dacValB_m27[38] = 0x8f2;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f640 02f2 	movw	r2, #2290	; 0x8f2
 8001bec:	f8a3 22fe 	strh.w	r2, [r3, #766]	; 0x2fe
     calibTable->dacValB_m27[39] = 0x897;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f640 0297 	movw	r2, #2199	; 0x897
 8001bf6:	f8a3 2300 	strh.w	r2, [r3, #768]	; 0x300
     calibTable->dacValB_m27[40] = 0x8cc;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f640 02cc 	movw	r2, #2252	; 0x8cc
 8001c00:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
     calibTable->dacValB_m27[41] = 0x8ca;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001c0a:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
     calibTable->dacValB_m27[42] = 0x81f;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f640 021f 	movw	r2, #2079	; 0x81f
 8001c14:	f8a3 2306 	strh.w	r2, [r3, #774]	; 0x306
     calibTable->dacValB_m27[43] = 0x7de;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f240 72de 	movw	r2, #2014	; 0x7de
 8001c1e:	f8a3 2308 	strh.w	r2, [r3, #776]	; 0x308
     calibTable->dacValB_m27[44] = 0x864;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f640 0264 	movw	r2, #2148	; 0x864
 8001c28:	f8a3 230a 	strh.w	r2, [r3, #778]	; 0x30a
     calibTable->dacValB_m27[45] = 0x8ce;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f640 02ce 	movw	r2, #2254	; 0x8ce
 8001c32:	f8a3 230c 	strh.w	r2, [r3, #780]	; 0x30c
     calibTable->dacValB_m27[46] = 0x8d9;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f640 02d9 	movw	r2, #2265	; 0x8d9
 8001c3c:	f8a3 230e 	strh.w	r2, [r3, #782]	; 0x30e
     calibTable->dacValB_m27[47] = 0x870;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f44f 6207 	mov.w	r2, #2160	; 0x870
 8001c46:	f8a3 2310 	strh.w	r2, [r3, #784]	; 0x310
     calibTable->dacValB_m27[48] = 0x7de;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f240 72de 	movw	r2, #2014	; 0x7de
 8001c50:	f8a3 2312 	strh.w	r2, [r3, #786]	; 0x312
     calibTable->dacValB_m27[49] = 0x80b;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f640 020b 	movw	r2, #2059	; 0x80b
 8001c5a:	f8a3 2314 	strh.w	r2, [r3, #788]	; 0x314
     calibTable->dacValB_m27[50] = 0x95b;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f640 125b 	movw	r2, #2395	; 0x95b
 8001c64:	f8a3 2316 	strh.w	r2, [r3, #790]	; 0x316
     calibTable->dacValB_m27[51] = 0x89c;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f640 029c 	movw	r2, #2204	; 0x89c
 8001c6e:	f8a3 2318 	strh.w	r2, [r3, #792]	; 0x318
     calibTable->dacValB_m27[52] = 0x95b;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f640 125b 	movw	r2, #2395	; 0x95b
 8001c78:	f8a3 231a 	strh.w	r2, [r3, #794]	; 0x31a
     calibTable->dacValB_m27[53] = 0x7e2;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f240 72e2 	movw	r2, #2018	; 0x7e2
 8001c82:	f8a3 231c 	strh.w	r2, [r3, #796]	; 0x31c
     calibTable->dacValB_m27[54] = 0x8ce;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f640 02ce 	movw	r2, #2254	; 0x8ce
 8001c8c:	f8a3 231e 	strh.w	r2, [r3, #798]	; 0x31e
     calibTable->dacValB_m27[55] = 0x974;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f640 1274 	movw	r2, #2420	; 0x974
 8001c96:	f8a3 2320 	strh.w	r2, [r3, #800]	; 0x320
     calibTable->dacValB_m27[56] = 0x7e7;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f240 72e7 	movw	r2, #2023	; 0x7e7
 8001ca0:	f8a3 2322 	strh.w	r2, [r3, #802]	; 0x322
     calibTable->dacValB_m27[57] = 0x801;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f640 0201 	movw	r2, #2049	; 0x801
 8001caa:	f8a3 2324 	strh.w	r2, [r3, #804]	; 0x324
     calibTable->dacValB_m27[58] = 0x864;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f640 0264 	movw	r2, #2148	; 0x864
 8001cb4:	f8a3 2326 	strh.w	r2, [r3, #806]	; 0x326
     calibTable->dacValB_m27[59] = 0x8a1;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f640 02a1 	movw	r2, #2209	; 0x8a1
 8001cbe:	f8a3 2328 	strh.w	r2, [r3, #808]	; 0x328
     calibTable->dacValB_m27[60] = 0x988;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f640 1288 	movw	r2, #2440	; 0x988
 8001cc8:	f8a3 232a 	strh.w	r2, [r3, #810]	; 0x32a
     calibTable->dacValB_m27[61] = 0x7e3;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f240 72e3 	movw	r2, #2019	; 0x7e3
 8001cd2:	f8a3 232c 	strh.w	r2, [r3, #812]	; 0x32c
     calibTable->dacValB_m27[62] = 0x864;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f640 0264 	movw	r2, #2148	; 0x864
 8001cdc:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
     calibTable->dacValB_m27[63] = 0x92a;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f640 122a 	movw	r2, #2346	; 0x92a
 8001ce6:	f8a3 2330 	strh.w	r2, [r3, #816]	; 0x330
     calibTable->dacValB_m27[64] = 0x7fc;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8001cf0:	f8a3 2332 	strh.w	r2, [r3, #818]	; 0x332
     calibTable->dacValB_m27[65] = 0x897;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f640 0297 	movw	r2, #2199	; 0x897
 8001cfa:	f8a3 2334 	strh.w	r2, [r3, #820]	; 0x334
     calibTable->dacValB_m27[66] = 0x892;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f640 0292 	movw	r2, #2194	; 0x892
 8001d04:	f8a3 2336 	strh.w	r2, [r3, #822]	; 0x336
     calibTable->dacValB_m27[67] = 0x8af;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f640 02af 	movw	r2, #2223	; 0x8af
 8001d0e:	f8a3 2338 	strh.w	r2, [r3, #824]	; 0x338
     calibTable->dacValB_m27[68] = 0x83a;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f640 023a 	movw	r2, #2106	; 0x83a
 8001d18:	f8a3 233a 	strh.w	r2, [r3, #826]	; 0x33a
     calibTable->dacValB_m27[69] = 0x810;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f44f 6201 	mov.w	r2, #2064	; 0x810
 8001d22:	f8a3 233c 	strh.w	r2, [r3, #828]	; 0x33c
     calibTable->dacValB_m27[70] = 0x83a;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f640 023a 	movw	r2, #2106	; 0x83a
 8001d2c:	f8a3 233e 	strh.w	r2, [r3, #830]	; 0x33e
     calibTable->dacValB_m27[71] = 0x7d4;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f240 72d4 	movw	r2, #2004	; 0x7d4
 8001d36:	f8a3 2340 	strh.w	r2, [r3, #832]	; 0x340
     calibTable->dacValB_m27[72] = 0x914;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f640 1214 	movw	r2, #2324	; 0x914
 8001d40:	f8a3 2342 	strh.w	r2, [r3, #834]	; 0x342
     calibTable->dacValB_m27[73] = 0x7d6;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f240 72d6 	movw	r2, #2006	; 0x7d6
 8001d4a:	f8a3 2344 	strh.w	r2, [r3, #836]	; 0x344
     calibTable->dacValB_m27[74] = 0x8e8;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f640 02e8 	movw	r2, #2280	; 0x8e8
 8001d54:	f8a3 2346 	strh.w	r2, [r3, #838]	; 0x346
     calibTable->dacValB_m27[75] = 0x7e8;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f44f 62fd 	mov.w	r2, #2024	; 0x7e8
 8001d5e:	f8a3 2348 	strh.w	r2, [r3, #840]	; 0x348
     calibTable->dacValB_m27[76] = 0x8e7;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f640 02e7 	movw	r2, #2279	; 0x8e7
 8001d68:	f8a3 234a 	strh.w	r2, [r3, #842]	; 0x34a
     calibTable->dacValB_m27[77] = 0x8fa;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f640 02fa 	movw	r2, #2298	; 0x8fa
 8001d72:	f8a3 234c 	strh.w	r2, [r3, #844]	; 0x34c
     calibTable->dacValB_m27[78] = 0xa82;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f640 2282 	movw	r2, #2690	; 0xa82
 8001d7c:	f8a3 234e 	strh.w	r2, [r3, #846]	; 0x34e
     calibTable->dacValB_m27[79] = 0x86c;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f640 026c 	movw	r2, #2156	; 0x86c
 8001d86:	f8a3 2350 	strh.w	r2, [r3, #848]	; 0x350
     calibTable->dacValB_m27[80] = 0x906;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f640 1206 	movw	r2, #2310	; 0x906
 8001d90:	f8a3 2352 	strh.w	r2, [r3, #850]	; 0x352
     calibTable->dacValB_m27[81] = 0x8f8;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f640 02f8 	movw	r2, #2296	; 0x8f8
 8001d9a:	f8a3 2354 	strh.w	r2, [r3, #852]	; 0x354
     calibTable->dacValB_m27[82] = 0x885;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f640 0285 	movw	r2, #2181	; 0x885
 8001da4:	f8a3 2356 	strh.w	r2, [r3, #854]	; 0x356
     calibTable->dacValB_m27[83] = 0x884;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f640 0284 	movw	r2, #2180	; 0x884
 8001dae:	f8a3 2358 	strh.w	r2, [r3, #856]	; 0x358
     calibTable->dacValB_m27[84] = 0x930;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f44f 6213 	mov.w	r2, #2352	; 0x930
 8001db8:	f8a3 235a 	strh.w	r2, [r3, #858]	; 0x35a
     calibTable->dacValB_m27[85] = 0x865;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f640 0265 	movw	r2, #2149	; 0x865
 8001dc2:	f8a3 235c 	strh.w	r2, [r3, #860]	; 0x35c
     calibTable->dacValB_m27[86] = 0x8d0;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f44f 620d 	mov.w	r2, #2256	; 0x8d0
 8001dcc:	f8a3 235e 	strh.w	r2, [r3, #862]	; 0x35e
     calibTable->dacValB_m27[87] = 0x7e7;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f240 72e7 	movw	r2, #2023	; 0x7e7
 8001dd6:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
     calibTable->dacValB_m27[88] = 0x8b9;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f640 02b9 	movw	r2, #2233	; 0x8b9
 8001de0:	f8a3 2362 	strh.w	r2, [r3, #866]	; 0x362
     calibTable->dacValB_m27[89] = 0xab4;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f640 22b4 	movw	r2, #2740	; 0xab4
 8001dea:	f8a3 2364 	strh.w	r2, [r3, #868]	; 0x364
     calibTable->dacValB_m27[90] = 0x8c8;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f640 02c8 	movw	r2, #2248	; 0x8c8
 8001df4:	f8a3 2366 	strh.w	r2, [r3, #870]	; 0x366
     calibTable->dacValB_m27[91] = 0x8e9;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f640 02e9 	movw	r2, #2281	; 0x8e9
 8001dfe:	f8a3 2368 	strh.w	r2, [r3, #872]	; 0x368
     calibTable->dacValB_m27[92] = 0xaff;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f640 22ff 	movw	r2, #2815	; 0xaff
 8001e08:	f8a3 236a 	strh.w	r2, [r3, #874]	; 0x36a
     calibTable->dacValB_m27[93] = 0x7da;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f240 72da 	movw	r2, #2010	; 0x7da
 8001e12:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
     calibTable->dacValB_m27[94] = 0x804;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f640 0204 	movw	r2, #2052	; 0x804
 8001e1c:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
     calibTable->dacValB_m27[95] = 0x7da;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f240 72da 	movw	r2, #2010	; 0x7da
 8001e26:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
     calibTable->dacValB_m27[96] = 0x804;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f640 0204 	movw	r2, #2052	; 0x804
 8001e30:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
     calibTable->dacValB_m27[97] = 0x7da;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f240 72da 	movw	r2, #2010	; 0x7da
 8001e3a:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
     calibTable->dacValB_m27[98] = 0x8ca;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001e44:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
     calibTable->dacValB_m27[99] = 0x947;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f640 1247 	movw	r2, #2375	; 0x947
 8001e4e:	f8a3 2378 	strh.w	r2, [r3, #888]	; 0x378
     calibTable->dacValB_m27[100] = 0x8fe;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f640 02fe 	movw	r2, #2302	; 0x8fe
 8001e58:	f8a3 237a 	strh.w	r2, [r3, #890]	; 0x37a
     calibTable->dacValB_m27[101] = 0x8fc;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8001e62:	f8a3 237c 	strh.w	r2, [r3, #892]	; 0x37c
     calibTable->dacValB_m27[102] = 0x8ed;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f640 02ed 	movw	r2, #2285	; 0x8ed
 8001e6c:	f8a3 237e 	strh.w	r2, [r3, #894]	; 0x37e
     calibTable->dacValB_m27[103] = 0x989;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f640 1289 	movw	r2, #2441	; 0x989
 8001e76:	f8a3 2380 	strh.w	r2, [r3, #896]	; 0x380
     calibTable->dacValB_m27[104] = 0x92e;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f640 122e 	movw	r2, #2350	; 0x92e
 8001e80:	f8a3 2382 	strh.w	r2, [r3, #898]	; 0x382
     calibTable->dacValB_m27[105] = 0x930;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f44f 6213 	mov.w	r2, #2352	; 0x930
 8001e8a:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
     calibTable->dacValB_m27[106] = 0x9cf;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f640 12cf 	movw	r2, #2511	; 0x9cf
 8001e94:	f8a3 2386 	strh.w	r2, [r3, #902]	; 0x386
     calibTable->dacValB_m27[107] = 0x979;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f640 1279 	movw	r2, #2425	; 0x979
 8001e9e:	f8a3 2388 	strh.w	r2, [r3, #904]	; 0x388
     calibTable->dacValB_m27[108] = 0x9cf;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f640 12cf 	movw	r2, #2511	; 0x9cf
 8001ea8:	f8a3 238a 	strh.w	r2, [r3, #906]	; 0x38a
     calibTable->dacValB_m27[109] = 0x979;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f640 1279 	movw	r2, #2425	; 0x979
 8001eb2:	f8a3 238c 	strh.w	r2, [r3, #908]	; 0x38c
     calibTable->dacValB_m27[110] = 0x9e6;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f640 12e6 	movw	r2, #2534	; 0x9e6
 8001ebc:	f8a3 238e 	strh.w	r2, [r3, #910]	; 0x38e
     calibTable->dacValB_m27[111] = 0x9fc;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f640 12fc 	movw	r2, #2556	; 0x9fc
 8001ec6:	f8a3 2390 	strh.w	r2, [r3, #912]	; 0x390
     calibTable->dacValB_m27[112] = 0x992;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f640 1292 	movw	r2, #2450	; 0x992
 8001ed0:	f8a3 2392 	strh.w	r2, [r3, #914]	; 0x392
     calibTable->dacValB_m27[113] = 0xaa9;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f640 22a9 	movw	r2, #2729	; 0xaa9
 8001eda:	f8a3 2394 	strh.w	r2, [r3, #916]	; 0x394
     calibTable->dacValB_m27[114] = 0xbd0;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f44f 623d 	mov.w	r2, #3024	; 0xbd0
 8001ee4:	f8a3 2396 	strh.w	r2, [r3, #918]	; 0x396
     calibTable->dacValB_m27[115] = 0xc1c;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f640 421c 	movw	r2, #3100	; 0xc1c
 8001eee:	f8a3 2398 	strh.w	r2, [r3, #920]	; 0x398
     calibTable->dacValB_m27[116] = 0x9c6;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f640 12c6 	movw	r2, #2502	; 0x9c6
 8001ef8:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a
     calibTable->dacValB_m27[117] = 0xb2b;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f640 322b 	movw	r2, #2859	; 0xb2b
 8001f02:	f8a3 239c 	strh.w	r2, [r3, #924]	; 0x39c
     calibTable->dacValB_m27[118] = 0x9d8;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f640 12d8 	movw	r2, #2520	; 0x9d8
 8001f0c:	f8a3 239e 	strh.w	r2, [r3, #926]	; 0x39e
     calibTable->dacValB_m27[119] = 0xc1f;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f640 421f 	movw	r2, #3103	; 0xc1f
 8001f16:	f8a3 23a0 	strh.w	r2, [r3, #928]	; 0x3a0
     calibTable->dacValB_m27[120] = 0xb5d;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f640 325d 	movw	r2, #2909	; 0xb5d
 8001f20:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
     calibTable->dacValB_m27[121] = 0xc50;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f44f 6245 	mov.w	r2, #3152	; 0xc50
 8001f2a:	f8a3 23a4 	strh.w	r2, [r3, #932]	; 0x3a4
     calibTable->dacValB_m27[122] = 0xc4e;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f640 424e 	movw	r2, #3150	; 0xc4e
 8001f34:	f8a3 23a6 	strh.w	r2, [r3, #934]	; 0x3a6
     calibTable->dacValB_m27[123] = 0xc4c;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f640 424c 	movw	r2, #3148	; 0xc4c
 8001f3e:	f8a3 23a8 	strh.w	r2, [r3, #936]	; 0x3a8
     calibTable->dacValB_m27[124] = 0xa0e;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f640 220e 	movw	r2, #2574	; 0xa0e
 8001f48:	f8a3 23aa 	strh.w	r2, [r3, #938]	; 0x3aa
     calibTable->dacValB_m27[125] = 0xc76;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f640 4276 	movw	r2, #3190	; 0xc76
 8001f52:	f8a3 23ac 	strh.w	r2, [r3, #940]	; 0x3ac
     calibTable->dacValB_m27[126] = 0xbed;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f640 32ed 	movw	r2, #3053	; 0xbed
 8001f5c:	f8a3 23ae 	strh.w	r2, [r3, #942]	; 0x3ae
     calibTable->dacValB_m27[127] = 0xa2f;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f640 222f 	movw	r2, #2607	; 0xa2f
 8001f66:	f8a3 23b0 	strh.w	r2, [r3, #944]	; 0x3b0
     calibTable->dacValB_m27[128] = 0xa36;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f640 2236 	movw	r2, #2614	; 0xa36
 8001f70:	f8a3 23b2 	strh.w	r2, [r3, #946]	; 0x3b2
     calibTable->dacValB_m27[129] = 0xc80;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001f7a:	f8a3 23b4 	strh.w	r2, [r3, #948]	; 0x3b4
     calibTable->dacValB_m27[130] = 0xc71;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f640 4271 	movw	r2, #3185	; 0xc71
 8001f84:	f8a3 23b6 	strh.w	r2, [r3, #950]	; 0x3b6
     calibTable->dacValB_m27[131] = 0xa55;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f640 2255 	movw	r2, #2645	; 0xa55
 8001f8e:	f8a3 23b8 	strh.w	r2, [r3, #952]	; 0x3b8
     calibTable->dacValB_m27[132] = 0xcac;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f640 42ac 	movw	r2, #3244	; 0xcac
 8001f98:	f8a3 23ba 	strh.w	r2, [r3, #954]	; 0x3ba
     calibTable->dacValB_m27[133] = 0xa6b;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f640 226b 	movw	r2, #2667	; 0xa6b
 8001fa2:	f8a3 23bc 	strh.w	r2, [r3, #956]	; 0x3bc
     calibTable->dacValB_m27[134] = 0xcbb;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f640 42bb 	movw	r2, #3259	; 0xcbb
 8001fac:	f8a3 23be 	strh.w	r2, [r3, #958]	; 0x3be
     calibTable->dacValB_m27[135] = 0xa7d;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f640 227d 	movw	r2, #2685	; 0xa7d
 8001fb6:	f8a3 23c0 	strh.w	r2, [r3, #960]	; 0x3c0
     calibTable->dacValB_m27[136] = 0xb9a;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f640 329a 	movw	r2, #2970	; 0xb9a
 8001fc0:	f8a3 23c2 	strh.w	r2, [r3, #962]	; 0x3c2
     calibTable->dacValB_m27[137] = 0xba7;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f640 32a7 	movw	r2, #2983	; 0xba7
 8001fca:	f8a3 23c4 	strh.w	r2, [r3, #964]	; 0x3c4
     calibTable->dacValB_m27[138] = 0xab4;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f640 22b4 	movw	r2, #2740	; 0xab4
 8001fd4:	f8a3 23c6 	strh.w	r2, [r3, #966]	; 0x3c6
     calibTable->dacValB_m27[139] = 0xbe4;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f640 32e4 	movw	r2, #3044	; 0xbe4
 8001fde:	f8a3 23c8 	strh.w	r2, [r3, #968]	; 0x3c8
     calibTable->dacValB_m27[140] = 0xab4;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f640 22b4 	movw	r2, #2740	; 0xab4
 8001fe8:	f8a3 23ca 	strh.w	r2, [r3, #970]	; 0x3ca
     calibTable->dacValB_m27[141] = 0xbbc;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f640 32bc 	movw	r2, #3004	; 0xbbc
 8001ff2:	f8a3 23cc 	strh.w	r2, [r3, #972]	; 0x3cc
     calibTable->dacValB_m27[142] = 0xbba;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f640 32ba 	movw	r2, #3002	; 0xbba
 8001ffc:	f8a3 23ce 	strh.w	r2, [r3, #974]	; 0x3ce
     calibTable->dacValB_m27[143] = 0xd02;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f640 5202 	movw	r2, #3330	; 0xd02
 8002006:	f8a3 23d0 	strh.w	r2, [r3, #976]	; 0x3d0
     calibTable->dacValB_m27[144] = 0xbf3;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f640 32f3 	movw	r2, #3059	; 0xbf3
 8002010:	f8a3 23d2 	strh.w	r2, [r3, #978]	; 0x3d2
     calibTable->dacValB_m27[145] = 0xaf0;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800201a:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4
     calibTable->dacValB_m27[146] = 0xaed;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f640 22ed 	movw	r2, #2797	; 0xaed
 8002024:	f8a3 23d6 	strh.w	r2, [r3, #982]	; 0x3d6
     calibTable->dacValB_m27[147] = 0xaf8;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f640 22f8 	movw	r2, #2808	; 0xaf8
 800202e:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8
     calibTable->dacValB_m27[148] = 0xcfc;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f640 42fc 	movw	r2, #3324	; 0xcfc
 8002038:	f8a3 23da 	strh.w	r2, [r3, #986]	; 0x3da
     calibTable->dacValB_m27[149] = 0xc18;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f640 4218 	movw	r2, #3096	; 0xc18
 8002042:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
     calibTable->dacValB_m27[150] = 0xb0b;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f640 320b 	movw	r2, #2827	; 0xb0b
 800204c:	f8a3 23de 	strh.w	r2, [r3, #990]	; 0x3de
     calibTable->dacValB_m27[151] = 0xb18;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f640 3218 	movw	r2, #2840	; 0xb18
 8002056:	f8a3 23e0 	strh.w	r2, [r3, #992]	; 0x3e0
     calibTable->dacValB_m27[152] = 0xb1b;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f640 321b 	movw	r2, #2843	; 0xb1b
 8002060:	f8a3 23e2 	strh.w	r2, [r3, #994]	; 0x3e2
     calibTable->dacValB_m27[153] = 0xc08;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f640 4208 	movw	r2, #3080	; 0xc08
 800206a:	f8a3 23e4 	strh.w	r2, [r3, #996]	; 0x3e4
     calibTable->dacValB_m27[154] = 0xb2a;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f640 322a 	movw	r2, #2858	; 0xb2a
 8002074:	f8a3 23e6 	strh.w	r2, [r3, #998]	; 0x3e6
     calibTable->dacValB_m27[155] = 0xb2f;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f640 322f 	movw	r2, #2863	; 0xb2f
 800207e:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
     calibTable->dacValB_m27[156] = 0xd09;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f640 5209 	movw	r2, #3337	; 0xd09
 8002088:	f8a3 23ea 	strh.w	r2, [r3, #1002]	; 0x3ea
     calibTable->dacValB_m27[157] = 0xc0a;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f640 420a 	movw	r2, #3082	; 0xc0a
 8002092:	f8a3 23ec 	strh.w	r2, [r3, #1004]	; 0x3ec
     calibTable->dacValB_m27[158] = 0xb4f;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f640 324f 	movw	r2, #2895	; 0xb4f
 800209c:	f8a3 23ee 	strh.w	r2, [r3, #1006]	; 0x3ee
     calibTable->dacValB_m27[159] = 0xb56;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f640 3256 	movw	r2, #2902	; 0xb56
 80020a6:	f8a3 23f0 	strh.w	r2, [r3, #1008]	; 0x3f0
     calibTable->dacValB_m27[160] = 0xb6d;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f640 326d 	movw	r2, #2925	; 0xb6d
 80020b0:	f8a3 23f2 	strh.w	r2, [r3, #1010]	; 0x3f2
     calibTable->dacValB_m27[161] = 0xb44;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f640 3244 	movw	r2, #2884	; 0xb44
 80020ba:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4
     calibTable->dacValB_m27[162] = 0x1000;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020c4:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

 }
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr
	...

080020d4 <volt2dgt>:
// floor()
// Пример: 
// Следующий фрагмент кода выводит на экран «10»:
// printf("%f", floor(10.9));

uint16_t volt2dgt(Table_t *calibTable, int16_t volt){
 80020d4:	b590      	push	{r4, r7, lr}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	807b      	strh	r3, [r7, #2]

// TODO: Нужно ли учитывать Ктр? volt = volt*Ktr 
float count = (abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/STEP_CALIBRATE;
 80020e0:	4b3f      	ldr	r3, [pc, #252]	; (80021e0 <volt2dgt+0x10c>)
 80020e2:	60fb      	str	r3, [r7, #12]
uint16_t y = (floor((count*abs(MIN_VOLT_MODE_12))/(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/abs(MIN_VOLT_MODE_12)*volt+(count*abs(MIN_VOLT_MODE_12))/(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12)))); // искомый индекс в массиве!!! найти минимальное значение от него 26.5-->26 через floor
 80020e4:	493f      	ldr	r1, [pc, #252]	; (80021e4 <volt2dgt+0x110>)
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f7fe fbac 	bl	8000844 <__aeabi_fmul>
 80020ec:	4603      	mov	r3, r0
 80020ee:	493e      	ldr	r1, [pc, #248]	; (80021e8 <volt2dgt+0x114>)
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe fc5b 	bl	80009ac <__aeabi_fdiv>
 80020f6:	4603      	mov	r3, r0
 80020f8:	493a      	ldr	r1, [pc, #232]	; (80021e4 <volt2dgt+0x110>)
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fc56 	bl	80009ac <__aeabi_fdiv>
 8002100:	4603      	mov	r3, r0
 8002102:	461c      	mov	r4, r3
 8002104:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe fb47 	bl	800079c <__aeabi_i2f>
 800210e:	4603      	mov	r3, r0
 8002110:	4619      	mov	r1, r3
 8002112:	4620      	mov	r0, r4
 8002114:	f7fe fb96 	bl	8000844 <__aeabi_fmul>
 8002118:	4603      	mov	r3, r0
 800211a:	461c      	mov	r4, r3
 800211c:	4931      	ldr	r1, [pc, #196]	; (80021e4 <volt2dgt+0x110>)
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f7fe fb90 	bl	8000844 <__aeabi_fmul>
 8002124:	4603      	mov	r3, r0
 8002126:	4930      	ldr	r1, [pc, #192]	; (80021e8 <volt2dgt+0x114>)
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fc3f 	bl	80009ac <__aeabi_fdiv>
 800212e:	4603      	mov	r3, r0
 8002130:	4619      	mov	r1, r3
 8002132:	4620      	mov	r0, r4
 8002134:	f7fe fa7e 	bl	8000634 <__addsf3>
 8002138:	4603      	mov	r3, r0
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe f974 	bl	8000428 <__aeabi_f2d>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4610      	mov	r0, r2
 8002146:	4619      	mov	r1, r3
 8002148:	f00b fb6a 	bl	800d820 <floor>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4610      	mov	r0, r2
 8002152:	4619      	mov	r1, r3
 8002154:	f7fe fa48 	bl	80005e8 <__aeabi_d2uiz>
 8002158:	4603      	mov	r3, r0
 800215a:	817b      	strh	r3, [r7, #10]
uint16_t CodeX = (((calibTable->dacValA_m12[y+1+1]-calibTable->dacValA_m12[y])/(((y+1+1) * STEP_CALIBRATE) -abs( MIN_VOLT_MODE_12)-((y+1) * STEP_CALIBRATE) - abs( MIN_VOLT_MODE_12))))*(volt-((y+1) * STEP_CALIBRATE) - abs( MIN_VOLT_MODE_12))+calibTable->dacValA_m12[y+1];
 800215c:	897b      	ldrh	r3, [r7, #10]
 800215e:	3302      	adds	r3, #2
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	3304      	adds	r3, #4
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	889b      	ldrh	r3, [r3, #4]
 800216a:	4619      	mov	r1, r3
 800216c:	897b      	ldrh	r3, [r7, #10]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	3304      	adds	r3, #4
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	4413      	add	r3, r2
 8002176:	889b      	ldrh	r3, [r3, #4]
 8002178:	1aca      	subs	r2, r1, r3
 800217a:	897b      	ldrh	r3, [r7, #10]
 800217c:	3302      	adds	r3, #2
 800217e:	21c8      	movs	r1, #200	; 0xc8
 8002180:	fb01 f303 	mul.w	r3, r1, r3
 8002184:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8002188:	3b08      	subs	r3, #8
 800218a:	8979      	ldrh	r1, [r7, #10]
 800218c:	3101      	adds	r1, #1
 800218e:	f06f 00c7 	mvn.w	r0, #199	; 0xc7
 8002192:	fb00 f101 	mul.w	r1, r0, r1
 8002196:	440b      	add	r3, r1
 8002198:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 800219c:	3b08      	subs	r3, #8
 800219e:	fb92 f3f3 	sdiv	r3, r2, r3
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80021a8:	897b      	ldrh	r3, [r7, #10]
 80021aa:	3301      	adds	r3, #1
 80021ac:	f06f 00c7 	mvn.w	r0, #199	; 0xc7
 80021b0:	fb00 f303 	mul.w	r3, r0, r3
 80021b4:	440b      	add	r3, r1
 80021b6:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 80021ba:	3b08      	subs	r3, #8
 80021bc:	b29b      	uxth	r3, r3
 80021be:	fb03 f302 	mul.w	r3, r3, r2
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	897b      	ldrh	r3, [r7, #10]
 80021c6:	3301      	adds	r3, #1
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	3304      	adds	r3, #4
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	440b      	add	r3, r1
 80021d0:	889b      	ldrh	r3, [r3, #4]
 80021d2:	4413      	add	r3, r2
 80021d4:	813b      	strh	r3, [r7, #8]
	return CodeX;
 80021d6:	893b      	ldrh	r3, [r7, #8]





}
 80021d8:	4618      	mov	r0, r3
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd90      	pop	{r4, r7, pc}
 80021e0:	42aa0000 	.word	0x42aa0000
 80021e4:	459c4000 	.word	0x459c4000
 80021e8:	4684d000 	.word	0x4684d000

080021ec <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80021f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80021f8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b00      	cmp	r3, #0
 8002202:	d013      	beq.n	800222c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002204:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002208:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800220c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00b      	beq.n	800222c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002214:	e000      	b.n	8002218 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002216:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002218:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f9      	beq.n	8002216 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002222:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800222c:	687b      	ldr	r3, [r7, #4]
}
 800222e:	4618      	mov	r0, r3
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <DWT_Init>:
#define SCB_DEMCR   *(volatile unsigned long *)0xE000EDFC

/******************************************************************************/
/* inline func */
__STATIC_INLINE void DWT_Init(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 800223c:	4b07      	ldr	r3, [pc, #28]	; (800225c <DWT_Init+0x24>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4a06      	ldr	r2, [pc, #24]	; (800225c <DWT_Init+0x24>)
 8002242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002246:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <DWT_Init+0x28>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a04      	ldr	r2, [pc, #16]	; (8002260 <DWT_Init+0x28>)
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	6013      	str	r3, [r2, #0]
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	e000edf0 	.word	0xe000edf0
 8002260:	e0001000 	.word	0xe0001000

08002264 <_write>:
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */
//**************************************************************************
#if DEBUG_SWO
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	e009      	b.n	800228a <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	60ba      	str	r2, [r7, #8]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff ffb4 	bl	80021ec <ITM_SendChar>
	for (int i = 0; i < len; i++)
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	3301      	adds	r3, #1
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	429a      	cmp	r2, r3
 8002290:	dbf1      	blt.n	8002276 <_write+0x12>
	}
	return len;
 8002292:	687b      	ldr	r3, [r7, #4]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <SetDacA>:
uint16_t VDAC_A = 0;
uint16_t VDAC_B = 0;
// Новая реализация. для приема значений в напряжениях, с поиском по структуре DevNVRAM выгруженной из памяти.
//TODO: Установка цап реализованно только для канала A и режима m12. Нужно переписать с учетом режима работы. режим работы определяет какую таблицу использовать. добавить аргумент режима m12/m27 + аргумент канал А/Б
void SetDacA(int16_t da)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	80fb      	strh	r3, [r7, #6]
	VDAC_A = volt2dgt(&(DevNVRAM.calibration_table), da); // VDAC_A переменая нужна для GetDacA() и тд.
 80022a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022aa:	4619      	mov	r1, r3
 80022ac:	4808      	ldr	r0, [pc, #32]	; (80022d0 <SetDacA+0x34>)
 80022ae:	f7ff ff11 	bl	80020d4 <volt2dgt>
 80022b2:	4603      	mov	r3, r0
 80022b4:	461a      	mov	r2, r3
 80022b6:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <SetDacA+0x38>)
 80022b8:	801a      	strh	r2, [r3, #0]
	DAC_AD5322_Ch1(&hspi1, VDAC_A);
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <SetDacA+0x38>)
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	4619      	mov	r1, r3
 80022c0:	4805      	ldr	r0, [pc, #20]	; (80022d8 <SetDacA+0x3c>)
 80022c2:	f7fe fc3b 	bl	8000b3c <DAC_AD5322_Ch1>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200004ac 	.word	0x200004ac
 80022d4:	20000256 	.word	0x20000256
 80022d8:	20000984 	.word	0x20000984

080022dc <SetDacB>:
void SetDacB(int16_t db) //BUG: Не работает. Установка цап реализованно только для канала A и режима m12. Нужно переписать с учетом режима работы. режим работы определяет какую таблицу использовать.
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	80fb      	strh	r3, [r7, #6]
	VDAC_B = volt2dgt(&(DevNVRAM.calibration_table), db);
 80022e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022ea:	4619      	mov	r1, r3
 80022ec:	4808      	ldr	r0, [pc, #32]	; (8002310 <SetDacB+0x34>)
 80022ee:	f7ff fef1 	bl	80020d4 <volt2dgt>
 80022f2:	4603      	mov	r3, r0
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b07      	ldr	r3, [pc, #28]	; (8002314 <SetDacB+0x38>)
 80022f8:	801a      	strh	r2, [r3, #0]
	DAC_AD5322_Ch2(&hspi1, VDAC_B);
 80022fa:	4b06      	ldr	r3, [pc, #24]	; (8002314 <SetDacB+0x38>)
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	4619      	mov	r1, r3
 8002300:	4805      	ldr	r0, [pc, #20]	; (8002318 <SetDacB+0x3c>)
 8002302:	f7fe fc62 	bl	8000bca <DAC_AD5322_Ch2>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	200004ac 	.word	0x200004ac
 8002314:	20000258 	.word	0x20000258
 8002318:	20000984 	.word	0x20000984

0800231c <SetAllDAC>:
void SetAllDAC()
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
	DAC_AD5322_Ch1Ch2(&hspi1, VDAC_A, VDAC_B);
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <SetAllDAC+0x18>)
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	4a04      	ldr	r2, [pc, #16]	; (8002338 <SetAllDAC+0x1c>)
 8002326:	8812      	ldrh	r2, [r2, #0]
 8002328:	4619      	mov	r1, r3
 800232a:	4804      	ldr	r0, [pc, #16]	; (800233c <SetAllDAC+0x20>)
 800232c:	f7fe fc94 	bl	8000c58 <DAC_AD5322_Ch1Ch2>
}
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000256 	.word	0x20000256
 8002338:	20000258 	.word	0x20000258
 800233c:	20000984 	.word	0x20000984

08002340 <GetDacA>:
//TODO: Установка цап реализованно только для канала A и режима m12. Нужно переписать с учетом режима работы. режим работы определяет какую таблицу использовать. добавить аргумент режима m12/m27 + аргумент канал А/Б
uint16_t GetDacA()
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
	return VDAC_A;
 8002344:	4b02      	ldr	r3, [pc, #8]	; (8002350 <GetDacA+0x10>)
 8002346:	881b      	ldrh	r3, [r3, #0]
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	20000256 	.word	0x20000256

08002354 <GetDacB>:
uint16_t GetDacB()
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
	return VDAC_B;
 8002358:	4b02      	ldr	r3, [pc, #8]	; (8002364 <GetDacB+0x10>)
 800235a:	881b      	ldrh	r3, [r3, #0]
}
 800235c:	4618      	mov	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr
 8002364:	20000258 	.word	0x20000258

08002368 <GetBtnRunState>:

uint8_t btn3_long_rd = 0;
uint8_t btn3_short_rd = 0;
//--------------------------------------------------------------------------
uint8_t GetBtnRunState()
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x00)
 800236c:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <GetBtnRunState+0x7c>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10b      	bne.n	800238c <GetBtnRunState+0x24>
 8002374:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <GetBtnRunState+0x80>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d107      	bne.n	800238c <GetBtnRunState+0x24>
	{
		btn1_long_rd = 0;
 800237c:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <GetBtnRunState+0x80>)
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 8002382:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <GetBtnRunState+0x7c>)
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8002388:	2300      	movs	r3, #0
 800238a:	e026      	b.n	80023da <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x01 && btn1_long_rd == 0x00)
 800238c:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <GetBtnRunState+0x7c>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d10b      	bne.n	80023ac <GetBtnRunState+0x44>
 8002394:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <GetBtnRunState+0x80>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d107      	bne.n	80023ac <GetBtnRunState+0x44>
	{
		btn1_long_rd = 0;
 800239c:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <GetBtnRunState+0x80>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 80023a2:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <GetBtnRunState+0x7c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
		return 0x01;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e016      	b.n	80023da <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x01)
 80023ac:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <GetBtnRunState+0x7c>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10b      	bne.n	80023cc <GetBtnRunState+0x64>
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <GetBtnRunState+0x80>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d107      	bne.n	80023cc <GetBtnRunState+0x64>
	{
		btn1_long_rd = 0;
 80023bc:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <GetBtnRunState+0x80>)
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 80023c2:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <GetBtnRunState+0x7c>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]
		return 0x02;
 80023c8:	2302      	movs	r3, #2
 80023ca:	e006      	b.n	80023da <GetBtnRunState+0x72>
	}

	btn1_long_rd = 0;
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <GetBtnRunState+0x80>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	701a      	strb	r2, [r3, #0]
	btn1_short_rd = 0;
 80023d2:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <GetBtnRunState+0x7c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]

	//	if (short_state1 == 0x00 && long_state1 == 0x00)	return 0x00;
	//	if (short_state1 == 0x01 && long_state1 == 0x00)	return 0x01;
	//	if (short_state1 == 0x00 && long_state1 == 0x01)	return 0x02;
	return 0x00;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000261 	.word	0x20000261
 80023e8:	20000260 	.word	0x20000260

080023ec <GetBtnUpState>:
//--------------------------------------------------------------------------
uint8_t GetBtnUpState()
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x00)
 80023f0:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <GetBtnUpState+0x7c>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10b      	bne.n	8002410 <GetBtnUpState+0x24>
 80023f8:	4b1c      	ldr	r3, [pc, #112]	; (800246c <GetBtnUpState+0x80>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d107      	bne.n	8002410 <GetBtnUpState+0x24>
	{
		btn2_long_rd = 0;
 8002400:	4b1a      	ldr	r3, [pc, #104]	; (800246c <GetBtnUpState+0x80>)
 8002402:	2200      	movs	r2, #0
 8002404:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 8002406:	4b18      	ldr	r3, [pc, #96]	; (8002468 <GetBtnUpState+0x7c>)
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
		return 0x00;
 800240c:	2300      	movs	r3, #0
 800240e:	e026      	b.n	800245e <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x01 && btn2_long_rd == 0x00)
 8002410:	4b15      	ldr	r3, [pc, #84]	; (8002468 <GetBtnUpState+0x7c>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d10b      	bne.n	8002430 <GetBtnUpState+0x44>
 8002418:	4b14      	ldr	r3, [pc, #80]	; (800246c <GetBtnUpState+0x80>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d107      	bne.n	8002430 <GetBtnUpState+0x44>
	{
		btn2_long_rd = 0;
 8002420:	4b12      	ldr	r3, [pc, #72]	; (800246c <GetBtnUpState+0x80>)
 8002422:	2200      	movs	r2, #0
 8002424:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 8002426:	4b10      	ldr	r3, [pc, #64]	; (8002468 <GetBtnUpState+0x7c>)
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
		return 0x01;
 800242c:	2301      	movs	r3, #1
 800242e:	e016      	b.n	800245e <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x01)
 8002430:	4b0d      	ldr	r3, [pc, #52]	; (8002468 <GetBtnUpState+0x7c>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10b      	bne.n	8002450 <GetBtnUpState+0x64>
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <GetBtnUpState+0x80>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d107      	bne.n	8002450 <GetBtnUpState+0x64>
	{
		btn2_long_rd = 0;
 8002440:	4b0a      	ldr	r3, [pc, #40]	; (800246c <GetBtnUpState+0x80>)
 8002442:	2200      	movs	r2, #0
 8002444:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 8002446:	4b08      	ldr	r3, [pc, #32]	; (8002468 <GetBtnUpState+0x7c>)
 8002448:	2200      	movs	r2, #0
 800244a:	701a      	strb	r2, [r3, #0]
		return 0x02;
 800244c:	2302      	movs	r3, #2
 800244e:	e006      	b.n	800245e <GetBtnUpState+0x72>
	}

	btn2_long_rd = 0;
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <GetBtnUpState+0x80>)
 8002452:	2200      	movs	r2, #0
 8002454:	701a      	strb	r2, [r3, #0]
	btn2_short_rd = 0;
 8002456:	4b04      	ldr	r3, [pc, #16]	; (8002468 <GetBtnUpState+0x7c>)
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]
	//	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	//	if (short_state2 == 0x00 && long_state2 == 0x00)	return 0x00;
	//	if (short_state2 == 0x01 && long_state2 == 0x00)	return 0x01;
	//	if (short_state2 == 0x00 && long_state2 == 0x01)	return 0x02;
	return 0x00;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	20000269 	.word	0x20000269
 800246c:	20000268 	.word	0x20000268

08002470 <GetBtnDownState>:
//--------------------------------------------------------------------------
uint8_t GetBtnDownState()
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x00)
 8002474:	4b1d      	ldr	r3, [pc, #116]	; (80024ec <GetBtnDownState+0x7c>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10b      	bne.n	8002494 <GetBtnDownState+0x24>
 800247c:	4b1c      	ldr	r3, [pc, #112]	; (80024f0 <GetBtnDownState+0x80>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d107      	bne.n	8002494 <GetBtnDownState+0x24>
	{
		btn3_long_rd = 0;
 8002484:	4b1a      	ldr	r3, [pc, #104]	; (80024f0 <GetBtnDownState+0x80>)
 8002486:	2200      	movs	r2, #0
 8002488:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 800248a:	4b18      	ldr	r3, [pc, #96]	; (80024ec <GetBtnDownState+0x7c>)
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8002490:	2300      	movs	r3, #0
 8002492:	e026      	b.n	80024e2 <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x01 && btn3_long_rd == 0x00)
 8002494:	4b15      	ldr	r3, [pc, #84]	; (80024ec <GetBtnDownState+0x7c>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d10b      	bne.n	80024b4 <GetBtnDownState+0x44>
 800249c:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <GetBtnDownState+0x80>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d107      	bne.n	80024b4 <GetBtnDownState+0x44>
	{
		btn3_long_rd = 0;
 80024a4:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <GetBtnDownState+0x80>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 80024aa:	4b10      	ldr	r3, [pc, #64]	; (80024ec <GetBtnDownState+0x7c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
		return 0x01;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e016      	b.n	80024e2 <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x01)
 80024b4:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <GetBtnDownState+0x7c>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10b      	bne.n	80024d4 <GetBtnDownState+0x64>
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <GetBtnDownState+0x80>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d107      	bne.n	80024d4 <GetBtnDownState+0x64>
	{
		btn3_long_rd = 0;
 80024c4:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <GetBtnDownState+0x80>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 80024ca:	4b08      	ldr	r3, [pc, #32]	; (80024ec <GetBtnDownState+0x7c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]
		return 0x02;
 80024d0:	2302      	movs	r3, #2
 80024d2:	e006      	b.n	80024e2 <GetBtnDownState+0x72>
	}

	btn3_long_rd = 0;
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <GetBtnDownState+0x80>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
	btn3_short_rd = 0;
 80024da:	4b04      	ldr	r3, [pc, #16]	; (80024ec <GetBtnDownState+0x7c>)
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
	//	if (short_state3 == 0x00 && long_state3 == 0x00)	return 0x00;
	//	if (short_state3 == 0x01 && long_state3 == 0x00)	return 0x01;
	//	if (short_state3 == 0x00 && long_state3 == 0x01)	return 0x02;
	return 0x00;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20000271 	.word	0x20000271
 80024f0:	20000270 	.word	0x20000270

080024f4 <EnableTIM3_PB4>:
// char trans2_str[64] = {
// 	0,
// };
//--------------------------------------------------------------------------
void EnableTIM3_PB4()
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
	timWork = 1;
 80024f8:	4b03      	ldr	r3, [pc, #12]	; (8002508 <EnableTIM3_PB4+0x14>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	701a      	strb	r2, [r3, #0]
}
 80024fe:	bf00      	nop
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20000272 	.word	0x20000272

0800250c <GetTIM3>:
uint16_t GetTIM3()
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
	return g_vTIM3_PB4;
 8002510:	4b03      	ldr	r3, [pc, #12]	; (8002520 <GetTIM3+0x14>)
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	b29b      	uxth	r3, r3
}
 8002516:	4618      	mov	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	20000274 	.word	0x20000274

08002524 <resValTIM3_PB4>:
void resValTIM3_PB4()
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
	g_vTIM3_PB4 = 0;
 8002528:	4b03      	ldr	r3, [pc, #12]	; (8002538 <resValTIM3_PB4+0x14>)
 800252a:	2200      	movs	r2, #0
 800252c:	801a      	strh	r2, [r3, #0]
}
 800252e:	bf00      	nop
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	20000274 	.word	0x20000274

0800253c <EnableTIM4_PB6>:
//--------------------------------------------------------------------------
void EnableTIM4_PB6()
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
	timWork = 0;
 8002540:	4b03      	ldr	r3, [pc, #12]	; (8002550 <EnableTIM4_PB6+0x14>)
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
}
 8002546:	bf00      	nop
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	20000272 	.word	0x20000272

08002554 <GetTIM4>:
uint16_t GetTIM4()
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
	return g_vTIM4_PB6;
 8002558:	4b03      	ldr	r3, [pc, #12]	; (8002568 <GetTIM4+0x14>)
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	b29b      	uxth	r3, r3
}
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20000276 	.word	0x20000276

0800256c <resValTIM4_PB6>:
void resValTIM4_PB6()
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
	g_vTIM4_PB6 = 0;
 8002570:	4b03      	ldr	r3, [pc, #12]	; (8002580 <resValTIM4_PB6+0x14>)
 8002572:	2200      	movs	r2, #0
 8002574:	801a      	strh	r2, [r3, #0]
}
 8002576:	bf00      	nop
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000276 	.word	0x20000276

08002584 <HAL_TIM_IC_CaptureCallback>:
//--------------------------------------------------------------------------
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
	uint16_t periodTIM3, pulseWidthTIM3, periodTIM4, pulseWidthTIM4;

	if (timWork)
 800258c:	4b2b      	ldr	r3, [pc, #172]	; (800263c <HAL_TIM_IC_CaptureCallback+0xb8>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d027      	beq.n	80025e6 <HAL_TIM_IC_CaptureCallback+0x62>
	{
		if (htim->Instance == TIM3)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a29      	ldr	r2, [pc, #164]	; (8002640 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d149      	bne.n	8002634 <HAL_TIM_IC_CaptureCallback+0xb0>
		{
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	7f1b      	ldrb	r3, [r3, #28]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d145      	bne.n	8002634 <HAL_TIM_IC_CaptureCallback+0xb0>
			{
				periodTIM3 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 80025a8:	2100      	movs	r1, #0
 80025aa:	4826      	ldr	r0, [pc, #152]	; (8002644 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80025ac:	f005 fc48 	bl	8007e40 <HAL_TIM_ReadCapturedValue>
 80025b0:	4603      	mov	r3, r0
 80025b2:	823b      	strh	r3, [r7, #16]
				pulseWidthTIM3 = HAL_TIM_ReadCapturedValue(&htim3,
 80025b4:	2104      	movs	r1, #4
 80025b6:	4823      	ldr	r0, [pc, #140]	; (8002644 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80025b8:	f005 fc42 	bl	8007e40 <HAL_TIM_ReadCapturedValue>
 80025bc:	4603      	mov	r3, r0
 80025be:	81fb      	strh	r3, [r7, #14]
														   TIM_CHANNEL_2);

				TIM3->CNT = 0;
 80025c0:	4b1f      	ldr	r3, [pc, #124]	; (8002640 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24

				int16_t deltaTIM3 = (int16_t)periodTIM3 - (int16_t)pulseWidthTIM3;
 80025c6:	8a3a      	ldrh	r2, [r7, #16]
 80025c8:	89fb      	ldrh	r3, [r7, #14]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	81bb      	strh	r3, [r7, #12]
				deltaTIM3 = (deltaTIM3 < 0) ? (-1 * deltaTIM3) : deltaTIM3;
 80025d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bfb8      	it	lt
 80025d8:	425b      	neglt	r3, r3
 80025da:	b29b      	uxth	r3, r3
 80025dc:	81bb      	strh	r3, [r7, #12]
				g_vTIM3_PB4 = deltaTIM3;
 80025de:	89ba      	ldrh	r2, [r7, #12]
 80025e0:	4b19      	ldr	r3, [pc, #100]	; (8002648 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80025e2:	801a      	strh	r2, [r3, #0]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
				g_vTIM4_PB6 = deltaTIM4;
			}
		}
	}
}
 80025e4:	e026      	b.n	8002634 <HAL_TIM_IC_CaptureCallback+0xb0>
		if (htim->Instance == TIM4)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a18      	ldr	r2, [pc, #96]	; (800264c <HAL_TIM_IC_CaptureCallback+0xc8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d121      	bne.n	8002634 <HAL_TIM_IC_CaptureCallback+0xb0>
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	7f1b      	ldrb	r3, [r3, #28]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d11d      	bne.n	8002634 <HAL_TIM_IC_CaptureCallback+0xb0>
				periodTIM4 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 80025f8:	2100      	movs	r1, #0
 80025fa:	4815      	ldr	r0, [pc, #84]	; (8002650 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80025fc:	f005 fc20 	bl	8007e40 <HAL_TIM_ReadCapturedValue>
 8002600:	4603      	mov	r3, r0
 8002602:	82fb      	strh	r3, [r7, #22]
				pulseWidthTIM4 = HAL_TIM_ReadCapturedValue(&htim4,
 8002604:	2104      	movs	r1, #4
 8002606:	4812      	ldr	r0, [pc, #72]	; (8002650 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8002608:	f005 fc1a 	bl	8007e40 <HAL_TIM_ReadCapturedValue>
 800260c:	4603      	mov	r3, r0
 800260e:	82bb      	strh	r3, [r7, #20]
				TIM4->CNT = 0;
 8002610:	4b0e      	ldr	r3, [pc, #56]	; (800264c <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002612:	2200      	movs	r2, #0
 8002614:	625a      	str	r2, [r3, #36]	; 0x24
				int16_t deltaTIM4 = (int16_t)periodTIM4 - (int16_t)pulseWidthTIM4;
 8002616:	8afa      	ldrh	r2, [r7, #22]
 8002618:	8abb      	ldrh	r3, [r7, #20]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	b29b      	uxth	r3, r3
 800261e:	827b      	strh	r3, [r7, #18]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
 8002620:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002624:	2b00      	cmp	r3, #0
 8002626:	bfb8      	it	lt
 8002628:	425b      	neglt	r3, r3
 800262a:	b29b      	uxth	r3, r3
 800262c:	827b      	strh	r3, [r7, #18]
				g_vTIM4_PB6 = deltaTIM4;
 800262e:	8a7a      	ldrh	r2, [r7, #18]
 8002630:	4b08      	ldr	r3, [pc, #32]	; (8002654 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8002632:	801a      	strh	r2, [r3, #0]
}
 8002634:	bf00      	nop
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20000272 	.word	0x20000272
 8002640:	40000400 	.word	0x40000400
 8002644:	200008fc 	.word	0x200008fc
 8002648:	20000274 	.word	0x20000274
 800264c:	40000800 	.word	0x40000800
 8002650:	200008ac 	.word	0x200008ac
 8002654:	20000276 	.word	0x20000276

08002658 <GetADC>:
//**************************************************************************
#if TEST_ADC
volatile uint16_t g_VADC = 0;

uint16_t GetADC()
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
	return g_VADC;
 800265c:	4b03      	ldr	r3, [pc, #12]	; (800266c <GetADC+0x14>)
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	b29b      	uxth	r3, r3
}
 8002662:	4618      	mov	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	20000278 	.word	0x20000278

08002670 <HAL_ADC_ConvCpltCallback>:
//--------------------------------------------------------------------------
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a06      	ldr	r2, [pc, #24]	; (8002698 <HAL_ADC_ConvCpltCallback+0x28>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d106      	bne.n	8002690 <HAL_ADC_ConvCpltCallback+0x20>
	{
		g_VADC = HAL_ADC_GetValue(&hadc1); // глобальная переменна g_VADC вычитывается
 8002682:	4806      	ldr	r0, [pc, #24]	; (800269c <HAL_ADC_ConvCpltCallback+0x2c>)
 8002684:	f001 fd94 	bl	80041b0 <HAL_ADC_GetValue>
 8002688:	4603      	mov	r3, r0
 800268a:	b29a      	uxth	r2, r3
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <HAL_ADC_ConvCpltCallback+0x30>)
 800268e:	801a      	strh	r2, [r3, #0]
	}
}
 8002690:	bf00      	nop
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40012400 	.word	0x40012400
 800269c:	20000954 	.word	0x20000954
 80026a0:	20000278 	.word	0x20000278

080026a4 <runCommands>:
	Калибровка 
	На вход щупа подается семетричная пила с частотой 1кГц с оффестом установленным на ип.
	после компарирования сигнала МК измеряет длительность импульса
	т.к. 1 кГц соотвествет длительности в 500 мс то это означает что мы попапали в полуку офсета.
	--------------------------------------------------------------------------*/
{
 80026a4:	b590      	push	{r4, r7, lr}
 80026a6:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	6018      	str	r0, [r3, #0]
 80026b0:	463b      	mov	r3, r7
 80026b2:	6019      	str	r1, [r3, #0]
	if (*Len < 1)
 80026b4:	463b      	mov	r3, r7
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 8400 	beq.w	8002ec0 <runCommands+0x81c>

	//--------------------------------------------------------------------------

	uint8_t UserTxBufferFS[APP_TX_DATA_SIZE];
	uint16_t tVal16;
	uint8_t cmd = Buf[0];
 80026c0:	1d3b      	adds	r3, r7, #4
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	//--------------------------------------------------------------------------
	if 		(cmd == 0x01)	// Relay:1 - 12V	[0x01 - 0x01]
 80026ca:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d16c      	bne.n	80027ac <runCommands+0x108>
	{
		if (*Len >= 2 && (Buf[1] == 0x01 || Buf[1] == 0x00))
 80026d2:	463b      	mov	r3, r7
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d957      	bls.n	800278c <runCommands+0xe8>
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	3301      	adds	r3, #1
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d005      	beq.n	80026f4 <runCommands+0x50>
 80026e8:	1d3b      	adds	r3, r7, #4
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	3301      	adds	r3, #1
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d14b      	bne.n	800278c <runCommands+0xe8>
		{
			if (Buf[1] == 0x01)
 80026f4:	1d3b      	adds	r3, r7, #4
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	3301      	adds	r3, #1
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d11f      	bne.n	8002740 <runCommands+0x9c>
			{
				#if TEST_RELAY
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8002700:	2201      	movs	r2, #1
 8002702:	2104      	movs	r1, #4
 8002704:	48cb      	ldr	r0, [pc, #812]	; (8002a34 <runCommands+0x390>)
 8002706:	f002 fd1a 	bl	800513e <HAL_GPIO_WritePin>
				RelayState = m12;
 800270a:	4bcb      	ldr	r3, [pc, #812]	; (8002a38 <runCommands+0x394>)
 800270c:	2201      	movs	r2, #1
 800270e:	701a      	strb	r2, [r3, #0]
				printf("RelayState:12V - %d \n", RelayState);
 8002710:	4bc9      	ldr	r3, [pc, #804]	; (8002a38 <runCommands+0x394>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	4619      	mov	r1, r3
 8002716:	48c9      	ldr	r0, [pc, #804]	; (8002a3c <runCommands+0x398>)
 8002718:	f009 ff1c 	bl	800c554 <iprintf>
				SetAllDAC();
 800271c:	f7ff fdfe 	bl	800231c <SetAllDAC>
				UserTxBufferFS[0] = cmd;
 8002720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002724:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002728:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 800272a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800272e:	2200      	movs	r2, #0
 8002730:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 8002732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002736:	2102      	movs	r1, #2
 8002738:	4618      	mov	r0, r3
 800273a:	f009 fad3 	bl	800bce4 <CDC_Transmit_FS>
				#endif /* TEST_RELAY */
				return;
 800273e:	e3c4      	b.n	8002eca <runCommands+0x826>
			}
			else if (Buf[1] == 0x00)
 8002740:	1d3b      	adds	r3, r7, #4
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	3301      	adds	r3, #1
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d11f      	bne.n	800278c <runCommands+0xe8>
			{
				#if TEST_RELAY
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 800274c:	2200      	movs	r2, #0
 800274e:	2104      	movs	r1, #4
 8002750:	48b8      	ldr	r0, [pc, #736]	; (8002a34 <runCommands+0x390>)
 8002752:	f002 fcf4 	bl	800513e <HAL_GPIO_WritePin>
				RelayState = m27;
 8002756:	4bb8      	ldr	r3, [pc, #736]	; (8002a38 <runCommands+0x394>)
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
				printf("RelayState:27V - %d \n", RelayState);
 800275c:	4bb6      	ldr	r3, [pc, #728]	; (8002a38 <runCommands+0x394>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	4619      	mov	r1, r3
 8002762:	48b7      	ldr	r0, [pc, #732]	; (8002a40 <runCommands+0x39c>)
 8002764:	f009 fef6 	bl	800c554 <iprintf>
				SetAllDAC();
 8002768:	f7ff fdd8 	bl	800231c <SetAllDAC>

				UserTxBufferFS[0] = cmd;
 800276c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002770:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002774:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 8002776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800277a:	2200      	movs	r2, #0
 800277c:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 800277e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002782:	2102      	movs	r1, #2
 8002784:	4618      	mov	r0, r3
 8002786:	f009 faad 	bl	800bce4 <CDC_Transmit_FS>
				#endif /* TEST_RELAY */
				return;
 800278a:	e39e      	b.n	8002eca <runCommands+0x826>
			}
		}

		UserTxBufferFS[0] = cmd;
 800278c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002790:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002794:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8002796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800279a:	2201      	movs	r2, #1
 800279c:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 800279e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027a2:	2102      	movs	r1, #2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f009 fa9d 	bl	800bce4 <CDC_Transmit_FS>
		return;
 80027aa:	e38e      	b.n	8002eca <runCommands+0x826>

		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x02)	// DA:4095
 80027ac:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d13e      	bne.n	8002832 <runCommands+0x18e>
	{
		if (*Len >= 3)
 80027b4:	463b      	mov	r3, r7
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d929      	bls.n	8002812 <runCommands+0x16e>
		{
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 80027be:	f7ff feb1 	bl	8002524 <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 80027c2:	f7ff fed3 	bl	800256c <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 80027c6:	1d3b      	adds	r3, r7, #4
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	3301      	adds	r3, #1
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80027d4:	801a      	strh	r2, [r3, #0]
			SetDacA(tVal16);
 80027d6:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	b21b      	sxth	r3, r3
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fd5c 	bl	800229c <SetDacA>
			//			SetDacA(tVal16);

			printf("DacA: %d\n", tVal16);
 80027e4:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	4619      	mov	r1, r3
 80027ec:	4895      	ldr	r0, [pc, #596]	; (8002a44 <runCommands+0x3a0>)
 80027ee:	f009 feb1 	bl	800c554 <iprintf>
			UserTxBufferFS[0] = cmd;
 80027f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f6:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80027fa:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 80027fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002800:	2200      	movs	r2, #0
 8002802:	705a      	strb	r2, [r3, #1]

			CDC_Transmit_FS(UserTxBufferFS, 2);
 8002804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002808:	2102      	movs	r1, #2
 800280a:	4618      	mov	r0, r3
 800280c:	f009 fa6a 	bl	800bce4 <CDC_Transmit_FS>
			return;
 8002810:	e35b      	b.n	8002eca <runCommands+0x826>
		}

		UserTxBufferFS[0] = cmd;
 8002812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002816:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800281a:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 800281c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002820:	2201      	movs	r2, #1
 8002822:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8002824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002828:	2102      	movs	r1, #2
 800282a:	4618      	mov	r0, r3
 800282c:	f009 fa5a 	bl	800bce4 <CDC_Transmit_FS>
		return;
 8002830:	e34b      	b.n	8002eca <runCommands+0x826>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x03)	// DB:4095
 8002832:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002836:	2b03      	cmp	r3, #3
 8002838:	d13e      	bne.n	80028b8 <runCommands+0x214>
	{
		if (*Len >= 3)
 800283a:	463b      	mov	r3, r7
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d929      	bls.n	8002898 <runCommands+0x1f4>
		{
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 8002844:	f7ff fe6e 	bl	8002524 <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 8002848:	f7ff fe90 	bl	800256c <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 800284c:	1d3b      	adds	r3, r7, #4
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	3301      	adds	r3, #1
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	b29a      	uxth	r2, r3
 8002856:	f107 0322 	add.w	r3, r7, #34	; 0x22
 800285a:	801a      	strh	r2, [r3, #0]
			SetDacB(tVal16);
 800285c:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	b21b      	sxth	r3, r3
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fd39 	bl	80022dc <SetDacB>

			UserTxBufferFS[0] = cmd;
 800286a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800286e:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002872:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 8002874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002878:	2200      	movs	r2, #0
 800287a:	705a      	strb	r2, [r3, #1]

			printf("DacB: %d \n", tVal16);
 800287c:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	4619      	mov	r1, r3
 8002884:	4870      	ldr	r0, [pc, #448]	; (8002a48 <runCommands+0x3a4>)
 8002886:	f009 fe65 	bl	800c554 <iprintf>

			CDC_Transmit_FS(UserTxBufferFS, 2);
 800288a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800288e:	2102      	movs	r1, #2
 8002890:	4618      	mov	r0, r3
 8002892:	f009 fa27 	bl	800bce4 <CDC_Transmit_FS>
			return;
 8002896:	e318      	b.n	8002eca <runCommands+0x826>
		}

		UserTxBufferFS[0] = cmd;
 8002898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800289c:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80028a0:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 80028a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a6:	2201      	movs	r2, #1
 80028a8:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 80028aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ae:	2102      	movs	r1, #2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f009 fa17 	bl	800bce4 <CDC_Transmit_FS>
		return;
 80028b6:	e308      	b.n	8002eca <runCommands+0x826>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x04)	// ADC?
 80028b8:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d119      	bne.n	80028f4 <runCommands+0x250>
	{
		tVal16 = GetADC();
 80028c0:	f7ff feca 	bl	8002658 <GetADC>
 80028c4:	4603      	mov	r3, r0
 80028c6:	461a      	mov	r2, r3
 80028c8:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80028cc:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 80028ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d2:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80028d6:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &tVal16, sizeof(tVal16));
 80028d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028dc:	3301      	adds	r3, #1
 80028de:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80028e2:	8812      	ldrh	r2, [r2, #0]
 80028e4:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 3);
 80028e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ea:	2103      	movs	r1, #3
 80028ec:	4618      	mov	r0, r3
 80028ee:	f009 f9f9 	bl	800bce4 <CDC_Transmit_FS>
		return;
 80028f2:	e2ea      	b.n	8002eca <runCommands+0x826>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x05)	// Relay?DA?DB?
 80028f4:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80028f8:	2b05      	cmp	r3, #5
 80028fa:	d12d      	bne.n	8002958 <runCommands+0x2b4>
	{
		UserTxBufferFS[0] = cmd;
 80028fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002900:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002904:	701a      	strb	r2, [r3, #0]
		#if TEST_RELAY
		UserTxBufferFS[1] = RelayState;
 8002906:	4b4c      	ldr	r3, [pc, #304]	; (8002a38 <runCommands+0x394>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	461a      	mov	r2, r3
 800290c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002910:	705a      	strb	r2, [r3, #1]
		#endif /* TEST_RELAY */

		tVal16 = GetDacA();
 8002912:	f7ff fd15 	bl	8002340 <GetDacA>
 8002916:	4603      	mov	r3, r0
 8002918:	461a      	mov	r2, r3
 800291a:	f107 0322 	add.w	r3, r7, #34	; 0x22
 800291e:	801a      	strh	r2, [r3, #0]
		memcpy(UserTxBufferFS + 2, &tVal16, sizeof(tVal16));
 8002920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002924:	3302      	adds	r3, #2
 8002926:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800292a:	8812      	ldrh	r2, [r2, #0]
 800292c:	801a      	strh	r2, [r3, #0]

		tVal16 = GetDacB();
 800292e:	f7ff fd11 	bl	8002354 <GetDacB>
 8002932:	4603      	mov	r3, r0
 8002934:	461a      	mov	r2, r3
 8002936:	f107 0322 	add.w	r3, r7, #34	; 0x22
 800293a:	801a      	strh	r2, [r3, #0]
		memcpy(UserTxBufferFS + 4, &tVal16, sizeof(tVal16));
 800293c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002940:	3304      	adds	r3, #4
 8002942:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8002946:	8812      	ldrh	r2, [r2, #0]
 8002948:	801a      	strh	r2, [r3, #0]

		CDC_Transmit_FS(UserTxBufferFS, 6);
 800294a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800294e:	2106      	movs	r1, #6
 8002950:	4618      	mov	r0, r3
 8002952:	f009 f9c7 	bl	800bce4 <CDC_Transmit_FS>
		return;
 8002956:	e2b8      	b.n	8002eca <runCommands+0x826>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x06)	// Btn?
 8002958:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 800295c:	2b06      	cmp	r3, #6
 800295e:	d120      	bne.n	80029a2 <runCommands+0x2fe>
	{
		UserTxBufferFS[0] = cmd;
 8002960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002964:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002968:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = GetBtnRunState();
 800296a:	f7ff fcfd 	bl	8002368 <GetBtnRunState>
 800296e:	4603      	mov	r3, r0
 8002970:	461a      	mov	r2, r3
 8002972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002976:	705a      	strb	r2, [r3, #1]
		UserTxBufferFS[2] = GetBtnUpState();
 8002978:	f7ff fd38 	bl	80023ec <GetBtnUpState>
 800297c:	4603      	mov	r3, r0
 800297e:	461a      	mov	r2, r3
 8002980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002984:	709a      	strb	r2, [r3, #2]
		UserTxBufferFS[3] = GetBtnDownState();
 8002986:	f7ff fd73 	bl	8002470 <GetBtnDownState>
 800298a:	4603      	mov	r3, r0
 800298c:	461a      	mov	r2, r3
 800298e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002992:	70da      	strb	r2, [r3, #3]
		CDC_Transmit_FS(UserTxBufferFS, 4);
 8002994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002998:	2104      	movs	r1, #4
 800299a:	4618      	mov	r0, r3
 800299c:	f009 f9a2 	bl	800bce4 <CDC_Transmit_FS>
		return;
 80029a0:	e293      	b.n	8002eca <runCommands+0x826>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x07)	// ID?
 80029a2:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80029a6:	2b07      	cmp	r3, #7
 80029a8:	d154      	bne.n	8002a54 <runCommands+0x3b0>
	{
		char str[9] = {
 80029aa:	f107 0318 	add.w	r3, r7, #24
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	3304      	adds	r3, #4
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	711a      	strb	r2, [r3, #4]
			0,
		};
		memcpy(str, "SN", strlen("SN"));
 80029ba:	f107 0318 	add.w	r3, r7, #24
 80029be:	2202      	movs	r2, #2
 80029c0:	4922      	ldr	r1, [pc, #136]	; (8002a4c <runCommands+0x3a8>)
 80029c2:	4618      	mov	r0, r3
 80029c4:	f009 fdb0 	bl	800c528 <memcpy>
		itoa(SN_DEFINE, str + 2, 16);
 80029c8:	f107 0318 	add.w	r3, r7, #24
 80029cc:	3302      	adds	r3, #2
 80029ce:	2210      	movs	r2, #16
 80029d0:	4619      	mov	r1, r3
 80029d2:	481f      	ldr	r0, [pc, #124]	; (8002a50 <runCommands+0x3ac>)
 80029d4:	f009 fda6 	bl	800c524 <itoa>

		UserTxBufferFS[0] = cmd;
 80029d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029dc:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80029e0:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = strlen(str);
 80029e2:	f107 0318 	add.w	r3, r7, #24
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fd fbb2 	bl	8000150 <strlen>
 80029ec:	4603      	mov	r3, r0
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029f4:	705a      	strb	r2, [r3, #1]
		memcpy(UserTxBufferFS + 2, str, strlen(str));
 80029f6:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80029fa:	3402      	adds	r4, #2
 80029fc:	f107 0318 	add.w	r3, r7, #24
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fd fba5 	bl	8000150 <strlen>
 8002a06:	4602      	mov	r2, r0
 8002a08:	f107 0318 	add.w	r3, r7, #24
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4620      	mov	r0, r4
 8002a10:	f009 fd8a 	bl	800c528 <memcpy>
		CDC_Transmit_FS(UserTxBufferFS, strlen(str) + 2);
 8002a14:	f107 0318 	add.w	r3, r7, #24
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fd fb99 	bl	8000150 <strlen>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	3302      	adds	r3, #2
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f009 f959 	bl	800bce4 <CDC_Transmit_FS>
 8002a32:	e24a      	b.n	8002eca <runCommands+0x826>
 8002a34:	40010800 	.word	0x40010800
 8002a38:	20000010 	.word	0x20000010
 8002a3c:	0800d968 	.word	0x0800d968
 8002a40:	0800d980 	.word	0x0800d980
 8002a44:	0800d998 	.word	0x0800d998
 8002a48:	0800d9a4 	.word	0x0800d9a4
 8002a4c:	0800d9b0 	.word	0x0800d9b0
 8002a50:	01121001 	.word	0x01121001
	На вход щупа подается семетричная пила с частотой 1кГц с оффестом установленным на ип.
	после компарирования сигнала МК измеряет длительность импульса
	т.к. 1 кГц соотвествет длительности в 500 мс то это означает что мы попапали в полуку офсета.*/
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x08)	// Калибровка TIM inHL?
 8002a54:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d11b      	bne.n	8002a94 <runCommands+0x3f0>
	{
		EnableTIM3_PB4();
 8002a5c:	f7ff fd4a 	bl	80024f4 <EnableTIM3_PB4>
		uint16_t temp = GetTIM3();
 8002a60:	f7ff fd54 	bl	800250c <GetTIM3>
 8002a64:	4603      	mov	r3, r0
 8002a66:	461a      	mov	r2, r3
 8002a68:	f107 0316 	add.w	r3, r7, #22
 8002a6c:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8002a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a72:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002a76:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &temp, sizeof(uint16_t));
 8002a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	f107 0216 	add.w	r2, r7, #22
 8002a82:	8812      	ldrh	r2, [r2, #0]
 8002a84:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 8002a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a8a:	2103      	movs	r1, #3
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f009 f929 	bl	800bce4 <CDC_Transmit_FS>
 8002a92:	e21a      	b.n	8002eca <runCommands+0x826>
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x09)	// Калибровка TIM inLL?
 8002a94:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002a98:	2b09      	cmp	r3, #9
 8002a9a:	d11b      	bne.n	8002ad4 <runCommands+0x430>
	{
		EnableTIM4_PB6();
 8002a9c:	f7ff fd4e 	bl	800253c <EnableTIM4_PB6>
		uint16_t temp = GetTIM4();
 8002aa0:	f7ff fd58 	bl	8002554 <GetTIM4>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8002aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ab2:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002ab6:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &temp, sizeof(uint16_t));
 8002ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002abc:	3301      	adds	r3, #1
 8002abe:	f107 0214 	add.w	r2, r7, #20
 8002ac2:	8812      	ldrh	r2, [r2, #0]
 8002ac4:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 8002ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aca:	2103      	movs	r1, #3
 8002acc:	4618      	mov	r0, r3
 8002ace:	f009 f909 	bl	800bce4 <CDC_Transmit_FS>
 8002ad2:	e1fa      	b.n	8002eca <runCommands+0x826>
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0A)	// TODO: Прием калибровочной таблицы [0x0A][1-4][offset][count][data] 	answer: [0x0A]+[1-4]+[offset]+[count]+[status] (0x00 - сработал; 0x01 - не сработал)
 8002ad4:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002ad8:	2b0a      	cmp	r3, #10
 8002ada:	f040 81ad 	bne.w	8002e38 <runCommands+0x794>
	{
		//Прием калибровочной таблицы [0x0A][1-4][offset][count][data]
		//FIXME: За одну посылку можно получить максимум 64 byte. Нужно организовать пакетную передачу
		uint16_t tOffset, tCount, tData;
		if (*Len >= 2 && Buf[1] >= 0x00 && Buf[1] <= 0x03)
 8002ade:	463b      	mov	r3, r7
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	f240 8197 	bls.w	8002e18 <runCommands+0x774>
 8002aea:	1d3b      	adds	r3, r7, #4
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	3301      	adds	r3, #1
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	f200 8190 	bhi.w	8002e18 <runCommands+0x774>
		{
			if 		(Buf[1] == 0x00)	//А_m12
 8002af8:	1d3b      	adds	r3, r7, #4
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	3301      	adds	r3, #1
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d15f      	bne.n	8002bc4 <runCommands+0x520>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 8002b04:	1d3b      	adds	r3, r7, #4
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	3302      	adds	r3, #2
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	f107 0312 	add.w	r3, r7, #18
 8002b12:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8002b14:	1d3b      	adds	r3, r7, #4
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	f107 0310 	add.w	r3, r7, #16
 8002b22:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8002b24:	2300      	movs	r3, #0
 8002b26:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
 8002b2a:	e01f      	b.n	8002b6c <runCommands+0x4c8>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8002b2c:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	3306      	adds	r3, #6
 8002b34:	1d3a      	adds	r2, r7, #4
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	4413      	add	r3, r2
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	f107 030e 	add.w	r3, r7, #14
 8002b42:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValA_m12[i + tOffset] = tData;
 8002b44:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8002b48:	f107 0212 	add.w	r2, r7, #18
 8002b4c:	8812      	ldrh	r2, [r2, #0]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f107 020e 	add.w	r2, r7, #14
 8002b54:	8811      	ldrh	r1, [r2, #0]
 8002b56:	4acf      	ldr	r2, [pc, #828]	; (8002e94 <runCommands+0x7f0>)
 8002b58:	3304      	adds	r3, #4
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	4413      	add	r3, r2
 8002b5e:	460a      	mov	r2, r1
 8002b60:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 8002b62:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8002b66:	3301      	adds	r3, #1
 8002b68:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
 8002b6c:	f107 0310 	add.w	r3, r7, #16
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	f8b7 222e 	ldrh.w	r2, [r7, #558]	; 0x22e
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d3d8      	bcc.n	8002b2c <runCommands+0x488>
				}

				changeTableFlag = true;
 8002b7a:	4bc7      	ldr	r3, [pc, #796]	; (8002e98 <runCommands+0x7f4>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	701a      	strb	r2, [r3, #0]
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 8002b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b84:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002b88:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8002b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b8e:	2201      	movs	r2, #1
 8002b90:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2			->4
 8002b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b96:	3302      	adds	r3, #2
 8002b98:	f107 0212 	add.w	r2, r7, #18
 8002b9c:	8812      	ldrh	r2, [r2, #0]
 8002b9e:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8002ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	f107 0210 	add.w	r2, r7, #16
 8002baa:	8812      	ldrh	r2, [r2, #0]
 8002bac:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1		->7
 8002bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8002bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bba:	2101      	movs	r1, #1
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f009 f891 	bl	800bce4 <CDC_Transmit_FS>
				return;
 8002bc2:	e182      	b.n	8002eca <runCommands+0x826>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x01)	//B_m12
 8002bc4:	1d3b      	adds	r3, r7, #4
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d15c      	bne.n	8002c8a <runCommands+0x5e6>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 8002bd0:	1d3b      	adds	r3, r7, #4
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	3302      	adds	r3, #2
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	f107 0312 	add.w	r3, r7, #18
 8002bde:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8002be0:	1d3b      	adds	r3, r7, #4
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3304      	adds	r3, #4
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	f107 0310 	add.w	r3, r7, #16
 8002bee:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
 8002bf6:	e01f      	b.n	8002c38 <runCommands+0x594>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8002bf8:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	3306      	adds	r3, #6
 8002c00:	1d3a      	adds	r2, r7, #4
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	4413      	add	r3, r2
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	f107 030e 	add.w	r3, r7, #14
 8002c0e:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValB_m12[i + tOffset] = tData;
 8002c10:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8002c14:	f107 0212 	add.w	r2, r7, #18
 8002c18:	8812      	ldrh	r2, [r2, #0]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f107 020e 	add.w	r2, r7, #14
 8002c20:	8811      	ldrh	r1, [r2, #0]
 8002c22:	4a9c      	ldr	r2, [pc, #624]	; (8002e94 <runCommands+0x7f0>)
 8002c24:	335c      	adds	r3, #92	; 0x5c
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	4413      	add	r3, r2
 8002c2a:	460a      	mov	r2, r1
 8002c2c:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 8002c2e:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8002c32:	3301      	adds	r3, #1
 8002c34:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
 8002c38:	f107 0310 	add.w	r3, r7, #16
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	f8b7 222c 	ldrh.w	r2, [r7, #556]	; 0x22c
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d3d8      	bcc.n	8002bf8 <runCommands+0x554>
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 8002c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c4a:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002c4e:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8002c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c54:	2201      	movs	r2, #1
 8002c56:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 8002c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c5c:	3302      	adds	r3, #2
 8002c5e:	f107 0212 	add.w	r2, r7, #18
 8002c62:	8812      	ldrh	r2, [r2, #0]
 8002c64:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8002c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	f107 0210 	add.w	r2, r7, #16
 8002c70:	8812      	ldrh	r2, [r2, #0]
 8002c72:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 8002c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c78:	2200      	movs	r2, #0
 8002c7a:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8002c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c80:	2101      	movs	r1, #1
 8002c82:	4618      	mov	r0, r3
 8002c84:	f009 f82e 	bl	800bce4 <CDC_Transmit_FS>
				return;
 8002c88:	e11f      	b.n	8002eca <runCommands+0x826>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x02)	//A_m27
 8002c8a:	1d3b      	adds	r3, r7, #4
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d15c      	bne.n	8002d50 <runCommands+0x6ac>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 8002c96:	1d3b      	adds	r3, r7, #4
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	3302      	adds	r3, #2
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	f107 0312 	add.w	r3, r7, #18
 8002ca4:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8002ca6:	1d3b      	adds	r3, r7, #4
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	3304      	adds	r3, #4
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	f107 0310 	add.w	r3, r7, #16
 8002cb4:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f8a7 322a 	strh.w	r3, [r7, #554]	; 0x22a
 8002cbc:	e01f      	b.n	8002cfe <runCommands+0x65a>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8002cbe:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	3306      	adds	r3, #6
 8002cc6:	1d3a      	adds	r2, r7, #4
 8002cc8:	6812      	ldr	r2, [r2, #0]
 8002cca:	4413      	add	r3, r2
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	f107 030e 	add.w	r3, r7, #14
 8002cd4:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValA_m27[i + tOffset] = tData;
 8002cd6:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 8002cda:	f107 0212 	add.w	r2, r7, #18
 8002cde:	8812      	ldrh	r2, [r2, #0]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f107 020e 	add.w	r2, r7, #14
 8002ce6:	8811      	ldrh	r1, [r2, #0]
 8002ce8:	4a6a      	ldr	r2, [pc, #424]	; (8002e94 <runCommands+0x7f0>)
 8002cea:	33b4      	adds	r3, #180	; 0xb4
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	4413      	add	r3, r2
 8002cf0:	460a      	mov	r2, r1
 8002cf2:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 8002cf4:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	f8a7 322a 	strh.w	r3, [r7, #554]	; 0x22a
 8002cfe:	f107 0310 	add.w	r3, r7, #16
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	f8b7 222a 	ldrh.w	r2, [r7, #554]	; 0x22a
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d3d8      	bcc.n	8002cbe <runCommands+0x61a>
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 8002d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d10:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002d14:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8002d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 8002d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d22:	3302      	adds	r3, #2
 8002d24:	f107 0212 	add.w	r2, r7, #18
 8002d28:	8812      	ldrh	r2, [r2, #0]
 8002d2a:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8002d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d30:	3304      	adds	r3, #4
 8002d32:	f107 0210 	add.w	r2, r7, #16
 8002d36:	8812      	ldrh	r2, [r2, #0]
 8002d38:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 8002d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d3e:	2200      	movs	r2, #0
 8002d40:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8002d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d46:	2101      	movs	r1, #1
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f008 ffcb 	bl	800bce4 <CDC_Transmit_FS>
				return;
 8002d4e:	e0bc      	b.n	8002eca <runCommands+0x826>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x03)	//B_m27
 8002d50:	1d3b      	adds	r3, r7, #4
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	3301      	adds	r3, #1
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d15d      	bne.n	8002e18 <runCommands+0x774>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 8002d5c:	1d3b      	adds	r3, r7, #4
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3302      	adds	r3, #2
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	f107 0312 	add.w	r3, r7, #18
 8002d6a:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8002d6c:	1d3b      	adds	r3, r7, #4
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	3304      	adds	r3, #4
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	f107 0310 	add.w	r3, r7, #16
 8002d7a:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f8a7 3228 	strh.w	r3, [r7, #552]	; 0x228
 8002d82:	e020      	b.n	8002dc6 <runCommands+0x722>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8002d84:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	3306      	adds	r3, #6
 8002d8c:	1d3a      	adds	r2, r7, #4
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	4413      	add	r3, r2
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	f107 030e 	add.w	r3, r7, #14
 8002d9a:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValB_m27[i + tOffset] = tData;
 8002d9c:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8002da0:	f107 0212 	add.w	r2, r7, #18
 8002da4:	8812      	ldrh	r2, [r2, #0]
 8002da6:	4413      	add	r3, r2
 8002da8:	f107 020e 	add.w	r2, r7, #14
 8002dac:	8811      	ldrh	r1, [r2, #0]
 8002dae:	4a39      	ldr	r2, [pc, #228]	; (8002e94 <runCommands+0x7f0>)
 8002db0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4413      	add	r3, r2
 8002db8:	460a      	mov	r2, r1
 8002dba:	805a      	strh	r2, [r3, #2]
				for (uint16_t i = 0; i < tCount; i++)
 8002dbc:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	f8a7 3228 	strh.w	r3, [r7, #552]	; 0x228
 8002dc6:	f107 0310 	add.w	r3, r7, #16
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d3d7      	bcc.n	8002d84 <runCommands+0x6e0>
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 8002dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd8:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002ddc:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8002dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002de2:	2201      	movs	r2, #1
 8002de4:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 8002de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dea:	3302      	adds	r3, #2
 8002dec:	f107 0212 	add.w	r2, r7, #18
 8002df0:	8812      	ldrh	r2, [r2, #0]
 8002df2:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8002df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df8:	3304      	adds	r3, #4
 8002dfa:	f107 0210 	add.w	r2, r7, #16
 8002dfe:	8812      	ldrh	r2, [r2, #0]
 8002e00:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 8002e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e06:	2200      	movs	r2, #0
 8002e08:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8002e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e0e:	2101      	movs	r1, #1
 8002e10:	4618      	mov	r0, r3
 8002e12:	f008 ff67 	bl	800bce4 <CDC_Transmit_FS>
				return;
 8002e16:	e058      	b.n	8002eca <runCommands+0x826>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
		}
		UserTxBufferFS[0] = cmd;
 8002e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1c:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002e20:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8002e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e26:	2201      	movs	r2, #1
 8002e28:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8002e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e2e:	2102      	movs	r1, #2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f008 ff57 	bl	800bce4 <CDC_Transmit_FS>
		return;
 8002e36:	e048      	b.n	8002eca <runCommands+0x826>
		//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0B)	// TODO: Отправка CRC 1-4 таблицы [0x0B][1-4][CRC(1-4)]	answer:
 8002e38:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002e3c:	2b0b      	cmp	r3, #11
 8002e3e:	d041      	beq.n	8002ec4 <runCommands+0x820>
	{
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0C)	// TODO: можно пока не юзать Прием длины калибровочной таблицы [0x0C][Длина][???]
 8002e40:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002e44:	2b0c      	cmp	r3, #12
 8002e46:	d03f      	beq.n	8002ec8 <runCommands+0x824>
	{
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0D)	// TODO: Запись во флеш калибровочной таблицы [0x0D] data: 1B (0x00 - успешно; 0x01 - ошибка при записи)	answer: 0x0D + 1B status
 8002e48:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002e4c:	2b0d      	cmp	r3, #13
 8002e4e:	d13c      	bne.n	8002eca <runCommands+0x826>
	{
		if (*Len >= 2 && (Buf[1] == 0x02))
 8002e50:	463b      	mov	r3, r7
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d922      	bls.n	8002ea0 <runCommands+0x7fc>
 8002e5a:	1d3b      	adds	r3, r7, #4
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d11c      	bne.n	8002ea0 <runCommands+0x7fc>
		{
			//TODO: Функция записи фо флеш. FIXME: не работает запись фо флеш!
			 changeTableFlag = true;
 8002e66:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <runCommands+0x7f4>)
 8002e68:	2201      	movs	r2, #1
 8002e6a:	701a      	strb	r2, [r3, #0]
			// writeTableInFlash();
			printf("changeTableFlag = true!");
 8002e6c:	480b      	ldr	r0, [pc, #44]	; (8002e9c <runCommands+0x7f8>)
 8002e6e:	f009 fb71 	bl	800c554 <iprintf>
			UserTxBufferFS[0] = cmd;
 8002e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e76:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002e7a:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 8002e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e80:	2200      	movs	r2, #0
 8002e82:	705a      	strb	r2, [r3, #1]
			CDC_Transmit_FS(UserTxBufferFS, 2);
 8002e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e88:	2102      	movs	r1, #2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f008 ff2a 	bl	800bce4 <CDC_Transmit_FS>
			return;
 8002e90:	e01b      	b.n	8002eca <runCommands+0x826>
 8002e92:	bf00      	nop
 8002e94:	200004ac 	.word	0x200004ac
 8002e98:	20000254 	.word	0x20000254
 8002e9c:	0800d9b4 	.word	0x0800d9b4
		}
 		
		//--------------------------------------------------------------------------
		UserTxBufferFS[0] = cmd;
 8002ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ea4:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002ea8:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8002eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eae:	2201      	movs	r2, #1
 8002eb0:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8002eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb6:	2102      	movs	r1, #2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f008 ff13 	bl	800bce4 <CDC_Transmit_FS>
		return;
 8002ebe:	e004      	b.n	8002eca <runCommands+0x826>
		return;
 8002ec0:	bf00      	nop
 8002ec2:	e002      	b.n	8002eca <runCommands+0x826>
		return;
 8002ec4:	bf00      	nop
 8002ec6:	e000      	b.n	8002eca <runCommands+0x826>
		return;
 8002ec8:	bf00      	nop
		//--------------------------------------------------------------------------
	}
//-------------------------------------------------------------------------
	
}
 8002eca:	f507 770d 	add.w	r7, r7, #564	; 0x234
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd90      	pop	{r4, r7, pc}
 8002ed2:	bf00      	nop

08002ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002eda:	f000 ff55 	bl	8003d88 <HAL_Init>

	/* USER CODE BEGIN Init */
//--------------------------------------------------------------------------
#if DWT_INIT
	DWT_Init();
 8002ede:	f7ff f9ab 	bl	8002238 <DWT_Init>
	//--------------------------------------------------------------------------

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002ee2:	f000 fa77 	bl	80033d4 <SystemClock_Config>
//-------------------------------------------------------------------------

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002ee6:	f000 fc21 	bl	800372c <MX_GPIO_Init>
	MX_SPI1_Init();
 8002eea:	f000 fb23 	bl	8003534 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 8002eee:	f008 fe37 	bl	800bb60 <MX_USB_DEVICE_Init>
	MX_ADC1_Init();
 8002ef2:	f000 facd 	bl	8003490 <MX_ADC1_Init>
	MX_TIM3_Init();
 8002ef6:	f000 fb55 	bl	80035a4 <MX_TIM3_Init>
	MX_TIM4_Init();
 8002efa:	f000 fbb5 	bl	8003668 <MX_TIM4_Init>
	MX_CRC_Init();
 8002efe:	f000 fb05 	bl	800350c <MX_CRC_Init>
	/* USER CODE BEGIN 2 */
	//**************************************************************************
#if TEST_UID
	sprintf(buffer, "UID %x-%x-%lx-%lx\n", *idBase0, *idBase1, *idBase2, *idBase3);
 8002f02:	4ba7      	ldr	r3, [pc, #668]	; (80031a0 <main+0x2cc>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4ba6      	ldr	r3, [pc, #664]	; (80031a4 <main+0x2d0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	4ba5      	ldr	r3, [pc, #660]	; (80031a8 <main+0x2d4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4aa4      	ldr	r2, [pc, #656]	; (80031ac <main+0x2d8>)
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	9201      	str	r2, [sp, #4]
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	4603      	mov	r3, r0
 8002f24:	460a      	mov	r2, r1
 8002f26:	49a2      	ldr	r1, [pc, #648]	; (80031b0 <main+0x2dc>)
 8002f28:	48a2      	ldr	r0, [pc, #648]	; (80031b4 <main+0x2e0>)
 8002f2a:	f009 fb2b 	bl	800c584 <siprintf>
	printf((uint8_t *)buffer);
 8002f2e:	48a1      	ldr	r0, [pc, #644]	; (80031b4 <main+0x2e0>)
 8002f30:	f009 fb10 	bl	800c554 <iprintf>
#endif /* TEST_UID */

	//**************************************************************************
#if TEST_TIM_CAPTURE
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8002f34:	2100      	movs	r1, #0
 8002f36:	48a0      	ldr	r0, [pc, #640]	; (80031b8 <main+0x2e4>)
 8002f38:	f004 fce0 	bl	80078fc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8002f3c:	2104      	movs	r1, #4
 8002f3e:	489e      	ldr	r0, [pc, #632]	; (80031b8 <main+0x2e4>)
 8002f40:	f004 fcdc 	bl	80078fc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8002f44:	2100      	movs	r1, #0
 8002f46:	489d      	ldr	r0, [pc, #628]	; (80031bc <main+0x2e8>)
 8002f48:	f004 fcd8 	bl	80078fc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8002f4c:	2104      	movs	r1, #4
 8002f4e:	489b      	ldr	r0, [pc, #620]	; (80031bc <main+0x2e8>)
 8002f50:	f004 fcd4 	bl	80078fc <HAL_TIM_IC_Start_IT>
#endif /* TEST_TIM_CAPTURE */
//--------------------------------------------------------------------------
#if TEST_DAC
	SetAllDAC();
 8002f54:	f7ff f9e2 	bl	800231c <SetAllDAC>
#endif /* TEST_DAC */
	   //**************************************************************************
#if TEST_ADC
	HAL_ADCEx_Calibration_Start(&hadc1);
 8002f58:	4899      	ldr	r0, [pc, #612]	; (80031c0 <main+0x2ec>)
 8002f5a:	f001 fb85 	bl	8004668 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_IT(&hadc1);
 8002f5e:	4898      	ldr	r0, [pc, #608]	; (80031c0 <main+0x2ec>)
 8002f60:	f001 f870 	bl	8004044 <HAL_ADC_Start_IT>

#endif /* TEST_ADC */
//**************************************************************************
#if TEST_FLASH_TABLE
	// Чтение DevNVRAM
	uint32_t l_Address = FLASH_TABLE_START_ADDR;
 8002f64:	4b97      	ldr	r3, [pc, #604]	; (80031c4 <main+0x2f0>)
 8002f66:	617b      	str	r3, [r7, #20]
	uint32_t l_Error = 0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	603b      	str	r3, [r7, #0]
	uint32_t l_Index = 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	613b      	str	r3, [r7, #16]
	while (l_Address < FLASH_TABLE_STOP_ADDR)
 8002f70:	e00b      	b.n	8002f8a <main+0xb6>
	{
		DevNVRAM.data32[l_Index] = *(__IO uint32_t *)l_Address;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	4994      	ldr	r1, [pc, #592]	; (80031c8 <main+0x2f4>)
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		l_Index = l_Index + 1;
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	3301      	adds	r3, #1
 8002f82:	613b      	str	r3, [r7, #16]
		l_Address = l_Address + 4;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	3304      	adds	r3, #4
 8002f88:	617b      	str	r3, [r7, #20]
	while (l_Address < FLASH_TABLE_STOP_ADDR)
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	4a8f      	ldr	r2, [pc, #572]	; (80031cc <main+0x2f8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d9ef      	bls.n	8002f72 <main+0x9e>
	}

//--------------------------------------------------------------------------
	// если после чтения майджик кей не найден, то это первый запуск

	if (DevNVRAM.calibration_table.MagicNum != MAGIC_KEY_DEFINE)
 8002f92:	4b8d      	ldr	r3, [pc, #564]	; (80031c8 <main+0x2f4>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	4a8e      	ldr	r2, [pc, #568]	; (80031d0 <main+0x2fc>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d069      	beq.n	8003070 <main+0x19c>
	{
		// Подготовка
		// Заносим типовые значения
		// TODO: !!!!!Добавить математику расчета калибровочной таблицы!!!!!!!
		memset(DevNVRAM.data32, 0, sizeof(DevNVRAM.data32));
 8002f9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	4889      	ldr	r0, [pc, #548]	; (80031c8 <main+0x2f4>)
 8002fa4:	f009 face 	bl	800c544 <memset>
		// for (uint8_t i = 0; i < MAX_VAL_M27; i++)
		// {
		// 	DevNVRAM.calibration_table.dacValB_m12[i] = i;
		// }

		crete_calibration_table(&DevNVRAM);
 8002fa8:	4887      	ldr	r0, [pc, #540]	; (80031c8 <main+0x2f4>)
 8002faa:	f7fd fed9 	bl	8000d60 <crete_calibration_table>

		DevNVRAM.calibration_table.Hardwire = 0x06;
 8002fae:	4b86      	ldr	r3, [pc, #536]	; (80031c8 <main+0x2f4>)
 8002fb0:	2206      	movs	r2, #6
 8002fb2:	801a      	strh	r2, [r3, #0]
		DevNVRAM.calibration_table.Firmware = 0x05;
 8002fb4:	4b84      	ldr	r3, [pc, #528]	; (80031c8 <main+0x2f4>)
 8002fb6:	2205      	movs	r2, #5
 8002fb8:	805a      	strh	r2, [r3, #2]
		DevNVRAM.calibration_table.SN = 0x1121001; //11 неделя + год + порядковый номер изготовления
 8002fba:	4b83      	ldr	r3, [pc, #524]	; (80031c8 <main+0x2f4>)
 8002fbc:	4a85      	ldr	r2, [pc, #532]	; (80031d4 <main+0x300>)
 8002fbe:	605a      	str	r2, [r3, #4]
		DevNVRAM.calibration_table.MagicNum = MAGIC_KEY_DEFINE;
 8002fc0:	4b81      	ldr	r3, [pc, #516]	; (80031c8 <main+0x2f4>)
 8002fc2:	4a83      	ldr	r2, [pc, #524]	; (80031d0 <main+0x2fc>)
 8002fc4:	609a      	str	r2, [r3, #8]

		DevNVRAM.sector.NWrite = 0;
 8002fc6:	4b80      	ldr	r3, [pc, #512]	; (80031c8 <main+0x2f4>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

		DevNVRAM.sector.CheckSum = 0; //HAL_CRC_Calculate(&hcrc, &DevNVRAM.calibration_table, (sizeof(DevNVRAM.calibration_table)/4));//DONE: нужно отправлять длину кратную 32b! -  по какой то причине в этом проекте не работает CRC!!!
 8002fce:	4b7e      	ldr	r3, [pc, #504]	; (80031c8 <main+0x2f4>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc

		//--------------------------------------------------------------------------
		//если после чтения майджик кей не найден, то это первый запуск записываем дефолтную таблицу
		l_Address = FLASH_TABLE_START_ADDR;
 8002fd6:	4b7b      	ldr	r3, [pc, #492]	; (80031c4 <main+0x2f0>)
 8002fd8:	617b      	str	r3, [r7, #20]
		l_Error = 0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	603b      	str	r3, [r7, #0]
		l_Index = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	613b      	str	r3, [r7, #16]

		while (l_Address < FLASH_TABLE_STOP_ADDR)
 8002fe2:	e010      	b.n	8003006 <main+0x132>
		{
			if (DevNVRAM.data32[l_Index] != *(__IO uint32_t *)l_Address)
 8002fe4:	4a78      	ldr	r2, [pc, #480]	; (80031c8 <main+0x2f4>)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d002      	beq.n	8002ffa <main+0x126>
			{
				l_Error++;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	603b      	str	r3, [r7, #0]
			}
			l_Index = l_Index + 1;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	613b      	str	r3, [r7, #16]
			l_Address = l_Address + 4;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	3304      	adds	r3, #4
 8003004:	617b      	str	r3, [r7, #20]
		while (l_Address < FLASH_TABLE_STOP_ADDR)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	4a70      	ldr	r2, [pc, #448]	; (80031cc <main+0x2f8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d9ea      	bls.n	8002fe4 <main+0x110>
		}

		if (l_Error > 0)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d02d      	beq.n	8003070 <main+0x19c>
		{ // конфигурация изменилась сохраняем
			// Готовим к записи в память
			HAL_FLASH_Unlock();
 8003014:	f001 fd68 	bl	8004ae8 <HAL_FLASH_Unlock>
			// Очищаем страницу памяти
			HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 8003018:	463b      	mov	r3, r7
 800301a:	4619      	mov	r1, r3
 800301c:	486e      	ldr	r0, [pc, #440]	; (80031d8 <main+0x304>)
 800301e:	f001 fe4b 	bl	8004cb8 <HAL_FLASHEx_Erase>
			//Пишем данные в память
			l_Address = FLASH_TABLE_START_ADDR;
 8003022:	4b68      	ldr	r3, [pc, #416]	; (80031c4 <main+0x2f0>)
 8003024:	617b      	str	r3, [r7, #20]
			l_Error = 0x00;
 8003026:	2300      	movs	r3, #0
 8003028:	603b      	str	r3, [r7, #0]
			l_Index = 0x00;
 800302a:	2300      	movs	r3, #0
 800302c:	613b      	str	r3, [r7, #16]

			while (l_Address < FLASH_TABLE_STOP_ADDR)
 800302e:	e019      	b.n	8003064 <main+0x190>
			{
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
									  DevNVRAM.data32[l_Index]) != HAL_OK)
 8003030:	4a65      	ldr	r2, [pc, #404]	; (80031c8 <main+0x2f4>)
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 8003038:	461a      	mov	r2, r3
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	6979      	ldr	r1, [r7, #20]
 8003040:	2002      	movs	r0, #2
 8003042:	f001 fce1 	bl	8004a08 <HAL_FLASH_Program>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d002      	beq.n	8003052 <main+0x17e>
				{
					l_Error++;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	3301      	adds	r3, #1
 8003050:	603b      	str	r3, [r7, #0]
				}

				l_Address = l_Address + 4;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	3304      	adds	r3, #4
 8003056:	617b      	str	r3, [r7, #20]
				l_Index = l_Index + 1;
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	3301      	adds	r3, #1
 800305c:	613b      	str	r3, [r7, #16]
				HAL_Delay(10);
 800305e:	200a      	movs	r0, #10
 8003060:	f000 fef4 	bl	8003e4c <HAL_Delay>
			while (l_Address < FLASH_TABLE_STOP_ADDR)
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	4a59      	ldr	r2, [pc, #356]	; (80031cc <main+0x2f8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d9e1      	bls.n	8003030 <main+0x15c>
			}
			HAL_FLASH_Lock();
 800306c:	f001 fd62 	bl	8004b34 <HAL_FLASH_Lock>
	} //если после чтения майджик кей не найден, то это первый запуск записываем дефолтную таблицу
	// TODO: Надо по запросе какая версия калиброчной табцы высылать значения дефолтной таблице...
	//--------------------------------------------------------------------------
#endif /* TEST_FLASH_TABLE */

	uint32_t timme = 0; // для таймера в 10 сек
 8003070:	2300      	movs	r3, #0
 8003072:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		// Циклически проверяем соотвествует ли информация в памяти массиву настроек?
		if ((HAL_GetTick() - timme) > 10000) // интервал  10сек
 8003074:	f000 fee0 	bl	8003e38 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003082:	4293      	cmp	r3, r2
 8003084:	d96a      	bls.n	800315c <main+0x288>
		{
#if TEST_FLASH_TABLE

			if (changeTableFlag)
 8003086:	4b55      	ldr	r3, [pc, #340]	; (80031dc <main+0x308>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d063      	beq.n	8003156 <main+0x282>
			{
				changeTableFlag = false;
 800308e:	4b53      	ldr	r3, [pc, #332]	; (80031dc <main+0x308>)
 8003090:	2200      	movs	r2, #0
 8003092:	701a      	strb	r2, [r3, #0]
				printf("write");
 8003094:	4852      	ldr	r0, [pc, #328]	; (80031e0 <main+0x30c>)
 8003096:	f009 fa5d 	bl	800c554 <iprintf>
				// Циклически проверяем соотвествует ли информация в памяти массиву настроек?

				l_Address = FLASH_TABLE_START_ADDR;
 800309a:	4b4a      	ldr	r3, [pc, #296]	; (80031c4 <main+0x2f0>)
 800309c:	617b      	str	r3, [r7, #20]
				l_Error = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	603b      	str	r3, [r7, #0]
				l_Index = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
				//Читаем и сравниваем
				while (l_Address < FLASH_TABLE_STOP_ADDR)
 80030a6:	e010      	b.n	80030ca <main+0x1f6>
				{
					if (DevNVRAM.data32[l_Index] != *(__IO uint32_t *)l_Address)
 80030a8:	4a47      	ldr	r2, [pc, #284]	; (80031c8 <main+0x2f4>)
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d002      	beq.n	80030be <main+0x1ea>
					{
						l_Error++;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	3301      	adds	r3, #1
 80030bc:	603b      	str	r3, [r7, #0]
					}
					l_Index = l_Index + 1;
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	3301      	adds	r3, #1
 80030c2:	613b      	str	r3, [r7, #16]
					l_Address = l_Address + 4;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	3304      	adds	r3, #4
 80030c8:	617b      	str	r3, [r7, #20]
				while (l_Address < FLASH_TABLE_STOP_ADDR)
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	4a3f      	ldr	r2, [pc, #252]	; (80031cc <main+0x2f8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d9ea      	bls.n	80030a8 <main+0x1d4>
				}

				if (l_Error > 0)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d038      	beq.n	800314a <main+0x276>
				{ // конфигурация изменилась сохраняем
					// Готовим к записи в память
					HAL_FLASH_Unlock();
 80030d8:	f001 fd06 	bl	8004ae8 <HAL_FLASH_Unlock>
					// Очищаем страницу памяти
					HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 80030dc:	463b      	mov	r3, r7
 80030de:	4619      	mov	r1, r3
 80030e0:	483d      	ldr	r0, [pc, #244]	; (80031d8 <main+0x304>)
 80030e2:	f001 fde9 	bl	8004cb8 <HAL_FLASHEx_Erase>
					//Пишем данные в память
					l_Address = FLASH_TABLE_START_ADDR;
 80030e6:	4b37      	ldr	r3, [pc, #220]	; (80031c4 <main+0x2f0>)
 80030e8:	617b      	str	r3, [r7, #20]
					l_Error = 0x00;
 80030ea:	2300      	movs	r3, #0
 80030ec:	603b      	str	r3, [r7, #0]
					l_Index = 0x00;
 80030ee:	2300      	movs	r3, #0
 80030f0:	613b      	str	r3, [r7, #16]

					DevNVRAM.sector.NWrite = DevNVRAM.sector.NWrite + 1;
 80030f2:	4b35      	ldr	r3, [pc, #212]	; (80031c8 <main+0x2f4>)
 80030f4:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 80030f8:	3301      	adds	r3, #1
 80030fa:	4a33      	ldr	r2, [pc, #204]	; (80031c8 <main+0x2f4>)
 80030fc:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
					DevNVRAM.sector.CheckSum = 0; //HAL_CRC_Calculate(&hcrc, &DevNVRAM.calibration_table, (sizeof(DevNVRAM.calibration_table)/4));
 8003100:	4b31      	ldr	r3, [pc, #196]	; (80031c8 <main+0x2f4>)
 8003102:	2200      	movs	r2, #0
 8003104:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc

					while (l_Address < FLASH_TABLE_STOP_ADDR)
 8003108:	e019      	b.n	800313e <main+0x26a>
					{
						if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
											  DevNVRAM.data32[l_Index]) != HAL_OK)
 800310a:	4a2f      	ldr	r2, [pc, #188]	; (80031c8 <main+0x2f4>)
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
						if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 8003112:	461a      	mov	r2, r3
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	6979      	ldr	r1, [r7, #20]
 800311a:	2002      	movs	r0, #2
 800311c:	f001 fc74 	bl	8004a08 <HAL_FLASH_Program>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <main+0x258>
						{
							l_Error++;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	3301      	adds	r3, #1
 800312a:	603b      	str	r3, [r7, #0]
						}

						l_Address = l_Address + 4;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	3304      	adds	r3, #4
 8003130:	617b      	str	r3, [r7, #20]
						l_Index = l_Index + 1;
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	3301      	adds	r3, #1
 8003136:	613b      	str	r3, [r7, #16]
						HAL_Delay(10);
 8003138:	200a      	movs	r0, #10
 800313a:	f000 fe87 	bl	8003e4c <HAL_Delay>
					while (l_Address < FLASH_TABLE_STOP_ADDR)
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	4a22      	ldr	r2, [pc, #136]	; (80031cc <main+0x2f8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d9e1      	bls.n	800310a <main+0x236>
					}
					HAL_FLASH_Lock();
 8003146:	f001 fcf5 	bl	8004b34 <HAL_FLASH_Lock>
				}
				HAL_Delay(100);
 800314a:	2064      	movs	r0, #100	; 0x64
 800314c:	f000 fe7e 	bl	8003e4c <HAL_Delay>
				//--------------------------------------------------------------------------
				printf("flash done");
 8003150:	4824      	ldr	r0, [pc, #144]	; (80031e4 <main+0x310>)
 8003152:	f009 f9ff 	bl	800c554 <iprintf>
			}
#endif /* TEST_FLASH_TABLE */
			timme = HAL_GetTick();
 8003156:	f000 fe6f 	bl	8003e38 <HAL_GetTick>
 800315a:	60f8      	str	r0, [r7, #12]
		}

//**************************************************************************
#if TEST_READ_BTN //TODO: данная реализация плохо отрабатывает! TODO: Нужно переделать на EXTI+TIM

		uint32_t ms = HAL_GetTick();
 800315c:	f000 fe6c 	bl	8003e38 <HAL_GetTick>
 8003160:	60b8      	str	r0, [r7, #8]
		uint8_t key1_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12); // подставить свой пин //TODO: Проверить работу BACK key!
 8003162:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003166:	4820      	ldr	r0, [pc, #128]	; (80031e8 <main+0x314>)
 8003168:	f001 ffd2 	bl	8005110 <HAL_GPIO_ReadPin>
 800316c:	4603      	mov	r3, r0
 800316e:	71fb      	strb	r3, [r7, #7]

		if (key1_state == 0 && !short_state1 && (ms - time_key1) > 50)
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d140      	bne.n	80031f8 <main+0x324>
 8003176:	4b1d      	ldr	r3, [pc, #116]	; (80031ec <main+0x318>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d13c      	bne.n	80031f8 <main+0x324>
 800317e:	4b1c      	ldr	r3, [pc, #112]	; (80031f0 <main+0x31c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b32      	cmp	r3, #50	; 0x32
 8003188:	d936      	bls.n	80031f8 <main+0x324>
		{
			short_state1 = 1;
 800318a:	4b18      	ldr	r3, [pc, #96]	; (80031ec <main+0x318>)
 800318c:	2201      	movs	r2, #1
 800318e:	701a      	strb	r2, [r3, #0]
			long_state1 = 0;
 8003190:	4b18      	ldr	r3, [pc, #96]	; (80031f4 <main+0x320>)
 8003192:	2200      	movs	r2, #0
 8003194:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 8003196:	4a16      	ldr	r2, [pc, #88]	; (80031f0 <main+0x31c>)
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	e05b      	b.n	8003256 <main+0x382>
 800319e:	bf00      	nop
 80031a0:	20000000 	.word	0x20000000
 80031a4:	20000004 	.word	0x20000004
 80031a8:	20000008 	.word	0x20000008
 80031ac:	2000000c 	.word	0x2000000c
 80031b0:	0800d9cc 	.word	0x0800d9cc
 80031b4:	20000214 	.word	0x20000214
 80031b8:	200008fc 	.word	0x200008fc
 80031bc:	200008ac 	.word	0x200008ac
 80031c0:	20000954 	.word	0x20000954
 80031c4:	0801fc00 	.word	0x0801fc00
 80031c8:	200004ac 	.word	0x200004ac
 80031cc:	0801ffff 	.word	0x0801ffff
 80031d0:	48151623 	.word	0x48151623
 80031d4:	01121001 	.word	0x01121001
 80031d8:	20000944 	.word	0x20000944
 80031dc:	20000254 	.word	0x20000254
 80031e0:	0800d9e0 	.word	0x0800d9e0
 80031e4:	0800d9e8 	.word	0x0800d9e8
 80031e8:	40010c00 	.word	0x40010c00
 80031ec:	2000025a 	.word	0x2000025a
 80031f0:	2000025c 	.word	0x2000025c
 80031f4:	2000025b 	.word	0x2000025b
		}
		else if (key1_state == 0 && !long_state1 && (ms - time_key1) > KEY_LONG_DELAY)
 80031f8:	79fb      	ldrb	r3, [r7, #7]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d111      	bne.n	8003222 <main+0x34e>
 80031fe:	4b65      	ldr	r3, [pc, #404]	; (8003394 <main+0x4c0>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10d      	bne.n	8003222 <main+0x34e>
 8003206:	4b64      	ldr	r3, [pc, #400]	; (8003398 <main+0x4c4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003212:	d906      	bls.n	8003222 <main+0x34e>
		{
			long_state1 = 1;
 8003214:	4b5f      	ldr	r3, [pc, #380]	; (8003394 <main+0x4c0>)
 8003216:	2201      	movs	r2, #1
 8003218:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn1_long_rd = 1;
 800321a:	4b60      	ldr	r3, [pc, #384]	; (800339c <main+0x4c8>)
 800321c:	2201      	movs	r2, #1
 800321e:	701a      	strb	r2, [r3, #0]
 8003220:	e019      	b.n	8003256 <main+0x382>
		}
		else if (key1_state == 1 && short_state1 && (ms - time_key1) > 50)
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d116      	bne.n	8003256 <main+0x382>
 8003228:	4b5d      	ldr	r3, [pc, #372]	; (80033a0 <main+0x4cc>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d012      	beq.n	8003256 <main+0x382>
 8003230:	4b59      	ldr	r3, [pc, #356]	; (8003398 <main+0x4c4>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b32      	cmp	r3, #50	; 0x32
 800323a:	d90c      	bls.n	8003256 <main+0x382>
		{
			short_state1 = 0;
 800323c:	4b58      	ldr	r3, [pc, #352]	; (80033a0 <main+0x4cc>)
 800323e:	2200      	movs	r2, #0
 8003240:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 8003242:	4a55      	ldr	r2, [pc, #340]	; (8003398 <main+0x4c4>)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	6013      	str	r3, [r2, #0]

			if (!long_state1)
 8003248:	4b52      	ldr	r3, [pc, #328]	; (8003394 <main+0x4c0>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d102      	bne.n	8003256 <main+0x382>
			{
				// действие на короткое нажатие
				btn1_short_rd = 1;
 8003250:	4b54      	ldr	r3, [pc, #336]	; (80033a4 <main+0x4d0>)
 8003252:	2201      	movs	r2, #1
 8003254:	701a      	strb	r2, [r3, #0]
			}
		}
		uint8_t key2_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); // подставить свой пин
 8003256:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800325a:	4853      	ldr	r0, [pc, #332]	; (80033a8 <main+0x4d4>)
 800325c:	f001 ff58 	bl	8005110 <HAL_GPIO_ReadPin>
 8003260:	4603      	mov	r3, r0
 8003262:	71bb      	strb	r3, [r7, #6]

		if (key2_state == 0 && !short_state2 && (ms - time_key2) > 50)
 8003264:	79bb      	ldrb	r3, [r7, #6]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d113      	bne.n	8003292 <main+0x3be>
 800326a:	4b50      	ldr	r3, [pc, #320]	; (80033ac <main+0x4d8>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10f      	bne.n	8003292 <main+0x3be>
 8003272:	4b4f      	ldr	r3, [pc, #316]	; (80033b0 <main+0x4dc>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b32      	cmp	r3, #50	; 0x32
 800327c:	d909      	bls.n	8003292 <main+0x3be>
		{
			short_state2 = 1;
 800327e:	4b4b      	ldr	r3, [pc, #300]	; (80033ac <main+0x4d8>)
 8003280:	2201      	movs	r2, #1
 8003282:	701a      	strb	r2, [r3, #0]
			long_state2 = 0;
 8003284:	4b4b      	ldr	r3, [pc, #300]	; (80033b4 <main+0x4e0>)
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 800328a:	4a49      	ldr	r2, [pc, #292]	; (80033b0 <main+0x4dc>)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	e02e      	b.n	80032f0 <main+0x41c>
		}
		else if (key2_state == 0 && !long_state2 && (ms - time_key2) > KEY_LONG_DELAY)
 8003292:	79bb      	ldrb	r3, [r7, #6]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d111      	bne.n	80032bc <main+0x3e8>
 8003298:	4b46      	ldr	r3, [pc, #280]	; (80033b4 <main+0x4e0>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10d      	bne.n	80032bc <main+0x3e8>
 80032a0:	4b43      	ldr	r3, [pc, #268]	; (80033b0 <main+0x4dc>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032ac:	d906      	bls.n	80032bc <main+0x3e8>
		{
			long_state2 = 1;
 80032ae:	4b41      	ldr	r3, [pc, #260]	; (80033b4 <main+0x4e0>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	701a      	strb	r2, [r3, #0]

			// действие на длинное нажатие
			btn2_long_rd = 1;
 80032b4:	4b40      	ldr	r3, [pc, #256]	; (80033b8 <main+0x4e4>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	e019      	b.n	80032f0 <main+0x41c>
		}
		else if (key2_state == 1 && short_state2 && (ms - time_key2) > 50)
 80032bc:	79bb      	ldrb	r3, [r7, #6]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d116      	bne.n	80032f0 <main+0x41c>
 80032c2:	4b3a      	ldr	r3, [pc, #232]	; (80033ac <main+0x4d8>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d012      	beq.n	80032f0 <main+0x41c>
 80032ca:	4b39      	ldr	r3, [pc, #228]	; (80033b0 <main+0x4dc>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b32      	cmp	r3, #50	; 0x32
 80032d4:	d90c      	bls.n	80032f0 <main+0x41c>
		{
			short_state2 = 0;
 80032d6:	4b35      	ldr	r3, [pc, #212]	; (80033ac <main+0x4d8>)
 80032d8:	2200      	movs	r2, #0
 80032da:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 80032dc:	4a34      	ldr	r2, [pc, #208]	; (80033b0 <main+0x4dc>)
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	6013      	str	r3, [r2, #0]

			if (!long_state2)
 80032e2:	4b34      	ldr	r3, [pc, #208]	; (80033b4 <main+0x4e0>)
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d102      	bne.n	80032f0 <main+0x41c>
			{
				// действие на короткое нажатие
				btn2_short_rd = 1;
 80032ea:	4b34      	ldr	r3, [pc, #208]	; (80033bc <main+0x4e8>)
 80032ec:	2201      	movs	r2, #1
 80032ee:	701a      	strb	r2, [r3, #0]
			}
		}

		uint8_t key3_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // подставить свой пин
 80032f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032f4:	482c      	ldr	r0, [pc, #176]	; (80033a8 <main+0x4d4>)
 80032f6:	f001 ff0b 	bl	8005110 <HAL_GPIO_ReadPin>
 80032fa:	4603      	mov	r3, r0
 80032fc:	717b      	strb	r3, [r7, #5]
		if (key3_state == 0 && !short_state3 && (ms - time_key3) > 50)
 80032fe:	797b      	ldrb	r3, [r7, #5]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d113      	bne.n	800332c <main+0x458>
 8003304:	4b2e      	ldr	r3, [pc, #184]	; (80033c0 <main+0x4ec>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10f      	bne.n	800332c <main+0x458>
 800330c:	4b2d      	ldr	r3, [pc, #180]	; (80033c4 <main+0x4f0>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b32      	cmp	r3, #50	; 0x32
 8003316:	d909      	bls.n	800332c <main+0x458>
		{
			short_state3 = 1;
 8003318:	4b29      	ldr	r3, [pc, #164]	; (80033c0 <main+0x4ec>)
 800331a:	2201      	movs	r2, #1
 800331c:	701a      	strb	r2, [r3, #0]
			long_state3 = 0;
 800331e:	4b2a      	ldr	r3, [pc, #168]	; (80033c8 <main+0x4f4>)
 8003320:	2200      	movs	r2, #0
 8003322:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 8003324:	4a27      	ldr	r2, [pc, #156]	; (80033c4 <main+0x4f0>)
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	e032      	b.n	8003392 <main+0x4be>
		}
		else if (key3_state == 0 && !long_state3 && (ms - time_key3) > KEY_LONG_DELAY)
 800332c:	797b      	ldrb	r3, [r7, #5]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d111      	bne.n	8003356 <main+0x482>
 8003332:	4b25      	ldr	r3, [pc, #148]	; (80033c8 <main+0x4f4>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10d      	bne.n	8003356 <main+0x482>
 800333a:	4b22      	ldr	r3, [pc, #136]	; (80033c4 <main+0x4f0>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003346:	d906      	bls.n	8003356 <main+0x482>
		{
			long_state3 = 1;
 8003348:	4b1f      	ldr	r3, [pc, #124]	; (80033c8 <main+0x4f4>)
 800334a:	2201      	movs	r2, #1
 800334c:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn3_long_rd = 1;
 800334e:	4b1f      	ldr	r3, [pc, #124]	; (80033cc <main+0x4f8>)
 8003350:	2201      	movs	r2, #1
 8003352:	701a      	strb	r2, [r3, #0]
 8003354:	e01d      	b.n	8003392 <main+0x4be>
		}
		else if (key3_state == 1 && short_state3 && (ms - time_key3) > 50)
 8003356:	797b      	ldrb	r3, [r7, #5]
 8003358:	2b01      	cmp	r3, #1
 800335a:	f47f ae8b 	bne.w	8003074 <main+0x1a0>
 800335e:	4b18      	ldr	r3, [pc, #96]	; (80033c0 <main+0x4ec>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	f43f ae86 	beq.w	8003074 <main+0x1a0>
 8003368:	4b16      	ldr	r3, [pc, #88]	; (80033c4 <main+0x4f0>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b32      	cmp	r3, #50	; 0x32
 8003372:	f67f ae7f 	bls.w	8003074 <main+0x1a0>
		{
			short_state3 = 0;
 8003376:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <main+0x4ec>)
 8003378:	2200      	movs	r2, #0
 800337a:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 800337c:	4a11      	ldr	r2, [pc, #68]	; (80033c4 <main+0x4f0>)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	6013      	str	r3, [r2, #0]

			if (!long_state3)
 8003382:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <main+0x4f4>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	f47f ae74 	bne.w	8003074 <main+0x1a0>
			{
				// действие на короткое нажатие
				btn3_short_rd = 1;
 800338c:	4b10      	ldr	r3, [pc, #64]	; (80033d0 <main+0x4fc>)
 800338e:	2201      	movs	r2, #1
 8003390:	701a      	strb	r2, [r3, #0]
	{
 8003392:	e66f      	b.n	8003074 <main+0x1a0>
 8003394:	2000025b 	.word	0x2000025b
 8003398:	2000025c 	.word	0x2000025c
 800339c:	20000260 	.word	0x20000260
 80033a0:	2000025a 	.word	0x2000025a
 80033a4:	20000261 	.word	0x20000261
 80033a8:	40010c00 	.word	0x40010c00
 80033ac:	20000262 	.word	0x20000262
 80033b0:	20000264 	.word	0x20000264
 80033b4:	20000263 	.word	0x20000263
 80033b8:	20000268 	.word	0x20000268
 80033bc:	20000269 	.word	0x20000269
 80033c0:	2000026a 	.word	0x2000026a
 80033c4:	2000026c 	.word	0x2000026c
 80033c8:	2000026b 	.word	0x2000026b
 80033cc:	20000270 	.word	0x20000270
 80033d0:	20000271 	.word	0x20000271

080033d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b094      	sub	sp, #80	; 0x50
 80033d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033de:	2228      	movs	r2, #40	; 0x28
 80033e0:	2100      	movs	r1, #0
 80033e2:	4618      	mov	r0, r3
 80033e4:	f009 f8ae 	bl	800c544 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033e8:	f107 0314 	add.w	r3, r7, #20
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	605a      	str	r2, [r3, #4]
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	60da      	str	r2, [r3, #12]
 80033f6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033f8:	1d3b      	adds	r3, r7, #4
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	605a      	str	r2, [r3, #4]
 8003400:	609a      	str	r2, [r3, #8]
 8003402:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003404:	2301      	movs	r3, #1
 8003406:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003408:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800340c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800340e:	2300      	movs	r3, #0
 8003410:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003412:	2301      	movs	r3, #1
 8003414:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003416:	2302      	movs	r3, #2
 8003418:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800341a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800341e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003420:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003424:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003426:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800342a:	4618      	mov	r0, r3
 800342c:	f003 fa30 	bl	8006890 <HAL_RCC_OscConfig>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <SystemClock_Config+0x66>
	{
		Error_Handler();
 8003436:	f000 fa09 	bl	800384c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
  */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800343a:	230f      	movs	r3, #15
 800343c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800343e:	2302      	movs	r3, #2
 8003440:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003442:	2300      	movs	r3, #0
 8003444:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800344a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800344c:	2300      	movs	r3, #0
 800344e:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003450:	f107 0314 	add.w	r3, r7, #20
 8003454:	2102      	movs	r1, #2
 8003456:	4618      	mov	r0, r3
 8003458:	f003 fc9a 	bl	8006d90 <HAL_RCC_ClockConfig>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <SystemClock_Config+0x92>
	{
		Error_Handler();
 8003462:	f000 f9f3 	bl	800384c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_USB;
 8003466:	2312      	movs	r3, #18
 8003468:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800346a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800346e:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8003470:	2300      	movs	r3, #0
 8003472:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003474:	1d3b      	adds	r3, r7, #4
 8003476:	4618      	mov	r0, r3
 8003478:	f003 fe10 	bl	800709c <HAL_RCCEx_PeriphCLKConfig>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <SystemClock_Config+0xb2>
	{
		Error_Handler();
 8003482:	f000 f9e3 	bl	800384c <Error_Handler>
	}
}
 8003486:	bf00      	nop
 8003488:	3750      	adds	r7, #80	; 0x50
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
	...

08003490 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8003496:	1d3b      	adds	r3, r7, #4
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	605a      	str	r2, [r3, #4]
 800349e:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
  */
	hadc1.Instance = ADC1;
 80034a0:	4b18      	ldr	r3, [pc, #96]	; (8003504 <MX_ADC1_Init+0x74>)
 80034a2:	4a19      	ldr	r2, [pc, #100]	; (8003508 <MX_ADC1_Init+0x78>)
 80034a4:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80034a6:	4b17      	ldr	r3, [pc, #92]	; (8003504 <MX_ADC1_Init+0x74>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80034ac:	4b15      	ldr	r3, [pc, #84]	; (8003504 <MX_ADC1_Init+0x74>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80034b2:	4b14      	ldr	r3, [pc, #80]	; (8003504 <MX_ADC1_Init+0x74>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80034b8:	4b12      	ldr	r3, [pc, #72]	; (8003504 <MX_ADC1_Init+0x74>)
 80034ba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80034be:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80034c0:	4b10      	ldr	r3, [pc, #64]	; (8003504 <MX_ADC1_Init+0x74>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 80034c6:	4b0f      	ldr	r3, [pc, #60]	; (8003504 <MX_ADC1_Init+0x74>)
 80034c8:	2201      	movs	r2, #1
 80034ca:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80034cc:	480d      	ldr	r0, [pc, #52]	; (8003504 <MX_ADC1_Init+0x74>)
 80034ce:	f000 fce1 	bl	8003e94 <HAL_ADC_Init>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <MX_ADC1_Init+0x4c>
	{
		Error_Handler();
 80034d8:	f000 f9b8 	bl	800384c <Error_Handler>
	}
	/** Configure Regular Channel
  */
	sConfig.Channel = ADC_CHANNEL_3;
 80034dc:	2303      	movs	r3, #3
 80034de:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80034e0:	2301      	movs	r3, #1
 80034e2:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80034e4:	2302      	movs	r3, #2
 80034e6:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034e8:	1d3b      	adds	r3, r7, #4
 80034ea:	4619      	mov	r1, r3
 80034ec:	4805      	ldr	r0, [pc, #20]	; (8003504 <MX_ADC1_Init+0x74>)
 80034ee:	f000 ff37 	bl	8004360 <HAL_ADC_ConfigChannel>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <MX_ADC1_Init+0x6c>
	{
		Error_Handler();
 80034f8:	f000 f9a8 	bl	800384c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */
}
 80034fc:	bf00      	nop
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	20000954 	.word	0x20000954
 8003508:	40012400 	.word	0x40012400

0800350c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8003510:	4b06      	ldr	r3, [pc, #24]	; (800352c <MX_CRC_Init+0x20>)
 8003512:	4a07      	ldr	r2, [pc, #28]	; (8003530 <MX_CRC_Init+0x24>)
 8003514:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003516:	4805      	ldr	r0, [pc, #20]	; (800352c <MX_CRC_Init+0x20>)
 8003518:	f001 fa59 	bl	80049ce <HAL_CRC_Init>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <MX_CRC_Init+0x1a>
	{
		Error_Handler();
 8003522:	f000 f993 	bl	800384c <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	200008f4 	.word	0x200008f4
 8003530:	40023000 	.word	0x40023000

08003534 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8003538:	4b18      	ldr	r3, [pc, #96]	; (800359c <MX_SPI1_Init+0x68>)
 800353a:	4a19      	ldr	r2, [pc, #100]	; (80035a0 <MX_SPI1_Init+0x6c>)
 800353c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800353e:	4b17      	ldr	r3, [pc, #92]	; (800359c <MX_SPI1_Init+0x68>)
 8003540:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003544:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003546:	4b15      	ldr	r3, [pc, #84]	; (800359c <MX_SPI1_Init+0x68>)
 8003548:	2200      	movs	r2, #0
 800354a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800354c:	4b13      	ldr	r3, [pc, #76]	; (800359c <MX_SPI1_Init+0x68>)
 800354e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003552:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003554:	4b11      	ldr	r3, [pc, #68]	; (800359c <MX_SPI1_Init+0x68>)
 8003556:	2200      	movs	r2, #0
 8003558:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800355a:	4b10      	ldr	r3, [pc, #64]	; (800359c <MX_SPI1_Init+0x68>)
 800355c:	2200      	movs	r2, #0
 800355e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8003560:	4b0e      	ldr	r3, [pc, #56]	; (800359c <MX_SPI1_Init+0x68>)
 8003562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003566:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <MX_SPI1_Init+0x68>)
 800356a:	2208      	movs	r2, #8
 800356c:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800356e:	4b0b      	ldr	r3, [pc, #44]	; (800359c <MX_SPI1_Init+0x68>)
 8003570:	2200      	movs	r2, #0
 8003572:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003574:	4b09      	ldr	r3, [pc, #36]	; (800359c <MX_SPI1_Init+0x68>)
 8003576:	2200      	movs	r2, #0
 8003578:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800357a:	4b08      	ldr	r3, [pc, #32]	; (800359c <MX_SPI1_Init+0x68>)
 800357c:	2200      	movs	r2, #0
 800357e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8003580:	4b06      	ldr	r3, [pc, #24]	; (800359c <MX_SPI1_Init+0x68>)
 8003582:	220a      	movs	r2, #10
 8003584:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003586:	4805      	ldr	r0, [pc, #20]	; (800359c <MX_SPI1_Init+0x68>)
 8003588:	f003 ff02 	bl	8007390 <HAL_SPI_Init>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <MX_SPI1_Init+0x62>
	{
		Error_Handler();
 8003592:	f000 f95b 	bl	800384c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */
}
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20000984 	.word	0x20000984
 80035a0:	40013000 	.word	0x40013000

080035a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035aa:	f107 0310 	add.w	r3, r7, #16
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 80035b4:	463b      	mov	r3, r7
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	605a      	str	r2, [r3, #4]
 80035bc:	609a      	str	r2, [r3, #8]
 80035be:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80035c0:	4b27      	ldr	r3, [pc, #156]	; (8003660 <MX_TIM3_Init+0xbc>)
 80035c2:	4a28      	ldr	r2, [pc, #160]	; (8003664 <MX_TIM3_Init+0xc0>)
 80035c4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72 - 1;
 80035c6:	4b26      	ldr	r3, [pc, #152]	; (8003660 <MX_TIM3_Init+0xbc>)
 80035c8:	2247      	movs	r2, #71	; 0x47
 80035ca:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035cc:	4b24      	ldr	r3, [pc, #144]	; (8003660 <MX_TIM3_Init+0xbc>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65000 - 1;
 80035d2:	4b23      	ldr	r3, [pc, #140]	; (8003660 <MX_TIM3_Init+0xbc>)
 80035d4:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 80035d8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035da:	4b21      	ldr	r3, [pc, #132]	; (8003660 <MX_TIM3_Init+0xbc>)
 80035dc:	2200      	movs	r2, #0
 80035de:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035e0:	4b1f      	ldr	r3, [pc, #124]	; (8003660 <MX_TIM3_Init+0xbc>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80035e6:	481e      	ldr	r0, [pc, #120]	; (8003660 <MX_TIM3_Init+0xbc>)
 80035e8:	f004 f938 	bl	800785c <HAL_TIM_IC_Init>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <MX_TIM3_Init+0x52>
	{
		Error_Handler();
 80035f2:	f000 f92b 	bl	800384c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035f6:	2300      	movs	r3, #0
 80035f8:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035fa:	2300      	movs	r3, #0
 80035fc:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035fe:	f107 0310 	add.w	r3, r7, #16
 8003602:	4619      	mov	r1, r3
 8003604:	4816      	ldr	r0, [pc, #88]	; (8003660 <MX_TIM3_Init+0xbc>)
 8003606:	f004 fe17 	bl	8008238 <HAL_TIMEx_MasterConfigSynchronization>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <MX_TIM3_Init+0x70>
	{
		Error_Handler();
 8003610:	f000 f91c 	bl	800384c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003614:	2300      	movs	r3, #0
 8003616:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003618:	2301      	movs	r3, #1
 800361a:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800361c:	2300      	movs	r3, #0
 800361e:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003624:	463b      	mov	r3, r7
 8003626:	2200      	movs	r2, #0
 8003628:	4619      	mov	r1, r3
 800362a:	480d      	ldr	r0, [pc, #52]	; (8003660 <MX_TIM3_Init+0xbc>)
 800362c:	f004 fb74 	bl	8007d18 <HAL_TIM_IC_ConfigChannel>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <MX_TIM3_Init+0x96>
	{
		Error_Handler();
 8003636:	f000 f909 	bl	800384c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800363a:	2302      	movs	r3, #2
 800363c:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800363e:	2302      	movs	r3, #2
 8003640:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003642:	463b      	mov	r3, r7
 8003644:	2204      	movs	r2, #4
 8003646:	4619      	mov	r1, r3
 8003648:	4805      	ldr	r0, [pc, #20]	; (8003660 <MX_TIM3_Init+0xbc>)
 800364a:	f004 fb65 	bl	8007d18 <HAL_TIM_IC_ConfigChannel>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <MX_TIM3_Init+0xb4>
	{
		Error_Handler();
 8003654:	f000 f8fa 	bl	800384c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
}
 8003658:	bf00      	nop
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	200008fc 	.word	0x200008fc
 8003664:	40000400 	.word	0x40000400

08003668 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800366e:	f107 0310 	add.w	r3, r7, #16
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8003678:	463b      	mov	r3, r7
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	605a      	str	r2, [r3, #4]
 8003680:	609a      	str	r2, [r3, #8]
 8003682:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8003684:	4b27      	ldr	r3, [pc, #156]	; (8003724 <MX_TIM4_Init+0xbc>)
 8003686:	4a28      	ldr	r2, [pc, #160]	; (8003728 <MX_TIM4_Init+0xc0>)
 8003688:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 72 - 1;
 800368a:	4b26      	ldr	r3, [pc, #152]	; (8003724 <MX_TIM4_Init+0xbc>)
 800368c:	2247      	movs	r2, #71	; 0x47
 800368e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003690:	4b24      	ldr	r3, [pc, #144]	; (8003724 <MX_TIM4_Init+0xbc>)
 8003692:	2200      	movs	r2, #0
 8003694:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65000 - 1;
 8003696:	4b23      	ldr	r3, [pc, #140]	; (8003724 <MX_TIM4_Init+0xbc>)
 8003698:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 800369c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800369e:	4b21      	ldr	r3, [pc, #132]	; (8003724 <MX_TIM4_Init+0xbc>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036a4:	4b1f      	ldr	r3, [pc, #124]	; (8003724 <MX_TIM4_Init+0xbc>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80036aa:	481e      	ldr	r0, [pc, #120]	; (8003724 <MX_TIM4_Init+0xbc>)
 80036ac:	f004 f8d6 	bl	800785c <HAL_TIM_IC_Init>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <MX_TIM4_Init+0x52>
	{
		Error_Handler();
 80036b6:	f000 f8c9 	bl	800384c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036ba:	2300      	movs	r3, #0
 80036bc:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80036c2:	f107 0310 	add.w	r3, r7, #16
 80036c6:	4619      	mov	r1, r3
 80036c8:	4816      	ldr	r0, [pc, #88]	; (8003724 <MX_TIM4_Init+0xbc>)
 80036ca:	f004 fdb5 	bl	8008238 <HAL_TIMEx_MasterConfigSynchronization>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <MX_TIM4_Init+0x70>
	{
		Error_Handler();
 80036d4:	f000 f8ba 	bl	800384c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80036d8:	2300      	movs	r3, #0
 80036da:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80036dc:	2301      	movs	r3, #1
 80036de:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80036e0:	2300      	movs	r3, #0
 80036e2:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80036e8:	463b      	mov	r3, r7
 80036ea:	2200      	movs	r2, #0
 80036ec:	4619      	mov	r1, r3
 80036ee:	480d      	ldr	r0, [pc, #52]	; (8003724 <MX_TIM4_Init+0xbc>)
 80036f0:	f004 fb12 	bl	8007d18 <HAL_TIM_IC_ConfigChannel>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <MX_TIM4_Init+0x96>
	{
		Error_Handler();
 80036fa:	f000 f8a7 	bl	800384c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80036fe:	2302      	movs	r3, #2
 8003700:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003702:	2302      	movs	r3, #2
 8003704:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003706:	463b      	mov	r3, r7
 8003708:	2204      	movs	r2, #4
 800370a:	4619      	mov	r1, r3
 800370c:	4805      	ldr	r0, [pc, #20]	; (8003724 <MX_TIM4_Init+0xbc>)
 800370e:	f004 fb03 	bl	8007d18 <HAL_TIM_IC_ConfigChannel>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <MX_TIM4_Init+0xb4>
	{
		Error_Handler();
 8003718:	f000 f898 	bl	800384c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
}
 800371c:	bf00      	nop
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	200008ac 	.word	0x200008ac
 8003728:	40000800 	.word	0x40000800

0800372c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003732:	f107 0310 	add.w	r3, r7, #16
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	605a      	str	r2, [r3, #4]
 800373c:	609a      	str	r2, [r3, #8]
 800373e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003740:	4b3e      	ldr	r3, [pc, #248]	; (800383c <MX_GPIO_Init+0x110>)
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	4a3d      	ldr	r2, [pc, #244]	; (800383c <MX_GPIO_Init+0x110>)
 8003746:	f043 0310 	orr.w	r3, r3, #16
 800374a:	6193      	str	r3, [r2, #24]
 800374c:	4b3b      	ldr	r3, [pc, #236]	; (800383c <MX_GPIO_Init+0x110>)
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	f003 0310 	and.w	r3, r3, #16
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003758:	4b38      	ldr	r3, [pc, #224]	; (800383c <MX_GPIO_Init+0x110>)
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	4a37      	ldr	r2, [pc, #220]	; (800383c <MX_GPIO_Init+0x110>)
 800375e:	f043 0320 	orr.w	r3, r3, #32
 8003762:	6193      	str	r3, [r2, #24]
 8003764:	4b35      	ldr	r3, [pc, #212]	; (800383c <MX_GPIO_Init+0x110>)
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003770:	4b32      	ldr	r3, [pc, #200]	; (800383c <MX_GPIO_Init+0x110>)
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	4a31      	ldr	r2, [pc, #196]	; (800383c <MX_GPIO_Init+0x110>)
 8003776:	f043 0304 	orr.w	r3, r3, #4
 800377a:	6193      	str	r3, [r2, #24]
 800377c:	4b2f      	ldr	r3, [pc, #188]	; (800383c <MX_GPIO_Init+0x110>)
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	607b      	str	r3, [r7, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003788:	4b2c      	ldr	r3, [pc, #176]	; (800383c <MX_GPIO_Init+0x110>)
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	4a2b      	ldr	r2, [pc, #172]	; (800383c <MX_GPIO_Init+0x110>)
 800378e:	f043 0308 	orr.w	r3, r3, #8
 8003792:	6193      	str	r3, [r2, #24]
 8003794:	4b29      	ldr	r3, [pc, #164]	; (800383c <MX_GPIO_Init+0x110>)
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	603b      	str	r3, [r7, #0]
 800379e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80037a0:	2200      	movs	r2, #0
 80037a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037a6:	4826      	ldr	r0, [pc, #152]	; (8003840 <MX_GPIO_Init+0x114>)
 80037a8:	f001 fcc9 	bl	800513e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, AD5312_LDAC_Pin | AD5312_SYNC_Pin | GPIO_PIN_10, GPIO_PIN_RESET);
 80037ac:	2200      	movs	r2, #0
 80037ae:	f240 4112 	movw	r1, #1042	; 0x412
 80037b2:	4824      	ldr	r0, [pc, #144]	; (8003844 <MX_GPIO_Init+0x118>)
 80037b4:	f001 fcc3 	bl	800513e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 80037b8:	2201      	movs	r2, #1
 80037ba:	2104      	movs	r1, #4
 80037bc:	4821      	ldr	r0, [pc, #132]	; (8003844 <MX_GPIO_Init+0x118>)
 80037be:	f001 fcbe 	bl	800513e <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80037c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037c6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037c8:	2301      	movs	r3, #1
 80037ca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d0:	2302      	movs	r3, #2
 80037d2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037d4:	f107 0310 	add.w	r3, r7, #16
 80037d8:	4619      	mov	r1, r3
 80037da:	4819      	ldr	r0, [pc, #100]	; (8003840 <MX_GPIO_Init+0x114>)
 80037dc:	f001 fb14 	bl	8004e08 <HAL_GPIO_Init>

	/*Configure GPIO pins : AD5312_LDAC_Pin Relay_Pin AD5312_SYNC_Pin PA10 */
	GPIO_InitStruct.Pin = AD5312_LDAC_Pin | Relay_Pin | AD5312_SYNC_Pin | GPIO_PIN_10;
 80037e0:	f240 4316 	movw	r3, #1046	; 0x416
 80037e4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037e6:	2301      	movs	r3, #1
 80037e8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ea:	2300      	movs	r3, #0
 80037ec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ee:	2302      	movs	r3, #2
 80037f0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037f2:	f107 0310 	add.w	r3, r7, #16
 80037f6:	4619      	mov	r1, r3
 80037f8:	4812      	ldr	r0, [pc, #72]	; (8003844 <MX_GPIO_Init+0x118>)
 80037fa:	f001 fb05 	bl	8004e08 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80037fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003802:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003808:	2301      	movs	r3, #1
 800380a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800380c:	f107 0310 	add.w	r3, r7, #16
 8003810:	4619      	mov	r1, r3
 8003812:	480d      	ldr	r0, [pc, #52]	; (8003848 <MX_GPIO_Init+0x11c>)
 8003814:	f001 faf8 	bl	8004e08 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB13 PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 8003818:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800381c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800381e:	2300      	movs	r3, #0
 8003820:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003822:	2300      	movs	r3, #0
 8003824:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003826:	f107 0310 	add.w	r3, r7, #16
 800382a:	4619      	mov	r1, r3
 800382c:	4806      	ldr	r0, [pc, #24]	; (8003848 <MX_GPIO_Init+0x11c>)
 800382e:	f001 faeb 	bl	8004e08 <HAL_GPIO_Init>
}
 8003832:	bf00      	nop
 8003834:	3720      	adds	r7, #32
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40021000 	.word	0x40021000
 8003840:	40011000 	.word	0x40011000
 8003844:	40010800 	.word	0x40010800
 8003848:	40010c00 	.word	0x40010c00

0800384c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8003850:	bf00      	nop
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr

08003858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800385e:	4b15      	ldr	r3, [pc, #84]	; (80038b4 <HAL_MspInit+0x5c>)
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	4a14      	ldr	r2, [pc, #80]	; (80038b4 <HAL_MspInit+0x5c>)
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	6193      	str	r3, [r2, #24]
 800386a:	4b12      	ldr	r3, [pc, #72]	; (80038b4 <HAL_MspInit+0x5c>)
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	60bb      	str	r3, [r7, #8]
 8003874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003876:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <HAL_MspInit+0x5c>)
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	4a0e      	ldr	r2, [pc, #56]	; (80038b4 <HAL_MspInit+0x5c>)
 800387c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003880:	61d3      	str	r3, [r2, #28]
 8003882:	4b0c      	ldr	r3, [pc, #48]	; (80038b4 <HAL_MspInit+0x5c>)
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388a:	607b      	str	r3, [r7, #4]
 800388c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800388e:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <HAL_MspInit+0x60>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	4a04      	ldr	r2, [pc, #16]	; (80038b8 <HAL_MspInit+0x60>)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038aa:	bf00      	nop
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr
 80038b4:	40021000 	.word	0x40021000
 80038b8:	40010000 	.word	0x40010000

080038bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c4:	f107 0310 	add.w	r3, r7, #16
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	605a      	str	r2, [r3, #4]
 80038ce:	609a      	str	r2, [r3, #8]
 80038d0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a18      	ldr	r2, [pc, #96]	; (8003938 <HAL_ADC_MspInit+0x7c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d129      	bne.n	8003930 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80038dc:	4b17      	ldr	r3, [pc, #92]	; (800393c <HAL_ADC_MspInit+0x80>)
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	4a16      	ldr	r2, [pc, #88]	; (800393c <HAL_ADC_MspInit+0x80>)
 80038e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038e6:	6193      	str	r3, [r2, #24]
 80038e8:	4b14      	ldr	r3, [pc, #80]	; (800393c <HAL_ADC_MspInit+0x80>)
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038f4:	4b11      	ldr	r3, [pc, #68]	; (800393c <HAL_ADC_MspInit+0x80>)
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	4a10      	ldr	r2, [pc, #64]	; (800393c <HAL_ADC_MspInit+0x80>)
 80038fa:	f043 0304 	orr.w	r3, r3, #4
 80038fe:	6193      	str	r3, [r2, #24]
 8003900:	4b0e      	ldr	r3, [pc, #56]	; (800393c <HAL_ADC_MspInit+0x80>)
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800390c:	2308      	movs	r3, #8
 800390e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003910:	2303      	movs	r3, #3
 8003912:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003914:	f107 0310 	add.w	r3, r7, #16
 8003918:	4619      	mov	r1, r3
 800391a:	4809      	ldr	r0, [pc, #36]	; (8003940 <HAL_ADC_MspInit+0x84>)
 800391c:	f001 fa74 	bl	8004e08 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003920:	2200      	movs	r2, #0
 8003922:	2100      	movs	r1, #0
 8003924:	2012      	movs	r0, #18
 8003926:	f001 f81c 	bl	8004962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800392a:	2012      	movs	r0, #18
 800392c:	f001 f835 	bl	800499a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003930:	bf00      	nop
 8003932:	3720      	adds	r7, #32
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40012400 	.word	0x40012400
 800393c:	40021000 	.word	0x40021000
 8003940:	40010800 	.word	0x40010800

08003944 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a09      	ldr	r2, [pc, #36]	; (8003978 <HAL_CRC_MspInit+0x34>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d10b      	bne.n	800396e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003956:	4b09      	ldr	r3, [pc, #36]	; (800397c <HAL_CRC_MspInit+0x38>)
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	4a08      	ldr	r2, [pc, #32]	; (800397c <HAL_CRC_MspInit+0x38>)
 800395c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003960:	6153      	str	r3, [r2, #20]
 8003962:	4b06      	ldr	r3, [pc, #24]	; (800397c <HAL_CRC_MspInit+0x38>)
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800396e:	bf00      	nop
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr
 8003978:	40023000 	.word	0x40023000
 800397c:	40021000 	.word	0x40021000

08003980 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003988:	f107 0310 	add.w	r3, r7, #16
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	605a      	str	r2, [r3, #4]
 8003992:	609a      	str	r2, [r3, #8]
 8003994:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a15      	ldr	r2, [pc, #84]	; (80039f0 <HAL_SPI_MspInit+0x70>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d123      	bne.n	80039e8 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039a0:	4b14      	ldr	r3, [pc, #80]	; (80039f4 <HAL_SPI_MspInit+0x74>)
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	4a13      	ldr	r2, [pc, #76]	; (80039f4 <HAL_SPI_MspInit+0x74>)
 80039a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039aa:	6193      	str	r3, [r2, #24]
 80039ac:	4b11      	ldr	r3, [pc, #68]	; (80039f4 <HAL_SPI_MspInit+0x74>)
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b8:	4b0e      	ldr	r3, [pc, #56]	; (80039f4 <HAL_SPI_MspInit+0x74>)
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	4a0d      	ldr	r2, [pc, #52]	; (80039f4 <HAL_SPI_MspInit+0x74>)
 80039be:	f043 0304 	orr.w	r3, r3, #4
 80039c2:	6193      	str	r3, [r2, #24]
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <HAL_SPI_MspInit+0x74>)
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AD5312_SCLK_Pin|AD5312_DIN_Pin;
 80039d0:	23a0      	movs	r3, #160	; 0xa0
 80039d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d4:	2302      	movs	r3, #2
 80039d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039d8:	2303      	movs	r3, #3
 80039da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039dc:	f107 0310 	add.w	r3, r7, #16
 80039e0:	4619      	mov	r1, r3
 80039e2:	4805      	ldr	r0, [pc, #20]	; (80039f8 <HAL_SPI_MspInit+0x78>)
 80039e4:	f001 fa10 	bl	8004e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80039e8:	bf00      	nop
 80039ea:	3720      	adds	r7, #32
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40013000 	.word	0x40013000
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40010800 	.word	0x40010800

080039fc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08c      	sub	sp, #48	; 0x30
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a04:	f107 031c 	add.w	r3, r7, #28
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	605a      	str	r2, [r3, #4]
 8003a0e:	609a      	str	r2, [r3, #8]
 8003a10:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a3b      	ldr	r2, [pc, #236]	; (8003b04 <HAL_TIM_IC_MspInit+0x108>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d13e      	bne.n	8003a9a <HAL_TIM_IC_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a1c:	4b3a      	ldr	r3, [pc, #232]	; (8003b08 <HAL_TIM_IC_MspInit+0x10c>)
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	4a39      	ldr	r2, [pc, #228]	; (8003b08 <HAL_TIM_IC_MspInit+0x10c>)
 8003a22:	f043 0302 	orr.w	r3, r3, #2
 8003a26:	61d3      	str	r3, [r2, #28]
 8003a28:	4b37      	ldr	r3, [pc, #220]	; (8003b08 <HAL_TIM_IC_MspInit+0x10c>)
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	61bb      	str	r3, [r7, #24]
 8003a32:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a34:	4b34      	ldr	r3, [pc, #208]	; (8003b08 <HAL_TIM_IC_MspInit+0x10c>)
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	4a33      	ldr	r2, [pc, #204]	; (8003b08 <HAL_TIM_IC_MspInit+0x10c>)
 8003a3a:	f043 0308 	orr.w	r3, r3, #8
 8003a3e:	6193      	str	r3, [r2, #24]
 8003a40:	4b31      	ldr	r3, [pc, #196]	; (8003b08 <HAL_TIM_IC_MspInit+0x10c>)
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	617b      	str	r3, [r7, #20]
 8003a4a:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003a4c:	2310      	movs	r3, #16
 8003a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a50:	2300      	movs	r3, #0
 8003a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a58:	f107 031c 	add.w	r3, r7, #28
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	482b      	ldr	r0, [pc, #172]	; (8003b0c <HAL_TIM_IC_MspInit+0x110>)
 8003a60:	f001 f9d2 	bl	8004e08 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8003a64:	4b2a      	ldr	r3, [pc, #168]	; (8003b10 <HAL_TIM_IC_MspInit+0x114>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a74:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a82:	4a23      	ldr	r2, [pc, #140]	; (8003b10 <HAL_TIM_IC_MspInit+0x114>)
 8003a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a86:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	201d      	movs	r0, #29
 8003a8e:	f000 ff68 	bl	8004962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003a92:	201d      	movs	r0, #29
 8003a94:	f000 ff81 	bl	800499a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003a98:	e030      	b.n	8003afc <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM4)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1d      	ldr	r2, [pc, #116]	; (8003b14 <HAL_TIM_IC_MspInit+0x118>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d12b      	bne.n	8003afc <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003aa4:	4b18      	ldr	r3, [pc, #96]	; (8003b08 <HAL_TIM_IC_MspInit+0x10c>)
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	4a17      	ldr	r2, [pc, #92]	; (8003b08 <HAL_TIM_IC_MspInit+0x10c>)
 8003aaa:	f043 0304 	orr.w	r3, r3, #4
 8003aae:	61d3      	str	r3, [r2, #28]
 8003ab0:	4b15      	ldr	r3, [pc, #84]	; (8003b08 <HAL_TIM_IC_MspInit+0x10c>)
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003abc:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <HAL_TIM_IC_MspInit+0x10c>)
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	4a11      	ldr	r2, [pc, #68]	; (8003b08 <HAL_TIM_IC_MspInit+0x10c>)
 8003ac2:	f043 0308 	orr.w	r3, r3, #8
 8003ac6:	6193      	str	r3, [r2, #24]
 8003ac8:	4b0f      	ldr	r3, [pc, #60]	; (8003b08 <HAL_TIM_IC_MspInit+0x10c>)
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	f003 0308 	and.w	r3, r3, #8
 8003ad0:	60fb      	str	r3, [r7, #12]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003ad4:	2340      	movs	r3, #64	; 0x40
 8003ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003adc:	2300      	movs	r3, #0
 8003ade:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ae0:	f107 031c 	add.w	r3, r7, #28
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4809      	ldr	r0, [pc, #36]	; (8003b0c <HAL_TIM_IC_MspInit+0x110>)
 8003ae8:	f001 f98e 	bl	8004e08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003aec:	2200      	movs	r2, #0
 8003aee:	2100      	movs	r1, #0
 8003af0:	201e      	movs	r0, #30
 8003af2:	f000 ff36 	bl	8004962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003af6:	201e      	movs	r0, #30
 8003af8:	f000 ff4f 	bl	800499a <HAL_NVIC_EnableIRQ>
}
 8003afc:	bf00      	nop
 8003afe:	3730      	adds	r7, #48	; 0x30
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40000400 	.word	0x40000400
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	40010c00 	.word	0x40010c00
 8003b10:	40010000 	.word	0x40010000
 8003b14:	40000800 	.word	0x40000800

08003b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b1c:	bf00      	nop
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr

08003b24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 8003b28:	4806      	ldr	r0, [pc, #24]	; (8003b44 <HardFault_Handler+0x20>)
 8003b2a:	f008 fd13 	bl	800c554 <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 8003b2e:	4805      	ldr	r0, [pc, #20]	; (8003b44 <HardFault_Handler+0x20>)
 8003b30:	f008 fd10 	bl	800c554 <iprintf>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003b34:	2200      	movs	r2, #0
 8003b36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b3a:	4803      	ldr	r0, [pc, #12]	; (8003b48 <HardFault_Handler+0x24>)
 8003b3c:	f001 faff 	bl	800513e <HAL_GPIO_WritePin>
	  printf("HardFault_IRQn");
 8003b40:	e7f5      	b.n	8003b2e <HardFault_Handler+0xa>
 8003b42:	bf00      	nop
 8003b44:	0800d9f4 	.word	0x0800d9f4
 8003b48:	40011000 	.word	0x40011000

08003b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b50:	e7fe      	b.n	8003b50 <MemManage_Handler+0x4>

08003b52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b52:	b480      	push	{r7}
 8003b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b56:	e7fe      	b.n	8003b56 <BusFault_Handler+0x4>

08003b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b5c:	e7fe      	b.n	8003b5c <UsageFault_Handler+0x4>

08003b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b62:	bf00      	nop
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bc80      	pop	{r7}
 8003b68:	4770      	bx	lr

08003b6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b6e:	bf00      	nop
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr

08003b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b76:	b480      	push	{r7}
 8003b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b7a:	bf00      	nop
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr

08003b82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b86:	f000 f945 	bl	8003e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b8a:	bf00      	nop
 8003b8c:	bd80      	pop	{r7, pc}
	...

08003b90 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003b94:	4802      	ldr	r0, [pc, #8]	; (8003ba0 <ADC1_2_IRQHandler+0x10>)
 8003b96:	f000 fb17 	bl	80041c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003b9a:	bf00      	nop
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20000954 	.word	0x20000954

08003ba4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003ba8:	4802      	ldr	r0, [pc, #8]	; (8003bb4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003baa:	f001 fc11 	bl	80053d0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003bae:	bf00      	nop
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	200012c4 	.word	0x200012c4

08003bb8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003bbc:	4802      	ldr	r0, [pc, #8]	; (8003bc8 <TIM3_IRQHandler+0x10>)
 8003bbe:	f003 ffa3 	bl	8007b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003bc2:	bf00      	nop
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	200008fc 	.word	0x200008fc

08003bcc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003bd0:	4802      	ldr	r0, [pc, #8]	; (8003bdc <TIM4_IRQHandler+0x10>)
 8003bd2:	f003 ff99 	bl	8007b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003bd6:	bf00      	nop
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	200008ac 	.word	0x200008ac

08003be0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	e00a      	b.n	8003c08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003bf2:	f3af 8000 	nop.w
 8003bf6:	4601      	mov	r1, r0
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	60ba      	str	r2, [r7, #8]
 8003bfe:	b2ca      	uxtb	r2, r1
 8003c00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	3301      	adds	r3, #1
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	dbf0      	blt.n	8003bf2 <_read+0x12>
	}

return len;
 8003c10:	687b      	ldr	r3, [r7, #4]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <_close>:
	}
	return len;
}

int _close(int file)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
	return -1;
 8003c22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr

08003c30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c40:	605a      	str	r2, [r3, #4]
	return 0;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bc80      	pop	{r7}
 8003c4c:	4770      	bx	lr

08003c4e <_isatty>:

int _isatty(int file)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
	return 1;
 8003c56:	2301      	movs	r3, #1
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr

08003c62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b085      	sub	sp, #20
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	607a      	str	r2, [r7, #4]
	return 0;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr
	...

08003c7c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003c84:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <_sbrk+0x50>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d102      	bne.n	8003c92 <_sbrk+0x16>
		heap_end = &end;
 8003c8c:	4b0f      	ldr	r3, [pc, #60]	; (8003ccc <_sbrk+0x50>)
 8003c8e:	4a10      	ldr	r2, [pc, #64]	; (8003cd0 <_sbrk+0x54>)
 8003c90:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003c92:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <_sbrk+0x50>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003c98:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <_sbrk+0x50>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	466a      	mov	r2, sp
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d907      	bls.n	8003cb6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003ca6:	f008 fbfb 	bl	800c4a0 <__errno>
 8003caa:	4603      	mov	r3, r0
 8003cac:	220c      	movs	r2, #12
 8003cae:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb4:	e006      	b.n	8003cc4 <_sbrk+0x48>
	}

	heap_end += incr;
 8003cb6:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <_sbrk+0x50>)
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	4a03      	ldr	r2, [pc, #12]	; (8003ccc <_sbrk+0x50>)
 8003cc0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	2000027c 	.word	0x2000027c
 8003cd0:	200015c0 	.word	0x200015c0

08003cd4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003cd8:	4b15      	ldr	r3, [pc, #84]	; (8003d30 <SystemInit+0x5c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a14      	ldr	r2, [pc, #80]	; (8003d30 <SystemInit+0x5c>)
 8003cde:	f043 0301 	orr.w	r3, r3, #1
 8003ce2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003ce4:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <SystemInit+0x5c>)
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	4911      	ldr	r1, [pc, #68]	; (8003d30 <SystemInit+0x5c>)
 8003cea:	4b12      	ldr	r3, [pc, #72]	; (8003d34 <SystemInit+0x60>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003cf0:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <SystemInit+0x5c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a0e      	ldr	r2, [pc, #56]	; (8003d30 <SystemInit+0x5c>)
 8003cf6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cfe:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d00:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <SystemInit+0x5c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a0a      	ldr	r2, [pc, #40]	; (8003d30 <SystemInit+0x5c>)
 8003d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d0a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003d0c:	4b08      	ldr	r3, [pc, #32]	; (8003d30 <SystemInit+0x5c>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	4a07      	ldr	r2, [pc, #28]	; (8003d30 <SystemInit+0x5c>)
 8003d12:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003d16:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003d18:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <SystemInit+0x5c>)
 8003d1a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003d1e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003d20:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <SystemInit+0x64>)
 8003d22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d26:	609a      	str	r2, [r3, #8]
#endif 
}
 8003d28:	bf00      	nop
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr
 8003d30:	40021000 	.word	0x40021000
 8003d34:	f8ff0000 	.word	0xf8ff0000
 8003d38:	e000ed00 	.word	0xe000ed00

08003d3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003d3c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003d3e:	e003      	b.n	8003d48 <LoopCopyDataInit>

08003d40 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003d40:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003d42:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003d44:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003d46:	3104      	adds	r1, #4

08003d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003d48:	480a      	ldr	r0, [pc, #40]	; (8003d74 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003d4a:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003d4c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003d4e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003d50:	d3f6      	bcc.n	8003d40 <CopyDataInit>
  ldr r2, =_sbss
 8003d52:	4a0a      	ldr	r2, [pc, #40]	; (8003d7c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003d54:	e002      	b.n	8003d5c <LoopFillZerobss>

08003d56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003d56:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003d58:	f842 3b04 	str.w	r3, [r2], #4

08003d5c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003d5c:	4b08      	ldr	r3, [pc, #32]	; (8003d80 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003d5e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003d60:	d3f9      	bcc.n	8003d56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003d62:	f7ff ffb7 	bl	8003cd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d66:	f008 fba1 	bl	800c4ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003d6a:	f7ff f8b3 	bl	8002ed4 <main>
  bx lr
 8003d6e:	4770      	bx	lr
  ldr r3, =_sidata
 8003d70:	0800db4c 	.word	0x0800db4c
  ldr r0, =_sdata
 8003d74:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003d78:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8003d7c:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 8003d80:	200015c0 	.word	0x200015c0

08003d84 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d84:	e7fe      	b.n	8003d84 <CAN1_RX1_IRQHandler>
	...

08003d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d8c:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <HAL_Init+0x28>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a07      	ldr	r2, [pc, #28]	; (8003db0 <HAL_Init+0x28>)
 8003d92:	f043 0310 	orr.w	r3, r3, #16
 8003d96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d98:	2003      	movs	r0, #3
 8003d9a:	f000 fdd7 	bl	800494c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d9e:	2000      	movs	r0, #0
 8003da0:	f000 f808 	bl	8003db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003da4:	f7ff fd58 	bl	8003858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40022000 	.word	0x40022000

08003db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003dbc:	4b12      	ldr	r3, [pc, #72]	; (8003e08 <HAL_InitTick+0x54>)
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	4b12      	ldr	r3, [pc, #72]	; (8003e0c <HAL_InitTick+0x58>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fdef 	bl	80049b6 <HAL_SYSTICK_Config>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e00e      	b.n	8003e00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b0f      	cmp	r3, #15
 8003de6:	d80a      	bhi.n	8003dfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003de8:	2200      	movs	r2, #0
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	f04f 30ff 	mov.w	r0, #4294967295
 8003df0:	f000 fdb7 	bl	8004962 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003df4:	4a06      	ldr	r2, [pc, #24]	; (8003e10 <HAL_InitTick+0x5c>)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	e000      	b.n	8003e00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	20000014 	.word	0x20000014
 8003e0c:	2000001c 	.word	0x2000001c
 8003e10:	20000018 	.word	0x20000018

08003e14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e18:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <HAL_IncTick+0x1c>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <HAL_IncTick+0x20>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4413      	add	r3, r2
 8003e24:	4a03      	ldr	r2, [pc, #12]	; (8003e34 <HAL_IncTick+0x20>)
 8003e26:	6013      	str	r3, [r2, #0]
}
 8003e28:	bf00      	nop
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr
 8003e30:	2000001c 	.word	0x2000001c
 8003e34:	200009dc 	.word	0x200009dc

08003e38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e3c:	4b02      	ldr	r3, [pc, #8]	; (8003e48 <HAL_GetTick+0x10>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr
 8003e48:	200009dc 	.word	0x200009dc

08003e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e54:	f7ff fff0 	bl	8003e38 <HAL_GetTick>
 8003e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e64:	d005      	beq.n	8003e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e66:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <HAL_Delay+0x44>)
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4413      	add	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e72:	bf00      	nop
 8003e74:	f7ff ffe0 	bl	8003e38 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d8f7      	bhi.n	8003e74 <HAL_Delay+0x28>
  {
  }
}
 8003e84:	bf00      	nop
 8003e86:	bf00      	nop
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	2000001c 	.word	0x2000001c

08003e94 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e0be      	b.n	8004034 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d109      	bne.n	8003ed8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff fcf2 	bl	80038bc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 fb8b 	bl	80045f4 <ADC_ConversionStop_Disable>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee6:	f003 0310 	and.w	r3, r3, #16
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f040 8099 	bne.w	8004022 <HAL_ADC_Init+0x18e>
 8003ef0:	7dfb      	ldrb	r3, [r7, #23]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f040 8095 	bne.w	8004022 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f00:	f023 0302 	bic.w	r3, r3, #2
 8003f04:	f043 0202 	orr.w	r2, r3, #2
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003f14:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	7b1b      	ldrb	r3, [r3, #12]
 8003f1a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003f1c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f2c:	d003      	beq.n	8003f36 <HAL_ADC_Init+0xa2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d102      	bne.n	8003f3c <HAL_ADC_Init+0xa8>
 8003f36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f3a:	e000      	b.n	8003f3e <HAL_ADC_Init+0xaa>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	7d1b      	ldrb	r3, [r3, #20]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d119      	bne.n	8003f80 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	7b1b      	ldrb	r3, [r3, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d109      	bne.n	8003f68 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	035a      	lsls	r2, r3, #13
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f64:	613b      	str	r3, [r7, #16]
 8003f66:	e00b      	b.n	8003f80 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6c:	f043 0220 	orr.w	r2, r3, #32
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	f043 0201 	orr.w	r2, r3, #1
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	4b28      	ldr	r3, [pc, #160]	; (800403c <HAL_ADC_Init+0x1a8>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6812      	ldr	r2, [r2, #0]
 8003fa2:	68b9      	ldr	r1, [r7, #8]
 8003fa4:	430b      	orrs	r3, r1
 8003fa6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fb0:	d003      	beq.n	8003fba <HAL_ADC_Init+0x126>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d104      	bne.n	8003fc4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	051b      	lsls	r3, r3, #20
 8003fc2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689a      	ldr	r2, [r3, #8]
 8003fde:	4b18      	ldr	r3, [pc, #96]	; (8004040 <HAL_ADC_Init+0x1ac>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d10b      	bne.n	8004000 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff2:	f023 0303 	bic.w	r3, r3, #3
 8003ff6:	f043 0201 	orr.w	r2, r3, #1
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003ffe:	e018      	b.n	8004032 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004004:	f023 0312 	bic.w	r3, r3, #18
 8004008:	f043 0210 	orr.w	r2, r3, #16
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	f043 0201 	orr.w	r2, r3, #1
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004020:	e007      	b.n	8004032 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004026:	f043 0210 	orr.w	r2, r3, #16
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004032:	7dfb      	ldrb	r3, [r7, #23]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	ffe1f7fd 	.word	0xffe1f7fd
 8004040:	ff1f0efe 	.word	0xff1f0efe

08004044 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800404c:	2300      	movs	r3, #0
 800404e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004056:	2b01      	cmp	r3, #1
 8004058:	d101      	bne.n	800405e <HAL_ADC_Start_IT+0x1a>
 800405a:	2302      	movs	r3, #2
 800405c:	e0a0      	b.n	80041a0 <HAL_ADC_Start_IT+0x15c>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fa72 	bl	8004550 <ADC_Enable>
 800406c:	4603      	mov	r3, r0
 800406e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004070:	7bfb      	ldrb	r3, [r7, #15]
 8004072:	2b00      	cmp	r3, #0
 8004074:	f040 808f 	bne.w	8004196 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004080:	f023 0301 	bic.w	r3, r3, #1
 8004084:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a45      	ldr	r2, [pc, #276]	; (80041a8 <HAL_ADC_Start_IT+0x164>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d105      	bne.n	80040a2 <HAL_ADC_Start_IT+0x5e>
 8004096:	4b45      	ldr	r3, [pc, #276]	; (80041ac <HAL_ADC_Start_IT+0x168>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d115      	bne.n	80040ce <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d026      	beq.n	800410a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80040c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80040cc:	e01d      	b.n	800410a <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a33      	ldr	r2, [pc, #204]	; (80041ac <HAL_ADC_Start_IT+0x168>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d004      	beq.n	80040ee <HAL_ADC_Start_IT+0xaa>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a2f      	ldr	r2, [pc, #188]	; (80041a8 <HAL_ADC_Start_IT+0x164>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d10d      	bne.n	800410a <HAL_ADC_Start_IT+0xc6>
 80040ee:	4b2f      	ldr	r3, [pc, #188]	; (80041ac <HAL_ADC_Start_IT+0x168>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d007      	beq.n	800410a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004102:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d006      	beq.n	8004124 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411a:	f023 0206 	bic.w	r2, r3, #6
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	62da      	str	r2, [r3, #44]	; 0x2c
 8004122:	e002      	b.n	800412a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f06f 0202 	mvn.w	r2, #2
 800413a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0220 	orr.w	r2, r2, #32
 800414a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004156:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800415a:	d113      	bne.n	8004184 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004160:	4a11      	ldr	r2, [pc, #68]	; (80041a8 <HAL_ADC_Start_IT+0x164>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d105      	bne.n	8004172 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004166:	4b11      	ldr	r3, [pc, #68]	; (80041ac <HAL_ADC_Start_IT+0x168>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800416e:	2b00      	cmp	r3, #0
 8004170:	d108      	bne.n	8004184 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004180:	609a      	str	r2, [r3, #8]
 8004182:	e00c      	b.n	800419e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689a      	ldr	r2, [r3, #8]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004192:	609a      	str	r2, [r3, #8]
 8004194:	e003      	b.n	800419e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800419e:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40012800 	.word	0x40012800
 80041ac:	40012400 	.word	0x40012400

080041b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80041be:	4618      	mov	r0, r3
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr

080041c8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b20      	cmp	r3, #32
 80041dc:	d140      	bne.n	8004260 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d139      	bne.n	8004260 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f0:	f003 0310 	and.w	r3, r3, #16
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d105      	bne.n	8004204 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800420e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004212:	d11d      	bne.n	8004250 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004218:	2b00      	cmp	r3, #0
 800421a:	d119      	bne.n	8004250 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0220 	bic.w	r2, r2, #32
 800422a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004230:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d105      	bne.n	8004250 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004248:	f043 0201 	orr.w	r2, r3, #1
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7fe fa0d 	bl	8002670 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f06f 0212 	mvn.w	r2, #18
 800425e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426a:	2b80      	cmp	r3, #128	; 0x80
 800426c:	d14f      	bne.n	800430e <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b04      	cmp	r3, #4
 800427a:	d148      	bne.n	800430e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	2b00      	cmp	r3, #0
 8004286:	d105      	bne.n	8004294 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800429e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80042a2:	d012      	beq.n	80042ca <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d125      	bne.n	80042fe <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80042bc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80042c0:	d11d      	bne.n	80042fe <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d119      	bne.n	80042fe <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042d8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d105      	bne.n	80042fe <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f6:	f043 0201 	orr.w	r2, r3, #1
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fa4e 	bl	80047a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 020c 	mvn.w	r2, #12
 800430c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004318:	2b40      	cmp	r3, #64	; 0x40
 800431a:	d114      	bne.n	8004346 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b01      	cmp	r3, #1
 8004328:	d10d      	bne.n	8004346 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f809 	bl	800434e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f06f 0201 	mvn.w	r2, #1
 8004344:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8004346:	bf00      	nop
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	bc80      	pop	{r7}
 800435e:	4770      	bx	lr

08004360 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004378:	2b01      	cmp	r3, #1
 800437a:	d101      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x20>
 800437c:	2302      	movs	r3, #2
 800437e:	e0dc      	b.n	800453a <HAL_ADC_ConfigChannel+0x1da>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2b06      	cmp	r3, #6
 800438e:	d81c      	bhi.n	80043ca <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	4613      	mov	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	3b05      	subs	r3, #5
 80043a2:	221f      	movs	r2, #31
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	43db      	mvns	r3, r3
 80043aa:	4019      	ands	r1, r3
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	6818      	ldr	r0, [r3, #0]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	3b05      	subs	r3, #5
 80043bc:	fa00 f203 	lsl.w	r2, r0, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	635a      	str	r2, [r3, #52]	; 0x34
 80043c8:	e03c      	b.n	8004444 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b0c      	cmp	r3, #12
 80043d0:	d81c      	bhi.n	800440c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	4613      	mov	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	3b23      	subs	r3, #35	; 0x23
 80043e4:	221f      	movs	r2, #31
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	43db      	mvns	r3, r3
 80043ec:	4019      	ands	r1, r3
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6818      	ldr	r0, [r3, #0]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	4613      	mov	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	3b23      	subs	r3, #35	; 0x23
 80043fe:	fa00 f203 	lsl.w	r2, r0, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	631a      	str	r2, [r3, #48]	; 0x30
 800440a:	e01b      	b.n	8004444 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	4613      	mov	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	3b41      	subs	r3, #65	; 0x41
 800441e:	221f      	movs	r2, #31
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	43db      	mvns	r3, r3
 8004426:	4019      	ands	r1, r3
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	4613      	mov	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	3b41      	subs	r3, #65	; 0x41
 8004438:	fa00 f203 	lsl.w	r2, r0, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b09      	cmp	r3, #9
 800444a:	d91c      	bls.n	8004486 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68d9      	ldr	r1, [r3, #12]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	4613      	mov	r3, r2
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	4413      	add	r3, r2
 800445c:	3b1e      	subs	r3, #30
 800445e:	2207      	movs	r2, #7
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	43db      	mvns	r3, r3
 8004466:	4019      	ands	r1, r3
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	6898      	ldr	r0, [r3, #8]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	4613      	mov	r3, r2
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	4413      	add	r3, r2
 8004476:	3b1e      	subs	r3, #30
 8004478:	fa00 f203 	lsl.w	r2, r0, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	60da      	str	r2, [r3, #12]
 8004484:	e019      	b.n	80044ba <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6919      	ldr	r1, [r3, #16]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	4613      	mov	r3, r2
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	4413      	add	r3, r2
 8004496:	2207      	movs	r2, #7
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	43db      	mvns	r3, r3
 800449e:	4019      	ands	r1, r3
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	6898      	ldr	r0, [r3, #8]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	4613      	mov	r3, r2
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	4413      	add	r3, r2
 80044ae:	fa00 f203 	lsl.w	r2, r0, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b10      	cmp	r3, #16
 80044c0:	d003      	beq.n	80044ca <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80044c6:	2b11      	cmp	r3, #17
 80044c8:	d132      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a1d      	ldr	r2, [pc, #116]	; (8004544 <HAL_ADC_ConfigChannel+0x1e4>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d125      	bne.n	8004520 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d126      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80044f0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b10      	cmp	r3, #16
 80044f8:	d11a      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044fa:	4b13      	ldr	r3, [pc, #76]	; (8004548 <HAL_ADC_ConfigChannel+0x1e8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a13      	ldr	r2, [pc, #76]	; (800454c <HAL_ADC_ConfigChannel+0x1ec>)
 8004500:	fba2 2303 	umull	r2, r3, r2, r3
 8004504:	0c9a      	lsrs	r2, r3, #18
 8004506:	4613      	mov	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004510:	e002      	b.n	8004518 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	3b01      	subs	r3, #1
 8004516:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1f9      	bne.n	8004512 <HAL_ADC_ConfigChannel+0x1b2>
 800451e:	e007      	b.n	8004530 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004524:	f043 0220 	orr.w	r2, r3, #32
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004538:	7bfb      	ldrb	r3, [r7, #15]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	bc80      	pop	{r7}
 8004542:	4770      	bx	lr
 8004544:	40012400 	.word	0x40012400
 8004548:	20000014 	.word	0x20000014
 800454c:	431bde83 	.word	0x431bde83

08004550 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b01      	cmp	r3, #1
 800456c:	d039      	beq.n	80045e2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f042 0201 	orr.w	r2, r2, #1
 800457c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800457e:	4b1b      	ldr	r3, [pc, #108]	; (80045ec <ADC_Enable+0x9c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a1b      	ldr	r2, [pc, #108]	; (80045f0 <ADC_Enable+0xa0>)
 8004584:	fba2 2303 	umull	r2, r3, r2, r3
 8004588:	0c9b      	lsrs	r3, r3, #18
 800458a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800458c:	e002      	b.n	8004594 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	3b01      	subs	r3, #1
 8004592:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1f9      	bne.n	800458e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800459a:	f7ff fc4d 	bl	8003e38 <HAL_GetTick>
 800459e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80045a0:	e018      	b.n	80045d4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80045a2:	f7ff fc49 	bl	8003e38 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d911      	bls.n	80045d4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b4:	f043 0210 	orr.w	r2, r3, #16
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c0:	f043 0201 	orr.w	r2, r3, #1
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e007      	b.n	80045e4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d1df      	bne.n	80045a2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	20000014 	.word	0x20000014
 80045f0:	431bde83 	.word	0x431bde83

080045f4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b01      	cmp	r3, #1
 800460c:	d127      	bne.n	800465e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0201 	bic.w	r2, r2, #1
 800461c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800461e:	f7ff fc0b 	bl	8003e38 <HAL_GetTick>
 8004622:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004624:	e014      	b.n	8004650 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004626:	f7ff fc07 	bl	8003e38 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d90d      	bls.n	8004650 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004638:	f043 0210 	orr.w	r2, r3, #16
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	f043 0201 	orr.w	r2, r3, #1
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e007      	b.n	8004660 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b01      	cmp	r3, #1
 800465c:	d0e3      	beq.n	8004626 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004668:	b590      	push	{r4, r7, lr}
 800466a:	b087      	sub	sp, #28
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004670:	2300      	movs	r3, #0
 8004672:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800467e:	2b01      	cmp	r3, #1
 8004680:	d101      	bne.n	8004686 <HAL_ADCEx_Calibration_Start+0x1e>
 8004682:	2302      	movs	r3, #2
 8004684:	e086      	b.n	8004794 <HAL_ADCEx_Calibration_Start+0x12c>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7ff ffb0 	bl	80045f4 <ADC_ConversionStop_Disable>
 8004694:	4603      	mov	r3, r0
 8004696:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004698:	7dfb      	ldrb	r3, [r7, #23]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d175      	bne.n	800478a <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80046a6:	f023 0302 	bic.w	r3, r3, #2
 80046aa:	f043 0202 	orr.w	r2, r3, #2
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80046b2:	4b3a      	ldr	r3, [pc, #232]	; (800479c <HAL_ADCEx_Calibration_Start+0x134>)
 80046b4:	681c      	ldr	r4, [r3, #0]
 80046b6:	2002      	movs	r0, #2
 80046b8:	f002 fda6 	bl	8007208 <HAL_RCCEx_GetPeriphCLKFreq>
 80046bc:	4603      	mov	r3, r0
 80046be:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80046c2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80046c4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80046c6:	e002      	b.n	80046ce <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	3b01      	subs	r3, #1
 80046cc:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1f9      	bne.n	80046c8 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7ff ff3b 	bl	8004550 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f042 0208 	orr.w	r2, r2, #8
 80046e8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80046ea:	f7ff fba5 	bl	8003e38 <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80046f0:	e014      	b.n	800471c <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80046f2:	f7ff fba1 	bl	8003e38 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b0a      	cmp	r3, #10
 80046fe:	d90d      	bls.n	800471c <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004704:	f023 0312 	bic.w	r3, r3, #18
 8004708:	f043 0210 	orr.w	r2, r3, #16
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e03b      	b.n	8004794 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1e3      	bne.n	80046f2 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f042 0204 	orr.w	r2, r2, #4
 8004738:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800473a:	f7ff fb7d 	bl	8003e38 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004740:	e014      	b.n	800476c <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004742:	f7ff fb79 	bl	8003e38 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b0a      	cmp	r3, #10
 800474e:	d90d      	bls.n	800476c <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004754:	f023 0312 	bic.w	r3, r3, #18
 8004758:	f043 0210 	orr.w	r2, r3, #16
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e013      	b.n	8004794 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1e3      	bne.n	8004742 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477e:	f023 0303 	bic.w	r3, r3, #3
 8004782:	f043 0201 	orr.w	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004792:	7dfb      	ldrb	r3, [r7, #23]
}
 8004794:	4618      	mov	r0, r3
 8004796:	371c      	adds	r7, #28
 8004798:	46bd      	mov	sp, r7
 800479a:	bd90      	pop	{r4, r7, pc}
 800479c:	20000014 	.word	0x20000014

080047a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bc80      	pop	{r7}
 80047b0:	4770      	bx	lr
	...

080047b4 <__NVIC_SetPriorityGrouping>:
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047c4:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <__NVIC_SetPriorityGrouping+0x44>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047d0:	4013      	ands	r3, r2
 80047d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047e6:	4a04      	ldr	r2, [pc, #16]	; (80047f8 <__NVIC_SetPriorityGrouping+0x44>)
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	60d3      	str	r3, [r2, #12]
}
 80047ec:	bf00      	nop
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bc80      	pop	{r7}
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	e000ed00 	.word	0xe000ed00

080047fc <__NVIC_GetPriorityGrouping>:
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004800:	4b04      	ldr	r3, [pc, #16]	; (8004814 <__NVIC_GetPriorityGrouping+0x18>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	0a1b      	lsrs	r3, r3, #8
 8004806:	f003 0307 	and.w	r3, r3, #7
}
 800480a:	4618      	mov	r0, r3
 800480c:	46bd      	mov	sp, r7
 800480e:	bc80      	pop	{r7}
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	e000ed00 	.word	0xe000ed00

08004818 <__NVIC_EnableIRQ>:
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	4603      	mov	r3, r0
 8004820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004826:	2b00      	cmp	r3, #0
 8004828:	db0b      	blt.n	8004842 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800482a:	79fb      	ldrb	r3, [r7, #7]
 800482c:	f003 021f 	and.w	r2, r3, #31
 8004830:	4906      	ldr	r1, [pc, #24]	; (800484c <__NVIC_EnableIRQ+0x34>)
 8004832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004836:	095b      	lsrs	r3, r3, #5
 8004838:	2001      	movs	r0, #1
 800483a:	fa00 f202 	lsl.w	r2, r0, r2
 800483e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr
 800484c:	e000e100 	.word	0xe000e100

08004850 <__NVIC_SetPriority>:
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	4603      	mov	r3, r0
 8004858:	6039      	str	r1, [r7, #0]
 800485a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800485c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004860:	2b00      	cmp	r3, #0
 8004862:	db0a      	blt.n	800487a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	b2da      	uxtb	r2, r3
 8004868:	490c      	ldr	r1, [pc, #48]	; (800489c <__NVIC_SetPriority+0x4c>)
 800486a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800486e:	0112      	lsls	r2, r2, #4
 8004870:	b2d2      	uxtb	r2, r2
 8004872:	440b      	add	r3, r1
 8004874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004878:	e00a      	b.n	8004890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	b2da      	uxtb	r2, r3
 800487e:	4908      	ldr	r1, [pc, #32]	; (80048a0 <__NVIC_SetPriority+0x50>)
 8004880:	79fb      	ldrb	r3, [r7, #7]
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	3b04      	subs	r3, #4
 8004888:	0112      	lsls	r2, r2, #4
 800488a:	b2d2      	uxtb	r2, r2
 800488c:	440b      	add	r3, r1
 800488e:	761a      	strb	r2, [r3, #24]
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	bc80      	pop	{r7}
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	e000e100 	.word	0xe000e100
 80048a0:	e000ed00 	.word	0xe000ed00

080048a4 <NVIC_EncodePriority>:
{
 80048a4:	b480      	push	{r7}
 80048a6:	b089      	sub	sp, #36	; 0x24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	f1c3 0307 	rsb	r3, r3, #7
 80048be:	2b04      	cmp	r3, #4
 80048c0:	bf28      	it	cs
 80048c2:	2304      	movcs	r3, #4
 80048c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	3304      	adds	r3, #4
 80048ca:	2b06      	cmp	r3, #6
 80048cc:	d902      	bls.n	80048d4 <NVIC_EncodePriority+0x30>
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	3b03      	subs	r3, #3
 80048d2:	e000      	b.n	80048d6 <NVIC_EncodePriority+0x32>
 80048d4:	2300      	movs	r3, #0
 80048d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048d8:	f04f 32ff 	mov.w	r2, #4294967295
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	fa02 f303 	lsl.w	r3, r2, r3
 80048e2:	43da      	mvns	r2, r3
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	401a      	ands	r2, r3
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048ec:	f04f 31ff 	mov.w	r1, #4294967295
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	fa01 f303 	lsl.w	r3, r1, r3
 80048f6:	43d9      	mvns	r1, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048fc:	4313      	orrs	r3, r2
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3724      	adds	r7, #36	; 0x24
 8004902:	46bd      	mov	sp, r7
 8004904:	bc80      	pop	{r7}
 8004906:	4770      	bx	lr

08004908 <SysTick_Config>:
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3b01      	subs	r3, #1
 8004914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004918:	d301      	bcc.n	800491e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800491a:	2301      	movs	r3, #1
 800491c:	e00f      	b.n	800493e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800491e:	4a0a      	ldr	r2, [pc, #40]	; (8004948 <SysTick_Config+0x40>)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	3b01      	subs	r3, #1
 8004924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004926:	210f      	movs	r1, #15
 8004928:	f04f 30ff 	mov.w	r0, #4294967295
 800492c:	f7ff ff90 	bl	8004850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004930:	4b05      	ldr	r3, [pc, #20]	; (8004948 <SysTick_Config+0x40>)
 8004932:	2200      	movs	r2, #0
 8004934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004936:	4b04      	ldr	r3, [pc, #16]	; (8004948 <SysTick_Config+0x40>)
 8004938:	2207      	movs	r2, #7
 800493a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	e000e010 	.word	0xe000e010

0800494c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7ff ff2d 	bl	80047b4 <__NVIC_SetPriorityGrouping>
}
 800495a:	bf00      	nop
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004962:	b580      	push	{r7, lr}
 8004964:	b086      	sub	sp, #24
 8004966:	af00      	add	r7, sp, #0
 8004968:	4603      	mov	r3, r0
 800496a:	60b9      	str	r1, [r7, #8]
 800496c:	607a      	str	r2, [r7, #4]
 800496e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004970:	2300      	movs	r3, #0
 8004972:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004974:	f7ff ff42 	bl	80047fc <__NVIC_GetPriorityGrouping>
 8004978:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	68b9      	ldr	r1, [r7, #8]
 800497e:	6978      	ldr	r0, [r7, #20]
 8004980:	f7ff ff90 	bl	80048a4 <NVIC_EncodePriority>
 8004984:	4602      	mov	r2, r0
 8004986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800498a:	4611      	mov	r1, r2
 800498c:	4618      	mov	r0, r3
 800498e:	f7ff ff5f 	bl	8004850 <__NVIC_SetPriority>
}
 8004992:	bf00      	nop
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
 80049a0:	4603      	mov	r3, r0
 80049a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7ff ff35 	bl	8004818 <__NVIC_EnableIRQ>
}
 80049ae:	bf00      	nop
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b082      	sub	sp, #8
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7ff ffa2 	bl	8004908 <SysTick_Config>
 80049c4:	4603      	mov	r3, r0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b082      	sub	sp, #8
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e00e      	b.n	80049fe <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	795b      	ldrb	r3, [r3, #5]
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d105      	bne.n	80049f6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7fe ffa7 	bl	8003944 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
	...

08004a08 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004a22:	4b2f      	ldr	r3, [pc, #188]	; (8004ae0 <HAL_FLASH_Program+0xd8>)
 8004a24:	7e1b      	ldrb	r3, [r3, #24]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d101      	bne.n	8004a2e <HAL_FLASH_Program+0x26>
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	e054      	b.n	8004ad8 <HAL_FLASH_Program+0xd0>
 8004a2e:	4b2c      	ldr	r3, [pc, #176]	; (8004ae0 <HAL_FLASH_Program+0xd8>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004a34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004a38:	f000 f8a8 	bl	8004b8c <FLASH_WaitForLastOperation>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8004a40:	7dfb      	ldrb	r3, [r7, #23]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d144      	bne.n	8004ad0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d102      	bne.n	8004a52 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	757b      	strb	r3, [r7, #21]
 8004a50:	e007      	b.n	8004a62 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d102      	bne.n	8004a5e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004a58:	2302      	movs	r3, #2
 8004a5a:	757b      	strb	r3, [r7, #21]
 8004a5c:	e001      	b.n	8004a62 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004a5e:	2304      	movs	r3, #4
 8004a60:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8004a62:	2300      	movs	r3, #0
 8004a64:	75bb      	strb	r3, [r7, #22]
 8004a66:	e02d      	b.n	8004ac4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004a68:	7dbb      	ldrb	r3, [r7, #22]
 8004a6a:	005a      	lsls	r2, r3, #1
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	eb02 0c03 	add.w	ip, r2, r3
 8004a72:	7dbb      	ldrb	r3, [r7, #22]
 8004a74:	0119      	lsls	r1, r3, #4
 8004a76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a7a:	f1c1 0620 	rsb	r6, r1, #32
 8004a7e:	f1a1 0020 	sub.w	r0, r1, #32
 8004a82:	fa22 f401 	lsr.w	r4, r2, r1
 8004a86:	fa03 f606 	lsl.w	r6, r3, r6
 8004a8a:	4334      	orrs	r4, r6
 8004a8c:	fa23 f000 	lsr.w	r0, r3, r0
 8004a90:	4304      	orrs	r4, r0
 8004a92:	fa23 f501 	lsr.w	r5, r3, r1
 8004a96:	b2a3      	uxth	r3, r4
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4660      	mov	r0, ip
 8004a9c:	f000 f85a 	bl	8004b54 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004aa0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004aa4:	f000 f872 	bl	8004b8c <FLASH_WaitForLastOperation>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004aac:	4b0d      	ldr	r3, [pc, #52]	; (8004ae4 <HAL_FLASH_Program+0xdc>)
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	4a0c      	ldr	r2, [pc, #48]	; (8004ae4 <HAL_FLASH_Program+0xdc>)
 8004ab2:	f023 0301 	bic.w	r3, r3, #1
 8004ab6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8004ab8:	7dfb      	ldrb	r3, [r7, #23]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d107      	bne.n	8004ace <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004abe:	7dbb      	ldrb	r3, [r7, #22]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	75bb      	strb	r3, [r7, #22]
 8004ac4:	7dba      	ldrb	r2, [r7, #22]
 8004ac6:	7d7b      	ldrb	r3, [r7, #21]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d3cd      	bcc.n	8004a68 <HAL_FLASH_Program+0x60>
 8004acc:	e000      	b.n	8004ad0 <HAL_FLASH_Program+0xc8>
      {
        break;
 8004ace:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004ad0:	4b03      	ldr	r3, [pc, #12]	; (8004ae0 <HAL_FLASH_Program+0xd8>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	761a      	strb	r2, [r3, #24]

  return status;
 8004ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	371c      	adds	r7, #28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ae0:	200009e0 	.word	0x200009e0
 8004ae4:	40022000 	.word	0x40022000

08004ae8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004aee:	2300      	movs	r3, #0
 8004af0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004af2:	4b0d      	ldr	r3, [pc, #52]	; (8004b28 <HAL_FLASH_Unlock+0x40>)
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00d      	beq.n	8004b1a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004afe:	4b0a      	ldr	r3, [pc, #40]	; (8004b28 <HAL_FLASH_Unlock+0x40>)
 8004b00:	4a0a      	ldr	r2, [pc, #40]	; (8004b2c <HAL_FLASH_Unlock+0x44>)
 8004b02:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004b04:	4b08      	ldr	r3, [pc, #32]	; (8004b28 <HAL_FLASH_Unlock+0x40>)
 8004b06:	4a0a      	ldr	r2, [pc, #40]	; (8004b30 <HAL_FLASH_Unlock+0x48>)
 8004b08:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004b0a:	4b07      	ldr	r3, [pc, #28]	; (8004b28 <HAL_FLASH_Unlock+0x40>)
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8004b1a:	79fb      	ldrb	r3, [r7, #7]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bc80      	pop	{r7}
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	40022000 	.word	0x40022000
 8004b2c:	45670123 	.word	0x45670123
 8004b30:	cdef89ab 	.word	0xcdef89ab

08004b34 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004b38:	4b05      	ldr	r3, [pc, #20]	; (8004b50 <HAL_FLASH_Lock+0x1c>)
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	4a04      	ldr	r2, [pc, #16]	; (8004b50 <HAL_FLASH_Lock+0x1c>)
 8004b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b42:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bc80      	pop	{r7}
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40022000 	.word	0x40022000

08004b54 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004b60:	4b08      	ldr	r3, [pc, #32]	; (8004b84 <FLASH_Program_HalfWord+0x30>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004b66:	4b08      	ldr	r3, [pc, #32]	; (8004b88 <FLASH_Program_HalfWord+0x34>)
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	4a07      	ldr	r2, [pc, #28]	; (8004b88 <FLASH_Program_HalfWord+0x34>)
 8004b6c:	f043 0301 	orr.w	r3, r3, #1
 8004b70:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	887a      	ldrh	r2, [r7, #2]
 8004b76:	801a      	strh	r2, [r3, #0]
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc80      	pop	{r7}
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	200009e0 	.word	0x200009e0
 8004b88:	40022000 	.word	0x40022000

08004b8c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004b94:	f7ff f950 	bl	8003e38 <HAL_GetTick>
 8004b98:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004b9a:	e010      	b.n	8004bbe <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba2:	d00c      	beq.n	8004bbe <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d007      	beq.n	8004bba <FLASH_WaitForLastOperation+0x2e>
 8004baa:	f7ff f945 	bl	8003e38 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d201      	bcs.n	8004bbe <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e025      	b.n	8004c0a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004bbe:	4b15      	ldr	r3, [pc, #84]	; (8004c14 <FLASH_WaitForLastOperation+0x88>)
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1e8      	bne.n	8004b9c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004bca:	4b12      	ldr	r3, [pc, #72]	; (8004c14 <FLASH_WaitForLastOperation+0x88>)
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f003 0320 	and.w	r3, r3, #32
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004bd6:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <FLASH_WaitForLastOperation+0x88>)
 8004bd8:	2220      	movs	r2, #32
 8004bda:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004bdc:	4b0d      	ldr	r3, [pc, #52]	; (8004c14 <FLASH_WaitForLastOperation+0x88>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f003 0310 	and.w	r3, r3, #16
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10b      	bne.n	8004c00 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004be8:	4b0a      	ldr	r3, [pc, #40]	; (8004c14 <FLASH_WaitForLastOperation+0x88>)
 8004bea:	69db      	ldr	r3, [r3, #28]
 8004bec:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d105      	bne.n	8004c00 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004bf4:	4b07      	ldr	r3, [pc, #28]	; (8004c14 <FLASH_WaitForLastOperation+0x88>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d003      	beq.n	8004c08 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004c00:	f000 f80a 	bl	8004c18 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e000      	b.n	8004c0a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40022000 	.word	0x40022000

08004c18 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004c22:	4b23      	ldr	r3, [pc, #140]	; (8004cb0 <FLASH_SetErrorCode+0x98>)
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f003 0310 	and.w	r3, r3, #16
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d009      	beq.n	8004c42 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004c2e:	4b21      	ldr	r3, [pc, #132]	; (8004cb4 <FLASH_SetErrorCode+0x9c>)
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	f043 0302 	orr.w	r3, r3, #2
 8004c36:	4a1f      	ldr	r2, [pc, #124]	; (8004cb4 <FLASH_SetErrorCode+0x9c>)
 8004c38:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f043 0310 	orr.w	r3, r3, #16
 8004c40:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004c42:	4b1b      	ldr	r3, [pc, #108]	; (8004cb0 <FLASH_SetErrorCode+0x98>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f003 0304 	and.w	r3, r3, #4
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d009      	beq.n	8004c62 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004c4e:	4b19      	ldr	r3, [pc, #100]	; (8004cb4 <FLASH_SetErrorCode+0x9c>)
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	f043 0301 	orr.w	r3, r3, #1
 8004c56:	4a17      	ldr	r2, [pc, #92]	; (8004cb4 <FLASH_SetErrorCode+0x9c>)
 8004c58:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f043 0304 	orr.w	r3, r3, #4
 8004c60:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004c62:	4b13      	ldr	r3, [pc, #76]	; (8004cb0 <FLASH_SetErrorCode+0x98>)
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00b      	beq.n	8004c86 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004c6e:	4b11      	ldr	r3, [pc, #68]	; (8004cb4 <FLASH_SetErrorCode+0x9c>)
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	f043 0304 	orr.w	r3, r3, #4
 8004c76:	4a0f      	ldr	r2, [pc, #60]	; (8004cb4 <FLASH_SetErrorCode+0x9c>)
 8004c78:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004c7a:	4b0d      	ldr	r3, [pc, #52]	; (8004cb0 <FLASH_SetErrorCode+0x98>)
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	4a0c      	ldr	r2, [pc, #48]	; (8004cb0 <FLASH_SetErrorCode+0x98>)
 8004c80:	f023 0301 	bic.w	r3, r3, #1
 8004c84:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f240 1201 	movw	r2, #257	; 0x101
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d106      	bne.n	8004c9e <FLASH_SetErrorCode+0x86>
 8004c90:	4b07      	ldr	r3, [pc, #28]	; (8004cb0 <FLASH_SetErrorCode+0x98>)
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	4a06      	ldr	r2, [pc, #24]	; (8004cb0 <FLASH_SetErrorCode+0x98>)
 8004c96:	f023 0301 	bic.w	r3, r3, #1
 8004c9a:	61d3      	str	r3, [r2, #28]
}  
 8004c9c:	e002      	b.n	8004ca4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004c9e:	4a04      	ldr	r2, [pc, #16]	; (8004cb0 <FLASH_SetErrorCode+0x98>)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	60d3      	str	r3, [r2, #12]
}  
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bc80      	pop	{r7}
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40022000 	.word	0x40022000
 8004cb4:	200009e0 	.word	0x200009e0

08004cb8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004cca:	4b2f      	ldr	r3, [pc, #188]	; (8004d88 <HAL_FLASHEx_Erase+0xd0>)
 8004ccc:	7e1b      	ldrb	r3, [r3, #24]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d101      	bne.n	8004cd6 <HAL_FLASHEx_Erase+0x1e>
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	e053      	b.n	8004d7e <HAL_FLASHEx_Erase+0xc6>
 8004cd6:	4b2c      	ldr	r3, [pc, #176]	; (8004d88 <HAL_FLASHEx_Erase+0xd0>)
 8004cd8:	2201      	movs	r2, #1
 8004cda:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d116      	bne.n	8004d12 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004ce4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ce8:	f7ff ff50 	bl	8004b8c <FLASH_WaitForLastOperation>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d141      	bne.n	8004d76 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8004cf2:	2001      	movs	r0, #1
 8004cf4:	f000 f84c 	bl	8004d90 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004cf8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004cfc:	f7ff ff46 	bl	8004b8c <FLASH_WaitForLastOperation>
 8004d00:	4603      	mov	r3, r0
 8004d02:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004d04:	4b21      	ldr	r3, [pc, #132]	; (8004d8c <HAL_FLASHEx_Erase+0xd4>)
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	4a20      	ldr	r2, [pc, #128]	; (8004d8c <HAL_FLASHEx_Erase+0xd4>)
 8004d0a:	f023 0304 	bic.w	r3, r3, #4
 8004d0e:	6113      	str	r3, [r2, #16]
 8004d10:	e031      	b.n	8004d76 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004d12:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004d16:	f7ff ff39 	bl	8004b8c <FLASH_WaitForLastOperation>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d12a      	bne.n	8004d76 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	f04f 32ff 	mov.w	r2, #4294967295
 8004d26:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	60bb      	str	r3, [r7, #8]
 8004d2e:	e019      	b.n	8004d64 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004d30:	68b8      	ldr	r0, [r7, #8]
 8004d32:	f000 f849 	bl	8004dc8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004d36:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004d3a:	f7ff ff27 	bl	8004b8c <FLASH_WaitForLastOperation>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004d42:	4b12      	ldr	r3, [pc, #72]	; (8004d8c <HAL_FLASHEx_Erase+0xd4>)
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	4a11      	ldr	r2, [pc, #68]	; (8004d8c <HAL_FLASHEx_Erase+0xd4>)
 8004d48:	f023 0302 	bic.w	r3, r3, #2
 8004d4c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	601a      	str	r2, [r3, #0]
            break;
 8004d5a:	e00c      	b.n	8004d76 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d62:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	029a      	lsls	r2, r3, #10
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d3dc      	bcc.n	8004d30 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004d76:	4b04      	ldr	r3, [pc, #16]	; (8004d88 <HAL_FLASHEx_Erase+0xd0>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	761a      	strb	r2, [r3, #24]

  return status;
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	200009e0 	.word	0x200009e0
 8004d8c:	40022000 	.word	0x40022000

08004d90 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004d98:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <FLASH_MassErase+0x30>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004d9e:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <FLASH_MassErase+0x34>)
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	4a08      	ldr	r2, [pc, #32]	; (8004dc4 <FLASH_MassErase+0x34>)
 8004da4:	f043 0304 	orr.w	r3, r3, #4
 8004da8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004daa:	4b06      	ldr	r3, [pc, #24]	; (8004dc4 <FLASH_MassErase+0x34>)
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	4a05      	ldr	r2, [pc, #20]	; (8004dc4 <FLASH_MassErase+0x34>)
 8004db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004db4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bc80      	pop	{r7}
 8004dbe:	4770      	bx	lr
 8004dc0:	200009e0 	.word	0x200009e0
 8004dc4:	40022000 	.word	0x40022000

08004dc8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <FLASH_PageErase+0x38>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004dd6:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <FLASH_PageErase+0x3c>)
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	4a0a      	ldr	r2, [pc, #40]	; (8004e04 <FLASH_PageErase+0x3c>)
 8004ddc:	f043 0302 	orr.w	r3, r3, #2
 8004de0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004de2:	4a08      	ldr	r2, [pc, #32]	; (8004e04 <FLASH_PageErase+0x3c>)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004de8:	4b06      	ldr	r3, [pc, #24]	; (8004e04 <FLASH_PageErase+0x3c>)
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	4a05      	ldr	r2, [pc, #20]	; (8004e04 <FLASH_PageErase+0x3c>)
 8004dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004df2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bc80      	pop	{r7}
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	200009e0 	.word	0x200009e0
 8004e04:	40022000 	.word	0x40022000

08004e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b08b      	sub	sp, #44	; 0x2c
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e12:	2300      	movs	r3, #0
 8004e14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004e16:	2300      	movs	r3, #0
 8004e18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e1a:	e169      	b.n	80050f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	fa02 f303 	lsl.w	r3, r2, r3
 8004e24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69fa      	ldr	r2, [r7, #28]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	f040 8158 	bne.w	80050ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	4a9a      	ldr	r2, [pc, #616]	; (80050a8 <HAL_GPIO_Init+0x2a0>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d05e      	beq.n	8004f02 <HAL_GPIO_Init+0xfa>
 8004e44:	4a98      	ldr	r2, [pc, #608]	; (80050a8 <HAL_GPIO_Init+0x2a0>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d875      	bhi.n	8004f36 <HAL_GPIO_Init+0x12e>
 8004e4a:	4a98      	ldr	r2, [pc, #608]	; (80050ac <HAL_GPIO_Init+0x2a4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d058      	beq.n	8004f02 <HAL_GPIO_Init+0xfa>
 8004e50:	4a96      	ldr	r2, [pc, #600]	; (80050ac <HAL_GPIO_Init+0x2a4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d86f      	bhi.n	8004f36 <HAL_GPIO_Init+0x12e>
 8004e56:	4a96      	ldr	r2, [pc, #600]	; (80050b0 <HAL_GPIO_Init+0x2a8>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d052      	beq.n	8004f02 <HAL_GPIO_Init+0xfa>
 8004e5c:	4a94      	ldr	r2, [pc, #592]	; (80050b0 <HAL_GPIO_Init+0x2a8>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d869      	bhi.n	8004f36 <HAL_GPIO_Init+0x12e>
 8004e62:	4a94      	ldr	r2, [pc, #592]	; (80050b4 <HAL_GPIO_Init+0x2ac>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d04c      	beq.n	8004f02 <HAL_GPIO_Init+0xfa>
 8004e68:	4a92      	ldr	r2, [pc, #584]	; (80050b4 <HAL_GPIO_Init+0x2ac>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d863      	bhi.n	8004f36 <HAL_GPIO_Init+0x12e>
 8004e6e:	4a92      	ldr	r2, [pc, #584]	; (80050b8 <HAL_GPIO_Init+0x2b0>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d046      	beq.n	8004f02 <HAL_GPIO_Init+0xfa>
 8004e74:	4a90      	ldr	r2, [pc, #576]	; (80050b8 <HAL_GPIO_Init+0x2b0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d85d      	bhi.n	8004f36 <HAL_GPIO_Init+0x12e>
 8004e7a:	2b12      	cmp	r3, #18
 8004e7c:	d82a      	bhi.n	8004ed4 <HAL_GPIO_Init+0xcc>
 8004e7e:	2b12      	cmp	r3, #18
 8004e80:	d859      	bhi.n	8004f36 <HAL_GPIO_Init+0x12e>
 8004e82:	a201      	add	r2, pc, #4	; (adr r2, 8004e88 <HAL_GPIO_Init+0x80>)
 8004e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e88:	08004f03 	.word	0x08004f03
 8004e8c:	08004edd 	.word	0x08004edd
 8004e90:	08004eef 	.word	0x08004eef
 8004e94:	08004f31 	.word	0x08004f31
 8004e98:	08004f37 	.word	0x08004f37
 8004e9c:	08004f37 	.word	0x08004f37
 8004ea0:	08004f37 	.word	0x08004f37
 8004ea4:	08004f37 	.word	0x08004f37
 8004ea8:	08004f37 	.word	0x08004f37
 8004eac:	08004f37 	.word	0x08004f37
 8004eb0:	08004f37 	.word	0x08004f37
 8004eb4:	08004f37 	.word	0x08004f37
 8004eb8:	08004f37 	.word	0x08004f37
 8004ebc:	08004f37 	.word	0x08004f37
 8004ec0:	08004f37 	.word	0x08004f37
 8004ec4:	08004f37 	.word	0x08004f37
 8004ec8:	08004f37 	.word	0x08004f37
 8004ecc:	08004ee5 	.word	0x08004ee5
 8004ed0:	08004ef9 	.word	0x08004ef9
 8004ed4:	4a79      	ldr	r2, [pc, #484]	; (80050bc <HAL_GPIO_Init+0x2b4>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d013      	beq.n	8004f02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004eda:	e02c      	b.n	8004f36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	623b      	str	r3, [r7, #32]
          break;
 8004ee2:	e029      	b.n	8004f38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	623b      	str	r3, [r7, #32]
          break;
 8004eec:	e024      	b.n	8004f38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	3308      	adds	r3, #8
 8004ef4:	623b      	str	r3, [r7, #32]
          break;
 8004ef6:	e01f      	b.n	8004f38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	330c      	adds	r3, #12
 8004efe:	623b      	str	r3, [r7, #32]
          break;
 8004f00:	e01a      	b.n	8004f38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d102      	bne.n	8004f10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004f0a:	2304      	movs	r3, #4
 8004f0c:	623b      	str	r3, [r7, #32]
          break;
 8004f0e:	e013      	b.n	8004f38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d105      	bne.n	8004f24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004f18:	2308      	movs	r3, #8
 8004f1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	69fa      	ldr	r2, [r7, #28]
 8004f20:	611a      	str	r2, [r3, #16]
          break;
 8004f22:	e009      	b.n	8004f38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004f24:	2308      	movs	r3, #8
 8004f26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	69fa      	ldr	r2, [r7, #28]
 8004f2c:	615a      	str	r2, [r3, #20]
          break;
 8004f2e:	e003      	b.n	8004f38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004f30:	2300      	movs	r3, #0
 8004f32:	623b      	str	r3, [r7, #32]
          break;
 8004f34:	e000      	b.n	8004f38 <HAL_GPIO_Init+0x130>
          break;
 8004f36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	2bff      	cmp	r3, #255	; 0xff
 8004f3c:	d801      	bhi.n	8004f42 <HAL_GPIO_Init+0x13a>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	e001      	b.n	8004f46 <HAL_GPIO_Init+0x13e>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	3304      	adds	r3, #4
 8004f46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	2bff      	cmp	r3, #255	; 0xff
 8004f4c:	d802      	bhi.n	8004f54 <HAL_GPIO_Init+0x14c>
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	e002      	b.n	8004f5a <HAL_GPIO_Init+0x152>
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	3b08      	subs	r3, #8
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	210f      	movs	r1, #15
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	fa01 f303 	lsl.w	r3, r1, r3
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	401a      	ands	r2, r3
 8004f6c:	6a39      	ldr	r1, [r7, #32]
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	fa01 f303 	lsl.w	r3, r1, r3
 8004f74:	431a      	orrs	r2, r3
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 80b1 	beq.w	80050ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004f88:	4b4d      	ldr	r3, [pc, #308]	; (80050c0 <HAL_GPIO_Init+0x2b8>)
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	4a4c      	ldr	r2, [pc, #304]	; (80050c0 <HAL_GPIO_Init+0x2b8>)
 8004f8e:	f043 0301 	orr.w	r3, r3, #1
 8004f92:	6193      	str	r3, [r2, #24]
 8004f94:	4b4a      	ldr	r3, [pc, #296]	; (80050c0 <HAL_GPIO_Init+0x2b8>)
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	60bb      	str	r3, [r7, #8]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004fa0:	4a48      	ldr	r2, [pc, #288]	; (80050c4 <HAL_GPIO_Init+0x2bc>)
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	089b      	lsrs	r3, r3, #2
 8004fa6:	3302      	adds	r3, #2
 8004fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb0:	f003 0303 	and.w	r3, r3, #3
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	220f      	movs	r2, #15
 8004fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbc:	43db      	mvns	r3, r3
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a40      	ldr	r2, [pc, #256]	; (80050c8 <HAL_GPIO_Init+0x2c0>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d013      	beq.n	8004ff4 <HAL_GPIO_Init+0x1ec>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a3f      	ldr	r2, [pc, #252]	; (80050cc <HAL_GPIO_Init+0x2c4>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d00d      	beq.n	8004ff0 <HAL_GPIO_Init+0x1e8>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a3e      	ldr	r2, [pc, #248]	; (80050d0 <HAL_GPIO_Init+0x2c8>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d007      	beq.n	8004fec <HAL_GPIO_Init+0x1e4>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a3d      	ldr	r2, [pc, #244]	; (80050d4 <HAL_GPIO_Init+0x2cc>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d101      	bne.n	8004fe8 <HAL_GPIO_Init+0x1e0>
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e006      	b.n	8004ff6 <HAL_GPIO_Init+0x1ee>
 8004fe8:	2304      	movs	r3, #4
 8004fea:	e004      	b.n	8004ff6 <HAL_GPIO_Init+0x1ee>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e002      	b.n	8004ff6 <HAL_GPIO_Init+0x1ee>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e000      	b.n	8004ff6 <HAL_GPIO_Init+0x1ee>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff8:	f002 0203 	and.w	r2, r2, #3
 8004ffc:	0092      	lsls	r2, r2, #2
 8004ffe:	4093      	lsls	r3, r2
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005006:	492f      	ldr	r1, [pc, #188]	; (80050c4 <HAL_GPIO_Init+0x2bc>)
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	089b      	lsrs	r3, r3, #2
 800500c:	3302      	adds	r3, #2
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d006      	beq.n	800502e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005020:	4b2d      	ldr	r3, [pc, #180]	; (80050d8 <HAL_GPIO_Init+0x2d0>)
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	492c      	ldr	r1, [pc, #176]	; (80050d8 <HAL_GPIO_Init+0x2d0>)
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	4313      	orrs	r3, r2
 800502a:	600b      	str	r3, [r1, #0]
 800502c:	e006      	b.n	800503c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800502e:	4b2a      	ldr	r3, [pc, #168]	; (80050d8 <HAL_GPIO_Init+0x2d0>)
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	43db      	mvns	r3, r3
 8005036:	4928      	ldr	r1, [pc, #160]	; (80050d8 <HAL_GPIO_Init+0x2d0>)
 8005038:	4013      	ands	r3, r2
 800503a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d006      	beq.n	8005056 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005048:	4b23      	ldr	r3, [pc, #140]	; (80050d8 <HAL_GPIO_Init+0x2d0>)
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	4922      	ldr	r1, [pc, #136]	; (80050d8 <HAL_GPIO_Init+0x2d0>)
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	4313      	orrs	r3, r2
 8005052:	604b      	str	r3, [r1, #4]
 8005054:	e006      	b.n	8005064 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005056:	4b20      	ldr	r3, [pc, #128]	; (80050d8 <HAL_GPIO_Init+0x2d0>)
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	43db      	mvns	r3, r3
 800505e:	491e      	ldr	r1, [pc, #120]	; (80050d8 <HAL_GPIO_Init+0x2d0>)
 8005060:	4013      	ands	r3, r2
 8005062:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d006      	beq.n	800507e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005070:	4b19      	ldr	r3, [pc, #100]	; (80050d8 <HAL_GPIO_Init+0x2d0>)
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	4918      	ldr	r1, [pc, #96]	; (80050d8 <HAL_GPIO_Init+0x2d0>)
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	4313      	orrs	r3, r2
 800507a:	608b      	str	r3, [r1, #8]
 800507c:	e006      	b.n	800508c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800507e:	4b16      	ldr	r3, [pc, #88]	; (80050d8 <HAL_GPIO_Init+0x2d0>)
 8005080:	689a      	ldr	r2, [r3, #8]
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	43db      	mvns	r3, r3
 8005086:	4914      	ldr	r1, [pc, #80]	; (80050d8 <HAL_GPIO_Init+0x2d0>)
 8005088:	4013      	ands	r3, r2
 800508a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d021      	beq.n	80050dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005098:	4b0f      	ldr	r3, [pc, #60]	; (80050d8 <HAL_GPIO_Init+0x2d0>)
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	490e      	ldr	r1, [pc, #56]	; (80050d8 <HAL_GPIO_Init+0x2d0>)
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60cb      	str	r3, [r1, #12]
 80050a4:	e021      	b.n	80050ea <HAL_GPIO_Init+0x2e2>
 80050a6:	bf00      	nop
 80050a8:	10320000 	.word	0x10320000
 80050ac:	10310000 	.word	0x10310000
 80050b0:	10220000 	.word	0x10220000
 80050b4:	10210000 	.word	0x10210000
 80050b8:	10120000 	.word	0x10120000
 80050bc:	10110000 	.word	0x10110000
 80050c0:	40021000 	.word	0x40021000
 80050c4:	40010000 	.word	0x40010000
 80050c8:	40010800 	.word	0x40010800
 80050cc:	40010c00 	.word	0x40010c00
 80050d0:	40011000 	.word	0x40011000
 80050d4:	40011400 	.word	0x40011400
 80050d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80050dc:	4b0b      	ldr	r3, [pc, #44]	; (800510c <HAL_GPIO_Init+0x304>)
 80050de:	68da      	ldr	r2, [r3, #12]
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	43db      	mvns	r3, r3
 80050e4:	4909      	ldr	r1, [pc, #36]	; (800510c <HAL_GPIO_Init+0x304>)
 80050e6:	4013      	ands	r3, r2
 80050e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	3301      	adds	r3, #1
 80050ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	fa22 f303 	lsr.w	r3, r2, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f47f ae8e 	bne.w	8004e1c <HAL_GPIO_Init+0x14>
  }
}
 8005100:	bf00      	nop
 8005102:	bf00      	nop
 8005104:	372c      	adds	r7, #44	; 0x2c
 8005106:	46bd      	mov	sp, r7
 8005108:	bc80      	pop	{r7}
 800510a:	4770      	bx	lr
 800510c:	40010400 	.word	0x40010400

08005110 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	460b      	mov	r3, r1
 800511a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	887b      	ldrh	r3, [r7, #2]
 8005122:	4013      	ands	r3, r2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d002      	beq.n	800512e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005128:	2301      	movs	r3, #1
 800512a:	73fb      	strb	r3, [r7, #15]
 800512c:	e001      	b.n	8005132 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800512e:	2300      	movs	r3, #0
 8005130:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005132:	7bfb      	ldrb	r3, [r7, #15]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3714      	adds	r7, #20
 8005138:	46bd      	mov	sp, r7
 800513a:	bc80      	pop	{r7}
 800513c:	4770      	bx	lr

0800513e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
 8005146:	460b      	mov	r3, r1
 8005148:	807b      	strh	r3, [r7, #2]
 800514a:	4613      	mov	r3, r2
 800514c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800514e:	787b      	ldrb	r3, [r7, #1]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005154:	887a      	ldrh	r2, [r7, #2]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800515a:	e003      	b.n	8005164 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800515c:	887b      	ldrh	r3, [r7, #2]
 800515e:	041a      	lsls	r2, r3, #16
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	611a      	str	r2, [r3, #16]
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	bc80      	pop	{r7}
 800516c:	4770      	bx	lr

0800516e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800516e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005170:	b08b      	sub	sp, #44	; 0x2c
 8005172:	af06      	add	r7, sp, #24
 8005174:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e0fd      	b.n	800537c <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d106      	bne.n	800519a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f006 fed9 	bl	800bf4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2203      	movs	r2, #3
 800519e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f003 f8dc 	bl	8008364 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	603b      	str	r3, [r7, #0]
 80051b2:	687e      	ldr	r6, [r7, #4]
 80051b4:	466d      	mov	r5, sp
 80051b6:	f106 0410 	add.w	r4, r6, #16
 80051ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051be:	6823      	ldr	r3, [r4, #0]
 80051c0:	602b      	str	r3, [r5, #0]
 80051c2:	1d33      	adds	r3, r6, #4
 80051c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051c6:	6838      	ldr	r0, [r7, #0]
 80051c8:	f003 f8a6 	bl	8008318 <USB_CoreInit>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d005      	beq.n	80051de <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2202      	movs	r2, #2
 80051d6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e0ce      	b.n	800537c <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2100      	movs	r1, #0
 80051e4:	4618      	mov	r0, r3
 80051e6:	f003 f8d7 	bl	8008398 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051ea:	2300      	movs	r3, #0
 80051ec:	73fb      	strb	r3, [r7, #15]
 80051ee:	e04c      	b.n	800528a <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
 80051f2:	6879      	ldr	r1, [r7, #4]
 80051f4:	1c5a      	adds	r2, r3, #1
 80051f6:	4613      	mov	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	440b      	add	r3, r1
 8005200:	3301      	adds	r3, #1
 8005202:	2201      	movs	r2, #1
 8005204:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005206:	7bfb      	ldrb	r3, [r7, #15]
 8005208:	6879      	ldr	r1, [r7, #4]
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	4613      	mov	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	440b      	add	r3, r1
 8005216:	7bfa      	ldrb	r2, [r7, #15]
 8005218:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800521a:	7bfa      	ldrb	r2, [r7, #15]
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	b298      	uxth	r0, r3
 8005220:	6879      	ldr	r1, [r7, #4]
 8005222:	4613      	mov	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	440b      	add	r3, r1
 800522c:	3336      	adds	r3, #54	; 0x36
 800522e:	4602      	mov	r2, r0
 8005230:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005232:	7bfb      	ldrb	r3, [r7, #15]
 8005234:	6879      	ldr	r1, [r7, #4]
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	4613      	mov	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	440b      	add	r3, r1
 8005242:	3303      	adds	r3, #3
 8005244:	2200      	movs	r2, #0
 8005246:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005248:	7bfa      	ldrb	r2, [r7, #15]
 800524a:	6879      	ldr	r1, [r7, #4]
 800524c:	4613      	mov	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	440b      	add	r3, r1
 8005256:	3338      	adds	r3, #56	; 0x38
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800525c:	7bfa      	ldrb	r2, [r7, #15]
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	4613      	mov	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	440b      	add	r3, r1
 800526a:	333c      	adds	r3, #60	; 0x3c
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005270:	7bfa      	ldrb	r2, [r7, #15]
 8005272:	6879      	ldr	r1, [r7, #4]
 8005274:	4613      	mov	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	440b      	add	r3, r1
 800527e:	3340      	adds	r3, #64	; 0x40
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005284:	7bfb      	ldrb	r3, [r7, #15]
 8005286:	3301      	adds	r3, #1
 8005288:	73fb      	strb	r3, [r7, #15]
 800528a:	7bfa      	ldrb	r2, [r7, #15]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	429a      	cmp	r2, r3
 8005292:	d3ad      	bcc.n	80051f0 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005294:	2300      	movs	r3, #0
 8005296:	73fb      	strb	r3, [r7, #15]
 8005298:	e044      	b.n	8005324 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800529a:	7bfa      	ldrb	r2, [r7, #15]
 800529c:	6879      	ldr	r1, [r7, #4]
 800529e:	4613      	mov	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4413      	add	r3, r2
 80052a4:	00db      	lsls	r3, r3, #3
 80052a6:	440b      	add	r3, r1
 80052a8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80052ac:	2200      	movs	r2, #0
 80052ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80052b0:	7bfa      	ldrb	r2, [r7, #15]
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	4613      	mov	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4413      	add	r3, r2
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	440b      	add	r3, r1
 80052be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80052c2:	7bfa      	ldrb	r2, [r7, #15]
 80052c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80052c6:	7bfa      	ldrb	r2, [r7, #15]
 80052c8:	6879      	ldr	r1, [r7, #4]
 80052ca:	4613      	mov	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4413      	add	r3, r2
 80052d0:	00db      	lsls	r3, r3, #3
 80052d2:	440b      	add	r3, r1
 80052d4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80052d8:	2200      	movs	r2, #0
 80052da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80052dc:	7bfa      	ldrb	r2, [r7, #15]
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	4613      	mov	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	440b      	add	r3, r1
 80052ea:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80052f2:	7bfa      	ldrb	r2, [r7, #15]
 80052f4:	6879      	ldr	r1, [r7, #4]
 80052f6:	4613      	mov	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	440b      	add	r3, r1
 8005300:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005304:	2200      	movs	r2, #0
 8005306:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005308:	7bfa      	ldrb	r2, [r7, #15]
 800530a:	6879      	ldr	r1, [r7, #4]
 800530c:	4613      	mov	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	440b      	add	r3, r1
 8005316:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800531e:	7bfb      	ldrb	r3, [r7, #15]
 8005320:	3301      	adds	r3, #1
 8005322:	73fb      	strb	r3, [r7, #15]
 8005324:	7bfa      	ldrb	r2, [r7, #15]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	429a      	cmp	r2, r3
 800532c:	d3b5      	bcc.n	800529a <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	603b      	str	r3, [r7, #0]
 8005334:	687e      	ldr	r6, [r7, #4]
 8005336:	466d      	mov	r5, sp
 8005338:	f106 0410 	add.w	r4, r6, #16
 800533c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800533e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005340:	6823      	ldr	r3, [r4, #0]
 8005342:	602b      	str	r3, [r5, #0]
 8005344:	1d33      	adds	r3, r6, #4
 8005346:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005348:	6838      	ldr	r0, [r7, #0]
 800534a:	f003 f831 	bl	80083b0 <USB_DevInit>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d005      	beq.n	8005360 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e00d      	b.n	800537c <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4618      	mov	r0, r3
 8005376:	f004 ffcb 	bl	800a310 <USB_DevDisconnect>

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005384 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005392:	2b01      	cmp	r3, #1
 8005394:	d101      	bne.n	800539a <HAL_PCD_Start+0x16>
 8005396:	2302      	movs	r3, #2
 8005398:	e016      	b.n	80053c8 <HAL_PCD_Start+0x44>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f002 ffc6 	bl	8008338 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80053ac:	2101      	movs	r1, #1
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f007 f83f 	bl	800c432 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f004 ff9f 	bl	800a2fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b088      	sub	sp, #32
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4618      	mov	r0, r3
 80053de:	f004 ffa1 	bl	800a324 <USB_ReadInterrupts>
 80053e2:	4603      	mov	r3, r0
 80053e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ec:	d102      	bne.n	80053f4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fb61 	bl	8005ab6 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f004 ff93 	bl	800a324 <USB_ReadInterrupts>
 80053fe:	4603      	mov	r3, r0
 8005400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005408:	d112      	bne.n	8005430 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005412:	b29a      	uxth	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800541c:	b292      	uxth	r2, r2
 800541e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f006 fe0d 	bl	800c042 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005428:	2100      	movs	r1, #0
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f925 	bl	800567a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4618      	mov	r0, r3
 8005436:	f004 ff75 	bl	800a324 <USB_ReadInterrupts>
 800543a:	4603      	mov	r3, r0
 800543c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005440:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005444:	d10b      	bne.n	800545e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800544e:	b29a      	uxth	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005458:	b292      	uxth	r2, r2
 800545a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4618      	mov	r0, r3
 8005464:	f004 ff5e 	bl	800a324 <USB_ReadInterrupts>
 8005468:	4603      	mov	r3, r0
 800546a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800546e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005472:	d10b      	bne.n	800548c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800547c:	b29a      	uxth	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005486:	b292      	uxth	r2, r2
 8005488:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4618      	mov	r0, r3
 8005492:	f004 ff47 	bl	800a324 <USB_ReadInterrupts>
 8005496:	4603      	mov	r3, r0
 8005498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800549c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054a0:	d126      	bne.n	80054f0 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0204 	bic.w	r2, r2, #4
 80054b4:	b292      	uxth	r2, r2
 80054b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0208 	bic.w	r2, r2, #8
 80054cc:	b292      	uxth	r2, r2
 80054ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f006 fdee 	bl	800c0b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054ea:	b292      	uxth	r2, r2
 80054ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f004 ff15 	bl	800a324 <USB_ReadInterrupts>
 80054fa:	4603      	mov	r3, r0
 80054fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005500:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005504:	f040 8084 	bne.w	8005610 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8005508:	2300      	movs	r3, #0
 800550a:	77fb      	strb	r3, [r7, #31]
 800550c:	e011      	b.n	8005532 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	7ffb      	ldrb	r3, [r7, #31]
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	441a      	add	r2, r3
 800551a:	7ffb      	ldrb	r3, [r7, #31]
 800551c:	8812      	ldrh	r2, [r2, #0]
 800551e:	b292      	uxth	r2, r2
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	f107 0120 	add.w	r1, r7, #32
 8005526:	440b      	add	r3, r1
 8005528:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800552c:	7ffb      	ldrb	r3, [r7, #31]
 800552e:	3301      	adds	r3, #1
 8005530:	77fb      	strb	r3, [r7, #31]
 8005532:	7ffb      	ldrb	r3, [r7, #31]
 8005534:	2b07      	cmp	r3, #7
 8005536:	d9ea      	bls.n	800550e <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005540:	b29a      	uxth	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f042 0201 	orr.w	r2, r2, #1
 800554a:	b292      	uxth	r2, r2
 800554c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005558:	b29a      	uxth	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0201 	bic.w	r2, r2, #1
 8005562:	b292      	uxth	r2, r2
 8005564:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005568:	bf00      	nop
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005572:	b29b      	uxth	r3, r3
 8005574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005578:	2b00      	cmp	r3, #0
 800557a:	d0f6      	beq.n	800556a <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005584:	b29a      	uxth	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800558e:	b292      	uxth	r2, r2
 8005590:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005594:	2300      	movs	r3, #0
 8005596:	77fb      	strb	r3, [r7, #31]
 8005598:	e010      	b.n	80055bc <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800559a:	7ffb      	ldrb	r3, [r7, #31]
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	6812      	ldr	r2, [r2, #0]
 80055a0:	4611      	mov	r1, r2
 80055a2:	7ffa      	ldrb	r2, [r7, #31]
 80055a4:	0092      	lsls	r2, r2, #2
 80055a6:	440a      	add	r2, r1
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	f107 0120 	add.w	r1, r7, #32
 80055ae:	440b      	add	r3, r1
 80055b0:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80055b4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80055b6:	7ffb      	ldrb	r3, [r7, #31]
 80055b8:	3301      	adds	r3, #1
 80055ba:	77fb      	strb	r3, [r7, #31]
 80055bc:	7ffb      	ldrb	r3, [r7, #31]
 80055be:	2b07      	cmp	r3, #7
 80055c0:	d9eb      	bls.n	800559a <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f042 0208 	orr.w	r2, r2, #8
 80055d4:	b292      	uxth	r2, r2
 80055d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055ec:	b292      	uxth	r2, r2
 80055ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f042 0204 	orr.w	r2, r2, #4
 8005604:	b292      	uxth	r2, r2
 8005606:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f006 fd38 	bl	800c080 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4618      	mov	r0, r3
 8005616:	f004 fe85 	bl	800a324 <USB_ReadInterrupts>
 800561a:	4603      	mov	r3, r0
 800561c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005624:	d10e      	bne.n	8005644 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800562e:	b29a      	uxth	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005638:	b292      	uxth	r2, r2
 800563a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f006 fcf1 	bl	800c026 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4618      	mov	r0, r3
 800564a:	f004 fe6b 	bl	800a324 <USB_ReadInterrupts>
 800564e:	4603      	mov	r3, r0
 8005650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005658:	d10b      	bne.n	8005672 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005662:	b29a      	uxth	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800566c:	b292      	uxth	r2, r2
 800566e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8005672:	bf00      	nop
 8005674:	3720      	adds	r7, #32
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b082      	sub	sp, #8
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
 8005682:	460b      	mov	r3, r1
 8005684:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800568c:	2b01      	cmp	r3, #1
 800568e:	d101      	bne.n	8005694 <HAL_PCD_SetAddress+0x1a>
 8005690:	2302      	movs	r3, #2
 8005692:	e013      	b.n	80056bc <HAL_PCD_SetAddress+0x42>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	78fa      	ldrb	r2, [r7, #3]
 80056a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	78fa      	ldrb	r2, [r7, #3]
 80056aa:	4611      	mov	r1, r2
 80056ac:	4618      	mov	r0, r3
 80056ae:	f004 fe12 	bl	800a2d6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3708      	adds	r7, #8
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	4608      	mov	r0, r1
 80056ce:	4611      	mov	r1, r2
 80056d0:	461a      	mov	r2, r3
 80056d2:	4603      	mov	r3, r0
 80056d4:	70fb      	strb	r3, [r7, #3]
 80056d6:	460b      	mov	r3, r1
 80056d8:	803b      	strh	r3, [r7, #0]
 80056da:	4613      	mov	r3, r2
 80056dc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80056de:	2300      	movs	r3, #0
 80056e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80056e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	da0e      	bge.n	8005708 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056ea:	78fb      	ldrb	r3, [r7, #3]
 80056ec:	f003 0307 	and.w	r3, r3, #7
 80056f0:	1c5a      	adds	r2, r3, #1
 80056f2:	4613      	mov	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	00db      	lsls	r3, r3, #3
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	4413      	add	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2201      	movs	r2, #1
 8005704:	705a      	strb	r2, [r3, #1]
 8005706:	e00e      	b.n	8005726 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005708:	78fb      	ldrb	r3, [r7, #3]
 800570a:	f003 0207 	and.w	r2, r3, #7
 800570e:	4613      	mov	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	00db      	lsls	r3, r3, #3
 8005716:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	4413      	add	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005726:	78fb      	ldrb	r3, [r7, #3]
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	b2da      	uxtb	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005732:	883a      	ldrh	r2, [r7, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	78ba      	ldrb	r2, [r7, #2]
 800573c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	785b      	ldrb	r3, [r3, #1]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d004      	beq.n	8005750 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	b29a      	uxth	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005750:	78bb      	ldrb	r3, [r7, #2]
 8005752:	2b02      	cmp	r3, #2
 8005754:	d102      	bne.n	800575c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005762:	2b01      	cmp	r3, #1
 8005764:	d101      	bne.n	800576a <HAL_PCD_EP_Open+0xa6>
 8005766:	2302      	movs	r3, #2
 8005768:	e00e      	b.n	8005788 <HAL_PCD_EP_Open+0xc4>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68f9      	ldr	r1, [r7, #12]
 8005778:	4618      	mov	r0, r3
 800577a:	f002 fe39 	bl	80083f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005786:	7afb      	ldrb	r3, [r7, #11]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	460b      	mov	r3, r1
 800579a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800579c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	da0e      	bge.n	80057c2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057a4:	78fb      	ldrb	r3, [r7, #3]
 80057a6:	f003 0307 	and.w	r3, r3, #7
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	4613      	mov	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	4413      	add	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2201      	movs	r2, #1
 80057be:	705a      	strb	r2, [r3, #1]
 80057c0:	e00e      	b.n	80057e0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057c2:	78fb      	ldrb	r3, [r7, #3]
 80057c4:	f003 0207 	and.w	r2, r3, #7
 80057c8:	4613      	mov	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	4413      	add	r3, r2
 80057d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80057e0:	78fb      	ldrb	r3, [r7, #3]
 80057e2:	f003 0307 	and.w	r3, r3, #7
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d101      	bne.n	80057fa <HAL_PCD_EP_Close+0x6a>
 80057f6:	2302      	movs	r3, #2
 80057f8:	e00e      	b.n	8005818 <HAL_PCD_EP_Close+0x88>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68f9      	ldr	r1, [r7, #12]
 8005808:	4618      	mov	r0, r3
 800580a:	f003 f95b 	bl	8008ac4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	607a      	str	r2, [r7, #4]
 800582a:	603b      	str	r3, [r7, #0]
 800582c:	460b      	mov	r3, r1
 800582e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005830:	7afb      	ldrb	r3, [r7, #11]
 8005832:	f003 0207 	and.w	r2, r3, #7
 8005836:	4613      	mov	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4413      	add	r3, r2
 800583c:	00db      	lsls	r3, r3, #3
 800583e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	4413      	add	r3, r2
 8005846:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	2200      	movs	r2, #0
 8005858:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2200      	movs	r2, #0
 800585e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005860:	7afb      	ldrb	r3, [r7, #11]
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	b2da      	uxtb	r2, r3
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800586c:	7afb      	ldrb	r3, [r7, #11]
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6979      	ldr	r1, [r7, #20]
 800587c:	4618      	mov	r0, r3
 800587e:	f003 fb0d 	bl	8008e9c <USB_EPStartXfer>
 8005882:	e005      	b.n	8005890 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6979      	ldr	r1, [r7, #20]
 800588a:	4618      	mov	r0, r3
 800588c:	f003 fb06 	bl	8008e9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3718      	adds	r7, #24
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800589a:	b480      	push	{r7}
 800589c:	b083      	sub	sp, #12
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
 80058a2:	460b      	mov	r3, r1
 80058a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80058a6:	78fb      	ldrb	r3, [r7, #3]
 80058a8:	f003 0207 	and.w	r2, r3, #7
 80058ac:	6879      	ldr	r1, [r7, #4]
 80058ae:	4613      	mov	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	00db      	lsls	r3, r3, #3
 80058b6:	440b      	add	r3, r1
 80058b8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80058bc:	681b      	ldr	r3, [r3, #0]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bc80      	pop	{r7}
 80058c6:	4770      	bx	lr

080058c8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	607a      	str	r2, [r7, #4]
 80058d2:	603b      	str	r3, [r7, #0]
 80058d4:	460b      	mov	r3, r1
 80058d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058d8:	7afb      	ldrb	r3, [r7, #11]
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	1c5a      	adds	r2, r3, #1
 80058e0:	4613      	mov	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4413      	add	r3, r2
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4413      	add	r3, r2
 80058ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2200      	movs	r2, #0
 800590c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2201      	movs	r2, #1
 8005912:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005914:	7afb      	ldrb	r3, [r7, #11]
 8005916:	f003 0307 	and.w	r3, r3, #7
 800591a:	b2da      	uxtb	r2, r3
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005920:	7afb      	ldrb	r3, [r7, #11]
 8005922:	f003 0307 	and.w	r3, r3, #7
 8005926:	2b00      	cmp	r3, #0
 8005928:	d106      	bne.n	8005938 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6979      	ldr	r1, [r7, #20]
 8005930:	4618      	mov	r0, r3
 8005932:	f003 fab3 	bl	8008e9c <USB_EPStartXfer>
 8005936:	e005      	b.n	8005944 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6979      	ldr	r1, [r7, #20]
 800593e:	4618      	mov	r0, r3
 8005940:	f003 faac 	bl	8008e9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b084      	sub	sp, #16
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
 8005956:	460b      	mov	r3, r1
 8005958:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800595a:	78fb      	ldrb	r3, [r7, #3]
 800595c:	f003 0207 	and.w	r2, r3, #7
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	429a      	cmp	r2, r3
 8005966:	d901      	bls.n	800596c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e04c      	b.n	8005a06 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800596c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005970:	2b00      	cmp	r3, #0
 8005972:	da0e      	bge.n	8005992 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005974:	78fb      	ldrb	r3, [r7, #3]
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	4613      	mov	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	4413      	add	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2201      	movs	r2, #1
 800598e:	705a      	strb	r2, [r3, #1]
 8005990:	e00c      	b.n	80059ac <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005992:	78fa      	ldrb	r2, [r7, #3]
 8005994:	4613      	mov	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	4413      	add	r3, r2
 80059a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2201      	movs	r2, #1
 80059b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059b2:	78fb      	ldrb	r3, [r7, #3]
 80059b4:	f003 0307 	and.w	r3, r3, #7
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d101      	bne.n	80059cc <HAL_PCD_EP_SetStall+0x7e>
 80059c8:	2302      	movs	r3, #2
 80059ca:	e01c      	b.n	8005a06 <HAL_PCD_EP_SetStall+0xb8>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68f9      	ldr	r1, [r7, #12]
 80059da:	4618      	mov	r0, r3
 80059dc:	f004 fb7e 	bl	800a0dc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80059e0:	78fb      	ldrb	r3, [r7, #3]
 80059e2:	f003 0307 	and.w	r3, r3, #7
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d108      	bne.n	80059fc <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80059f4:	4619      	mov	r1, r3
 80059f6:	4610      	mov	r0, r2
 80059f8:	f004 fca3 	bl	800a342 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	460b      	mov	r3, r1
 8005a18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005a1a:	78fb      	ldrb	r3, [r7, #3]
 8005a1c:	f003 020f 	and.w	r2, r3, #15
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d901      	bls.n	8005a2c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e040      	b.n	8005aae <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	da0e      	bge.n	8005a52 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a34:	78fb      	ldrb	r3, [r7, #3]
 8005a36:	f003 0307 	and.w	r3, r3, #7
 8005a3a:	1c5a      	adds	r2, r3, #1
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	4413      	add	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	705a      	strb	r2, [r3, #1]
 8005a50:	e00e      	b.n	8005a70 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a52:	78fb      	ldrb	r3, [r7, #3]
 8005a54:	f003 0207 	and.w	r2, r3, #7
 8005a58:	4613      	mov	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	4413      	add	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a76:	78fb      	ldrb	r3, [r7, #3]
 8005a78:	f003 0307 	and.w	r3, r3, #7
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d101      	bne.n	8005a90 <HAL_PCD_EP_ClrStall+0x82>
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	e00e      	b.n	8005aae <HAL_PCD_EP_ClrStall+0xa0>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68f9      	ldr	r1, [r7, #12]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f004 fb6c 	bl	800a17c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b08e      	sub	sp, #56	; 0x38
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005abe:	e2df      	b.n	8006080 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ac8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005aca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	f003 030f 	and.w	r3, r3, #15
 8005ad2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8005ad6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f040 8158 	bne.w	8005d90 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005ae0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005ae2:	f003 0310 	and.w	r3, r3, #16
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d152      	bne.n	8005b90 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afa:	81fb      	strh	r3, [r7, #14]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	89fb      	ldrh	r3, [r7, #14]
 8005b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	3328      	adds	r3, #40	; 0x28
 8005b12:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	461a      	mov	r2, r3
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	4413      	add	r3, r2
 8005b28:	3302      	adds	r3, #2
 8005b2a:	005b      	lsls	r3, r3, #1
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	6812      	ldr	r2, [r2, #0]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	695a      	ldr	r2, [r3, #20]
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	441a      	add	r2, r3
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005b4e:	2100      	movs	r1, #0
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f006 fa4e 	bl	800bff2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 828e 	beq.w	8006080 <PCD_EP_ISR_Handler+0x5ca>
 8005b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f040 8289 	bne.w	8006080 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	b292      	uxth	r2, r2
 8005b82:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005b8e:	e277      	b.n	8006080 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005ba0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d034      	beq.n	8005c14 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	4413      	add	r3, r2
 8005bbe:	3306      	adds	r3, #6
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	6812      	ldr	r2, [r2, #0]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6818      	ldr	r0, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	f004 fbfa 	bl	800a3e2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	823b      	strh	r3, [r7, #16]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	8a3a      	ldrh	r2, [r7, #16]
 8005c04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c08:	b292      	uxth	r2, r2
 8005c0a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f006 f9c3 	bl	800bf98 <HAL_PCD_SetupStageCallback>
 8005c12:	e235      	b.n	8006080 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005c14:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f280 8231 	bge.w	8006080 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	881b      	ldrh	r3, [r3, #0]
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	83bb      	strh	r3, [r7, #28]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	8bba      	ldrh	r2, [r7, #28]
 8005c34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c38:	b292      	uxth	r2, r2
 8005c3a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	461a      	mov	r2, r3
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	00db      	lsls	r3, r3, #3
 8005c4e:	4413      	add	r3, r2
 8005c50:	3306      	adds	r3, #6
 8005c52:	005b      	lsls	r3, r3, #1
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6812      	ldr	r2, [r2, #0]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c5e:	881b      	ldrh	r3, [r3, #0]
 8005c60:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c66:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	69db      	ldr	r3, [r3, #28]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d019      	beq.n	8005ca4 <PCD_EP_ISR_Handler+0x1ee>
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d015      	beq.n	8005ca4 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6818      	ldr	r0, [r3, #0]
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	6959      	ldr	r1, [r3, #20]
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	f004 fbaa 	bl	800a3e2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	695a      	ldr	r2, [r3, #20]
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	441a      	add	r2, r3
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f006 f98c 	bl	800bfbc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	61bb      	str	r3, [r7, #24]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	4413      	add	r3, r2
 8005cba:	61bb      	str	r3, [r7, #24]
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cc2:	617b      	str	r3, [r7, #20]
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d112      	bne.n	8005cf2 <PCD_EP_ISR_Handler+0x23c>
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	881b      	ldrh	r3, [r3, #0]
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	801a      	strh	r2, [r3, #0]
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ce6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	801a      	strh	r2, [r3, #0]
 8005cf0:	e02f      	b.n	8005d52 <PCD_EP_ISR_Handler+0x29c>
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	2b3e      	cmp	r3, #62	; 0x3e
 8005cf8:	d813      	bhi.n	8005d22 <PCD_EP_ISR_Handler+0x26c>
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	085b      	lsrs	r3, r3, #1
 8005d00:	633b      	str	r3, [r7, #48]	; 0x30
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d002      	beq.n	8005d14 <PCD_EP_ISR_Handler+0x25e>
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d10:	3301      	adds	r3, #1
 8005d12:	633b      	str	r3, [r7, #48]	; 0x30
 8005d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	029b      	lsls	r3, r3, #10
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	801a      	strh	r2, [r3, #0]
 8005d20:	e017      	b.n	8005d52 <PCD_EP_ISR_Handler+0x29c>
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	095b      	lsrs	r3, r3, #5
 8005d28:	633b      	str	r3, [r7, #48]	; 0x30
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f003 031f 	and.w	r3, r3, #31
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d102      	bne.n	8005d3c <PCD_EP_ISR_Handler+0x286>
 8005d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	633b      	str	r3, [r7, #48]	; 0x30
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	029b      	lsls	r3, r3, #10
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d62:	827b      	strh	r3, [r7, #18]
 8005d64:	8a7b      	ldrh	r3, [r7, #18]
 8005d66:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d6a:	827b      	strh	r3, [r7, #18]
 8005d6c:	8a7b      	ldrh	r3, [r7, #18]
 8005d6e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d72:	827b      	strh	r3, [r7, #18]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	8a7b      	ldrh	r3, [r7, #18]
 8005d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	8013      	strh	r3, [r2, #0]
 8005d8e:	e177      	b.n	8006080 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	461a      	mov	r2, r3
 8005d96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	881b      	ldrh	r3, [r3, #0]
 8005da0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005da2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f280 80ea 	bge.w	8005f80 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	461a      	mov	r2, r3
 8005db2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4413      	add	r3, r2
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	853b      	strh	r3, [r7, #40]	; 0x28
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4413      	add	r3, r2
 8005dd4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005dd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005dda:	b292      	uxth	r2, r2
 8005ddc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005dde:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	4413      	add	r3, r2
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	7b1b      	ldrb	r3, [r3, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d122      	bne.n	8005e42 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	461a      	mov	r2, r3
 8005e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	4413      	add	r3, r2
 8005e10:	3306      	adds	r3, #6
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	6812      	ldr	r2, [r2, #0]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e1e:	881b      	ldrh	r3, [r3, #0]
 8005e20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e24:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8005e26:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 8087 	beq.w	8005f3c <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6818      	ldr	r0, [r3, #0]
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	6959      	ldr	r1, [r3, #20]
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	88da      	ldrh	r2, [r3, #6]
 8005e3a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e3c:	f004 fad1 	bl	800a3e2 <USB_ReadPMA>
 8005e40:	e07c      	b.n	8005f3c <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e44:	78db      	ldrb	r3, [r3, #3]
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d108      	bne.n	8005e5c <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005e4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f923 	bl	800609c <HAL_PCD_EP_DB_Receive>
 8005e56:	4603      	mov	r3, r0
 8005e58:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005e5a:	e06f      	b.n	8005f3c <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	461a      	mov	r2, r3
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	4413      	add	r3, r2
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e76:	847b      	strh	r3, [r7, #34]	; 0x22
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	441a      	add	r2, r3
 8005e86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d021      	beq.n	8005efa <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	4413      	add	r3, r2
 8005eca:	3302      	adds	r3, #2
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	6812      	ldr	r2, [r2, #0]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ede:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005ee0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d02a      	beq.n	8005f3c <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6818      	ldr	r0, [r3, #0]
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	6959      	ldr	r1, [r3, #20]
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	891a      	ldrh	r2, [r3, #8]
 8005ef2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ef4:	f004 fa75 	bl	800a3e2 <USB_ReadPMA>
 8005ef8:	e020      	b.n	8005f3c <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	461a      	mov	r2, r3
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	4413      	add	r3, r2
 8005f0e:	3306      	adds	r3, #6
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	6812      	ldr	r2, [r2, #0]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f22:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005f24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d008      	beq.n	8005f3c <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6818      	ldr	r0, [r3, #0]
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	6959      	ldr	r1, [r3, #20]
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	895a      	ldrh	r2, [r3, #10]
 8005f36:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f38:	f004 fa53 	bl	800a3e2 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	69da      	ldr	r2, [r3, #28]
 8005f40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f42:	441a      	add	r2, r3
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	695a      	ldr	r2, [r3, #20]
 8005f4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f4e:	441a      	add	r2, r3
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d004      	beq.n	8005f66 <PCD_EP_ISR_Handler+0x4b0>
 8005f5c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d206      	bcs.n	8005f74 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f006 f825 	bl	800bfbc <HAL_PCD_DataOutStageCallback>
 8005f72:	e005      	b.n	8005f80 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f002 ff8e 	bl	8008e9c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005f80:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d07a      	beq.n	8006080 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8005f8a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	4613      	mov	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	00db      	lsls	r3, r3, #3
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb8:	843b      	strh	r3, [r7, #32]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	441a      	add	r2, r3
 8005fc8:	8c3b      	ldrh	r3, [r7, #32]
 8005fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	78db      	ldrb	r3, [r3, #3]
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d108      	bne.n	8005ff0 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d146      	bne.n	8006074 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005fe6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d141      	bne.n	8006074 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	00db      	lsls	r3, r3, #3
 8006002:	4413      	add	r3, r2
 8006004:	3302      	adds	r3, #2
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	6812      	ldr	r2, [r2, #0]
 800600c:	4413      	add	r3, r2
 800600e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006018:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	699a      	ldr	r2, [r3, #24]
 800601e:	8bfb      	ldrh	r3, [r7, #30]
 8006020:	429a      	cmp	r2, r3
 8006022:	d906      	bls.n	8006032 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	699a      	ldr	r2, [r3, #24]
 8006028:	8bfb      	ldrh	r3, [r7, #30]
 800602a:	1ad2      	subs	r2, r2, r3
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	619a      	str	r2, [r3, #24]
 8006030:	e002      	b.n	8006038 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	2200      	movs	r2, #0
 8006036:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d106      	bne.n	800604e <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	4619      	mov	r1, r3
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f005 ffd3 	bl	800bff2 <HAL_PCD_DataInStageCallback>
 800604c:	e018      	b.n	8006080 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	695a      	ldr	r2, [r3, #20]
 8006052:	8bfb      	ldrh	r3, [r7, #30]
 8006054:	441a      	add	r2, r3
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605c:	69da      	ldr	r2, [r3, #28]
 800605e:	8bfb      	ldrh	r3, [r7, #30]
 8006060:	441a      	add	r2, r3
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800606c:	4618      	mov	r0, r3
 800606e:	f002 ff15 	bl	8008e9c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8006072:	e005      	b.n	8006080 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006074:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006076:	461a      	mov	r2, r3
 8006078:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f91b 	bl	80062b6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006088:	b29b      	uxth	r3, r3
 800608a:	b21b      	sxth	r3, r3
 800608c:	2b00      	cmp	r3, #0
 800608e:	f6ff ad17 	blt.w	8005ac0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3738      	adds	r7, #56	; 0x38
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b088      	sub	sp, #32
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	4613      	mov	r3, r2
 80060a8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80060aa:	88fb      	ldrh	r3, [r7, #6]
 80060ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d07e      	beq.n	80061b2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060bc:	b29b      	uxth	r3, r3
 80060be:	461a      	mov	r2, r3
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	4413      	add	r3, r2
 80060c8:	3302      	adds	r3, #2
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	6812      	ldr	r2, [r2, #0]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060dc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	699a      	ldr	r2, [r3, #24]
 80060e2:	8b7b      	ldrh	r3, [r7, #26]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d306      	bcc.n	80060f6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	699a      	ldr	r2, [r3, #24]
 80060ec:	8b7b      	ldrh	r3, [r7, #26]
 80060ee:	1ad2      	subs	r2, r2, r3
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	619a      	str	r2, [r3, #24]
 80060f4:	e002      	b.n	80060fc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	2200      	movs	r2, #0
 80060fa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d123      	bne.n	800614c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	461a      	mov	r2, r3
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	b29b      	uxth	r3, r3
 8006116:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800611a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800611e:	833b      	strh	r3, [r7, #24]
 8006120:	8b3b      	ldrh	r3, [r7, #24]
 8006122:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006126:	833b      	strh	r3, [r7, #24]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	461a      	mov	r2, r3
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	441a      	add	r2, r3
 8006136:	8b3b      	ldrh	r3, [r7, #24]
 8006138:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800613c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006140:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006148:	b29b      	uxth	r3, r3
 800614a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800614c:	88fb      	ldrh	r3, [r7, #6]
 800614e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006152:	2b00      	cmp	r3, #0
 8006154:	d01f      	beq.n	8006196 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	461a      	mov	r2, r3
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	b29b      	uxth	r3, r3
 8006168:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800616c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006170:	82fb      	strh	r3, [r7, #22]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	461a      	mov	r2, r3
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	441a      	add	r2, r3
 8006180:	8afb      	ldrh	r3, [r7, #22]
 8006182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800618a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800618e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006192:	b29b      	uxth	r3, r3
 8006194:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006196:	8b7b      	ldrh	r3, [r7, #26]
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 8087 	beq.w	80062ac <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6818      	ldr	r0, [r3, #0]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	6959      	ldr	r1, [r3, #20]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	891a      	ldrh	r2, [r3, #8]
 80061aa:	8b7b      	ldrh	r3, [r7, #26]
 80061ac:	f004 f919 	bl	800a3e2 <USB_ReadPMA>
 80061b0:	e07c      	b.n	80062ac <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	461a      	mov	r2, r3
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	00db      	lsls	r3, r3, #3
 80061c4:	4413      	add	r3, r2
 80061c6:	3306      	adds	r3, #6
 80061c8:	005b      	lsls	r3, r3, #1
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	6812      	ldr	r2, [r2, #0]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061da:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	699a      	ldr	r2, [r3, #24]
 80061e0:	8b7b      	ldrh	r3, [r7, #26]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d306      	bcc.n	80061f4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	699a      	ldr	r2, [r3, #24]
 80061ea:	8b7b      	ldrh	r3, [r7, #26]
 80061ec:	1ad2      	subs	r2, r2, r3
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	619a      	str	r2, [r3, #24]
 80061f2:	e002      	b.n	80061fa <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2200      	movs	r2, #0
 80061f8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d123      	bne.n	800624a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	b29b      	uxth	r3, r3
 8006214:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621c:	83fb      	strh	r3, [r7, #30]
 800621e:	8bfb      	ldrh	r3, [r7, #30]
 8006220:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006224:	83fb      	strh	r3, [r7, #30]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	461a      	mov	r2, r3
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	441a      	add	r2, r3
 8006234:	8bfb      	ldrh	r3, [r7, #30]
 8006236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800623a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800623e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006246:	b29b      	uxth	r3, r3
 8006248:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800624a:	88fb      	ldrh	r3, [r7, #6]
 800624c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006250:	2b00      	cmp	r3, #0
 8006252:	d11f      	bne.n	8006294 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	461a      	mov	r2, r3
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	881b      	ldrh	r3, [r3, #0]
 8006264:	b29b      	uxth	r3, r3
 8006266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626e:	83bb      	strh	r3, [r7, #28]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	461a      	mov	r2, r3
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	441a      	add	r2, r3
 800627e:	8bbb      	ldrh	r3, [r7, #28]
 8006280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800628c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006290:	b29b      	uxth	r3, r3
 8006292:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006294:	8b7b      	ldrh	r3, [r7, #26]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d008      	beq.n	80062ac <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6818      	ldr	r0, [r3, #0]
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	6959      	ldr	r1, [r3, #20]
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	895a      	ldrh	r2, [r3, #10]
 80062a6:	8b7b      	ldrh	r3, [r7, #26]
 80062a8:	f004 f89b 	bl	800a3e2 <USB_ReadPMA>
    }
  }

  return count;
 80062ac:	8b7b      	ldrh	r3, [r7, #26]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3720      	adds	r7, #32
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b094      	sub	sp, #80	; 0x50
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	60f8      	str	r0, [r7, #12]
 80062be:	60b9      	str	r1, [r7, #8]
 80062c0:	4613      	mov	r3, r2
 80062c2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80062c4:	88fb      	ldrh	r3, [r7, #6]
 80062c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 8138 	beq.w	8006540 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062d8:	b29b      	uxth	r3, r3
 80062da:	461a      	mov	r2, r3
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	4413      	add	r3, r2
 80062e4:	3302      	adds	r3, #2
 80062e6:	005b      	lsls	r3, r3, #1
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	6812      	ldr	r2, [r2, #0]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062f2:	881b      	ldrh	r3, [r3, #0]
 80062f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062f8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	699a      	ldr	r2, [r3, #24]
 8006300:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006304:	429a      	cmp	r2, r3
 8006306:	d907      	bls.n	8006318 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	699a      	ldr	r2, [r3, #24]
 800630c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006310:	1ad2      	subs	r2, r2, r3
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	619a      	str	r2, [r3, #24]
 8006316:	e002      	b.n	800631e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2200      	movs	r2, #0
 800631c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d12c      	bne.n	8006380 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	4619      	mov	r1, r3
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f005 fe60 	bl	800bff2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006332:	88fb      	ldrh	r3, [r7, #6]
 8006334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 823a 	beq.w	80067b2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	461a      	mov	r2, r3
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	b29b      	uxth	r3, r3
 8006350:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006358:	82fb      	strh	r3, [r7, #22]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	461a      	mov	r2, r3
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	441a      	add	r2, r3
 8006368:	8afb      	ldrh	r3, [r7, #22]
 800636a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800636e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006372:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800637a:	b29b      	uxth	r3, r3
 800637c:	8013      	strh	r3, [r2, #0]
 800637e:	e218      	b.n	80067b2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006380:	88fb      	ldrh	r3, [r7, #6]
 8006382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d01f      	beq.n	80063ca <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	461a      	mov	r2, r3
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	b29b      	uxth	r3, r3
 800639c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	461a      	mov	r2, r3
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	441a      	add	r2, r3
 80063b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80063b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	f040 81ee 	bne.w	80067b2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	695a      	ldr	r2, [r3, #20]
 80063da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80063de:	441a      	add	r2, r3
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	69da      	ldr	r2, [r3, #28]
 80063e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80063ec:	441a      	add	r2, r3
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	6a1a      	ldr	r2, [r3, #32]
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d309      	bcc.n	8006412 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	6a1a      	ldr	r2, [r3, #32]
 8006408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800640a:	1ad2      	subs	r2, r2, r3
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	621a      	str	r2, [r3, #32]
 8006410:	e015      	b.n	800643e <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d107      	bne.n	800642a <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 800641a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800641e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006428:	e009      	b.n	800643e <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	2200      	movs	r2, #0
 800643c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	785b      	ldrb	r3, [r3, #1]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d155      	bne.n	80064f2 <HAL_PCD_EP_DB_Transmit+0x23c>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	61fb      	str	r3, [r7, #28]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006454:	b29b      	uxth	r3, r3
 8006456:	461a      	mov	r2, r3
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	4413      	add	r3, r2
 800645c:	61fb      	str	r3, [r7, #28]
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	011a      	lsls	r2, r3, #4
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	4413      	add	r3, r2
 8006468:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800646c:	61bb      	str	r3, [r7, #24]
 800646e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006470:	2b00      	cmp	r3, #0
 8006472:	d112      	bne.n	800649a <HAL_PCD_EP_DB_Transmit+0x1e4>
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	881b      	ldrh	r3, [r3, #0]
 8006478:	b29b      	uxth	r3, r3
 800647a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800647e:	b29a      	uxth	r2, r3
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	801a      	strh	r2, [r3, #0]
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	b29b      	uxth	r3, r3
 800648a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800648e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006492:	b29a      	uxth	r2, r3
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	801a      	strh	r2, [r3, #0]
 8006498:	e047      	b.n	800652a <HAL_PCD_EP_DB_Transmit+0x274>
 800649a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800649c:	2b3e      	cmp	r3, #62	; 0x3e
 800649e:	d811      	bhi.n	80064c4 <HAL_PCD_EP_DB_Transmit+0x20e>
 80064a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064a2:	085b      	lsrs	r3, r3, #1
 80064a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <HAL_PCD_EP_DB_Transmit+0x200>
 80064b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b2:	3301      	adds	r3, #1
 80064b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	029b      	lsls	r3, r3, #10
 80064bc:	b29a      	uxth	r2, r3
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	801a      	strh	r2, [r3, #0]
 80064c2:	e032      	b.n	800652a <HAL_PCD_EP_DB_Transmit+0x274>
 80064c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064c6:	095b      	lsrs	r3, r3, #5
 80064c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064cc:	f003 031f 	and.w	r3, r3, #31
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d102      	bne.n	80064da <HAL_PCD_EP_DB_Transmit+0x224>
 80064d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d6:	3b01      	subs	r3, #1
 80064d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064dc:	b29b      	uxth	r3, r3
 80064de:	029b      	lsls	r3, r3, #10
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	801a      	strh	r2, [r3, #0]
 80064f0:	e01b      	b.n	800652a <HAL_PCD_EP_DB_Transmit+0x274>
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	785b      	ldrb	r3, [r3, #1]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d117      	bne.n	800652a <HAL_PCD_EP_DB_Transmit+0x274>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006508:	b29b      	uxth	r3, r3
 800650a:	461a      	mov	r2, r3
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	4413      	add	r3, r2
 8006510:	627b      	str	r3, [r7, #36]	; 0x24
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	011a      	lsls	r2, r3, #4
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	4413      	add	r3, r2
 800651c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006520:	623b      	str	r3, [r7, #32]
 8006522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006524:	b29a      	uxth	r2, r3
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6818      	ldr	r0, [r3, #0]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	6959      	ldr	r1, [r3, #20]
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	891a      	ldrh	r2, [r3, #8]
 8006536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006538:	b29b      	uxth	r3, r3
 800653a:	f003 ff0d 	bl	800a358 <USB_WritePMA>
 800653e:	e138      	b.n	80067b2 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006548:	b29b      	uxth	r3, r3
 800654a:	461a      	mov	r2, r3
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	00db      	lsls	r3, r3, #3
 8006552:	4413      	add	r3, r2
 8006554:	3306      	adds	r3, #6
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	6812      	ldr	r2, [r2, #0]
 800655c:	4413      	add	r3, r2
 800655e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006562:	881b      	ldrh	r3, [r3, #0]
 8006564:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006568:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	699a      	ldr	r2, [r3, #24]
 8006570:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006574:	429a      	cmp	r2, r3
 8006576:	d307      	bcc.n	8006588 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	699a      	ldr	r2, [r3, #24]
 800657c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006580:	1ad2      	subs	r2, r2, r3
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	619a      	str	r2, [r3, #24]
 8006586:	e002      	b.n	800658e <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2200      	movs	r2, #0
 800658c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d12e      	bne.n	80065f4 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	4619      	mov	r1, r3
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f005 fd28 	bl	800bff2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80065a2:	88fb      	ldrh	r3, [r7, #6]
 80065a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f040 8102 	bne.w	80067b2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	461a      	mov	r2, r3
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065c8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	461a      	mov	r2, r3
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	441a      	add	r2, r3
 80065da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80065de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	8013      	strh	r3, [r2, #0]
 80065f2:	e0de      	b.n	80067b2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80065f4:	88fb      	ldrh	r3, [r7, #6]
 80065f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d11f      	bne.n	800663e <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	461a      	mov	r2, r3
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	b29b      	uxth	r3, r3
 8006610:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006618:	867b      	strh	r3, [r7, #50]	; 0x32
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	461a      	mov	r2, r3
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	441a      	add	r2, r3
 8006628:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800662a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800662e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006632:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800663a:	b29b      	uxth	r3, r3
 800663c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006644:	2b01      	cmp	r3, #1
 8006646:	f040 80b4 	bne.w	80067b2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	695a      	ldr	r2, [r3, #20]
 800664e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006652:	441a      	add	r2, r3
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	69da      	ldr	r2, [r3, #28]
 800665c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006660:	441a      	add	r2, r3
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	6a1a      	ldr	r2, [r3, #32]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	429a      	cmp	r2, r3
 8006670:	d309      	bcc.n	8006686 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	6a1a      	ldr	r2, [r3, #32]
 800667c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800667e:	1ad2      	subs	r2, r2, r3
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	621a      	str	r2, [r3, #32]
 8006684:	e015      	b.n	80066b2 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d107      	bne.n	800669e <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 800668e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006692:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800669c:	e009      	b.n	80066b2 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2200      	movs	r2, #0
 80066a8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	643b      	str	r3, [r7, #64]	; 0x40
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	785b      	ldrb	r3, [r3, #1]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d155      	bne.n	800676c <HAL_PCD_EP_DB_Transmit+0x4b6>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	461a      	mov	r2, r3
 80066d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d4:	4413      	add	r3, r2
 80066d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	011a      	lsls	r2, r3, #4
 80066de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e0:	4413      	add	r3, r2
 80066e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066e6:	637b      	str	r3, [r7, #52]	; 0x34
 80066e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d112      	bne.n	8006714 <HAL_PCD_EP_DB_Transmit+0x45e>
 80066ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066fc:	801a      	strh	r2, [r3, #0]
 80066fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006700:	881b      	ldrh	r3, [r3, #0]
 8006702:	b29b      	uxth	r3, r3
 8006704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800670c:	b29a      	uxth	r2, r3
 800670e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006710:	801a      	strh	r2, [r3, #0]
 8006712:	e044      	b.n	800679e <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006716:	2b3e      	cmp	r3, #62	; 0x3e
 8006718:	d811      	bhi.n	800673e <HAL_PCD_EP_DB_Transmit+0x488>
 800671a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800671c:	085b      	lsrs	r3, r3, #1
 800671e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b00      	cmp	r3, #0
 8006728:	d002      	beq.n	8006730 <HAL_PCD_EP_DB_Transmit+0x47a>
 800672a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800672c:	3301      	adds	r3, #1
 800672e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006732:	b29b      	uxth	r3, r3
 8006734:	029b      	lsls	r3, r3, #10
 8006736:	b29a      	uxth	r2, r3
 8006738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800673a:	801a      	strh	r2, [r3, #0]
 800673c:	e02f      	b.n	800679e <HAL_PCD_EP_DB_Transmit+0x4e8>
 800673e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006740:	095b      	lsrs	r3, r3, #5
 8006742:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006746:	f003 031f 	and.w	r3, r3, #31
 800674a:	2b00      	cmp	r3, #0
 800674c:	d102      	bne.n	8006754 <HAL_PCD_EP_DB_Transmit+0x49e>
 800674e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006750:	3b01      	subs	r3, #1
 8006752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006756:	b29b      	uxth	r3, r3
 8006758:	029b      	lsls	r3, r3, #10
 800675a:	b29b      	uxth	r3, r3
 800675c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006764:	b29a      	uxth	r2, r3
 8006766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006768:	801a      	strh	r2, [r3, #0]
 800676a:	e018      	b.n	800679e <HAL_PCD_EP_DB_Transmit+0x4e8>
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	785b      	ldrb	r3, [r3, #1]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d114      	bne.n	800679e <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800677c:	b29b      	uxth	r3, r3
 800677e:	461a      	mov	r2, r3
 8006780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006782:	4413      	add	r3, r2
 8006784:	643b      	str	r3, [r7, #64]	; 0x40
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	011a      	lsls	r2, r3, #4
 800678c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800678e:	4413      	add	r3, r2
 8006790:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006794:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006798:	b29a      	uxth	r2, r3
 800679a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800679c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6818      	ldr	r0, [r3, #0]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	6959      	ldr	r1, [r3, #20]
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	895a      	ldrh	r2, [r3, #10]
 80067aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	f003 fdd3 	bl	800a358 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	461a      	mov	r2, r3
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	881b      	ldrh	r3, [r3, #0]
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067cc:	82bb      	strh	r3, [r7, #20]
 80067ce:	8abb      	ldrh	r3, [r7, #20]
 80067d0:	f083 0310 	eor.w	r3, r3, #16
 80067d4:	82bb      	strh	r3, [r7, #20]
 80067d6:	8abb      	ldrh	r3, [r7, #20]
 80067d8:	f083 0320 	eor.w	r3, r3, #32
 80067dc:	82bb      	strh	r3, [r7, #20]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	441a      	add	r2, r3
 80067ec:	8abb      	ldrh	r3, [r7, #20]
 80067ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067fe:	b29b      	uxth	r3, r3
 8006800:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3750      	adds	r7, #80	; 0x50
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800680c:	b480      	push	{r7}
 800680e:	b087      	sub	sp, #28
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	607b      	str	r3, [r7, #4]
 8006816:	460b      	mov	r3, r1
 8006818:	817b      	strh	r3, [r7, #10]
 800681a:	4613      	mov	r3, r2
 800681c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800681e:	897b      	ldrh	r3, [r7, #10]
 8006820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006824:	b29b      	uxth	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00b      	beq.n	8006842 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800682a:	897b      	ldrh	r3, [r7, #10]
 800682c:	f003 0307 	and.w	r3, r3, #7
 8006830:	1c5a      	adds	r2, r3, #1
 8006832:	4613      	mov	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4413      	add	r3, r2
 8006838:	00db      	lsls	r3, r3, #3
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	4413      	add	r3, r2
 800683e:	617b      	str	r3, [r7, #20]
 8006840:	e009      	b.n	8006856 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006842:	897a      	ldrh	r2, [r7, #10]
 8006844:	4613      	mov	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	00db      	lsls	r3, r3, #3
 800684c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	4413      	add	r3, r2
 8006854:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006856:	893b      	ldrh	r3, [r7, #8]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d107      	bne.n	800686c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	2200      	movs	r2, #0
 8006860:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	b29a      	uxth	r2, r3
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	80da      	strh	r2, [r3, #6]
 800686a:	e00b      	b.n	8006884 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	2201      	movs	r2, #1
 8006870:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	b29a      	uxth	r2, r3
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	0c1b      	lsrs	r3, r3, #16
 800687e:	b29a      	uxth	r2, r3
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	371c      	adds	r7, #28
 800688a:	46bd      	mov	sp, r7
 800688c:	bc80      	pop	{r7}
 800688e:	4770      	bx	lr

08006890 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e26c      	b.n	8006d7c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 8087 	beq.w	80069be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80068b0:	4b92      	ldr	r3, [pc, #584]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f003 030c 	and.w	r3, r3, #12
 80068b8:	2b04      	cmp	r3, #4
 80068ba:	d00c      	beq.n	80068d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80068bc:	4b8f      	ldr	r3, [pc, #572]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f003 030c 	and.w	r3, r3, #12
 80068c4:	2b08      	cmp	r3, #8
 80068c6:	d112      	bne.n	80068ee <HAL_RCC_OscConfig+0x5e>
 80068c8:	4b8c      	ldr	r3, [pc, #560]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068d4:	d10b      	bne.n	80068ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d6:	4b89      	ldr	r3, [pc, #548]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d06c      	beq.n	80069bc <HAL_RCC_OscConfig+0x12c>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d168      	bne.n	80069bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e246      	b.n	8006d7c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f6:	d106      	bne.n	8006906 <HAL_RCC_OscConfig+0x76>
 80068f8:	4b80      	ldr	r3, [pc, #512]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a7f      	ldr	r2, [pc, #508]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 80068fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006902:	6013      	str	r3, [r2, #0]
 8006904:	e02e      	b.n	8006964 <HAL_RCC_OscConfig+0xd4>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10c      	bne.n	8006928 <HAL_RCC_OscConfig+0x98>
 800690e:	4b7b      	ldr	r3, [pc, #492]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a7a      	ldr	r2, [pc, #488]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006918:	6013      	str	r3, [r2, #0]
 800691a:	4b78      	ldr	r3, [pc, #480]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a77      	ldr	r2, [pc, #476]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006920:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006924:	6013      	str	r3, [r2, #0]
 8006926:	e01d      	b.n	8006964 <HAL_RCC_OscConfig+0xd4>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006930:	d10c      	bne.n	800694c <HAL_RCC_OscConfig+0xbc>
 8006932:	4b72      	ldr	r3, [pc, #456]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a71      	ldr	r2, [pc, #452]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800693c:	6013      	str	r3, [r2, #0]
 800693e:	4b6f      	ldr	r3, [pc, #444]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a6e      	ldr	r2, [pc, #440]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006948:	6013      	str	r3, [r2, #0]
 800694a:	e00b      	b.n	8006964 <HAL_RCC_OscConfig+0xd4>
 800694c:	4b6b      	ldr	r3, [pc, #428]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a6a      	ldr	r2, [pc, #424]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	4b68      	ldr	r3, [pc, #416]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a67      	ldr	r2, [pc, #412]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 800695e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006962:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d013      	beq.n	8006994 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800696c:	f7fd fa64 	bl	8003e38 <HAL_GetTick>
 8006970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006972:	e008      	b.n	8006986 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006974:	f7fd fa60 	bl	8003e38 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b64      	cmp	r3, #100	; 0x64
 8006980:	d901      	bls.n	8006986 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e1fa      	b.n	8006d7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006986:	4b5d      	ldr	r3, [pc, #372]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d0f0      	beq.n	8006974 <HAL_RCC_OscConfig+0xe4>
 8006992:	e014      	b.n	80069be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006994:	f7fd fa50 	bl	8003e38 <HAL_GetTick>
 8006998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800699a:	e008      	b.n	80069ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800699c:	f7fd fa4c 	bl	8003e38 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	2b64      	cmp	r3, #100	; 0x64
 80069a8:	d901      	bls.n	80069ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e1e6      	b.n	8006d7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069ae:	4b53      	ldr	r3, [pc, #332]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1f0      	bne.n	800699c <HAL_RCC_OscConfig+0x10c>
 80069ba:	e000      	b.n	80069be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d063      	beq.n	8006a92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80069ca:	4b4c      	ldr	r3, [pc, #304]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f003 030c 	and.w	r3, r3, #12
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00b      	beq.n	80069ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80069d6:	4b49      	ldr	r3, [pc, #292]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	f003 030c 	and.w	r3, r3, #12
 80069de:	2b08      	cmp	r3, #8
 80069e0:	d11c      	bne.n	8006a1c <HAL_RCC_OscConfig+0x18c>
 80069e2:	4b46      	ldr	r3, [pc, #280]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d116      	bne.n	8006a1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069ee:	4b43      	ldr	r3, [pc, #268]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d005      	beq.n	8006a06 <HAL_RCC_OscConfig+0x176>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d001      	beq.n	8006a06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e1ba      	b.n	8006d7c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a06:	4b3d      	ldr	r3, [pc, #244]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	00db      	lsls	r3, r3, #3
 8006a14:	4939      	ldr	r1, [pc, #228]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a1a:	e03a      	b.n	8006a92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d020      	beq.n	8006a66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a24:	4b36      	ldr	r3, [pc, #216]	; (8006b00 <HAL_RCC_OscConfig+0x270>)
 8006a26:	2201      	movs	r2, #1
 8006a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a2a:	f7fd fa05 	bl	8003e38 <HAL_GetTick>
 8006a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a30:	e008      	b.n	8006a44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a32:	f7fd fa01 	bl	8003e38 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d901      	bls.n	8006a44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e19b      	b.n	8006d7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a44:	4b2d      	ldr	r3, [pc, #180]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0302 	and.w	r3, r3, #2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d0f0      	beq.n	8006a32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a50:	4b2a      	ldr	r3, [pc, #168]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	00db      	lsls	r3, r3, #3
 8006a5e:	4927      	ldr	r1, [pc, #156]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	600b      	str	r3, [r1, #0]
 8006a64:	e015      	b.n	8006a92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a66:	4b26      	ldr	r3, [pc, #152]	; (8006b00 <HAL_RCC_OscConfig+0x270>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a6c:	f7fd f9e4 	bl	8003e38 <HAL_GetTick>
 8006a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a72:	e008      	b.n	8006a86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a74:	f7fd f9e0 	bl	8003e38 <HAL_GetTick>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d901      	bls.n	8006a86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e17a      	b.n	8006d7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a86:	4b1d      	ldr	r3, [pc, #116]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0302 	and.w	r3, r3, #2
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1f0      	bne.n	8006a74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0308 	and.w	r3, r3, #8
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d03a      	beq.n	8006b14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d019      	beq.n	8006ada <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006aa6:	4b17      	ldr	r3, [pc, #92]	; (8006b04 <HAL_RCC_OscConfig+0x274>)
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006aac:	f7fd f9c4 	bl	8003e38 <HAL_GetTick>
 8006ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ab2:	e008      	b.n	8006ac6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ab4:	f7fd f9c0 	bl	8003e38 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d901      	bls.n	8006ac6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e15a      	b.n	8006d7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ac6:	4b0d      	ldr	r3, [pc, #52]	; (8006afc <HAL_RCC_OscConfig+0x26c>)
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aca:	f003 0302 	and.w	r3, r3, #2
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d0f0      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006ad2:	2001      	movs	r0, #1
 8006ad4:	f000 fac4 	bl	8007060 <RCC_Delay>
 8006ad8:	e01c      	b.n	8006b14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ada:	4b0a      	ldr	r3, [pc, #40]	; (8006b04 <HAL_RCC_OscConfig+0x274>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ae0:	f7fd f9aa 	bl	8003e38 <HAL_GetTick>
 8006ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ae6:	e00f      	b.n	8006b08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ae8:	f7fd f9a6 	bl	8003e38 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d908      	bls.n	8006b08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e140      	b.n	8006d7c <HAL_RCC_OscConfig+0x4ec>
 8006afa:	bf00      	nop
 8006afc:	40021000 	.word	0x40021000
 8006b00:	42420000 	.word	0x42420000
 8006b04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b08:	4b9e      	ldr	r3, [pc, #632]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0c:	f003 0302 	and.w	r3, r3, #2
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1e9      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0304 	and.w	r3, r3, #4
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 80a6 	beq.w	8006c6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b22:	2300      	movs	r3, #0
 8006b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b26:	4b97      	ldr	r3, [pc, #604]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10d      	bne.n	8006b4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b32:	4b94      	ldr	r3, [pc, #592]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	4a93      	ldr	r2, [pc, #588]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b3c:	61d3      	str	r3, [r2, #28]
 8006b3e:	4b91      	ldr	r3, [pc, #580]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b46:	60bb      	str	r3, [r7, #8]
 8006b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b4e:	4b8e      	ldr	r3, [pc, #568]	; (8006d88 <HAL_RCC_OscConfig+0x4f8>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d118      	bne.n	8006b8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b5a:	4b8b      	ldr	r3, [pc, #556]	; (8006d88 <HAL_RCC_OscConfig+0x4f8>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a8a      	ldr	r2, [pc, #552]	; (8006d88 <HAL_RCC_OscConfig+0x4f8>)
 8006b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b66:	f7fd f967 	bl	8003e38 <HAL_GetTick>
 8006b6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b6c:	e008      	b.n	8006b80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b6e:	f7fd f963 	bl	8003e38 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	2b64      	cmp	r3, #100	; 0x64
 8006b7a:	d901      	bls.n	8006b80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e0fd      	b.n	8006d7c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b80:	4b81      	ldr	r3, [pc, #516]	; (8006d88 <HAL_RCC_OscConfig+0x4f8>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d0f0      	beq.n	8006b6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d106      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x312>
 8006b94:	4b7b      	ldr	r3, [pc, #492]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006b96:	6a1b      	ldr	r3, [r3, #32]
 8006b98:	4a7a      	ldr	r2, [pc, #488]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006b9a:	f043 0301 	orr.w	r3, r3, #1
 8006b9e:	6213      	str	r3, [r2, #32]
 8006ba0:	e02d      	b.n	8006bfe <HAL_RCC_OscConfig+0x36e>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10c      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x334>
 8006baa:	4b76      	ldr	r3, [pc, #472]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	4a75      	ldr	r2, [pc, #468]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006bb0:	f023 0301 	bic.w	r3, r3, #1
 8006bb4:	6213      	str	r3, [r2, #32]
 8006bb6:	4b73      	ldr	r3, [pc, #460]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	4a72      	ldr	r2, [pc, #456]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006bbc:	f023 0304 	bic.w	r3, r3, #4
 8006bc0:	6213      	str	r3, [r2, #32]
 8006bc2:	e01c      	b.n	8006bfe <HAL_RCC_OscConfig+0x36e>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	2b05      	cmp	r3, #5
 8006bca:	d10c      	bne.n	8006be6 <HAL_RCC_OscConfig+0x356>
 8006bcc:	4b6d      	ldr	r3, [pc, #436]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006bce:	6a1b      	ldr	r3, [r3, #32]
 8006bd0:	4a6c      	ldr	r2, [pc, #432]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006bd2:	f043 0304 	orr.w	r3, r3, #4
 8006bd6:	6213      	str	r3, [r2, #32]
 8006bd8:	4b6a      	ldr	r3, [pc, #424]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	4a69      	ldr	r2, [pc, #420]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006bde:	f043 0301 	orr.w	r3, r3, #1
 8006be2:	6213      	str	r3, [r2, #32]
 8006be4:	e00b      	b.n	8006bfe <HAL_RCC_OscConfig+0x36e>
 8006be6:	4b67      	ldr	r3, [pc, #412]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	4a66      	ldr	r2, [pc, #408]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006bec:	f023 0301 	bic.w	r3, r3, #1
 8006bf0:	6213      	str	r3, [r2, #32]
 8006bf2:	4b64      	ldr	r3, [pc, #400]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	4a63      	ldr	r2, [pc, #396]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006bf8:	f023 0304 	bic.w	r3, r3, #4
 8006bfc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d015      	beq.n	8006c32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c06:	f7fd f917 	bl	8003e38 <HAL_GetTick>
 8006c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c0c:	e00a      	b.n	8006c24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c0e:	f7fd f913 	bl	8003e38 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d901      	bls.n	8006c24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e0ab      	b.n	8006d7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c24:	4b57      	ldr	r3, [pc, #348]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	f003 0302 	and.w	r3, r3, #2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d0ee      	beq.n	8006c0e <HAL_RCC_OscConfig+0x37e>
 8006c30:	e014      	b.n	8006c5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c32:	f7fd f901 	bl	8003e38 <HAL_GetTick>
 8006c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c38:	e00a      	b.n	8006c50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c3a:	f7fd f8fd 	bl	8003e38 <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d901      	bls.n	8006c50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e095      	b.n	8006d7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c50:	4b4c      	ldr	r3, [pc, #304]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006c52:	6a1b      	ldr	r3, [r3, #32]
 8006c54:	f003 0302 	and.w	r3, r3, #2
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1ee      	bne.n	8006c3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006c5c:	7dfb      	ldrb	r3, [r7, #23]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d105      	bne.n	8006c6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c62:	4b48      	ldr	r3, [pc, #288]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	4a47      	ldr	r2, [pc, #284]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f000 8081 	beq.w	8006d7a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c78:	4b42      	ldr	r3, [pc, #264]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f003 030c 	and.w	r3, r3, #12
 8006c80:	2b08      	cmp	r3, #8
 8006c82:	d061      	beq.n	8006d48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d146      	bne.n	8006d1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c8c:	4b3f      	ldr	r3, [pc, #252]	; (8006d8c <HAL_RCC_OscConfig+0x4fc>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c92:	f7fd f8d1 	bl	8003e38 <HAL_GetTick>
 8006c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c98:	e008      	b.n	8006cac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c9a:	f7fd f8cd 	bl	8003e38 <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d901      	bls.n	8006cac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e067      	b.n	8006d7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006cac:	4b35      	ldr	r3, [pc, #212]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1f0      	bne.n	8006c9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cc0:	d108      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006cc2:	4b30      	ldr	r3, [pc, #192]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	492d      	ldr	r1, [pc, #180]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cd4:	4b2b      	ldr	r3, [pc, #172]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a19      	ldr	r1, [r3, #32]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce4:	430b      	orrs	r3, r1
 8006ce6:	4927      	ldr	r1, [pc, #156]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cec:	4b27      	ldr	r3, [pc, #156]	; (8006d8c <HAL_RCC_OscConfig+0x4fc>)
 8006cee:	2201      	movs	r2, #1
 8006cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cf2:	f7fd f8a1 	bl	8003e38 <HAL_GetTick>
 8006cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006cf8:	e008      	b.n	8006d0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cfa:	f7fd f89d 	bl	8003e38 <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d901      	bls.n	8006d0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e037      	b.n	8006d7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006d0c:	4b1d      	ldr	r3, [pc, #116]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d0f0      	beq.n	8006cfa <HAL_RCC_OscConfig+0x46a>
 8006d18:	e02f      	b.n	8006d7a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d1a:	4b1c      	ldr	r3, [pc, #112]	; (8006d8c <HAL_RCC_OscConfig+0x4fc>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d20:	f7fd f88a 	bl	8003e38 <HAL_GetTick>
 8006d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d26:	e008      	b.n	8006d3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d28:	f7fd f886 	bl	8003e38 <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d901      	bls.n	8006d3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e020      	b.n	8006d7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d3a:	4b12      	ldr	r3, [pc, #72]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1f0      	bne.n	8006d28 <HAL_RCC_OscConfig+0x498>
 8006d46:	e018      	b.n	8006d7a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	69db      	ldr	r3, [r3, #28]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d101      	bne.n	8006d54 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e013      	b.n	8006d7c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006d54:	4b0b      	ldr	r3, [pc, #44]	; (8006d84 <HAL_RCC_OscConfig+0x4f4>)
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d106      	bne.n	8006d76 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d001      	beq.n	8006d7a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e000      	b.n	8006d7c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3718      	adds	r7, #24
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	40021000 	.word	0x40021000
 8006d88:	40007000 	.word	0x40007000
 8006d8c:	42420060 	.word	0x42420060

08006d90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d101      	bne.n	8006da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e0d0      	b.n	8006f46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006da4:	4b6a      	ldr	r3, [pc, #424]	; (8006f50 <HAL_RCC_ClockConfig+0x1c0>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0307 	and.w	r3, r3, #7
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d910      	bls.n	8006dd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006db2:	4b67      	ldr	r3, [pc, #412]	; (8006f50 <HAL_RCC_ClockConfig+0x1c0>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f023 0207 	bic.w	r2, r3, #7
 8006dba:	4965      	ldr	r1, [pc, #404]	; (8006f50 <HAL_RCC_ClockConfig+0x1c0>)
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dc2:	4b63      	ldr	r3, [pc, #396]	; (8006f50 <HAL_RCC_ClockConfig+0x1c0>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0307 	and.w	r3, r3, #7
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d001      	beq.n	8006dd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e0b8      	b.n	8006f46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0302 	and.w	r3, r3, #2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d020      	beq.n	8006e22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0304 	and.w	r3, r3, #4
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d005      	beq.n	8006df8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006dec:	4b59      	ldr	r3, [pc, #356]	; (8006f54 <HAL_RCC_ClockConfig+0x1c4>)
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	4a58      	ldr	r2, [pc, #352]	; (8006f54 <HAL_RCC_ClockConfig+0x1c4>)
 8006df2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006df6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0308 	and.w	r3, r3, #8
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d005      	beq.n	8006e10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e04:	4b53      	ldr	r3, [pc, #332]	; (8006f54 <HAL_RCC_ClockConfig+0x1c4>)
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	4a52      	ldr	r2, [pc, #328]	; (8006f54 <HAL_RCC_ClockConfig+0x1c4>)
 8006e0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006e0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e10:	4b50      	ldr	r3, [pc, #320]	; (8006f54 <HAL_RCC_ClockConfig+0x1c4>)
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	494d      	ldr	r1, [pc, #308]	; (8006f54 <HAL_RCC_ClockConfig+0x1c4>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d040      	beq.n	8006eb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d107      	bne.n	8006e46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e36:	4b47      	ldr	r3, [pc, #284]	; (8006f54 <HAL_RCC_ClockConfig+0x1c4>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d115      	bne.n	8006e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e07f      	b.n	8006f46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d107      	bne.n	8006e5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e4e:	4b41      	ldr	r3, [pc, #260]	; (8006f54 <HAL_RCC_ClockConfig+0x1c4>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d109      	bne.n	8006e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e073      	b.n	8006f46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e5e:	4b3d      	ldr	r3, [pc, #244]	; (8006f54 <HAL_RCC_ClockConfig+0x1c4>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0302 	and.w	r3, r3, #2
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e06b      	b.n	8006f46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e6e:	4b39      	ldr	r3, [pc, #228]	; (8006f54 <HAL_RCC_ClockConfig+0x1c4>)
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f023 0203 	bic.w	r2, r3, #3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	4936      	ldr	r1, [pc, #216]	; (8006f54 <HAL_RCC_ClockConfig+0x1c4>)
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e80:	f7fc ffda 	bl	8003e38 <HAL_GetTick>
 8006e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e86:	e00a      	b.n	8006e9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e88:	f7fc ffd6 	bl	8003e38 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d901      	bls.n	8006e9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e053      	b.n	8006f46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e9e:	4b2d      	ldr	r3, [pc, #180]	; (8006f54 <HAL_RCC_ClockConfig+0x1c4>)
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f003 020c 	and.w	r2, r3, #12
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d1eb      	bne.n	8006e88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006eb0:	4b27      	ldr	r3, [pc, #156]	; (8006f50 <HAL_RCC_ClockConfig+0x1c0>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 0307 	and.w	r3, r3, #7
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d210      	bcs.n	8006ee0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ebe:	4b24      	ldr	r3, [pc, #144]	; (8006f50 <HAL_RCC_ClockConfig+0x1c0>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f023 0207 	bic.w	r2, r3, #7
 8006ec6:	4922      	ldr	r1, [pc, #136]	; (8006f50 <HAL_RCC_ClockConfig+0x1c0>)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ece:	4b20      	ldr	r3, [pc, #128]	; (8006f50 <HAL_RCC_ClockConfig+0x1c0>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0307 	and.w	r3, r3, #7
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d001      	beq.n	8006ee0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e032      	b.n	8006f46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 0304 	and.w	r3, r3, #4
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d008      	beq.n	8006efe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006eec:	4b19      	ldr	r3, [pc, #100]	; (8006f54 <HAL_RCC_ClockConfig+0x1c4>)
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	4916      	ldr	r1, [pc, #88]	; (8006f54 <HAL_RCC_ClockConfig+0x1c4>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0308 	and.w	r3, r3, #8
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d009      	beq.n	8006f1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006f0a:	4b12      	ldr	r3, [pc, #72]	; (8006f54 <HAL_RCC_ClockConfig+0x1c4>)
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	00db      	lsls	r3, r3, #3
 8006f18:	490e      	ldr	r1, [pc, #56]	; (8006f54 <HAL_RCC_ClockConfig+0x1c4>)
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006f1e:	f000 f821 	bl	8006f64 <HAL_RCC_GetSysClockFreq>
 8006f22:	4602      	mov	r2, r0
 8006f24:	4b0b      	ldr	r3, [pc, #44]	; (8006f54 <HAL_RCC_ClockConfig+0x1c4>)
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	091b      	lsrs	r3, r3, #4
 8006f2a:	f003 030f 	and.w	r3, r3, #15
 8006f2e:	490a      	ldr	r1, [pc, #40]	; (8006f58 <HAL_RCC_ClockConfig+0x1c8>)
 8006f30:	5ccb      	ldrb	r3, [r1, r3]
 8006f32:	fa22 f303 	lsr.w	r3, r2, r3
 8006f36:	4a09      	ldr	r2, [pc, #36]	; (8006f5c <HAL_RCC_ClockConfig+0x1cc>)
 8006f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006f3a:	4b09      	ldr	r3, [pc, #36]	; (8006f60 <HAL_RCC_ClockConfig+0x1d0>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7fc ff38 	bl	8003db4 <HAL_InitTick>

  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	40022000 	.word	0x40022000
 8006f54:	40021000 	.word	0x40021000
 8006f58:	0800da6c 	.word	0x0800da6c
 8006f5c:	20000014 	.word	0x20000014
 8006f60:	20000018 	.word	0x20000018

08006f64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f64:	b490      	push	{r4, r7}
 8006f66:	b08a      	sub	sp, #40	; 0x28
 8006f68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006f6a:	4b2a      	ldr	r3, [pc, #168]	; (8007014 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006f6c:	1d3c      	adds	r4, r7, #4
 8006f6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006f70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006f74:	f240 2301 	movw	r3, #513	; 0x201
 8006f78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	61fb      	str	r3, [r7, #28]
 8006f7e:	2300      	movs	r3, #0
 8006f80:	61bb      	str	r3, [r7, #24]
 8006f82:	2300      	movs	r3, #0
 8006f84:	627b      	str	r3, [r7, #36]	; 0x24
 8006f86:	2300      	movs	r3, #0
 8006f88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006f8e:	4b22      	ldr	r3, [pc, #136]	; (8007018 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	f003 030c 	and.w	r3, r3, #12
 8006f9a:	2b04      	cmp	r3, #4
 8006f9c:	d002      	beq.n	8006fa4 <HAL_RCC_GetSysClockFreq+0x40>
 8006f9e:	2b08      	cmp	r3, #8
 8006fa0:	d003      	beq.n	8006faa <HAL_RCC_GetSysClockFreq+0x46>
 8006fa2:	e02d      	b.n	8007000 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006fa4:	4b1d      	ldr	r3, [pc, #116]	; (800701c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fa6:	623b      	str	r3, [r7, #32]
      break;
 8006fa8:	e02d      	b.n	8007006 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	0c9b      	lsrs	r3, r3, #18
 8006fae:	f003 030f 	and.w	r3, r3, #15
 8006fb2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006fbc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d013      	beq.n	8006ff0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006fc8:	4b13      	ldr	r3, [pc, #76]	; (8007018 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	0c5b      	lsrs	r3, r3, #17
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006fdc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	4a0e      	ldr	r2, [pc, #56]	; (800701c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fe2:	fb02 f203 	mul.w	r2, r2, r3
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fec:	627b      	str	r3, [r7, #36]	; 0x24
 8006fee:	e004      	b.n	8006ffa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	4a0b      	ldr	r2, [pc, #44]	; (8007020 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006ff4:	fb02 f303 	mul.w	r3, r2, r3
 8006ff8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	623b      	str	r3, [r7, #32]
      break;
 8006ffe:	e002      	b.n	8007006 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007000:	4b06      	ldr	r3, [pc, #24]	; (800701c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007002:	623b      	str	r3, [r7, #32]
      break;
 8007004:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007006:	6a3b      	ldr	r3, [r7, #32]
}
 8007008:	4618      	mov	r0, r3
 800700a:	3728      	adds	r7, #40	; 0x28
 800700c:	46bd      	mov	sp, r7
 800700e:	bc90      	pop	{r4, r7}
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	0800da04 	.word	0x0800da04
 8007018:	40021000 	.word	0x40021000
 800701c:	007a1200 	.word	0x007a1200
 8007020:	003d0900 	.word	0x003d0900

08007024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007024:	b480      	push	{r7}
 8007026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007028:	4b02      	ldr	r3, [pc, #8]	; (8007034 <HAL_RCC_GetHCLKFreq+0x10>)
 800702a:	681b      	ldr	r3, [r3, #0]
}
 800702c:	4618      	mov	r0, r3
 800702e:	46bd      	mov	sp, r7
 8007030:	bc80      	pop	{r7}
 8007032:	4770      	bx	lr
 8007034:	20000014 	.word	0x20000014

08007038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800703c:	f7ff fff2 	bl	8007024 <HAL_RCC_GetHCLKFreq>
 8007040:	4602      	mov	r2, r0
 8007042:	4b05      	ldr	r3, [pc, #20]	; (8007058 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	0adb      	lsrs	r3, r3, #11
 8007048:	f003 0307 	and.w	r3, r3, #7
 800704c:	4903      	ldr	r1, [pc, #12]	; (800705c <HAL_RCC_GetPCLK2Freq+0x24>)
 800704e:	5ccb      	ldrb	r3, [r1, r3]
 8007050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007054:	4618      	mov	r0, r3
 8007056:	bd80      	pop	{r7, pc}
 8007058:	40021000 	.word	0x40021000
 800705c:	0800da7c 	.word	0x0800da7c

08007060 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007068:	4b0a      	ldr	r3, [pc, #40]	; (8007094 <RCC_Delay+0x34>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a0a      	ldr	r2, [pc, #40]	; (8007098 <RCC_Delay+0x38>)
 800706e:	fba2 2303 	umull	r2, r3, r2, r3
 8007072:	0a5b      	lsrs	r3, r3, #9
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	fb02 f303 	mul.w	r3, r2, r3
 800707a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800707c:	bf00      	nop
  }
  while (Delay --);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	1e5a      	subs	r2, r3, #1
 8007082:	60fa      	str	r2, [r7, #12]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1f9      	bne.n	800707c <RCC_Delay+0x1c>
}
 8007088:	bf00      	nop
 800708a:	bf00      	nop
 800708c:	3714      	adds	r7, #20
 800708e:	46bd      	mov	sp, r7
 8007090:	bc80      	pop	{r7}
 8007092:	4770      	bx	lr
 8007094:	20000014 	.word	0x20000014
 8007098:	10624dd3 	.word	0x10624dd3

0800709c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80070a4:	2300      	movs	r3, #0
 80070a6:	613b      	str	r3, [r7, #16]
 80070a8:	2300      	movs	r3, #0
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d07d      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80070b8:	2300      	movs	r3, #0
 80070ba:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070bc:	4b4f      	ldr	r3, [pc, #316]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070be:	69db      	ldr	r3, [r3, #28]
 80070c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10d      	bne.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070c8:	4b4c      	ldr	r3, [pc, #304]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	4a4b      	ldr	r2, [pc, #300]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070d2:	61d3      	str	r3, [r2, #28]
 80070d4:	4b49      	ldr	r3, [pc, #292]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070d6:	69db      	ldr	r3, [r3, #28]
 80070d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070dc:	60bb      	str	r3, [r7, #8]
 80070de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070e0:	2301      	movs	r3, #1
 80070e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070e4:	4b46      	ldr	r3, [pc, #280]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d118      	bne.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070f0:	4b43      	ldr	r3, [pc, #268]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a42      	ldr	r2, [pc, #264]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80070f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070fc:	f7fc fe9c 	bl	8003e38 <HAL_GetTick>
 8007100:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007102:	e008      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007104:	f7fc fe98 	bl	8003e38 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	2b64      	cmp	r3, #100	; 0x64
 8007110:	d901      	bls.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e06d      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007116:	4b3a      	ldr	r3, [pc, #232]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800711e:	2b00      	cmp	r3, #0
 8007120:	d0f0      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007122:	4b36      	ldr	r3, [pc, #216]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800712a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d02e      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	429a      	cmp	r2, r3
 800713e:	d027      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007140:	4b2e      	ldr	r3, [pc, #184]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007142:	6a1b      	ldr	r3, [r3, #32]
 8007144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007148:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800714a:	4b2e      	ldr	r3, [pc, #184]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800714c:	2201      	movs	r2, #1
 800714e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007150:	4b2c      	ldr	r3, [pc, #176]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007152:	2200      	movs	r2, #0
 8007154:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007156:	4a29      	ldr	r2, [pc, #164]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b00      	cmp	r3, #0
 8007164:	d014      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007166:	f7fc fe67 	bl	8003e38 <HAL_GetTick>
 800716a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800716c:	e00a      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800716e:	f7fc fe63 	bl	8003e38 <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	f241 3288 	movw	r2, #5000	; 0x1388
 800717c:	4293      	cmp	r3, r2
 800717e:	d901      	bls.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e036      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007184:	4b1d      	ldr	r3, [pc, #116]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	f003 0302 	and.w	r3, r3, #2
 800718c:	2b00      	cmp	r3, #0
 800718e:	d0ee      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007190:	4b1a      	ldr	r3, [pc, #104]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007192:	6a1b      	ldr	r3, [r3, #32]
 8007194:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	4917      	ldr	r1, [pc, #92]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80071a2:	7dfb      	ldrb	r3, [r7, #23]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d105      	bne.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071a8:	4b14      	ldr	r3, [pc, #80]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071aa:	69db      	ldr	r3, [r3, #28]
 80071ac:	4a13      	ldr	r2, [pc, #76]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d008      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80071c0:	4b0e      	ldr	r3, [pc, #56]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	490b      	ldr	r1, [pc, #44]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0310 	and.w	r3, r3, #16
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d008      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071de:	4b07      	ldr	r3, [pc, #28]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	4904      	ldr	r1, [pc, #16]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3718      	adds	r7, #24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	40021000 	.word	0x40021000
 8007200:	40007000 	.word	0x40007000
 8007204:	42420440 	.word	0x42420440

08007208 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007208:	b590      	push	{r4, r7, lr}
 800720a:	b08d      	sub	sp, #52	; 0x34
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007210:	4b5a      	ldr	r3, [pc, #360]	; (800737c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8007212:	f107 040c 	add.w	r4, r7, #12
 8007216:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007218:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800721c:	f240 2301 	movw	r3, #513	; 0x201
 8007220:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007222:	2300      	movs	r3, #0
 8007224:	627b      	str	r3, [r7, #36]	; 0x24
 8007226:	2300      	movs	r3, #0
 8007228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800722a:	2300      	movs	r3, #0
 800722c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800722e:	2300      	movs	r3, #0
 8007230:	61fb      	str	r3, [r7, #28]
 8007232:	2300      	movs	r3, #0
 8007234:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2b10      	cmp	r3, #16
 800723a:	d00a      	beq.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b10      	cmp	r3, #16
 8007240:	f200 8091 	bhi.w	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d04c      	beq.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2b02      	cmp	r3, #2
 800724e:	d07c      	beq.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8007250:	e089      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8007252:	4b4b      	ldr	r3, [pc, #300]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007258:	4b49      	ldr	r3, [pc, #292]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 8082 	beq.w	800736a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	0c9b      	lsrs	r3, r3, #18
 800726a:	f003 030f 	and.w	r3, r3, #15
 800726e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007272:	4413      	add	r3, r2
 8007274:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007278:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d018      	beq.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007284:	4b3e      	ldr	r3, [pc, #248]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	0c5b      	lsrs	r3, r3, #17
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007292:	4413      	add	r3, r2
 8007294:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007298:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00d      	beq.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80072a4:	4a37      	ldr	r2, [pc, #220]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80072a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80072ac:	6a3b      	ldr	r3, [r7, #32]
 80072ae:	fb02 f303 	mul.w	r3, r2, r3
 80072b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072b4:	e004      	b.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80072b6:	6a3b      	ldr	r3, [r7, #32]
 80072b8:	4a33      	ldr	r2, [pc, #204]	; (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80072ba:	fb02 f303 	mul.w	r3, r2, r3
 80072be:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80072c0:	4b2f      	ldr	r3, [pc, #188]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072cc:	d102      	bne.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80072ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80072d2:	e04a      	b.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80072d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d6:	005b      	lsls	r3, r3, #1
 80072d8:	4a2c      	ldr	r2, [pc, #176]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80072da:	fba2 2303 	umull	r2, r3, r2, r3
 80072de:	085b      	lsrs	r3, r3, #1
 80072e0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80072e2:	e042      	b.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 80072e4:	4b26      	ldr	r3, [pc, #152]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80072e6:	6a1b      	ldr	r3, [r3, #32]
 80072e8:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072f4:	d108      	bne.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	f003 0302 	and.w	r3, r3, #2
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d003      	beq.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8007300:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007304:	62bb      	str	r3, [r7, #40]	; 0x28
 8007306:	e01f      	b.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800730e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007312:	d109      	bne.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8007314:	4b1a      	ldr	r3, [pc, #104]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007318:	f003 0302 	and.w	r3, r3, #2
 800731c:	2b00      	cmp	r3, #0
 800731e:	d003      	beq.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8007320:	f649 4340 	movw	r3, #40000	; 0x9c40
 8007324:	62bb      	str	r3, [r7, #40]	; 0x28
 8007326:	e00f      	b.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800732e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007332:	d11c      	bne.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8007334:	4b12      	ldr	r3, [pc, #72]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d016      	beq.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8007340:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007344:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007346:	e012      	b.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8007348:	e011      	b.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800734a:	f7ff fe75 	bl	8007038 <HAL_RCC_GetPCLK2Freq>
 800734e:	4602      	mov	r2, r0
 8007350:	4b0b      	ldr	r3, [pc, #44]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	0b9b      	lsrs	r3, r3, #14
 8007356:	f003 0303 	and.w	r3, r3, #3
 800735a:	3301      	adds	r3, #1
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007362:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007364:	e004      	b.n	8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8007366:	bf00      	nop
 8007368:	e002      	b.n	8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800736a:	bf00      	nop
 800736c:	e000      	b.n	8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800736e:	bf00      	nop
    }
  }
  return (frequency);
 8007370:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007372:	4618      	mov	r0, r3
 8007374:	3734      	adds	r7, #52	; 0x34
 8007376:	46bd      	mov	sp, r7
 8007378:	bd90      	pop	{r4, r7, pc}
 800737a:	bf00      	nop
 800737c:	0800da14 	.word	0x0800da14
 8007380:	40021000 	.word	0x40021000
 8007384:	007a1200 	.word	0x007a1200
 8007388:	003d0900 	.word	0x003d0900
 800738c:	aaaaaaab 	.word	0xaaaaaaab

08007390 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e076      	b.n	8007490 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d108      	bne.n	80073bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073b2:	d009      	beq.n	80073c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	61da      	str	r2, [r3, #28]
 80073ba:	e005      	b.n	80073c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d106      	bne.n	80073e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f7fc facc 	bl	8003980 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007410:	431a      	orrs	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800741a:	431a      	orrs	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	f003 0302 	and.w	r3, r3, #2
 8007424:	431a      	orrs	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	431a      	orrs	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007438:	431a      	orrs	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007442:	431a      	orrs	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a1b      	ldr	r3, [r3, #32]
 8007448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800744c:	ea42 0103 	orr.w	r1, r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007454:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	430a      	orrs	r2, r1
 800745e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	0c1a      	lsrs	r2, r3, #16
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f002 0204 	and.w	r2, r2, #4
 800746e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	69da      	ldr	r2, [r3, #28]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800747e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b088      	sub	sp, #32
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	603b      	str	r3, [r7, #0]
 80074a4:	4613      	mov	r3, r2
 80074a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80074a8:	2300      	movs	r3, #0
 80074aa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d101      	bne.n	80074ba <HAL_SPI_Transmit+0x22>
 80074b6:	2302      	movs	r3, #2
 80074b8:	e126      	b.n	8007708 <HAL_SPI_Transmit+0x270>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074c2:	f7fc fcb9 	bl	8003e38 <HAL_GetTick>
 80074c6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80074c8:	88fb      	ldrh	r3, [r7, #6]
 80074ca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d002      	beq.n	80074de <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80074d8:	2302      	movs	r3, #2
 80074da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074dc:	e10b      	b.n	80076f6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d002      	beq.n	80074ea <HAL_SPI_Transmit+0x52>
 80074e4:	88fb      	ldrh	r3, [r7, #6]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d102      	bne.n	80074f0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074ee:	e102      	b.n	80076f6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2203      	movs	r2, #3
 80074f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	88fa      	ldrh	r2, [r7, #6]
 8007508:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	88fa      	ldrh	r2, [r7, #6]
 800750e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007536:	d10f      	bne.n	8007558 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007546:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007556:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007562:	2b40      	cmp	r3, #64	; 0x40
 8007564:	d007      	beq.n	8007576 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007574:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800757e:	d14b      	bne.n	8007618 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d002      	beq.n	800758e <HAL_SPI_Transmit+0xf6>
 8007588:	8afb      	ldrh	r3, [r7, #22]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d13e      	bne.n	800760c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007592:	881a      	ldrh	r2, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759e:	1c9a      	adds	r2, r3, #2
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	3b01      	subs	r3, #1
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80075b2:	e02b      	b.n	800760c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d112      	bne.n	80075e8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c6:	881a      	ldrh	r2, [r3, #0]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d2:	1c9a      	adds	r2, r3, #2
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075dc:	b29b      	uxth	r3, r3
 80075de:	3b01      	subs	r3, #1
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	86da      	strh	r2, [r3, #54]	; 0x36
 80075e6:	e011      	b.n	800760c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075e8:	f7fc fc26 	bl	8003e38 <HAL_GetTick>
 80075ec:	4602      	mov	r2, r0
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	683a      	ldr	r2, [r7, #0]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d803      	bhi.n	8007600 <HAL_SPI_Transmit+0x168>
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fe:	d102      	bne.n	8007606 <HAL_SPI_Transmit+0x16e>
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d102      	bne.n	800760c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	77fb      	strb	r3, [r7, #31]
          goto error;
 800760a:	e074      	b.n	80076f6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007610:	b29b      	uxth	r3, r3
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1ce      	bne.n	80075b4 <HAL_SPI_Transmit+0x11c>
 8007616:	e04c      	b.n	80076b2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d002      	beq.n	8007626 <HAL_SPI_Transmit+0x18e>
 8007620:	8afb      	ldrh	r3, [r7, #22]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d140      	bne.n	80076a8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	330c      	adds	r3, #12
 8007630:	7812      	ldrb	r2, [r2, #0]
 8007632:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007638:	1c5a      	adds	r2, r3, #1
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007642:	b29b      	uxth	r3, r3
 8007644:	3b01      	subs	r3, #1
 8007646:	b29a      	uxth	r2, r3
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800764c:	e02c      	b.n	80076a8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	f003 0302 	and.w	r3, r3, #2
 8007658:	2b02      	cmp	r3, #2
 800765a:	d113      	bne.n	8007684 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	330c      	adds	r3, #12
 8007666:	7812      	ldrb	r2, [r2, #0]
 8007668:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766e:	1c5a      	adds	r2, r3, #1
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007678:	b29b      	uxth	r3, r3
 800767a:	3b01      	subs	r3, #1
 800767c:	b29a      	uxth	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	86da      	strh	r2, [r3, #54]	; 0x36
 8007682:	e011      	b.n	80076a8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007684:	f7fc fbd8 	bl	8003e38 <HAL_GetTick>
 8007688:	4602      	mov	r2, r0
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	683a      	ldr	r2, [r7, #0]
 8007690:	429a      	cmp	r2, r3
 8007692:	d803      	bhi.n	800769c <HAL_SPI_Transmit+0x204>
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800769a:	d102      	bne.n	80076a2 <HAL_SPI_Transmit+0x20a>
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d102      	bne.n	80076a8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80076a6:	e026      	b.n	80076f6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1cd      	bne.n	800764e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076b2:	69ba      	ldr	r2, [r7, #24]
 80076b4:	6839      	ldr	r1, [r7, #0]
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f000 f8b2 	bl	8007820 <SPI_EndRxTxTransaction>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d002      	beq.n	80076c8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2220      	movs	r2, #32
 80076c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10a      	bne.n	80076e6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076d0:	2300      	movs	r3, #0
 80076d2:	613b      	str	r3, [r7, #16]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	613b      	str	r3, [r7, #16]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	613b      	str	r3, [r7, #16]
 80076e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d002      	beq.n	80076f4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	77fb      	strb	r3, [r7, #31]
 80076f2:	e000      	b.n	80076f6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80076f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007706:	7ffb      	ldrb	r3, [r7, #31]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3720      	adds	r7, #32
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b088      	sub	sp, #32
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	603b      	str	r3, [r7, #0]
 800771c:	4613      	mov	r3, r2
 800771e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007720:	f7fc fb8a 	bl	8003e38 <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007728:	1a9b      	subs	r3, r3, r2
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	4413      	add	r3, r2
 800772e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007730:	f7fc fb82 	bl	8003e38 <HAL_GetTick>
 8007734:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007736:	4b39      	ldr	r3, [pc, #228]	; (800781c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	015b      	lsls	r3, r3, #5
 800773c:	0d1b      	lsrs	r3, r3, #20
 800773e:	69fa      	ldr	r2, [r7, #28]
 8007740:	fb02 f303 	mul.w	r3, r2, r3
 8007744:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007746:	e054      	b.n	80077f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774e:	d050      	beq.n	80077f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007750:	f7fc fb72 	bl	8003e38 <HAL_GetTick>
 8007754:	4602      	mov	r2, r0
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	1ad3      	subs	r3, r2, r3
 800775a:	69fa      	ldr	r2, [r7, #28]
 800775c:	429a      	cmp	r2, r3
 800775e:	d902      	bls.n	8007766 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d13d      	bne.n	80077e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	685a      	ldr	r2, [r3, #4]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007774:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800777e:	d111      	bne.n	80077a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007788:	d004      	beq.n	8007794 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007792:	d107      	bne.n	80077a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077ac:	d10f      	bne.n	80077ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077bc:	601a      	str	r2, [r3, #0]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2201      	movs	r2, #1
 80077d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	e017      	b.n	8007812 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80077e8:	2300      	movs	r3, #0
 80077ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	3b01      	subs	r3, #1
 80077f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	689a      	ldr	r2, [r3, #8]
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	4013      	ands	r3, r2
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	429a      	cmp	r2, r3
 8007800:	bf0c      	ite	eq
 8007802:	2301      	moveq	r3, #1
 8007804:	2300      	movne	r3, #0
 8007806:	b2db      	uxtb	r3, r3
 8007808:	461a      	mov	r2, r3
 800780a:	79fb      	ldrb	r3, [r7, #7]
 800780c:	429a      	cmp	r2, r3
 800780e:	d19b      	bne.n	8007748 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3720      	adds	r7, #32
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	20000014 	.word	0x20000014

08007820 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af02      	add	r7, sp, #8
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	2200      	movs	r2, #0
 8007834:	2180      	movs	r1, #128	; 0x80
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f7ff ff6a 	bl	8007710 <SPI_WaitFlagStateUntilTimeout>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d007      	beq.n	8007852 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007846:	f043 0220 	orr.w	r2, r3, #32
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800784e:	2303      	movs	r3, #3
 8007850:	e000      	b.n	8007854 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e041      	b.n	80078f2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d106      	bne.n	8007888 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7fc f8ba 	bl	80039fc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2202      	movs	r2, #2
 800788c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	3304      	adds	r3, #4
 8007898:	4619      	mov	r1, r3
 800789a:	4610      	mov	r0, r2
 800789c:	f000 fb38 	bl	8007f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
	...

080078fc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d104      	bne.n	8007916 <HAL_TIM_IC_Start_IT+0x1a>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007912:	b2db      	uxtb	r3, r3
 8007914:	e013      	b.n	800793e <HAL_TIM_IC_Start_IT+0x42>
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	2b04      	cmp	r3, #4
 800791a:	d104      	bne.n	8007926 <HAL_TIM_IC_Start_IT+0x2a>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007922:	b2db      	uxtb	r3, r3
 8007924:	e00b      	b.n	800793e <HAL_TIM_IC_Start_IT+0x42>
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	2b08      	cmp	r3, #8
 800792a:	d104      	bne.n	8007936 <HAL_TIM_IC_Start_IT+0x3a>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007932:	b2db      	uxtb	r3, r3
 8007934:	e003      	b.n	800793e <HAL_TIM_IC_Start_IT+0x42>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800793c:	b2db      	uxtb	r3, r3
 800793e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d104      	bne.n	8007950 <HAL_TIM_IC_Start_IT+0x54>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800794c:	b2db      	uxtb	r3, r3
 800794e:	e013      	b.n	8007978 <HAL_TIM_IC_Start_IT+0x7c>
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	2b04      	cmp	r3, #4
 8007954:	d104      	bne.n	8007960 <HAL_TIM_IC_Start_IT+0x64>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800795c:	b2db      	uxtb	r3, r3
 800795e:	e00b      	b.n	8007978 <HAL_TIM_IC_Start_IT+0x7c>
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	2b08      	cmp	r3, #8
 8007964:	d104      	bne.n	8007970 <HAL_TIM_IC_Start_IT+0x74>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800796c:	b2db      	uxtb	r3, r3
 800796e:	e003      	b.n	8007978 <HAL_TIM_IC_Start_IT+0x7c>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007976:	b2db      	uxtb	r3, r3
 8007978:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800797a:	7bfb      	ldrb	r3, [r7, #15]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d102      	bne.n	8007986 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007980:	7bbb      	ldrb	r3, [r7, #14]
 8007982:	2b01      	cmp	r3, #1
 8007984:	d001      	beq.n	800798a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e0b3      	b.n	8007af2 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d104      	bne.n	800799a <HAL_TIM_IC_Start_IT+0x9e>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007998:	e013      	b.n	80079c2 <HAL_TIM_IC_Start_IT+0xc6>
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	2b04      	cmp	r3, #4
 800799e:	d104      	bne.n	80079aa <HAL_TIM_IC_Start_IT+0xae>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2202      	movs	r2, #2
 80079a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079a8:	e00b      	b.n	80079c2 <HAL_TIM_IC_Start_IT+0xc6>
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	2b08      	cmp	r3, #8
 80079ae:	d104      	bne.n	80079ba <HAL_TIM_IC_Start_IT+0xbe>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2202      	movs	r2, #2
 80079b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079b8:	e003      	b.n	80079c2 <HAL_TIM_IC_Start_IT+0xc6>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2202      	movs	r2, #2
 80079be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d104      	bne.n	80079d2 <HAL_TIM_IC_Start_IT+0xd6>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2202      	movs	r2, #2
 80079cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079d0:	e013      	b.n	80079fa <HAL_TIM_IC_Start_IT+0xfe>
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2b04      	cmp	r3, #4
 80079d6:	d104      	bne.n	80079e2 <HAL_TIM_IC_Start_IT+0xe6>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2202      	movs	r2, #2
 80079dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079e0:	e00b      	b.n	80079fa <HAL_TIM_IC_Start_IT+0xfe>
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	2b08      	cmp	r3, #8
 80079e6:	d104      	bne.n	80079f2 <HAL_TIM_IC_Start_IT+0xf6>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2202      	movs	r2, #2
 80079ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079f0:	e003      	b.n	80079fa <HAL_TIM_IC_Start_IT+0xfe>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2202      	movs	r2, #2
 80079f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b0c      	cmp	r3, #12
 80079fe:	d841      	bhi.n	8007a84 <HAL_TIM_IC_Start_IT+0x188>
 8007a00:	a201      	add	r2, pc, #4	; (adr r2, 8007a08 <HAL_TIM_IC_Start_IT+0x10c>)
 8007a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a06:	bf00      	nop
 8007a08:	08007a3d 	.word	0x08007a3d
 8007a0c:	08007a85 	.word	0x08007a85
 8007a10:	08007a85 	.word	0x08007a85
 8007a14:	08007a85 	.word	0x08007a85
 8007a18:	08007a4f 	.word	0x08007a4f
 8007a1c:	08007a85 	.word	0x08007a85
 8007a20:	08007a85 	.word	0x08007a85
 8007a24:	08007a85 	.word	0x08007a85
 8007a28:	08007a61 	.word	0x08007a61
 8007a2c:	08007a85 	.word	0x08007a85
 8007a30:	08007a85 	.word	0x08007a85
 8007a34:	08007a85 	.word	0x08007a85
 8007a38:	08007a73 	.word	0x08007a73
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68da      	ldr	r2, [r3, #12]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f042 0202 	orr.w	r2, r2, #2
 8007a4a:	60da      	str	r2, [r3, #12]
      break;
 8007a4c:	e01b      	b.n	8007a86 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68da      	ldr	r2, [r3, #12]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f042 0204 	orr.w	r2, r2, #4
 8007a5c:	60da      	str	r2, [r3, #12]
      break;
 8007a5e:	e012      	b.n	8007a86 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68da      	ldr	r2, [r3, #12]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f042 0208 	orr.w	r2, r2, #8
 8007a6e:	60da      	str	r2, [r3, #12]
      break;
 8007a70:	e009      	b.n	8007a86 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68da      	ldr	r2, [r3, #12]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f042 0210 	orr.w	r2, r2, #16
 8007a80:	60da      	str	r2, [r3, #12]
      break;
 8007a82:	e000      	b.n	8007a86 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8007a84:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	6839      	ldr	r1, [r7, #0]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 fbad 	bl	80081ee <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a18      	ldr	r2, [pc, #96]	; (8007afc <HAL_TIM_IC_Start_IT+0x200>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d00e      	beq.n	8007abc <HAL_TIM_IC_Start_IT+0x1c0>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aa6:	d009      	beq.n	8007abc <HAL_TIM_IC_Start_IT+0x1c0>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a14      	ldr	r2, [pc, #80]	; (8007b00 <HAL_TIM_IC_Start_IT+0x204>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d004      	beq.n	8007abc <HAL_TIM_IC_Start_IT+0x1c0>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a13      	ldr	r2, [pc, #76]	; (8007b04 <HAL_TIM_IC_Start_IT+0x208>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d111      	bne.n	8007ae0 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f003 0307 	and.w	r3, r3, #7
 8007ac6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	2b06      	cmp	r3, #6
 8007acc:	d010      	beq.n	8007af0 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f042 0201 	orr.w	r2, r2, #1
 8007adc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ade:	e007      	b.n	8007af0 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f042 0201 	orr.w	r2, r2, #1
 8007aee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	40012c00 	.word	0x40012c00
 8007b00:	40000400 	.word	0x40000400
 8007b04:	40000800 	.word	0x40000800

08007b08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	f003 0302 	and.w	r3, r3, #2
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d122      	bne.n	8007b64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	f003 0302 	and.w	r3, r3, #2
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d11b      	bne.n	8007b64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f06f 0202 	mvn.w	r2, #2
 8007b34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	f003 0303 	and.w	r3, r3, #3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d003      	beq.n	8007b52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7fa fd1a 	bl	8002584 <HAL_TIM_IC_CaptureCallback>
 8007b50:	e005      	b.n	8007b5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f9c1 	bl	8007eda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 f9c7 	bl	8007eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	f003 0304 	and.w	r3, r3, #4
 8007b6e:	2b04      	cmp	r3, #4
 8007b70:	d122      	bne.n	8007bb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	f003 0304 	and.w	r3, r3, #4
 8007b7c:	2b04      	cmp	r3, #4
 8007b7e:	d11b      	bne.n	8007bb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f06f 0204 	mvn.w	r2, #4
 8007b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2202      	movs	r2, #2
 8007b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d003      	beq.n	8007ba6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7fa fcf0 	bl	8002584 <HAL_TIM_IC_CaptureCallback>
 8007ba4:	e005      	b.n	8007bb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f997 	bl	8007eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f99d 	bl	8007eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	f003 0308 	and.w	r3, r3, #8
 8007bc2:	2b08      	cmp	r3, #8
 8007bc4:	d122      	bne.n	8007c0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	f003 0308 	and.w	r3, r3, #8
 8007bd0:	2b08      	cmp	r3, #8
 8007bd2:	d11b      	bne.n	8007c0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f06f 0208 	mvn.w	r2, #8
 8007bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2204      	movs	r2, #4
 8007be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	69db      	ldr	r3, [r3, #28]
 8007bea:	f003 0303 	and.w	r3, r3, #3
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d003      	beq.n	8007bfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f7fa fcc6 	bl	8002584 <HAL_TIM_IC_CaptureCallback>
 8007bf8:	e005      	b.n	8007c06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f96d 	bl	8007eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 f973 	bl	8007eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	f003 0310 	and.w	r3, r3, #16
 8007c16:	2b10      	cmp	r3, #16
 8007c18:	d122      	bne.n	8007c60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	f003 0310 	and.w	r3, r3, #16
 8007c24:	2b10      	cmp	r3, #16
 8007c26:	d11b      	bne.n	8007c60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f06f 0210 	mvn.w	r2, #16
 8007c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2208      	movs	r2, #8
 8007c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d003      	beq.n	8007c4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7fa fc9c 	bl	8002584 <HAL_TIM_IC_CaptureCallback>
 8007c4c:	e005      	b.n	8007c5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f943 	bl	8007eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 f949 	bl	8007eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d10e      	bne.n	8007c8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d107      	bne.n	8007c8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f06f 0201 	mvn.w	r2, #1
 8007c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f91e 	bl	8007ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c96:	2b80      	cmp	r3, #128	; 0x80
 8007c98:	d10e      	bne.n	8007cb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ca4:	2b80      	cmp	r3, #128	; 0x80
 8007ca6:	d107      	bne.n	8007cb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fb27 	bl	8008306 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc2:	2b40      	cmp	r3, #64	; 0x40
 8007cc4:	d10e      	bne.n	8007ce4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd0:	2b40      	cmp	r3, #64	; 0x40
 8007cd2:	d107      	bne.n	8007ce4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 f90d 	bl	8007efe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	f003 0320 	and.w	r3, r3, #32
 8007cee:	2b20      	cmp	r3, #32
 8007cf0:	d10e      	bne.n	8007d10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	f003 0320 	and.w	r3, r3, #32
 8007cfc:	2b20      	cmp	r3, #32
 8007cfe:	d107      	bne.n	8007d10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f06f 0220 	mvn.w	r2, #32
 8007d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 faf2 	bl	80082f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d10:	bf00      	nop
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d101      	bne.n	8007d32 <HAL_TIM_IC_ConfigChannel+0x1a>
 8007d2e:	2302      	movs	r3, #2
 8007d30:	e082      	b.n	8007e38 <HAL_TIM_IC_ConfigChannel+0x120>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d11b      	bne.n	8007d78 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6818      	ldr	r0, [r3, #0]
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	6819      	ldr	r1, [r3, #0]
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	685a      	ldr	r2, [r3, #4]
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	f000 f940 	bl	8007fd4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	699a      	ldr	r2, [r3, #24]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f022 020c 	bic.w	r2, r2, #12
 8007d62:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	6999      	ldr	r1, [r3, #24]
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	689a      	ldr	r2, [r3, #8]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	430a      	orrs	r2, r1
 8007d74:	619a      	str	r2, [r3, #24]
 8007d76:	e05a      	b.n	8007e2e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b04      	cmp	r3, #4
 8007d7c:	d11c      	bne.n	8007db8 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6818      	ldr	r0, [r3, #0]
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	6819      	ldr	r1, [r3, #0]
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	685a      	ldr	r2, [r3, #4]
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	f000 f97b 	bl	8008088 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	699a      	ldr	r2, [r3, #24]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007da0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	6999      	ldr	r1, [r3, #24]
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	021a      	lsls	r2, r3, #8
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	430a      	orrs	r2, r1
 8007db4:	619a      	str	r2, [r3, #24]
 8007db6:	e03a      	b.n	8007e2e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b08      	cmp	r3, #8
 8007dbc:	d11b      	bne.n	8007df6 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6818      	ldr	r0, [r3, #0]
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	6819      	ldr	r1, [r3, #0]
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	f000 f997 	bl	8008100 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	69da      	ldr	r2, [r3, #28]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f022 020c 	bic.w	r2, r2, #12
 8007de0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	69d9      	ldr	r1, [r3, #28]
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	689a      	ldr	r2, [r3, #8]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	430a      	orrs	r2, r1
 8007df2:	61da      	str	r2, [r3, #28]
 8007df4:	e01b      	b.n	8007e2e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6818      	ldr	r0, [r3, #0]
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	6819      	ldr	r1, [r3, #0]
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	f000 f9b6 	bl	8008176 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	69da      	ldr	r2, [r3, #28]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007e18:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	69d9      	ldr	r1, [r3, #28]
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	021a      	lsls	r2, r3, #8
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	60fb      	str	r3, [r7, #12]
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	2b0c      	cmp	r3, #12
 8007e52:	d831      	bhi.n	8007eb8 <HAL_TIM_ReadCapturedValue+0x78>
 8007e54:	a201      	add	r2, pc, #4	; (adr r2, 8007e5c <HAL_TIM_ReadCapturedValue+0x1c>)
 8007e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5a:	bf00      	nop
 8007e5c:	08007e91 	.word	0x08007e91
 8007e60:	08007eb9 	.word	0x08007eb9
 8007e64:	08007eb9 	.word	0x08007eb9
 8007e68:	08007eb9 	.word	0x08007eb9
 8007e6c:	08007e9b 	.word	0x08007e9b
 8007e70:	08007eb9 	.word	0x08007eb9
 8007e74:	08007eb9 	.word	0x08007eb9
 8007e78:	08007eb9 	.word	0x08007eb9
 8007e7c:	08007ea5 	.word	0x08007ea5
 8007e80:	08007eb9 	.word	0x08007eb9
 8007e84:	08007eb9 	.word	0x08007eb9
 8007e88:	08007eb9 	.word	0x08007eb9
 8007e8c:	08007eaf 	.word	0x08007eaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e96:	60fb      	str	r3, [r7, #12]

      break;
 8007e98:	e00f      	b.n	8007eba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea0:	60fb      	str	r3, [r7, #12]

      break;
 8007ea2:	e00a      	b.n	8007eba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eaa:	60fb      	str	r3, [r7, #12]

      break;
 8007eac:	e005      	b.n	8007eba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb4:	60fb      	str	r3, [r7, #12]

      break;
 8007eb6:	e000      	b.n	8007eba <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007eb8:	bf00      	nop
  }

  return tmpreg;
 8007eba:	68fb      	ldr	r3, [r7, #12]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3714      	adds	r7, #20
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bc80      	pop	{r7}
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop

08007ec8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bc80      	pop	{r7}
 8007ed8:	4770      	bx	lr

08007eda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007eda:	b480      	push	{r7}
 8007edc:	b083      	sub	sp, #12
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ee2:	bf00      	nop
 8007ee4:	370c      	adds	r7, #12
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bc80      	pop	{r7}
 8007eea:	4770      	bx	lr

08007eec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bc80      	pop	{r7}
 8007efc:	4770      	bx	lr

08007efe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007efe:	b480      	push	{r7}
 8007f00:	b083      	sub	sp, #12
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f06:	bf00      	nop
 8007f08:	370c      	adds	r7, #12
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bc80      	pop	{r7}
 8007f0e:	4770      	bx	lr

08007f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a29      	ldr	r2, [pc, #164]	; (8007fc8 <TIM_Base_SetConfig+0xb8>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d00b      	beq.n	8007f40 <TIM_Base_SetConfig+0x30>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f2e:	d007      	beq.n	8007f40 <TIM_Base_SetConfig+0x30>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a26      	ldr	r2, [pc, #152]	; (8007fcc <TIM_Base_SetConfig+0xbc>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d003      	beq.n	8007f40 <TIM_Base_SetConfig+0x30>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a25      	ldr	r2, [pc, #148]	; (8007fd0 <TIM_Base_SetConfig+0xc0>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d108      	bne.n	8007f52 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a1c      	ldr	r2, [pc, #112]	; (8007fc8 <TIM_Base_SetConfig+0xb8>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d00b      	beq.n	8007f72 <TIM_Base_SetConfig+0x62>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f60:	d007      	beq.n	8007f72 <TIM_Base_SetConfig+0x62>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a19      	ldr	r2, [pc, #100]	; (8007fcc <TIM_Base_SetConfig+0xbc>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d003      	beq.n	8007f72 <TIM_Base_SetConfig+0x62>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a18      	ldr	r2, [pc, #96]	; (8007fd0 <TIM_Base_SetConfig+0xc0>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d108      	bne.n	8007f84 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	689a      	ldr	r2, [r3, #8]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a07      	ldr	r2, [pc, #28]	; (8007fc8 <TIM_Base_SetConfig+0xb8>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d103      	bne.n	8007fb8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	691a      	ldr	r2, [r3, #16]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	615a      	str	r2, [r3, #20]
}
 8007fbe:	bf00      	nop
 8007fc0:	3714      	adds	r7, #20
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bc80      	pop	{r7}
 8007fc6:	4770      	bx	lr
 8007fc8:	40012c00 	.word	0x40012c00
 8007fcc:	40000400 	.word	0x40000400
 8007fd0:	40000800 	.word	0x40000800

08007fd4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b087      	sub	sp, #28
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
 8007fe0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6a1b      	ldr	r3, [r3, #32]
 8007fe6:	f023 0201 	bic.w	r2, r3, #1
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6a1b      	ldr	r3, [r3, #32]
 8007ff8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	4a1f      	ldr	r2, [pc, #124]	; (800807c <TIM_TI1_SetConfig+0xa8>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d00b      	beq.n	800801a <TIM_TI1_SetConfig+0x46>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008008:	d007      	beq.n	800801a <TIM_TI1_SetConfig+0x46>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	4a1c      	ldr	r2, [pc, #112]	; (8008080 <TIM_TI1_SetConfig+0xac>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d003      	beq.n	800801a <TIM_TI1_SetConfig+0x46>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	4a1b      	ldr	r2, [pc, #108]	; (8008084 <TIM_TI1_SetConfig+0xb0>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d101      	bne.n	800801e <TIM_TI1_SetConfig+0x4a>
 800801a:	2301      	movs	r3, #1
 800801c:	e000      	b.n	8008020 <TIM_TI1_SetConfig+0x4c>
 800801e:	2300      	movs	r3, #0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d008      	beq.n	8008036 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	f023 0303 	bic.w	r3, r3, #3
 800802a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800802c:	697a      	ldr	r2, [r7, #20]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4313      	orrs	r3, r2
 8008032:	617b      	str	r3, [r7, #20]
 8008034:	e003      	b.n	800803e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	f043 0301 	orr.w	r3, r3, #1
 800803c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008044:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	011b      	lsls	r3, r3, #4
 800804a:	b2db      	uxtb	r3, r3
 800804c:	697a      	ldr	r2, [r7, #20]
 800804e:	4313      	orrs	r3, r2
 8008050:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	f023 030a 	bic.w	r3, r3, #10
 8008058:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	f003 030a 	and.w	r3, r3, #10
 8008060:	693a      	ldr	r2, [r7, #16]
 8008062:	4313      	orrs	r3, r2
 8008064:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	697a      	ldr	r2, [r7, #20]
 800806a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	621a      	str	r2, [r3, #32]
}
 8008072:	bf00      	nop
 8008074:	371c      	adds	r7, #28
 8008076:	46bd      	mov	sp, r7
 8008078:	bc80      	pop	{r7}
 800807a:	4770      	bx	lr
 800807c:	40012c00 	.word	0x40012c00
 8008080:	40000400 	.word	0x40000400
 8008084:	40000800 	.word	0x40000800

08008088 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008088:	b480      	push	{r7}
 800808a:	b087      	sub	sp, #28
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
 8008094:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	f023 0210 	bic.w	r2, r3, #16
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6a1b      	ldr	r3, [r3, #32]
 80080ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	021b      	lsls	r3, r3, #8
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	4313      	orrs	r3, r2
 80080be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	031b      	lsls	r3, r3, #12
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	697a      	ldr	r2, [r7, #20]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	011b      	lsls	r3, r3, #4
 80080e0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	697a      	ldr	r2, [r7, #20]
 80080ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	621a      	str	r2, [r3, #32]
}
 80080f6:	bf00      	nop
 80080f8:	371c      	adds	r7, #28
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bc80      	pop	{r7}
 80080fe:	4770      	bx	lr

08008100 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008100:	b480      	push	{r7}
 8008102:	b087      	sub	sp, #28
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
 800810c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6a1b      	ldr	r3, [r3, #32]
 8008112:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	69db      	ldr	r3, [r3, #28]
 800811e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6a1b      	ldr	r3, [r3, #32]
 8008124:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	f023 0303 	bic.w	r3, r3, #3
 800812c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4313      	orrs	r3, r2
 8008134:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800813c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	011b      	lsls	r3, r3, #4
 8008142:	b2db      	uxtb	r3, r3
 8008144:	697a      	ldr	r2, [r7, #20]
 8008146:	4313      	orrs	r3, r2
 8008148:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008150:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	021b      	lsls	r3, r3, #8
 8008156:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800815a:	693a      	ldr	r2, [r7, #16]
 800815c:	4313      	orrs	r3, r2
 800815e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	621a      	str	r2, [r3, #32]
}
 800816c:	bf00      	nop
 800816e:	371c      	adds	r7, #28
 8008170:	46bd      	mov	sp, r7
 8008172:	bc80      	pop	{r7}
 8008174:	4770      	bx	lr

08008176 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008176:	b480      	push	{r7}
 8008178:	b087      	sub	sp, #28
 800817a:	af00      	add	r7, sp, #0
 800817c:	60f8      	str	r0, [r7, #12]
 800817e:	60b9      	str	r1, [r7, #8]
 8008180:	607a      	str	r2, [r7, #4]
 8008182:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6a1b      	ldr	r3, [r3, #32]
 8008188:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	69db      	ldr	r3, [r3, #28]
 8008194:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	021b      	lsls	r3, r3, #8
 80081a8:	697a      	ldr	r2, [r7, #20]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	031b      	lsls	r3, r3, #12
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	697a      	ldr	r2, [r7, #20]
 80081be:	4313      	orrs	r3, r2
 80081c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	031b      	lsls	r3, r3, #12
 80081ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081d2:	693a      	ldr	r2, [r7, #16]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	693a      	ldr	r2, [r7, #16]
 80081e2:	621a      	str	r2, [r3, #32]
}
 80081e4:	bf00      	nop
 80081e6:	371c      	adds	r7, #28
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bc80      	pop	{r7}
 80081ec:	4770      	bx	lr

080081ee <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80081ee:	b480      	push	{r7}
 80081f0:	b087      	sub	sp, #28
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	60f8      	str	r0, [r7, #12]
 80081f6:	60b9      	str	r1, [r7, #8]
 80081f8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	f003 031f 	and.w	r3, r3, #31
 8008200:	2201      	movs	r2, #1
 8008202:	fa02 f303 	lsl.w	r3, r2, r3
 8008206:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6a1a      	ldr	r2, [r3, #32]
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	43db      	mvns	r3, r3
 8008210:	401a      	ands	r2, r3
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6a1a      	ldr	r2, [r3, #32]
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	f003 031f 	and.w	r3, r3, #31
 8008220:	6879      	ldr	r1, [r7, #4]
 8008222:	fa01 f303 	lsl.w	r3, r1, r3
 8008226:	431a      	orrs	r2, r3
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	621a      	str	r2, [r3, #32]
}
 800822c:	bf00      	nop
 800822e:	371c      	adds	r7, #28
 8008230:	46bd      	mov	sp, r7
 8008232:	bc80      	pop	{r7}
 8008234:	4770      	bx	lr
	...

08008238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008248:	2b01      	cmp	r3, #1
 800824a:	d101      	bne.n	8008250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800824c:	2302      	movs	r3, #2
 800824e:	e046      	b.n	80082de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2202      	movs	r2, #2
 800825c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008276:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	4313      	orrs	r3, r2
 8008280:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a16      	ldr	r2, [pc, #88]	; (80082e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d00e      	beq.n	80082b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800829c:	d009      	beq.n	80082b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a12      	ldr	r2, [pc, #72]	; (80082ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d004      	beq.n	80082b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a10      	ldr	r2, [pc, #64]	; (80082f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d10c      	bne.n	80082cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3714      	adds	r7, #20
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bc80      	pop	{r7}
 80082e6:	4770      	bx	lr
 80082e8:	40012c00 	.word	0x40012c00
 80082ec:	40000400 	.word	0x40000400
 80082f0:	40000800 	.word	0x40000800

080082f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082fc:	bf00      	nop
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	bc80      	pop	{r7}
 8008304:	4770      	bx	lr

08008306 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008306:	b480      	push	{r7}
 8008308:	b083      	sub	sp, #12
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800830e:	bf00      	nop
 8008310:	370c      	adds	r7, #12
 8008312:	46bd      	mov	sp, r7
 8008314:	bc80      	pop	{r7}
 8008316:	4770      	bx	lr

08008318 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008318:	b084      	sub	sp, #16
 800831a:	b480      	push	{r7}
 800831c:	b083      	sub	sp, #12
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	f107 0014 	add.w	r0, r7, #20
 8008326:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	bc80      	pop	{r7}
 8008334:	b004      	add	sp, #16
 8008336:	4770      	bx	lr

08008338 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008348:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800834c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	b29a      	uxth	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3714      	adds	r7, #20
 800835e:	46bd      	mov	sp, r7
 8008360:	bc80      	pop	{r7}
 8008362:	4770      	bx	lr

08008364 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800836c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008370:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008378:	b29a      	uxth	r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	b29b      	uxth	r3, r3
 800837e:	43db      	mvns	r3, r3
 8008380:	b29b      	uxth	r3, r3
 8008382:	4013      	ands	r3, r2
 8008384:	b29a      	uxth	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3714      	adds	r7, #20
 8008392:	46bd      	mov	sp, r7
 8008394:	bc80      	pop	{r7}
 8008396:	4770      	bx	lr

08008398 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	460b      	mov	r3, r1
 80083a2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	370c      	adds	r7, #12
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bc80      	pop	{r7}
 80083ae:	4770      	bx	lr

080083b0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80083b0:	b084      	sub	sp, #16
 80083b2:	b480      	push	{r7}
 80083b4:	b083      	sub	sp, #12
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
 80083ba:	f107 0014 	add.w	r0, r7, #20
 80083be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bc80      	pop	{r7}
 80083ec:	b004      	add	sp, #16
 80083ee:	4770      	bx	lr

080083f0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b09b      	sub	sp, #108	; 0x6c
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80083fa:	2300      	movs	r3, #0
 80083fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4413      	add	r3, r2
 800840a:	881b      	ldrh	r3, [r3, #0]
 800840c:	b29b      	uxth	r3, r3
 800840e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008416:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	78db      	ldrb	r3, [r3, #3]
 800841e:	2b03      	cmp	r3, #3
 8008420:	d81f      	bhi.n	8008462 <USB_ActivateEndpoint+0x72>
 8008422:	a201      	add	r2, pc, #4	; (adr r2, 8008428 <USB_ActivateEndpoint+0x38>)
 8008424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008428:	08008439 	.word	0x08008439
 800842c:	08008455 	.word	0x08008455
 8008430:	0800846b 	.word	0x0800846b
 8008434:	08008447 	.word	0x08008447
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008438:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800843c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008440:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008444:	e012      	b.n	800846c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008446:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800844a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800844e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008452:	e00b      	b.n	800846c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008454:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008458:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800845c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008460:	e004      	b.n	800846c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8008468:	e000      	b.n	800846c <USB_ActivateEndpoint+0x7c>
      break;
 800846a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	441a      	add	r2, r3
 8008476:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800847a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800847e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800848a:	b29b      	uxth	r3, r3
 800848c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4413      	add	r3, r2
 8008498:	881b      	ldrh	r3, [r3, #0]
 800849a:	b29b      	uxth	r3, r3
 800849c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084a4:	b29a      	uxth	r2, r3
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	4313      	orrs	r3, r2
 80084ae:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	441a      	add	r2, r3
 80084bc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80084c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	7b1b      	ldrb	r3, [r3, #12]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f040 8149 	bne.w	8008770 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	785b      	ldrb	r3, [r3, #1]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f000 8084 	beq.w	80085f0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	617b      	str	r3, [r7, #20]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	461a      	mov	r2, r3
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	4413      	add	r3, r2
 80084fa:	617b      	str	r3, [r7, #20]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	011a      	lsls	r2, r3, #4
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	4413      	add	r3, r2
 8008506:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800850a:	613b      	str	r3, [r7, #16]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	88db      	ldrh	r3, [r3, #6]
 8008510:	085b      	lsrs	r3, r3, #1
 8008512:	b29b      	uxth	r3, r3
 8008514:	005b      	lsls	r3, r3, #1
 8008516:	b29a      	uxth	r2, r3
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4413      	add	r3, r2
 8008526:	881b      	ldrh	r3, [r3, #0]
 8008528:	81fb      	strh	r3, [r7, #14]
 800852a:	89fb      	ldrh	r3, [r7, #14]
 800852c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008530:	2b00      	cmp	r3, #0
 8008532:	d01b      	beq.n	800856c <USB_ActivateEndpoint+0x17c>
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	4413      	add	r3, r2
 800853e:	881b      	ldrh	r3, [r3, #0]
 8008540:	b29b      	uxth	r3, r3
 8008542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800854a:	81bb      	strh	r3, [r7, #12]
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	441a      	add	r2, r3
 8008556:	89bb      	ldrh	r3, [r7, #12]
 8008558:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800855c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008560:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008564:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008568:	b29b      	uxth	r3, r3
 800856a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	78db      	ldrb	r3, [r3, #3]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d020      	beq.n	80085b6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4413      	add	r3, r2
 800857e:	881b      	ldrh	r3, [r3, #0]
 8008580:	b29b      	uxth	r3, r3
 8008582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008586:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800858a:	813b      	strh	r3, [r7, #8]
 800858c:	893b      	ldrh	r3, [r7, #8]
 800858e:	f083 0320 	eor.w	r3, r3, #32
 8008592:	813b      	strh	r3, [r7, #8]
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	441a      	add	r2, r3
 800859e:	893b      	ldrh	r3, [r7, #8]
 80085a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	8013      	strh	r3, [r2, #0]
 80085b4:	e27f      	b.n	8008ab6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	4413      	add	r3, r2
 80085c0:	881b      	ldrh	r3, [r3, #0]
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085cc:	817b      	strh	r3, [r7, #10]
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	441a      	add	r2, r3
 80085d8:	897b      	ldrh	r3, [r7, #10]
 80085da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	8013      	strh	r3, [r2, #0]
 80085ee:	e262      	b.n	8008ab6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	461a      	mov	r2, r3
 80085fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008600:	4413      	add	r3, r2
 8008602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	011a      	lsls	r2, r3, #4
 800860a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860c:	4413      	add	r3, r2
 800860e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008612:	62bb      	str	r3, [r7, #40]	; 0x28
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	88db      	ldrh	r3, [r3, #6]
 8008618:	085b      	lsrs	r3, r3, #1
 800861a:	b29b      	uxth	r3, r3
 800861c:	005b      	lsls	r3, r3, #1
 800861e:	b29a      	uxth	r2, r3
 8008620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008622:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	627b      	str	r3, [r7, #36]	; 0x24
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800862e:	b29b      	uxth	r3, r3
 8008630:	461a      	mov	r2, r3
 8008632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008634:	4413      	add	r3, r2
 8008636:	627b      	str	r3, [r7, #36]	; 0x24
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	011a      	lsls	r2, r3, #4
 800863e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008640:	4413      	add	r3, r2
 8008642:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008646:	623b      	str	r3, [r7, #32]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d112      	bne.n	8008676 <USB_ActivateEndpoint+0x286>
 8008650:	6a3b      	ldr	r3, [r7, #32]
 8008652:	881b      	ldrh	r3, [r3, #0]
 8008654:	b29b      	uxth	r3, r3
 8008656:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800865a:	b29a      	uxth	r2, r3
 800865c:	6a3b      	ldr	r3, [r7, #32]
 800865e:	801a      	strh	r2, [r3, #0]
 8008660:	6a3b      	ldr	r3, [r7, #32]
 8008662:	881b      	ldrh	r3, [r3, #0]
 8008664:	b29b      	uxth	r3, r3
 8008666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800866a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800866e:	b29a      	uxth	r2, r3
 8008670:	6a3b      	ldr	r3, [r7, #32]
 8008672:	801a      	strh	r2, [r3, #0]
 8008674:	e02f      	b.n	80086d6 <USB_ActivateEndpoint+0x2e6>
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	2b3e      	cmp	r3, #62	; 0x3e
 800867c:	d813      	bhi.n	80086a6 <USB_ActivateEndpoint+0x2b6>
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	085b      	lsrs	r3, r3, #1
 8008684:	663b      	str	r3, [r7, #96]	; 0x60
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	f003 0301 	and.w	r3, r3, #1
 800868e:	2b00      	cmp	r3, #0
 8008690:	d002      	beq.n	8008698 <USB_ActivateEndpoint+0x2a8>
 8008692:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008694:	3301      	adds	r3, #1
 8008696:	663b      	str	r3, [r7, #96]	; 0x60
 8008698:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800869a:	b29b      	uxth	r3, r3
 800869c:	029b      	lsls	r3, r3, #10
 800869e:	b29a      	uxth	r2, r3
 80086a0:	6a3b      	ldr	r3, [r7, #32]
 80086a2:	801a      	strh	r2, [r3, #0]
 80086a4:	e017      	b.n	80086d6 <USB_ActivateEndpoint+0x2e6>
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	095b      	lsrs	r3, r3, #5
 80086ac:	663b      	str	r3, [r7, #96]	; 0x60
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	f003 031f 	and.w	r3, r3, #31
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d102      	bne.n	80086c0 <USB_ActivateEndpoint+0x2d0>
 80086ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086bc:	3b01      	subs	r3, #1
 80086be:	663b      	str	r3, [r7, #96]	; 0x60
 80086c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	029b      	lsls	r3, r3, #10
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086d0:	b29a      	uxth	r2, r3
 80086d2:	6a3b      	ldr	r3, [r7, #32]
 80086d4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4413      	add	r3, r2
 80086e0:	881b      	ldrh	r3, [r3, #0]
 80086e2:	83fb      	strh	r3, [r7, #30]
 80086e4:	8bfb      	ldrh	r3, [r7, #30]
 80086e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d01b      	beq.n	8008726 <USB_ActivateEndpoint+0x336>
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	881b      	ldrh	r3, [r3, #0]
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008704:	83bb      	strh	r3, [r7, #28]
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	441a      	add	r2, r3
 8008710:	8bbb      	ldrh	r3, [r7, #28]
 8008712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800871a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800871e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008722:	b29b      	uxth	r3, r3
 8008724:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4413      	add	r3, r2
 8008730:	881b      	ldrh	r3, [r3, #0]
 8008732:	b29b      	uxth	r3, r3
 8008734:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800873c:	837b      	strh	r3, [r7, #26]
 800873e:	8b7b      	ldrh	r3, [r7, #26]
 8008740:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008744:	837b      	strh	r3, [r7, #26]
 8008746:	8b7b      	ldrh	r3, [r7, #26]
 8008748:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800874c:	837b      	strh	r3, [r7, #26]
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	441a      	add	r2, r3
 8008758:	8b7b      	ldrh	r3, [r7, #26]
 800875a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800875e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800876a:	b29b      	uxth	r3, r3
 800876c:	8013      	strh	r3, [r2, #0]
 800876e:	e1a2      	b.n	8008ab6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	4413      	add	r3, r2
 800877a:	881b      	ldrh	r3, [r3, #0]
 800877c:	b29b      	uxth	r3, r3
 800877e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008786:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	441a      	add	r2, r3
 8008794:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800879c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087a0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80087a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	461a      	mov	r2, r3
 80087ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087bc:	4413      	add	r3, r2
 80087be:	65bb      	str	r3, [r7, #88]	; 0x58
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	011a      	lsls	r2, r3, #4
 80087c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087c8:	4413      	add	r3, r2
 80087ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087ce:	657b      	str	r3, [r7, #84]	; 0x54
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	891b      	ldrh	r3, [r3, #8]
 80087d4:	085b      	lsrs	r3, r3, #1
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	005b      	lsls	r3, r3, #1
 80087da:	b29a      	uxth	r2, r3
 80087dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087de:	801a      	strh	r2, [r3, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	653b      	str	r3, [r7, #80]	; 0x50
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	461a      	mov	r2, r3
 80087ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087f0:	4413      	add	r3, r2
 80087f2:	653b      	str	r3, [r7, #80]	; 0x50
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	011a      	lsls	r2, r3, #4
 80087fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	895b      	ldrh	r3, [r3, #10]
 8008808:	085b      	lsrs	r3, r3, #1
 800880a:	b29b      	uxth	r3, r3
 800880c:	005b      	lsls	r3, r3, #1
 800880e:	b29a      	uxth	r2, r3
 8008810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008812:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	785b      	ldrb	r3, [r3, #1]
 8008818:	2b00      	cmp	r3, #0
 800881a:	f040 8091 	bne.w	8008940 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	4413      	add	r3, r2
 8008828:	881b      	ldrh	r3, [r3, #0]
 800882a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800882c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800882e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008832:	2b00      	cmp	r3, #0
 8008834:	d01b      	beq.n	800886e <USB_ActivateEndpoint+0x47e>
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	4413      	add	r3, r2
 8008840:	881b      	ldrh	r3, [r3, #0]
 8008842:	b29b      	uxth	r3, r3
 8008844:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800884c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	441a      	add	r2, r3
 8008858:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800885a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800885e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008862:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800886a:	b29b      	uxth	r3, r3
 800886c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	4413      	add	r3, r2
 8008878:	881b      	ldrh	r3, [r3, #0]
 800887a:	873b      	strh	r3, [r7, #56]	; 0x38
 800887c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800887e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008882:	2b00      	cmp	r3, #0
 8008884:	d01b      	beq.n	80088be <USB_ActivateEndpoint+0x4ce>
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	4413      	add	r3, r2
 8008890:	881b      	ldrh	r3, [r3, #0]
 8008892:	b29b      	uxth	r3, r3
 8008894:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800889c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	441a      	add	r2, r3
 80088a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80088aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	4413      	add	r3, r2
 80088c8:	881b      	ldrh	r3, [r3, #0]
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088d4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80088d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80088d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80088dc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80088de:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80088e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80088e4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	441a      	add	r2, r3
 80088f0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80088f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008902:	b29b      	uxth	r3, r3
 8008904:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	4413      	add	r3, r2
 8008910:	881b      	ldrh	r3, [r3, #0]
 8008912:	b29b      	uxth	r3, r3
 8008914:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800891c:	867b      	strh	r3, [r7, #50]	; 0x32
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	441a      	add	r2, r3
 8008928:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800892a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800892e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800893a:	b29b      	uxth	r3, r3
 800893c:	8013      	strh	r3, [r2, #0]
 800893e:	e0ba      	b.n	8008ab6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	4413      	add	r3, r2
 800894a:	881b      	ldrh	r3, [r3, #0]
 800894c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008950:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008958:	2b00      	cmp	r3, #0
 800895a:	d01d      	beq.n	8008998 <USB_ActivateEndpoint+0x5a8>
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	4413      	add	r3, r2
 8008966:	881b      	ldrh	r3, [r3, #0]
 8008968:	b29b      	uxth	r3, r3
 800896a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800896e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008972:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	441a      	add	r2, r3
 8008980:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800898c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008994:	b29b      	uxth	r3, r3
 8008996:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	881b      	ldrh	r3, [r3, #0]
 80089a4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80089a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80089ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d01d      	beq.n	80089f0 <USB_ActivateEndpoint+0x600>
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	4413      	add	r3, r2
 80089be:	881b      	ldrh	r3, [r3, #0]
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	441a      	add	r2, r3
 80089d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80089dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	78db      	ldrb	r3, [r3, #3]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d024      	beq.n	8008a42 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	4413      	add	r3, r2
 8008a02:	881b      	ldrh	r3, [r3, #0]
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008a12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008a16:	f083 0320 	eor.w	r3, r3, #32
 8008a1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	441a      	add	r2, r3
 8008a28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008a2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	8013      	strh	r3, [r2, #0]
 8008a40:	e01d      	b.n	8008a7e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	4413      	add	r3, r2
 8008a4c:	881b      	ldrh	r3, [r3, #0]
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a58:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	441a      	add	r2, r3
 8008a66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	4413      	add	r3, r2
 8008a88:	881b      	ldrh	r3, [r3, #0]
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a94:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	441a      	add	r2, r3
 8008aa0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008ab6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	376c      	adds	r7, #108	; 0x6c
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bc80      	pop	{r7}
 8008ac2:	4770      	bx	lr

08008ac4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b08d      	sub	sp, #52	; 0x34
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	7b1b      	ldrb	r3, [r3, #12]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f040 808e 	bne.w	8008bf4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	785b      	ldrb	r3, [r3, #1]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d044      	beq.n	8008b6a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	4413      	add	r3, r2
 8008aea:	881b      	ldrh	r3, [r3, #0]
 8008aec:	81bb      	strh	r3, [r7, #12]
 8008aee:	89bb      	ldrh	r3, [r7, #12]
 8008af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d01b      	beq.n	8008b30 <USB_DeactivateEndpoint+0x6c>
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	4413      	add	r3, r2
 8008b02:	881b      	ldrh	r3, [r3, #0]
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b0e:	817b      	strh	r3, [r7, #10]
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	441a      	add	r2, r3
 8008b1a:	897b      	ldrh	r3, [r7, #10]
 8008b1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4413      	add	r3, r2
 8008b3a:	881b      	ldrh	r3, [r3, #0]
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b46:	813b      	strh	r3, [r7, #8]
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	441a      	add	r2, r3
 8008b52:	893b      	ldrh	r3, [r7, #8]
 8008b54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	8013      	strh	r3, [r2, #0]
 8008b68:	e192      	b.n	8008e90 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	4413      	add	r3, r2
 8008b74:	881b      	ldrh	r3, [r3, #0]
 8008b76:	827b      	strh	r3, [r7, #18]
 8008b78:	8a7b      	ldrh	r3, [r7, #18]
 8008b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d01b      	beq.n	8008bba <USB_DeactivateEndpoint+0xf6>
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	4413      	add	r3, r2
 8008b8c:	881b      	ldrh	r3, [r3, #0]
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b98:	823b      	strh	r3, [r7, #16]
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	441a      	add	r2, r3
 8008ba4:	8a3b      	ldrh	r3, [r7, #16]
 8008ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	881b      	ldrh	r3, [r3, #0]
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bd0:	81fb      	strh	r3, [r7, #14]
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	441a      	add	r2, r3
 8008bdc:	89fb      	ldrh	r3, [r7, #14]
 8008bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	8013      	strh	r3, [r2, #0]
 8008bf2:	e14d      	b.n	8008e90 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	785b      	ldrb	r3, [r3, #1]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f040 80a5 	bne.w	8008d48 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	4413      	add	r3, r2
 8008c08:	881b      	ldrh	r3, [r3, #0]
 8008c0a:	843b      	strh	r3, [r7, #32]
 8008c0c:	8c3b      	ldrh	r3, [r7, #32]
 8008c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d01b      	beq.n	8008c4e <USB_DeactivateEndpoint+0x18a>
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	4413      	add	r3, r2
 8008c20:	881b      	ldrh	r3, [r3, #0]
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c2c:	83fb      	strh	r3, [r7, #30]
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	441a      	add	r2, r3
 8008c38:	8bfb      	ldrh	r3, [r7, #30]
 8008c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4413      	add	r3, r2
 8008c58:	881b      	ldrh	r3, [r3, #0]
 8008c5a:	83bb      	strh	r3, [r7, #28]
 8008c5c:	8bbb      	ldrh	r3, [r7, #28]
 8008c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d01b      	beq.n	8008c9e <USB_DeactivateEndpoint+0x1da>
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	4413      	add	r3, r2
 8008c70:	881b      	ldrh	r3, [r3, #0]
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c7c:	837b      	strh	r3, [r7, #26]
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	441a      	add	r2, r3
 8008c88:	8b7b      	ldrh	r3, [r7, #26]
 8008c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	4413      	add	r3, r2
 8008ca8:	881b      	ldrh	r3, [r3, #0]
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cb4:	833b      	strh	r3, [r7, #24]
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	441a      	add	r2, r3
 8008cc0:	8b3b      	ldrh	r3, [r7, #24]
 8008cc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	4413      	add	r3, r2
 8008ce0:	881b      	ldrh	r3, [r3, #0]
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cec:	82fb      	strh	r3, [r7, #22]
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	441a      	add	r2, r3
 8008cf8:	8afb      	ldrh	r3, [r7, #22]
 8008cfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	4413      	add	r3, r2
 8008d18:	881b      	ldrh	r3, [r3, #0]
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d24:	82bb      	strh	r3, [r7, #20]
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	441a      	add	r2, r3
 8008d30:	8abb      	ldrh	r3, [r7, #20]
 8008d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	8013      	strh	r3, [r2, #0]
 8008d46:	e0a3      	b.n	8008e90 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	4413      	add	r3, r2
 8008d52:	881b      	ldrh	r3, [r3, #0]
 8008d54:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008d56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008d58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d01b      	beq.n	8008d98 <USB_DeactivateEndpoint+0x2d4>
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	4413      	add	r3, r2
 8008d6a:	881b      	ldrh	r3, [r3, #0]
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d76:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	441a      	add	r2, r3
 8008d82:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	4413      	add	r3, r2
 8008da2:	881b      	ldrh	r3, [r3, #0]
 8008da4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008da6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d01b      	beq.n	8008de8 <USB_DeactivateEndpoint+0x324>
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4413      	add	r3, r2
 8008dba:	881b      	ldrh	r3, [r3, #0]
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dc6:	853b      	strh	r3, [r7, #40]	; 0x28
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	441a      	add	r2, r3
 8008dd2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008dd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008de0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	4413      	add	r3, r2
 8008df2:	881b      	ldrh	r3, [r3, #0]
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dfe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	441a      	add	r2, r3
 8008e0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	4413      	add	r3, r2
 8008e2a:	881b      	ldrh	r3, [r3, #0]
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e36:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	441a      	add	r2, r3
 8008e42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	4413      	add	r3, r2
 8008e62:	881b      	ldrh	r3, [r3, #0]
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e6e:	847b      	strh	r3, [r7, #34]	; 0x22
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	441a      	add	r2, r3
 8008e7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3734      	adds	r7, #52	; 0x34
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bc80      	pop	{r7}
 8008e9a:	4770      	bx	lr

08008e9c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b0c4      	sub	sp, #272	; 0x110
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	1d3b      	adds	r3, r7, #4
 8008ea4:	6018      	str	r0, [r3, #0]
 8008ea6:	463b      	mov	r3, r7
 8008ea8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008eaa:	463b      	mov	r3, r7
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	785b      	ldrb	r3, [r3, #1]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	f040 8557 	bne.w	8009964 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008eb6:	463b      	mov	r3, r7
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	699a      	ldr	r2, [r3, #24]
 8008ebc:	463b      	mov	r3, r7
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d905      	bls.n	8008ed2 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8008ec6:	463b      	mov	r3, r7
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008ed0:	e004      	b.n	8008edc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008ed2:	463b      	mov	r3, r7
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008edc:	463b      	mov	r3, r7
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	7b1b      	ldrb	r3, [r3, #12]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d12c      	bne.n	8008f40 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008ee6:	463b      	mov	r3, r7
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	6959      	ldr	r1, [r3, #20]
 8008eec:	463b      	mov	r3, r7
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	88da      	ldrh	r2, [r3, #6]
 8008ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	1d38      	adds	r0, r7, #4
 8008efa:	6800      	ldr	r0, [r0, #0]
 8008efc:	f001 fa2c 	bl	800a358 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008f00:	1d3b      	adds	r3, r7, #4
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	617b      	str	r3, [r7, #20]
 8008f06:	1d3b      	adds	r3, r7, #4
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	461a      	mov	r2, r3
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	4413      	add	r3, r2
 8008f16:	617b      	str	r3, [r7, #20]
 8008f18:	463b      	mov	r3, r7
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	011a      	lsls	r2, r3, #4
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	4413      	add	r3, r2
 8008f24:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008f28:	f107 0310 	add.w	r3, r7, #16
 8008f2c:	601a      	str	r2, [r3, #0]
 8008f2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f32:	b29a      	uxth	r2, r3
 8008f34:	f107 0310 	add.w	r3, r7, #16
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	801a      	strh	r2, [r3, #0]
 8008f3c:	f000 bcdd 	b.w	80098fa <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008f40:	463b      	mov	r3, r7
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	78db      	ldrb	r3, [r3, #3]
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	f040 8347 	bne.w	80095da <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008f4c:	463b      	mov	r3, r7
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	6a1a      	ldr	r2, [r3, #32]
 8008f52:	463b      	mov	r3, r7
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	f240 82eb 	bls.w	8009534 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008f5e:	1d3b      	adds	r3, r7, #4
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	463b      	mov	r3, r7
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	4413      	add	r3, r2
 8008f6c:	881b      	ldrh	r3, [r3, #0]
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f78:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8008f7c:	1d3b      	adds	r3, r7, #4
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	463b      	mov	r3, r7
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	441a      	add	r2, r3
 8008f8a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008f8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f96:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008fa2:	463b      	mov	r3, r7
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	6a1a      	ldr	r2, [r3, #32]
 8008fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008fac:	1ad2      	subs	r2, r2, r3
 8008fae:	463b      	mov	r3, r7
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008fb4:	1d3b      	adds	r3, r7, #4
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	463b      	mov	r3, r7
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	4413      	add	r3, r2
 8008fc2:	881b      	ldrh	r3, [r3, #0]
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f000 8159 	beq.w	8009282 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008fd0:	1d3b      	adds	r3, r7, #4
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	637b      	str	r3, [r7, #52]	; 0x34
 8008fd6:	463b      	mov	r3, r7
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	785b      	ldrb	r3, [r3, #1]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d164      	bne.n	80090aa <USB_EPStartXfer+0x20e>
 8008fe0:	1d3b      	adds	r3, r7, #4
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fe6:	1d3b      	adds	r3, r7, #4
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff4:	4413      	add	r3, r2
 8008ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ff8:	463b      	mov	r3, r7
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	011a      	lsls	r2, r3, #4
 8009000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009002:	4413      	add	r3, r2
 8009004:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009008:	62bb      	str	r3, [r7, #40]	; 0x28
 800900a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800900e:	2b00      	cmp	r3, #0
 8009010:	d112      	bne.n	8009038 <USB_EPStartXfer+0x19c>
 8009012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009014:	881b      	ldrh	r3, [r3, #0]
 8009016:	b29b      	uxth	r3, r3
 8009018:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800901c:	b29a      	uxth	r2, r3
 800901e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009020:	801a      	strh	r2, [r3, #0]
 8009022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009024:	881b      	ldrh	r3, [r3, #0]
 8009026:	b29b      	uxth	r3, r3
 8009028:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800902c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009030:	b29a      	uxth	r2, r3
 8009032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009034:	801a      	strh	r2, [r3, #0]
 8009036:	e054      	b.n	80090e2 <USB_EPStartXfer+0x246>
 8009038:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800903c:	2b3e      	cmp	r3, #62	; 0x3e
 800903e:	d817      	bhi.n	8009070 <USB_EPStartXfer+0x1d4>
 8009040:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009044:	085b      	lsrs	r3, r3, #1
 8009046:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800904a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800904e:	f003 0301 	and.w	r3, r3, #1
 8009052:	2b00      	cmp	r3, #0
 8009054:	d004      	beq.n	8009060 <USB_EPStartXfer+0x1c4>
 8009056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800905a:	3301      	adds	r3, #1
 800905c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009064:	b29b      	uxth	r3, r3
 8009066:	029b      	lsls	r3, r3, #10
 8009068:	b29a      	uxth	r2, r3
 800906a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906c:	801a      	strh	r2, [r3, #0]
 800906e:	e038      	b.n	80090e2 <USB_EPStartXfer+0x246>
 8009070:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009074:	095b      	lsrs	r3, r3, #5
 8009076:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800907a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800907e:	f003 031f 	and.w	r3, r3, #31
 8009082:	2b00      	cmp	r3, #0
 8009084:	d104      	bne.n	8009090 <USB_EPStartXfer+0x1f4>
 8009086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800908a:	3b01      	subs	r3, #1
 800908c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009094:	b29b      	uxth	r3, r3
 8009096:	029b      	lsls	r3, r3, #10
 8009098:	b29b      	uxth	r3, r3
 800909a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800909e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090a2:	b29a      	uxth	r2, r3
 80090a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a6:	801a      	strh	r2, [r3, #0]
 80090a8:	e01b      	b.n	80090e2 <USB_EPStartXfer+0x246>
 80090aa:	463b      	mov	r3, r7
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	785b      	ldrb	r3, [r3, #1]
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d116      	bne.n	80090e2 <USB_EPStartXfer+0x246>
 80090b4:	1d3b      	adds	r3, r7, #4
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090bc:	b29b      	uxth	r3, r3
 80090be:	461a      	mov	r2, r3
 80090c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090c2:	4413      	add	r3, r2
 80090c4:	637b      	str	r3, [r7, #52]	; 0x34
 80090c6:	463b      	mov	r3, r7
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	011a      	lsls	r2, r3, #4
 80090ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090d0:	4413      	add	r3, r2
 80090d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80090d6:	633b      	str	r3, [r7, #48]	; 0x30
 80090d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090dc:	b29a      	uxth	r2, r3
 80090de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80090e2:	463b      	mov	r3, r7
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	895b      	ldrh	r3, [r3, #10]
 80090e8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80090ec:	463b      	mov	r3, r7
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	6959      	ldr	r1, [r3, #20]
 80090f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80090fc:	1d38      	adds	r0, r7, #4
 80090fe:	6800      	ldr	r0, [r0, #0]
 8009100:	f001 f92a 	bl	800a358 <USB_WritePMA>
            ep->xfer_buff += len;
 8009104:	463b      	mov	r3, r7
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	695a      	ldr	r2, [r3, #20]
 800910a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800910e:	441a      	add	r2, r3
 8009110:	463b      	mov	r3, r7
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009116:	463b      	mov	r3, r7
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	6a1a      	ldr	r2, [r3, #32]
 800911c:	463b      	mov	r3, r7
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	429a      	cmp	r2, r3
 8009124:	d909      	bls.n	800913a <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8009126:	463b      	mov	r3, r7
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	6a1a      	ldr	r2, [r3, #32]
 800912c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009130:	1ad2      	subs	r2, r2, r3
 8009132:	463b      	mov	r3, r7
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	621a      	str	r2, [r3, #32]
 8009138:	e008      	b.n	800914c <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800913a:	463b      	mov	r3, r7
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	6a1b      	ldr	r3, [r3, #32]
 8009140:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8009144:	463b      	mov	r3, r7
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2200      	movs	r2, #0
 800914a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800914c:	463b      	mov	r3, r7
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	785b      	ldrb	r3, [r3, #1]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d164      	bne.n	8009220 <USB_EPStartXfer+0x384>
 8009156:	1d3b      	adds	r3, r7, #4
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	61fb      	str	r3, [r7, #28]
 800915c:	1d3b      	adds	r3, r7, #4
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009164:	b29b      	uxth	r3, r3
 8009166:	461a      	mov	r2, r3
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	4413      	add	r3, r2
 800916c:	61fb      	str	r3, [r7, #28]
 800916e:	463b      	mov	r3, r7
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	011a      	lsls	r2, r3, #4
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	4413      	add	r3, r2
 800917a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800917e:	61bb      	str	r3, [r7, #24]
 8009180:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009184:	2b00      	cmp	r3, #0
 8009186:	d112      	bne.n	80091ae <USB_EPStartXfer+0x312>
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	881b      	ldrh	r3, [r3, #0]
 800918c:	b29b      	uxth	r3, r3
 800918e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009192:	b29a      	uxth	r2, r3
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	801a      	strh	r2, [r3, #0]
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	881b      	ldrh	r3, [r3, #0]
 800919c:	b29b      	uxth	r3, r3
 800919e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091a6:	b29a      	uxth	r2, r3
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	801a      	strh	r2, [r3, #0]
 80091ac:	e057      	b.n	800925e <USB_EPStartXfer+0x3c2>
 80091ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091b2:	2b3e      	cmp	r3, #62	; 0x3e
 80091b4:	d817      	bhi.n	80091e6 <USB_EPStartXfer+0x34a>
 80091b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091ba:	085b      	lsrs	r3, r3, #1
 80091bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80091c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091c4:	f003 0301 	and.w	r3, r3, #1
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d004      	beq.n	80091d6 <USB_EPStartXfer+0x33a>
 80091cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80091d0:	3301      	adds	r3, #1
 80091d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80091d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80091da:	b29b      	uxth	r3, r3
 80091dc:	029b      	lsls	r3, r3, #10
 80091de:	b29a      	uxth	r2, r3
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	801a      	strh	r2, [r3, #0]
 80091e4:	e03b      	b.n	800925e <USB_EPStartXfer+0x3c2>
 80091e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091ea:	095b      	lsrs	r3, r3, #5
 80091ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80091f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091f4:	f003 031f 	and.w	r3, r3, #31
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d104      	bne.n	8009206 <USB_EPStartXfer+0x36a>
 80091fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009200:	3b01      	subs	r3, #1
 8009202:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009206:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800920a:	b29b      	uxth	r3, r3
 800920c:	029b      	lsls	r3, r3, #10
 800920e:	b29b      	uxth	r3, r3
 8009210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009218:	b29a      	uxth	r2, r3
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	801a      	strh	r2, [r3, #0]
 800921e:	e01e      	b.n	800925e <USB_EPStartXfer+0x3c2>
 8009220:	463b      	mov	r3, r7
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	785b      	ldrb	r3, [r3, #1]
 8009226:	2b01      	cmp	r3, #1
 8009228:	d119      	bne.n	800925e <USB_EPStartXfer+0x3c2>
 800922a:	1d3b      	adds	r3, r7, #4
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	627b      	str	r3, [r7, #36]	; 0x24
 8009230:	1d3b      	adds	r3, r7, #4
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009238:	b29b      	uxth	r3, r3
 800923a:	461a      	mov	r2, r3
 800923c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923e:	4413      	add	r3, r2
 8009240:	627b      	str	r3, [r7, #36]	; 0x24
 8009242:	463b      	mov	r3, r7
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	011a      	lsls	r2, r3, #4
 800924a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924c:	4413      	add	r3, r2
 800924e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009252:	623b      	str	r3, [r7, #32]
 8009254:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009258:	b29a      	uxth	r2, r3
 800925a:	6a3b      	ldr	r3, [r7, #32]
 800925c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800925e:	463b      	mov	r3, r7
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	891b      	ldrh	r3, [r3, #8]
 8009264:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009268:	463b      	mov	r3, r7
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	6959      	ldr	r1, [r3, #20]
 800926e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009272:	b29b      	uxth	r3, r3
 8009274:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8009278:	1d38      	adds	r0, r7, #4
 800927a:	6800      	ldr	r0, [r0, #0]
 800927c:	f001 f86c 	bl	800a358 <USB_WritePMA>
 8009280:	e33b      	b.n	80098fa <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009282:	463b      	mov	r3, r7
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	785b      	ldrb	r3, [r3, #1]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d164      	bne.n	8009356 <USB_EPStartXfer+0x4ba>
 800928c:	1d3b      	adds	r3, r7, #4
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009292:	1d3b      	adds	r3, r7, #4
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800929a:	b29b      	uxth	r3, r3
 800929c:	461a      	mov	r2, r3
 800929e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092a0:	4413      	add	r3, r2
 80092a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092a4:	463b      	mov	r3, r7
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	011a      	lsls	r2, r3, #4
 80092ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092ae:	4413      	add	r3, r2
 80092b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80092b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80092b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d112      	bne.n	80092e4 <USB_EPStartXfer+0x448>
 80092be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092c0:	881b      	ldrh	r3, [r3, #0]
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092cc:	801a      	strh	r2, [r3, #0]
 80092ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092d0:	881b      	ldrh	r3, [r3, #0]
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092dc:	b29a      	uxth	r2, r3
 80092de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092e0:	801a      	strh	r2, [r3, #0]
 80092e2:	e057      	b.n	8009394 <USB_EPStartXfer+0x4f8>
 80092e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092e8:	2b3e      	cmp	r3, #62	; 0x3e
 80092ea:	d817      	bhi.n	800931c <USB_EPStartXfer+0x480>
 80092ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092f0:	085b      	lsrs	r3, r3, #1
 80092f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80092f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092fa:	f003 0301 	and.w	r3, r3, #1
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d004      	beq.n	800930c <USB_EPStartXfer+0x470>
 8009302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009306:	3301      	adds	r3, #1
 8009308:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800930c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009310:	b29b      	uxth	r3, r3
 8009312:	029b      	lsls	r3, r3, #10
 8009314:	b29a      	uxth	r2, r3
 8009316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009318:	801a      	strh	r2, [r3, #0]
 800931a:	e03b      	b.n	8009394 <USB_EPStartXfer+0x4f8>
 800931c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009320:	095b      	lsrs	r3, r3, #5
 8009322:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009326:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800932a:	f003 031f 	and.w	r3, r3, #31
 800932e:	2b00      	cmp	r3, #0
 8009330:	d104      	bne.n	800933c <USB_EPStartXfer+0x4a0>
 8009332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009336:	3b01      	subs	r3, #1
 8009338:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800933c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009340:	b29b      	uxth	r3, r3
 8009342:	029b      	lsls	r3, r3, #10
 8009344:	b29b      	uxth	r3, r3
 8009346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800934a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800934e:	b29a      	uxth	r2, r3
 8009350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009352:	801a      	strh	r2, [r3, #0]
 8009354:	e01e      	b.n	8009394 <USB_EPStartXfer+0x4f8>
 8009356:	463b      	mov	r3, r7
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	785b      	ldrb	r3, [r3, #1]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d119      	bne.n	8009394 <USB_EPStartXfer+0x4f8>
 8009360:	1d3b      	adds	r3, r7, #4
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	657b      	str	r3, [r7, #84]	; 0x54
 8009366:	1d3b      	adds	r3, r7, #4
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800936e:	b29b      	uxth	r3, r3
 8009370:	461a      	mov	r2, r3
 8009372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009374:	4413      	add	r3, r2
 8009376:	657b      	str	r3, [r7, #84]	; 0x54
 8009378:	463b      	mov	r3, r7
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	011a      	lsls	r2, r3, #4
 8009380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009382:	4413      	add	r3, r2
 8009384:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009388:	653b      	str	r3, [r7, #80]	; 0x50
 800938a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800938e:	b29a      	uxth	r2, r3
 8009390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009392:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009394:	463b      	mov	r3, r7
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	891b      	ldrh	r3, [r3, #8]
 800939a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800939e:	463b      	mov	r3, r7
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	6959      	ldr	r1, [r3, #20]
 80093a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80093ae:	1d38      	adds	r0, r7, #4
 80093b0:	6800      	ldr	r0, [r0, #0]
 80093b2:	f000 ffd1 	bl	800a358 <USB_WritePMA>
            ep->xfer_buff += len;
 80093b6:	463b      	mov	r3, r7
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	695a      	ldr	r2, [r3, #20]
 80093bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093c0:	441a      	add	r2, r3
 80093c2:	463b      	mov	r3, r7
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80093c8:	463b      	mov	r3, r7
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	6a1a      	ldr	r2, [r3, #32]
 80093ce:	463b      	mov	r3, r7
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d909      	bls.n	80093ec <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80093d8:	463b      	mov	r3, r7
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	6a1a      	ldr	r2, [r3, #32]
 80093de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093e2:	1ad2      	subs	r2, r2, r3
 80093e4:	463b      	mov	r3, r7
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	621a      	str	r2, [r3, #32]
 80093ea:	e008      	b.n	80093fe <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80093ec:	463b      	mov	r3, r7
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6a1b      	ldr	r3, [r3, #32]
 80093f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80093f6:	463b      	mov	r3, r7
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2200      	movs	r2, #0
 80093fc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80093fe:	1d3b      	adds	r3, r7, #4
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	647b      	str	r3, [r7, #68]	; 0x44
 8009404:	463b      	mov	r3, r7
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	785b      	ldrb	r3, [r3, #1]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d164      	bne.n	80094d8 <USB_EPStartXfer+0x63c>
 800940e:	1d3b      	adds	r3, r7, #4
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009414:	1d3b      	adds	r3, r7, #4
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800941c:	b29b      	uxth	r3, r3
 800941e:	461a      	mov	r2, r3
 8009420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009422:	4413      	add	r3, r2
 8009424:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009426:	463b      	mov	r3, r7
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	011a      	lsls	r2, r3, #4
 800942e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009430:	4413      	add	r3, r2
 8009432:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009436:	63bb      	str	r3, [r7, #56]	; 0x38
 8009438:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800943c:	2b00      	cmp	r3, #0
 800943e:	d112      	bne.n	8009466 <USB_EPStartXfer+0x5ca>
 8009440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009442:	881b      	ldrh	r3, [r3, #0]
 8009444:	b29b      	uxth	r3, r3
 8009446:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800944a:	b29a      	uxth	r2, r3
 800944c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944e:	801a      	strh	r2, [r3, #0]
 8009450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009452:	881b      	ldrh	r3, [r3, #0]
 8009454:	b29b      	uxth	r3, r3
 8009456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800945a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800945e:	b29a      	uxth	r2, r3
 8009460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009462:	801a      	strh	r2, [r3, #0]
 8009464:	e054      	b.n	8009510 <USB_EPStartXfer+0x674>
 8009466:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800946a:	2b3e      	cmp	r3, #62	; 0x3e
 800946c:	d817      	bhi.n	800949e <USB_EPStartXfer+0x602>
 800946e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009472:	085b      	lsrs	r3, r3, #1
 8009474:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009478:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800947c:	f003 0301 	and.w	r3, r3, #1
 8009480:	2b00      	cmp	r3, #0
 8009482:	d004      	beq.n	800948e <USB_EPStartXfer+0x5f2>
 8009484:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009488:	3301      	adds	r3, #1
 800948a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800948e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009492:	b29b      	uxth	r3, r3
 8009494:	029b      	lsls	r3, r3, #10
 8009496:	b29a      	uxth	r2, r3
 8009498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949a:	801a      	strh	r2, [r3, #0]
 800949c:	e038      	b.n	8009510 <USB_EPStartXfer+0x674>
 800949e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094a2:	095b      	lsrs	r3, r3, #5
 80094a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80094a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094ac:	f003 031f 	and.w	r3, r3, #31
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d104      	bne.n	80094be <USB_EPStartXfer+0x622>
 80094b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80094b8:	3b01      	subs	r3, #1
 80094ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80094be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	029b      	lsls	r3, r3, #10
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094d0:	b29a      	uxth	r2, r3
 80094d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d4:	801a      	strh	r2, [r3, #0]
 80094d6:	e01b      	b.n	8009510 <USB_EPStartXfer+0x674>
 80094d8:	463b      	mov	r3, r7
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	785b      	ldrb	r3, [r3, #1]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d116      	bne.n	8009510 <USB_EPStartXfer+0x674>
 80094e2:	1d3b      	adds	r3, r7, #4
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	461a      	mov	r2, r3
 80094ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094f0:	4413      	add	r3, r2
 80094f2:	647b      	str	r3, [r7, #68]	; 0x44
 80094f4:	463b      	mov	r3, r7
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	011a      	lsls	r2, r3, #4
 80094fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094fe:	4413      	add	r3, r2
 8009500:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009504:	643b      	str	r3, [r7, #64]	; 0x40
 8009506:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800950a:	b29a      	uxth	r2, r3
 800950c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800950e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009510:	463b      	mov	r3, r7
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	895b      	ldrh	r3, [r3, #10]
 8009516:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800951a:	463b      	mov	r3, r7
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	6959      	ldr	r1, [r3, #20]
 8009520:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009524:	b29b      	uxth	r3, r3
 8009526:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800952a:	1d38      	adds	r0, r7, #4
 800952c:	6800      	ldr	r0, [r0, #0]
 800952e:	f000 ff13 	bl	800a358 <USB_WritePMA>
 8009532:	e1e2      	b.n	80098fa <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009534:	463b      	mov	r3, r7
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	6a1b      	ldr	r3, [r3, #32]
 800953a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800953e:	1d3b      	adds	r3, r7, #4
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	463b      	mov	r3, r7
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	4413      	add	r3, r2
 800954c:	881b      	ldrh	r3, [r3, #0]
 800954e:	b29b      	uxth	r3, r3
 8009550:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009558:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800955c:	1d3b      	adds	r3, r7, #4
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	463b      	mov	r3, r7
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	441a      	add	r2, r3
 800956a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800956e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009572:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800957a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800957e:	b29b      	uxth	r3, r3
 8009580:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009582:	1d3b      	adds	r3, r7, #4
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	663b      	str	r3, [r7, #96]	; 0x60
 8009588:	1d3b      	adds	r3, r7, #4
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009590:	b29b      	uxth	r3, r3
 8009592:	461a      	mov	r2, r3
 8009594:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009596:	4413      	add	r3, r2
 8009598:	663b      	str	r3, [r7, #96]	; 0x60
 800959a:	463b      	mov	r3, r7
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	011a      	lsls	r2, r3, #4
 80095a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095a4:	4413      	add	r3, r2
 80095a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80095aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80095b6:	463b      	mov	r3, r7
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	891b      	ldrh	r3, [r3, #8]
 80095bc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80095c0:	463b      	mov	r3, r7
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	6959      	ldr	r1, [r3, #20]
 80095c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80095d0:	1d38      	adds	r0, r7, #4
 80095d2:	6800      	ldr	r0, [r0, #0]
 80095d4:	f000 fec0 	bl	800a358 <USB_WritePMA>
 80095d8:	e18f      	b.n	80098fa <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80095da:	1d3b      	adds	r3, r7, #4
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	463b      	mov	r3, r7
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	4413      	add	r3, r2
 80095e8:	881b      	ldrh	r3, [r3, #0]
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f000 808f 	beq.w	8009714 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80095f6:	1d3b      	adds	r3, r7, #4
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80095fc:	463b      	mov	r3, r7
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	785b      	ldrb	r3, [r3, #1]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d164      	bne.n	80096d0 <USB_EPStartXfer+0x834>
 8009606:	1d3b      	adds	r3, r7, #4
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	673b      	str	r3, [r7, #112]	; 0x70
 800960c:	1d3b      	adds	r3, r7, #4
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009614:	b29b      	uxth	r3, r3
 8009616:	461a      	mov	r2, r3
 8009618:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800961a:	4413      	add	r3, r2
 800961c:	673b      	str	r3, [r7, #112]	; 0x70
 800961e:	463b      	mov	r3, r7
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	011a      	lsls	r2, r3, #4
 8009626:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009628:	4413      	add	r3, r2
 800962a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800962e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009630:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009634:	2b00      	cmp	r3, #0
 8009636:	d112      	bne.n	800965e <USB_EPStartXfer+0x7c2>
 8009638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800963a:	881b      	ldrh	r3, [r3, #0]
 800963c:	b29b      	uxth	r3, r3
 800963e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009642:	b29a      	uxth	r2, r3
 8009644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009646:	801a      	strh	r2, [r3, #0]
 8009648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800964a:	881b      	ldrh	r3, [r3, #0]
 800964c:	b29b      	uxth	r3, r3
 800964e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009656:	b29a      	uxth	r2, r3
 8009658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800965a:	801a      	strh	r2, [r3, #0]
 800965c:	e054      	b.n	8009708 <USB_EPStartXfer+0x86c>
 800965e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009662:	2b3e      	cmp	r3, #62	; 0x3e
 8009664:	d817      	bhi.n	8009696 <USB_EPStartXfer+0x7fa>
 8009666:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800966a:	085b      	lsrs	r3, r3, #1
 800966c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009670:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009674:	f003 0301 	and.w	r3, r3, #1
 8009678:	2b00      	cmp	r3, #0
 800967a:	d004      	beq.n	8009686 <USB_EPStartXfer+0x7ea>
 800967c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009680:	3301      	adds	r3, #1
 8009682:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800968a:	b29b      	uxth	r3, r3
 800968c:	029b      	lsls	r3, r3, #10
 800968e:	b29a      	uxth	r2, r3
 8009690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009692:	801a      	strh	r2, [r3, #0]
 8009694:	e038      	b.n	8009708 <USB_EPStartXfer+0x86c>
 8009696:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800969a:	095b      	lsrs	r3, r3, #5
 800969c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80096a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096a4:	f003 031f 	and.w	r3, r3, #31
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d104      	bne.n	80096b6 <USB_EPStartXfer+0x81a>
 80096ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096b0:	3b01      	subs	r3, #1
 80096b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80096b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	029b      	lsls	r3, r3, #10
 80096be:	b29b      	uxth	r3, r3
 80096c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096c8:	b29a      	uxth	r2, r3
 80096ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096cc:	801a      	strh	r2, [r3, #0]
 80096ce:	e01b      	b.n	8009708 <USB_EPStartXfer+0x86c>
 80096d0:	463b      	mov	r3, r7
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	785b      	ldrb	r3, [r3, #1]
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d116      	bne.n	8009708 <USB_EPStartXfer+0x86c>
 80096da:	1d3b      	adds	r3, r7, #4
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	461a      	mov	r2, r3
 80096e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096e8:	4413      	add	r3, r2
 80096ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80096ec:	463b      	mov	r3, r7
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	011a      	lsls	r2, r3, #4
 80096f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096f6:	4413      	add	r3, r2
 80096f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80096fc:	677b      	str	r3, [r7, #116]	; 0x74
 80096fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009702:	b29a      	uxth	r2, r3
 8009704:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009706:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009708:	463b      	mov	r3, r7
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	895b      	ldrh	r3, [r3, #10]
 800970e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8009712:	e097      	b.n	8009844 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009714:	463b      	mov	r3, r7
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	785b      	ldrb	r3, [r3, #1]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d168      	bne.n	80097f0 <USB_EPStartXfer+0x954>
 800971e:	1d3b      	adds	r3, r7, #4
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009726:	1d3b      	adds	r3, r7, #4
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800972e:	b29b      	uxth	r3, r3
 8009730:	461a      	mov	r2, r3
 8009732:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009736:	4413      	add	r3, r2
 8009738:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800973c:	463b      	mov	r3, r7
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	011a      	lsls	r2, r3, #4
 8009744:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009748:	4413      	add	r3, r2
 800974a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800974e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009750:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009754:	2b00      	cmp	r3, #0
 8009756:	d112      	bne.n	800977e <USB_EPStartXfer+0x8e2>
 8009758:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800975a:	881b      	ldrh	r3, [r3, #0]
 800975c:	b29b      	uxth	r3, r3
 800975e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009762:	b29a      	uxth	r2, r3
 8009764:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009766:	801a      	strh	r2, [r3, #0]
 8009768:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800976a:	881b      	ldrh	r3, [r3, #0]
 800976c:	b29b      	uxth	r3, r3
 800976e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009776:	b29a      	uxth	r2, r3
 8009778:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800977a:	801a      	strh	r2, [r3, #0]
 800977c:	e05d      	b.n	800983a <USB_EPStartXfer+0x99e>
 800977e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009782:	2b3e      	cmp	r3, #62	; 0x3e
 8009784:	d817      	bhi.n	80097b6 <USB_EPStartXfer+0x91a>
 8009786:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800978a:	085b      	lsrs	r3, r3, #1
 800978c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009790:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009794:	f003 0301 	and.w	r3, r3, #1
 8009798:	2b00      	cmp	r3, #0
 800979a:	d004      	beq.n	80097a6 <USB_EPStartXfer+0x90a>
 800979c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80097a0:	3301      	adds	r3, #1
 80097a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80097a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	029b      	lsls	r3, r3, #10
 80097ae:	b29a      	uxth	r2, r3
 80097b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80097b2:	801a      	strh	r2, [r3, #0]
 80097b4:	e041      	b.n	800983a <USB_EPStartXfer+0x99e>
 80097b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80097ba:	095b      	lsrs	r3, r3, #5
 80097bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80097c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80097c4:	f003 031f 	and.w	r3, r3, #31
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d104      	bne.n	80097d6 <USB_EPStartXfer+0x93a>
 80097cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80097d0:	3b01      	subs	r3, #1
 80097d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80097d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80097da:	b29b      	uxth	r3, r3
 80097dc:	029b      	lsls	r3, r3, #10
 80097de:	b29b      	uxth	r3, r3
 80097e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097e8:	b29a      	uxth	r2, r3
 80097ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80097ec:	801a      	strh	r2, [r3, #0]
 80097ee:	e024      	b.n	800983a <USB_EPStartXfer+0x99e>
 80097f0:	463b      	mov	r3, r7
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	785b      	ldrb	r3, [r3, #1]
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d11f      	bne.n	800983a <USB_EPStartXfer+0x99e>
 80097fa:	1d3b      	adds	r3, r7, #4
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009802:	1d3b      	adds	r3, r7, #4
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800980a:	b29b      	uxth	r3, r3
 800980c:	461a      	mov	r2, r3
 800980e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009812:	4413      	add	r3, r2
 8009814:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009818:	463b      	mov	r3, r7
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	011a      	lsls	r2, r3, #4
 8009820:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009824:	4413      	add	r3, r2
 8009826:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800982a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800982e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009832:	b29a      	uxth	r2, r3
 8009834:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009838:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800983a:	463b      	mov	r3, r7
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	891b      	ldrh	r3, [r3, #8]
 8009840:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009844:	463b      	mov	r3, r7
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	6959      	ldr	r1, [r3, #20]
 800984a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800984e:	b29b      	uxth	r3, r3
 8009850:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8009854:	1d38      	adds	r0, r7, #4
 8009856:	6800      	ldr	r0, [r0, #0]
 8009858:	f000 fd7e 	bl	800a358 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800985c:	463b      	mov	r3, r7
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	785b      	ldrb	r3, [r3, #1]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d122      	bne.n	80098ac <USB_EPStartXfer+0xa10>
 8009866:	1d3b      	adds	r3, r7, #4
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	463b      	mov	r3, r7
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	4413      	add	r3, r2
 8009874:	881b      	ldrh	r3, [r3, #0]
 8009876:	b29b      	uxth	r3, r3
 8009878:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800987c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009880:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8009884:	1d3b      	adds	r3, r7, #4
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	463b      	mov	r3, r7
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	441a      	add	r2, r3
 8009892:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8009896:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800989a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800989e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	8013      	strh	r3, [r2, #0]
 80098aa:	e026      	b.n	80098fa <USB_EPStartXfer+0xa5e>
 80098ac:	463b      	mov	r3, r7
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	785b      	ldrb	r3, [r3, #1]
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d121      	bne.n	80098fa <USB_EPStartXfer+0xa5e>
 80098b6:	1d3b      	adds	r3, r7, #4
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	463b      	mov	r3, r7
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	4413      	add	r3, r2
 80098c4:	881b      	ldrh	r3, [r3, #0]
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098d0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80098d4:	1d3b      	adds	r3, r7, #4
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	463b      	mov	r3, r7
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	441a      	add	r2, r3
 80098e2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80098e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80098f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80098fa:	1d3b      	adds	r3, r7, #4
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	463b      	mov	r3, r7
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4413      	add	r3, r2
 8009908:	881b      	ldrh	r3, [r3, #0]
 800990a:	b29b      	uxth	r3, r3
 800990c:	f107 020e 	add.w	r2, r7, #14
 8009910:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009918:	8013      	strh	r3, [r2, #0]
 800991a:	f107 030e 	add.w	r3, r7, #14
 800991e:	f107 020e 	add.w	r2, r7, #14
 8009922:	8812      	ldrh	r2, [r2, #0]
 8009924:	f082 0210 	eor.w	r2, r2, #16
 8009928:	801a      	strh	r2, [r3, #0]
 800992a:	f107 030e 	add.w	r3, r7, #14
 800992e:	f107 020e 	add.w	r2, r7, #14
 8009932:	8812      	ldrh	r2, [r2, #0]
 8009934:	f082 0220 	eor.w	r2, r2, #32
 8009938:	801a      	strh	r2, [r3, #0]
 800993a:	1d3b      	adds	r3, r7, #4
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	463b      	mov	r3, r7
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	441a      	add	r2, r3
 8009948:	f107 030e 	add.w	r3, r7, #14
 800994c:	881b      	ldrh	r3, [r3, #0]
 800994e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800995a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800995e:	b29b      	uxth	r3, r3
 8009960:	8013      	strh	r3, [r2, #0]
 8009962:	e3b5      	b.n	800a0d0 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009964:	463b      	mov	r3, r7
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	7b1b      	ldrb	r3, [r3, #12]
 800996a:	2b00      	cmp	r3, #0
 800996c:	f040 8090 	bne.w	8009a90 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009970:	463b      	mov	r3, r7
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	699a      	ldr	r2, [r3, #24]
 8009976:	463b      	mov	r3, r7
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	429a      	cmp	r2, r3
 800997e:	d90e      	bls.n	800999e <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8009980:	463b      	mov	r3, r7
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	691b      	ldr	r3, [r3, #16]
 8009986:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800998a:	463b      	mov	r3, r7
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	699a      	ldr	r2, [r3, #24]
 8009990:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009994:	1ad2      	subs	r2, r2, r3
 8009996:	463b      	mov	r3, r7
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	619a      	str	r2, [r3, #24]
 800999c:	e008      	b.n	80099b0 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 800999e:	463b      	mov	r3, r7
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	699b      	ldr	r3, [r3, #24]
 80099a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80099a8:	463b      	mov	r3, r7
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2200      	movs	r2, #0
 80099ae:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80099b0:	1d3b      	adds	r3, r7, #4
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80099b8:	1d3b      	adds	r3, r7, #4
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	461a      	mov	r2, r3
 80099c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80099c8:	4413      	add	r3, r2
 80099ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80099ce:	463b      	mov	r3, r7
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	011a      	lsls	r2, r3, #4
 80099d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80099da:	4413      	add	r3, r2
 80099dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80099e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80099e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d116      	bne.n	8009a1a <USB_EPStartXfer+0xb7e>
 80099ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099f0:	881b      	ldrh	r3, [r3, #0]
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099fe:	801a      	strh	r2, [r3, #0]
 8009a00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a04:	881b      	ldrh	r3, [r3, #0]
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a16:	801a      	strh	r2, [r3, #0]
 8009a18:	e32c      	b.n	800a074 <USB_EPStartXfer+0x11d8>
 8009a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a1e:	2b3e      	cmp	r3, #62	; 0x3e
 8009a20:	d818      	bhi.n	8009a54 <USB_EPStartXfer+0xbb8>
 8009a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a26:	085b      	lsrs	r3, r3, #1
 8009a28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a30:	f003 0301 	and.w	r3, r3, #1
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d004      	beq.n	8009a42 <USB_EPStartXfer+0xba6>
 8009a38:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009a42:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	029b      	lsls	r3, r3, #10
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a50:	801a      	strh	r2, [r3, #0]
 8009a52:	e30f      	b.n	800a074 <USB_EPStartXfer+0x11d8>
 8009a54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a58:	095b      	lsrs	r3, r3, #5
 8009a5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009a5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a62:	f003 031f 	and.w	r3, r3, #31
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d104      	bne.n	8009a74 <USB_EPStartXfer+0xbd8>
 8009a6a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009a74:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	029b      	lsls	r3, r3, #10
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a8c:	801a      	strh	r2, [r3, #0]
 8009a8e:	e2f1      	b.n	800a074 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009a90:	463b      	mov	r3, r7
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	78db      	ldrb	r3, [r3, #3]
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	f040 818f 	bne.w	8009dba <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009a9c:	463b      	mov	r3, r7
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	785b      	ldrb	r3, [r3, #1]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d175      	bne.n	8009b92 <USB_EPStartXfer+0xcf6>
 8009aa6:	1d3b      	adds	r3, r7, #4
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009aae:	1d3b      	adds	r3, r7, #4
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	461a      	mov	r2, r3
 8009aba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009abe:	4413      	add	r3, r2
 8009ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ac4:	463b      	mov	r3, r7
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	011a      	lsls	r2, r3, #4
 8009acc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009ad0:	4413      	add	r3, r2
 8009ad2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009ad6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ada:	463b      	mov	r3, r7
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	691b      	ldr	r3, [r3, #16]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d116      	bne.n	8009b12 <USB_EPStartXfer+0xc76>
 8009ae4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ae8:	881b      	ldrh	r3, [r3, #0]
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009af0:	b29a      	uxth	r2, r3
 8009af2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009af6:	801a      	strh	r2, [r3, #0]
 8009af8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009afc:	881b      	ldrh	r3, [r3, #0]
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b08:	b29a      	uxth	r2, r3
 8009b0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b0e:	801a      	strh	r2, [r3, #0]
 8009b10:	e065      	b.n	8009bde <USB_EPStartXfer+0xd42>
 8009b12:	463b      	mov	r3, r7
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	2b3e      	cmp	r3, #62	; 0x3e
 8009b1a:	d81a      	bhi.n	8009b52 <USB_EPStartXfer+0xcb6>
 8009b1c:	463b      	mov	r3, r7
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	085b      	lsrs	r3, r3, #1
 8009b24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009b28:	463b      	mov	r3, r7
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	691b      	ldr	r3, [r3, #16]
 8009b2e:	f003 0301 	and.w	r3, r3, #1
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d004      	beq.n	8009b40 <USB_EPStartXfer+0xca4>
 8009b36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009b40:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	029b      	lsls	r3, r3, #10
 8009b48:	b29a      	uxth	r2, r3
 8009b4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b4e:	801a      	strh	r2, [r3, #0]
 8009b50:	e045      	b.n	8009bde <USB_EPStartXfer+0xd42>
 8009b52:	463b      	mov	r3, r7
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	691b      	ldr	r3, [r3, #16]
 8009b58:	095b      	lsrs	r3, r3, #5
 8009b5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009b5e:	463b      	mov	r3, r7
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	f003 031f 	and.w	r3, r3, #31
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d104      	bne.n	8009b76 <USB_EPStartXfer+0xcda>
 8009b6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009b70:	3b01      	subs	r3, #1
 8009b72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009b76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	029b      	lsls	r3, r3, #10
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b88:	b29a      	uxth	r2, r3
 8009b8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b8e:	801a      	strh	r2, [r3, #0]
 8009b90:	e025      	b.n	8009bde <USB_EPStartXfer+0xd42>
 8009b92:	463b      	mov	r3, r7
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	785b      	ldrb	r3, [r3, #1]
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d120      	bne.n	8009bde <USB_EPStartXfer+0xd42>
 8009b9c:	1d3b      	adds	r3, r7, #4
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ba4:	1d3b      	adds	r3, r7, #4
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	461a      	mov	r2, r3
 8009bb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009bba:	463b      	mov	r3, r7
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	011a      	lsls	r2, r3, #4
 8009bc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009bc6:	4413      	add	r3, r2
 8009bc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009bd0:	463b      	mov	r3, r7
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	b29a      	uxth	r2, r3
 8009bd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009bdc:	801a      	strh	r2, [r3, #0]
 8009bde:	1d3b      	adds	r3, r7, #4
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009be6:	463b      	mov	r3, r7
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	785b      	ldrb	r3, [r3, #1]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d175      	bne.n	8009cdc <USB_EPStartXfer+0xe40>
 8009bf0:	1d3b      	adds	r3, r7, #4
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009bf8:	1d3b      	adds	r3, r7, #4
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	461a      	mov	r2, r3
 8009c04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009c08:	4413      	add	r3, r2
 8009c0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009c0e:	463b      	mov	r3, r7
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	011a      	lsls	r2, r3, #4
 8009c16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009c1a:	4413      	add	r3, r2
 8009c1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009c20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009c24:	463b      	mov	r3, r7
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	691b      	ldr	r3, [r3, #16]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d116      	bne.n	8009c5c <USB_EPStartXfer+0xdc0>
 8009c2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c32:	881b      	ldrh	r3, [r3, #0]
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c3a:	b29a      	uxth	r2, r3
 8009c3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c40:	801a      	strh	r2, [r3, #0]
 8009c42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c46:	881b      	ldrh	r3, [r3, #0]
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c52:	b29a      	uxth	r2, r3
 8009c54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c58:	801a      	strh	r2, [r3, #0]
 8009c5a:	e061      	b.n	8009d20 <USB_EPStartXfer+0xe84>
 8009c5c:	463b      	mov	r3, r7
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	691b      	ldr	r3, [r3, #16]
 8009c62:	2b3e      	cmp	r3, #62	; 0x3e
 8009c64:	d81a      	bhi.n	8009c9c <USB_EPStartXfer+0xe00>
 8009c66:	463b      	mov	r3, r7
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	691b      	ldr	r3, [r3, #16]
 8009c6c:	085b      	lsrs	r3, r3, #1
 8009c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009c72:	463b      	mov	r3, r7
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	691b      	ldr	r3, [r3, #16]
 8009c78:	f003 0301 	and.w	r3, r3, #1
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d004      	beq.n	8009c8a <USB_EPStartXfer+0xdee>
 8009c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c84:	3301      	adds	r3, #1
 8009c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	029b      	lsls	r3, r3, #10
 8009c92:	b29a      	uxth	r2, r3
 8009c94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c98:	801a      	strh	r2, [r3, #0]
 8009c9a:	e041      	b.n	8009d20 <USB_EPStartXfer+0xe84>
 8009c9c:	463b      	mov	r3, r7
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	095b      	lsrs	r3, r3, #5
 8009ca4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009ca8:	463b      	mov	r3, r7
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	f003 031f 	and.w	r3, r3, #31
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d104      	bne.n	8009cc0 <USB_EPStartXfer+0xe24>
 8009cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	029b      	lsls	r3, r3, #10
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cd2:	b29a      	uxth	r2, r3
 8009cd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009cd8:	801a      	strh	r2, [r3, #0]
 8009cda:	e021      	b.n	8009d20 <USB_EPStartXfer+0xe84>
 8009cdc:	463b      	mov	r3, r7
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	785b      	ldrb	r3, [r3, #1]
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d11c      	bne.n	8009d20 <USB_EPStartXfer+0xe84>
 8009ce6:	1d3b      	adds	r3, r7, #4
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009cf6:	4413      	add	r3, r2
 8009cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009cfc:	463b      	mov	r3, r7
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	011a      	lsls	r2, r3, #4
 8009d04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d08:	4413      	add	r3, r2
 8009d0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009d0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009d12:	463b      	mov	r3, r7
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	691b      	ldr	r3, [r3, #16]
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d1e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009d20:	463b      	mov	r3, r7
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	69db      	ldr	r3, [r3, #28]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	f000 81a4 	beq.w	800a074 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009d2c:	1d3b      	adds	r3, r7, #4
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	463b      	mov	r3, r7
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	4413      	add	r3, r2
 8009d3a:	881b      	ldrh	r3, [r3, #0]
 8009d3c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009d40:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d005      	beq.n	8009d58 <USB_EPStartXfer+0xebc>
 8009d4c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d10d      	bne.n	8009d74 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009d58:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009d5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f040 8187 	bne.w	800a074 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009d66:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f040 8180 	bne.w	800a074 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009d74:	1d3b      	adds	r3, r7, #4
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	463b      	mov	r3, r7
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	4413      	add	r3, r2
 8009d82:	881b      	ldrh	r3, [r3, #0]
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d8e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8009d92:	1d3b      	adds	r3, r7, #4
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	463b      	mov	r3, r7
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	441a      	add	r2, r3
 8009da0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8009da4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009da8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009db0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	8013      	strh	r3, [r2, #0]
 8009db8:	e15c      	b.n	800a074 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009dba:	463b      	mov	r3, r7
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	78db      	ldrb	r3, [r3, #3]
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	f040 8155 	bne.w	800a070 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009dc6:	463b      	mov	r3, r7
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	699a      	ldr	r2, [r3, #24]
 8009dcc:	463b      	mov	r3, r7
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	691b      	ldr	r3, [r3, #16]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d90e      	bls.n	8009df4 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8009dd6:	463b      	mov	r3, r7
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	691b      	ldr	r3, [r3, #16]
 8009ddc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8009de0:	463b      	mov	r3, r7
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	699a      	ldr	r2, [r3, #24]
 8009de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009dea:	1ad2      	subs	r2, r2, r3
 8009dec:	463b      	mov	r3, r7
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	619a      	str	r2, [r3, #24]
 8009df2:	e008      	b.n	8009e06 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8009df4:	463b      	mov	r3, r7
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	699b      	ldr	r3, [r3, #24]
 8009dfa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8009dfe:	463b      	mov	r3, r7
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2200      	movs	r2, #0
 8009e04:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009e06:	463b      	mov	r3, r7
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	785b      	ldrb	r3, [r3, #1]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d16f      	bne.n	8009ef0 <USB_EPStartXfer+0x1054>
 8009e10:	1d3b      	adds	r3, r7, #4
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e18:	1d3b      	adds	r3, r7, #4
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	461a      	mov	r2, r3
 8009e24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009e28:	4413      	add	r3, r2
 8009e2a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e2e:	463b      	mov	r3, r7
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	011a      	lsls	r2, r3, #4
 8009e36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009e3a:	4413      	add	r3, r2
 8009e3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009e40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009e44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d116      	bne.n	8009e7a <USB_EPStartXfer+0xfde>
 8009e4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009e50:	881b      	ldrh	r3, [r3, #0]
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009e58:	b29a      	uxth	r2, r3
 8009e5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009e5e:	801a      	strh	r2, [r3, #0]
 8009e60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009e64:	881b      	ldrh	r3, [r3, #0]
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e70:	b29a      	uxth	r2, r3
 8009e72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009e76:	801a      	strh	r2, [r3, #0]
 8009e78:	e05f      	b.n	8009f3a <USB_EPStartXfer+0x109e>
 8009e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e7e:	2b3e      	cmp	r3, #62	; 0x3e
 8009e80:	d818      	bhi.n	8009eb4 <USB_EPStartXfer+0x1018>
 8009e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e86:	085b      	lsrs	r3, r3, #1
 8009e88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009e8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e90:	f003 0301 	and.w	r3, r3, #1
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d004      	beq.n	8009ea2 <USB_EPStartXfer+0x1006>
 8009e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	029b      	lsls	r3, r3, #10
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009eb0:	801a      	strh	r2, [r3, #0]
 8009eb2:	e042      	b.n	8009f3a <USB_EPStartXfer+0x109e>
 8009eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009eb8:	095b      	lsrs	r3, r3, #5
 8009eba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ec2:	f003 031f 	and.w	r3, r3, #31
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d104      	bne.n	8009ed4 <USB_EPStartXfer+0x1038>
 8009eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	029b      	lsls	r3, r3, #10
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ee6:	b29a      	uxth	r2, r3
 8009ee8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009eec:	801a      	strh	r2, [r3, #0]
 8009eee:	e024      	b.n	8009f3a <USB_EPStartXfer+0x109e>
 8009ef0:	463b      	mov	r3, r7
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	785b      	ldrb	r3, [r3, #1]
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d11f      	bne.n	8009f3a <USB_EPStartXfer+0x109e>
 8009efa:	1d3b      	adds	r3, r7, #4
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009f02:	1d3b      	adds	r3, r7, #4
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f12:	4413      	add	r3, r2
 8009f14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009f18:	463b      	mov	r3, r7
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	011a      	lsls	r2, r3, #4
 8009f20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f24:	4413      	add	r3, r2
 8009f26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009f2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009f2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f32:	b29a      	uxth	r2, r3
 8009f34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f38:	801a      	strh	r2, [r3, #0]
 8009f3a:	1d3b      	adds	r3, r7, #4
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009f42:	463b      	mov	r3, r7
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	785b      	ldrb	r3, [r3, #1]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d16f      	bne.n	800a02c <USB_EPStartXfer+0x1190>
 8009f4c:	1d3b      	adds	r3, r7, #4
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f54:	1d3b      	adds	r3, r7, #4
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	461a      	mov	r2, r3
 8009f60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009f64:	4413      	add	r3, r2
 8009f66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f6a:	463b      	mov	r3, r7
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	011a      	lsls	r2, r3, #4
 8009f72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009f76:	4413      	add	r3, r2
 8009f78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009f7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009f80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d116      	bne.n	8009fb6 <USB_EPStartXfer+0x111a>
 8009f88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009f8c:	881b      	ldrh	r3, [r3, #0]
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f94:	b29a      	uxth	r2, r3
 8009f96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009f9a:	801a      	strh	r2, [r3, #0]
 8009f9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009fa0:	881b      	ldrh	r3, [r3, #0]
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009fb2:	801a      	strh	r2, [r3, #0]
 8009fb4:	e05e      	b.n	800a074 <USB_EPStartXfer+0x11d8>
 8009fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009fba:	2b3e      	cmp	r3, #62	; 0x3e
 8009fbc:	d818      	bhi.n	8009ff0 <USB_EPStartXfer+0x1154>
 8009fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009fc2:	085b      	lsrs	r3, r3, #1
 8009fc4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009fcc:	f003 0301 	and.w	r3, r3, #1
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d004      	beq.n	8009fde <USB_EPStartXfer+0x1142>
 8009fd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fd8:	3301      	adds	r3, #1
 8009fda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	029b      	lsls	r3, r3, #10
 8009fe6:	b29a      	uxth	r2, r3
 8009fe8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009fec:	801a      	strh	r2, [r3, #0]
 8009fee:	e041      	b.n	800a074 <USB_EPStartXfer+0x11d8>
 8009ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ff4:	095b      	lsrs	r3, r3, #5
 8009ff6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009ffa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ffe:	f003 031f 	and.w	r3, r3, #31
 800a002:	2b00      	cmp	r3, #0
 800a004:	d104      	bne.n	800a010 <USB_EPStartXfer+0x1174>
 800a006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a00a:	3b01      	subs	r3, #1
 800a00c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a014:	b29b      	uxth	r3, r3
 800a016:	029b      	lsls	r3, r3, #10
 800a018:	b29b      	uxth	r3, r3
 800a01a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a01e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a022:	b29a      	uxth	r2, r3
 800a024:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a028:	801a      	strh	r2, [r3, #0]
 800a02a:	e023      	b.n	800a074 <USB_EPStartXfer+0x11d8>
 800a02c:	463b      	mov	r3, r7
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	785b      	ldrb	r3, [r3, #1]
 800a032:	2b01      	cmp	r3, #1
 800a034:	d11e      	bne.n	800a074 <USB_EPStartXfer+0x11d8>
 800a036:	1d3b      	adds	r3, r7, #4
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a03e:	b29b      	uxth	r3, r3
 800a040:	461a      	mov	r2, r3
 800a042:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a046:	4413      	add	r3, r2
 800a048:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a04c:	463b      	mov	r3, r7
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	011a      	lsls	r2, r3, #4
 800a054:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a058:	4413      	add	r3, r2
 800a05a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a05e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a062:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a066:	b29a      	uxth	r2, r3
 800a068:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a06c:	801a      	strh	r2, [r3, #0]
 800a06e:	e001      	b.n	800a074 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	e02e      	b.n	800a0d2 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a074:	1d3b      	adds	r3, r7, #4
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	463b      	mov	r3, r7
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	4413      	add	r3, r2
 800a082:	881b      	ldrh	r3, [r3, #0]
 800a084:	b29b      	uxth	r3, r3
 800a086:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a08a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a08e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800a092:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a096:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a09a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800a09e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a0a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a0a6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800a0aa:	1d3b      	adds	r3, r7, #4
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	463b      	mov	r3, r7
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	009b      	lsls	r3, r3, #2
 800a0b6:	441a      	add	r2, r3
 800a0b8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a0bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b085      	sub	sp, #20
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	785b      	ldrb	r3, [r3, #1]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d020      	beq.n	800a130 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	4413      	add	r3, r2
 800a0f8:	881b      	ldrh	r3, [r3, #0]
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a104:	81bb      	strh	r3, [r7, #12]
 800a106:	89bb      	ldrh	r3, [r7, #12]
 800a108:	f083 0310 	eor.w	r3, r3, #16
 800a10c:	81bb      	strh	r3, [r7, #12]
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	441a      	add	r2, r3
 800a118:	89bb      	ldrh	r3, [r7, #12]
 800a11a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a11e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	8013      	strh	r3, [r2, #0]
 800a12e:	e01f      	b.n	800a170 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	4413      	add	r3, r2
 800a13a:	881b      	ldrh	r3, [r3, #0]
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a146:	81fb      	strh	r3, [r7, #14]
 800a148:	89fb      	ldrh	r3, [r7, #14]
 800a14a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a14e:	81fb      	strh	r3, [r7, #14]
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	441a      	add	r2, r3
 800a15a:	89fb      	ldrh	r3, [r7, #14]
 800a15c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	3714      	adds	r7, #20
 800a176:	46bd      	mov	sp, r7
 800a178:	bc80      	pop	{r7}
 800a17a:	4770      	bx	lr

0800a17c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b087      	sub	sp, #28
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	7b1b      	ldrb	r3, [r3, #12]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	f040 809d 	bne.w	800a2ca <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	785b      	ldrb	r3, [r3, #1]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d04c      	beq.n	800a232 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	4413      	add	r3, r2
 800a1a2:	881b      	ldrh	r3, [r3, #0]
 800a1a4:	823b      	strh	r3, [r7, #16]
 800a1a6:	8a3b      	ldrh	r3, [r7, #16]
 800a1a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d01b      	beq.n	800a1e8 <USB_EPClearStall+0x6c>
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	4413      	add	r3, r2
 800a1ba:	881b      	ldrh	r3, [r3, #0]
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1c6:	81fb      	strh	r3, [r7, #14]
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	441a      	add	r2, r3
 800a1d2:	89fb      	ldrh	r3, [r7, #14]
 800a1d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	78db      	ldrb	r3, [r3, #3]
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d06c      	beq.n	800a2ca <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	781b      	ldrb	r3, [r3, #0]
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	4413      	add	r3, r2
 800a1fa:	881b      	ldrh	r3, [r3, #0]
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a206:	81bb      	strh	r3, [r7, #12]
 800a208:	89bb      	ldrh	r3, [r7, #12]
 800a20a:	f083 0320 	eor.w	r3, r3, #32
 800a20e:	81bb      	strh	r3, [r7, #12]
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	441a      	add	r2, r3
 800a21a:	89bb      	ldrh	r3, [r7, #12]
 800a21c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	8013      	strh	r3, [r2, #0]
 800a230:	e04b      	b.n	800a2ca <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	4413      	add	r3, r2
 800a23c:	881b      	ldrh	r3, [r3, #0]
 800a23e:	82fb      	strh	r3, [r7, #22]
 800a240:	8afb      	ldrh	r3, [r7, #22]
 800a242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a246:	2b00      	cmp	r3, #0
 800a248:	d01b      	beq.n	800a282 <USB_EPClearStall+0x106>
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	4413      	add	r3, r2
 800a254:	881b      	ldrh	r3, [r3, #0]
 800a256:	b29b      	uxth	r3, r3
 800a258:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a25c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a260:	82bb      	strh	r3, [r7, #20]
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	441a      	add	r2, r3
 800a26c:	8abb      	ldrh	r3, [r7, #20]
 800a26e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a276:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a27a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a27e:	b29b      	uxth	r3, r3
 800a280:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	4413      	add	r3, r2
 800a28c:	881b      	ldrh	r3, [r3, #0]
 800a28e:	b29b      	uxth	r3, r3
 800a290:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a298:	827b      	strh	r3, [r7, #18]
 800a29a:	8a7b      	ldrh	r3, [r7, #18]
 800a29c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a2a0:	827b      	strh	r3, [r7, #18]
 800a2a2:	8a7b      	ldrh	r3, [r7, #18]
 800a2a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a2a8:	827b      	strh	r3, [r7, #18]
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	441a      	add	r2, r3
 800a2b4:	8a7b      	ldrh	r3, [r7, #18]
 800a2b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a2ca:	2300      	movs	r3, #0
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	371c      	adds	r7, #28
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bc80      	pop	{r7}
 800a2d4:	4770      	bx	lr

0800a2d6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a2d6:	b480      	push	{r7}
 800a2d8:	b083      	sub	sp, #12
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
 800a2de:	460b      	mov	r3, r1
 800a2e0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a2e2:	78fb      	ldrb	r3, [r7, #3]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d103      	bne.n	800a2f0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2280      	movs	r2, #128	; 0x80
 800a2ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	370c      	adds	r7, #12
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bc80      	pop	{r7}
 800a2fa:	4770      	bx	lr

0800a2fc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	370c      	adds	r7, #12
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bc80      	pop	{r7}
 800a30e:	4770      	bx	lr

0800a310 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	370c      	adds	r7, #12
 800a31e:	46bd      	mov	sp, r7
 800a320:	bc80      	pop	{r7}
 800a322:	4770      	bx	lr

0800a324 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a332:	b29b      	uxth	r3, r3
 800a334:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a336:	68fb      	ldr	r3, [r7, #12]
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3714      	adds	r7, #20
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bc80      	pop	{r7}
 800a340:	4770      	bx	lr

0800a342 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a342:	b480      	push	{r7}
 800a344:	b083      	sub	sp, #12
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
 800a34a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a34c:	2300      	movs	r3, #0
}
 800a34e:	4618      	mov	r0, r3
 800a350:	370c      	adds	r7, #12
 800a352:	46bd      	mov	sp, r7
 800a354:	bc80      	pop	{r7}
 800a356:	4770      	bx	lr

0800a358 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a358:	b480      	push	{r7}
 800a35a:	b08d      	sub	sp, #52	; 0x34
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	60b9      	str	r1, [r7, #8]
 800a362:	4611      	mov	r1, r2
 800a364:	461a      	mov	r2, r3
 800a366:	460b      	mov	r3, r1
 800a368:	80fb      	strh	r3, [r7, #6]
 800a36a:	4613      	mov	r3, r2
 800a36c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a36e:	88bb      	ldrh	r3, [r7, #4]
 800a370:	3301      	adds	r3, #1
 800a372:	085b      	lsrs	r3, r3, #1
 800a374:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a37e:	88fb      	ldrh	r3, [r7, #6]
 800a380:	005a      	lsls	r2, r3, #1
 800a382:	69fb      	ldr	r3, [r7, #28]
 800a384:	4413      	add	r3, r2
 800a386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a38a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a38c:	6a3b      	ldr	r3, [r7, #32]
 800a38e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a390:	e01e      	b.n	800a3d0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39a:	3301      	adds	r3, #1
 800a39c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	021b      	lsls	r3, r3, #8
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	b29a      	uxth	r2, r3
 800a3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ba:	3302      	adds	r3, #2
 800a3bc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800a3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c0:	3302      	adds	r3, #2
 800a3c2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800a3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3cc:	3b01      	subs	r3, #1
 800a3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1dd      	bne.n	800a392 <USB_WritePMA+0x3a>
  }
}
 800a3d6:	bf00      	nop
 800a3d8:	bf00      	nop
 800a3da:	3734      	adds	r7, #52	; 0x34
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bc80      	pop	{r7}
 800a3e0:	4770      	bx	lr

0800a3e2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a3e2:	b480      	push	{r7}
 800a3e4:	b08b      	sub	sp, #44	; 0x2c
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	60f8      	str	r0, [r7, #12]
 800a3ea:	60b9      	str	r1, [r7, #8]
 800a3ec:	4611      	mov	r1, r2
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	80fb      	strh	r3, [r7, #6]
 800a3f4:	4613      	mov	r3, r2
 800a3f6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a3f8:	88bb      	ldrh	r3, [r7, #4]
 800a3fa:	085b      	lsrs	r3, r3, #1
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a408:	88fb      	ldrh	r3, [r7, #6]
 800a40a:	005a      	lsls	r2, r3, #1
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	4413      	add	r3, r2
 800a410:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a414:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a416:	69bb      	ldr	r3, [r7, #24]
 800a418:	627b      	str	r3, [r7, #36]	; 0x24
 800a41a:	e01b      	b.n	800a454 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a41c:	6a3b      	ldr	r3, [r7, #32]
 800a41e:	881b      	ldrh	r3, [r3, #0]
 800a420:	b29b      	uxth	r3, r3
 800a422:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a424:	6a3b      	ldr	r3, [r7, #32]
 800a426:	3302      	adds	r3, #2
 800a428:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	b2da      	uxtb	r2, r3
 800a42e:	69fb      	ldr	r3, [r7, #28]
 800a430:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a432:	69fb      	ldr	r3, [r7, #28]
 800a434:	3301      	adds	r3, #1
 800a436:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	0a1b      	lsrs	r3, r3, #8
 800a43c:	b2da      	uxtb	r2, r3
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a442:	69fb      	ldr	r3, [r7, #28]
 800a444:	3301      	adds	r3, #1
 800a446:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a448:	6a3b      	ldr	r3, [r7, #32]
 800a44a:	3302      	adds	r3, #2
 800a44c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800a44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a450:	3b01      	subs	r3, #1
 800a452:	627b      	str	r3, [r7, #36]	; 0x24
 800a454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1e0      	bne.n	800a41c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a45a:	88bb      	ldrh	r3, [r7, #4]
 800a45c:	f003 0301 	and.w	r3, r3, #1
 800a460:	b29b      	uxth	r3, r3
 800a462:	2b00      	cmp	r3, #0
 800a464:	d007      	beq.n	800a476 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800a466:	6a3b      	ldr	r3, [r7, #32]
 800a468:	881b      	ldrh	r3, [r3, #0]
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	b2da      	uxtb	r2, r3
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	701a      	strb	r2, [r3, #0]
  }
}
 800a476:	bf00      	nop
 800a478:	372c      	adds	r7, #44	; 0x2c
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bc80      	pop	{r7}
 800a47e:	4770      	bx	lr

0800a480 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	460b      	mov	r3, r1
 800a48a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a48c:	2300      	movs	r3, #0
 800a48e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	7c1b      	ldrb	r3, [r3, #16]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d115      	bne.n	800a4c4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a49c:	2202      	movs	r2, #2
 800a49e:	2181      	movs	r1, #129	; 0x81
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f001 fe8a 	bl	800c1ba <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a4ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4b0:	2202      	movs	r2, #2
 800a4b2:	2101      	movs	r1, #1
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f001 fe80 	bl	800c1ba <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2201      	movs	r2, #1
 800a4be:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a4c2:	e012      	b.n	800a4ea <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a4c4:	2340      	movs	r3, #64	; 0x40
 800a4c6:	2202      	movs	r2, #2
 800a4c8:	2181      	movs	r1, #129	; 0x81
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f001 fe75 	bl	800c1ba <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a4d6:	2340      	movs	r3, #64	; 0x40
 800a4d8:	2202      	movs	r2, #2
 800a4da:	2101      	movs	r1, #1
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f001 fe6c 	bl	800c1ba <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a4ea:	2308      	movs	r3, #8
 800a4ec:	2203      	movs	r2, #3
 800a4ee:	2182      	movs	r1, #130	; 0x82
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f001 fe62 	bl	800c1ba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a4fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a500:	f001 ff82 	bl	800c408 <USBD_static_malloc>
 800a504:	4602      	mov	r2, r0
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a512:	2b00      	cmp	r3, #0
 800a514:	d102      	bne.n	800a51c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a516:	2301      	movs	r3, #1
 800a518:	73fb      	strb	r3, [r7, #15]
 800a51a:	e026      	b.n	800a56a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a522:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	2200      	movs	r2, #0
 800a532:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	2200      	movs	r2, #0
 800a53a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	7c1b      	ldrb	r3, [r3, #16]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d109      	bne.n	800a55a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a54c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a550:	2101      	movs	r1, #1
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f001 ff22 	bl	800c39c <USBD_LL_PrepareReceive>
 800a558:	e007      	b.n	800a56a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a560:	2340      	movs	r3, #64	; 0x40
 800a562:	2101      	movs	r1, #1
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f001 ff19 	bl	800c39c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a56a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3710      	adds	r7, #16
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	460b      	mov	r3, r1
 800a57e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a580:	2300      	movs	r3, #0
 800a582:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a584:	2181      	movs	r1, #129	; 0x81
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f001 fe3d 	bl	800c206 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a592:	2101      	movs	r1, #1
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f001 fe36 	bl	800c206 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2200      	movs	r2, #0
 800a59e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a5a2:	2182      	movs	r1, #130	; 0x82
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f001 fe2e 	bl	800c206 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d00e      	beq.n	800a5d8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f001 ff28 	bl	800c420 <USBD_static_free>
    pdev->pClassData = NULL;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a5d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3710      	adds	r7, #16
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b086      	sub	sp, #24
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
 800a5ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5f2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d039      	beq.n	800a680 <USBD_CDC_Setup+0x9e>
 800a60c:	2b20      	cmp	r3, #32
 800a60e:	d17f      	bne.n	800a710 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	88db      	ldrh	r3, [r3, #6]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d029      	beq.n	800a66c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	b25b      	sxtb	r3, r3
 800a61e:	2b00      	cmp	r3, #0
 800a620:	da11      	bge.n	800a646 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	683a      	ldr	r2, [r7, #0]
 800a62c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a62e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a630:	683a      	ldr	r2, [r7, #0]
 800a632:	88d2      	ldrh	r2, [r2, #6]
 800a634:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a636:	6939      	ldr	r1, [r7, #16]
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	88db      	ldrh	r3, [r3, #6]
 800a63c:	461a      	mov	r2, r3
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f001 fa09 	bl	800ba56 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a644:	e06b      	b.n	800a71e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	785a      	ldrb	r2, [r3, #1]
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	88db      	ldrh	r3, [r3, #6]
 800a654:	b2da      	uxtb	r2, r3
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a65c:	6939      	ldr	r1, [r7, #16]
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	88db      	ldrh	r3, [r3, #6]
 800a662:	461a      	mov	r2, r3
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f001 fa24 	bl	800bab2 <USBD_CtlPrepareRx>
      break;
 800a66a:	e058      	b.n	800a71e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	683a      	ldr	r2, [r7, #0]
 800a676:	7850      	ldrb	r0, [r2, #1]
 800a678:	2200      	movs	r2, #0
 800a67a:	6839      	ldr	r1, [r7, #0]
 800a67c:	4798      	blx	r3
      break;
 800a67e:	e04e      	b.n	800a71e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	785b      	ldrb	r3, [r3, #1]
 800a684:	2b0b      	cmp	r3, #11
 800a686:	d02e      	beq.n	800a6e6 <USBD_CDC_Setup+0x104>
 800a688:	2b0b      	cmp	r3, #11
 800a68a:	dc38      	bgt.n	800a6fe <USBD_CDC_Setup+0x11c>
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d002      	beq.n	800a696 <USBD_CDC_Setup+0xb4>
 800a690:	2b0a      	cmp	r3, #10
 800a692:	d014      	beq.n	800a6be <USBD_CDC_Setup+0xdc>
 800a694:	e033      	b.n	800a6fe <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a69c:	2b03      	cmp	r3, #3
 800a69e:	d107      	bne.n	800a6b0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a6a0:	f107 030c 	add.w	r3, r7, #12
 800a6a4:	2202      	movs	r2, #2
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f001 f9d4 	bl	800ba56 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a6ae:	e02e      	b.n	800a70e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a6b0:	6839      	ldr	r1, [r7, #0]
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f001 f965 	bl	800b982 <USBD_CtlError>
            ret = USBD_FAIL;
 800a6b8:	2302      	movs	r3, #2
 800a6ba:	75fb      	strb	r3, [r7, #23]
          break;
 800a6bc:	e027      	b.n	800a70e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6c4:	2b03      	cmp	r3, #3
 800a6c6:	d107      	bne.n	800a6d8 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a6c8:	f107 030f 	add.w	r3, r7, #15
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f001 f9c0 	bl	800ba56 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a6d6:	e01a      	b.n	800a70e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a6d8:	6839      	ldr	r1, [r7, #0]
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f001 f951 	bl	800b982 <USBD_CtlError>
            ret = USBD_FAIL;
 800a6e0:	2302      	movs	r3, #2
 800a6e2:	75fb      	strb	r3, [r7, #23]
          break;
 800a6e4:	e013      	b.n	800a70e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6ec:	2b03      	cmp	r3, #3
 800a6ee:	d00d      	beq.n	800a70c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a6f0:	6839      	ldr	r1, [r7, #0]
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f001 f945 	bl	800b982 <USBD_CtlError>
            ret = USBD_FAIL;
 800a6f8:	2302      	movs	r3, #2
 800a6fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a6fc:	e006      	b.n	800a70c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a6fe:	6839      	ldr	r1, [r7, #0]
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f001 f93e 	bl	800b982 <USBD_CtlError>
          ret = USBD_FAIL;
 800a706:	2302      	movs	r3, #2
 800a708:	75fb      	strb	r3, [r7, #23]
          break;
 800a70a:	e000      	b.n	800a70e <USBD_CDC_Setup+0x12c>
          break;
 800a70c:	bf00      	nop
      }
      break;
 800a70e:	e006      	b.n	800a71e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a710:	6839      	ldr	r1, [r7, #0]
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f001 f935 	bl	800b982 <USBD_CtlError>
      ret = USBD_FAIL;
 800a718:	2302      	movs	r3, #2
 800a71a:	75fb      	strb	r3, [r7, #23]
      break;
 800a71c:	bf00      	nop
  }

  return ret;
 800a71e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a720:	4618      	mov	r0, r3
 800a722:	3718      	adds	r7, #24
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	460b      	mov	r3, r1
 800a732:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a73a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a742:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d03a      	beq.n	800a7c4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a74e:	78fa      	ldrb	r2, [r7, #3]
 800a750:	6879      	ldr	r1, [r7, #4]
 800a752:	4613      	mov	r3, r2
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	4413      	add	r3, r2
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	440b      	add	r3, r1
 800a75c:	331c      	adds	r3, #28
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d029      	beq.n	800a7b8 <USBD_CDC_DataIn+0x90>
 800a764:	78fa      	ldrb	r2, [r7, #3]
 800a766:	6879      	ldr	r1, [r7, #4]
 800a768:	4613      	mov	r3, r2
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	4413      	add	r3, r2
 800a76e:	009b      	lsls	r3, r3, #2
 800a770:	440b      	add	r3, r1
 800a772:	331c      	adds	r3, #28
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	78f9      	ldrb	r1, [r7, #3]
 800a778:	68b8      	ldr	r0, [r7, #8]
 800a77a:	460b      	mov	r3, r1
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	440b      	add	r3, r1
 800a780:	00db      	lsls	r3, r3, #3
 800a782:	4403      	add	r3, r0
 800a784:	3338      	adds	r3, #56	; 0x38
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	fbb2 f1f3 	udiv	r1, r2, r3
 800a78c:	fb03 f301 	mul.w	r3, r3, r1
 800a790:	1ad3      	subs	r3, r2, r3
 800a792:	2b00      	cmp	r3, #0
 800a794:	d110      	bne.n	800a7b8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a796:	78fa      	ldrb	r2, [r7, #3]
 800a798:	6879      	ldr	r1, [r7, #4]
 800a79a:	4613      	mov	r3, r2
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	4413      	add	r3, r2
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	440b      	add	r3, r1
 800a7a4:	331c      	adds	r3, #28
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a7aa:	78f9      	ldrb	r1, [r7, #3]
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f001 fdd0 	bl	800c356 <USBD_LL_Transmit>
 800a7b6:	e003      	b.n	800a7c0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	e000      	b.n	800a7c6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a7c4:	2302      	movs	r3, #2
  }
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3710      	adds	r7, #16
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}

0800a7ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b084      	sub	sp, #16
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7e0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a7e2:	78fb      	ldrb	r3, [r7, #3]
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f001 fdfb 	bl	800c3e2 <USBD_LL_GetRxDataSize>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00d      	beq.n	800a81a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a804:	68db      	ldr	r3, [r3, #12]
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a80c:	68fa      	ldr	r2, [r7, #12]
 800a80e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a812:	4611      	mov	r1, r2
 800a814:	4798      	blx	r3

    return USBD_OK;
 800a816:	2300      	movs	r3, #0
 800a818:	e000      	b.n	800a81c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a81a:	2302      	movs	r3, #2
  }
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3710      	adds	r7, #16
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a832:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d015      	beq.n	800a86a <USBD_CDC_EP0_RxReady+0x46>
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a844:	2bff      	cmp	r3, #255	; 0xff
 800a846:	d010      	beq.n	800a86a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	68fa      	ldr	r2, [r7, #12]
 800a852:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a856:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a85e:	b292      	uxth	r2, r2
 800a860:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	22ff      	movs	r2, #255	; 0xff
 800a866:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a86a:	2300      	movs	r3, #0
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a874:	b480      	push	{r7}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2243      	movs	r2, #67	; 0x43
 800a880:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a882:	4b03      	ldr	r3, [pc, #12]	; (800a890 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a884:	4618      	mov	r0, r3
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	bc80      	pop	{r7}
 800a88c:	4770      	bx	lr
 800a88e:	bf00      	nop
 800a890:	200000a8 	.word	0x200000a8

0800a894 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2243      	movs	r2, #67	; 0x43
 800a8a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a8a2:	4b03      	ldr	r3, [pc, #12]	; (800a8b0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	370c      	adds	r7, #12
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bc80      	pop	{r7}
 800a8ac:	4770      	bx	lr
 800a8ae:	bf00      	nop
 800a8b0:	20000064 	.word	0x20000064

0800a8b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2243      	movs	r2, #67	; 0x43
 800a8c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a8c2:	4b03      	ldr	r3, [pc, #12]	; (800a8d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bc80      	pop	{r7}
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	200000ec 	.word	0x200000ec

0800a8d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	220a      	movs	r2, #10
 800a8e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a8e2:	4b03      	ldr	r3, [pc, #12]	; (800a8f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	370c      	adds	r7, #12
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bc80      	pop	{r7}
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop
 800a8f0:	20000020 	.word	0x20000020

0800a8f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a8fe:	2302      	movs	r3, #2
 800a900:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d005      	beq.n	800a914 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	683a      	ldr	r2, [r7, #0]
 800a90c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a910:	2300      	movs	r3, #0
 800a912:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a914:	7bfb      	ldrb	r3, [r7, #15]
}
 800a916:	4618      	mov	r0, r3
 800a918:	3714      	adds	r7, #20
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bc80      	pop	{r7}
 800a91e:	4770      	bx	lr

0800a920 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a920:	b480      	push	{r7}
 800a922:	b087      	sub	sp, #28
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	4613      	mov	r3, r2
 800a92c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a934:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	68ba      	ldr	r2, [r7, #8]
 800a93a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a93e:	88fa      	ldrh	r2, [r7, #6]
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a946:	2300      	movs	r3, #0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	371c      	adds	r7, #28
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bc80      	pop	{r7}
 800a950:	4770      	bx	lr

0800a952 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a952:	b480      	push	{r7}
 800a954:	b085      	sub	sp, #20
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
 800a95a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a962:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	683a      	ldr	r2, [r7, #0]
 800a968:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a96c:	2300      	movs	r3, #0
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3714      	adds	r7, #20
 800a972:	46bd      	mov	sp, r7
 800a974:	bc80      	pop	{r7}
 800a976:	4770      	bx	lr

0800a978 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a986:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d01c      	beq.n	800a9cc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d115      	bne.n	800a9c8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	2181      	movs	r1, #129	; 0x81
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f001 fcc9 	bl	800c356 <USBD_LL_Transmit>

      return USBD_OK;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	e002      	b.n	800a9ce <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	e000      	b.n	800a9ce <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a9cc:	2302      	movs	r3, #2
  }
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3710      	adds	r7, #16
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}

0800a9d6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	b084      	sub	sp, #16
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9e4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d017      	beq.n	800aa20 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	7c1b      	ldrb	r3, [r3, #16]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d109      	bne.n	800aa0c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a9fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa02:	2101      	movs	r1, #1
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f001 fcc9 	bl	800c39c <USBD_LL_PrepareReceive>
 800aa0a:	e007      	b.n	800aa1c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa12:	2340      	movs	r3, #64	; 0x40
 800aa14:	2101      	movs	r1, #1
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f001 fcc0 	bl	800c39c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	e000      	b.n	800aa22 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800aa20:	2302      	movs	r3, #2
  }
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3710      	adds	r7, #16
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}

0800aa2a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	b084      	sub	sp, #16
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	60f8      	str	r0, [r7, #12]
 800aa32:	60b9      	str	r1, [r7, #8]
 800aa34:	4613      	mov	r3, r2
 800aa36:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d101      	bne.n	800aa42 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800aa3e:	2302      	movs	r3, #2
 800aa40:	e01a      	b.n	800aa78 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d003      	beq.n	800aa54 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d003      	beq.n	800aa62 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	68ba      	ldr	r2, [r7, #8]
 800aa5e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2201      	movs	r2, #1
 800aa66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	79fa      	ldrb	r2, [r7, #7]
 800aa6e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800aa70:	68f8      	ldr	r0, [r7, #12]
 800aa72:	f001 fb2d 	bl	800c0d0 <USBD_LL_Init>

  return USBD_OK;
 800aa76:	2300      	movs	r3, #0
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3710      	adds	r7, #16
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b085      	sub	sp, #20
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d006      	beq.n	800aaa2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	683a      	ldr	r2, [r7, #0]
 800aa98:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	73fb      	strb	r3, [r7, #15]
 800aaa0:	e001      	b.n	800aaa6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800aaa2:	2302      	movs	r3, #2
 800aaa4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aaa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3714      	adds	r7, #20
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bc80      	pop	{r7}
 800aab0:	4770      	bx	lr

0800aab2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aab2:	b580      	push	{r7, lr}
 800aab4:	b082      	sub	sp, #8
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f001 fb62 	bl	800c184 <USBD_LL_Start>

  return USBD_OK;
 800aac0:	2300      	movs	r3, #0
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3708      	adds	r7, #8
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}

0800aaca <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800aaca:	b480      	push	{r7}
 800aacc:	b083      	sub	sp, #12
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aad2:	2300      	movs	r3, #0
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	370c      	adds	r7, #12
 800aad8:	46bd      	mov	sp, r7
 800aada:	bc80      	pop	{r7}
 800aadc:	4770      	bx	lr

0800aade <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800aade:	b580      	push	{r7, lr}
 800aae0:	b084      	sub	sp, #16
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
 800aae6:	460b      	mov	r3, r1
 800aae8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800aaea:	2302      	movs	r3, #2
 800aaec:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d00c      	beq.n	800ab12 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	78fa      	ldrb	r2, [r7, #3]
 800ab02:	4611      	mov	r1, r2
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	4798      	blx	r3
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d101      	bne.n	800ab12 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ab12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3710      	adds	r7, #16
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	460b      	mov	r3, r1
 800ab26:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	78fa      	ldrb	r2, [r7, #3]
 800ab32:	4611      	mov	r1, r2
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	4798      	blx	r3

  return USBD_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3708      	adds	r7, #8
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b082      	sub	sp, #8
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
 800ab4a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ab52:	6839      	ldr	r1, [r7, #0]
 800ab54:	4618      	mov	r0, r3
 800ab56:	f000 fed8 	bl	800b90a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ab68:	461a      	mov	r2, r3
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ab76:	f003 031f 	and.w	r3, r3, #31
 800ab7a:	2b02      	cmp	r3, #2
 800ab7c:	d016      	beq.n	800abac <USBD_LL_SetupStage+0x6a>
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	d81c      	bhi.n	800abbc <USBD_LL_SetupStage+0x7a>
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d002      	beq.n	800ab8c <USBD_LL_SetupStage+0x4a>
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d008      	beq.n	800ab9c <USBD_LL_SetupStage+0x5a>
 800ab8a:	e017      	b.n	800abbc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ab92:	4619      	mov	r1, r3
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f000 f9cb 	bl	800af30 <USBD_StdDevReq>
      break;
 800ab9a:	e01a      	b.n	800abd2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aba2:	4619      	mov	r1, r3
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 fa2d 	bl	800b004 <USBD_StdItfReq>
      break;
 800abaa:	e012      	b.n	800abd2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800abb2:	4619      	mov	r1, r3
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 fa6d 	bl	800b094 <USBD_StdEPReq>
      break;
 800abba:	e00a      	b.n	800abd2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800abc2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	4619      	mov	r1, r3
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f001 fb3a 	bl	800c244 <USBD_LL_StallEP>
      break;
 800abd0:	bf00      	nop
  }

  return USBD_OK;
 800abd2:	2300      	movs	r3, #0
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3708      	adds	r7, #8
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b086      	sub	sp, #24
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	460b      	mov	r3, r1
 800abe6:	607a      	str	r2, [r7, #4]
 800abe8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800abea:	7afb      	ldrb	r3, [r7, #11]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d14b      	bne.n	800ac88 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800abf6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800abfe:	2b03      	cmp	r3, #3
 800ac00:	d134      	bne.n	800ac6c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	68da      	ldr	r2, [r3, #12]
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	691b      	ldr	r3, [r3, #16]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d919      	bls.n	800ac42 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	68da      	ldr	r2, [r3, #12]
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	691b      	ldr	r3, [r3, #16]
 800ac16:	1ad2      	subs	r2, r2, r3
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	68da      	ldr	r2, [r3, #12]
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d203      	bcs.n	800ac30 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	e002      	b.n	800ac36 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	461a      	mov	r2, r3
 800ac38:	6879      	ldr	r1, [r7, #4]
 800ac3a:	68f8      	ldr	r0, [r7, #12]
 800ac3c:	f000 ff57 	bl	800baee <USBD_CtlContinueRx>
 800ac40:	e038      	b.n	800acb4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac48:	691b      	ldr	r3, [r3, #16]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d00a      	beq.n	800ac64 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ac54:	2b03      	cmp	r3, #3
 800ac56:	d105      	bne.n	800ac64 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac5e:	691b      	ldr	r3, [r3, #16]
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800ac64:	68f8      	ldr	r0, [r7, #12]
 800ac66:	f000 ff54 	bl	800bb12 <USBD_CtlSendStatus>
 800ac6a:	e023      	b.n	800acb4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ac72:	2b05      	cmp	r3, #5
 800ac74:	d11e      	bne.n	800acb4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800ac7e:	2100      	movs	r1, #0
 800ac80:	68f8      	ldr	r0, [r7, #12]
 800ac82:	f001 fadf 	bl	800c244 <USBD_LL_StallEP>
 800ac86:	e015      	b.n	800acb4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac8e:	699b      	ldr	r3, [r3, #24]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d00d      	beq.n	800acb0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ac9a:	2b03      	cmp	r3, #3
 800ac9c:	d108      	bne.n	800acb0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aca4:	699b      	ldr	r3, [r3, #24]
 800aca6:	7afa      	ldrb	r2, [r7, #11]
 800aca8:	4611      	mov	r1, r2
 800acaa:	68f8      	ldr	r0, [r7, #12]
 800acac:	4798      	blx	r3
 800acae:	e001      	b.n	800acb4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800acb0:	2302      	movs	r3, #2
 800acb2:	e000      	b.n	800acb6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800acb4:	2300      	movs	r3, #0
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3718      	adds	r7, #24
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}

0800acbe <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800acbe:	b580      	push	{r7, lr}
 800acc0:	b086      	sub	sp, #24
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	60f8      	str	r0, [r7, #12]
 800acc6:	460b      	mov	r3, r1
 800acc8:	607a      	str	r2, [r7, #4]
 800acca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800accc:	7afb      	ldrb	r3, [r7, #11]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d17f      	bne.n	800add2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	3314      	adds	r3, #20
 800acd6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800acde:	2b02      	cmp	r3, #2
 800ace0:	d15c      	bne.n	800ad9c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	68da      	ldr	r2, [r3, #12]
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	691b      	ldr	r3, [r3, #16]
 800acea:	429a      	cmp	r2, r3
 800acec:	d915      	bls.n	800ad1a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	68da      	ldr	r2, [r3, #12]
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	691b      	ldr	r3, [r3, #16]
 800acf6:	1ad2      	subs	r2, r2, r3
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	461a      	mov	r2, r3
 800ad04:	6879      	ldr	r1, [r7, #4]
 800ad06:	68f8      	ldr	r0, [r7, #12]
 800ad08:	f000 fec1 	bl	800ba8e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	2200      	movs	r2, #0
 800ad10:	2100      	movs	r1, #0
 800ad12:	68f8      	ldr	r0, [r7, #12]
 800ad14:	f001 fb42 	bl	800c39c <USBD_LL_PrepareReceive>
 800ad18:	e04e      	b.n	800adb8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	697a      	ldr	r2, [r7, #20]
 800ad20:	6912      	ldr	r2, [r2, #16]
 800ad22:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad26:	fb02 f201 	mul.w	r2, r2, r1
 800ad2a:	1a9b      	subs	r3, r3, r2
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d11c      	bne.n	800ad6a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	689a      	ldr	r2, [r3, #8]
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d316      	bcc.n	800ad6a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	689a      	ldr	r2, [r3, #8]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d20f      	bcs.n	800ad6a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	f000 fe9d 	bl	800ba8e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	2200      	movs	r2, #0
 800ad60:	2100      	movs	r1, #0
 800ad62:	68f8      	ldr	r0, [r7, #12]
 800ad64:	f001 fb1a 	bl	800c39c <USBD_LL_PrepareReceive>
 800ad68:	e026      	b.n	800adb8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad70:	68db      	ldr	r3, [r3, #12]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d00a      	beq.n	800ad8c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ad7c:	2b03      	cmp	r3, #3
 800ad7e:	d105      	bne.n	800ad8c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	68f8      	ldr	r0, [r7, #12]
 800ad8a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800ad8c:	2180      	movs	r1, #128	; 0x80
 800ad8e:	68f8      	ldr	r0, [r7, #12]
 800ad90:	f001 fa58 	bl	800c244 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ad94:	68f8      	ldr	r0, [r7, #12]
 800ad96:	f000 fecf 	bl	800bb38 <USBD_CtlReceiveStatus>
 800ad9a:	e00d      	b.n	800adb8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ada2:	2b04      	cmp	r3, #4
 800ada4:	d004      	beq.n	800adb0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800adac:	2b00      	cmp	r3, #0
 800adae:	d103      	bne.n	800adb8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800adb0:	2180      	movs	r1, #128	; 0x80
 800adb2:	68f8      	ldr	r0, [r7, #12]
 800adb4:	f001 fa46 	bl	800c244 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d11d      	bne.n	800adfe <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800adc2:	68f8      	ldr	r0, [r7, #12]
 800adc4:	f7ff fe81 	bl	800aaca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2200      	movs	r2, #0
 800adcc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800add0:	e015      	b.n	800adfe <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800add8:	695b      	ldr	r3, [r3, #20]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00d      	beq.n	800adfa <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ade4:	2b03      	cmp	r3, #3
 800ade6:	d108      	bne.n	800adfa <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adee:	695b      	ldr	r3, [r3, #20]
 800adf0:	7afa      	ldrb	r2, [r7, #11]
 800adf2:	4611      	mov	r1, r2
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	4798      	blx	r3
 800adf8:	e001      	b.n	800adfe <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800adfa:	2302      	movs	r3, #2
 800adfc:	e000      	b.n	800ae00 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800adfe:	2300      	movs	r3, #0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3718      	adds	r7, #24
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae10:	2340      	movs	r3, #64	; 0x40
 800ae12:	2200      	movs	r2, #0
 800ae14:	2100      	movs	r1, #0
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f001 f9cf 	bl	800c1ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2240      	movs	r2, #64	; 0x40
 800ae28:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae2c:	2340      	movs	r3, #64	; 0x40
 800ae2e:	2200      	movs	r2, #0
 800ae30:	2180      	movs	r1, #128	; 0x80
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f001 f9c1 	bl	800c1ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2240      	movs	r2, #64	; 0x40
 800ae42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2201      	movs	r2, #1
 800ae48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2200      	movs	r2, #0
 800ae58:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d009      	beq.n	800ae80 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	6852      	ldr	r2, [r2, #4]
 800ae78:	b2d2      	uxtb	r2, r2
 800ae7a:	4611      	mov	r1, r2
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	4798      	blx	r3
  }

  return USBD_OK;
 800ae80:	2300      	movs	r3, #0
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3708      	adds	r7, #8
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ae8a:	b480      	push	{r7}
 800ae8c:	b083      	sub	sp, #12
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
 800ae92:	460b      	mov	r3, r1
 800ae94:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	78fa      	ldrb	r2, [r7, #3]
 800ae9a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ae9c:	2300      	movs	r3, #0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	370c      	adds	r7, #12
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bc80      	pop	{r7}
 800aea6:	4770      	bx	lr

0800aea8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b083      	sub	sp, #12
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2204      	movs	r2, #4
 800aec0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aec4:	2300      	movs	r3, #0
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	370c      	adds	r7, #12
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bc80      	pop	{r7}
 800aece:	4770      	bx	lr

0800aed0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b083      	sub	sp, #12
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aede:	2b04      	cmp	r3, #4
 800aee0:	d105      	bne.n	800aeee <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	370c      	adds	r7, #12
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bc80      	pop	{r7}
 800aef8:	4770      	bx	lr

0800aefa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b082      	sub	sp, #8
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af08:	2b03      	cmp	r3, #3
 800af0a:	d10b      	bne.n	800af24 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af12:	69db      	ldr	r3, [r3, #28]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d005      	beq.n	800af24 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af1e:	69db      	ldr	r3, [r3, #28]
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800af24:	2300      	movs	r3, #0
}
 800af26:	4618      	mov	r0, r3
 800af28:	3708      	adds	r7, #8
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
	...

0800af30 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af3a:	2300      	movs	r3, #0
 800af3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af46:	2b40      	cmp	r3, #64	; 0x40
 800af48:	d005      	beq.n	800af56 <USBD_StdDevReq+0x26>
 800af4a:	2b40      	cmp	r3, #64	; 0x40
 800af4c:	d84f      	bhi.n	800afee <USBD_StdDevReq+0xbe>
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d009      	beq.n	800af66 <USBD_StdDevReq+0x36>
 800af52:	2b20      	cmp	r3, #32
 800af54:	d14b      	bne.n	800afee <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	6839      	ldr	r1, [r7, #0]
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	4798      	blx	r3
      break;
 800af64:	e048      	b.n	800aff8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	785b      	ldrb	r3, [r3, #1]
 800af6a:	2b09      	cmp	r3, #9
 800af6c:	d839      	bhi.n	800afe2 <USBD_StdDevReq+0xb2>
 800af6e:	a201      	add	r2, pc, #4	; (adr r2, 800af74 <USBD_StdDevReq+0x44>)
 800af70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af74:	0800afc5 	.word	0x0800afc5
 800af78:	0800afd9 	.word	0x0800afd9
 800af7c:	0800afe3 	.word	0x0800afe3
 800af80:	0800afcf 	.word	0x0800afcf
 800af84:	0800afe3 	.word	0x0800afe3
 800af88:	0800afa7 	.word	0x0800afa7
 800af8c:	0800af9d 	.word	0x0800af9d
 800af90:	0800afe3 	.word	0x0800afe3
 800af94:	0800afbb 	.word	0x0800afbb
 800af98:	0800afb1 	.word	0x0800afb1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800af9c:	6839      	ldr	r1, [r7, #0]
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 f9dc 	bl	800b35c <USBD_GetDescriptor>
          break;
 800afa4:	e022      	b.n	800afec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800afa6:	6839      	ldr	r1, [r7, #0]
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 fb3f 	bl	800b62c <USBD_SetAddress>
          break;
 800afae:	e01d      	b.n	800afec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800afb0:	6839      	ldr	r1, [r7, #0]
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 fb7e 	bl	800b6b4 <USBD_SetConfig>
          break;
 800afb8:	e018      	b.n	800afec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800afba:	6839      	ldr	r1, [r7, #0]
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 fc07 	bl	800b7d0 <USBD_GetConfig>
          break;
 800afc2:	e013      	b.n	800afec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800afc4:	6839      	ldr	r1, [r7, #0]
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 fc37 	bl	800b83a <USBD_GetStatus>
          break;
 800afcc:	e00e      	b.n	800afec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800afce:	6839      	ldr	r1, [r7, #0]
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 fc65 	bl	800b8a0 <USBD_SetFeature>
          break;
 800afd6:	e009      	b.n	800afec <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800afd8:	6839      	ldr	r1, [r7, #0]
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 fc74 	bl	800b8c8 <USBD_ClrFeature>
          break;
 800afe0:	e004      	b.n	800afec <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800afe2:	6839      	ldr	r1, [r7, #0]
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 fccc 	bl	800b982 <USBD_CtlError>
          break;
 800afea:	bf00      	nop
      }
      break;
 800afec:	e004      	b.n	800aff8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800afee:	6839      	ldr	r1, [r7, #0]
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f000 fcc6 	bl	800b982 <USBD_CtlError>
      break;
 800aff6:	bf00      	nop
  }

  return ret;
 800aff8:	7bfb      	ldrb	r3, [r7, #15]
}
 800affa:	4618      	mov	r0, r3
 800affc:	3710      	adds	r7, #16
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
 800b002:	bf00      	nop

0800b004 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b00e:	2300      	movs	r3, #0
 800b010:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b01a:	2b40      	cmp	r3, #64	; 0x40
 800b01c:	d005      	beq.n	800b02a <USBD_StdItfReq+0x26>
 800b01e:	2b40      	cmp	r3, #64	; 0x40
 800b020:	d82e      	bhi.n	800b080 <USBD_StdItfReq+0x7c>
 800b022:	2b00      	cmp	r3, #0
 800b024:	d001      	beq.n	800b02a <USBD_StdItfReq+0x26>
 800b026:	2b20      	cmp	r3, #32
 800b028:	d12a      	bne.n	800b080 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b030:	3b01      	subs	r3, #1
 800b032:	2b02      	cmp	r3, #2
 800b034:	d81d      	bhi.n	800b072 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	889b      	ldrh	r3, [r3, #4]
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d813      	bhi.n	800b068 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	6839      	ldr	r1, [r7, #0]
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	4798      	blx	r3
 800b04e:	4603      	mov	r3, r0
 800b050:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	88db      	ldrh	r3, [r3, #6]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d110      	bne.n	800b07c <USBD_StdItfReq+0x78>
 800b05a:	7bfb      	ldrb	r3, [r7, #15]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d10d      	bne.n	800b07c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 fd56 	bl	800bb12 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b066:	e009      	b.n	800b07c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b068:	6839      	ldr	r1, [r7, #0]
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 fc89 	bl	800b982 <USBD_CtlError>
          break;
 800b070:	e004      	b.n	800b07c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b072:	6839      	ldr	r1, [r7, #0]
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 fc84 	bl	800b982 <USBD_CtlError>
          break;
 800b07a:	e000      	b.n	800b07e <USBD_StdItfReq+0x7a>
          break;
 800b07c:	bf00      	nop
      }
      break;
 800b07e:	e004      	b.n	800b08a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b080:	6839      	ldr	r1, [r7, #0]
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 fc7d 	bl	800b982 <USBD_CtlError>
      break;
 800b088:	bf00      	nop
  }

  return USBD_OK;
 800b08a:	2300      	movs	r3, #0
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3710      	adds	r7, #16
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	889b      	ldrh	r3, [r3, #4]
 800b0a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b0b0:	2b40      	cmp	r3, #64	; 0x40
 800b0b2:	d007      	beq.n	800b0c4 <USBD_StdEPReq+0x30>
 800b0b4:	2b40      	cmp	r3, #64	; 0x40
 800b0b6:	f200 8146 	bhi.w	800b346 <USBD_StdEPReq+0x2b2>
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d00a      	beq.n	800b0d4 <USBD_StdEPReq+0x40>
 800b0be:	2b20      	cmp	r3, #32
 800b0c0:	f040 8141 	bne.w	800b346 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0ca:	689b      	ldr	r3, [r3, #8]
 800b0cc:	6839      	ldr	r1, [r7, #0]
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	4798      	blx	r3
      break;
 800b0d2:	e13d      	b.n	800b350 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b0dc:	2b20      	cmp	r3, #32
 800b0de:	d10a      	bne.n	800b0f6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0e6:	689b      	ldr	r3, [r3, #8]
 800b0e8:	6839      	ldr	r1, [r7, #0]
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	4798      	blx	r3
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b0f2:	7bfb      	ldrb	r3, [r7, #15]
 800b0f4:	e12d      	b.n	800b352 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	785b      	ldrb	r3, [r3, #1]
 800b0fa:	2b03      	cmp	r3, #3
 800b0fc:	d007      	beq.n	800b10e <USBD_StdEPReq+0x7a>
 800b0fe:	2b03      	cmp	r3, #3
 800b100:	f300 811b 	bgt.w	800b33a <USBD_StdEPReq+0x2a6>
 800b104:	2b00      	cmp	r3, #0
 800b106:	d072      	beq.n	800b1ee <USBD_StdEPReq+0x15a>
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d03a      	beq.n	800b182 <USBD_StdEPReq+0xee>
 800b10c:	e115      	b.n	800b33a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b114:	2b02      	cmp	r3, #2
 800b116:	d002      	beq.n	800b11e <USBD_StdEPReq+0x8a>
 800b118:	2b03      	cmp	r3, #3
 800b11a:	d015      	beq.n	800b148 <USBD_StdEPReq+0xb4>
 800b11c:	e02b      	b.n	800b176 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b11e:	7bbb      	ldrb	r3, [r7, #14]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d00c      	beq.n	800b13e <USBD_StdEPReq+0xaa>
 800b124:	7bbb      	ldrb	r3, [r7, #14]
 800b126:	2b80      	cmp	r3, #128	; 0x80
 800b128:	d009      	beq.n	800b13e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b12a:	7bbb      	ldrb	r3, [r7, #14]
 800b12c:	4619      	mov	r1, r3
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f001 f888 	bl	800c244 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b134:	2180      	movs	r1, #128	; 0x80
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f001 f884 	bl	800c244 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b13c:	e020      	b.n	800b180 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b13e:	6839      	ldr	r1, [r7, #0]
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 fc1e 	bl	800b982 <USBD_CtlError>
              break;
 800b146:	e01b      	b.n	800b180 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	885b      	ldrh	r3, [r3, #2]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d10e      	bne.n	800b16e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b150:	7bbb      	ldrb	r3, [r7, #14]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d00b      	beq.n	800b16e <USBD_StdEPReq+0xda>
 800b156:	7bbb      	ldrb	r3, [r7, #14]
 800b158:	2b80      	cmp	r3, #128	; 0x80
 800b15a:	d008      	beq.n	800b16e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	88db      	ldrh	r3, [r3, #6]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d104      	bne.n	800b16e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b164:	7bbb      	ldrb	r3, [r7, #14]
 800b166:	4619      	mov	r1, r3
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f001 f86b 	bl	800c244 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 fccf 	bl	800bb12 <USBD_CtlSendStatus>

              break;
 800b174:	e004      	b.n	800b180 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b176:	6839      	ldr	r1, [r7, #0]
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f000 fc02 	bl	800b982 <USBD_CtlError>
              break;
 800b17e:	bf00      	nop
          }
          break;
 800b180:	e0e0      	b.n	800b344 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b188:	2b02      	cmp	r3, #2
 800b18a:	d002      	beq.n	800b192 <USBD_StdEPReq+0xfe>
 800b18c:	2b03      	cmp	r3, #3
 800b18e:	d015      	beq.n	800b1bc <USBD_StdEPReq+0x128>
 800b190:	e026      	b.n	800b1e0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b192:	7bbb      	ldrb	r3, [r7, #14]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d00c      	beq.n	800b1b2 <USBD_StdEPReq+0x11e>
 800b198:	7bbb      	ldrb	r3, [r7, #14]
 800b19a:	2b80      	cmp	r3, #128	; 0x80
 800b19c:	d009      	beq.n	800b1b2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b19e:	7bbb      	ldrb	r3, [r7, #14]
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f001 f84e 	bl	800c244 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b1a8:	2180      	movs	r1, #128	; 0x80
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f001 f84a 	bl	800c244 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b1b0:	e01c      	b.n	800b1ec <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b1b2:	6839      	ldr	r1, [r7, #0]
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 fbe4 	bl	800b982 <USBD_CtlError>
              break;
 800b1ba:	e017      	b.n	800b1ec <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	885b      	ldrh	r3, [r3, #2]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d112      	bne.n	800b1ea <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b1c4:	7bbb      	ldrb	r3, [r7, #14]
 800b1c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d004      	beq.n	800b1d8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b1ce:	7bbb      	ldrb	r3, [r7, #14]
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f001 f855 	bl	800c282 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 fc9a 	bl	800bb12 <USBD_CtlSendStatus>
              }
              break;
 800b1de:	e004      	b.n	800b1ea <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b1e0:	6839      	ldr	r1, [r7, #0]
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 fbcd 	bl	800b982 <USBD_CtlError>
              break;
 800b1e8:	e000      	b.n	800b1ec <USBD_StdEPReq+0x158>
              break;
 800b1ea:	bf00      	nop
          }
          break;
 800b1ec:	e0aa      	b.n	800b344 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1f4:	2b02      	cmp	r3, #2
 800b1f6:	d002      	beq.n	800b1fe <USBD_StdEPReq+0x16a>
 800b1f8:	2b03      	cmp	r3, #3
 800b1fa:	d032      	beq.n	800b262 <USBD_StdEPReq+0x1ce>
 800b1fc:	e097      	b.n	800b32e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1fe:	7bbb      	ldrb	r3, [r7, #14]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d007      	beq.n	800b214 <USBD_StdEPReq+0x180>
 800b204:	7bbb      	ldrb	r3, [r7, #14]
 800b206:	2b80      	cmp	r3, #128	; 0x80
 800b208:	d004      	beq.n	800b214 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b20a:	6839      	ldr	r1, [r7, #0]
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f000 fbb8 	bl	800b982 <USBD_CtlError>
                break;
 800b212:	e091      	b.n	800b338 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b214:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	da0b      	bge.n	800b234 <USBD_StdEPReq+0x1a0>
 800b21c:	7bbb      	ldrb	r3, [r7, #14]
 800b21e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b222:	4613      	mov	r3, r2
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	4413      	add	r3, r2
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	3310      	adds	r3, #16
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	4413      	add	r3, r2
 800b230:	3304      	adds	r3, #4
 800b232:	e00b      	b.n	800b24c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b234:	7bbb      	ldrb	r3, [r7, #14]
 800b236:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b23a:	4613      	mov	r3, r2
 800b23c:	009b      	lsls	r3, r3, #2
 800b23e:	4413      	add	r3, r2
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	4413      	add	r3, r2
 800b24a:	3304      	adds	r3, #4
 800b24c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	2200      	movs	r2, #0
 800b252:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	2202      	movs	r2, #2
 800b258:	4619      	mov	r1, r3
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 fbfb 	bl	800ba56 <USBD_CtlSendData>
              break;
 800b260:	e06a      	b.n	800b338 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b262:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b266:	2b00      	cmp	r3, #0
 800b268:	da11      	bge.n	800b28e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b26a:	7bbb      	ldrb	r3, [r7, #14]
 800b26c:	f003 020f 	and.w	r2, r3, #15
 800b270:	6879      	ldr	r1, [r7, #4]
 800b272:	4613      	mov	r3, r2
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	4413      	add	r3, r2
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	440b      	add	r3, r1
 800b27c:	3318      	adds	r3, #24
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d117      	bne.n	800b2b4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b284:	6839      	ldr	r1, [r7, #0]
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 fb7b 	bl	800b982 <USBD_CtlError>
                  break;
 800b28c:	e054      	b.n	800b338 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b28e:	7bbb      	ldrb	r3, [r7, #14]
 800b290:	f003 020f 	and.w	r2, r3, #15
 800b294:	6879      	ldr	r1, [r7, #4]
 800b296:	4613      	mov	r3, r2
 800b298:	009b      	lsls	r3, r3, #2
 800b29a:	4413      	add	r3, r2
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	440b      	add	r3, r1
 800b2a0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d104      	bne.n	800b2b4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b2aa:	6839      	ldr	r1, [r7, #0]
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 fb68 	bl	800b982 <USBD_CtlError>
                  break;
 800b2b2:	e041      	b.n	800b338 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	da0b      	bge.n	800b2d4 <USBD_StdEPReq+0x240>
 800b2bc:	7bbb      	ldrb	r3, [r7, #14]
 800b2be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b2c2:	4613      	mov	r3, r2
 800b2c4:	009b      	lsls	r3, r3, #2
 800b2c6:	4413      	add	r3, r2
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	3310      	adds	r3, #16
 800b2cc:	687a      	ldr	r2, [r7, #4]
 800b2ce:	4413      	add	r3, r2
 800b2d0:	3304      	adds	r3, #4
 800b2d2:	e00b      	b.n	800b2ec <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b2d4:	7bbb      	ldrb	r3, [r7, #14]
 800b2d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2da:	4613      	mov	r3, r2
 800b2dc:	009b      	lsls	r3, r3, #2
 800b2de:	4413      	add	r3, r2
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	4413      	add	r3, r2
 800b2ea:	3304      	adds	r3, #4
 800b2ec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b2ee:	7bbb      	ldrb	r3, [r7, #14]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d002      	beq.n	800b2fa <USBD_StdEPReq+0x266>
 800b2f4:	7bbb      	ldrb	r3, [r7, #14]
 800b2f6:	2b80      	cmp	r3, #128	; 0x80
 800b2f8:	d103      	bne.n	800b302 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	601a      	str	r2, [r3, #0]
 800b300:	e00e      	b.n	800b320 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b302:	7bbb      	ldrb	r3, [r7, #14]
 800b304:	4619      	mov	r1, r3
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 ffda 	bl	800c2c0 <USBD_LL_IsStallEP>
 800b30c:	4603      	mov	r3, r0
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d003      	beq.n	800b31a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	2201      	movs	r2, #1
 800b316:	601a      	str	r2, [r3, #0]
 800b318:	e002      	b.n	800b320 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	2200      	movs	r2, #0
 800b31e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	2202      	movs	r2, #2
 800b324:	4619      	mov	r1, r3
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 fb95 	bl	800ba56 <USBD_CtlSendData>
              break;
 800b32c:	e004      	b.n	800b338 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b32e:	6839      	ldr	r1, [r7, #0]
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f000 fb26 	bl	800b982 <USBD_CtlError>
              break;
 800b336:	bf00      	nop
          }
          break;
 800b338:	e004      	b.n	800b344 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b33a:	6839      	ldr	r1, [r7, #0]
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 fb20 	bl	800b982 <USBD_CtlError>
          break;
 800b342:	bf00      	nop
      }
      break;
 800b344:	e004      	b.n	800b350 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b346:	6839      	ldr	r1, [r7, #0]
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 fb1a 	bl	800b982 <USBD_CtlError>
      break;
 800b34e:	bf00      	nop
  }

  return ret;
 800b350:	7bfb      	ldrb	r3, [r7, #15]
}
 800b352:	4618      	mov	r0, r3
 800b354:	3710      	adds	r7, #16
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
	...

0800b35c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b366:	2300      	movs	r3, #0
 800b368:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b36a:	2300      	movs	r3, #0
 800b36c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b36e:	2300      	movs	r3, #0
 800b370:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	885b      	ldrh	r3, [r3, #2]
 800b376:	0a1b      	lsrs	r3, r3, #8
 800b378:	b29b      	uxth	r3, r3
 800b37a:	3b01      	subs	r3, #1
 800b37c:	2b06      	cmp	r3, #6
 800b37e:	f200 8128 	bhi.w	800b5d2 <USBD_GetDescriptor+0x276>
 800b382:	a201      	add	r2, pc, #4	; (adr r2, 800b388 <USBD_GetDescriptor+0x2c>)
 800b384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b388:	0800b3a5 	.word	0x0800b3a5
 800b38c:	0800b3bd 	.word	0x0800b3bd
 800b390:	0800b3fd 	.word	0x0800b3fd
 800b394:	0800b5d3 	.word	0x0800b5d3
 800b398:	0800b5d3 	.word	0x0800b5d3
 800b39c:	0800b573 	.word	0x0800b573
 800b3a0:	0800b59f 	.word	0x0800b59f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	7c12      	ldrb	r2, [r2, #16]
 800b3b0:	f107 0108 	add.w	r1, r7, #8
 800b3b4:	4610      	mov	r0, r2
 800b3b6:	4798      	blx	r3
 800b3b8:	60f8      	str	r0, [r7, #12]
      break;
 800b3ba:	e112      	b.n	800b5e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	7c1b      	ldrb	r3, [r3, #16]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d10d      	bne.n	800b3e0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3cc:	f107 0208 	add.w	r2, r7, #8
 800b3d0:	4610      	mov	r0, r2
 800b3d2:	4798      	blx	r3
 800b3d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	2202      	movs	r2, #2
 800b3dc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b3de:	e100      	b.n	800b5e2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e8:	f107 0208 	add.w	r2, r7, #8
 800b3ec:	4610      	mov	r0, r2
 800b3ee:	4798      	blx	r3
 800b3f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	2202      	movs	r2, #2
 800b3f8:	701a      	strb	r2, [r3, #0]
      break;
 800b3fa:	e0f2      	b.n	800b5e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	885b      	ldrh	r3, [r3, #2]
 800b400:	b2db      	uxtb	r3, r3
 800b402:	2b05      	cmp	r3, #5
 800b404:	f200 80ac 	bhi.w	800b560 <USBD_GetDescriptor+0x204>
 800b408:	a201      	add	r2, pc, #4	; (adr r2, 800b410 <USBD_GetDescriptor+0xb4>)
 800b40a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b40e:	bf00      	nop
 800b410:	0800b429 	.word	0x0800b429
 800b414:	0800b45d 	.word	0x0800b45d
 800b418:	0800b491 	.word	0x0800b491
 800b41c:	0800b4c5 	.word	0x0800b4c5
 800b420:	0800b4f9 	.word	0x0800b4f9
 800b424:	0800b52d 	.word	0x0800b52d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d00b      	beq.n	800b44c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b43a:	685b      	ldr	r3, [r3, #4]
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	7c12      	ldrb	r2, [r2, #16]
 800b440:	f107 0108 	add.w	r1, r7, #8
 800b444:	4610      	mov	r0, r2
 800b446:	4798      	blx	r3
 800b448:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b44a:	e091      	b.n	800b570 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b44c:	6839      	ldr	r1, [r7, #0]
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 fa97 	bl	800b982 <USBD_CtlError>
            err++;
 800b454:	7afb      	ldrb	r3, [r7, #11]
 800b456:	3301      	adds	r3, #1
 800b458:	72fb      	strb	r3, [r7, #11]
          break;
 800b45a:	e089      	b.n	800b570 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b462:	689b      	ldr	r3, [r3, #8]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d00b      	beq.n	800b480 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b46e:	689b      	ldr	r3, [r3, #8]
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	7c12      	ldrb	r2, [r2, #16]
 800b474:	f107 0108 	add.w	r1, r7, #8
 800b478:	4610      	mov	r0, r2
 800b47a:	4798      	blx	r3
 800b47c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b47e:	e077      	b.n	800b570 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b480:	6839      	ldr	r1, [r7, #0]
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 fa7d 	bl	800b982 <USBD_CtlError>
            err++;
 800b488:	7afb      	ldrb	r3, [r7, #11]
 800b48a:	3301      	adds	r3, #1
 800b48c:	72fb      	strb	r3, [r7, #11]
          break;
 800b48e:	e06f      	b.n	800b570 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d00b      	beq.n	800b4b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b4a2:	68db      	ldr	r3, [r3, #12]
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	7c12      	ldrb	r2, [r2, #16]
 800b4a8:	f107 0108 	add.w	r1, r7, #8
 800b4ac:	4610      	mov	r0, r2
 800b4ae:	4798      	blx	r3
 800b4b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4b2:	e05d      	b.n	800b570 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b4b4:	6839      	ldr	r1, [r7, #0]
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 fa63 	bl	800b982 <USBD_CtlError>
            err++;
 800b4bc:	7afb      	ldrb	r3, [r7, #11]
 800b4be:	3301      	adds	r3, #1
 800b4c0:	72fb      	strb	r3, [r7, #11]
          break;
 800b4c2:	e055      	b.n	800b570 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b4ca:	691b      	ldr	r3, [r3, #16]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d00b      	beq.n	800b4e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b4d6:	691b      	ldr	r3, [r3, #16]
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	7c12      	ldrb	r2, [r2, #16]
 800b4dc:	f107 0108 	add.w	r1, r7, #8
 800b4e0:	4610      	mov	r0, r2
 800b4e2:	4798      	blx	r3
 800b4e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4e6:	e043      	b.n	800b570 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b4e8:	6839      	ldr	r1, [r7, #0]
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f000 fa49 	bl	800b982 <USBD_CtlError>
            err++;
 800b4f0:	7afb      	ldrb	r3, [r7, #11]
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	72fb      	strb	r3, [r7, #11]
          break;
 800b4f6:	e03b      	b.n	800b570 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b4fe:	695b      	ldr	r3, [r3, #20]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d00b      	beq.n	800b51c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b50a:	695b      	ldr	r3, [r3, #20]
 800b50c:	687a      	ldr	r2, [r7, #4]
 800b50e:	7c12      	ldrb	r2, [r2, #16]
 800b510:	f107 0108 	add.w	r1, r7, #8
 800b514:	4610      	mov	r0, r2
 800b516:	4798      	blx	r3
 800b518:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b51a:	e029      	b.n	800b570 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b51c:	6839      	ldr	r1, [r7, #0]
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 fa2f 	bl	800b982 <USBD_CtlError>
            err++;
 800b524:	7afb      	ldrb	r3, [r7, #11]
 800b526:	3301      	adds	r3, #1
 800b528:	72fb      	strb	r3, [r7, #11]
          break;
 800b52a:	e021      	b.n	800b570 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b532:	699b      	ldr	r3, [r3, #24]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d00b      	beq.n	800b550 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b53e:	699b      	ldr	r3, [r3, #24]
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	7c12      	ldrb	r2, [r2, #16]
 800b544:	f107 0108 	add.w	r1, r7, #8
 800b548:	4610      	mov	r0, r2
 800b54a:	4798      	blx	r3
 800b54c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b54e:	e00f      	b.n	800b570 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b550:	6839      	ldr	r1, [r7, #0]
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 fa15 	bl	800b982 <USBD_CtlError>
            err++;
 800b558:	7afb      	ldrb	r3, [r7, #11]
 800b55a:	3301      	adds	r3, #1
 800b55c:	72fb      	strb	r3, [r7, #11]
          break;
 800b55e:	e007      	b.n	800b570 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b560:	6839      	ldr	r1, [r7, #0]
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 fa0d 	bl	800b982 <USBD_CtlError>
          err++;
 800b568:	7afb      	ldrb	r3, [r7, #11]
 800b56a:	3301      	adds	r3, #1
 800b56c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b56e:	e038      	b.n	800b5e2 <USBD_GetDescriptor+0x286>
 800b570:	e037      	b.n	800b5e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	7c1b      	ldrb	r3, [r3, #16]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d109      	bne.n	800b58e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b582:	f107 0208 	add.w	r2, r7, #8
 800b586:	4610      	mov	r0, r2
 800b588:	4798      	blx	r3
 800b58a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b58c:	e029      	b.n	800b5e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b58e:	6839      	ldr	r1, [r7, #0]
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 f9f6 	bl	800b982 <USBD_CtlError>
        err++;
 800b596:	7afb      	ldrb	r3, [r7, #11]
 800b598:	3301      	adds	r3, #1
 800b59a:	72fb      	strb	r3, [r7, #11]
      break;
 800b59c:	e021      	b.n	800b5e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	7c1b      	ldrb	r3, [r3, #16]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d10d      	bne.n	800b5c2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ae:	f107 0208 	add.w	r2, r7, #8
 800b5b2:	4610      	mov	r0, r2
 800b5b4:	4798      	blx	r3
 800b5b6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	2207      	movs	r2, #7
 800b5be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b5c0:	e00f      	b.n	800b5e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b5c2:	6839      	ldr	r1, [r7, #0]
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 f9dc 	bl	800b982 <USBD_CtlError>
        err++;
 800b5ca:	7afb      	ldrb	r3, [r7, #11]
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	72fb      	strb	r3, [r7, #11]
      break;
 800b5d0:	e007      	b.n	800b5e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b5d2:	6839      	ldr	r1, [r7, #0]
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 f9d4 	bl	800b982 <USBD_CtlError>
      err++;
 800b5da:	7afb      	ldrb	r3, [r7, #11]
 800b5dc:	3301      	adds	r3, #1
 800b5de:	72fb      	strb	r3, [r7, #11]
      break;
 800b5e0:	bf00      	nop
  }

  if (err != 0U)
 800b5e2:	7afb      	ldrb	r3, [r7, #11]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d11c      	bne.n	800b622 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b5e8:	893b      	ldrh	r3, [r7, #8]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d011      	beq.n	800b612 <USBD_GetDescriptor+0x2b6>
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	88db      	ldrh	r3, [r3, #6]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d00d      	beq.n	800b612 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	88da      	ldrh	r2, [r3, #6]
 800b5fa:	893b      	ldrh	r3, [r7, #8]
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	bf28      	it	cs
 800b600:	4613      	movcs	r3, r2
 800b602:	b29b      	uxth	r3, r3
 800b604:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b606:	893b      	ldrh	r3, [r7, #8]
 800b608:	461a      	mov	r2, r3
 800b60a:	68f9      	ldr	r1, [r7, #12]
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 fa22 	bl	800ba56 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	88db      	ldrh	r3, [r3, #6]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d104      	bne.n	800b624 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 fa79 	bl	800bb12 <USBD_CtlSendStatus>
 800b620:	e000      	b.n	800b624 <USBD_GetDescriptor+0x2c8>
    return;
 800b622:	bf00      	nop
    }
  }
}
 800b624:	3710      	adds	r7, #16
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop

0800b62c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b084      	sub	sp, #16
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	889b      	ldrh	r3, [r3, #4]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d130      	bne.n	800b6a0 <USBD_SetAddress+0x74>
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	88db      	ldrh	r3, [r3, #6]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d12c      	bne.n	800b6a0 <USBD_SetAddress+0x74>
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	885b      	ldrh	r3, [r3, #2]
 800b64a:	2b7f      	cmp	r3, #127	; 0x7f
 800b64c:	d828      	bhi.n	800b6a0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	885b      	ldrh	r3, [r3, #2]
 800b652:	b2db      	uxtb	r3, r3
 800b654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b658:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b660:	2b03      	cmp	r3, #3
 800b662:	d104      	bne.n	800b66e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b664:	6839      	ldr	r1, [r7, #0]
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 f98b 	bl	800b982 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b66c:	e01d      	b.n	800b6aa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	7bfa      	ldrb	r2, [r7, #15]
 800b672:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b676:	7bfb      	ldrb	r3, [r7, #15]
 800b678:	4619      	mov	r1, r3
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 fe4c 	bl	800c318 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f000 fa46 	bl	800bb12 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b686:	7bfb      	ldrb	r3, [r7, #15]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d004      	beq.n	800b696 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2202      	movs	r2, #2
 800b690:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b694:	e009      	b.n	800b6aa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2201      	movs	r2, #1
 800b69a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b69e:	e004      	b.n	800b6aa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b6a0:	6839      	ldr	r1, [r7, #0]
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 f96d 	bl	800b982 <USBD_CtlError>
  }
}
 800b6a8:	bf00      	nop
 800b6aa:	bf00      	nop
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
	...

0800b6b4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	885b      	ldrh	r3, [r3, #2]
 800b6c2:	b2da      	uxtb	r2, r3
 800b6c4:	4b41      	ldr	r3, [pc, #260]	; (800b7cc <USBD_SetConfig+0x118>)
 800b6c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b6c8:	4b40      	ldr	r3, [pc, #256]	; (800b7cc <USBD_SetConfig+0x118>)
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d904      	bls.n	800b6da <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b6d0:	6839      	ldr	r1, [r7, #0]
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f955 	bl	800b982 <USBD_CtlError>
 800b6d8:	e075      	b.n	800b7c6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6e0:	2b02      	cmp	r3, #2
 800b6e2:	d002      	beq.n	800b6ea <USBD_SetConfig+0x36>
 800b6e4:	2b03      	cmp	r3, #3
 800b6e6:	d023      	beq.n	800b730 <USBD_SetConfig+0x7c>
 800b6e8:	e062      	b.n	800b7b0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b6ea:	4b38      	ldr	r3, [pc, #224]	; (800b7cc <USBD_SetConfig+0x118>)
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d01a      	beq.n	800b728 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b6f2:	4b36      	ldr	r3, [pc, #216]	; (800b7cc <USBD_SetConfig+0x118>)
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2203      	movs	r2, #3
 800b700:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b704:	4b31      	ldr	r3, [pc, #196]	; (800b7cc <USBD_SetConfig+0x118>)
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	4619      	mov	r1, r3
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f7ff f9e7 	bl	800aade <USBD_SetClassConfig>
 800b710:	4603      	mov	r3, r0
 800b712:	2b02      	cmp	r3, #2
 800b714:	d104      	bne.n	800b720 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b716:	6839      	ldr	r1, [r7, #0]
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f000 f932 	bl	800b982 <USBD_CtlError>
            return;
 800b71e:	e052      	b.n	800b7c6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f000 f9f6 	bl	800bb12 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b726:	e04e      	b.n	800b7c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 f9f2 	bl	800bb12 <USBD_CtlSendStatus>
        break;
 800b72e:	e04a      	b.n	800b7c6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b730:	4b26      	ldr	r3, [pc, #152]	; (800b7cc <USBD_SetConfig+0x118>)
 800b732:	781b      	ldrb	r3, [r3, #0]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d112      	bne.n	800b75e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2202      	movs	r2, #2
 800b73c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b740:	4b22      	ldr	r3, [pc, #136]	; (800b7cc <USBD_SetConfig+0x118>)
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	461a      	mov	r2, r3
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b74a:	4b20      	ldr	r3, [pc, #128]	; (800b7cc <USBD_SetConfig+0x118>)
 800b74c:	781b      	ldrb	r3, [r3, #0]
 800b74e:	4619      	mov	r1, r3
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f7ff f9e3 	bl	800ab1c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 f9db 	bl	800bb12 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b75c:	e033      	b.n	800b7c6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b75e:	4b1b      	ldr	r3, [pc, #108]	; (800b7cc <USBD_SetConfig+0x118>)
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	461a      	mov	r2, r3
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d01d      	beq.n	800b7a8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	b2db      	uxtb	r3, r3
 800b772:	4619      	mov	r1, r3
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f7ff f9d1 	bl	800ab1c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b77a:	4b14      	ldr	r3, [pc, #80]	; (800b7cc <USBD_SetConfig+0x118>)
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	461a      	mov	r2, r3
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b784:	4b11      	ldr	r3, [pc, #68]	; (800b7cc <USBD_SetConfig+0x118>)
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	4619      	mov	r1, r3
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f7ff f9a7 	bl	800aade <USBD_SetClassConfig>
 800b790:	4603      	mov	r3, r0
 800b792:	2b02      	cmp	r3, #2
 800b794:	d104      	bne.n	800b7a0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b796:	6839      	ldr	r1, [r7, #0]
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 f8f2 	bl	800b982 <USBD_CtlError>
            return;
 800b79e:	e012      	b.n	800b7c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 f9b6 	bl	800bb12 <USBD_CtlSendStatus>
        break;
 800b7a6:	e00e      	b.n	800b7c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 f9b2 	bl	800bb12 <USBD_CtlSendStatus>
        break;
 800b7ae:	e00a      	b.n	800b7c6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b7b0:	6839      	ldr	r1, [r7, #0]
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 f8e5 	bl	800b982 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b7b8:	4b04      	ldr	r3, [pc, #16]	; (800b7cc <USBD_SetConfig+0x118>)
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	4619      	mov	r1, r3
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f7ff f9ac 	bl	800ab1c <USBD_ClrClassConfig>
        break;
 800b7c4:	bf00      	nop
    }
  }
}
 800b7c6:	3708      	adds	r7, #8
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}
 800b7cc:	20000280 	.word	0x20000280

0800b7d0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	88db      	ldrh	r3, [r3, #6]
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d004      	beq.n	800b7ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b7e2:	6839      	ldr	r1, [r7, #0]
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f000 f8cc 	bl	800b982 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b7ea:	e022      	b.n	800b832 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7f2:	2b02      	cmp	r3, #2
 800b7f4:	dc02      	bgt.n	800b7fc <USBD_GetConfig+0x2c>
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	dc03      	bgt.n	800b802 <USBD_GetConfig+0x32>
 800b7fa:	e015      	b.n	800b828 <USBD_GetConfig+0x58>
 800b7fc:	2b03      	cmp	r3, #3
 800b7fe:	d00b      	beq.n	800b818 <USBD_GetConfig+0x48>
 800b800:	e012      	b.n	800b828 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2200      	movs	r2, #0
 800b806:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	3308      	adds	r3, #8
 800b80c:	2201      	movs	r2, #1
 800b80e:	4619      	mov	r1, r3
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 f920 	bl	800ba56 <USBD_CtlSendData>
        break;
 800b816:	e00c      	b.n	800b832 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	3304      	adds	r3, #4
 800b81c:	2201      	movs	r2, #1
 800b81e:	4619      	mov	r1, r3
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f000 f918 	bl	800ba56 <USBD_CtlSendData>
        break;
 800b826:	e004      	b.n	800b832 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b828:	6839      	ldr	r1, [r7, #0]
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 f8a9 	bl	800b982 <USBD_CtlError>
        break;
 800b830:	bf00      	nop
}
 800b832:	bf00      	nop
 800b834:	3708      	adds	r7, #8
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}

0800b83a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b83a:	b580      	push	{r7, lr}
 800b83c:	b082      	sub	sp, #8
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
 800b842:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b84a:	3b01      	subs	r3, #1
 800b84c:	2b02      	cmp	r3, #2
 800b84e:	d81e      	bhi.n	800b88e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	88db      	ldrh	r3, [r3, #6]
 800b854:	2b02      	cmp	r3, #2
 800b856:	d004      	beq.n	800b862 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b858:	6839      	ldr	r1, [r7, #0]
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 f891 	bl	800b982 <USBD_CtlError>
        break;
 800b860:	e01a      	b.n	800b898 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2201      	movs	r2, #1
 800b866:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d005      	beq.n	800b87e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	68db      	ldr	r3, [r3, #12]
 800b876:	f043 0202 	orr.w	r2, r3, #2
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	330c      	adds	r3, #12
 800b882:	2202      	movs	r2, #2
 800b884:	4619      	mov	r1, r3
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 f8e5 	bl	800ba56 <USBD_CtlSendData>
      break;
 800b88c:	e004      	b.n	800b898 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b88e:	6839      	ldr	r1, [r7, #0]
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f000 f876 	bl	800b982 <USBD_CtlError>
      break;
 800b896:	bf00      	nop
  }
}
 800b898:	bf00      	nop
 800b89a:	3708      	adds	r7, #8
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b082      	sub	sp, #8
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	885b      	ldrh	r3, [r3, #2]
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d106      	bne.n	800b8c0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 f929 	bl	800bb12 <USBD_CtlSendStatus>
  }
}
 800b8c0:	bf00      	nop
 800b8c2:	3708      	adds	r7, #8
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b082      	sub	sp, #8
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8d8:	3b01      	subs	r3, #1
 800b8da:	2b02      	cmp	r3, #2
 800b8dc:	d80b      	bhi.n	800b8f6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	885b      	ldrh	r3, [r3, #2]
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	d10c      	bne.n	800b900 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f000 f90f 	bl	800bb12 <USBD_CtlSendStatus>
      }
      break;
 800b8f4:	e004      	b.n	800b900 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b8f6:	6839      	ldr	r1, [r7, #0]
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 f842 	bl	800b982 <USBD_CtlError>
      break;
 800b8fe:	e000      	b.n	800b902 <USBD_ClrFeature+0x3a>
      break;
 800b900:	bf00      	nop
  }
}
 800b902:	bf00      	nop
 800b904:	3708      	adds	r7, #8
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}

0800b90a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b90a:	b480      	push	{r7}
 800b90c:	b083      	sub	sp, #12
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
 800b912:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	781a      	ldrb	r2, [r3, #0]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	785a      	ldrb	r2, [r3, #1]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	3302      	adds	r3, #2
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	b29a      	uxth	r2, r3
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	3303      	adds	r3, #3
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	b29b      	uxth	r3, r3
 800b934:	021b      	lsls	r3, r3, #8
 800b936:	b29b      	uxth	r3, r3
 800b938:	4413      	add	r3, r2
 800b93a:	b29a      	uxth	r2, r3
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	3304      	adds	r3, #4
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	b29a      	uxth	r2, r3
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	3305      	adds	r3, #5
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	b29b      	uxth	r3, r3
 800b950:	021b      	lsls	r3, r3, #8
 800b952:	b29b      	uxth	r3, r3
 800b954:	4413      	add	r3, r2
 800b956:	b29a      	uxth	r2, r3
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	3306      	adds	r3, #6
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	b29a      	uxth	r2, r3
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	3307      	adds	r3, #7
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	021b      	lsls	r3, r3, #8
 800b96e:	b29b      	uxth	r3, r3
 800b970:	4413      	add	r3, r2
 800b972:	b29a      	uxth	r2, r3
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	80da      	strh	r2, [r3, #6]

}
 800b978:	bf00      	nop
 800b97a:	370c      	adds	r7, #12
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bc80      	pop	{r7}
 800b980:	4770      	bx	lr

0800b982 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b982:	b580      	push	{r7, lr}
 800b984:	b082      	sub	sp, #8
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
 800b98a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b98c:	2180      	movs	r1, #128	; 0x80
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 fc58 	bl	800c244 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b994:	2100      	movs	r1, #0
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 fc54 	bl	800c244 <USBD_LL_StallEP>
}
 800b99c:	bf00      	nop
 800b99e:	3708      	adds	r7, #8
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b086      	sub	sp, #24
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	60f8      	str	r0, [r7, #12]
 800b9ac:	60b9      	str	r1, [r7, #8]
 800b9ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d032      	beq.n	800ba20 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b9ba:	68f8      	ldr	r0, [r7, #12]
 800b9bc:	f000 f834 	bl	800ba28 <USBD_GetLen>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	005b      	lsls	r3, r3, #1
 800b9c8:	b29a      	uxth	r2, r3
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b9ce:	7dfb      	ldrb	r3, [r7, #23]
 800b9d0:	1c5a      	adds	r2, r3, #1
 800b9d2:	75fa      	strb	r2, [r7, #23]
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	4413      	add	r3, r2
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	7812      	ldrb	r2, [r2, #0]
 800b9de:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b9e0:	7dfb      	ldrb	r3, [r7, #23]
 800b9e2:	1c5a      	adds	r2, r3, #1
 800b9e4:	75fa      	strb	r2, [r7, #23]
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	4413      	add	r3, r2
 800b9ec:	2203      	movs	r2, #3
 800b9ee:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b9f0:	e012      	b.n	800ba18 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	1c5a      	adds	r2, r3, #1
 800b9f6:	60fa      	str	r2, [r7, #12]
 800b9f8:	7dfa      	ldrb	r2, [r7, #23]
 800b9fa:	1c51      	adds	r1, r2, #1
 800b9fc:	75f9      	strb	r1, [r7, #23]
 800b9fe:	4611      	mov	r1, r2
 800ba00:	68ba      	ldr	r2, [r7, #8]
 800ba02:	440a      	add	r2, r1
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ba08:	7dfb      	ldrb	r3, [r7, #23]
 800ba0a:	1c5a      	adds	r2, r3, #1
 800ba0c:	75fa      	strb	r2, [r7, #23]
 800ba0e:	461a      	mov	r2, r3
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	4413      	add	r3, r2
 800ba14:	2200      	movs	r2, #0
 800ba16:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	781b      	ldrb	r3, [r3, #0]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d1e8      	bne.n	800b9f2 <USBD_GetString+0x4e>
    }
  }
}
 800ba20:	bf00      	nop
 800ba22:	3718      	adds	r7, #24
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ba30:	2300      	movs	r3, #0
 800ba32:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800ba34:	e005      	b.n	800ba42 <USBD_GetLen+0x1a>
  {
    len++;
 800ba36:	7bfb      	ldrb	r3, [r7, #15]
 800ba38:	3301      	adds	r3, #1
 800ba3a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	3301      	adds	r3, #1
 800ba40:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d1f5      	bne.n	800ba36 <USBD_GetLen+0xe>
  }

  return len;
 800ba4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3714      	adds	r7, #20
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bc80      	pop	{r7}
 800ba54:	4770      	bx	lr

0800ba56 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800ba56:	b580      	push	{r7, lr}
 800ba58:	b084      	sub	sp, #16
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	60f8      	str	r0, [r7, #12]
 800ba5e:	60b9      	str	r1, [r7, #8]
 800ba60:	4613      	mov	r3, r2
 800ba62:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2202      	movs	r2, #2
 800ba68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ba6c:	88fa      	ldrh	r2, [r7, #6]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800ba72:	88fa      	ldrh	r2, [r7, #6]
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba78:	88fb      	ldrh	r3, [r7, #6]
 800ba7a:	68ba      	ldr	r2, [r7, #8]
 800ba7c:	2100      	movs	r1, #0
 800ba7e:	68f8      	ldr	r0, [r7, #12]
 800ba80:	f000 fc69 	bl	800c356 <USBD_LL_Transmit>

  return USBD_OK;
 800ba84:	2300      	movs	r3, #0
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3710      	adds	r7, #16
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}

0800ba8e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ba8e:	b580      	push	{r7, lr}
 800ba90:	b084      	sub	sp, #16
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	60f8      	str	r0, [r7, #12]
 800ba96:	60b9      	str	r1, [r7, #8]
 800ba98:	4613      	mov	r3, r2
 800ba9a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba9c:	88fb      	ldrh	r3, [r7, #6]
 800ba9e:	68ba      	ldr	r2, [r7, #8]
 800baa0:	2100      	movs	r1, #0
 800baa2:	68f8      	ldr	r0, [r7, #12]
 800baa4:	f000 fc57 	bl	800c356 <USBD_LL_Transmit>

  return USBD_OK;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}

0800bab2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b084      	sub	sp, #16
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	60f8      	str	r0, [r7, #12]
 800baba:	60b9      	str	r1, [r7, #8]
 800babc:	4613      	mov	r3, r2
 800babe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2203      	movs	r2, #3
 800bac4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bac8:	88fa      	ldrh	r2, [r7, #6]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800bad0:	88fa      	ldrh	r2, [r7, #6]
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bad8:	88fb      	ldrh	r3, [r7, #6]
 800bada:	68ba      	ldr	r2, [r7, #8]
 800badc:	2100      	movs	r1, #0
 800bade:	68f8      	ldr	r0, [r7, #12]
 800bae0:	f000 fc5c 	bl	800c39c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bae4:	2300      	movs	r3, #0
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3710      	adds	r7, #16
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}

0800baee <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800baee:	b580      	push	{r7, lr}
 800baf0:	b084      	sub	sp, #16
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	60f8      	str	r0, [r7, #12]
 800baf6:	60b9      	str	r1, [r7, #8]
 800baf8:	4613      	mov	r3, r2
 800bafa:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bafc:	88fb      	ldrh	r3, [r7, #6]
 800bafe:	68ba      	ldr	r2, [r7, #8]
 800bb00:	2100      	movs	r1, #0
 800bb02:	68f8      	ldr	r0, [r7, #12]
 800bb04:	f000 fc4a 	bl	800c39c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb08:	2300      	movs	r3, #0
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3710      	adds	r7, #16
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b082      	sub	sp, #8
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2204      	movs	r2, #4
 800bb1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bb22:	2300      	movs	r3, #0
 800bb24:	2200      	movs	r2, #0
 800bb26:	2100      	movs	r1, #0
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f000 fc14 	bl	800c356 <USBD_LL_Transmit>

  return USBD_OK;
 800bb2e:	2300      	movs	r3, #0
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3708      	adds	r7, #8
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2205      	movs	r2, #5
 800bb44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb48:	2300      	movs	r3, #0
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	2100      	movs	r1, #0
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 fc24 	bl	800c39c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb54:	2300      	movs	r3, #0
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3708      	adds	r7, #8
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
	...

0800bb60 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bb64:	2200      	movs	r2, #0
 800bb66:	4912      	ldr	r1, [pc, #72]	; (800bbb0 <MX_USB_DEVICE_Init+0x50>)
 800bb68:	4812      	ldr	r0, [pc, #72]	; (800bbb4 <MX_USB_DEVICE_Init+0x54>)
 800bb6a:	f7fe ff5e 	bl	800aa2a <USBD_Init>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d001      	beq.n	800bb78 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bb74:	f7f7 fe6a 	bl	800384c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bb78:	490f      	ldr	r1, [pc, #60]	; (800bbb8 <MX_USB_DEVICE_Init+0x58>)
 800bb7a:	480e      	ldr	r0, [pc, #56]	; (800bbb4 <MX_USB_DEVICE_Init+0x54>)
 800bb7c:	f7fe ff80 	bl	800aa80 <USBD_RegisterClass>
 800bb80:	4603      	mov	r3, r0
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d001      	beq.n	800bb8a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bb86:	f7f7 fe61 	bl	800384c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bb8a:	490c      	ldr	r1, [pc, #48]	; (800bbbc <MX_USB_DEVICE_Init+0x5c>)
 800bb8c:	4809      	ldr	r0, [pc, #36]	; (800bbb4 <MX_USB_DEVICE_Init+0x54>)
 800bb8e:	f7fe feb1 	bl	800a8f4 <USBD_CDC_RegisterInterface>
 800bb92:	4603      	mov	r3, r0
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d001      	beq.n	800bb9c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bb98:	f7f7 fe58 	bl	800384c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bb9c:	4805      	ldr	r0, [pc, #20]	; (800bbb4 <MX_USB_DEVICE_Init+0x54>)
 800bb9e:	f7fe ff88 	bl	800aab2 <USBD_Start>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d001      	beq.n	800bbac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bba8:	f7f7 fe50 	bl	800384c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bbac:	bf00      	nop
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	20000140 	.word	0x20000140
 800bbb4:	20000a00 	.word	0x20000a00
 800bbb8:	2000002c 	.word	0x2000002c
 800bbbc:	20000130 	.word	0x20000130

0800bbc0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	4905      	ldr	r1, [pc, #20]	; (800bbdc <CDC_Init_FS+0x1c>)
 800bbc8:	4805      	ldr	r0, [pc, #20]	; (800bbe0 <CDC_Init_FS+0x20>)
 800bbca:	f7fe fea9 	bl	800a920 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bbce:	4905      	ldr	r1, [pc, #20]	; (800bbe4 <CDC_Init_FS+0x24>)
 800bbd0:	4803      	ldr	r0, [pc, #12]	; (800bbe0 <CDC_Init_FS+0x20>)
 800bbd2:	f7fe febe 	bl	800a952 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800bbd6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	bd80      	pop	{r7, pc}
 800bbdc:	20000ec4 	.word	0x20000ec4
 800bbe0:	20000a00 	.word	0x20000a00
 800bbe4:	20000cc4 	.word	0x20000cc4

0800bbe8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 800bbec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bc80      	pop	{r7}
 800bbf4:	4770      	bx	lr
	...

0800bbf8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b083      	sub	sp, #12
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	4603      	mov	r3, r0
 800bc00:	6039      	str	r1, [r7, #0]
 800bc02:	71fb      	strb	r3, [r7, #7]
 800bc04:	4613      	mov	r3, r2
 800bc06:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd)
 800bc08:	79fb      	ldrb	r3, [r7, #7]
 800bc0a:	2b23      	cmp	r3, #35	; 0x23
 800bc0c:	d84a      	bhi.n	800bca4 <CDC_Control_FS+0xac>
 800bc0e:	a201      	add	r2, pc, #4	; (adr r2, 800bc14 <CDC_Control_FS+0x1c>)
 800bc10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc14:	0800bca5 	.word	0x0800bca5
 800bc18:	0800bca5 	.word	0x0800bca5
 800bc1c:	0800bca5 	.word	0x0800bca5
 800bc20:	0800bca5 	.word	0x0800bca5
 800bc24:	0800bca5 	.word	0x0800bca5
 800bc28:	0800bca5 	.word	0x0800bca5
 800bc2c:	0800bca5 	.word	0x0800bca5
 800bc30:	0800bca5 	.word	0x0800bca5
 800bc34:	0800bca5 	.word	0x0800bca5
 800bc38:	0800bca5 	.word	0x0800bca5
 800bc3c:	0800bca5 	.word	0x0800bca5
 800bc40:	0800bca5 	.word	0x0800bca5
 800bc44:	0800bca5 	.word	0x0800bca5
 800bc48:	0800bca5 	.word	0x0800bca5
 800bc4c:	0800bca5 	.word	0x0800bca5
 800bc50:	0800bca5 	.word	0x0800bca5
 800bc54:	0800bca5 	.word	0x0800bca5
 800bc58:	0800bca5 	.word	0x0800bca5
 800bc5c:	0800bca5 	.word	0x0800bca5
 800bc60:	0800bca5 	.word	0x0800bca5
 800bc64:	0800bca5 	.word	0x0800bca5
 800bc68:	0800bca5 	.word	0x0800bca5
 800bc6c:	0800bca5 	.word	0x0800bca5
 800bc70:	0800bca5 	.word	0x0800bca5
 800bc74:	0800bca5 	.word	0x0800bca5
 800bc78:	0800bca5 	.word	0x0800bca5
 800bc7c:	0800bca5 	.word	0x0800bca5
 800bc80:	0800bca5 	.word	0x0800bca5
 800bc84:	0800bca5 	.word	0x0800bca5
 800bc88:	0800bca5 	.word	0x0800bca5
 800bc8c:	0800bca5 	.word	0x0800bca5
 800bc90:	0800bca5 	.word	0x0800bca5
 800bc94:	0800bca5 	.word	0x0800bca5
 800bc98:	0800bca5 	.word	0x0800bca5
 800bc9c:	0800bca5 	.word	0x0800bca5
 800bca0:	0800bca5 	.word	0x0800bca5
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800bca4:	bf00      	nop
	}

	return (USBD_OK);
 800bca6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	370c      	adds	r7, #12
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bc80      	pop	{r7}
 800bcb0:	4770      	bx	lr
 800bcb2:	bf00      	nop

0800bcb4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b082      	sub	sp, #8
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bcbe:	6879      	ldr	r1, [r7, #4]
 800bcc0:	4807      	ldr	r0, [pc, #28]	; (800bce0 <CDC_Receive_FS+0x2c>)
 800bcc2:	f7fe fe46 	bl	800a952 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bcc6:	4806      	ldr	r0, [pc, #24]	; (800bce0 <CDC_Receive_FS+0x2c>)
 800bcc8:	f7fe fe85 	bl	800a9d6 <USBD_CDC_ReceivePacket>

	runCommands(Buf, Len);
 800bccc:	6839      	ldr	r1, [r7, #0]
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f7f6 fce8 	bl	80026a4 <runCommands>
	return (USBD_OK);
 800bcd4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3708      	adds	r7, #8
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	20000a00 	.word	0x20000a00

0800bce4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	460b      	mov	r3, r1
 800bcee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800bcf4:	4b0d      	ldr	r3, [pc, #52]	; (800bd2c <CDC_Transmit_FS+0x48>)
 800bcf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcfa:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0)
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d001      	beq.n	800bd0a <CDC_Transmit_FS+0x26>
	{
		return USBD_BUSY;
 800bd06:	2301      	movs	r3, #1
 800bd08:	e00b      	b.n	800bd22 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bd0a:	887b      	ldrh	r3, [r7, #2]
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	6879      	ldr	r1, [r7, #4]
 800bd10:	4806      	ldr	r0, [pc, #24]	; (800bd2c <CDC_Transmit_FS+0x48>)
 800bd12:	f7fe fe05 	bl	800a920 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bd16:	4805      	ldr	r0, [pc, #20]	; (800bd2c <CDC_Transmit_FS+0x48>)
 800bd18:	f7fe fe2e 	bl	800a978 <USBD_CDC_TransmitPacket>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bd20:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3710      	adds	r7, #16
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
 800bd2a:	bf00      	nop
 800bd2c:	20000a00 	.word	0x20000a00

0800bd30 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b083      	sub	sp, #12
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	4603      	mov	r3, r0
 800bd38:	6039      	str	r1, [r7, #0]
 800bd3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	2212      	movs	r2, #18
 800bd40:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bd42:	4b03      	ldr	r3, [pc, #12]	; (800bd50 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	370c      	adds	r7, #12
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bc80      	pop	{r7}
 800bd4c:	4770      	bx	lr
 800bd4e:	bf00      	nop
 800bd50:	2000015c 	.word	0x2000015c

0800bd54 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b083      	sub	sp, #12
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	6039      	str	r1, [r7, #0]
 800bd5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	2204      	movs	r2, #4
 800bd64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bd66:	4b03      	ldr	r3, [pc, #12]	; (800bd74 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	370c      	adds	r7, #12
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bc80      	pop	{r7}
 800bd70:	4770      	bx	lr
 800bd72:	bf00      	nop
 800bd74:	20000170 	.word	0x20000170

0800bd78 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	4603      	mov	r3, r0
 800bd80:	6039      	str	r1, [r7, #0]
 800bd82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd84:	79fb      	ldrb	r3, [r7, #7]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d105      	bne.n	800bd96 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd8a:	683a      	ldr	r2, [r7, #0]
 800bd8c:	4907      	ldr	r1, [pc, #28]	; (800bdac <USBD_FS_ProductStrDescriptor+0x34>)
 800bd8e:	4808      	ldr	r0, [pc, #32]	; (800bdb0 <USBD_FS_ProductStrDescriptor+0x38>)
 800bd90:	f7ff fe08 	bl	800b9a4 <USBD_GetString>
 800bd94:	e004      	b.n	800bda0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd96:	683a      	ldr	r2, [r7, #0]
 800bd98:	4904      	ldr	r1, [pc, #16]	; (800bdac <USBD_FS_ProductStrDescriptor+0x34>)
 800bd9a:	4805      	ldr	r0, [pc, #20]	; (800bdb0 <USBD_FS_ProductStrDescriptor+0x38>)
 800bd9c:	f7ff fe02 	bl	800b9a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bda0:	4b02      	ldr	r3, [pc, #8]	; (800bdac <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3708      	adds	r7, #8
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}
 800bdaa:	bf00      	nop
 800bdac:	200010c4 	.word	0x200010c4
 800bdb0:	0800da24 	.word	0x0800da24

0800bdb4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	4603      	mov	r3, r0
 800bdbc:	6039      	str	r1, [r7, #0]
 800bdbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bdc0:	683a      	ldr	r2, [r7, #0]
 800bdc2:	4904      	ldr	r1, [pc, #16]	; (800bdd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bdc4:	4804      	ldr	r0, [pc, #16]	; (800bdd8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bdc6:	f7ff fded 	bl	800b9a4 <USBD_GetString>
  return USBD_StrDesc;
 800bdca:	4b02      	ldr	r3, [pc, #8]	; (800bdd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3708      	adds	r7, #8
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}
 800bdd4:	200010c4 	.word	0x200010c4
 800bdd8:	0800da3c 	.word	0x0800da3c

0800bddc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	4603      	mov	r3, r0
 800bde4:	6039      	str	r1, [r7, #0]
 800bde6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	221a      	movs	r2, #26
 800bdec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bdee:	f000 f843 	bl	800be78 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bdf2:	4b02      	ldr	r3, [pc, #8]	; (800bdfc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3708      	adds	r7, #8
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}
 800bdfc:	20000174 	.word	0x20000174

0800be00 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	4603      	mov	r3, r0
 800be08:	6039      	str	r1, [r7, #0]
 800be0a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800be0c:	79fb      	ldrb	r3, [r7, #7]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d105      	bne.n	800be1e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be12:	683a      	ldr	r2, [r7, #0]
 800be14:	4907      	ldr	r1, [pc, #28]	; (800be34 <USBD_FS_ConfigStrDescriptor+0x34>)
 800be16:	4808      	ldr	r0, [pc, #32]	; (800be38 <USBD_FS_ConfigStrDescriptor+0x38>)
 800be18:	f7ff fdc4 	bl	800b9a4 <USBD_GetString>
 800be1c:	e004      	b.n	800be28 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be1e:	683a      	ldr	r2, [r7, #0]
 800be20:	4904      	ldr	r1, [pc, #16]	; (800be34 <USBD_FS_ConfigStrDescriptor+0x34>)
 800be22:	4805      	ldr	r0, [pc, #20]	; (800be38 <USBD_FS_ConfigStrDescriptor+0x38>)
 800be24:	f7ff fdbe 	bl	800b9a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be28:	4b02      	ldr	r3, [pc, #8]	; (800be34 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3708      	adds	r7, #8
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	200010c4 	.word	0x200010c4
 800be38:	0800da50 	.word	0x0800da50

0800be3c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
 800be42:	4603      	mov	r3, r0
 800be44:	6039      	str	r1, [r7, #0]
 800be46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be48:	79fb      	ldrb	r3, [r7, #7]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d105      	bne.n	800be5a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be4e:	683a      	ldr	r2, [r7, #0]
 800be50:	4907      	ldr	r1, [pc, #28]	; (800be70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be52:	4808      	ldr	r0, [pc, #32]	; (800be74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be54:	f7ff fda6 	bl	800b9a4 <USBD_GetString>
 800be58:	e004      	b.n	800be64 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be5a:	683a      	ldr	r2, [r7, #0]
 800be5c:	4904      	ldr	r1, [pc, #16]	; (800be70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be5e:	4805      	ldr	r0, [pc, #20]	; (800be74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be60:	f7ff fda0 	bl	800b9a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be64:	4b02      	ldr	r3, [pc, #8]	; (800be70 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800be66:	4618      	mov	r0, r3
 800be68:	3708      	adds	r7, #8
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	200010c4 	.word	0x200010c4
 800be74:	0800da5c 	.word	0x0800da5c

0800be78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b084      	sub	sp, #16
 800be7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800be7e:	4b0f      	ldr	r3, [pc, #60]	; (800bebc <Get_SerialNum+0x44>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800be84:	4b0e      	ldr	r3, [pc, #56]	; (800bec0 <Get_SerialNum+0x48>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800be8a:	4b0e      	ldr	r3, [pc, #56]	; (800bec4 <Get_SerialNum+0x4c>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800be90:	68fa      	ldr	r2, [r7, #12]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	4413      	add	r3, r2
 800be96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d009      	beq.n	800beb2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800be9e:	2208      	movs	r2, #8
 800bea0:	4909      	ldr	r1, [pc, #36]	; (800bec8 <Get_SerialNum+0x50>)
 800bea2:	68f8      	ldr	r0, [r7, #12]
 800bea4:	f000 f814 	bl	800bed0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bea8:	2204      	movs	r2, #4
 800beaa:	4908      	ldr	r1, [pc, #32]	; (800becc <Get_SerialNum+0x54>)
 800beac:	68b8      	ldr	r0, [r7, #8]
 800beae:	f000 f80f 	bl	800bed0 <IntToUnicode>
  }
}
 800beb2:	bf00      	nop
 800beb4:	3710      	adds	r7, #16
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	1ffff7e8 	.word	0x1ffff7e8
 800bec0:	1ffff7ec 	.word	0x1ffff7ec
 800bec4:	1ffff7f0 	.word	0x1ffff7f0
 800bec8:	20000176 	.word	0x20000176
 800becc:	20000186 	.word	0x20000186

0800bed0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b087      	sub	sp, #28
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	60b9      	str	r1, [r7, #8]
 800beda:	4613      	mov	r3, r2
 800bedc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bede:	2300      	movs	r3, #0
 800bee0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bee2:	2300      	movs	r3, #0
 800bee4:	75fb      	strb	r3, [r7, #23]
 800bee6:	e027      	b.n	800bf38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	0f1b      	lsrs	r3, r3, #28
 800beec:	2b09      	cmp	r3, #9
 800beee:	d80b      	bhi.n	800bf08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	0f1b      	lsrs	r3, r3, #28
 800bef4:	b2da      	uxtb	r2, r3
 800bef6:	7dfb      	ldrb	r3, [r7, #23]
 800bef8:	005b      	lsls	r3, r3, #1
 800befa:	4619      	mov	r1, r3
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	440b      	add	r3, r1
 800bf00:	3230      	adds	r2, #48	; 0x30
 800bf02:	b2d2      	uxtb	r2, r2
 800bf04:	701a      	strb	r2, [r3, #0]
 800bf06:	e00a      	b.n	800bf1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	0f1b      	lsrs	r3, r3, #28
 800bf0c:	b2da      	uxtb	r2, r3
 800bf0e:	7dfb      	ldrb	r3, [r7, #23]
 800bf10:	005b      	lsls	r3, r3, #1
 800bf12:	4619      	mov	r1, r3
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	440b      	add	r3, r1
 800bf18:	3237      	adds	r2, #55	; 0x37
 800bf1a:	b2d2      	uxtb	r2, r2
 800bf1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	011b      	lsls	r3, r3, #4
 800bf22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bf24:	7dfb      	ldrb	r3, [r7, #23]
 800bf26:	005b      	lsls	r3, r3, #1
 800bf28:	3301      	adds	r3, #1
 800bf2a:	68ba      	ldr	r2, [r7, #8]
 800bf2c:	4413      	add	r3, r2
 800bf2e:	2200      	movs	r2, #0
 800bf30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bf32:	7dfb      	ldrb	r3, [r7, #23]
 800bf34:	3301      	adds	r3, #1
 800bf36:	75fb      	strb	r3, [r7, #23]
 800bf38:	7dfa      	ldrb	r2, [r7, #23]
 800bf3a:	79fb      	ldrb	r3, [r7, #7]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d3d3      	bcc.n	800bee8 <IntToUnicode+0x18>
  }
}
 800bf40:	bf00      	nop
 800bf42:	bf00      	nop
 800bf44:	371c      	adds	r7, #28
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bc80      	pop	{r7}
 800bf4a:	4770      	bx	lr

0800bf4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b084      	sub	sp, #16
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4a0d      	ldr	r2, [pc, #52]	; (800bf90 <HAL_PCD_MspInit+0x44>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d113      	bne.n	800bf86 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bf5e:	4b0d      	ldr	r3, [pc, #52]	; (800bf94 <HAL_PCD_MspInit+0x48>)
 800bf60:	69db      	ldr	r3, [r3, #28]
 800bf62:	4a0c      	ldr	r2, [pc, #48]	; (800bf94 <HAL_PCD_MspInit+0x48>)
 800bf64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bf68:	61d3      	str	r3, [r2, #28]
 800bf6a:	4b0a      	ldr	r3, [pc, #40]	; (800bf94 <HAL_PCD_MspInit+0x48>)
 800bf6c:	69db      	ldr	r3, [r3, #28]
 800bf6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf72:	60fb      	str	r3, [r7, #12]
 800bf74:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800bf76:	2200      	movs	r2, #0
 800bf78:	2100      	movs	r1, #0
 800bf7a:	2014      	movs	r0, #20
 800bf7c:	f7f8 fcf1 	bl	8004962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800bf80:	2014      	movs	r0, #20
 800bf82:	f7f8 fd0a 	bl	800499a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bf86:	bf00      	nop
 800bf88:	3710      	adds	r7, #16
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	40005c00 	.word	0x40005c00
 800bf94:	40021000 	.word	0x40021000

0800bf98 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b082      	sub	sp, #8
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800bfac:	4619      	mov	r1, r3
 800bfae:	4610      	mov	r0, r2
 800bfb0:	f7fe fdc7 	bl	800ab42 <USBD_LL_SetupStage>
}
 800bfb4:	bf00      	nop
 800bfb6:	3708      	adds	r7, #8
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b082      	sub	sp, #8
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	460b      	mov	r3, r1
 800bfc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800bfce:	78fa      	ldrb	r2, [r7, #3]
 800bfd0:	6879      	ldr	r1, [r7, #4]
 800bfd2:	4613      	mov	r3, r2
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	4413      	add	r3, r2
 800bfd8:	00db      	lsls	r3, r3, #3
 800bfda:	440b      	add	r3, r1
 800bfdc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800bfe0:	681a      	ldr	r2, [r3, #0]
 800bfe2:	78fb      	ldrb	r3, [r7, #3]
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	f7fe fdf9 	bl	800abdc <USBD_LL_DataOutStage>
}
 800bfea:	bf00      	nop
 800bfec:	3708      	adds	r7, #8
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}

0800bff2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bff2:	b580      	push	{r7, lr}
 800bff4:	b082      	sub	sp, #8
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	6078      	str	r0, [r7, #4]
 800bffa:	460b      	mov	r3, r1
 800bffc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c004:	78fa      	ldrb	r2, [r7, #3]
 800c006:	6879      	ldr	r1, [r7, #4]
 800c008:	4613      	mov	r3, r2
 800c00a:	009b      	lsls	r3, r3, #2
 800c00c:	4413      	add	r3, r2
 800c00e:	00db      	lsls	r3, r3, #3
 800c010:	440b      	add	r3, r1
 800c012:	333c      	adds	r3, #60	; 0x3c
 800c014:	681a      	ldr	r2, [r3, #0]
 800c016:	78fb      	ldrb	r3, [r7, #3]
 800c018:	4619      	mov	r1, r3
 800c01a:	f7fe fe50 	bl	800acbe <USBD_LL_DataInStage>
}
 800c01e:	bf00      	nop
 800c020:	3708      	adds	r7, #8
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}

0800c026 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c026:	b580      	push	{r7, lr}
 800c028:	b082      	sub	sp, #8
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c034:	4618      	mov	r0, r3
 800c036:	f7fe ff60 	bl	800aefa <USBD_LL_SOF>
}
 800c03a:	bf00      	nop
 800c03c:	3708      	adds	r7, #8
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}

0800c042 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b084      	sub	sp, #16
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c04a:	2301      	movs	r3, #1
 800c04c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	689b      	ldr	r3, [r3, #8]
 800c052:	2b02      	cmp	r3, #2
 800c054:	d001      	beq.n	800c05a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c056:	f7f7 fbf9 	bl	800384c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c060:	7bfa      	ldrb	r2, [r7, #15]
 800c062:	4611      	mov	r1, r2
 800c064:	4618      	mov	r0, r3
 800c066:	f7fe ff10 	bl	800ae8a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c070:	4618      	mov	r0, r3
 800c072:	f7fe fec9 	bl	800ae08 <USBD_LL_Reset>
}
 800c076:	bf00      	nop
 800c078:	3710      	adds	r7, #16
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
	...

0800c080 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b082      	sub	sp, #8
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c08e:	4618      	mov	r0, r3
 800c090:	f7fe ff0a 	bl	800aea8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	699b      	ldr	r3, [r3, #24]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d005      	beq.n	800c0a8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c09c:	4b04      	ldr	r3, [pc, #16]	; (800c0b0 <HAL_PCD_SuspendCallback+0x30>)
 800c09e:	691b      	ldr	r3, [r3, #16]
 800c0a0:	4a03      	ldr	r2, [pc, #12]	; (800c0b0 <HAL_PCD_SuspendCallback+0x30>)
 800c0a2:	f043 0306 	orr.w	r3, r3, #6
 800c0a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c0a8:	bf00      	nop
 800c0aa:	3708      	adds	r7, #8
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}
 800c0b0:	e000ed00 	.word	0xe000ed00

0800c0b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b082      	sub	sp, #8
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f7fe ff04 	bl	800aed0 <USBD_LL_Resume>
}
 800c0c8:	bf00      	nop
 800c0ca:	3708      	adds	r7, #8
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c0d8:	4a28      	ldr	r2, [pc, #160]	; (800c17c <USBD_LL_Init+0xac>)
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	4a26      	ldr	r2, [pc, #152]	; (800c17c <USBD_LL_Init+0xac>)
 800c0e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c0e8:	4b24      	ldr	r3, [pc, #144]	; (800c17c <USBD_LL_Init+0xac>)
 800c0ea:	4a25      	ldr	r2, [pc, #148]	; (800c180 <USBD_LL_Init+0xb0>)
 800c0ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c0ee:	4b23      	ldr	r3, [pc, #140]	; (800c17c <USBD_LL_Init+0xac>)
 800c0f0:	2208      	movs	r2, #8
 800c0f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c0f4:	4b21      	ldr	r3, [pc, #132]	; (800c17c <USBD_LL_Init+0xac>)
 800c0f6:	2202      	movs	r2, #2
 800c0f8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c0fa:	4b20      	ldr	r3, [pc, #128]	; (800c17c <USBD_LL_Init+0xac>)
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c100:	4b1e      	ldr	r3, [pc, #120]	; (800c17c <USBD_LL_Init+0xac>)
 800c102:	2200      	movs	r2, #0
 800c104:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c106:	4b1d      	ldr	r3, [pc, #116]	; (800c17c <USBD_LL_Init+0xac>)
 800c108:	2200      	movs	r2, #0
 800c10a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c10c:	481b      	ldr	r0, [pc, #108]	; (800c17c <USBD_LL_Init+0xac>)
 800c10e:	f7f9 f82e 	bl	800516e <HAL_PCD_Init>
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	d001      	beq.n	800c11c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c118:	f7f7 fb98 	bl	800384c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c122:	2318      	movs	r3, #24
 800c124:	2200      	movs	r2, #0
 800c126:	2100      	movs	r1, #0
 800c128:	f7fa fb70 	bl	800680c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c132:	2358      	movs	r3, #88	; 0x58
 800c134:	2200      	movs	r2, #0
 800c136:	2180      	movs	r1, #128	; 0x80
 800c138:	f7fa fb68 	bl	800680c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c142:	23c0      	movs	r3, #192	; 0xc0
 800c144:	2200      	movs	r2, #0
 800c146:	2181      	movs	r1, #129	; 0x81
 800c148:	f7fa fb60 	bl	800680c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c152:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c156:	2200      	movs	r2, #0
 800c158:	2101      	movs	r1, #1
 800c15a:	f7fa fb57 	bl	800680c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c164:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c168:	2200      	movs	r2, #0
 800c16a:	2182      	movs	r1, #130	; 0x82
 800c16c:	f7fa fb4e 	bl	800680c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c170:	2300      	movs	r3, #0
}
 800c172:	4618      	mov	r0, r3
 800c174:	3708      	adds	r7, #8
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
 800c17a:	bf00      	nop
 800c17c:	200012c4 	.word	0x200012c4
 800c180:	40005c00 	.word	0x40005c00

0800c184 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b084      	sub	sp, #16
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c18c:	2300      	movs	r3, #0
 800c18e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c190:	2300      	movs	r3, #0
 800c192:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7f9 f8f2 	bl	8005384 <HAL_PCD_Start>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1a4:	7bfb      	ldrb	r3, [r7, #15]
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f000 f94e 	bl	800c448 <USBD_Get_USB_Status>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3710      	adds	r7, #16
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}

0800c1ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c1ba:	b580      	push	{r7, lr}
 800c1bc:	b084      	sub	sp, #16
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6078      	str	r0, [r7, #4]
 800c1c2:	4608      	mov	r0, r1
 800c1c4:	4611      	mov	r1, r2
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	70fb      	strb	r3, [r7, #3]
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	70bb      	strb	r3, [r7, #2]
 800c1d0:	4613      	mov	r3, r2
 800c1d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c1e2:	78bb      	ldrb	r3, [r7, #2]
 800c1e4:	883a      	ldrh	r2, [r7, #0]
 800c1e6:	78f9      	ldrb	r1, [r7, #3]
 800c1e8:	f7f9 fa6c 	bl	80056c4 <HAL_PCD_EP_Open>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1f0:	7bfb      	ldrb	r3, [r7, #15]
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f000 f928 	bl	800c448 <USBD_Get_USB_Status>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3710      	adds	r7, #16
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}

0800c206 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c206:	b580      	push	{r7, lr}
 800c208:	b084      	sub	sp, #16
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
 800c20e:	460b      	mov	r3, r1
 800c210:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c212:	2300      	movs	r3, #0
 800c214:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c216:	2300      	movs	r3, #0
 800c218:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c220:	78fa      	ldrb	r2, [r7, #3]
 800c222:	4611      	mov	r1, r2
 800c224:	4618      	mov	r0, r3
 800c226:	f7f9 fab3 	bl	8005790 <HAL_PCD_EP_Close>
 800c22a:	4603      	mov	r3, r0
 800c22c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c22e:	7bfb      	ldrb	r3, [r7, #15]
 800c230:	4618      	mov	r0, r3
 800c232:	f000 f909 	bl	800c448 <USBD_Get_USB_Status>
 800c236:	4603      	mov	r3, r0
 800c238:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c23a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3710      	adds	r7, #16
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	460b      	mov	r3, r1
 800c24e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c250:	2300      	movs	r3, #0
 800c252:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c254:	2300      	movs	r3, #0
 800c256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c25e:	78fa      	ldrb	r2, [r7, #3]
 800c260:	4611      	mov	r1, r2
 800c262:	4618      	mov	r0, r3
 800c264:	f7f9 fb73 	bl	800594e <HAL_PCD_EP_SetStall>
 800c268:	4603      	mov	r3, r0
 800c26a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c26c:	7bfb      	ldrb	r3, [r7, #15]
 800c26e:	4618      	mov	r0, r3
 800c270:	f000 f8ea 	bl	800c448 <USBD_Get_USB_Status>
 800c274:	4603      	mov	r3, r0
 800c276:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c278:	7bbb      	ldrb	r3, [r7, #14]
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3710      	adds	r7, #16
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}

0800c282 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c282:	b580      	push	{r7, lr}
 800c284:	b084      	sub	sp, #16
 800c286:	af00      	add	r7, sp, #0
 800c288:	6078      	str	r0, [r7, #4]
 800c28a:	460b      	mov	r3, r1
 800c28c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c28e:	2300      	movs	r3, #0
 800c290:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c292:	2300      	movs	r3, #0
 800c294:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c29c:	78fa      	ldrb	r2, [r7, #3]
 800c29e:	4611      	mov	r1, r2
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7f9 fbb4 	bl	8005a0e <HAL_PCD_EP_ClrStall>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2aa:	7bfb      	ldrb	r3, [r7, #15]
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f000 f8cb 	bl	800c448 <USBD_Get_USB_Status>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3710      	adds	r7, #16
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b085      	sub	sp, #20
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	460b      	mov	r3, r1
 800c2ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c2d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c2d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	da0c      	bge.n	800c2f6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c2dc:	78fb      	ldrb	r3, [r7, #3]
 800c2de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2e2:	68f9      	ldr	r1, [r7, #12]
 800c2e4:	1c5a      	adds	r2, r3, #1
 800c2e6:	4613      	mov	r3, r2
 800c2e8:	009b      	lsls	r3, r3, #2
 800c2ea:	4413      	add	r3, r2
 800c2ec:	00db      	lsls	r3, r3, #3
 800c2ee:	440b      	add	r3, r1
 800c2f0:	3302      	adds	r3, #2
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	e00b      	b.n	800c30e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c2f6:	78fb      	ldrb	r3, [r7, #3]
 800c2f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2fc:	68f9      	ldr	r1, [r7, #12]
 800c2fe:	4613      	mov	r3, r2
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	4413      	add	r3, r2
 800c304:	00db      	lsls	r3, r3, #3
 800c306:	440b      	add	r3, r1
 800c308:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c30c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3714      	adds	r7, #20
 800c312:	46bd      	mov	sp, r7
 800c314:	bc80      	pop	{r7}
 800c316:	4770      	bx	lr

0800c318 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	460b      	mov	r3, r1
 800c322:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c324:	2300      	movs	r3, #0
 800c326:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c328:	2300      	movs	r3, #0
 800c32a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c332:	78fa      	ldrb	r2, [r7, #3]
 800c334:	4611      	mov	r1, r2
 800c336:	4618      	mov	r0, r3
 800c338:	f7f9 f99f 	bl	800567a <HAL_PCD_SetAddress>
 800c33c:	4603      	mov	r3, r0
 800c33e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c340:	7bfb      	ldrb	r3, [r7, #15]
 800c342:	4618      	mov	r0, r3
 800c344:	f000 f880 	bl	800c448 <USBD_Get_USB_Status>
 800c348:	4603      	mov	r3, r0
 800c34a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c34c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b086      	sub	sp, #24
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	60f8      	str	r0, [r7, #12]
 800c35e:	607a      	str	r2, [r7, #4]
 800c360:	461a      	mov	r2, r3
 800c362:	460b      	mov	r3, r1
 800c364:	72fb      	strb	r3, [r7, #11]
 800c366:	4613      	mov	r3, r2
 800c368:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c36a:	2300      	movs	r3, #0
 800c36c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c36e:	2300      	movs	r3, #0
 800c370:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c378:	893b      	ldrh	r3, [r7, #8]
 800c37a:	7af9      	ldrb	r1, [r7, #11]
 800c37c:	687a      	ldr	r2, [r7, #4]
 800c37e:	f7f9 faa3 	bl	80058c8 <HAL_PCD_EP_Transmit>
 800c382:	4603      	mov	r3, r0
 800c384:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c386:	7dfb      	ldrb	r3, [r7, #23]
 800c388:	4618      	mov	r0, r3
 800c38a:	f000 f85d 	bl	800c448 <USBD_Get_USB_Status>
 800c38e:	4603      	mov	r3, r0
 800c390:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c392:	7dbb      	ldrb	r3, [r7, #22]
}
 800c394:	4618      	mov	r0, r3
 800c396:	3718      	adds	r7, #24
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b086      	sub	sp, #24
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	607a      	str	r2, [r7, #4]
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	72fb      	strb	r3, [r7, #11]
 800c3ac:	4613      	mov	r3, r2
 800c3ae:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c3be:	893b      	ldrh	r3, [r7, #8]
 800c3c0:	7af9      	ldrb	r1, [r7, #11]
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	f7f9 fa2c 	bl	8005820 <HAL_PCD_EP_Receive>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3cc:	7dfb      	ldrb	r3, [r7, #23]
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f000 f83a 	bl	800c448 <USBD_Get_USB_Status>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c3d8:	7dbb      	ldrb	r3, [r7, #22]
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3718      	adds	r7, #24
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b082      	sub	sp, #8
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c3f4:	78fa      	ldrb	r2, [r7, #3]
 800c3f6:	4611      	mov	r1, r2
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f7f9 fa4e 	bl	800589a <HAL_PCD_EP_GetRxCount>
 800c3fe:	4603      	mov	r3, r0
}
 800c400:	4618      	mov	r0, r3
 800c402:	3708      	adds	r7, #8
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c408:	b480      	push	{r7}
 800c40a:	b083      	sub	sp, #12
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c410:	4b02      	ldr	r3, [pc, #8]	; (800c41c <USBD_static_malloc+0x14>)
}
 800c412:	4618      	mov	r0, r3
 800c414:	370c      	adds	r7, #12
 800c416:	46bd      	mov	sp, r7
 800c418:	bc80      	pop	{r7}
 800c41a:	4770      	bx	lr
 800c41c:	20000284 	.word	0x20000284

0800c420 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c420:	b480      	push	{r7}
 800c422:	b083      	sub	sp, #12
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]

}
 800c428:	bf00      	nop
 800c42a:	370c      	adds	r7, #12
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bc80      	pop	{r7}
 800c430:	4770      	bx	lr

0800c432 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c432:	b480      	push	{r7}
 800c434:	b083      	sub	sp, #12
 800c436:	af00      	add	r7, sp, #0
 800c438:	6078      	str	r0, [r7, #4]
 800c43a:	460b      	mov	r3, r1
 800c43c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c43e:	bf00      	nop
 800c440:	370c      	adds	r7, #12
 800c442:	46bd      	mov	sp, r7
 800c444:	bc80      	pop	{r7}
 800c446:	4770      	bx	lr

0800c448 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c448:	b480      	push	{r7}
 800c44a:	b085      	sub	sp, #20
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	4603      	mov	r3, r0
 800c450:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c452:	2300      	movs	r3, #0
 800c454:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c456:	79fb      	ldrb	r3, [r7, #7]
 800c458:	2b03      	cmp	r3, #3
 800c45a:	d817      	bhi.n	800c48c <USBD_Get_USB_Status+0x44>
 800c45c:	a201      	add	r2, pc, #4	; (adr r2, 800c464 <USBD_Get_USB_Status+0x1c>)
 800c45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c462:	bf00      	nop
 800c464:	0800c475 	.word	0x0800c475
 800c468:	0800c47b 	.word	0x0800c47b
 800c46c:	0800c481 	.word	0x0800c481
 800c470:	0800c487 	.word	0x0800c487
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c474:	2300      	movs	r3, #0
 800c476:	73fb      	strb	r3, [r7, #15]
    break;
 800c478:	e00b      	b.n	800c492 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c47a:	2302      	movs	r3, #2
 800c47c:	73fb      	strb	r3, [r7, #15]
    break;
 800c47e:	e008      	b.n	800c492 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c480:	2301      	movs	r3, #1
 800c482:	73fb      	strb	r3, [r7, #15]
    break;
 800c484:	e005      	b.n	800c492 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c486:	2302      	movs	r3, #2
 800c488:	73fb      	strb	r3, [r7, #15]
    break;
 800c48a:	e002      	b.n	800c492 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c48c:	2302      	movs	r3, #2
 800c48e:	73fb      	strb	r3, [r7, #15]
    break;
 800c490:	bf00      	nop
  }
  return usb_status;
 800c492:	7bfb      	ldrb	r3, [r7, #15]
}
 800c494:	4618      	mov	r0, r3
 800c496:	3714      	adds	r7, #20
 800c498:	46bd      	mov	sp, r7
 800c49a:	bc80      	pop	{r7}
 800c49c:	4770      	bx	lr
 800c49e:	bf00      	nop

0800c4a0 <__errno>:
 800c4a0:	4b01      	ldr	r3, [pc, #4]	; (800c4a8 <__errno+0x8>)
 800c4a2:	6818      	ldr	r0, [r3, #0]
 800c4a4:	4770      	bx	lr
 800c4a6:	bf00      	nop
 800c4a8:	20000190 	.word	0x20000190

0800c4ac <__libc_init_array>:
 800c4ac:	b570      	push	{r4, r5, r6, lr}
 800c4ae:	2600      	movs	r6, #0
 800c4b0:	4d0c      	ldr	r5, [pc, #48]	; (800c4e4 <__libc_init_array+0x38>)
 800c4b2:	4c0d      	ldr	r4, [pc, #52]	; (800c4e8 <__libc_init_array+0x3c>)
 800c4b4:	1b64      	subs	r4, r4, r5
 800c4b6:	10a4      	asrs	r4, r4, #2
 800c4b8:	42a6      	cmp	r6, r4
 800c4ba:	d109      	bne.n	800c4d0 <__libc_init_array+0x24>
 800c4bc:	f001 fa30 	bl	800d920 <_init>
 800c4c0:	2600      	movs	r6, #0
 800c4c2:	4d0a      	ldr	r5, [pc, #40]	; (800c4ec <__libc_init_array+0x40>)
 800c4c4:	4c0a      	ldr	r4, [pc, #40]	; (800c4f0 <__libc_init_array+0x44>)
 800c4c6:	1b64      	subs	r4, r4, r5
 800c4c8:	10a4      	asrs	r4, r4, #2
 800c4ca:	42a6      	cmp	r6, r4
 800c4cc:	d105      	bne.n	800c4da <__libc_init_array+0x2e>
 800c4ce:	bd70      	pop	{r4, r5, r6, pc}
 800c4d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4d4:	4798      	blx	r3
 800c4d6:	3601      	adds	r6, #1
 800c4d8:	e7ee      	b.n	800c4b8 <__libc_init_array+0xc>
 800c4da:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4de:	4798      	blx	r3
 800c4e0:	3601      	adds	r6, #1
 800c4e2:	e7f2      	b.n	800c4ca <__libc_init_array+0x1e>
 800c4e4:	0800db44 	.word	0x0800db44
 800c4e8:	0800db44 	.word	0x0800db44
 800c4ec:	0800db44 	.word	0x0800db44
 800c4f0:	0800db48 	.word	0x0800db48

0800c4f4 <__itoa>:
 800c4f4:	1e93      	subs	r3, r2, #2
 800c4f6:	2b22      	cmp	r3, #34	; 0x22
 800c4f8:	b510      	push	{r4, lr}
 800c4fa:	460c      	mov	r4, r1
 800c4fc:	d904      	bls.n	800c508 <__itoa+0x14>
 800c4fe:	2300      	movs	r3, #0
 800c500:	461c      	mov	r4, r3
 800c502:	700b      	strb	r3, [r1, #0]
 800c504:	4620      	mov	r0, r4
 800c506:	bd10      	pop	{r4, pc}
 800c508:	2a0a      	cmp	r2, #10
 800c50a:	d109      	bne.n	800c520 <__itoa+0x2c>
 800c50c:	2800      	cmp	r0, #0
 800c50e:	da07      	bge.n	800c520 <__itoa+0x2c>
 800c510:	232d      	movs	r3, #45	; 0x2d
 800c512:	700b      	strb	r3, [r1, #0]
 800c514:	2101      	movs	r1, #1
 800c516:	4240      	negs	r0, r0
 800c518:	4421      	add	r1, r4
 800c51a:	f000 f853 	bl	800c5c4 <__utoa>
 800c51e:	e7f1      	b.n	800c504 <__itoa+0x10>
 800c520:	2100      	movs	r1, #0
 800c522:	e7f9      	b.n	800c518 <__itoa+0x24>

0800c524 <itoa>:
 800c524:	f7ff bfe6 	b.w	800c4f4 <__itoa>

0800c528 <memcpy>:
 800c528:	440a      	add	r2, r1
 800c52a:	4291      	cmp	r1, r2
 800c52c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c530:	d100      	bne.n	800c534 <memcpy+0xc>
 800c532:	4770      	bx	lr
 800c534:	b510      	push	{r4, lr}
 800c536:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c53a:	4291      	cmp	r1, r2
 800c53c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c540:	d1f9      	bne.n	800c536 <memcpy+0xe>
 800c542:	bd10      	pop	{r4, pc}

0800c544 <memset>:
 800c544:	4603      	mov	r3, r0
 800c546:	4402      	add	r2, r0
 800c548:	4293      	cmp	r3, r2
 800c54a:	d100      	bne.n	800c54e <memset+0xa>
 800c54c:	4770      	bx	lr
 800c54e:	f803 1b01 	strb.w	r1, [r3], #1
 800c552:	e7f9      	b.n	800c548 <memset+0x4>

0800c554 <iprintf>:
 800c554:	b40f      	push	{r0, r1, r2, r3}
 800c556:	4b0a      	ldr	r3, [pc, #40]	; (800c580 <iprintf+0x2c>)
 800c558:	b513      	push	{r0, r1, r4, lr}
 800c55a:	681c      	ldr	r4, [r3, #0]
 800c55c:	b124      	cbz	r4, 800c568 <iprintf+0x14>
 800c55e:	69a3      	ldr	r3, [r4, #24]
 800c560:	b913      	cbnz	r3, 800c568 <iprintf+0x14>
 800c562:	4620      	mov	r0, r4
 800c564:	f000 f8c8 	bl	800c6f8 <__sinit>
 800c568:	ab05      	add	r3, sp, #20
 800c56a:	4620      	mov	r0, r4
 800c56c:	9a04      	ldr	r2, [sp, #16]
 800c56e:	68a1      	ldr	r1, [r4, #8]
 800c570:	9301      	str	r3, [sp, #4]
 800c572:	f000 fb3f 	bl	800cbf4 <_vfiprintf_r>
 800c576:	b002      	add	sp, #8
 800c578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c57c:	b004      	add	sp, #16
 800c57e:	4770      	bx	lr
 800c580:	20000190 	.word	0x20000190

0800c584 <siprintf>:
 800c584:	b40e      	push	{r1, r2, r3}
 800c586:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c58a:	b500      	push	{lr}
 800c58c:	b09c      	sub	sp, #112	; 0x70
 800c58e:	ab1d      	add	r3, sp, #116	; 0x74
 800c590:	9002      	str	r0, [sp, #8]
 800c592:	9006      	str	r0, [sp, #24]
 800c594:	9107      	str	r1, [sp, #28]
 800c596:	9104      	str	r1, [sp, #16]
 800c598:	4808      	ldr	r0, [pc, #32]	; (800c5bc <siprintf+0x38>)
 800c59a:	4909      	ldr	r1, [pc, #36]	; (800c5c0 <siprintf+0x3c>)
 800c59c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5a0:	9105      	str	r1, [sp, #20]
 800c5a2:	6800      	ldr	r0, [r0, #0]
 800c5a4:	a902      	add	r1, sp, #8
 800c5a6:	9301      	str	r3, [sp, #4]
 800c5a8:	f000 f9fc 	bl	800c9a4 <_svfiprintf_r>
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	9b02      	ldr	r3, [sp, #8]
 800c5b0:	701a      	strb	r2, [r3, #0]
 800c5b2:	b01c      	add	sp, #112	; 0x70
 800c5b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5b8:	b003      	add	sp, #12
 800c5ba:	4770      	bx	lr
 800c5bc:	20000190 	.word	0x20000190
 800c5c0:	ffff0208 	.word	0xffff0208

0800c5c4 <__utoa>:
 800c5c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5c6:	b08b      	sub	sp, #44	; 0x2c
 800c5c8:	4605      	mov	r5, r0
 800c5ca:	460b      	mov	r3, r1
 800c5cc:	466e      	mov	r6, sp
 800c5ce:	4c1d      	ldr	r4, [pc, #116]	; (800c644 <__utoa+0x80>)
 800c5d0:	f104 0c20 	add.w	ip, r4, #32
 800c5d4:	4637      	mov	r7, r6
 800c5d6:	6820      	ldr	r0, [r4, #0]
 800c5d8:	6861      	ldr	r1, [r4, #4]
 800c5da:	3408      	adds	r4, #8
 800c5dc:	c703      	stmia	r7!, {r0, r1}
 800c5de:	4564      	cmp	r4, ip
 800c5e0:	463e      	mov	r6, r7
 800c5e2:	d1f7      	bne.n	800c5d4 <__utoa+0x10>
 800c5e4:	7921      	ldrb	r1, [r4, #4]
 800c5e6:	6820      	ldr	r0, [r4, #0]
 800c5e8:	7139      	strb	r1, [r7, #4]
 800c5ea:	1e91      	subs	r1, r2, #2
 800c5ec:	2922      	cmp	r1, #34	; 0x22
 800c5ee:	6038      	str	r0, [r7, #0]
 800c5f0:	f04f 0100 	mov.w	r1, #0
 800c5f4:	d904      	bls.n	800c600 <__utoa+0x3c>
 800c5f6:	7019      	strb	r1, [r3, #0]
 800c5f8:	460b      	mov	r3, r1
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	b00b      	add	sp, #44	; 0x2c
 800c5fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c600:	1e58      	subs	r0, r3, #1
 800c602:	4684      	mov	ip, r0
 800c604:	fbb5 f7f2 	udiv	r7, r5, r2
 800c608:	fb02 5617 	mls	r6, r2, r7, r5
 800c60c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800c610:	4476      	add	r6, lr
 800c612:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c616:	460c      	mov	r4, r1
 800c618:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c61c:	462e      	mov	r6, r5
 800c61e:	42b2      	cmp	r2, r6
 800c620:	463d      	mov	r5, r7
 800c622:	f101 0101 	add.w	r1, r1, #1
 800c626:	d9ed      	bls.n	800c604 <__utoa+0x40>
 800c628:	2200      	movs	r2, #0
 800c62a:	545a      	strb	r2, [r3, r1]
 800c62c:	1919      	adds	r1, r3, r4
 800c62e:	1aa5      	subs	r5, r4, r2
 800c630:	42aa      	cmp	r2, r5
 800c632:	dae2      	bge.n	800c5fa <__utoa+0x36>
 800c634:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c638:	780e      	ldrb	r6, [r1, #0]
 800c63a:	3201      	adds	r2, #1
 800c63c:	7006      	strb	r6, [r0, #0]
 800c63e:	f801 5901 	strb.w	r5, [r1], #-1
 800c642:	e7f4      	b.n	800c62e <__utoa+0x6a>
 800c644:	0800da88 	.word	0x0800da88

0800c648 <std>:
 800c648:	2300      	movs	r3, #0
 800c64a:	b510      	push	{r4, lr}
 800c64c:	4604      	mov	r4, r0
 800c64e:	e9c0 3300 	strd	r3, r3, [r0]
 800c652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c656:	6083      	str	r3, [r0, #8]
 800c658:	8181      	strh	r1, [r0, #12]
 800c65a:	6643      	str	r3, [r0, #100]	; 0x64
 800c65c:	81c2      	strh	r2, [r0, #14]
 800c65e:	6183      	str	r3, [r0, #24]
 800c660:	4619      	mov	r1, r3
 800c662:	2208      	movs	r2, #8
 800c664:	305c      	adds	r0, #92	; 0x5c
 800c666:	f7ff ff6d 	bl	800c544 <memset>
 800c66a:	4b05      	ldr	r3, [pc, #20]	; (800c680 <std+0x38>)
 800c66c:	6224      	str	r4, [r4, #32]
 800c66e:	6263      	str	r3, [r4, #36]	; 0x24
 800c670:	4b04      	ldr	r3, [pc, #16]	; (800c684 <std+0x3c>)
 800c672:	62a3      	str	r3, [r4, #40]	; 0x28
 800c674:	4b04      	ldr	r3, [pc, #16]	; (800c688 <std+0x40>)
 800c676:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c678:	4b04      	ldr	r3, [pc, #16]	; (800c68c <std+0x44>)
 800c67a:	6323      	str	r3, [r4, #48]	; 0x30
 800c67c:	bd10      	pop	{r4, pc}
 800c67e:	bf00      	nop
 800c680:	0800d1a1 	.word	0x0800d1a1
 800c684:	0800d1c3 	.word	0x0800d1c3
 800c688:	0800d1fb 	.word	0x0800d1fb
 800c68c:	0800d21f 	.word	0x0800d21f

0800c690 <_cleanup_r>:
 800c690:	4901      	ldr	r1, [pc, #4]	; (800c698 <_cleanup_r+0x8>)
 800c692:	f000 b8af 	b.w	800c7f4 <_fwalk_reent>
 800c696:	bf00      	nop
 800c698:	0800d4f9 	.word	0x0800d4f9

0800c69c <__sfmoreglue>:
 800c69c:	b570      	push	{r4, r5, r6, lr}
 800c69e:	2568      	movs	r5, #104	; 0x68
 800c6a0:	1e4a      	subs	r2, r1, #1
 800c6a2:	4355      	muls	r5, r2
 800c6a4:	460e      	mov	r6, r1
 800c6a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c6aa:	f000 f8c5 	bl	800c838 <_malloc_r>
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	b140      	cbz	r0, 800c6c4 <__sfmoreglue+0x28>
 800c6b2:	2100      	movs	r1, #0
 800c6b4:	e9c0 1600 	strd	r1, r6, [r0]
 800c6b8:	300c      	adds	r0, #12
 800c6ba:	60a0      	str	r0, [r4, #8]
 800c6bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c6c0:	f7ff ff40 	bl	800c544 <memset>
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	bd70      	pop	{r4, r5, r6, pc}

0800c6c8 <__sfp_lock_acquire>:
 800c6c8:	4801      	ldr	r0, [pc, #4]	; (800c6d0 <__sfp_lock_acquire+0x8>)
 800c6ca:	f000 b8b3 	b.w	800c834 <__retarget_lock_acquire_recursive>
 800c6ce:	bf00      	nop
 800c6d0:	200015b8 	.word	0x200015b8

0800c6d4 <__sfp_lock_release>:
 800c6d4:	4801      	ldr	r0, [pc, #4]	; (800c6dc <__sfp_lock_release+0x8>)
 800c6d6:	f000 b8ae 	b.w	800c836 <__retarget_lock_release_recursive>
 800c6da:	bf00      	nop
 800c6dc:	200015b8 	.word	0x200015b8

0800c6e0 <__sinit_lock_acquire>:
 800c6e0:	4801      	ldr	r0, [pc, #4]	; (800c6e8 <__sinit_lock_acquire+0x8>)
 800c6e2:	f000 b8a7 	b.w	800c834 <__retarget_lock_acquire_recursive>
 800c6e6:	bf00      	nop
 800c6e8:	200015b3 	.word	0x200015b3

0800c6ec <__sinit_lock_release>:
 800c6ec:	4801      	ldr	r0, [pc, #4]	; (800c6f4 <__sinit_lock_release+0x8>)
 800c6ee:	f000 b8a2 	b.w	800c836 <__retarget_lock_release_recursive>
 800c6f2:	bf00      	nop
 800c6f4:	200015b3 	.word	0x200015b3

0800c6f8 <__sinit>:
 800c6f8:	b510      	push	{r4, lr}
 800c6fa:	4604      	mov	r4, r0
 800c6fc:	f7ff fff0 	bl	800c6e0 <__sinit_lock_acquire>
 800c700:	69a3      	ldr	r3, [r4, #24]
 800c702:	b11b      	cbz	r3, 800c70c <__sinit+0x14>
 800c704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c708:	f7ff bff0 	b.w	800c6ec <__sinit_lock_release>
 800c70c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c710:	6523      	str	r3, [r4, #80]	; 0x50
 800c712:	4b13      	ldr	r3, [pc, #76]	; (800c760 <__sinit+0x68>)
 800c714:	4a13      	ldr	r2, [pc, #76]	; (800c764 <__sinit+0x6c>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	62a2      	str	r2, [r4, #40]	; 0x28
 800c71a:	42a3      	cmp	r3, r4
 800c71c:	bf08      	it	eq
 800c71e:	2301      	moveq	r3, #1
 800c720:	4620      	mov	r0, r4
 800c722:	bf08      	it	eq
 800c724:	61a3      	streq	r3, [r4, #24]
 800c726:	f000 f81f 	bl	800c768 <__sfp>
 800c72a:	6060      	str	r0, [r4, #4]
 800c72c:	4620      	mov	r0, r4
 800c72e:	f000 f81b 	bl	800c768 <__sfp>
 800c732:	60a0      	str	r0, [r4, #8]
 800c734:	4620      	mov	r0, r4
 800c736:	f000 f817 	bl	800c768 <__sfp>
 800c73a:	2200      	movs	r2, #0
 800c73c:	2104      	movs	r1, #4
 800c73e:	60e0      	str	r0, [r4, #12]
 800c740:	6860      	ldr	r0, [r4, #4]
 800c742:	f7ff ff81 	bl	800c648 <std>
 800c746:	2201      	movs	r2, #1
 800c748:	2109      	movs	r1, #9
 800c74a:	68a0      	ldr	r0, [r4, #8]
 800c74c:	f7ff ff7c 	bl	800c648 <std>
 800c750:	2202      	movs	r2, #2
 800c752:	2112      	movs	r1, #18
 800c754:	68e0      	ldr	r0, [r4, #12]
 800c756:	f7ff ff77 	bl	800c648 <std>
 800c75a:	2301      	movs	r3, #1
 800c75c:	61a3      	str	r3, [r4, #24]
 800c75e:	e7d1      	b.n	800c704 <__sinit+0xc>
 800c760:	0800da84 	.word	0x0800da84
 800c764:	0800c691 	.word	0x0800c691

0800c768 <__sfp>:
 800c768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c76a:	4607      	mov	r7, r0
 800c76c:	f7ff ffac 	bl	800c6c8 <__sfp_lock_acquire>
 800c770:	4b1e      	ldr	r3, [pc, #120]	; (800c7ec <__sfp+0x84>)
 800c772:	681e      	ldr	r6, [r3, #0]
 800c774:	69b3      	ldr	r3, [r6, #24]
 800c776:	b913      	cbnz	r3, 800c77e <__sfp+0x16>
 800c778:	4630      	mov	r0, r6
 800c77a:	f7ff ffbd 	bl	800c6f8 <__sinit>
 800c77e:	3648      	adds	r6, #72	; 0x48
 800c780:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c784:	3b01      	subs	r3, #1
 800c786:	d503      	bpl.n	800c790 <__sfp+0x28>
 800c788:	6833      	ldr	r3, [r6, #0]
 800c78a:	b30b      	cbz	r3, 800c7d0 <__sfp+0x68>
 800c78c:	6836      	ldr	r6, [r6, #0]
 800c78e:	e7f7      	b.n	800c780 <__sfp+0x18>
 800c790:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c794:	b9d5      	cbnz	r5, 800c7cc <__sfp+0x64>
 800c796:	4b16      	ldr	r3, [pc, #88]	; (800c7f0 <__sfp+0x88>)
 800c798:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c79c:	60e3      	str	r3, [r4, #12]
 800c79e:	6665      	str	r5, [r4, #100]	; 0x64
 800c7a0:	f000 f847 	bl	800c832 <__retarget_lock_init_recursive>
 800c7a4:	f7ff ff96 	bl	800c6d4 <__sfp_lock_release>
 800c7a8:	2208      	movs	r2, #8
 800c7aa:	4629      	mov	r1, r5
 800c7ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c7b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c7b4:	6025      	str	r5, [r4, #0]
 800c7b6:	61a5      	str	r5, [r4, #24]
 800c7b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c7bc:	f7ff fec2 	bl	800c544 <memset>
 800c7c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c7c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c7c8:	4620      	mov	r0, r4
 800c7ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7cc:	3468      	adds	r4, #104	; 0x68
 800c7ce:	e7d9      	b.n	800c784 <__sfp+0x1c>
 800c7d0:	2104      	movs	r1, #4
 800c7d2:	4638      	mov	r0, r7
 800c7d4:	f7ff ff62 	bl	800c69c <__sfmoreglue>
 800c7d8:	4604      	mov	r4, r0
 800c7da:	6030      	str	r0, [r6, #0]
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	d1d5      	bne.n	800c78c <__sfp+0x24>
 800c7e0:	f7ff ff78 	bl	800c6d4 <__sfp_lock_release>
 800c7e4:	230c      	movs	r3, #12
 800c7e6:	603b      	str	r3, [r7, #0]
 800c7e8:	e7ee      	b.n	800c7c8 <__sfp+0x60>
 800c7ea:	bf00      	nop
 800c7ec:	0800da84 	.word	0x0800da84
 800c7f0:	ffff0001 	.word	0xffff0001

0800c7f4 <_fwalk_reent>:
 800c7f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7f8:	4606      	mov	r6, r0
 800c7fa:	4688      	mov	r8, r1
 800c7fc:	2700      	movs	r7, #0
 800c7fe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c802:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c806:	f1b9 0901 	subs.w	r9, r9, #1
 800c80a:	d505      	bpl.n	800c818 <_fwalk_reent+0x24>
 800c80c:	6824      	ldr	r4, [r4, #0]
 800c80e:	2c00      	cmp	r4, #0
 800c810:	d1f7      	bne.n	800c802 <_fwalk_reent+0xe>
 800c812:	4638      	mov	r0, r7
 800c814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c818:	89ab      	ldrh	r3, [r5, #12]
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	d907      	bls.n	800c82e <_fwalk_reent+0x3a>
 800c81e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c822:	3301      	adds	r3, #1
 800c824:	d003      	beq.n	800c82e <_fwalk_reent+0x3a>
 800c826:	4629      	mov	r1, r5
 800c828:	4630      	mov	r0, r6
 800c82a:	47c0      	blx	r8
 800c82c:	4307      	orrs	r7, r0
 800c82e:	3568      	adds	r5, #104	; 0x68
 800c830:	e7e9      	b.n	800c806 <_fwalk_reent+0x12>

0800c832 <__retarget_lock_init_recursive>:
 800c832:	4770      	bx	lr

0800c834 <__retarget_lock_acquire_recursive>:
 800c834:	4770      	bx	lr

0800c836 <__retarget_lock_release_recursive>:
 800c836:	4770      	bx	lr

0800c838 <_malloc_r>:
 800c838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c83a:	1ccd      	adds	r5, r1, #3
 800c83c:	f025 0503 	bic.w	r5, r5, #3
 800c840:	3508      	adds	r5, #8
 800c842:	2d0c      	cmp	r5, #12
 800c844:	bf38      	it	cc
 800c846:	250c      	movcc	r5, #12
 800c848:	2d00      	cmp	r5, #0
 800c84a:	4606      	mov	r6, r0
 800c84c:	db01      	blt.n	800c852 <_malloc_r+0x1a>
 800c84e:	42a9      	cmp	r1, r5
 800c850:	d903      	bls.n	800c85a <_malloc_r+0x22>
 800c852:	230c      	movs	r3, #12
 800c854:	6033      	str	r3, [r6, #0]
 800c856:	2000      	movs	r0, #0
 800c858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c85a:	f000 ff27 	bl	800d6ac <__malloc_lock>
 800c85e:	4921      	ldr	r1, [pc, #132]	; (800c8e4 <_malloc_r+0xac>)
 800c860:	680a      	ldr	r2, [r1, #0]
 800c862:	4614      	mov	r4, r2
 800c864:	b99c      	cbnz	r4, 800c88e <_malloc_r+0x56>
 800c866:	4f20      	ldr	r7, [pc, #128]	; (800c8e8 <_malloc_r+0xb0>)
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	b923      	cbnz	r3, 800c876 <_malloc_r+0x3e>
 800c86c:	4621      	mov	r1, r4
 800c86e:	4630      	mov	r0, r6
 800c870:	f000 fc86 	bl	800d180 <_sbrk_r>
 800c874:	6038      	str	r0, [r7, #0]
 800c876:	4629      	mov	r1, r5
 800c878:	4630      	mov	r0, r6
 800c87a:	f000 fc81 	bl	800d180 <_sbrk_r>
 800c87e:	1c43      	adds	r3, r0, #1
 800c880:	d123      	bne.n	800c8ca <_malloc_r+0x92>
 800c882:	230c      	movs	r3, #12
 800c884:	4630      	mov	r0, r6
 800c886:	6033      	str	r3, [r6, #0]
 800c888:	f000 ff16 	bl	800d6b8 <__malloc_unlock>
 800c88c:	e7e3      	b.n	800c856 <_malloc_r+0x1e>
 800c88e:	6823      	ldr	r3, [r4, #0]
 800c890:	1b5b      	subs	r3, r3, r5
 800c892:	d417      	bmi.n	800c8c4 <_malloc_r+0x8c>
 800c894:	2b0b      	cmp	r3, #11
 800c896:	d903      	bls.n	800c8a0 <_malloc_r+0x68>
 800c898:	6023      	str	r3, [r4, #0]
 800c89a:	441c      	add	r4, r3
 800c89c:	6025      	str	r5, [r4, #0]
 800c89e:	e004      	b.n	800c8aa <_malloc_r+0x72>
 800c8a0:	6863      	ldr	r3, [r4, #4]
 800c8a2:	42a2      	cmp	r2, r4
 800c8a4:	bf0c      	ite	eq
 800c8a6:	600b      	streq	r3, [r1, #0]
 800c8a8:	6053      	strne	r3, [r2, #4]
 800c8aa:	4630      	mov	r0, r6
 800c8ac:	f000 ff04 	bl	800d6b8 <__malloc_unlock>
 800c8b0:	f104 000b 	add.w	r0, r4, #11
 800c8b4:	1d23      	adds	r3, r4, #4
 800c8b6:	f020 0007 	bic.w	r0, r0, #7
 800c8ba:	1ac2      	subs	r2, r0, r3
 800c8bc:	d0cc      	beq.n	800c858 <_malloc_r+0x20>
 800c8be:	1a1b      	subs	r3, r3, r0
 800c8c0:	50a3      	str	r3, [r4, r2]
 800c8c2:	e7c9      	b.n	800c858 <_malloc_r+0x20>
 800c8c4:	4622      	mov	r2, r4
 800c8c6:	6864      	ldr	r4, [r4, #4]
 800c8c8:	e7cc      	b.n	800c864 <_malloc_r+0x2c>
 800c8ca:	1cc4      	adds	r4, r0, #3
 800c8cc:	f024 0403 	bic.w	r4, r4, #3
 800c8d0:	42a0      	cmp	r0, r4
 800c8d2:	d0e3      	beq.n	800c89c <_malloc_r+0x64>
 800c8d4:	1a21      	subs	r1, r4, r0
 800c8d6:	4630      	mov	r0, r6
 800c8d8:	f000 fc52 	bl	800d180 <_sbrk_r>
 800c8dc:	3001      	adds	r0, #1
 800c8de:	d1dd      	bne.n	800c89c <_malloc_r+0x64>
 800c8e0:	e7cf      	b.n	800c882 <_malloc_r+0x4a>
 800c8e2:	bf00      	nop
 800c8e4:	200004a4 	.word	0x200004a4
 800c8e8:	200004a8 	.word	0x200004a8

0800c8ec <__ssputs_r>:
 800c8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8f0:	688e      	ldr	r6, [r1, #8]
 800c8f2:	4682      	mov	sl, r0
 800c8f4:	429e      	cmp	r6, r3
 800c8f6:	460c      	mov	r4, r1
 800c8f8:	4690      	mov	r8, r2
 800c8fa:	461f      	mov	r7, r3
 800c8fc:	d838      	bhi.n	800c970 <__ssputs_r+0x84>
 800c8fe:	898a      	ldrh	r2, [r1, #12]
 800c900:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c904:	d032      	beq.n	800c96c <__ssputs_r+0x80>
 800c906:	6825      	ldr	r5, [r4, #0]
 800c908:	6909      	ldr	r1, [r1, #16]
 800c90a:	3301      	adds	r3, #1
 800c90c:	eba5 0901 	sub.w	r9, r5, r1
 800c910:	6965      	ldr	r5, [r4, #20]
 800c912:	444b      	add	r3, r9
 800c914:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c918:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c91c:	106d      	asrs	r5, r5, #1
 800c91e:	429d      	cmp	r5, r3
 800c920:	bf38      	it	cc
 800c922:	461d      	movcc	r5, r3
 800c924:	0553      	lsls	r3, r2, #21
 800c926:	d531      	bpl.n	800c98c <__ssputs_r+0xa0>
 800c928:	4629      	mov	r1, r5
 800c92a:	f7ff ff85 	bl	800c838 <_malloc_r>
 800c92e:	4606      	mov	r6, r0
 800c930:	b950      	cbnz	r0, 800c948 <__ssputs_r+0x5c>
 800c932:	230c      	movs	r3, #12
 800c934:	f04f 30ff 	mov.w	r0, #4294967295
 800c938:	f8ca 3000 	str.w	r3, [sl]
 800c93c:	89a3      	ldrh	r3, [r4, #12]
 800c93e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c942:	81a3      	strh	r3, [r4, #12]
 800c944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c948:	464a      	mov	r2, r9
 800c94a:	6921      	ldr	r1, [r4, #16]
 800c94c:	f7ff fdec 	bl	800c528 <memcpy>
 800c950:	89a3      	ldrh	r3, [r4, #12]
 800c952:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c95a:	81a3      	strh	r3, [r4, #12]
 800c95c:	6126      	str	r6, [r4, #16]
 800c95e:	444e      	add	r6, r9
 800c960:	6026      	str	r6, [r4, #0]
 800c962:	463e      	mov	r6, r7
 800c964:	6165      	str	r5, [r4, #20]
 800c966:	eba5 0509 	sub.w	r5, r5, r9
 800c96a:	60a5      	str	r5, [r4, #8]
 800c96c:	42be      	cmp	r6, r7
 800c96e:	d900      	bls.n	800c972 <__ssputs_r+0x86>
 800c970:	463e      	mov	r6, r7
 800c972:	4632      	mov	r2, r6
 800c974:	4641      	mov	r1, r8
 800c976:	6820      	ldr	r0, [r4, #0]
 800c978:	f000 fe7e 	bl	800d678 <memmove>
 800c97c:	68a3      	ldr	r3, [r4, #8]
 800c97e:	6822      	ldr	r2, [r4, #0]
 800c980:	1b9b      	subs	r3, r3, r6
 800c982:	4432      	add	r2, r6
 800c984:	2000      	movs	r0, #0
 800c986:	60a3      	str	r3, [r4, #8]
 800c988:	6022      	str	r2, [r4, #0]
 800c98a:	e7db      	b.n	800c944 <__ssputs_r+0x58>
 800c98c:	462a      	mov	r2, r5
 800c98e:	f000 fee5 	bl	800d75c <_realloc_r>
 800c992:	4606      	mov	r6, r0
 800c994:	2800      	cmp	r0, #0
 800c996:	d1e1      	bne.n	800c95c <__ssputs_r+0x70>
 800c998:	4650      	mov	r0, sl
 800c99a:	6921      	ldr	r1, [r4, #16]
 800c99c:	f000 fe92 	bl	800d6c4 <_free_r>
 800c9a0:	e7c7      	b.n	800c932 <__ssputs_r+0x46>
	...

0800c9a4 <_svfiprintf_r>:
 800c9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9a8:	4698      	mov	r8, r3
 800c9aa:	898b      	ldrh	r3, [r1, #12]
 800c9ac:	4607      	mov	r7, r0
 800c9ae:	061b      	lsls	r3, r3, #24
 800c9b0:	460d      	mov	r5, r1
 800c9b2:	4614      	mov	r4, r2
 800c9b4:	b09d      	sub	sp, #116	; 0x74
 800c9b6:	d50e      	bpl.n	800c9d6 <_svfiprintf_r+0x32>
 800c9b8:	690b      	ldr	r3, [r1, #16]
 800c9ba:	b963      	cbnz	r3, 800c9d6 <_svfiprintf_r+0x32>
 800c9bc:	2140      	movs	r1, #64	; 0x40
 800c9be:	f7ff ff3b 	bl	800c838 <_malloc_r>
 800c9c2:	6028      	str	r0, [r5, #0]
 800c9c4:	6128      	str	r0, [r5, #16]
 800c9c6:	b920      	cbnz	r0, 800c9d2 <_svfiprintf_r+0x2e>
 800c9c8:	230c      	movs	r3, #12
 800c9ca:	603b      	str	r3, [r7, #0]
 800c9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c9d0:	e0d1      	b.n	800cb76 <_svfiprintf_r+0x1d2>
 800c9d2:	2340      	movs	r3, #64	; 0x40
 800c9d4:	616b      	str	r3, [r5, #20]
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	9309      	str	r3, [sp, #36]	; 0x24
 800c9da:	2320      	movs	r3, #32
 800c9dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c9e0:	2330      	movs	r3, #48	; 0x30
 800c9e2:	f04f 0901 	mov.w	r9, #1
 800c9e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cb90 <_svfiprintf_r+0x1ec>
 800c9ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c9f2:	4623      	mov	r3, r4
 800c9f4:	469a      	mov	sl, r3
 800c9f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9fa:	b10a      	cbz	r2, 800ca00 <_svfiprintf_r+0x5c>
 800c9fc:	2a25      	cmp	r2, #37	; 0x25
 800c9fe:	d1f9      	bne.n	800c9f4 <_svfiprintf_r+0x50>
 800ca00:	ebba 0b04 	subs.w	fp, sl, r4
 800ca04:	d00b      	beq.n	800ca1e <_svfiprintf_r+0x7a>
 800ca06:	465b      	mov	r3, fp
 800ca08:	4622      	mov	r2, r4
 800ca0a:	4629      	mov	r1, r5
 800ca0c:	4638      	mov	r0, r7
 800ca0e:	f7ff ff6d 	bl	800c8ec <__ssputs_r>
 800ca12:	3001      	adds	r0, #1
 800ca14:	f000 80aa 	beq.w	800cb6c <_svfiprintf_r+0x1c8>
 800ca18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca1a:	445a      	add	r2, fp
 800ca1c:	9209      	str	r2, [sp, #36]	; 0x24
 800ca1e:	f89a 3000 	ldrb.w	r3, [sl]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	f000 80a2 	beq.w	800cb6c <_svfiprintf_r+0x1c8>
 800ca28:	2300      	movs	r3, #0
 800ca2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ca2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca32:	f10a 0a01 	add.w	sl, sl, #1
 800ca36:	9304      	str	r3, [sp, #16]
 800ca38:	9307      	str	r3, [sp, #28]
 800ca3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca3e:	931a      	str	r3, [sp, #104]	; 0x68
 800ca40:	4654      	mov	r4, sl
 800ca42:	2205      	movs	r2, #5
 800ca44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca48:	4851      	ldr	r0, [pc, #324]	; (800cb90 <_svfiprintf_r+0x1ec>)
 800ca4a:	f000 fe07 	bl	800d65c <memchr>
 800ca4e:	9a04      	ldr	r2, [sp, #16]
 800ca50:	b9d8      	cbnz	r0, 800ca8a <_svfiprintf_r+0xe6>
 800ca52:	06d0      	lsls	r0, r2, #27
 800ca54:	bf44      	itt	mi
 800ca56:	2320      	movmi	r3, #32
 800ca58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca5c:	0711      	lsls	r1, r2, #28
 800ca5e:	bf44      	itt	mi
 800ca60:	232b      	movmi	r3, #43	; 0x2b
 800ca62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca66:	f89a 3000 	ldrb.w	r3, [sl]
 800ca6a:	2b2a      	cmp	r3, #42	; 0x2a
 800ca6c:	d015      	beq.n	800ca9a <_svfiprintf_r+0xf6>
 800ca6e:	4654      	mov	r4, sl
 800ca70:	2000      	movs	r0, #0
 800ca72:	f04f 0c0a 	mov.w	ip, #10
 800ca76:	9a07      	ldr	r2, [sp, #28]
 800ca78:	4621      	mov	r1, r4
 800ca7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca7e:	3b30      	subs	r3, #48	; 0x30
 800ca80:	2b09      	cmp	r3, #9
 800ca82:	d94e      	bls.n	800cb22 <_svfiprintf_r+0x17e>
 800ca84:	b1b0      	cbz	r0, 800cab4 <_svfiprintf_r+0x110>
 800ca86:	9207      	str	r2, [sp, #28]
 800ca88:	e014      	b.n	800cab4 <_svfiprintf_r+0x110>
 800ca8a:	eba0 0308 	sub.w	r3, r0, r8
 800ca8e:	fa09 f303 	lsl.w	r3, r9, r3
 800ca92:	4313      	orrs	r3, r2
 800ca94:	46a2      	mov	sl, r4
 800ca96:	9304      	str	r3, [sp, #16]
 800ca98:	e7d2      	b.n	800ca40 <_svfiprintf_r+0x9c>
 800ca9a:	9b03      	ldr	r3, [sp, #12]
 800ca9c:	1d19      	adds	r1, r3, #4
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	9103      	str	r1, [sp, #12]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	bfbb      	ittet	lt
 800caa6:	425b      	neglt	r3, r3
 800caa8:	f042 0202 	orrlt.w	r2, r2, #2
 800caac:	9307      	strge	r3, [sp, #28]
 800caae:	9307      	strlt	r3, [sp, #28]
 800cab0:	bfb8      	it	lt
 800cab2:	9204      	strlt	r2, [sp, #16]
 800cab4:	7823      	ldrb	r3, [r4, #0]
 800cab6:	2b2e      	cmp	r3, #46	; 0x2e
 800cab8:	d10c      	bne.n	800cad4 <_svfiprintf_r+0x130>
 800caba:	7863      	ldrb	r3, [r4, #1]
 800cabc:	2b2a      	cmp	r3, #42	; 0x2a
 800cabe:	d135      	bne.n	800cb2c <_svfiprintf_r+0x188>
 800cac0:	9b03      	ldr	r3, [sp, #12]
 800cac2:	3402      	adds	r4, #2
 800cac4:	1d1a      	adds	r2, r3, #4
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	9203      	str	r2, [sp, #12]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	bfb8      	it	lt
 800cace:	f04f 33ff 	movlt.w	r3, #4294967295
 800cad2:	9305      	str	r3, [sp, #20]
 800cad4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cba0 <_svfiprintf_r+0x1fc>
 800cad8:	2203      	movs	r2, #3
 800cada:	4650      	mov	r0, sl
 800cadc:	7821      	ldrb	r1, [r4, #0]
 800cade:	f000 fdbd 	bl	800d65c <memchr>
 800cae2:	b140      	cbz	r0, 800caf6 <_svfiprintf_r+0x152>
 800cae4:	2340      	movs	r3, #64	; 0x40
 800cae6:	eba0 000a 	sub.w	r0, r0, sl
 800caea:	fa03 f000 	lsl.w	r0, r3, r0
 800caee:	9b04      	ldr	r3, [sp, #16]
 800caf0:	3401      	adds	r4, #1
 800caf2:	4303      	orrs	r3, r0
 800caf4:	9304      	str	r3, [sp, #16]
 800caf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cafa:	2206      	movs	r2, #6
 800cafc:	4825      	ldr	r0, [pc, #148]	; (800cb94 <_svfiprintf_r+0x1f0>)
 800cafe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb02:	f000 fdab 	bl	800d65c <memchr>
 800cb06:	2800      	cmp	r0, #0
 800cb08:	d038      	beq.n	800cb7c <_svfiprintf_r+0x1d8>
 800cb0a:	4b23      	ldr	r3, [pc, #140]	; (800cb98 <_svfiprintf_r+0x1f4>)
 800cb0c:	bb1b      	cbnz	r3, 800cb56 <_svfiprintf_r+0x1b2>
 800cb0e:	9b03      	ldr	r3, [sp, #12]
 800cb10:	3307      	adds	r3, #7
 800cb12:	f023 0307 	bic.w	r3, r3, #7
 800cb16:	3308      	adds	r3, #8
 800cb18:	9303      	str	r3, [sp, #12]
 800cb1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb1c:	4433      	add	r3, r6
 800cb1e:	9309      	str	r3, [sp, #36]	; 0x24
 800cb20:	e767      	b.n	800c9f2 <_svfiprintf_r+0x4e>
 800cb22:	460c      	mov	r4, r1
 800cb24:	2001      	movs	r0, #1
 800cb26:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb2a:	e7a5      	b.n	800ca78 <_svfiprintf_r+0xd4>
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	f04f 0c0a 	mov.w	ip, #10
 800cb32:	4619      	mov	r1, r3
 800cb34:	3401      	adds	r4, #1
 800cb36:	9305      	str	r3, [sp, #20]
 800cb38:	4620      	mov	r0, r4
 800cb3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb3e:	3a30      	subs	r2, #48	; 0x30
 800cb40:	2a09      	cmp	r2, #9
 800cb42:	d903      	bls.n	800cb4c <_svfiprintf_r+0x1a8>
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d0c5      	beq.n	800cad4 <_svfiprintf_r+0x130>
 800cb48:	9105      	str	r1, [sp, #20]
 800cb4a:	e7c3      	b.n	800cad4 <_svfiprintf_r+0x130>
 800cb4c:	4604      	mov	r4, r0
 800cb4e:	2301      	movs	r3, #1
 800cb50:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb54:	e7f0      	b.n	800cb38 <_svfiprintf_r+0x194>
 800cb56:	ab03      	add	r3, sp, #12
 800cb58:	9300      	str	r3, [sp, #0]
 800cb5a:	462a      	mov	r2, r5
 800cb5c:	4638      	mov	r0, r7
 800cb5e:	4b0f      	ldr	r3, [pc, #60]	; (800cb9c <_svfiprintf_r+0x1f8>)
 800cb60:	a904      	add	r1, sp, #16
 800cb62:	f3af 8000 	nop.w
 800cb66:	1c42      	adds	r2, r0, #1
 800cb68:	4606      	mov	r6, r0
 800cb6a:	d1d6      	bne.n	800cb1a <_svfiprintf_r+0x176>
 800cb6c:	89ab      	ldrh	r3, [r5, #12]
 800cb6e:	065b      	lsls	r3, r3, #25
 800cb70:	f53f af2c 	bmi.w	800c9cc <_svfiprintf_r+0x28>
 800cb74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb76:	b01d      	add	sp, #116	; 0x74
 800cb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb7c:	ab03      	add	r3, sp, #12
 800cb7e:	9300      	str	r3, [sp, #0]
 800cb80:	462a      	mov	r2, r5
 800cb82:	4638      	mov	r0, r7
 800cb84:	4b05      	ldr	r3, [pc, #20]	; (800cb9c <_svfiprintf_r+0x1f8>)
 800cb86:	a904      	add	r1, sp, #16
 800cb88:	f000 f9d4 	bl	800cf34 <_printf_i>
 800cb8c:	e7eb      	b.n	800cb66 <_svfiprintf_r+0x1c2>
 800cb8e:	bf00      	nop
 800cb90:	0800db10 	.word	0x0800db10
 800cb94:	0800db1a 	.word	0x0800db1a
 800cb98:	00000000 	.word	0x00000000
 800cb9c:	0800c8ed 	.word	0x0800c8ed
 800cba0:	0800db16 	.word	0x0800db16

0800cba4 <__sfputc_r>:
 800cba4:	6893      	ldr	r3, [r2, #8]
 800cba6:	b410      	push	{r4}
 800cba8:	3b01      	subs	r3, #1
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	6093      	str	r3, [r2, #8]
 800cbae:	da07      	bge.n	800cbc0 <__sfputc_r+0x1c>
 800cbb0:	6994      	ldr	r4, [r2, #24]
 800cbb2:	42a3      	cmp	r3, r4
 800cbb4:	db01      	blt.n	800cbba <__sfputc_r+0x16>
 800cbb6:	290a      	cmp	r1, #10
 800cbb8:	d102      	bne.n	800cbc0 <__sfputc_r+0x1c>
 800cbba:	bc10      	pop	{r4}
 800cbbc:	f000 bb34 	b.w	800d228 <__swbuf_r>
 800cbc0:	6813      	ldr	r3, [r2, #0]
 800cbc2:	1c58      	adds	r0, r3, #1
 800cbc4:	6010      	str	r0, [r2, #0]
 800cbc6:	7019      	strb	r1, [r3, #0]
 800cbc8:	4608      	mov	r0, r1
 800cbca:	bc10      	pop	{r4}
 800cbcc:	4770      	bx	lr

0800cbce <__sfputs_r>:
 800cbce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbd0:	4606      	mov	r6, r0
 800cbd2:	460f      	mov	r7, r1
 800cbd4:	4614      	mov	r4, r2
 800cbd6:	18d5      	adds	r5, r2, r3
 800cbd8:	42ac      	cmp	r4, r5
 800cbda:	d101      	bne.n	800cbe0 <__sfputs_r+0x12>
 800cbdc:	2000      	movs	r0, #0
 800cbde:	e007      	b.n	800cbf0 <__sfputs_r+0x22>
 800cbe0:	463a      	mov	r2, r7
 800cbe2:	4630      	mov	r0, r6
 800cbe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbe8:	f7ff ffdc 	bl	800cba4 <__sfputc_r>
 800cbec:	1c43      	adds	r3, r0, #1
 800cbee:	d1f3      	bne.n	800cbd8 <__sfputs_r+0xa>
 800cbf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cbf4 <_vfiprintf_r>:
 800cbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbf8:	460d      	mov	r5, r1
 800cbfa:	4614      	mov	r4, r2
 800cbfc:	4698      	mov	r8, r3
 800cbfe:	4606      	mov	r6, r0
 800cc00:	b09d      	sub	sp, #116	; 0x74
 800cc02:	b118      	cbz	r0, 800cc0c <_vfiprintf_r+0x18>
 800cc04:	6983      	ldr	r3, [r0, #24]
 800cc06:	b90b      	cbnz	r3, 800cc0c <_vfiprintf_r+0x18>
 800cc08:	f7ff fd76 	bl	800c6f8 <__sinit>
 800cc0c:	4b89      	ldr	r3, [pc, #548]	; (800ce34 <_vfiprintf_r+0x240>)
 800cc0e:	429d      	cmp	r5, r3
 800cc10:	d11b      	bne.n	800cc4a <_vfiprintf_r+0x56>
 800cc12:	6875      	ldr	r5, [r6, #4]
 800cc14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc16:	07d9      	lsls	r1, r3, #31
 800cc18:	d405      	bmi.n	800cc26 <_vfiprintf_r+0x32>
 800cc1a:	89ab      	ldrh	r3, [r5, #12]
 800cc1c:	059a      	lsls	r2, r3, #22
 800cc1e:	d402      	bmi.n	800cc26 <_vfiprintf_r+0x32>
 800cc20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc22:	f7ff fe07 	bl	800c834 <__retarget_lock_acquire_recursive>
 800cc26:	89ab      	ldrh	r3, [r5, #12]
 800cc28:	071b      	lsls	r3, r3, #28
 800cc2a:	d501      	bpl.n	800cc30 <_vfiprintf_r+0x3c>
 800cc2c:	692b      	ldr	r3, [r5, #16]
 800cc2e:	b9eb      	cbnz	r3, 800cc6c <_vfiprintf_r+0x78>
 800cc30:	4629      	mov	r1, r5
 800cc32:	4630      	mov	r0, r6
 800cc34:	f000 fb5c 	bl	800d2f0 <__swsetup_r>
 800cc38:	b1c0      	cbz	r0, 800cc6c <_vfiprintf_r+0x78>
 800cc3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc3c:	07dc      	lsls	r4, r3, #31
 800cc3e:	d50e      	bpl.n	800cc5e <_vfiprintf_r+0x6a>
 800cc40:	f04f 30ff 	mov.w	r0, #4294967295
 800cc44:	b01d      	add	sp, #116	; 0x74
 800cc46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc4a:	4b7b      	ldr	r3, [pc, #492]	; (800ce38 <_vfiprintf_r+0x244>)
 800cc4c:	429d      	cmp	r5, r3
 800cc4e:	d101      	bne.n	800cc54 <_vfiprintf_r+0x60>
 800cc50:	68b5      	ldr	r5, [r6, #8]
 800cc52:	e7df      	b.n	800cc14 <_vfiprintf_r+0x20>
 800cc54:	4b79      	ldr	r3, [pc, #484]	; (800ce3c <_vfiprintf_r+0x248>)
 800cc56:	429d      	cmp	r5, r3
 800cc58:	bf08      	it	eq
 800cc5a:	68f5      	ldreq	r5, [r6, #12]
 800cc5c:	e7da      	b.n	800cc14 <_vfiprintf_r+0x20>
 800cc5e:	89ab      	ldrh	r3, [r5, #12]
 800cc60:	0598      	lsls	r0, r3, #22
 800cc62:	d4ed      	bmi.n	800cc40 <_vfiprintf_r+0x4c>
 800cc64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc66:	f7ff fde6 	bl	800c836 <__retarget_lock_release_recursive>
 800cc6a:	e7e9      	b.n	800cc40 <_vfiprintf_r+0x4c>
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	9309      	str	r3, [sp, #36]	; 0x24
 800cc70:	2320      	movs	r3, #32
 800cc72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc76:	2330      	movs	r3, #48	; 0x30
 800cc78:	f04f 0901 	mov.w	r9, #1
 800cc7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc80:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ce40 <_vfiprintf_r+0x24c>
 800cc84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc88:	4623      	mov	r3, r4
 800cc8a:	469a      	mov	sl, r3
 800cc8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc90:	b10a      	cbz	r2, 800cc96 <_vfiprintf_r+0xa2>
 800cc92:	2a25      	cmp	r2, #37	; 0x25
 800cc94:	d1f9      	bne.n	800cc8a <_vfiprintf_r+0x96>
 800cc96:	ebba 0b04 	subs.w	fp, sl, r4
 800cc9a:	d00b      	beq.n	800ccb4 <_vfiprintf_r+0xc0>
 800cc9c:	465b      	mov	r3, fp
 800cc9e:	4622      	mov	r2, r4
 800cca0:	4629      	mov	r1, r5
 800cca2:	4630      	mov	r0, r6
 800cca4:	f7ff ff93 	bl	800cbce <__sfputs_r>
 800cca8:	3001      	adds	r0, #1
 800ccaa:	f000 80aa 	beq.w	800ce02 <_vfiprintf_r+0x20e>
 800ccae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccb0:	445a      	add	r2, fp
 800ccb2:	9209      	str	r2, [sp, #36]	; 0x24
 800ccb4:	f89a 3000 	ldrb.w	r3, [sl]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	f000 80a2 	beq.w	800ce02 <_vfiprintf_r+0x20e>
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	f04f 32ff 	mov.w	r2, #4294967295
 800ccc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccc8:	f10a 0a01 	add.w	sl, sl, #1
 800cccc:	9304      	str	r3, [sp, #16]
 800ccce:	9307      	str	r3, [sp, #28]
 800ccd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ccd4:	931a      	str	r3, [sp, #104]	; 0x68
 800ccd6:	4654      	mov	r4, sl
 800ccd8:	2205      	movs	r2, #5
 800ccda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccde:	4858      	ldr	r0, [pc, #352]	; (800ce40 <_vfiprintf_r+0x24c>)
 800cce0:	f000 fcbc 	bl	800d65c <memchr>
 800cce4:	9a04      	ldr	r2, [sp, #16]
 800cce6:	b9d8      	cbnz	r0, 800cd20 <_vfiprintf_r+0x12c>
 800cce8:	06d1      	lsls	r1, r2, #27
 800ccea:	bf44      	itt	mi
 800ccec:	2320      	movmi	r3, #32
 800ccee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccf2:	0713      	lsls	r3, r2, #28
 800ccf4:	bf44      	itt	mi
 800ccf6:	232b      	movmi	r3, #43	; 0x2b
 800ccf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccfc:	f89a 3000 	ldrb.w	r3, [sl]
 800cd00:	2b2a      	cmp	r3, #42	; 0x2a
 800cd02:	d015      	beq.n	800cd30 <_vfiprintf_r+0x13c>
 800cd04:	4654      	mov	r4, sl
 800cd06:	2000      	movs	r0, #0
 800cd08:	f04f 0c0a 	mov.w	ip, #10
 800cd0c:	9a07      	ldr	r2, [sp, #28]
 800cd0e:	4621      	mov	r1, r4
 800cd10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd14:	3b30      	subs	r3, #48	; 0x30
 800cd16:	2b09      	cmp	r3, #9
 800cd18:	d94e      	bls.n	800cdb8 <_vfiprintf_r+0x1c4>
 800cd1a:	b1b0      	cbz	r0, 800cd4a <_vfiprintf_r+0x156>
 800cd1c:	9207      	str	r2, [sp, #28]
 800cd1e:	e014      	b.n	800cd4a <_vfiprintf_r+0x156>
 800cd20:	eba0 0308 	sub.w	r3, r0, r8
 800cd24:	fa09 f303 	lsl.w	r3, r9, r3
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	46a2      	mov	sl, r4
 800cd2c:	9304      	str	r3, [sp, #16]
 800cd2e:	e7d2      	b.n	800ccd6 <_vfiprintf_r+0xe2>
 800cd30:	9b03      	ldr	r3, [sp, #12]
 800cd32:	1d19      	adds	r1, r3, #4
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	9103      	str	r1, [sp, #12]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	bfbb      	ittet	lt
 800cd3c:	425b      	neglt	r3, r3
 800cd3e:	f042 0202 	orrlt.w	r2, r2, #2
 800cd42:	9307      	strge	r3, [sp, #28]
 800cd44:	9307      	strlt	r3, [sp, #28]
 800cd46:	bfb8      	it	lt
 800cd48:	9204      	strlt	r2, [sp, #16]
 800cd4a:	7823      	ldrb	r3, [r4, #0]
 800cd4c:	2b2e      	cmp	r3, #46	; 0x2e
 800cd4e:	d10c      	bne.n	800cd6a <_vfiprintf_r+0x176>
 800cd50:	7863      	ldrb	r3, [r4, #1]
 800cd52:	2b2a      	cmp	r3, #42	; 0x2a
 800cd54:	d135      	bne.n	800cdc2 <_vfiprintf_r+0x1ce>
 800cd56:	9b03      	ldr	r3, [sp, #12]
 800cd58:	3402      	adds	r4, #2
 800cd5a:	1d1a      	adds	r2, r3, #4
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	9203      	str	r2, [sp, #12]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	bfb8      	it	lt
 800cd64:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd68:	9305      	str	r3, [sp, #20]
 800cd6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ce50 <_vfiprintf_r+0x25c>
 800cd6e:	2203      	movs	r2, #3
 800cd70:	4650      	mov	r0, sl
 800cd72:	7821      	ldrb	r1, [r4, #0]
 800cd74:	f000 fc72 	bl	800d65c <memchr>
 800cd78:	b140      	cbz	r0, 800cd8c <_vfiprintf_r+0x198>
 800cd7a:	2340      	movs	r3, #64	; 0x40
 800cd7c:	eba0 000a 	sub.w	r0, r0, sl
 800cd80:	fa03 f000 	lsl.w	r0, r3, r0
 800cd84:	9b04      	ldr	r3, [sp, #16]
 800cd86:	3401      	adds	r4, #1
 800cd88:	4303      	orrs	r3, r0
 800cd8a:	9304      	str	r3, [sp, #16]
 800cd8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd90:	2206      	movs	r2, #6
 800cd92:	482c      	ldr	r0, [pc, #176]	; (800ce44 <_vfiprintf_r+0x250>)
 800cd94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd98:	f000 fc60 	bl	800d65c <memchr>
 800cd9c:	2800      	cmp	r0, #0
 800cd9e:	d03f      	beq.n	800ce20 <_vfiprintf_r+0x22c>
 800cda0:	4b29      	ldr	r3, [pc, #164]	; (800ce48 <_vfiprintf_r+0x254>)
 800cda2:	bb1b      	cbnz	r3, 800cdec <_vfiprintf_r+0x1f8>
 800cda4:	9b03      	ldr	r3, [sp, #12]
 800cda6:	3307      	adds	r3, #7
 800cda8:	f023 0307 	bic.w	r3, r3, #7
 800cdac:	3308      	adds	r3, #8
 800cdae:	9303      	str	r3, [sp, #12]
 800cdb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdb2:	443b      	add	r3, r7
 800cdb4:	9309      	str	r3, [sp, #36]	; 0x24
 800cdb6:	e767      	b.n	800cc88 <_vfiprintf_r+0x94>
 800cdb8:	460c      	mov	r4, r1
 800cdba:	2001      	movs	r0, #1
 800cdbc:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdc0:	e7a5      	b.n	800cd0e <_vfiprintf_r+0x11a>
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	f04f 0c0a 	mov.w	ip, #10
 800cdc8:	4619      	mov	r1, r3
 800cdca:	3401      	adds	r4, #1
 800cdcc:	9305      	str	r3, [sp, #20]
 800cdce:	4620      	mov	r0, r4
 800cdd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdd4:	3a30      	subs	r2, #48	; 0x30
 800cdd6:	2a09      	cmp	r2, #9
 800cdd8:	d903      	bls.n	800cde2 <_vfiprintf_r+0x1ee>
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d0c5      	beq.n	800cd6a <_vfiprintf_r+0x176>
 800cdde:	9105      	str	r1, [sp, #20]
 800cde0:	e7c3      	b.n	800cd6a <_vfiprintf_r+0x176>
 800cde2:	4604      	mov	r4, r0
 800cde4:	2301      	movs	r3, #1
 800cde6:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdea:	e7f0      	b.n	800cdce <_vfiprintf_r+0x1da>
 800cdec:	ab03      	add	r3, sp, #12
 800cdee:	9300      	str	r3, [sp, #0]
 800cdf0:	462a      	mov	r2, r5
 800cdf2:	4630      	mov	r0, r6
 800cdf4:	4b15      	ldr	r3, [pc, #84]	; (800ce4c <_vfiprintf_r+0x258>)
 800cdf6:	a904      	add	r1, sp, #16
 800cdf8:	f3af 8000 	nop.w
 800cdfc:	4607      	mov	r7, r0
 800cdfe:	1c78      	adds	r0, r7, #1
 800ce00:	d1d6      	bne.n	800cdb0 <_vfiprintf_r+0x1bc>
 800ce02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce04:	07d9      	lsls	r1, r3, #31
 800ce06:	d405      	bmi.n	800ce14 <_vfiprintf_r+0x220>
 800ce08:	89ab      	ldrh	r3, [r5, #12]
 800ce0a:	059a      	lsls	r2, r3, #22
 800ce0c:	d402      	bmi.n	800ce14 <_vfiprintf_r+0x220>
 800ce0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce10:	f7ff fd11 	bl	800c836 <__retarget_lock_release_recursive>
 800ce14:	89ab      	ldrh	r3, [r5, #12]
 800ce16:	065b      	lsls	r3, r3, #25
 800ce18:	f53f af12 	bmi.w	800cc40 <_vfiprintf_r+0x4c>
 800ce1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce1e:	e711      	b.n	800cc44 <_vfiprintf_r+0x50>
 800ce20:	ab03      	add	r3, sp, #12
 800ce22:	9300      	str	r3, [sp, #0]
 800ce24:	462a      	mov	r2, r5
 800ce26:	4630      	mov	r0, r6
 800ce28:	4b08      	ldr	r3, [pc, #32]	; (800ce4c <_vfiprintf_r+0x258>)
 800ce2a:	a904      	add	r1, sp, #16
 800ce2c:	f000 f882 	bl	800cf34 <_printf_i>
 800ce30:	e7e4      	b.n	800cdfc <_vfiprintf_r+0x208>
 800ce32:	bf00      	nop
 800ce34:	0800dad0 	.word	0x0800dad0
 800ce38:	0800daf0 	.word	0x0800daf0
 800ce3c:	0800dab0 	.word	0x0800dab0
 800ce40:	0800db10 	.word	0x0800db10
 800ce44:	0800db1a 	.word	0x0800db1a
 800ce48:	00000000 	.word	0x00000000
 800ce4c:	0800cbcf 	.word	0x0800cbcf
 800ce50:	0800db16 	.word	0x0800db16

0800ce54 <_printf_common>:
 800ce54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce58:	4616      	mov	r6, r2
 800ce5a:	4699      	mov	r9, r3
 800ce5c:	688a      	ldr	r2, [r1, #8]
 800ce5e:	690b      	ldr	r3, [r1, #16]
 800ce60:	4607      	mov	r7, r0
 800ce62:	4293      	cmp	r3, r2
 800ce64:	bfb8      	it	lt
 800ce66:	4613      	movlt	r3, r2
 800ce68:	6033      	str	r3, [r6, #0]
 800ce6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ce6e:	460c      	mov	r4, r1
 800ce70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ce74:	b10a      	cbz	r2, 800ce7a <_printf_common+0x26>
 800ce76:	3301      	adds	r3, #1
 800ce78:	6033      	str	r3, [r6, #0]
 800ce7a:	6823      	ldr	r3, [r4, #0]
 800ce7c:	0699      	lsls	r1, r3, #26
 800ce7e:	bf42      	ittt	mi
 800ce80:	6833      	ldrmi	r3, [r6, #0]
 800ce82:	3302      	addmi	r3, #2
 800ce84:	6033      	strmi	r3, [r6, #0]
 800ce86:	6825      	ldr	r5, [r4, #0]
 800ce88:	f015 0506 	ands.w	r5, r5, #6
 800ce8c:	d106      	bne.n	800ce9c <_printf_common+0x48>
 800ce8e:	f104 0a19 	add.w	sl, r4, #25
 800ce92:	68e3      	ldr	r3, [r4, #12]
 800ce94:	6832      	ldr	r2, [r6, #0]
 800ce96:	1a9b      	subs	r3, r3, r2
 800ce98:	42ab      	cmp	r3, r5
 800ce9a:	dc28      	bgt.n	800ceee <_printf_common+0x9a>
 800ce9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cea0:	1e13      	subs	r3, r2, #0
 800cea2:	6822      	ldr	r2, [r4, #0]
 800cea4:	bf18      	it	ne
 800cea6:	2301      	movne	r3, #1
 800cea8:	0692      	lsls	r2, r2, #26
 800ceaa:	d42d      	bmi.n	800cf08 <_printf_common+0xb4>
 800ceac:	4649      	mov	r1, r9
 800ceae:	4638      	mov	r0, r7
 800ceb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ceb4:	47c0      	blx	r8
 800ceb6:	3001      	adds	r0, #1
 800ceb8:	d020      	beq.n	800cefc <_printf_common+0xa8>
 800ceba:	6823      	ldr	r3, [r4, #0]
 800cebc:	68e5      	ldr	r5, [r4, #12]
 800cebe:	f003 0306 	and.w	r3, r3, #6
 800cec2:	2b04      	cmp	r3, #4
 800cec4:	bf18      	it	ne
 800cec6:	2500      	movne	r5, #0
 800cec8:	6832      	ldr	r2, [r6, #0]
 800ceca:	f04f 0600 	mov.w	r6, #0
 800cece:	68a3      	ldr	r3, [r4, #8]
 800ced0:	bf08      	it	eq
 800ced2:	1aad      	subeq	r5, r5, r2
 800ced4:	6922      	ldr	r2, [r4, #16]
 800ced6:	bf08      	it	eq
 800ced8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cedc:	4293      	cmp	r3, r2
 800cede:	bfc4      	itt	gt
 800cee0:	1a9b      	subgt	r3, r3, r2
 800cee2:	18ed      	addgt	r5, r5, r3
 800cee4:	341a      	adds	r4, #26
 800cee6:	42b5      	cmp	r5, r6
 800cee8:	d11a      	bne.n	800cf20 <_printf_common+0xcc>
 800ceea:	2000      	movs	r0, #0
 800ceec:	e008      	b.n	800cf00 <_printf_common+0xac>
 800ceee:	2301      	movs	r3, #1
 800cef0:	4652      	mov	r2, sl
 800cef2:	4649      	mov	r1, r9
 800cef4:	4638      	mov	r0, r7
 800cef6:	47c0      	blx	r8
 800cef8:	3001      	adds	r0, #1
 800cefa:	d103      	bne.n	800cf04 <_printf_common+0xb0>
 800cefc:	f04f 30ff 	mov.w	r0, #4294967295
 800cf00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf04:	3501      	adds	r5, #1
 800cf06:	e7c4      	b.n	800ce92 <_printf_common+0x3e>
 800cf08:	2030      	movs	r0, #48	; 0x30
 800cf0a:	18e1      	adds	r1, r4, r3
 800cf0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cf10:	1c5a      	adds	r2, r3, #1
 800cf12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cf16:	4422      	add	r2, r4
 800cf18:	3302      	adds	r3, #2
 800cf1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cf1e:	e7c5      	b.n	800ceac <_printf_common+0x58>
 800cf20:	2301      	movs	r3, #1
 800cf22:	4622      	mov	r2, r4
 800cf24:	4649      	mov	r1, r9
 800cf26:	4638      	mov	r0, r7
 800cf28:	47c0      	blx	r8
 800cf2a:	3001      	adds	r0, #1
 800cf2c:	d0e6      	beq.n	800cefc <_printf_common+0xa8>
 800cf2e:	3601      	adds	r6, #1
 800cf30:	e7d9      	b.n	800cee6 <_printf_common+0x92>
	...

0800cf34 <_printf_i>:
 800cf34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf38:	460c      	mov	r4, r1
 800cf3a:	7e27      	ldrb	r7, [r4, #24]
 800cf3c:	4691      	mov	r9, r2
 800cf3e:	2f78      	cmp	r7, #120	; 0x78
 800cf40:	4680      	mov	r8, r0
 800cf42:	469a      	mov	sl, r3
 800cf44:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cf46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf4a:	d807      	bhi.n	800cf5c <_printf_i+0x28>
 800cf4c:	2f62      	cmp	r7, #98	; 0x62
 800cf4e:	d80a      	bhi.n	800cf66 <_printf_i+0x32>
 800cf50:	2f00      	cmp	r7, #0
 800cf52:	f000 80d9 	beq.w	800d108 <_printf_i+0x1d4>
 800cf56:	2f58      	cmp	r7, #88	; 0x58
 800cf58:	f000 80a4 	beq.w	800d0a4 <_printf_i+0x170>
 800cf5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cf60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cf64:	e03a      	b.n	800cfdc <_printf_i+0xa8>
 800cf66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cf6a:	2b15      	cmp	r3, #21
 800cf6c:	d8f6      	bhi.n	800cf5c <_printf_i+0x28>
 800cf6e:	a001      	add	r0, pc, #4	; (adr r0, 800cf74 <_printf_i+0x40>)
 800cf70:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cf74:	0800cfcd 	.word	0x0800cfcd
 800cf78:	0800cfe1 	.word	0x0800cfe1
 800cf7c:	0800cf5d 	.word	0x0800cf5d
 800cf80:	0800cf5d 	.word	0x0800cf5d
 800cf84:	0800cf5d 	.word	0x0800cf5d
 800cf88:	0800cf5d 	.word	0x0800cf5d
 800cf8c:	0800cfe1 	.word	0x0800cfe1
 800cf90:	0800cf5d 	.word	0x0800cf5d
 800cf94:	0800cf5d 	.word	0x0800cf5d
 800cf98:	0800cf5d 	.word	0x0800cf5d
 800cf9c:	0800cf5d 	.word	0x0800cf5d
 800cfa0:	0800d0ef 	.word	0x0800d0ef
 800cfa4:	0800d011 	.word	0x0800d011
 800cfa8:	0800d0d1 	.word	0x0800d0d1
 800cfac:	0800cf5d 	.word	0x0800cf5d
 800cfb0:	0800cf5d 	.word	0x0800cf5d
 800cfb4:	0800d111 	.word	0x0800d111
 800cfb8:	0800cf5d 	.word	0x0800cf5d
 800cfbc:	0800d011 	.word	0x0800d011
 800cfc0:	0800cf5d 	.word	0x0800cf5d
 800cfc4:	0800cf5d 	.word	0x0800cf5d
 800cfc8:	0800d0d9 	.word	0x0800d0d9
 800cfcc:	680b      	ldr	r3, [r1, #0]
 800cfce:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cfd2:	1d1a      	adds	r2, r3, #4
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	600a      	str	r2, [r1, #0]
 800cfd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cfdc:	2301      	movs	r3, #1
 800cfde:	e0a4      	b.n	800d12a <_printf_i+0x1f6>
 800cfe0:	6825      	ldr	r5, [r4, #0]
 800cfe2:	6808      	ldr	r0, [r1, #0]
 800cfe4:	062e      	lsls	r6, r5, #24
 800cfe6:	f100 0304 	add.w	r3, r0, #4
 800cfea:	d50a      	bpl.n	800d002 <_printf_i+0xce>
 800cfec:	6805      	ldr	r5, [r0, #0]
 800cfee:	600b      	str	r3, [r1, #0]
 800cff0:	2d00      	cmp	r5, #0
 800cff2:	da03      	bge.n	800cffc <_printf_i+0xc8>
 800cff4:	232d      	movs	r3, #45	; 0x2d
 800cff6:	426d      	negs	r5, r5
 800cff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cffc:	230a      	movs	r3, #10
 800cffe:	485e      	ldr	r0, [pc, #376]	; (800d178 <_printf_i+0x244>)
 800d000:	e019      	b.n	800d036 <_printf_i+0x102>
 800d002:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d006:	6805      	ldr	r5, [r0, #0]
 800d008:	600b      	str	r3, [r1, #0]
 800d00a:	bf18      	it	ne
 800d00c:	b22d      	sxthne	r5, r5
 800d00e:	e7ef      	b.n	800cff0 <_printf_i+0xbc>
 800d010:	680b      	ldr	r3, [r1, #0]
 800d012:	6825      	ldr	r5, [r4, #0]
 800d014:	1d18      	adds	r0, r3, #4
 800d016:	6008      	str	r0, [r1, #0]
 800d018:	0628      	lsls	r0, r5, #24
 800d01a:	d501      	bpl.n	800d020 <_printf_i+0xec>
 800d01c:	681d      	ldr	r5, [r3, #0]
 800d01e:	e002      	b.n	800d026 <_printf_i+0xf2>
 800d020:	0669      	lsls	r1, r5, #25
 800d022:	d5fb      	bpl.n	800d01c <_printf_i+0xe8>
 800d024:	881d      	ldrh	r5, [r3, #0]
 800d026:	2f6f      	cmp	r7, #111	; 0x6f
 800d028:	bf0c      	ite	eq
 800d02a:	2308      	moveq	r3, #8
 800d02c:	230a      	movne	r3, #10
 800d02e:	4852      	ldr	r0, [pc, #328]	; (800d178 <_printf_i+0x244>)
 800d030:	2100      	movs	r1, #0
 800d032:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d036:	6866      	ldr	r6, [r4, #4]
 800d038:	2e00      	cmp	r6, #0
 800d03a:	bfa8      	it	ge
 800d03c:	6821      	ldrge	r1, [r4, #0]
 800d03e:	60a6      	str	r6, [r4, #8]
 800d040:	bfa4      	itt	ge
 800d042:	f021 0104 	bicge.w	r1, r1, #4
 800d046:	6021      	strge	r1, [r4, #0]
 800d048:	b90d      	cbnz	r5, 800d04e <_printf_i+0x11a>
 800d04a:	2e00      	cmp	r6, #0
 800d04c:	d04d      	beq.n	800d0ea <_printf_i+0x1b6>
 800d04e:	4616      	mov	r6, r2
 800d050:	fbb5 f1f3 	udiv	r1, r5, r3
 800d054:	fb03 5711 	mls	r7, r3, r1, r5
 800d058:	5dc7      	ldrb	r7, [r0, r7]
 800d05a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d05e:	462f      	mov	r7, r5
 800d060:	42bb      	cmp	r3, r7
 800d062:	460d      	mov	r5, r1
 800d064:	d9f4      	bls.n	800d050 <_printf_i+0x11c>
 800d066:	2b08      	cmp	r3, #8
 800d068:	d10b      	bne.n	800d082 <_printf_i+0x14e>
 800d06a:	6823      	ldr	r3, [r4, #0]
 800d06c:	07df      	lsls	r7, r3, #31
 800d06e:	d508      	bpl.n	800d082 <_printf_i+0x14e>
 800d070:	6923      	ldr	r3, [r4, #16]
 800d072:	6861      	ldr	r1, [r4, #4]
 800d074:	4299      	cmp	r1, r3
 800d076:	bfde      	ittt	le
 800d078:	2330      	movle	r3, #48	; 0x30
 800d07a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d07e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d082:	1b92      	subs	r2, r2, r6
 800d084:	6122      	str	r2, [r4, #16]
 800d086:	464b      	mov	r3, r9
 800d088:	4621      	mov	r1, r4
 800d08a:	4640      	mov	r0, r8
 800d08c:	f8cd a000 	str.w	sl, [sp]
 800d090:	aa03      	add	r2, sp, #12
 800d092:	f7ff fedf 	bl	800ce54 <_printf_common>
 800d096:	3001      	adds	r0, #1
 800d098:	d14c      	bne.n	800d134 <_printf_i+0x200>
 800d09a:	f04f 30ff 	mov.w	r0, #4294967295
 800d09e:	b004      	add	sp, #16
 800d0a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0a4:	4834      	ldr	r0, [pc, #208]	; (800d178 <_printf_i+0x244>)
 800d0a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d0aa:	680e      	ldr	r6, [r1, #0]
 800d0ac:	6823      	ldr	r3, [r4, #0]
 800d0ae:	f856 5b04 	ldr.w	r5, [r6], #4
 800d0b2:	061f      	lsls	r7, r3, #24
 800d0b4:	600e      	str	r6, [r1, #0]
 800d0b6:	d514      	bpl.n	800d0e2 <_printf_i+0x1ae>
 800d0b8:	07d9      	lsls	r1, r3, #31
 800d0ba:	bf44      	itt	mi
 800d0bc:	f043 0320 	orrmi.w	r3, r3, #32
 800d0c0:	6023      	strmi	r3, [r4, #0]
 800d0c2:	b91d      	cbnz	r5, 800d0cc <_printf_i+0x198>
 800d0c4:	6823      	ldr	r3, [r4, #0]
 800d0c6:	f023 0320 	bic.w	r3, r3, #32
 800d0ca:	6023      	str	r3, [r4, #0]
 800d0cc:	2310      	movs	r3, #16
 800d0ce:	e7af      	b.n	800d030 <_printf_i+0xfc>
 800d0d0:	6823      	ldr	r3, [r4, #0]
 800d0d2:	f043 0320 	orr.w	r3, r3, #32
 800d0d6:	6023      	str	r3, [r4, #0]
 800d0d8:	2378      	movs	r3, #120	; 0x78
 800d0da:	4828      	ldr	r0, [pc, #160]	; (800d17c <_printf_i+0x248>)
 800d0dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d0e0:	e7e3      	b.n	800d0aa <_printf_i+0x176>
 800d0e2:	065e      	lsls	r6, r3, #25
 800d0e4:	bf48      	it	mi
 800d0e6:	b2ad      	uxthmi	r5, r5
 800d0e8:	e7e6      	b.n	800d0b8 <_printf_i+0x184>
 800d0ea:	4616      	mov	r6, r2
 800d0ec:	e7bb      	b.n	800d066 <_printf_i+0x132>
 800d0ee:	680b      	ldr	r3, [r1, #0]
 800d0f0:	6826      	ldr	r6, [r4, #0]
 800d0f2:	1d1d      	adds	r5, r3, #4
 800d0f4:	6960      	ldr	r0, [r4, #20]
 800d0f6:	600d      	str	r5, [r1, #0]
 800d0f8:	0635      	lsls	r5, r6, #24
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	d501      	bpl.n	800d102 <_printf_i+0x1ce>
 800d0fe:	6018      	str	r0, [r3, #0]
 800d100:	e002      	b.n	800d108 <_printf_i+0x1d4>
 800d102:	0671      	lsls	r1, r6, #25
 800d104:	d5fb      	bpl.n	800d0fe <_printf_i+0x1ca>
 800d106:	8018      	strh	r0, [r3, #0]
 800d108:	2300      	movs	r3, #0
 800d10a:	4616      	mov	r6, r2
 800d10c:	6123      	str	r3, [r4, #16]
 800d10e:	e7ba      	b.n	800d086 <_printf_i+0x152>
 800d110:	680b      	ldr	r3, [r1, #0]
 800d112:	1d1a      	adds	r2, r3, #4
 800d114:	600a      	str	r2, [r1, #0]
 800d116:	681e      	ldr	r6, [r3, #0]
 800d118:	2100      	movs	r1, #0
 800d11a:	4630      	mov	r0, r6
 800d11c:	6862      	ldr	r2, [r4, #4]
 800d11e:	f000 fa9d 	bl	800d65c <memchr>
 800d122:	b108      	cbz	r0, 800d128 <_printf_i+0x1f4>
 800d124:	1b80      	subs	r0, r0, r6
 800d126:	6060      	str	r0, [r4, #4]
 800d128:	6863      	ldr	r3, [r4, #4]
 800d12a:	6123      	str	r3, [r4, #16]
 800d12c:	2300      	movs	r3, #0
 800d12e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d132:	e7a8      	b.n	800d086 <_printf_i+0x152>
 800d134:	4632      	mov	r2, r6
 800d136:	4649      	mov	r1, r9
 800d138:	4640      	mov	r0, r8
 800d13a:	6923      	ldr	r3, [r4, #16]
 800d13c:	47d0      	blx	sl
 800d13e:	3001      	adds	r0, #1
 800d140:	d0ab      	beq.n	800d09a <_printf_i+0x166>
 800d142:	6823      	ldr	r3, [r4, #0]
 800d144:	079b      	lsls	r3, r3, #30
 800d146:	d413      	bmi.n	800d170 <_printf_i+0x23c>
 800d148:	68e0      	ldr	r0, [r4, #12]
 800d14a:	9b03      	ldr	r3, [sp, #12]
 800d14c:	4298      	cmp	r0, r3
 800d14e:	bfb8      	it	lt
 800d150:	4618      	movlt	r0, r3
 800d152:	e7a4      	b.n	800d09e <_printf_i+0x16a>
 800d154:	2301      	movs	r3, #1
 800d156:	4632      	mov	r2, r6
 800d158:	4649      	mov	r1, r9
 800d15a:	4640      	mov	r0, r8
 800d15c:	47d0      	blx	sl
 800d15e:	3001      	adds	r0, #1
 800d160:	d09b      	beq.n	800d09a <_printf_i+0x166>
 800d162:	3501      	adds	r5, #1
 800d164:	68e3      	ldr	r3, [r4, #12]
 800d166:	9903      	ldr	r1, [sp, #12]
 800d168:	1a5b      	subs	r3, r3, r1
 800d16a:	42ab      	cmp	r3, r5
 800d16c:	dcf2      	bgt.n	800d154 <_printf_i+0x220>
 800d16e:	e7eb      	b.n	800d148 <_printf_i+0x214>
 800d170:	2500      	movs	r5, #0
 800d172:	f104 0619 	add.w	r6, r4, #25
 800d176:	e7f5      	b.n	800d164 <_printf_i+0x230>
 800d178:	0800db21 	.word	0x0800db21
 800d17c:	0800db32 	.word	0x0800db32

0800d180 <_sbrk_r>:
 800d180:	b538      	push	{r3, r4, r5, lr}
 800d182:	2300      	movs	r3, #0
 800d184:	4d05      	ldr	r5, [pc, #20]	; (800d19c <_sbrk_r+0x1c>)
 800d186:	4604      	mov	r4, r0
 800d188:	4608      	mov	r0, r1
 800d18a:	602b      	str	r3, [r5, #0]
 800d18c:	f7f6 fd76 	bl	8003c7c <_sbrk>
 800d190:	1c43      	adds	r3, r0, #1
 800d192:	d102      	bne.n	800d19a <_sbrk_r+0x1a>
 800d194:	682b      	ldr	r3, [r5, #0]
 800d196:	b103      	cbz	r3, 800d19a <_sbrk_r+0x1a>
 800d198:	6023      	str	r3, [r4, #0]
 800d19a:	bd38      	pop	{r3, r4, r5, pc}
 800d19c:	200015bc 	.word	0x200015bc

0800d1a0 <__sread>:
 800d1a0:	b510      	push	{r4, lr}
 800d1a2:	460c      	mov	r4, r1
 800d1a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1a8:	f000 fafe 	bl	800d7a8 <_read_r>
 800d1ac:	2800      	cmp	r0, #0
 800d1ae:	bfab      	itete	ge
 800d1b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d1b2:	89a3      	ldrhlt	r3, [r4, #12]
 800d1b4:	181b      	addge	r3, r3, r0
 800d1b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d1ba:	bfac      	ite	ge
 800d1bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800d1be:	81a3      	strhlt	r3, [r4, #12]
 800d1c0:	bd10      	pop	{r4, pc}

0800d1c2 <__swrite>:
 800d1c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1c6:	461f      	mov	r7, r3
 800d1c8:	898b      	ldrh	r3, [r1, #12]
 800d1ca:	4605      	mov	r5, r0
 800d1cc:	05db      	lsls	r3, r3, #23
 800d1ce:	460c      	mov	r4, r1
 800d1d0:	4616      	mov	r6, r2
 800d1d2:	d505      	bpl.n	800d1e0 <__swrite+0x1e>
 800d1d4:	2302      	movs	r3, #2
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1dc:	f000 f9c8 	bl	800d570 <_lseek_r>
 800d1e0:	89a3      	ldrh	r3, [r4, #12]
 800d1e2:	4632      	mov	r2, r6
 800d1e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d1e8:	81a3      	strh	r3, [r4, #12]
 800d1ea:	4628      	mov	r0, r5
 800d1ec:	463b      	mov	r3, r7
 800d1ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1f6:	f000 b869 	b.w	800d2cc <_write_r>

0800d1fa <__sseek>:
 800d1fa:	b510      	push	{r4, lr}
 800d1fc:	460c      	mov	r4, r1
 800d1fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d202:	f000 f9b5 	bl	800d570 <_lseek_r>
 800d206:	1c43      	adds	r3, r0, #1
 800d208:	89a3      	ldrh	r3, [r4, #12]
 800d20a:	bf15      	itete	ne
 800d20c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d20e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d212:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d216:	81a3      	strheq	r3, [r4, #12]
 800d218:	bf18      	it	ne
 800d21a:	81a3      	strhne	r3, [r4, #12]
 800d21c:	bd10      	pop	{r4, pc}

0800d21e <__sclose>:
 800d21e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d222:	f000 b8d3 	b.w	800d3cc <_close_r>
	...

0800d228 <__swbuf_r>:
 800d228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d22a:	460e      	mov	r6, r1
 800d22c:	4614      	mov	r4, r2
 800d22e:	4605      	mov	r5, r0
 800d230:	b118      	cbz	r0, 800d23a <__swbuf_r+0x12>
 800d232:	6983      	ldr	r3, [r0, #24]
 800d234:	b90b      	cbnz	r3, 800d23a <__swbuf_r+0x12>
 800d236:	f7ff fa5f 	bl	800c6f8 <__sinit>
 800d23a:	4b21      	ldr	r3, [pc, #132]	; (800d2c0 <__swbuf_r+0x98>)
 800d23c:	429c      	cmp	r4, r3
 800d23e:	d12b      	bne.n	800d298 <__swbuf_r+0x70>
 800d240:	686c      	ldr	r4, [r5, #4]
 800d242:	69a3      	ldr	r3, [r4, #24]
 800d244:	60a3      	str	r3, [r4, #8]
 800d246:	89a3      	ldrh	r3, [r4, #12]
 800d248:	071a      	lsls	r2, r3, #28
 800d24a:	d52f      	bpl.n	800d2ac <__swbuf_r+0x84>
 800d24c:	6923      	ldr	r3, [r4, #16]
 800d24e:	b36b      	cbz	r3, 800d2ac <__swbuf_r+0x84>
 800d250:	6923      	ldr	r3, [r4, #16]
 800d252:	6820      	ldr	r0, [r4, #0]
 800d254:	b2f6      	uxtb	r6, r6
 800d256:	1ac0      	subs	r0, r0, r3
 800d258:	6963      	ldr	r3, [r4, #20]
 800d25a:	4637      	mov	r7, r6
 800d25c:	4283      	cmp	r3, r0
 800d25e:	dc04      	bgt.n	800d26a <__swbuf_r+0x42>
 800d260:	4621      	mov	r1, r4
 800d262:	4628      	mov	r0, r5
 800d264:	f000 f948 	bl	800d4f8 <_fflush_r>
 800d268:	bb30      	cbnz	r0, 800d2b8 <__swbuf_r+0x90>
 800d26a:	68a3      	ldr	r3, [r4, #8]
 800d26c:	3001      	adds	r0, #1
 800d26e:	3b01      	subs	r3, #1
 800d270:	60a3      	str	r3, [r4, #8]
 800d272:	6823      	ldr	r3, [r4, #0]
 800d274:	1c5a      	adds	r2, r3, #1
 800d276:	6022      	str	r2, [r4, #0]
 800d278:	701e      	strb	r6, [r3, #0]
 800d27a:	6963      	ldr	r3, [r4, #20]
 800d27c:	4283      	cmp	r3, r0
 800d27e:	d004      	beq.n	800d28a <__swbuf_r+0x62>
 800d280:	89a3      	ldrh	r3, [r4, #12]
 800d282:	07db      	lsls	r3, r3, #31
 800d284:	d506      	bpl.n	800d294 <__swbuf_r+0x6c>
 800d286:	2e0a      	cmp	r6, #10
 800d288:	d104      	bne.n	800d294 <__swbuf_r+0x6c>
 800d28a:	4621      	mov	r1, r4
 800d28c:	4628      	mov	r0, r5
 800d28e:	f000 f933 	bl	800d4f8 <_fflush_r>
 800d292:	b988      	cbnz	r0, 800d2b8 <__swbuf_r+0x90>
 800d294:	4638      	mov	r0, r7
 800d296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d298:	4b0a      	ldr	r3, [pc, #40]	; (800d2c4 <__swbuf_r+0x9c>)
 800d29a:	429c      	cmp	r4, r3
 800d29c:	d101      	bne.n	800d2a2 <__swbuf_r+0x7a>
 800d29e:	68ac      	ldr	r4, [r5, #8]
 800d2a0:	e7cf      	b.n	800d242 <__swbuf_r+0x1a>
 800d2a2:	4b09      	ldr	r3, [pc, #36]	; (800d2c8 <__swbuf_r+0xa0>)
 800d2a4:	429c      	cmp	r4, r3
 800d2a6:	bf08      	it	eq
 800d2a8:	68ec      	ldreq	r4, [r5, #12]
 800d2aa:	e7ca      	b.n	800d242 <__swbuf_r+0x1a>
 800d2ac:	4621      	mov	r1, r4
 800d2ae:	4628      	mov	r0, r5
 800d2b0:	f000 f81e 	bl	800d2f0 <__swsetup_r>
 800d2b4:	2800      	cmp	r0, #0
 800d2b6:	d0cb      	beq.n	800d250 <__swbuf_r+0x28>
 800d2b8:	f04f 37ff 	mov.w	r7, #4294967295
 800d2bc:	e7ea      	b.n	800d294 <__swbuf_r+0x6c>
 800d2be:	bf00      	nop
 800d2c0:	0800dad0 	.word	0x0800dad0
 800d2c4:	0800daf0 	.word	0x0800daf0
 800d2c8:	0800dab0 	.word	0x0800dab0

0800d2cc <_write_r>:
 800d2cc:	b538      	push	{r3, r4, r5, lr}
 800d2ce:	4604      	mov	r4, r0
 800d2d0:	4608      	mov	r0, r1
 800d2d2:	4611      	mov	r1, r2
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	4d05      	ldr	r5, [pc, #20]	; (800d2ec <_write_r+0x20>)
 800d2d8:	602a      	str	r2, [r5, #0]
 800d2da:	461a      	mov	r2, r3
 800d2dc:	f7f4 ffc2 	bl	8002264 <_write>
 800d2e0:	1c43      	adds	r3, r0, #1
 800d2e2:	d102      	bne.n	800d2ea <_write_r+0x1e>
 800d2e4:	682b      	ldr	r3, [r5, #0]
 800d2e6:	b103      	cbz	r3, 800d2ea <_write_r+0x1e>
 800d2e8:	6023      	str	r3, [r4, #0]
 800d2ea:	bd38      	pop	{r3, r4, r5, pc}
 800d2ec:	200015bc 	.word	0x200015bc

0800d2f0 <__swsetup_r>:
 800d2f0:	4b32      	ldr	r3, [pc, #200]	; (800d3bc <__swsetup_r+0xcc>)
 800d2f2:	b570      	push	{r4, r5, r6, lr}
 800d2f4:	681d      	ldr	r5, [r3, #0]
 800d2f6:	4606      	mov	r6, r0
 800d2f8:	460c      	mov	r4, r1
 800d2fa:	b125      	cbz	r5, 800d306 <__swsetup_r+0x16>
 800d2fc:	69ab      	ldr	r3, [r5, #24]
 800d2fe:	b913      	cbnz	r3, 800d306 <__swsetup_r+0x16>
 800d300:	4628      	mov	r0, r5
 800d302:	f7ff f9f9 	bl	800c6f8 <__sinit>
 800d306:	4b2e      	ldr	r3, [pc, #184]	; (800d3c0 <__swsetup_r+0xd0>)
 800d308:	429c      	cmp	r4, r3
 800d30a:	d10f      	bne.n	800d32c <__swsetup_r+0x3c>
 800d30c:	686c      	ldr	r4, [r5, #4]
 800d30e:	89a3      	ldrh	r3, [r4, #12]
 800d310:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d314:	0719      	lsls	r1, r3, #28
 800d316:	d42c      	bmi.n	800d372 <__swsetup_r+0x82>
 800d318:	06dd      	lsls	r5, r3, #27
 800d31a:	d411      	bmi.n	800d340 <__swsetup_r+0x50>
 800d31c:	2309      	movs	r3, #9
 800d31e:	6033      	str	r3, [r6, #0]
 800d320:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d324:	f04f 30ff 	mov.w	r0, #4294967295
 800d328:	81a3      	strh	r3, [r4, #12]
 800d32a:	e03e      	b.n	800d3aa <__swsetup_r+0xba>
 800d32c:	4b25      	ldr	r3, [pc, #148]	; (800d3c4 <__swsetup_r+0xd4>)
 800d32e:	429c      	cmp	r4, r3
 800d330:	d101      	bne.n	800d336 <__swsetup_r+0x46>
 800d332:	68ac      	ldr	r4, [r5, #8]
 800d334:	e7eb      	b.n	800d30e <__swsetup_r+0x1e>
 800d336:	4b24      	ldr	r3, [pc, #144]	; (800d3c8 <__swsetup_r+0xd8>)
 800d338:	429c      	cmp	r4, r3
 800d33a:	bf08      	it	eq
 800d33c:	68ec      	ldreq	r4, [r5, #12]
 800d33e:	e7e6      	b.n	800d30e <__swsetup_r+0x1e>
 800d340:	0758      	lsls	r0, r3, #29
 800d342:	d512      	bpl.n	800d36a <__swsetup_r+0x7a>
 800d344:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d346:	b141      	cbz	r1, 800d35a <__swsetup_r+0x6a>
 800d348:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d34c:	4299      	cmp	r1, r3
 800d34e:	d002      	beq.n	800d356 <__swsetup_r+0x66>
 800d350:	4630      	mov	r0, r6
 800d352:	f000 f9b7 	bl	800d6c4 <_free_r>
 800d356:	2300      	movs	r3, #0
 800d358:	6363      	str	r3, [r4, #52]	; 0x34
 800d35a:	89a3      	ldrh	r3, [r4, #12]
 800d35c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d360:	81a3      	strh	r3, [r4, #12]
 800d362:	2300      	movs	r3, #0
 800d364:	6063      	str	r3, [r4, #4]
 800d366:	6923      	ldr	r3, [r4, #16]
 800d368:	6023      	str	r3, [r4, #0]
 800d36a:	89a3      	ldrh	r3, [r4, #12]
 800d36c:	f043 0308 	orr.w	r3, r3, #8
 800d370:	81a3      	strh	r3, [r4, #12]
 800d372:	6923      	ldr	r3, [r4, #16]
 800d374:	b94b      	cbnz	r3, 800d38a <__swsetup_r+0x9a>
 800d376:	89a3      	ldrh	r3, [r4, #12]
 800d378:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d37c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d380:	d003      	beq.n	800d38a <__swsetup_r+0x9a>
 800d382:	4621      	mov	r1, r4
 800d384:	4630      	mov	r0, r6
 800d386:	f000 f929 	bl	800d5dc <__smakebuf_r>
 800d38a:	89a0      	ldrh	r0, [r4, #12]
 800d38c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d390:	f010 0301 	ands.w	r3, r0, #1
 800d394:	d00a      	beq.n	800d3ac <__swsetup_r+0xbc>
 800d396:	2300      	movs	r3, #0
 800d398:	60a3      	str	r3, [r4, #8]
 800d39a:	6963      	ldr	r3, [r4, #20]
 800d39c:	425b      	negs	r3, r3
 800d39e:	61a3      	str	r3, [r4, #24]
 800d3a0:	6923      	ldr	r3, [r4, #16]
 800d3a2:	b943      	cbnz	r3, 800d3b6 <__swsetup_r+0xc6>
 800d3a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d3a8:	d1ba      	bne.n	800d320 <__swsetup_r+0x30>
 800d3aa:	bd70      	pop	{r4, r5, r6, pc}
 800d3ac:	0781      	lsls	r1, r0, #30
 800d3ae:	bf58      	it	pl
 800d3b0:	6963      	ldrpl	r3, [r4, #20]
 800d3b2:	60a3      	str	r3, [r4, #8]
 800d3b4:	e7f4      	b.n	800d3a0 <__swsetup_r+0xb0>
 800d3b6:	2000      	movs	r0, #0
 800d3b8:	e7f7      	b.n	800d3aa <__swsetup_r+0xba>
 800d3ba:	bf00      	nop
 800d3bc:	20000190 	.word	0x20000190
 800d3c0:	0800dad0 	.word	0x0800dad0
 800d3c4:	0800daf0 	.word	0x0800daf0
 800d3c8:	0800dab0 	.word	0x0800dab0

0800d3cc <_close_r>:
 800d3cc:	b538      	push	{r3, r4, r5, lr}
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	4d05      	ldr	r5, [pc, #20]	; (800d3e8 <_close_r+0x1c>)
 800d3d2:	4604      	mov	r4, r0
 800d3d4:	4608      	mov	r0, r1
 800d3d6:	602b      	str	r3, [r5, #0]
 800d3d8:	f7f6 fc1f 	bl	8003c1a <_close>
 800d3dc:	1c43      	adds	r3, r0, #1
 800d3de:	d102      	bne.n	800d3e6 <_close_r+0x1a>
 800d3e0:	682b      	ldr	r3, [r5, #0]
 800d3e2:	b103      	cbz	r3, 800d3e6 <_close_r+0x1a>
 800d3e4:	6023      	str	r3, [r4, #0]
 800d3e6:	bd38      	pop	{r3, r4, r5, pc}
 800d3e8:	200015bc 	.word	0x200015bc

0800d3ec <__sflush_r>:
 800d3ec:	898a      	ldrh	r2, [r1, #12]
 800d3ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3f2:	4605      	mov	r5, r0
 800d3f4:	0710      	lsls	r0, r2, #28
 800d3f6:	460c      	mov	r4, r1
 800d3f8:	d458      	bmi.n	800d4ac <__sflush_r+0xc0>
 800d3fa:	684b      	ldr	r3, [r1, #4]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	dc05      	bgt.n	800d40c <__sflush_r+0x20>
 800d400:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d402:	2b00      	cmp	r3, #0
 800d404:	dc02      	bgt.n	800d40c <__sflush_r+0x20>
 800d406:	2000      	movs	r0, #0
 800d408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d40c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d40e:	2e00      	cmp	r6, #0
 800d410:	d0f9      	beq.n	800d406 <__sflush_r+0x1a>
 800d412:	2300      	movs	r3, #0
 800d414:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d418:	682f      	ldr	r7, [r5, #0]
 800d41a:	602b      	str	r3, [r5, #0]
 800d41c:	d032      	beq.n	800d484 <__sflush_r+0x98>
 800d41e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d420:	89a3      	ldrh	r3, [r4, #12]
 800d422:	075a      	lsls	r2, r3, #29
 800d424:	d505      	bpl.n	800d432 <__sflush_r+0x46>
 800d426:	6863      	ldr	r3, [r4, #4]
 800d428:	1ac0      	subs	r0, r0, r3
 800d42a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d42c:	b10b      	cbz	r3, 800d432 <__sflush_r+0x46>
 800d42e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d430:	1ac0      	subs	r0, r0, r3
 800d432:	2300      	movs	r3, #0
 800d434:	4602      	mov	r2, r0
 800d436:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d438:	4628      	mov	r0, r5
 800d43a:	6a21      	ldr	r1, [r4, #32]
 800d43c:	47b0      	blx	r6
 800d43e:	1c43      	adds	r3, r0, #1
 800d440:	89a3      	ldrh	r3, [r4, #12]
 800d442:	d106      	bne.n	800d452 <__sflush_r+0x66>
 800d444:	6829      	ldr	r1, [r5, #0]
 800d446:	291d      	cmp	r1, #29
 800d448:	d82c      	bhi.n	800d4a4 <__sflush_r+0xb8>
 800d44a:	4a2a      	ldr	r2, [pc, #168]	; (800d4f4 <__sflush_r+0x108>)
 800d44c:	40ca      	lsrs	r2, r1
 800d44e:	07d6      	lsls	r6, r2, #31
 800d450:	d528      	bpl.n	800d4a4 <__sflush_r+0xb8>
 800d452:	2200      	movs	r2, #0
 800d454:	6062      	str	r2, [r4, #4]
 800d456:	6922      	ldr	r2, [r4, #16]
 800d458:	04d9      	lsls	r1, r3, #19
 800d45a:	6022      	str	r2, [r4, #0]
 800d45c:	d504      	bpl.n	800d468 <__sflush_r+0x7c>
 800d45e:	1c42      	adds	r2, r0, #1
 800d460:	d101      	bne.n	800d466 <__sflush_r+0x7a>
 800d462:	682b      	ldr	r3, [r5, #0]
 800d464:	b903      	cbnz	r3, 800d468 <__sflush_r+0x7c>
 800d466:	6560      	str	r0, [r4, #84]	; 0x54
 800d468:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d46a:	602f      	str	r7, [r5, #0]
 800d46c:	2900      	cmp	r1, #0
 800d46e:	d0ca      	beq.n	800d406 <__sflush_r+0x1a>
 800d470:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d474:	4299      	cmp	r1, r3
 800d476:	d002      	beq.n	800d47e <__sflush_r+0x92>
 800d478:	4628      	mov	r0, r5
 800d47a:	f000 f923 	bl	800d6c4 <_free_r>
 800d47e:	2000      	movs	r0, #0
 800d480:	6360      	str	r0, [r4, #52]	; 0x34
 800d482:	e7c1      	b.n	800d408 <__sflush_r+0x1c>
 800d484:	6a21      	ldr	r1, [r4, #32]
 800d486:	2301      	movs	r3, #1
 800d488:	4628      	mov	r0, r5
 800d48a:	47b0      	blx	r6
 800d48c:	1c41      	adds	r1, r0, #1
 800d48e:	d1c7      	bne.n	800d420 <__sflush_r+0x34>
 800d490:	682b      	ldr	r3, [r5, #0]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d0c4      	beq.n	800d420 <__sflush_r+0x34>
 800d496:	2b1d      	cmp	r3, #29
 800d498:	d001      	beq.n	800d49e <__sflush_r+0xb2>
 800d49a:	2b16      	cmp	r3, #22
 800d49c:	d101      	bne.n	800d4a2 <__sflush_r+0xb6>
 800d49e:	602f      	str	r7, [r5, #0]
 800d4a0:	e7b1      	b.n	800d406 <__sflush_r+0x1a>
 800d4a2:	89a3      	ldrh	r3, [r4, #12]
 800d4a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4a8:	81a3      	strh	r3, [r4, #12]
 800d4aa:	e7ad      	b.n	800d408 <__sflush_r+0x1c>
 800d4ac:	690f      	ldr	r7, [r1, #16]
 800d4ae:	2f00      	cmp	r7, #0
 800d4b0:	d0a9      	beq.n	800d406 <__sflush_r+0x1a>
 800d4b2:	0793      	lsls	r3, r2, #30
 800d4b4:	bf18      	it	ne
 800d4b6:	2300      	movne	r3, #0
 800d4b8:	680e      	ldr	r6, [r1, #0]
 800d4ba:	bf08      	it	eq
 800d4bc:	694b      	ldreq	r3, [r1, #20]
 800d4be:	eba6 0807 	sub.w	r8, r6, r7
 800d4c2:	600f      	str	r7, [r1, #0]
 800d4c4:	608b      	str	r3, [r1, #8]
 800d4c6:	f1b8 0f00 	cmp.w	r8, #0
 800d4ca:	dd9c      	ble.n	800d406 <__sflush_r+0x1a>
 800d4cc:	4643      	mov	r3, r8
 800d4ce:	463a      	mov	r2, r7
 800d4d0:	4628      	mov	r0, r5
 800d4d2:	6a21      	ldr	r1, [r4, #32]
 800d4d4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d4d6:	47b0      	blx	r6
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	dc06      	bgt.n	800d4ea <__sflush_r+0xfe>
 800d4dc:	89a3      	ldrh	r3, [r4, #12]
 800d4de:	f04f 30ff 	mov.w	r0, #4294967295
 800d4e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4e6:	81a3      	strh	r3, [r4, #12]
 800d4e8:	e78e      	b.n	800d408 <__sflush_r+0x1c>
 800d4ea:	4407      	add	r7, r0
 800d4ec:	eba8 0800 	sub.w	r8, r8, r0
 800d4f0:	e7e9      	b.n	800d4c6 <__sflush_r+0xda>
 800d4f2:	bf00      	nop
 800d4f4:	20400001 	.word	0x20400001

0800d4f8 <_fflush_r>:
 800d4f8:	b538      	push	{r3, r4, r5, lr}
 800d4fa:	690b      	ldr	r3, [r1, #16]
 800d4fc:	4605      	mov	r5, r0
 800d4fe:	460c      	mov	r4, r1
 800d500:	b913      	cbnz	r3, 800d508 <_fflush_r+0x10>
 800d502:	2500      	movs	r5, #0
 800d504:	4628      	mov	r0, r5
 800d506:	bd38      	pop	{r3, r4, r5, pc}
 800d508:	b118      	cbz	r0, 800d512 <_fflush_r+0x1a>
 800d50a:	6983      	ldr	r3, [r0, #24]
 800d50c:	b90b      	cbnz	r3, 800d512 <_fflush_r+0x1a>
 800d50e:	f7ff f8f3 	bl	800c6f8 <__sinit>
 800d512:	4b14      	ldr	r3, [pc, #80]	; (800d564 <_fflush_r+0x6c>)
 800d514:	429c      	cmp	r4, r3
 800d516:	d11b      	bne.n	800d550 <_fflush_r+0x58>
 800d518:	686c      	ldr	r4, [r5, #4]
 800d51a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d0ef      	beq.n	800d502 <_fflush_r+0xa>
 800d522:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d524:	07d0      	lsls	r0, r2, #31
 800d526:	d404      	bmi.n	800d532 <_fflush_r+0x3a>
 800d528:	0599      	lsls	r1, r3, #22
 800d52a:	d402      	bmi.n	800d532 <_fflush_r+0x3a>
 800d52c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d52e:	f7ff f981 	bl	800c834 <__retarget_lock_acquire_recursive>
 800d532:	4628      	mov	r0, r5
 800d534:	4621      	mov	r1, r4
 800d536:	f7ff ff59 	bl	800d3ec <__sflush_r>
 800d53a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d53c:	4605      	mov	r5, r0
 800d53e:	07da      	lsls	r2, r3, #31
 800d540:	d4e0      	bmi.n	800d504 <_fflush_r+0xc>
 800d542:	89a3      	ldrh	r3, [r4, #12]
 800d544:	059b      	lsls	r3, r3, #22
 800d546:	d4dd      	bmi.n	800d504 <_fflush_r+0xc>
 800d548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d54a:	f7ff f974 	bl	800c836 <__retarget_lock_release_recursive>
 800d54e:	e7d9      	b.n	800d504 <_fflush_r+0xc>
 800d550:	4b05      	ldr	r3, [pc, #20]	; (800d568 <_fflush_r+0x70>)
 800d552:	429c      	cmp	r4, r3
 800d554:	d101      	bne.n	800d55a <_fflush_r+0x62>
 800d556:	68ac      	ldr	r4, [r5, #8]
 800d558:	e7df      	b.n	800d51a <_fflush_r+0x22>
 800d55a:	4b04      	ldr	r3, [pc, #16]	; (800d56c <_fflush_r+0x74>)
 800d55c:	429c      	cmp	r4, r3
 800d55e:	bf08      	it	eq
 800d560:	68ec      	ldreq	r4, [r5, #12]
 800d562:	e7da      	b.n	800d51a <_fflush_r+0x22>
 800d564:	0800dad0 	.word	0x0800dad0
 800d568:	0800daf0 	.word	0x0800daf0
 800d56c:	0800dab0 	.word	0x0800dab0

0800d570 <_lseek_r>:
 800d570:	b538      	push	{r3, r4, r5, lr}
 800d572:	4604      	mov	r4, r0
 800d574:	4608      	mov	r0, r1
 800d576:	4611      	mov	r1, r2
 800d578:	2200      	movs	r2, #0
 800d57a:	4d05      	ldr	r5, [pc, #20]	; (800d590 <_lseek_r+0x20>)
 800d57c:	602a      	str	r2, [r5, #0]
 800d57e:	461a      	mov	r2, r3
 800d580:	f7f6 fb6f 	bl	8003c62 <_lseek>
 800d584:	1c43      	adds	r3, r0, #1
 800d586:	d102      	bne.n	800d58e <_lseek_r+0x1e>
 800d588:	682b      	ldr	r3, [r5, #0]
 800d58a:	b103      	cbz	r3, 800d58e <_lseek_r+0x1e>
 800d58c:	6023      	str	r3, [r4, #0]
 800d58e:	bd38      	pop	{r3, r4, r5, pc}
 800d590:	200015bc 	.word	0x200015bc

0800d594 <__swhatbuf_r>:
 800d594:	b570      	push	{r4, r5, r6, lr}
 800d596:	460e      	mov	r6, r1
 800d598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d59c:	4614      	mov	r4, r2
 800d59e:	2900      	cmp	r1, #0
 800d5a0:	461d      	mov	r5, r3
 800d5a2:	b096      	sub	sp, #88	; 0x58
 800d5a4:	da07      	bge.n	800d5b6 <__swhatbuf_r+0x22>
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	602b      	str	r3, [r5, #0]
 800d5aa:	89b3      	ldrh	r3, [r6, #12]
 800d5ac:	061a      	lsls	r2, r3, #24
 800d5ae:	d410      	bmi.n	800d5d2 <__swhatbuf_r+0x3e>
 800d5b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5b4:	e00e      	b.n	800d5d4 <__swhatbuf_r+0x40>
 800d5b6:	466a      	mov	r2, sp
 800d5b8:	f000 f908 	bl	800d7cc <_fstat_r>
 800d5bc:	2800      	cmp	r0, #0
 800d5be:	dbf2      	blt.n	800d5a6 <__swhatbuf_r+0x12>
 800d5c0:	9a01      	ldr	r2, [sp, #4]
 800d5c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d5c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d5ca:	425a      	negs	r2, r3
 800d5cc:	415a      	adcs	r2, r3
 800d5ce:	602a      	str	r2, [r5, #0]
 800d5d0:	e7ee      	b.n	800d5b0 <__swhatbuf_r+0x1c>
 800d5d2:	2340      	movs	r3, #64	; 0x40
 800d5d4:	2000      	movs	r0, #0
 800d5d6:	6023      	str	r3, [r4, #0]
 800d5d8:	b016      	add	sp, #88	; 0x58
 800d5da:	bd70      	pop	{r4, r5, r6, pc}

0800d5dc <__smakebuf_r>:
 800d5dc:	898b      	ldrh	r3, [r1, #12]
 800d5de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d5e0:	079d      	lsls	r5, r3, #30
 800d5e2:	4606      	mov	r6, r0
 800d5e4:	460c      	mov	r4, r1
 800d5e6:	d507      	bpl.n	800d5f8 <__smakebuf_r+0x1c>
 800d5e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d5ec:	6023      	str	r3, [r4, #0]
 800d5ee:	6123      	str	r3, [r4, #16]
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	6163      	str	r3, [r4, #20]
 800d5f4:	b002      	add	sp, #8
 800d5f6:	bd70      	pop	{r4, r5, r6, pc}
 800d5f8:	466a      	mov	r2, sp
 800d5fa:	ab01      	add	r3, sp, #4
 800d5fc:	f7ff ffca 	bl	800d594 <__swhatbuf_r>
 800d600:	9900      	ldr	r1, [sp, #0]
 800d602:	4605      	mov	r5, r0
 800d604:	4630      	mov	r0, r6
 800d606:	f7ff f917 	bl	800c838 <_malloc_r>
 800d60a:	b948      	cbnz	r0, 800d620 <__smakebuf_r+0x44>
 800d60c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d610:	059a      	lsls	r2, r3, #22
 800d612:	d4ef      	bmi.n	800d5f4 <__smakebuf_r+0x18>
 800d614:	f023 0303 	bic.w	r3, r3, #3
 800d618:	f043 0302 	orr.w	r3, r3, #2
 800d61c:	81a3      	strh	r3, [r4, #12]
 800d61e:	e7e3      	b.n	800d5e8 <__smakebuf_r+0xc>
 800d620:	4b0d      	ldr	r3, [pc, #52]	; (800d658 <__smakebuf_r+0x7c>)
 800d622:	62b3      	str	r3, [r6, #40]	; 0x28
 800d624:	89a3      	ldrh	r3, [r4, #12]
 800d626:	6020      	str	r0, [r4, #0]
 800d628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d62c:	81a3      	strh	r3, [r4, #12]
 800d62e:	9b00      	ldr	r3, [sp, #0]
 800d630:	6120      	str	r0, [r4, #16]
 800d632:	6163      	str	r3, [r4, #20]
 800d634:	9b01      	ldr	r3, [sp, #4]
 800d636:	b15b      	cbz	r3, 800d650 <__smakebuf_r+0x74>
 800d638:	4630      	mov	r0, r6
 800d63a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d63e:	f000 f8d7 	bl	800d7f0 <_isatty_r>
 800d642:	b128      	cbz	r0, 800d650 <__smakebuf_r+0x74>
 800d644:	89a3      	ldrh	r3, [r4, #12]
 800d646:	f023 0303 	bic.w	r3, r3, #3
 800d64a:	f043 0301 	orr.w	r3, r3, #1
 800d64e:	81a3      	strh	r3, [r4, #12]
 800d650:	89a0      	ldrh	r0, [r4, #12]
 800d652:	4305      	orrs	r5, r0
 800d654:	81a5      	strh	r5, [r4, #12]
 800d656:	e7cd      	b.n	800d5f4 <__smakebuf_r+0x18>
 800d658:	0800c691 	.word	0x0800c691

0800d65c <memchr>:
 800d65c:	4603      	mov	r3, r0
 800d65e:	b510      	push	{r4, lr}
 800d660:	b2c9      	uxtb	r1, r1
 800d662:	4402      	add	r2, r0
 800d664:	4293      	cmp	r3, r2
 800d666:	4618      	mov	r0, r3
 800d668:	d101      	bne.n	800d66e <memchr+0x12>
 800d66a:	2000      	movs	r0, #0
 800d66c:	e003      	b.n	800d676 <memchr+0x1a>
 800d66e:	7804      	ldrb	r4, [r0, #0]
 800d670:	3301      	adds	r3, #1
 800d672:	428c      	cmp	r4, r1
 800d674:	d1f6      	bne.n	800d664 <memchr+0x8>
 800d676:	bd10      	pop	{r4, pc}

0800d678 <memmove>:
 800d678:	4288      	cmp	r0, r1
 800d67a:	b510      	push	{r4, lr}
 800d67c:	eb01 0402 	add.w	r4, r1, r2
 800d680:	d902      	bls.n	800d688 <memmove+0x10>
 800d682:	4284      	cmp	r4, r0
 800d684:	4623      	mov	r3, r4
 800d686:	d807      	bhi.n	800d698 <memmove+0x20>
 800d688:	1e43      	subs	r3, r0, #1
 800d68a:	42a1      	cmp	r1, r4
 800d68c:	d008      	beq.n	800d6a0 <memmove+0x28>
 800d68e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d692:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d696:	e7f8      	b.n	800d68a <memmove+0x12>
 800d698:	4601      	mov	r1, r0
 800d69a:	4402      	add	r2, r0
 800d69c:	428a      	cmp	r2, r1
 800d69e:	d100      	bne.n	800d6a2 <memmove+0x2a>
 800d6a0:	bd10      	pop	{r4, pc}
 800d6a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d6a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d6aa:	e7f7      	b.n	800d69c <memmove+0x24>

0800d6ac <__malloc_lock>:
 800d6ac:	4801      	ldr	r0, [pc, #4]	; (800d6b4 <__malloc_lock+0x8>)
 800d6ae:	f7ff b8c1 	b.w	800c834 <__retarget_lock_acquire_recursive>
 800d6b2:	bf00      	nop
 800d6b4:	200015b4 	.word	0x200015b4

0800d6b8 <__malloc_unlock>:
 800d6b8:	4801      	ldr	r0, [pc, #4]	; (800d6c0 <__malloc_unlock+0x8>)
 800d6ba:	f7ff b8bc 	b.w	800c836 <__retarget_lock_release_recursive>
 800d6be:	bf00      	nop
 800d6c0:	200015b4 	.word	0x200015b4

0800d6c4 <_free_r>:
 800d6c4:	b538      	push	{r3, r4, r5, lr}
 800d6c6:	4605      	mov	r5, r0
 800d6c8:	2900      	cmp	r1, #0
 800d6ca:	d043      	beq.n	800d754 <_free_r+0x90>
 800d6cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6d0:	1f0c      	subs	r4, r1, #4
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	bfb8      	it	lt
 800d6d6:	18e4      	addlt	r4, r4, r3
 800d6d8:	f7ff ffe8 	bl	800d6ac <__malloc_lock>
 800d6dc:	4a1e      	ldr	r2, [pc, #120]	; (800d758 <_free_r+0x94>)
 800d6de:	6813      	ldr	r3, [r2, #0]
 800d6e0:	4610      	mov	r0, r2
 800d6e2:	b933      	cbnz	r3, 800d6f2 <_free_r+0x2e>
 800d6e4:	6063      	str	r3, [r4, #4]
 800d6e6:	6014      	str	r4, [r2, #0]
 800d6e8:	4628      	mov	r0, r5
 800d6ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6ee:	f7ff bfe3 	b.w	800d6b8 <__malloc_unlock>
 800d6f2:	42a3      	cmp	r3, r4
 800d6f4:	d90a      	bls.n	800d70c <_free_r+0x48>
 800d6f6:	6821      	ldr	r1, [r4, #0]
 800d6f8:	1862      	adds	r2, r4, r1
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	bf01      	itttt	eq
 800d6fe:	681a      	ldreq	r2, [r3, #0]
 800d700:	685b      	ldreq	r3, [r3, #4]
 800d702:	1852      	addeq	r2, r2, r1
 800d704:	6022      	streq	r2, [r4, #0]
 800d706:	6063      	str	r3, [r4, #4]
 800d708:	6004      	str	r4, [r0, #0]
 800d70a:	e7ed      	b.n	800d6e8 <_free_r+0x24>
 800d70c:	461a      	mov	r2, r3
 800d70e:	685b      	ldr	r3, [r3, #4]
 800d710:	b10b      	cbz	r3, 800d716 <_free_r+0x52>
 800d712:	42a3      	cmp	r3, r4
 800d714:	d9fa      	bls.n	800d70c <_free_r+0x48>
 800d716:	6811      	ldr	r1, [r2, #0]
 800d718:	1850      	adds	r0, r2, r1
 800d71a:	42a0      	cmp	r0, r4
 800d71c:	d10b      	bne.n	800d736 <_free_r+0x72>
 800d71e:	6820      	ldr	r0, [r4, #0]
 800d720:	4401      	add	r1, r0
 800d722:	1850      	adds	r0, r2, r1
 800d724:	4283      	cmp	r3, r0
 800d726:	6011      	str	r1, [r2, #0]
 800d728:	d1de      	bne.n	800d6e8 <_free_r+0x24>
 800d72a:	6818      	ldr	r0, [r3, #0]
 800d72c:	685b      	ldr	r3, [r3, #4]
 800d72e:	4401      	add	r1, r0
 800d730:	6011      	str	r1, [r2, #0]
 800d732:	6053      	str	r3, [r2, #4]
 800d734:	e7d8      	b.n	800d6e8 <_free_r+0x24>
 800d736:	d902      	bls.n	800d73e <_free_r+0x7a>
 800d738:	230c      	movs	r3, #12
 800d73a:	602b      	str	r3, [r5, #0]
 800d73c:	e7d4      	b.n	800d6e8 <_free_r+0x24>
 800d73e:	6820      	ldr	r0, [r4, #0]
 800d740:	1821      	adds	r1, r4, r0
 800d742:	428b      	cmp	r3, r1
 800d744:	bf01      	itttt	eq
 800d746:	6819      	ldreq	r1, [r3, #0]
 800d748:	685b      	ldreq	r3, [r3, #4]
 800d74a:	1809      	addeq	r1, r1, r0
 800d74c:	6021      	streq	r1, [r4, #0]
 800d74e:	6063      	str	r3, [r4, #4]
 800d750:	6054      	str	r4, [r2, #4]
 800d752:	e7c9      	b.n	800d6e8 <_free_r+0x24>
 800d754:	bd38      	pop	{r3, r4, r5, pc}
 800d756:	bf00      	nop
 800d758:	200004a4 	.word	0x200004a4

0800d75c <_realloc_r>:
 800d75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d75e:	4607      	mov	r7, r0
 800d760:	4614      	mov	r4, r2
 800d762:	460e      	mov	r6, r1
 800d764:	b921      	cbnz	r1, 800d770 <_realloc_r+0x14>
 800d766:	4611      	mov	r1, r2
 800d768:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d76c:	f7ff b864 	b.w	800c838 <_malloc_r>
 800d770:	b922      	cbnz	r2, 800d77c <_realloc_r+0x20>
 800d772:	f7ff ffa7 	bl	800d6c4 <_free_r>
 800d776:	4625      	mov	r5, r4
 800d778:	4628      	mov	r0, r5
 800d77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d77c:	f000 f848 	bl	800d810 <_malloc_usable_size_r>
 800d780:	42a0      	cmp	r0, r4
 800d782:	d20f      	bcs.n	800d7a4 <_realloc_r+0x48>
 800d784:	4621      	mov	r1, r4
 800d786:	4638      	mov	r0, r7
 800d788:	f7ff f856 	bl	800c838 <_malloc_r>
 800d78c:	4605      	mov	r5, r0
 800d78e:	2800      	cmp	r0, #0
 800d790:	d0f2      	beq.n	800d778 <_realloc_r+0x1c>
 800d792:	4631      	mov	r1, r6
 800d794:	4622      	mov	r2, r4
 800d796:	f7fe fec7 	bl	800c528 <memcpy>
 800d79a:	4631      	mov	r1, r6
 800d79c:	4638      	mov	r0, r7
 800d79e:	f7ff ff91 	bl	800d6c4 <_free_r>
 800d7a2:	e7e9      	b.n	800d778 <_realloc_r+0x1c>
 800d7a4:	4635      	mov	r5, r6
 800d7a6:	e7e7      	b.n	800d778 <_realloc_r+0x1c>

0800d7a8 <_read_r>:
 800d7a8:	b538      	push	{r3, r4, r5, lr}
 800d7aa:	4604      	mov	r4, r0
 800d7ac:	4608      	mov	r0, r1
 800d7ae:	4611      	mov	r1, r2
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	4d05      	ldr	r5, [pc, #20]	; (800d7c8 <_read_r+0x20>)
 800d7b4:	602a      	str	r2, [r5, #0]
 800d7b6:	461a      	mov	r2, r3
 800d7b8:	f7f6 fa12 	bl	8003be0 <_read>
 800d7bc:	1c43      	adds	r3, r0, #1
 800d7be:	d102      	bne.n	800d7c6 <_read_r+0x1e>
 800d7c0:	682b      	ldr	r3, [r5, #0]
 800d7c2:	b103      	cbz	r3, 800d7c6 <_read_r+0x1e>
 800d7c4:	6023      	str	r3, [r4, #0]
 800d7c6:	bd38      	pop	{r3, r4, r5, pc}
 800d7c8:	200015bc 	.word	0x200015bc

0800d7cc <_fstat_r>:
 800d7cc:	b538      	push	{r3, r4, r5, lr}
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	4d06      	ldr	r5, [pc, #24]	; (800d7ec <_fstat_r+0x20>)
 800d7d2:	4604      	mov	r4, r0
 800d7d4:	4608      	mov	r0, r1
 800d7d6:	4611      	mov	r1, r2
 800d7d8:	602b      	str	r3, [r5, #0]
 800d7da:	f7f6 fa29 	bl	8003c30 <_fstat>
 800d7de:	1c43      	adds	r3, r0, #1
 800d7e0:	d102      	bne.n	800d7e8 <_fstat_r+0x1c>
 800d7e2:	682b      	ldr	r3, [r5, #0]
 800d7e4:	b103      	cbz	r3, 800d7e8 <_fstat_r+0x1c>
 800d7e6:	6023      	str	r3, [r4, #0]
 800d7e8:	bd38      	pop	{r3, r4, r5, pc}
 800d7ea:	bf00      	nop
 800d7ec:	200015bc 	.word	0x200015bc

0800d7f0 <_isatty_r>:
 800d7f0:	b538      	push	{r3, r4, r5, lr}
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	4d05      	ldr	r5, [pc, #20]	; (800d80c <_isatty_r+0x1c>)
 800d7f6:	4604      	mov	r4, r0
 800d7f8:	4608      	mov	r0, r1
 800d7fa:	602b      	str	r3, [r5, #0]
 800d7fc:	f7f6 fa27 	bl	8003c4e <_isatty>
 800d800:	1c43      	adds	r3, r0, #1
 800d802:	d102      	bne.n	800d80a <_isatty_r+0x1a>
 800d804:	682b      	ldr	r3, [r5, #0]
 800d806:	b103      	cbz	r3, 800d80a <_isatty_r+0x1a>
 800d808:	6023      	str	r3, [r4, #0]
 800d80a:	bd38      	pop	{r3, r4, r5, pc}
 800d80c:	200015bc 	.word	0x200015bc

0800d810 <_malloc_usable_size_r>:
 800d810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d814:	1f18      	subs	r0, r3, #4
 800d816:	2b00      	cmp	r3, #0
 800d818:	bfbc      	itt	lt
 800d81a:	580b      	ldrlt	r3, [r1, r0]
 800d81c:	18c0      	addlt	r0, r0, r3
 800d81e:	4770      	bx	lr

0800d820 <floor>:
 800d820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d824:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800d828:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800d82c:	2e13      	cmp	r6, #19
 800d82e:	4602      	mov	r2, r0
 800d830:	460b      	mov	r3, r1
 800d832:	4607      	mov	r7, r0
 800d834:	460c      	mov	r4, r1
 800d836:	4605      	mov	r5, r0
 800d838:	dc34      	bgt.n	800d8a4 <floor+0x84>
 800d83a:	2e00      	cmp	r6, #0
 800d83c:	da15      	bge.n	800d86a <floor+0x4a>
 800d83e:	a334      	add	r3, pc, #208	; (adr r3, 800d910 <floor+0xf0>)
 800d840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d844:	f7f2 fc92 	bl	800016c <__adddf3>
 800d848:	2200      	movs	r2, #0
 800d84a:	2300      	movs	r3, #0
 800d84c:	f7f2 fec2 	bl	80005d4 <__aeabi_dcmpgt>
 800d850:	b140      	cbz	r0, 800d864 <floor+0x44>
 800d852:	2c00      	cmp	r4, #0
 800d854:	da59      	bge.n	800d90a <floor+0xea>
 800d856:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d85a:	ea57 0503 	orrs.w	r5, r7, r3
 800d85e:	d001      	beq.n	800d864 <floor+0x44>
 800d860:	2500      	movs	r5, #0
 800d862:	4c2d      	ldr	r4, [pc, #180]	; (800d918 <floor+0xf8>)
 800d864:	4623      	mov	r3, r4
 800d866:	462f      	mov	r7, r5
 800d868:	e025      	b.n	800d8b6 <floor+0x96>
 800d86a:	4a2c      	ldr	r2, [pc, #176]	; (800d91c <floor+0xfc>)
 800d86c:	fa42 f806 	asr.w	r8, r2, r6
 800d870:	ea01 0208 	and.w	r2, r1, r8
 800d874:	4302      	orrs	r2, r0
 800d876:	d01e      	beq.n	800d8b6 <floor+0x96>
 800d878:	a325      	add	r3, pc, #148	; (adr r3, 800d910 <floor+0xf0>)
 800d87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d87e:	f7f2 fc75 	bl	800016c <__adddf3>
 800d882:	2200      	movs	r2, #0
 800d884:	2300      	movs	r3, #0
 800d886:	f7f2 fea5 	bl	80005d4 <__aeabi_dcmpgt>
 800d88a:	2800      	cmp	r0, #0
 800d88c:	d0ea      	beq.n	800d864 <floor+0x44>
 800d88e:	2c00      	cmp	r4, #0
 800d890:	bfbe      	ittt	lt
 800d892:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d896:	fa43 f606 	asrlt.w	r6, r3, r6
 800d89a:	19a4      	addlt	r4, r4, r6
 800d89c:	2500      	movs	r5, #0
 800d89e:	ea24 0408 	bic.w	r4, r4, r8
 800d8a2:	e7df      	b.n	800d864 <floor+0x44>
 800d8a4:	2e33      	cmp	r6, #51	; 0x33
 800d8a6:	dd0a      	ble.n	800d8be <floor+0x9e>
 800d8a8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d8ac:	d103      	bne.n	800d8b6 <floor+0x96>
 800d8ae:	f7f2 fc5d 	bl	800016c <__adddf3>
 800d8b2:	4607      	mov	r7, r0
 800d8b4:	460b      	mov	r3, r1
 800d8b6:	4638      	mov	r0, r7
 800d8b8:	4619      	mov	r1, r3
 800d8ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8be:	f04f 32ff 	mov.w	r2, #4294967295
 800d8c2:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800d8c6:	fa22 f808 	lsr.w	r8, r2, r8
 800d8ca:	ea18 0f00 	tst.w	r8, r0
 800d8ce:	d0f2      	beq.n	800d8b6 <floor+0x96>
 800d8d0:	a30f      	add	r3, pc, #60	; (adr r3, 800d910 <floor+0xf0>)
 800d8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d6:	f7f2 fc49 	bl	800016c <__adddf3>
 800d8da:	2200      	movs	r2, #0
 800d8dc:	2300      	movs	r3, #0
 800d8de:	f7f2 fe79 	bl	80005d4 <__aeabi_dcmpgt>
 800d8e2:	2800      	cmp	r0, #0
 800d8e4:	d0be      	beq.n	800d864 <floor+0x44>
 800d8e6:	2c00      	cmp	r4, #0
 800d8e8:	da02      	bge.n	800d8f0 <floor+0xd0>
 800d8ea:	2e14      	cmp	r6, #20
 800d8ec:	d103      	bne.n	800d8f6 <floor+0xd6>
 800d8ee:	3401      	adds	r4, #1
 800d8f0:	ea25 0508 	bic.w	r5, r5, r8
 800d8f4:	e7b6      	b.n	800d864 <floor+0x44>
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d8fc:	fa03 f606 	lsl.w	r6, r3, r6
 800d900:	4435      	add	r5, r6
 800d902:	42bd      	cmp	r5, r7
 800d904:	bf38      	it	cc
 800d906:	18e4      	addcc	r4, r4, r3
 800d908:	e7f2      	b.n	800d8f0 <floor+0xd0>
 800d90a:	2500      	movs	r5, #0
 800d90c:	462c      	mov	r4, r5
 800d90e:	e7a9      	b.n	800d864 <floor+0x44>
 800d910:	8800759c 	.word	0x8800759c
 800d914:	7e37e43c 	.word	0x7e37e43c
 800d918:	bff00000 	.word	0xbff00000
 800d91c:	000fffff 	.word	0x000fffff

0800d920 <_init>:
 800d920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d922:	bf00      	nop
 800d924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d926:	bc08      	pop	{r3}
 800d928:	469e      	mov	lr, r3
 800d92a:	4770      	bx	lr

0800d92c <_fini>:
 800d92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d92e:	bf00      	nop
 800d930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d932:	bc08      	pop	{r3}
 800d934:	469e      	mov	lr, r3
 800d936:	4770      	bx	lr
