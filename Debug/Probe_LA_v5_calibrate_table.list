
Probe_LA_v5_calibrate_table.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8d8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  0800c9e8  0800c9e8  0001c9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb90  0800cb90  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800cb90  0800cb90  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cb90  0800cb90  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb90  0800cb90  0001cb90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb94  0800cb94  0001cb94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800cb98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013b8  200001f8  0800cd8c  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200015b0  0800cd8c  000215b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002022f  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bbf  00000000  00000000  0004044c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  00045010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d8  00000000  00000000  00046700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df92  00000000  00000000  00047bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e96a  00000000  00000000  00065b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097f2d  00000000  00000000  000844d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011c401  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006958  00000000  00000000  0011c454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c9d0 	.word	0x0800c9d0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800c9d0 	.word	0x0800c9d0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__gedf2>:
 80004d8:	f04f 3cff 	mov.w	ip, #4294967295
 80004dc:	e006      	b.n	80004ec <__cmpdf2+0x4>
 80004de:	bf00      	nop

080004e0 <__ledf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	e002      	b.n	80004ec <__cmpdf2+0x4>
 80004e6:	bf00      	nop

080004e8 <__cmpdf2>:
 80004e8:	f04f 0c01 	mov.w	ip, #1
 80004ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004fc:	bf18      	it	ne
 80004fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000502:	d01b      	beq.n	800053c <__cmpdf2+0x54>
 8000504:	b001      	add	sp, #4
 8000506:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800050a:	bf0c      	ite	eq
 800050c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000510:	ea91 0f03 	teqne	r1, r3
 8000514:	bf02      	ittt	eq
 8000516:	ea90 0f02 	teqeq	r0, r2
 800051a:	2000      	moveq	r0, #0
 800051c:	4770      	bxeq	lr
 800051e:	f110 0f00 	cmn.w	r0, #0
 8000522:	ea91 0f03 	teq	r1, r3
 8000526:	bf58      	it	pl
 8000528:	4299      	cmppl	r1, r3
 800052a:	bf08      	it	eq
 800052c:	4290      	cmpeq	r0, r2
 800052e:	bf2c      	ite	cs
 8000530:	17d8      	asrcs	r0, r3, #31
 8000532:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000536:	f040 0001 	orr.w	r0, r0, #1
 800053a:	4770      	bx	lr
 800053c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d102      	bne.n	800054c <__cmpdf2+0x64>
 8000546:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800054a:	d107      	bne.n	800055c <__cmpdf2+0x74>
 800054c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000550:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000554:	d1d6      	bne.n	8000504 <__cmpdf2+0x1c>
 8000556:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800055a:	d0d3      	beq.n	8000504 <__cmpdf2+0x1c>
 800055c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <__aeabi_cdrcmple>:
 8000564:	4684      	mov	ip, r0
 8000566:	4610      	mov	r0, r2
 8000568:	4662      	mov	r2, ip
 800056a:	468c      	mov	ip, r1
 800056c:	4619      	mov	r1, r3
 800056e:	4663      	mov	r3, ip
 8000570:	e000      	b.n	8000574 <__aeabi_cdcmpeq>
 8000572:	bf00      	nop

08000574 <__aeabi_cdcmpeq>:
 8000574:	b501      	push	{r0, lr}
 8000576:	f7ff ffb7 	bl	80004e8 <__cmpdf2>
 800057a:	2800      	cmp	r0, #0
 800057c:	bf48      	it	mi
 800057e:	f110 0f00 	cmnmi.w	r0, #0
 8000582:	bd01      	pop	{r0, pc}

08000584 <__aeabi_dcmpeq>:
 8000584:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000588:	f7ff fff4 	bl	8000574 <__aeabi_cdcmpeq>
 800058c:	bf0c      	ite	eq
 800058e:	2001      	moveq	r0, #1
 8000590:	2000      	movne	r0, #0
 8000592:	f85d fb08 	ldr.w	pc, [sp], #8
 8000596:	bf00      	nop

08000598 <__aeabi_dcmplt>:
 8000598:	f84d ed08 	str.w	lr, [sp, #-8]!
 800059c:	f7ff ffea 	bl	8000574 <__aeabi_cdcmpeq>
 80005a0:	bf34      	ite	cc
 80005a2:	2001      	movcc	r0, #1
 80005a4:	2000      	movcs	r0, #0
 80005a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005aa:	bf00      	nop

080005ac <__aeabi_dcmple>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff ffe0 	bl	8000574 <__aeabi_cdcmpeq>
 80005b4:	bf94      	ite	ls
 80005b6:	2001      	movls	r0, #1
 80005b8:	2000      	movhi	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmpge>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffce 	bl	8000564 <__aeabi_cdrcmple>
 80005c8:	bf94      	ite	ls
 80005ca:	2001      	movls	r0, #1
 80005cc:	2000      	movhi	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmpgt>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffc4 	bl	8000564 <__aeabi_cdrcmple>
 80005dc:	bf34      	ite	cc
 80005de:	2001      	movcc	r0, #1
 80005e0:	2000      	movcs	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2uiz>:
 80005e8:	004a      	lsls	r2, r1, #1
 80005ea:	d211      	bcs.n	8000610 <__aeabi_d2uiz+0x28>
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d211      	bcs.n	8000616 <__aeabi_d2uiz+0x2e>
 80005f2:	d50d      	bpl.n	8000610 <__aeabi_d2uiz+0x28>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d40e      	bmi.n	800061c <__aeabi_d2uiz+0x34>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	fa23 f002 	lsr.w	r0, r3, r2
 800060e:	4770      	bx	lr
 8000610:	f04f 0000 	mov.w	r0, #0
 8000614:	4770      	bx	lr
 8000616:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800061a:	d102      	bne.n	8000622 <__aeabi_d2uiz+0x3a>
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	4770      	bx	lr
 8000622:	f04f 0000 	mov.w	r0, #0
 8000626:	4770      	bx	lr

08000628 <__aeabi_d2f>:
 8000628:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800062c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000630:	bf24      	itt	cs
 8000632:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000636:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800063a:	d90d      	bls.n	8000658 <__aeabi_d2f+0x30>
 800063c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000640:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000644:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000648:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800064c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000650:	bf08      	it	eq
 8000652:	f020 0001 	biceq.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800065c:	d121      	bne.n	80006a2 <__aeabi_d2f+0x7a>
 800065e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000662:	bfbc      	itt	lt
 8000664:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000668:	4770      	bxlt	lr
 800066a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000672:	f1c2 0218 	rsb	r2, r2, #24
 8000676:	f1c2 0c20 	rsb	ip, r2, #32
 800067a:	fa10 f30c 	lsls.w	r3, r0, ip
 800067e:	fa20 f002 	lsr.w	r0, r0, r2
 8000682:	bf18      	it	ne
 8000684:	f040 0001 	orrne.w	r0, r0, #1
 8000688:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800068c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000690:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000694:	ea40 000c 	orr.w	r0, r0, ip
 8000698:	fa23 f302 	lsr.w	r3, r3, r2
 800069c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006a0:	e7cc      	b.n	800063c <__aeabi_d2f+0x14>
 80006a2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006a6:	d107      	bne.n	80006b8 <__aeabi_d2f+0x90>
 80006a8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006ac:	bf1e      	ittt	ne
 80006ae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006b2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006b6:	4770      	bxne	lr
 80006b8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop

080006c8 <__aeabi_frsub>:
 80006c8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80006cc:	e002      	b.n	80006d4 <__addsf3>
 80006ce:	bf00      	nop

080006d0 <__aeabi_fsub>:
 80006d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080006d4 <__addsf3>:
 80006d4:	0042      	lsls	r2, r0, #1
 80006d6:	bf1f      	itttt	ne
 80006d8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80006dc:	ea92 0f03 	teqne	r2, r3
 80006e0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80006e4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006e8:	d06a      	beq.n	80007c0 <__addsf3+0xec>
 80006ea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80006ee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80006f2:	bfc1      	itttt	gt
 80006f4:	18d2      	addgt	r2, r2, r3
 80006f6:	4041      	eorgt	r1, r0
 80006f8:	4048      	eorgt	r0, r1
 80006fa:	4041      	eorgt	r1, r0
 80006fc:	bfb8      	it	lt
 80006fe:	425b      	neglt	r3, r3
 8000700:	2b19      	cmp	r3, #25
 8000702:	bf88      	it	hi
 8000704:	4770      	bxhi	lr
 8000706:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800070a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800070e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000712:	bf18      	it	ne
 8000714:	4240      	negne	r0, r0
 8000716:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800071a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800071e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000722:	bf18      	it	ne
 8000724:	4249      	negne	r1, r1
 8000726:	ea92 0f03 	teq	r2, r3
 800072a:	d03f      	beq.n	80007ac <__addsf3+0xd8>
 800072c:	f1a2 0201 	sub.w	r2, r2, #1
 8000730:	fa41 fc03 	asr.w	ip, r1, r3
 8000734:	eb10 000c 	adds.w	r0, r0, ip
 8000738:	f1c3 0320 	rsb	r3, r3, #32
 800073c:	fa01 f103 	lsl.w	r1, r1, r3
 8000740:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000744:	d502      	bpl.n	800074c <__addsf3+0x78>
 8000746:	4249      	negs	r1, r1
 8000748:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800074c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000750:	d313      	bcc.n	800077a <__addsf3+0xa6>
 8000752:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000756:	d306      	bcc.n	8000766 <__addsf3+0x92>
 8000758:	0840      	lsrs	r0, r0, #1
 800075a:	ea4f 0131 	mov.w	r1, r1, rrx
 800075e:	f102 0201 	add.w	r2, r2, #1
 8000762:	2afe      	cmp	r2, #254	; 0xfe
 8000764:	d251      	bcs.n	800080a <__addsf3+0x136>
 8000766:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800076a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800076e:	bf08      	it	eq
 8000770:	f020 0001 	biceq.w	r0, r0, #1
 8000774:	ea40 0003 	orr.w	r0, r0, r3
 8000778:	4770      	bx	lr
 800077a:	0049      	lsls	r1, r1, #1
 800077c:	eb40 0000 	adc.w	r0, r0, r0
 8000780:	3a01      	subs	r2, #1
 8000782:	bf28      	it	cs
 8000784:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000788:	d2ed      	bcs.n	8000766 <__addsf3+0x92>
 800078a:	fab0 fc80 	clz	ip, r0
 800078e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000792:	ebb2 020c 	subs.w	r2, r2, ip
 8000796:	fa00 f00c 	lsl.w	r0, r0, ip
 800079a:	bfaa      	itet	ge
 800079c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007a0:	4252      	neglt	r2, r2
 80007a2:	4318      	orrge	r0, r3
 80007a4:	bfbc      	itt	lt
 80007a6:	40d0      	lsrlt	r0, r2
 80007a8:	4318      	orrlt	r0, r3
 80007aa:	4770      	bx	lr
 80007ac:	f092 0f00 	teq	r2, #0
 80007b0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80007b4:	bf06      	itte	eq
 80007b6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80007ba:	3201      	addeq	r2, #1
 80007bc:	3b01      	subne	r3, #1
 80007be:	e7b5      	b.n	800072c <__addsf3+0x58>
 80007c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80007c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80007c8:	bf18      	it	ne
 80007ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007ce:	d021      	beq.n	8000814 <__addsf3+0x140>
 80007d0:	ea92 0f03 	teq	r2, r3
 80007d4:	d004      	beq.n	80007e0 <__addsf3+0x10c>
 80007d6:	f092 0f00 	teq	r2, #0
 80007da:	bf08      	it	eq
 80007dc:	4608      	moveq	r0, r1
 80007de:	4770      	bx	lr
 80007e0:	ea90 0f01 	teq	r0, r1
 80007e4:	bf1c      	itt	ne
 80007e6:	2000      	movne	r0, #0
 80007e8:	4770      	bxne	lr
 80007ea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80007ee:	d104      	bne.n	80007fa <__addsf3+0x126>
 80007f0:	0040      	lsls	r0, r0, #1
 80007f2:	bf28      	it	cs
 80007f4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80007f8:	4770      	bx	lr
 80007fa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80007fe:	bf3c      	itt	cc
 8000800:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000804:	4770      	bxcc	lr
 8000806:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800080a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800080e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000812:	4770      	bx	lr
 8000814:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000818:	bf16      	itet	ne
 800081a:	4608      	movne	r0, r1
 800081c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000820:	4601      	movne	r1, r0
 8000822:	0242      	lsls	r2, r0, #9
 8000824:	bf06      	itte	eq
 8000826:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800082a:	ea90 0f01 	teqeq	r0, r1
 800082e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000832:	4770      	bx	lr

08000834 <__aeabi_ui2f>:
 8000834:	f04f 0300 	mov.w	r3, #0
 8000838:	e004      	b.n	8000844 <__aeabi_i2f+0x8>
 800083a:	bf00      	nop

0800083c <__aeabi_i2f>:
 800083c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000840:	bf48      	it	mi
 8000842:	4240      	negmi	r0, r0
 8000844:	ea5f 0c00 	movs.w	ip, r0
 8000848:	bf08      	it	eq
 800084a:	4770      	bxeq	lr
 800084c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000850:	4601      	mov	r1, r0
 8000852:	f04f 0000 	mov.w	r0, #0
 8000856:	e01c      	b.n	8000892 <__aeabi_l2f+0x2a>

08000858 <__aeabi_ul2f>:
 8000858:	ea50 0201 	orrs.w	r2, r0, r1
 800085c:	bf08      	it	eq
 800085e:	4770      	bxeq	lr
 8000860:	f04f 0300 	mov.w	r3, #0
 8000864:	e00a      	b.n	800087c <__aeabi_l2f+0x14>
 8000866:	bf00      	nop

08000868 <__aeabi_l2f>:
 8000868:	ea50 0201 	orrs.w	r2, r0, r1
 800086c:	bf08      	it	eq
 800086e:	4770      	bxeq	lr
 8000870:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000874:	d502      	bpl.n	800087c <__aeabi_l2f+0x14>
 8000876:	4240      	negs	r0, r0
 8000878:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800087c:	ea5f 0c01 	movs.w	ip, r1
 8000880:	bf02      	ittt	eq
 8000882:	4684      	moveq	ip, r0
 8000884:	4601      	moveq	r1, r0
 8000886:	2000      	moveq	r0, #0
 8000888:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800088c:	bf08      	it	eq
 800088e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000892:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000896:	fabc f28c 	clz	r2, ip
 800089a:	3a08      	subs	r2, #8
 800089c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008a0:	db10      	blt.n	80008c4 <__aeabi_l2f+0x5c>
 80008a2:	fa01 fc02 	lsl.w	ip, r1, r2
 80008a6:	4463      	add	r3, ip
 80008a8:	fa00 fc02 	lsl.w	ip, r0, r2
 80008ac:	f1c2 0220 	rsb	r2, r2, #32
 80008b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80008b4:	fa20 f202 	lsr.w	r2, r0, r2
 80008b8:	eb43 0002 	adc.w	r0, r3, r2
 80008bc:	bf08      	it	eq
 80008be:	f020 0001 	biceq.w	r0, r0, #1
 80008c2:	4770      	bx	lr
 80008c4:	f102 0220 	add.w	r2, r2, #32
 80008c8:	fa01 fc02 	lsl.w	ip, r1, r2
 80008cc:	f1c2 0220 	rsb	r2, r2, #32
 80008d0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80008d4:	fa21 f202 	lsr.w	r2, r1, r2
 80008d8:	eb43 0002 	adc.w	r0, r3, r2
 80008dc:	bf08      	it	eq
 80008de:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008e2:	4770      	bx	lr

080008e4 <__aeabi_fmul>:
 80008e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80008ec:	bf1e      	ittt	ne
 80008ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008f2:	ea92 0f0c 	teqne	r2, ip
 80008f6:	ea93 0f0c 	teqne	r3, ip
 80008fa:	d06f      	beq.n	80009dc <__aeabi_fmul+0xf8>
 80008fc:	441a      	add	r2, r3
 80008fe:	ea80 0c01 	eor.w	ip, r0, r1
 8000902:	0240      	lsls	r0, r0, #9
 8000904:	bf18      	it	ne
 8000906:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800090a:	d01e      	beq.n	800094a <__aeabi_fmul+0x66>
 800090c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000910:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000914:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000918:	fba0 3101 	umull	r3, r1, r0, r1
 800091c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000920:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000924:	bf3e      	ittt	cc
 8000926:	0049      	lslcc	r1, r1, #1
 8000928:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800092c:	005b      	lslcc	r3, r3, #1
 800092e:	ea40 0001 	orr.w	r0, r0, r1
 8000932:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000936:	2afd      	cmp	r2, #253	; 0xfd
 8000938:	d81d      	bhi.n	8000976 <__aeabi_fmul+0x92>
 800093a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800093e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000942:	bf08      	it	eq
 8000944:	f020 0001 	biceq.w	r0, r0, #1
 8000948:	4770      	bx	lr
 800094a:	f090 0f00 	teq	r0, #0
 800094e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000952:	bf08      	it	eq
 8000954:	0249      	lsleq	r1, r1, #9
 8000956:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800095a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800095e:	3a7f      	subs	r2, #127	; 0x7f
 8000960:	bfc2      	ittt	gt
 8000962:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000966:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800096a:	4770      	bxgt	lr
 800096c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000970:	f04f 0300 	mov.w	r3, #0
 8000974:	3a01      	subs	r2, #1
 8000976:	dc5d      	bgt.n	8000a34 <__aeabi_fmul+0x150>
 8000978:	f112 0f19 	cmn.w	r2, #25
 800097c:	bfdc      	itt	le
 800097e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000982:	4770      	bxle	lr
 8000984:	f1c2 0200 	rsb	r2, r2, #0
 8000988:	0041      	lsls	r1, r0, #1
 800098a:	fa21 f102 	lsr.w	r1, r1, r2
 800098e:	f1c2 0220 	rsb	r2, r2, #32
 8000992:	fa00 fc02 	lsl.w	ip, r0, r2
 8000996:	ea5f 0031 	movs.w	r0, r1, rrx
 800099a:	f140 0000 	adc.w	r0, r0, #0
 800099e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80009a2:	bf08      	it	eq
 80009a4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009a8:	4770      	bx	lr
 80009aa:	f092 0f00 	teq	r2, #0
 80009ae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80009b2:	bf02      	ittt	eq
 80009b4:	0040      	lsleq	r0, r0, #1
 80009b6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009ba:	3a01      	subeq	r2, #1
 80009bc:	d0f9      	beq.n	80009b2 <__aeabi_fmul+0xce>
 80009be:	ea40 000c 	orr.w	r0, r0, ip
 80009c2:	f093 0f00 	teq	r3, #0
 80009c6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009ca:	bf02      	ittt	eq
 80009cc:	0049      	lsleq	r1, r1, #1
 80009ce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80009d2:	3b01      	subeq	r3, #1
 80009d4:	d0f9      	beq.n	80009ca <__aeabi_fmul+0xe6>
 80009d6:	ea41 010c 	orr.w	r1, r1, ip
 80009da:	e78f      	b.n	80008fc <__aeabi_fmul+0x18>
 80009dc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009e0:	ea92 0f0c 	teq	r2, ip
 80009e4:	bf18      	it	ne
 80009e6:	ea93 0f0c 	teqne	r3, ip
 80009ea:	d00a      	beq.n	8000a02 <__aeabi_fmul+0x11e>
 80009ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80009f0:	bf18      	it	ne
 80009f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80009f6:	d1d8      	bne.n	80009aa <__aeabi_fmul+0xc6>
 80009f8:	ea80 0001 	eor.w	r0, r0, r1
 80009fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000a00:	4770      	bx	lr
 8000a02:	f090 0f00 	teq	r0, #0
 8000a06:	bf17      	itett	ne
 8000a08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000a0c:	4608      	moveq	r0, r1
 8000a0e:	f091 0f00 	teqne	r1, #0
 8000a12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000a16:	d014      	beq.n	8000a42 <__aeabi_fmul+0x15e>
 8000a18:	ea92 0f0c 	teq	r2, ip
 8000a1c:	d101      	bne.n	8000a22 <__aeabi_fmul+0x13e>
 8000a1e:	0242      	lsls	r2, r0, #9
 8000a20:	d10f      	bne.n	8000a42 <__aeabi_fmul+0x15e>
 8000a22:	ea93 0f0c 	teq	r3, ip
 8000a26:	d103      	bne.n	8000a30 <__aeabi_fmul+0x14c>
 8000a28:	024b      	lsls	r3, r1, #9
 8000a2a:	bf18      	it	ne
 8000a2c:	4608      	movne	r0, r1
 8000a2e:	d108      	bne.n	8000a42 <__aeabi_fmul+0x15e>
 8000a30:	ea80 0001 	eor.w	r0, r0, r1
 8000a34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_fdiv>:
 8000a4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a54:	bf1e      	ittt	ne
 8000a56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a5a:	ea92 0f0c 	teqne	r2, ip
 8000a5e:	ea93 0f0c 	teqne	r3, ip
 8000a62:	d069      	beq.n	8000b38 <__aeabi_fdiv+0xec>
 8000a64:	eba2 0203 	sub.w	r2, r2, r3
 8000a68:	ea80 0c01 	eor.w	ip, r0, r1
 8000a6c:	0249      	lsls	r1, r1, #9
 8000a6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a72:	d037      	beq.n	8000ae4 <__aeabi_fdiv+0x98>
 8000a74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a84:	428b      	cmp	r3, r1
 8000a86:	bf38      	it	cc
 8000a88:	005b      	lslcc	r3, r3, #1
 8000a8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a92:	428b      	cmp	r3, r1
 8000a94:	bf24      	itt	cs
 8000a96:	1a5b      	subcs	r3, r3, r1
 8000a98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000aa0:	bf24      	itt	cs
 8000aa2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000aa6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000aaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000aae:	bf24      	itt	cs
 8000ab0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ab4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ab8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000abc:	bf24      	itt	cs
 8000abe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ac2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ac6:	011b      	lsls	r3, r3, #4
 8000ac8:	bf18      	it	ne
 8000aca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ace:	d1e0      	bne.n	8000a92 <__aeabi_fdiv+0x46>
 8000ad0:	2afd      	cmp	r2, #253	; 0xfd
 8000ad2:	f63f af50 	bhi.w	8000976 <__aeabi_fmul+0x92>
 8000ad6:	428b      	cmp	r3, r1
 8000ad8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000adc:	bf08      	it	eq
 8000ade:	f020 0001 	biceq.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ae8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000aec:	327f      	adds	r2, #127	; 0x7f
 8000aee:	bfc2      	ittt	gt
 8000af0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000af4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000af8:	4770      	bxgt	lr
 8000afa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afe:	f04f 0300 	mov.w	r3, #0
 8000b02:	3a01      	subs	r2, #1
 8000b04:	e737      	b.n	8000976 <__aeabi_fmul+0x92>
 8000b06:	f092 0f00 	teq	r2, #0
 8000b0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000b0e:	bf02      	ittt	eq
 8000b10:	0040      	lsleq	r0, r0, #1
 8000b12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000b16:	3a01      	subeq	r2, #1
 8000b18:	d0f9      	beq.n	8000b0e <__aeabi_fdiv+0xc2>
 8000b1a:	ea40 000c 	orr.w	r0, r0, ip
 8000b1e:	f093 0f00 	teq	r3, #0
 8000b22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b26:	bf02      	ittt	eq
 8000b28:	0049      	lsleq	r1, r1, #1
 8000b2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000b2e:	3b01      	subeq	r3, #1
 8000b30:	d0f9      	beq.n	8000b26 <__aeabi_fdiv+0xda>
 8000b32:	ea41 010c 	orr.w	r1, r1, ip
 8000b36:	e795      	b.n	8000a64 <__aeabi_fdiv+0x18>
 8000b38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b3c:	ea92 0f0c 	teq	r2, ip
 8000b40:	d108      	bne.n	8000b54 <__aeabi_fdiv+0x108>
 8000b42:	0242      	lsls	r2, r0, #9
 8000b44:	f47f af7d 	bne.w	8000a42 <__aeabi_fmul+0x15e>
 8000b48:	ea93 0f0c 	teq	r3, ip
 8000b4c:	f47f af70 	bne.w	8000a30 <__aeabi_fmul+0x14c>
 8000b50:	4608      	mov	r0, r1
 8000b52:	e776      	b.n	8000a42 <__aeabi_fmul+0x15e>
 8000b54:	ea93 0f0c 	teq	r3, ip
 8000b58:	d104      	bne.n	8000b64 <__aeabi_fdiv+0x118>
 8000b5a:	024b      	lsls	r3, r1, #9
 8000b5c:	f43f af4c 	beq.w	80009f8 <__aeabi_fmul+0x114>
 8000b60:	4608      	mov	r0, r1
 8000b62:	e76e      	b.n	8000a42 <__aeabi_fmul+0x15e>
 8000b64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b68:	bf18      	it	ne
 8000b6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b6e:	d1ca      	bne.n	8000b06 <__aeabi_fdiv+0xba>
 8000b70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b74:	f47f af5c 	bne.w	8000a30 <__aeabi_fmul+0x14c>
 8000b78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b7c:	f47f af3c 	bne.w	80009f8 <__aeabi_fmul+0x114>
 8000b80:	e75f      	b.n	8000a42 <__aeabi_fmul+0x15e>
 8000b82:	bf00      	nop

08000b84 <__aeabi_f2uiz>:
 8000b84:	0042      	lsls	r2, r0, #1
 8000b86:	d20e      	bcs.n	8000ba6 <__aeabi_f2uiz+0x22>
 8000b88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b8c:	d30b      	bcc.n	8000ba6 <__aeabi_f2uiz+0x22>
 8000b8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b96:	d409      	bmi.n	8000bac <__aeabi_f2uiz+0x28>
 8000b98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr
 8000bac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000bb0:	d101      	bne.n	8000bb6 <__aeabi_f2uiz+0x32>
 8000bb2:	0242      	lsls	r2, r0, #9
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_f2uiz+0x38>
 8000bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <ToggleLDAC>:
// Подключение заголовочного файла
#include <DAC_AD5322.h>

//--------------------------------------------------------------------------
// Необходим для загрузки значений в ЦАП
void ToggleLDAC() {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2102      	movs	r1, #2
 8000bcc:	4804      	ldr	r0, [pc, #16]	; (8000be0 <ToggleLDAC+0x1c>)
 8000bce:	f003 fb6a 	bl	80042a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_SET);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	4802      	ldr	r0, [pc, #8]	; (8000be0 <ToggleLDAC+0x1c>)
 8000bd8:	f003 fb65 	bl	80042a6 <HAL_GPIO_WritePin>
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40010800 	.word	0x40010800

08000be4 <SendSPI>:
//--------------------------------------------------------------------------
void SendSPI(SPI_HandleTypeDef *pSPI,uint16_t out){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	807b      	strh	r3, [r7, #2]

  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2110      	movs	r1, #16
 8000bf4:	4808      	ldr	r0, [pc, #32]	; (8000c18 <SendSPI+0x34>)
 8000bf6:	f003 fb56 	bl	80042a6 <HAL_GPIO_WritePin>

  	// Передача значений в цап
  	//out	= 0b0100000111111111;
  	HAL_SPI_Transmit(pSPI, (uint8_t*)(&out), 1, 1);
 8000bfa:	1cb9      	adds	r1, r7, #2
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	2201      	movs	r2, #1
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f005 fcfd 	bl	8006600 <HAL_SPI_Transmit>

  	// запепрет передачи CS
  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_SET);
 8000c06:	2201      	movs	r2, #1
 8000c08:	2110      	movs	r1, #16
 8000c0a:	4803      	ldr	r0, [pc, #12]	; (8000c18 <SendSPI+0x34>)
 8000c0c:	f003 fb4b 	bl	80042a6 <HAL_GPIO_WritePin>

}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40010800 	.word	0x40010800

08000c1c <DAC_AD5322_Ch1>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала А
void DAC_AD5322_Ch1(SPI_HandleTypeDef *pSPI, uint16_t data_ch1) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	807b      	strh	r3, [r7, #2]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000c28:	887b      	ldrh	r3, [r7, #2]
 8000c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c2e:	d302      	bcc.n	8000c36 <DAC_AD5322_Ch1+0x1a>
 8000c30:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000c34:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000c36:	2300      	movs	r3, #0
 8000c38:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000c3e:	2300      	movs	r3, #0
 8000c40:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000c42:	2300      	movs	r3, #0
 8000c44:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000c46:	8afb      	ldrh	r3, [r7, #22]
 8000c48:	03db      	lsls	r3, r3, #15
 8000c4a:	b21a      	sxth	r2, r3
 8000c4c:	8abb      	ldrh	r3, [r7, #20]
 8000c4e:	039b      	lsls	r3, r3, #14
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	b21a      	sxth	r2, r3
 8000c56:	8a7b      	ldrh	r3, [r7, #18]
 8000c58:	035b      	lsls	r3, r3, #13
 8000c5a:	b21b      	sxth	r3, r3
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	b21a      	sxth	r2, r3
 8000c60:	8a3b      	ldrh	r3, [r7, #16]
 8000c62:	031b      	lsls	r3, r3, #12
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	4313      	orrs	r3, r2
 8000c68:	b21b      	sxth	r3, r3
 8000c6a:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000c6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c70:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000c74:	f023 030f 	bic.w	r3, r3, #15
 8000c78:	b21a      	sxth	r2, r3
 8000c7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c82:	b21b      	sxth	r3, r3
 8000c84:	4313      	orrs	r3, r2
 8000c86:	b21b      	sxth	r3, r3
 8000c88:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000c8a:	89bb      	ldrh	r3, [r7, #12]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ffa8 	bl	8000be4 <SendSPI>
  	SendSPI(pSPI,out);
 8000c94:	89bb      	ldrh	r3, [r7, #12]
 8000c96:	4619      	mov	r1, r3
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff ffa3 	bl	8000be4 <SendSPI>
  	ToggleLDAC();
 8000c9e:	f7ff ff91 	bl	8000bc4 <ToggleLDAC>
}
 8000ca2:	bf00      	nop
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <DAC_AD5322_Ch2>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала В
void DAC_AD5322_Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch2) {
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b086      	sub	sp, #24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	807b      	strh	r3, [r7, #2]

	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 8000cb6:	887b      	ldrh	r3, [r7, #2]
 8000cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cbc:	d302      	bcc.n	8000cc4 <DAC_AD5322_Ch2+0x1a>
 8000cbe:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000cc2:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000cc8:	2301      	movs	r3, #1
 8000cca:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000ccc:	2300      	movs	r3, #0
 8000cce:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000cd4:	8afb      	ldrh	r3, [r7, #22]
 8000cd6:	03db      	lsls	r3, r3, #15
 8000cd8:	b21a      	sxth	r2, r3
 8000cda:	8abb      	ldrh	r3, [r7, #20]
 8000cdc:	039b      	lsls	r3, r3, #14
 8000cde:	b21b      	sxth	r3, r3
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	b21a      	sxth	r2, r3
 8000ce4:	8a7b      	ldrh	r3, [r7, #18]
 8000ce6:	035b      	lsls	r3, r3, #13
 8000ce8:	b21b      	sxth	r3, r3
 8000cea:	4313      	orrs	r3, r2
 8000cec:	b21a      	sxth	r2, r3
 8000cee:	8a3b      	ldrh	r3, [r7, #16]
 8000cf0:	031b      	lsls	r3, r3, #12
 8000cf2:	b21b      	sxth	r3, r3
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	b21b      	sxth	r3, r3
 8000cf8:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000cfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cfe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000d02:	f023 030f 	bic.w	r3, r3, #15
 8000d06:	b21a      	sxth	r2, r3
 8000d08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d10:	b21b      	sxth	r3, r3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	b21b      	sxth	r3, r3
 8000d16:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000d18:	89bb      	ldrh	r3, [r7, #12]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff ff61 	bl	8000be4 <SendSPI>
  	SendSPI(pSPI,out);
 8000d22:	89bb      	ldrh	r3, [r7, #12]
 8000d24:	4619      	mov	r1, r3
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ff5c 	bl	8000be4 <SendSPI>
  	ToggleLDAC();
 8000d2c:	f7ff ff4a 	bl	8000bc4 <ToggleLDAC>
}
 8000d30:	bf00      	nop
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <DAC_AD5322_Ch1Ch2>:
//--------------------------------------------------------------------------
void DAC_AD5322_Ch1Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch1, uint16_t data_ch2) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	807b      	strh	r3, [r7, #2]
 8000d44:	4613      	mov	r3, r2
 8000d46:	803b      	strh	r3, [r7, #0]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000d48:	887b      	ldrh	r3, [r7, #2]
 8000d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d4e:	d302      	bcc.n	8000d56 <DAC_AD5322_Ch1Ch2+0x1e>
 8000d50:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000d54:	807b      	strh	r3, [r7, #2]
	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 8000d56:	883b      	ldrh	r3, [r7, #0]
 8000d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d5c:	d302      	bcc.n	8000d64 <DAC_AD5322_Ch1Ch2+0x2c>
 8000d5e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000d62:	803b      	strh	r3, [r7, #0]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000d64:	2300      	movs	r3, #0
 8000d66:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000d68:	2301      	movs	r3, #1
 8000d6a:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000d70:	2300      	movs	r3, #0
 8000d72:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000d74:	8afb      	ldrh	r3, [r7, #22]
 8000d76:	03db      	lsls	r3, r3, #15
 8000d78:	b21a      	sxth	r2, r3
 8000d7a:	8abb      	ldrh	r3, [r7, #20]
 8000d7c:	039b      	lsls	r3, r3, #14
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	4313      	orrs	r3, r2
 8000d82:	b21a      	sxth	r2, r3
 8000d84:	8a7b      	ldrh	r3, [r7, #18]
 8000d86:	035b      	lsls	r3, r3, #13
 8000d88:	b21b      	sxth	r3, r3
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	b21a      	sxth	r2, r3
 8000d8e:	8a3b      	ldrh	r3, [r7, #16]
 8000d90:	031b      	lsls	r3, r3, #12
 8000d92:	b21b      	sxth	r3, r3
 8000d94:	4313      	orrs	r3, r2
 8000d96:	b21b      	sxth	r3, r3
 8000d98:	81fb      	strh	r3, [r7, #14]
	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000d9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d9e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000da2:	f023 030f 	bic.w	r3, r3, #15
 8000da6:	b21a      	sxth	r2, r3
 8000da8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000db0:	b21b      	sxth	r3, r3
 8000db2:	4313      	orrs	r3, r2
 8000db4:	b21b      	sxth	r3, r3
 8000db6:	81bb      	strh	r3, [r7, #12]

  	SendSPI(pSPI,out);
 8000db8:	89bb      	ldrh	r3, [r7, #12]
 8000dba:	4619      	mov	r1, r3
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ff11 	bl	8000be4 <SendSPI>
  	SendSPI(pSPI,out);
 8000dc2:	89bb      	ldrh	r3, [r7, #12]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ff0c 	bl	8000be4 <SendSPI>
  	//--------------------------------------------------------------------------
  	chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000dcc:	2301      	movs	r3, #1
 8000dce:	82fb      	strh	r3, [r7, #22]
  	bufferVref 	= 1;	// bit 14: усилитель VREF?
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	82bb      	strh	r3, [r7, #20]
  	PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	827b      	strh	r3, [r7, #18]
  	PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000dd8:	2300      	movs	r3, #0
 8000dda:	823b      	strh	r3, [r7, #16]

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000ddc:	8afb      	ldrh	r3, [r7, #22]
 8000dde:	03db      	lsls	r3, r3, #15
 8000de0:	b21a      	sxth	r2, r3
 8000de2:	8abb      	ldrh	r3, [r7, #20]
 8000de4:	039b      	lsls	r3, r3, #14
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	4313      	orrs	r3, r2
 8000dea:	b21a      	sxth	r2, r3
 8000dec:	8a7b      	ldrh	r3, [r7, #18]
 8000dee:	035b      	lsls	r3, r3, #13
 8000df0:	b21b      	sxth	r3, r3
 8000df2:	4313      	orrs	r3, r2
 8000df4:	b21a      	sxth	r2, r3
 8000df6:	8a3b      	ldrh	r3, [r7, #16]
 8000df8:	031b      	lsls	r3, r3, #12
 8000dfa:	b21b      	sxth	r3, r3
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	b21b      	sxth	r3, r3
 8000e00:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000e02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e06:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000e0a:	f023 030f 	bic.w	r3, r3, #15
 8000e0e:	b21a      	sxth	r2, r3
 8000e10:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e18:	b21b      	sxth	r3, r3
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	b21b      	sxth	r3, r3
 8000e1e:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000e20:	89bb      	ldrh	r3, [r7, #12]
 8000e22:	4619      	mov	r1, r3
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff fedd 	bl	8000be4 <SendSPI>
  	SendSPI(pSPI,out);
 8000e2a:	89bb      	ldrh	r3, [r7, #12]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff fed8 	bl	8000be4 <SendSPI>
  	ToggleLDAC();
 8000e34:	f7ff fec6 	bl	8000bc4 <ToggleLDAC>
}
 8000e38:	bf00      	nop
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <flash_write_calibTable>:
/*
 * @brief   Write calibration table into flash memory
 * @retval  HAL Status
 */
HAL_StatusTypeDef flash_write_calibTable(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
    /* Create some variables */
    volatile uint32_t   addr    = FLASH_TABLE_START_ADDR;
 8000e46:	4b45      	ldr	r3, [pc, #276]	; (8000f5c <flash_write_calibTable+0x11c>)
 8000e48:	617b      	str	r3, [r7, #20]
    uint32_t            err     = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
    uint32_t            index   = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
    uint8_t             status  = HAL_OK;
 8000e52:	2300      	movs	r3, #0
 8000e54:	76fb      	strb	r3, [r7, #27]

    /* Compare flash and ram content */
    while ( addr < FLASH_TABLE_STOP_ADDR ) {
 8000e56:	e010      	b.n	8000e7a <flash_write_calibTable+0x3a>
        if ( DevNVRAM.data32[index] != *(uint32_t *)addr ) {
 8000e58:	4a41      	ldr	r2, [pc, #260]	; (8000f60 <flash_write_calibTable+0x120>)
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d002      	beq.n	8000e6e <flash_write_calibTable+0x2e>
            ++err;
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	613b      	str	r3, [r7, #16]
        }
        index += 1;
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3301      	adds	r3, #1
 8000e72:	61fb      	str	r3, [r7, #28]
        addr += 4;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	3304      	adds	r3, #4
 8000e78:	617b      	str	r3, [r7, #20]
    while ( addr < FLASH_TABLE_STOP_ADDR ) {
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	4a39      	ldr	r2, [pc, #228]	; (8000f64 <flash_write_calibTable+0x124>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d9ea      	bls.n	8000e58 <flash_write_calibTable+0x18>
    }

    /* If there are differencies -> write new data in flash */
    if (err > 0) {
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d063      	beq.n	8000f50 <flash_write_calibTable+0x110>
        /* Unlock flash */
        if ( HAL_FLASH_Unlock() != HAL_OK ) {
 8000e88:	f002 fee2 	bl	8003c50 <HAL_FLASH_Unlock>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <flash_write_calibTable+0x5a>
            status = HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	76fb      	strb	r3, [r7, #27]
            return status;
 8000e96:	7efb      	ldrb	r3, [r7, #27]
 8000e98:	e05b      	b.n	8000f52 <flash_write_calibTable+0x112>
        }

        /* Erase flash */
        FLASH_EraseInitTypeDef EraseInitStruct = {
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	4b2d      	ldr	r3, [pc, #180]	; (8000f5c <flash_write_calibTable+0x11c>)
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	2301      	movs	r3, #1
 8000eac:	60fb      	str	r3, [r7, #12]
                .TypeErase      = FLASH_TYPEERASE_PAGES,
                .PageAddress    = FLASH_TABLE_START_ADDR,
                .NbPages        = 1
        };
        if ( HAL_FLASHEx_Erase(&EraseInitStruct, &err) != HAL_OK ) {
 8000eae:	f107 0210 	add.w	r2, r7, #16
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f002 ffb2 	bl	8003e20 <HAL_FLASHEx_Erase>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <flash_write_calibTable+0x8a>
            status = HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	76fb      	strb	r3, [r7, #27]
            return status;
 8000ec6:	7efb      	ldrb	r3, [r7, #27]
 8000ec8:	e043      	b.n	8000f52 <flash_write_calibTable+0x112>
        }
        if ( err != 0xFFFFFFFF ) {
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed0:	d003      	beq.n	8000eda <flash_write_calibTable+0x9a>
            status = HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	76fb      	strb	r3, [r7, #27]
            return status;
 8000ed6:	7efb      	ldrb	r3, [r7, #27]
 8000ed8:	e03b      	b.n	8000f52 <flash_write_calibTable+0x112>
        }

        /* Reset variables */
        addr    = FLASH_TABLE_START_ADDR;
 8000eda:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <flash_write_calibTable+0x11c>)
 8000edc:	617b      	str	r3, [r7, #20]
        err     = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
        index   = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
        /* Increase number of rewritings */
        DevNVRAM.sector.NWrite += 1;
 8000ee6:	4b1e      	ldr	r3, [pc, #120]	; (8000f60 <flash_write_calibTable+0x120>)
 8000ee8:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8000eec:	3301      	adds	r3, #1
 8000eee:	4a1c      	ldr	r2, [pc, #112]	; (8000f60 <flash_write_calibTable+0x120>)
 8000ef0:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
        /* Calculate calibration table checksum */
        DevNVRAM.sector.CheckSum = HAL_CRC_Calculate( &hcrc,
 8000ef4:	2218      	movs	r2, #24
 8000ef6:	491a      	ldr	r1, [pc, #104]	; (8000f60 <flash_write_calibTable+0x120>)
 8000ef8:	481b      	ldr	r0, [pc, #108]	; (8000f68 <flash_write_calibTable+0x128>)
 8000efa:	f002 fe06 	bl	8003b0a <HAL_CRC_Calculate>
 8000efe:	4603      	mov	r3, r0
 8000f00:	4a17      	ldr	r2, [pc, #92]	; (8000f60 <flash_write_calibTable+0x120>)
 8000f02:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
                                                      (uint32_t*)&DevNVRAM.calibration_table,
                                                      (sizeof(DevNVRAM.calibration_table)/4) );
        /* Write flash */
        while (addr < FLASH_TABLE_STOP_ADDR) {
 8000f06:	e01d      	b.n	8000f44 <flash_write_calibTable+0x104>
            if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, DevNVRAM.data32[index]) != HAL_OK) {
 8000f08:	6979      	ldr	r1, [r7, #20]
 8000f0a:	4a15      	ldr	r2, [pc, #84]	; (8000f60 <flash_write_calibTable+0x120>)
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f12:	461a      	mov	r2, r3
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	2002      	movs	r0, #2
 8000f1a:	f002 fe29 	bl	8003b70 <HAL_FLASH_Program>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d002      	beq.n	8000f2a <flash_write_calibTable+0xea>
                err++;
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	3301      	adds	r3, #1
 8000f28:	613b      	str	r3, [r7, #16]
            }
            index += 1;
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	61fb      	str	r3, [r7, #28]
            addr += 4;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	3304      	adds	r3, #4
 8000f34:	617b      	str	r3, [r7, #20]
            /* Wait until flash is busy */
            while ( (FLASH->SR & FLASH_SR_BSY) != 0 )
 8000f36:	bf00      	nop
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <flash_write_calibTable+0x12c>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1f9      	bne.n	8000f38 <flash_write_calibTable+0xf8>
        while (addr < FLASH_TABLE_STOP_ADDR) {
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	4a07      	ldr	r2, [pc, #28]	; (8000f64 <flash_write_calibTable+0x124>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d9dd      	bls.n	8000f08 <flash_write_calibTable+0xc8>
                ;
        }
        /* Lock flash */
        HAL_FLASH_Lock();
 8000f4c:	f002 fea6 	bl	8003c9c <HAL_FLASH_Lock>
    }
    return status;
 8000f50:	7efb      	ldrb	r3, [r7, #27]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3720      	adds	r7, #32
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	0801fc00 	.word	0x0801fc00
 8000f60:	200004f4 	.word	0x200004f4
 8000f64:	0801ffff 	.word	0x0801ffff
 8000f68:	200008f4 	.word	0x200008f4
 8000f6c:	40022000 	.word	0x40022000

08000f70 <crete_calibration_table>:
#include <logic_calibration_table.h>
#include <stdlib.h>
#include <math.h>

void crete_calibration_table(Table_t *calibTable)
{ //de
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]

    calibTable->dacValA_m12[0] = 0x159;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f240 1259 	movw	r2, #345	; 0x159
 8000f7e:	819a      	strh	r2, [r3, #12]
    calibTable->dacValA_m12[1] = 0x182;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8000f86:	81da      	strh	r2, [r3, #14]
    calibTable->dacValA_m12[2] = 0x225;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f240 2225 	movw	r2, #549	; 0x225
 8000f8e:	821a      	strh	r2, [r3, #16]
    calibTable->dacValA_m12[3] = 0x309;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f240 3209 	movw	r2, #777	; 0x309
 8000f96:	825a      	strh	r2, [r3, #18]
    calibTable->dacValA_m12[4] = 0x3eb;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8000f9e:	829a      	strh	r2, [r3, #20]
    calibTable->dacValA_m12[5] = 0x4cd;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f240 42cd 	movw	r2, #1229	; 0x4cd
 8000fa6:	82da      	strh	r2, [r3, #22]
    calibTable->dacValA_m12[6] = 0x5b0;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f44f 62b6 	mov.w	r2, #1456	; 0x5b0
 8000fae:	831a      	strh	r2, [r3, #24]
    calibTable->dacValA_m12[7] = 0x693;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f240 6293 	movw	r2, #1683	; 0x693
 8000fb6:	835a      	strh	r2, [r3, #26]
    calibTable->dacValA_m12[8] = 0x777;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f240 7277 	movw	r2, #1911	; 0x777
 8000fbe:	839a      	strh	r2, [r3, #28]
    calibTable->dacValA_m12[9] = 0x861;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f640 0261 	movw	r2, #2145	; 0x861
 8000fc6:	83da      	strh	r2, [r3, #30]
    calibTable->dacValA_m12[10] = 0x93c;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f640 123c 	movw	r2, #2364	; 0x93c
 8000fce:	841a      	strh	r2, [r3, #32]
    calibTable->dacValA_m12[11] = 0xa20;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f44f 6222 	mov.w	r2, #2592	; 0xa20
 8000fd6:	845a      	strh	r2, [r3, #34]	; 0x22
    calibTable->dacValA_m12[12] = 0xb04;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f640 3204 	movw	r2, #2820	; 0xb04
 8000fde:	849a      	strh	r2, [r3, #36]	; 0x24
    calibTable->dacValA_m12[13] = 0xbe5;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f640 32e5 	movw	r2, #3045	; 0xbe5
 8000fe6:	84da      	strh	r2, [r3, #38]	; 0x26
    calibTable->dacValA_m12[14] = 0xcc7;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f640 42c7 	movw	r2, #3271	; 0xcc7
 8000fee:	851a      	strh	r2, [r3, #40]	; 0x28
    calibTable->dacValA_m12[15] = 0xda9;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f640 52a9 	movw	r2, #3497	; 0xda9
 8000ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
    calibTable->dacValA_m12[16] = 0xe62;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f640 6262 	movw	r2, #3682	; 0xe62
 8000ffe:	859a      	strh	r2, [r3, #44]	; 0x2c
    calibTable->dacValA_m12[17] = 0xe96;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f640 6296 	movw	r2, #3734	; 0xe96
 8001006:	85da      	strh	r2, [r3, #46]	; 0x2e
    calibTable->dacValA_m12[18] = 0xeac;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f640 62ac 	movw	r2, #3756	; 0xeac
 800100e:	861a      	strh	r2, [r3, #48]	; 0x30

    calibTable->dacValB_m12[0] = 0x145;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f240 1245 	movw	r2, #325	; 0x145
 8001016:	865a      	strh	r2, [r3, #50]	; 0x32
    calibTable->dacValB_m12[1] = 0x16e;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800101e:	869a      	strh	r2, [r3, #52]	; 0x34
    calibTable->dacValB_m12[2] = 0x212;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f240 2212 	movw	r2, #530	; 0x212
 8001026:	86da      	strh	r2, [r3, #54]	; 0x36
    calibTable->dacValB_m12[3] = 0x2f0;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 800102e:	871a      	strh	r2, [r3, #56]	; 0x38
    calibTable->dacValB_m12[4] = 0x3d2;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f240 32d2 	movw	r2, #978	; 0x3d2
 8001036:	875a      	strh	r2, [r3, #58]	; 0x3a
    calibTable->dacValB_m12[5] = 0x4b4;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800103e:	879a      	strh	r2, [r3, #60]	; 0x3c
    calibTable->dacValB_m12[6] = 0x597;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f240 5297 	movw	r2, #1431	; 0x597
 8001046:	87da      	strh	r2, [r3, #62]	; 0x3e
    calibTable->dacValB_m12[7] = 0x67a;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f240 627a 	movw	r2, #1658	; 0x67a
 800104e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    calibTable->dacValB_m12[8] = 0x75e;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f240 725e 	movw	r2, #1886	; 0x75e
 8001058:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    calibTable->dacValB_m12[9] = 0x84a;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f640 024a 	movw	r2, #2122	; 0x84a
 8001062:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    calibTable->dacValB_m12[10] = 0x923;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f640 1223 	movw	r2, #2339	; 0x923
 800106c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    calibTable->dacValB_m12[11] = 0xa07;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f640 2207 	movw	r2, #2567	; 0xa07
 8001076:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    calibTable->dacValB_m12[12] = 0xae8;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f640 22e8 	movw	r2, #2792	; 0xae8
 8001080:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    calibTable->dacValB_m12[13] = 0xbcc;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f640 32cc 	movw	r2, #3020	; 0xbcc
 800108a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    calibTable->dacValB_m12[14] = 0xcae;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f640 42ae 	movw	r2, #3246	; 0xcae
 8001094:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    calibTable->dacValB_m12[15] = 0xd90;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f44f 6259 	mov.w	r2, #3472	; 0xd90
 800109e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    calibTable->dacValB_m12[16] = 0xe49;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f640 6249 	movw	r2, #3657	; 0xe49
 80010a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    calibTable->dacValB_m12[17] = 0xe7b;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f640 627b 	movw	r2, #3707	; 0xe7b
 80010b2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    calibTable->dacValB_m12[18] = 0xe92;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f640 6292 	movw	r2, #3730	; 0xe92
 80010bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    calibTable->dacValA_m27[0] = 0x0;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    calibTable->dacValA_m27[1] = 0x1000;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    calibTable->dacValB_m27[0] = 0x0;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    calibTable->dacValB_m27[1] = 0x1000;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
	...

080010f0 <volt2dgt>:
// Следующий фрагмент кода выводит на экран «10»:
// printf("%f", floor(10.9));

// uint16_t volt2dgt(Table_t *calibTable, int16_t volt){
 uint16_t volt2dgt(Table_t *calibTable, RelState m, uint8_t Ch, int16_t volt)
 {
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b091      	sub	sp, #68	; 0x44
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	4608      	mov	r0, r1
 80010fa:	4611      	mov	r1, r2
 80010fc:	461a      	mov	r2, r3
 80010fe:	4603      	mov	r3, r0
 8001100:	70fb      	strb	r3, [r7, #3]
 8001102:	460b      	mov	r3, r1
 8001104:	70bb      	strb	r3, [r7, #2]
 8001106:	4613      	mov	r3, r2
 8001108:	803b      	strh	r3, [r7, #0]
int AXXX;
//------------------------------------------------



     switch (Ch)
 800110a:	78bb      	ldrb	r3, [r7, #2]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d003      	beq.n	8001118 <volt2dgt+0x28>
 8001110:	2b02      	cmp	r3, #2
 8001112:	f000 8118 	beq.w	8001346 <volt2dgt+0x256>
 8001116:	e1b8      	b.n	800148a <volt2dgt+0x39a>
     {
     case 1:
         switch (m)
 8001118:	78fb      	ldrb	r3, [r7, #3]
 800111a:	2b00      	cmp	r3, #0
 800111c:	f000 80cf 	beq.w	80012be <volt2dgt+0x1ce>
 8001120:	2b01      	cmp	r3, #1
 8001122:	f040 81af 	bne.w	8001484 <volt2dgt+0x394>
         {
         case m12:

        	 minVolt = MIN_VOLT_MODE_12;
 8001126:	f64d 3370 	movw	r3, #56176	; 0xdb70
 800112a:	867b      	strh	r3, [r7, #50]	; 0x32
			 maxVolt = MAX_VOLT_MODE_12;
 800112c:	f242 4390 	movw	r3, #9360	; 0x2490
 8001130:	863b      	strh	r3, [r7, #48]	; 0x30

        	 x0 = abs(MIN_VOLT_MODE_12);
 8001132:	f242 4390 	movw	r3, #9360	; 0x2490
 8001136:	85fb      	strh	r3, [r7, #46]	; 0x2e
             x1 = abs(MAX_VOLT_MODE_12);
 8001138:	f242 4390 	movw	r3, #9360	; 0x2490
 800113c:	85bb      	strh	r3, [r7, #44]	; 0x2c

        	 count = (x0+x1)/STEP_CALIBRATE;
 800113e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001140:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001142:	4413      	add	r3, r2
 8001144:	4aa5      	ldr	r2, [pc, #660]	; (80013dc <volt2dgt+0x2ec>)
 8001146:	fb82 1203 	smull	r1, r2, r2, r3
 800114a:	1252      	asrs	r2, r2, #9
 800114c:	17db      	asrs	r3, r3, #31
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fb73 	bl	800083c <__aeabi_i2f>
 8001156:	4603      	mov	r3, r0
 8001158:	63fb      	str	r3, [r7, #60]	; 0x3c

        	 y0 = 0;            // начало индекса массива
 800115a:	2300      	movs	r3, #0
 800115c:	857b      	strh	r3, [r7, #42]	; 0x2a
        	 y1 = count;        // конец индекса массива
 800115e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001160:	f7ff fd10 	bl	8000b84 <__aeabi_f2uiz>
 8001164:	4603      	mov	r3, r0
 8001166:	853b      	strh	r3, [r7, #40]	; 0x28

        	 b = (count*x0)/(x0+x1);
 8001168:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fb66 	bl	800083c <__aeabi_i2f>
 8001170:	4603      	mov	r3, r0
 8001172:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fbb5 	bl	80008e4 <__aeabi_fmul>
 800117a:	4603      	mov	r3, r0
 800117c:	461c      	mov	r4, r3
 800117e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001180:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001182:	4413      	add	r3, r2
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fb59 	bl	800083c <__aeabi_i2f>
 800118a:	4603      	mov	r3, r0
 800118c:	4619      	mov	r1, r3
 800118e:	4620      	mov	r0, r4
 8001190:	f7ff fc5c 	bl	8000a4c <__aeabi_fdiv>
 8001194:	4603      	mov	r3, r0
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
        	 a = b/x0;
 8001198:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fb4e 	bl	800083c <__aeabi_i2f>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4619      	mov	r1, r3
 80011a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011a6:	f7ff fc51 	bl	8000a4c <__aeabi_fdiv>
 80011aa:	4603      	mov	r3, r0
 80011ac:	623b      	str	r3, [r7, #32]

        	 x = volt ;// /Ktr!!!!!!!!!!!!!!
 80011ae:	883b      	ldrh	r3, [r7, #0]
 80011b0:	83fb      	strh	r3, [r7, #30]
        	 yi = floor(a*x+b); // искомый индекс в массиве!!! найти минимальное значение от него 26.5-->26 через floor
 80011b2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fb40 	bl	800083c <__aeabi_i2f>
 80011bc:	4603      	mov	r3, r0
 80011be:	6a39      	ldr	r1, [r7, #32]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fb8f 	bl	80008e4 <__aeabi_fmul>
 80011c6:	4603      	mov	r3, r0
 80011c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fa82 	bl	80006d4 <__addsf3>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f928 	bl	8000428 <__aeabi_f2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f00b fb76 	bl	800c8d0 <floor>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	f7ff f9fc 	bl	80005e8 <__aeabi_d2uiz>
 80011f0:	4603      	mov	r3, r0
 80011f2:	83bb      	strh	r3, [r7, #28]

        	  // // TODO:Найти по найденому индексу значение в массиве!  и найти значение n+1

        	 Ca0 =(uint16_t *) calibTable->dacValA_m12[yi];
 80011f4:	8bbb      	ldrh	r3, [r7, #28]
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	3304      	adds	r3, #4
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	4413      	add	r3, r2
 80011fe:	889b      	ldrh	r3, [r3, #4]
 8001200:	837b      	strh	r3, [r7, #26]
        	 Ca1 = calibTable->dacValA_m12[yi+1];
 8001202:	8bbb      	ldrh	r3, [r7, #28]
 8001204:	3301      	adds	r3, #1
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	3304      	adds	r3, #4
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	4413      	add	r3, r2
 800120e:	889b      	ldrh	r3, [r3, #4]
 8001210:	833b      	strh	r3, [r7, #24]
        	 y = a*x+b;
 8001212:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fb10 	bl	800083c <__aeabi_i2f>
 800121c:	4603      	mov	r3, r0
 800121e:	6a39      	ldr	r1, [r7, #32]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fb5f 	bl	80008e4 <__aeabi_fmul>
 8001226:	4603      	mov	r3, r0
 8001228:	4619      	mov	r1, r3
 800122a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800122c:	f7ff fa52 	bl	80006d4 <__addsf3>
 8001230:	4603      	mov	r3, r0
 8001232:	63bb      	str	r3, [r7, #56]	; 0x38
        	 a0 = (y * STEP_CALIBRATE) - abs( MIN_VOLT_MODE_12);// FIXME: !!!!!не правильные значение 2080 вместо 2400 TODO: не правльно переводит значения!27*200 = 5400
 8001234:	496a      	ldr	r1, [pc, #424]	; (80013e0 <volt2dgt+0x2f0>)
 8001236:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001238:	f7ff fb54 	bl	80008e4 <__aeabi_fmul>
 800123c:	4603      	mov	r3, r0
 800123e:	4969      	ldr	r1, [pc, #420]	; (80013e4 <volt2dgt+0x2f4>)
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fa45 	bl	80006d0 <__aeabi_fsub>
 8001246:	4603      	mov	r3, r0
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fc9b 	bl	8000b84 <__aeabi_f2uiz>
 800124e:	4603      	mov	r3, r0
 8001250:	82fb      	strh	r3, [r7, #22]
        	 a1 = ((y+1) * STEP_CALIBRATE) -abs( MIN_VOLT_MODE_12);// TODO: не правльно переводит значения!28*200 = 5600
 8001252:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001256:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001258:	f7ff fa3c 	bl	80006d4 <__addsf3>
 800125c:	4603      	mov	r3, r0
 800125e:	4960      	ldr	r1, [pc, #384]	; (80013e0 <volt2dgt+0x2f0>)
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fb3f 	bl	80008e4 <__aeabi_fmul>
 8001266:	4603      	mov	r3, r0
 8001268:	495e      	ldr	r1, [pc, #376]	; (80013e4 <volt2dgt+0x2f4>)
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fa30 	bl	80006d0 <__aeabi_fsub>
 8001270:	4603      	mov	r3, r0
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fc86 	bl	8000b84 <__aeabi_f2uiz>
 8001278:	4603      	mov	r3, r0
 800127a:	82bb      	strh	r3, [r7, #20]

        	 CA= Ca1-Ca0;
 800127c:	8b3a      	ldrh	r2, [r7, #24]
 800127e:	8b7b      	ldrh	r3, [r7, #26]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	613b      	str	r3, [r7, #16]
        	 Aa = a1-a0;
 8001284:	8aba      	ldrh	r2, [r7, #20]
 8001286:	8afb      	ldrh	r3, [r7, #22]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	60fb      	str	r3, [r7, #12]
        	 AXXX = x-a0;
 800128c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001290:	8afb      	ldrh	r3, [r7, #22]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	60bb      	str	r3, [r7, #8]

        	 CodeX = (((CA)/(Aa)))*(AXXX)+Ca0;
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	fb92 f3f3 	sdiv	r3, r2, r3
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	fb02 f203 	mul.w	r2, r2, r3
 80012a4:	8b7b      	ldrh	r3, [r7, #26]
 80012a6:	4413      	add	r3, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fac7 	bl	800083c <__aeabi_i2f>
 80012ae:	4603      	mov	r3, r0
 80012b0:	637b      	str	r3, [r7, #52]	; 0x34
        	 return CodeX; //2400 -> 2662
 80012b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80012b4:	f7ff fc66 	bl	8000b84 <__aeabi_f2uiz>
 80012b8:	4603      	mov	r3, r0
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	e0ea      	b.n	8001494 <volt2dgt+0x3a4>

             break;
         case m27:

             // TODO: Нужно ли учитывать Ктр? volt = volt*Ktr
             count = (abs(MIN_VOLT_MODE_27) + abs(MAX_VOLT_MODE_27)) / STEP_CALIBRATE;
 80012be:	4b4a      	ldr	r3, [pc, #296]	; (80013e8 <volt2dgt+0x2f8>)
 80012c0:	63fb      	str	r3, [r7, #60]	; 0x3c
             y = (floor(
                 (count * abs(MIN_VOLT_MODE_27)) / (abs(MIN_VOLT_MODE_27) + abs(MAX_VOLT_MODE_27)) / abs(MIN_VOLT_MODE_27) * volt + (count * abs(MIN_VOLT_MODE_27)) / (abs(MIN_VOLT_MODE_27) + abs(MAX_VOLT_MODE_27)))); // искомый индекс в массиве!!! найти минимальное значение от него 26.5-->26 через floor
 80012c2:	494a      	ldr	r1, [pc, #296]	; (80013ec <volt2dgt+0x2fc>)
 80012c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80012c6:	f7ff fb0d 	bl	80008e4 <__aeabi_fmul>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4948      	ldr	r1, [pc, #288]	; (80013f0 <volt2dgt+0x300>)
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fbbc 	bl	8000a4c <__aeabi_fdiv>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4945      	ldr	r1, [pc, #276]	; (80013ec <volt2dgt+0x2fc>)
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fbb7 	bl	8000a4c <__aeabi_fdiv>
 80012de:	4603      	mov	r3, r0
 80012e0:	461c      	mov	r4, r3
 80012e2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff faa8 	bl	800083c <__aeabi_i2f>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4619      	mov	r1, r3
 80012f0:	4620      	mov	r0, r4
 80012f2:	f7ff faf7 	bl	80008e4 <__aeabi_fmul>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461c      	mov	r4, r3
 80012fa:	493c      	ldr	r1, [pc, #240]	; (80013ec <volt2dgt+0x2fc>)
 80012fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80012fe:	f7ff faf1 	bl	80008e4 <__aeabi_fmul>
 8001302:	4603      	mov	r3, r0
 8001304:	493a      	ldr	r1, [pc, #232]	; (80013f0 <volt2dgt+0x300>)
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fba0 	bl	8000a4c <__aeabi_fdiv>
 800130c:	4603      	mov	r3, r0
 800130e:	4619      	mov	r1, r3
 8001310:	4620      	mov	r0, r4
 8001312:	f7ff f9df 	bl	80006d4 <__addsf3>
 8001316:	4603      	mov	r3, r0
             y = (floor(
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f885 	bl	8000428 <__aeabi_f2d>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4610      	mov	r0, r2
 8001324:	4619      	mov	r1, r3
 8001326:	f00b fad3 	bl	800c8d0 <floor>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff f979 	bl	8000628 <__aeabi_d2f>
 8001336:	4603      	mov	r3, r0
 8001338:	63bb      	str	r3, [r7, #56]	; 0x38
//             CodeX = (((calibTable->dacValA_m27[y + 1 + 1] - calibTable->dacValA_m27[y]) / (((y + 1 + 1) * STEP_CALIBRATE) - abs(MIN_VOLT_MODE_27) - ((y + 1) * STEP_CALIBRATE) - abs(MIN_VOLT_MODE_27)))) * (volt - ((y + 1) * STEP_CALIBRATE) - abs(MIN_VOLT_MODE_27)) + calibTable->dacValA_m27[y + 1];
             return CodeX;
 800133a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800133c:	f7ff fc22 	bl	8000b84 <__aeabi_f2uiz>
 8001340:	4603      	mov	r3, r0
 8001342:	b29b      	uxth	r3, r3
 8001344:	e0a6      	b.n	8001494 <volt2dgt+0x3a4>
             break;
         }
         break;
     case 2:
         switch (m)
 8001346:	78fb      	ldrb	r3, [r7, #3]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d057      	beq.n	80013fc <volt2dgt+0x30c>
 800134c:	2b01      	cmp	r3, #1
 800134e:	f040 809b 	bne.w	8001488 <volt2dgt+0x398>
         {
         case m12:

             // TODO: Нужно ли учитывать Ктр? volt = volt*Ktr
             count = (abs(MIN_VOLT_MODE_12) + abs(MAX_VOLT_MODE_12)) / STEP_CALIBRATE;
 8001352:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <volt2dgt+0x304>)
 8001354:	63fb      	str	r3, [r7, #60]	; 0x3c
             y = (floor(
                 (count * abs(MIN_VOLT_MODE_12)) / (abs(MIN_VOLT_MODE_12) + abs(MAX_VOLT_MODE_12)) / abs(MIN_VOLT_MODE_12) * volt + (count * abs(MIN_VOLT_MODE_12)) / (abs(MIN_VOLT_MODE_12) + abs(MAX_VOLT_MODE_12)))); // искомый индекс в массиве!!! найти минимальное значение от него 26.5-->26 через floor
 8001356:	4923      	ldr	r1, [pc, #140]	; (80013e4 <volt2dgt+0x2f4>)
 8001358:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800135a:	f7ff fac3 	bl	80008e4 <__aeabi_fmul>
 800135e:	4603      	mov	r3, r0
 8001360:	4925      	ldr	r1, [pc, #148]	; (80013f8 <volt2dgt+0x308>)
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fb72 	bl	8000a4c <__aeabi_fdiv>
 8001368:	4603      	mov	r3, r0
 800136a:	491e      	ldr	r1, [pc, #120]	; (80013e4 <volt2dgt+0x2f4>)
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fb6d 	bl	8000a4c <__aeabi_fdiv>
 8001372:	4603      	mov	r3, r0
 8001374:	461c      	mov	r4, r3
 8001376:	f9b7 3000 	ldrsh.w	r3, [r7]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fa5e 	bl	800083c <__aeabi_i2f>
 8001380:	4603      	mov	r3, r0
 8001382:	4619      	mov	r1, r3
 8001384:	4620      	mov	r0, r4
 8001386:	f7ff faad 	bl	80008e4 <__aeabi_fmul>
 800138a:	4603      	mov	r3, r0
 800138c:	461c      	mov	r4, r3
 800138e:	4915      	ldr	r1, [pc, #84]	; (80013e4 <volt2dgt+0x2f4>)
 8001390:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001392:	f7ff faa7 	bl	80008e4 <__aeabi_fmul>
 8001396:	4603      	mov	r3, r0
 8001398:	4917      	ldr	r1, [pc, #92]	; (80013f8 <volt2dgt+0x308>)
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fb56 	bl	8000a4c <__aeabi_fdiv>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4619      	mov	r1, r3
 80013a4:	4620      	mov	r0, r4
 80013a6:	f7ff f995 	bl	80006d4 <__addsf3>
 80013aa:	4603      	mov	r3, r0
             y = (floor(
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f83b 	bl	8000428 <__aeabi_f2d>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4610      	mov	r0, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	f00b fa89 	bl	800c8d0 <floor>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4610      	mov	r0, r2
 80013c4:	4619      	mov	r1, r3
 80013c6:	f7ff f92f 	bl	8000628 <__aeabi_d2f>
 80013ca:	4603      	mov	r3, r0
 80013cc:	63bb      	str	r3, [r7, #56]	; 0x38
//             CodeX = (((calibTable->dacValB_m12[y + 1 + 1] - calibTable->dacValB_m12[y]) / (((y + 1 + 1) * STEP_CALIBRATE) - abs(MIN_VOLT_MODE_12) - ((y + 1) * STEP_CALIBRATE) - abs(MIN_VOLT_MODE_12)))) * (volt - ((y + 1) * STEP_CALIBRATE) - abs(MIN_VOLT_MODE_12)) + calibTable->dacValB_m12[y + 1];
             return CodeX;
 80013ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013d0:	f7ff fbd8 	bl	8000b84 <__aeabi_f2uiz>
 80013d4:	4603      	mov	r3, r0
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	e05c      	b.n	8001494 <volt2dgt+0x3a4>
 80013da:	bf00      	nop
 80013dc:	7e07e07f 	.word	0x7e07e07f
 80013e0:	44820000 	.word	0x44820000
 80013e4:	46124000 	.word	0x46124000
 80013e8:	424c0000 	.word	0x424c0000
 80013ec:	46d2f000 	.word	0x46d2f000
 80013f0:	4752f000 	.word	0x4752f000
 80013f4:	41900000 	.word	0x41900000
 80013f8:	46924000 	.word	0x46924000
             break;
         case m27:

             // TODO: Нужно ли учитывать Ктр? volt = volt*Ktr
             count = (abs(MIN_VOLT_MODE_27) + abs(MAX_VOLT_MODE_27)) / STEP_CALIBRATE;
 80013fc:	4b27      	ldr	r3, [pc, #156]	; (800149c <volt2dgt+0x3ac>)
 80013fe:	63fb      	str	r3, [r7, #60]	; 0x3c
             y = (floor(
                 (count * abs(MIN_VOLT_MODE_27)) / (abs(MIN_VOLT_MODE_27) + abs(MAX_VOLT_MODE_27)) / abs(MIN_VOLT_MODE_27) * volt + (count * abs(MIN_VOLT_MODE_27)) / (abs(MIN_VOLT_MODE_27) + abs(MAX_VOLT_MODE_27)))); // искомый индекс в массиве!!! найти минимальное значение от него 26.5-->26 через floor
 8001400:	4927      	ldr	r1, [pc, #156]	; (80014a0 <volt2dgt+0x3b0>)
 8001402:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001404:	f7ff fa6e 	bl	80008e4 <__aeabi_fmul>
 8001408:	4603      	mov	r3, r0
 800140a:	4926      	ldr	r1, [pc, #152]	; (80014a4 <volt2dgt+0x3b4>)
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fb1d 	bl	8000a4c <__aeabi_fdiv>
 8001412:	4603      	mov	r3, r0
 8001414:	4922      	ldr	r1, [pc, #136]	; (80014a0 <volt2dgt+0x3b0>)
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fb18 	bl	8000a4c <__aeabi_fdiv>
 800141c:	4603      	mov	r3, r0
 800141e:	461c      	mov	r4, r3
 8001420:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fa09 	bl	800083c <__aeabi_i2f>
 800142a:	4603      	mov	r3, r0
 800142c:	4619      	mov	r1, r3
 800142e:	4620      	mov	r0, r4
 8001430:	f7ff fa58 	bl	80008e4 <__aeabi_fmul>
 8001434:	4603      	mov	r3, r0
 8001436:	461c      	mov	r4, r3
 8001438:	4919      	ldr	r1, [pc, #100]	; (80014a0 <volt2dgt+0x3b0>)
 800143a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800143c:	f7ff fa52 	bl	80008e4 <__aeabi_fmul>
 8001440:	4603      	mov	r3, r0
 8001442:	4918      	ldr	r1, [pc, #96]	; (80014a4 <volt2dgt+0x3b4>)
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fb01 	bl	8000a4c <__aeabi_fdiv>
 800144a:	4603      	mov	r3, r0
 800144c:	4619      	mov	r1, r3
 800144e:	4620      	mov	r0, r4
 8001450:	f7ff f940 	bl	80006d4 <__addsf3>
 8001454:	4603      	mov	r3, r0
             y = (floor(
 8001456:	4618      	mov	r0, r3
 8001458:	f7fe ffe6 	bl	8000428 <__aeabi_f2d>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f00b fa34 	bl	800c8d0 <floor>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4610      	mov	r0, r2
 800146e:	4619      	mov	r1, r3
 8001470:	f7ff f8da 	bl	8000628 <__aeabi_d2f>
 8001474:	4603      	mov	r3, r0
 8001476:	63bb      	str	r3, [r7, #56]	; 0x38
//             CodeX = (((calibTable->dacValB_m12[y + 1 + 1] - calibTable->dacValB_m12[y]) / (((y + 1 + 1) * STEP_CALIBRATE) - abs(MIN_VOLT_MODE_27) - ((y + 1) * STEP_CALIBRATE) - abs(MIN_VOLT_MODE_27)))) * (volt - ((y + 1) * STEP_CALIBRATE) - abs(MIN_VOLT_MODE_27)) + calibTable->dacValB_m12[y + 1];
             return CodeX;
 8001478:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800147a:	f7ff fb83 	bl	8000b84 <__aeabi_f2uiz>
 800147e:	4603      	mov	r3, r0
 8001480:	b29b      	uxth	r3, r3
 8001482:	e007      	b.n	8001494 <volt2dgt+0x3a4>
         break;
 8001484:	bf00      	nop
 8001486:	e000      	b.n	800148a <volt2dgt+0x39a>

             break;
         }

         break;
 8001488:	bf00      	nop
     }
     return CodeX;
 800148a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800148c:	f7ff fb7a 	bl	8000b84 <__aeabi_f2uiz>
 8001490:	4603      	mov	r3, r0
 8001492:	b29b      	uxth	r3, r3
 }
 8001494:	4618      	mov	r0, r3
 8001496:	3744      	adds	r7, #68	; 0x44
 8001498:	46bd      	mov	sp, r7
 800149a:	bd90      	pop	{r4, r7, pc}
 800149c:	424c0000 	.word	0x424c0000
 80014a0:	46d2f000 	.word	0x46d2f000
 80014a4:	4752f000 	.word	0x4752f000

080014a8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80014b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014b4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d013      	beq.n	80014e8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80014c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014c4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80014c8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00b      	beq.n	80014e8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80014d0:	e000      	b.n	80014d4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80014d2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80014d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f9      	beq.n	80014d2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80014de:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80014e8:	687b      	ldr	r3, [r7, #4]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <DWT_Init>:
#define SCB_DEMCR   *(volatile unsigned long *)0xE000EDFC

/******************************************************************************/
/* inline func */
__STATIC_INLINE void DWT_Init(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 80014f8:	4b07      	ldr	r3, [pc, #28]	; (8001518 <DWT_Init+0x24>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	4a06      	ldr	r2, [pc, #24]	; (8001518 <DWT_Init+0x24>)
 80014fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001502:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <DWT_Init+0x28>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a04      	ldr	r2, [pc, #16]	; (800151c <DWT_Init+0x28>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6013      	str	r3, [r2, #0]
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	e000edf0 	.word	0xe000edf0
 800151c:	e0001000 	.word	0xe0001000

08001520 <_write>:
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */
//**************************************************************************
#if DEBUG_SWO
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	e009      	b.n	8001546 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1c5a      	adds	r2, r3, #1
 8001536:	60ba      	str	r2, [r7, #8]
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff ffb4 	bl	80014a8 <ITM_SendChar>
	for (int i = 0; i < len; i++)
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	3301      	adds	r3, #1
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	429a      	cmp	r2, r3
 800154c:	dbf1      	blt.n	8001532 <_write+0x12>
	}
	return len;
 800154e:	687b      	ldr	r3, [r7, #4]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <SetDacA>:
//}
//--------------------------------------------------------------------------
// Новая реализация. для приема значений в напряжениях, с поиском по структуре DevNVRAM выгруженной из памяти.
//TODO: Установка цап реализованно только для канала A и режима m12. Нужно переписать с учетом режима работы. режим работы определяет какую таблицу использовать.
void SetDacA(int16_t va,RelState m)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	460a      	mov	r2, r1
 8001562:	80fb      	strh	r3, [r7, #6]
 8001564:	4613      	mov	r3, r2
 8001566:	717b      	strb	r3, [r7, #5]
	VDAC_A = volt2dgt(&(DevNVRAM.calibration_table), m ,1, va);
 8001568:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800156c:	7979      	ldrb	r1, [r7, #5]
 800156e:	2201      	movs	r2, #1
 8001570:	4808      	ldr	r0, [pc, #32]	; (8001594 <SetDacA+0x3c>)
 8001572:	f7ff fdbd 	bl	80010f0 <volt2dgt>
 8001576:	4603      	mov	r3, r0
 8001578:	461a      	mov	r2, r3
 800157a:	4b07      	ldr	r3, [pc, #28]	; (8001598 <SetDacA+0x40>)
 800157c:	801a      	strh	r2, [r3, #0]
	DAC_AD5322_Ch1(&hspi1, VDAC_A);
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <SetDacA+0x40>)
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	4619      	mov	r1, r3
 8001584:	4805      	ldr	r0, [pc, #20]	; (800159c <SetDacA+0x44>)
 8001586:	f7ff fb49 	bl	8000c1c <DAC_AD5322_Ch1>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200004f4 	.word	0x200004f4
 8001598:	20000256 	.word	0x20000256
 800159c:	20000974 	.word	0x20000974

080015a0 <SetDacB>:
void SetDacB(int16_t vb, RelState m) //BUG: Не работает. Установка цап реализованно только для канала A и режима m12. Нужно переписать с учетом режима работы. режим работы определяет какую таблицу использовать.
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	460a      	mov	r2, r1
 80015aa:	80fb      	strh	r3, [r7, #6]
 80015ac:	4613      	mov	r3, r2
 80015ae:	717b      	strb	r3, [r7, #5]
	VDAC_B = volt2dgt(&(DevNVRAM.calibration_table),m, 2, vb);
 80015b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b4:	7979      	ldrb	r1, [r7, #5]
 80015b6:	2202      	movs	r2, #2
 80015b8:	4808      	ldr	r0, [pc, #32]	; (80015dc <SetDacB+0x3c>)
 80015ba:	f7ff fd99 	bl	80010f0 <volt2dgt>
 80015be:	4603      	mov	r3, r0
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <SetDacB+0x40>)
 80015c4:	801a      	strh	r2, [r3, #0]
	DAC_AD5322_Ch2(&hspi1, VDAC_B);
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <SetDacB+0x40>)
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	4619      	mov	r1, r3
 80015cc:	4805      	ldr	r0, [pc, #20]	; (80015e4 <SetDacB+0x44>)
 80015ce:	f7ff fb6c 	bl	8000caa <DAC_AD5322_Ch2>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200004f4 	.word	0x200004f4
 80015e0:	20000258 	.word	0x20000258
 80015e4:	20000974 	.word	0x20000974

080015e8 <SetAllDAC>:
void SetAllDAC()
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	DAC_AD5322_Ch1Ch2(&hspi1, VDAC_A, VDAC_B);
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <SetAllDAC+0x18>)
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	4a04      	ldr	r2, [pc, #16]	; (8001604 <SetAllDAC+0x1c>)
 80015f2:	8812      	ldrh	r2, [r2, #0]
 80015f4:	4619      	mov	r1, r3
 80015f6:	4804      	ldr	r0, [pc, #16]	; (8001608 <SetAllDAC+0x20>)
 80015f8:	f7ff fb9e 	bl	8000d38 <DAC_AD5322_Ch1Ch2>
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000256 	.word	0x20000256
 8001604:	20000258 	.word	0x20000258
 8001608:	20000974 	.word	0x20000974

0800160c <GetDacA>:
uint16_t GetDacA()
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
	return VDAC_A;
 8001610:	4b02      	ldr	r3, [pc, #8]	; (800161c <GetDacA+0x10>)
 8001612:	881b      	ldrh	r3, [r3, #0]
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	20000256 	.word	0x20000256

08001620 <GetDacB>:
uint16_t GetDacB()
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
	return VDAC_B;
 8001624:	4b02      	ldr	r3, [pc, #8]	; (8001630 <GetDacB+0x10>)
 8001626:	881b      	ldrh	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	20000258 	.word	0x20000258

08001634 <GetBtnRunState>:

uint8_t btn3_long_rd = 0;
uint8_t btn3_short_rd = 0;
//--------------------------------------------------------------------------
uint8_t GetBtnRunState()
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x00)
 8001638:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <GetBtnRunState+0x7c>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d10b      	bne.n	8001658 <GetBtnRunState+0x24>
 8001640:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <GetBtnRunState+0x80>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d107      	bne.n	8001658 <GetBtnRunState+0x24>
	{
		btn1_long_rd = 0;
 8001648:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <GetBtnRunState+0x80>)
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <GetBtnRunState+0x7c>)
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8001654:	2300      	movs	r3, #0
 8001656:	e026      	b.n	80016a6 <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x01 && btn1_long_rd == 0x00)
 8001658:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <GetBtnRunState+0x7c>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d10b      	bne.n	8001678 <GetBtnRunState+0x44>
 8001660:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <GetBtnRunState+0x80>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d107      	bne.n	8001678 <GetBtnRunState+0x44>
	{
		btn1_long_rd = 0;
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <GetBtnRunState+0x80>)
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <GetBtnRunState+0x7c>)
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
		return 0x01;
 8001674:	2301      	movs	r3, #1
 8001676:	e016      	b.n	80016a6 <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x01)
 8001678:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <GetBtnRunState+0x7c>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d10b      	bne.n	8001698 <GetBtnRunState+0x64>
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <GetBtnRunState+0x80>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d107      	bne.n	8001698 <GetBtnRunState+0x64>
	{
		btn1_long_rd = 0;
 8001688:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <GetBtnRunState+0x80>)
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <GetBtnRunState+0x7c>)
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
		return 0x02;
 8001694:	2302      	movs	r3, #2
 8001696:	e006      	b.n	80016a6 <GetBtnRunState+0x72>
	}

	btn1_long_rd = 0;
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <GetBtnRunState+0x80>)
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
	btn1_short_rd = 0;
 800169e:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <GetBtnRunState+0x7c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]

	//	if (short_state1 == 0x00 && long_state1 == 0x00)	return 0x00;
	//	if (short_state1 == 0x01 && long_state1 == 0x00)	return 0x01;
	//	if (short_state1 == 0x00 && long_state1 == 0x01)	return 0x02;
	return 0x00;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	20000261 	.word	0x20000261
 80016b4:	20000260 	.word	0x20000260

080016b8 <GetBtnUpState>:
//--------------------------------------------------------------------------
uint8_t GetBtnUpState()
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x00)
 80016bc:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <GetBtnUpState+0x7c>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d10b      	bne.n	80016dc <GetBtnUpState+0x24>
 80016c4:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <GetBtnUpState+0x80>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d107      	bne.n	80016dc <GetBtnUpState+0x24>
	{
		btn2_long_rd = 0;
 80016cc:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <GetBtnUpState+0x80>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 80016d2:	4b18      	ldr	r3, [pc, #96]	; (8001734 <GetBtnUpState+0x7c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
		return 0x00;
 80016d8:	2300      	movs	r3, #0
 80016da:	e026      	b.n	800172a <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x01 && btn2_long_rd == 0x00)
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <GetBtnUpState+0x7c>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d10b      	bne.n	80016fc <GetBtnUpState+0x44>
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <GetBtnUpState+0x80>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d107      	bne.n	80016fc <GetBtnUpState+0x44>
	{
		btn2_long_rd = 0;
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <GetBtnUpState+0x80>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <GetBtnUpState+0x7c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
		return 0x01;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e016      	b.n	800172a <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x01)
 80016fc:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <GetBtnUpState+0x7c>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d10b      	bne.n	800171c <GetBtnUpState+0x64>
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <GetBtnUpState+0x80>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d107      	bne.n	800171c <GetBtnUpState+0x64>
	{
		btn2_long_rd = 0;
 800170c:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <GetBtnUpState+0x80>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 8001712:	4b08      	ldr	r3, [pc, #32]	; (8001734 <GetBtnUpState+0x7c>)
 8001714:	2200      	movs	r2, #0
 8001716:	701a      	strb	r2, [r3, #0]
		return 0x02;
 8001718:	2302      	movs	r3, #2
 800171a:	e006      	b.n	800172a <GetBtnUpState+0x72>
	}

	btn2_long_rd = 0;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <GetBtnUpState+0x80>)
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
	btn2_short_rd = 0;
 8001722:	4b04      	ldr	r3, [pc, #16]	; (8001734 <GetBtnUpState+0x7c>)
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
	//	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	//	if (short_state2 == 0x00 && long_state2 == 0x00)	return 0x00;
	//	if (short_state2 == 0x01 && long_state2 == 0x00)	return 0x01;
	//	if (short_state2 == 0x00 && long_state2 == 0x01)	return 0x02;
	return 0x00;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000269 	.word	0x20000269
 8001738:	20000268 	.word	0x20000268

0800173c <GetBtnDownState>:
//--------------------------------------------------------------------------
uint8_t GetBtnDownState()
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x00)
 8001740:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <GetBtnDownState+0x7c>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10b      	bne.n	8001760 <GetBtnDownState+0x24>
 8001748:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <GetBtnDownState+0x80>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d107      	bne.n	8001760 <GetBtnDownState+0x24>
	{
		btn3_long_rd = 0;
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <GetBtnDownState+0x80>)
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 8001756:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <GetBtnDownState+0x7c>)
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]
		return 0x00;
 800175c:	2300      	movs	r3, #0
 800175e:	e026      	b.n	80017ae <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x01 && btn3_long_rd == 0x00)
 8001760:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <GetBtnDownState+0x7c>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d10b      	bne.n	8001780 <GetBtnDownState+0x44>
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <GetBtnDownState+0x80>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d107      	bne.n	8001780 <GetBtnDownState+0x44>
	{
		btn3_long_rd = 0;
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <GetBtnDownState+0x80>)
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <GetBtnDownState+0x7c>)
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
		return 0x01;
 800177c:	2301      	movs	r3, #1
 800177e:	e016      	b.n	80017ae <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x01)
 8001780:	4b0d      	ldr	r3, [pc, #52]	; (80017b8 <GetBtnDownState+0x7c>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d10b      	bne.n	80017a0 <GetBtnDownState+0x64>
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <GetBtnDownState+0x80>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d107      	bne.n	80017a0 <GetBtnDownState+0x64>
	{
		btn3_long_rd = 0;
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <GetBtnDownState+0x80>)
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <GetBtnDownState+0x7c>)
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
		return 0x02;
 800179c:	2302      	movs	r3, #2
 800179e:	e006      	b.n	80017ae <GetBtnDownState+0x72>
	}

	btn3_long_rd = 0;
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <GetBtnDownState+0x80>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
	btn3_short_rd = 0;
 80017a6:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <GetBtnDownState+0x7c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
	//	if (short_state3 == 0x00 && long_state3 == 0x00)	return 0x00;
	//	if (short_state3 == 0x01 && long_state3 == 0x00)	return 0x01;
	//	if (short_state3 == 0x00 && long_state3 == 0x01)	return 0x02;
	return 0x00;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	20000271 	.word	0x20000271
 80017bc:	20000270 	.word	0x20000270

080017c0 <EnableTIM3_PB4>:
// char trans2_str[64] = {
// 	0,
// };
//--------------------------------------------------------------------------
void EnableTIM3_PB4()
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
	timWork = 1;
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <EnableTIM3_PB4+0x14>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	701a      	strb	r2, [r3, #0]
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	20000272 	.word	0x20000272

080017d8 <GetTIM3>:
uint16_t GetTIM3()
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
	return g_vTIM3_PB4;
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <GetTIM3+0x14>)
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	b29b      	uxth	r3, r3
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20000274 	.word	0x20000274

080017f0 <resValTIM3_PB4>:
void resValTIM3_PB4()
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
	g_vTIM3_PB4 = 0;
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <resValTIM3_PB4+0x14>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	801a      	strh	r2, [r3, #0]
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	20000274 	.word	0x20000274

08001808 <EnableTIM4_PB6>:
//--------------------------------------------------------------------------
void EnableTIM4_PB6()
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
	timWork = 0;
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <EnableTIM4_PB6+0x14>)
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20000272 	.word	0x20000272

08001820 <GetTIM4>:
uint16_t GetTIM4()
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
	return g_vTIM4_PB6;
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <GetTIM4+0x14>)
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	b29b      	uxth	r3, r3
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	20000276 	.word	0x20000276

08001838 <resValTIM4_PB6>:
void resValTIM4_PB6()
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
	g_vTIM4_PB6 = 0;
 800183c:	4b03      	ldr	r3, [pc, #12]	; (800184c <resValTIM4_PB6+0x14>)
 800183e:	2200      	movs	r2, #0
 8001840:	801a      	strh	r2, [r3, #0]
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000276 	.word	0x20000276

08001850 <HAL_TIM_IC_CaptureCallback>:
//--------------------------------------------------------------------------
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	uint16_t periodTIM3, pulseWidthTIM3, periodTIM4, pulseWidthTIM4;

	if (timWork)
 8001858:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d027      	beq.n	80018b2 <HAL_TIM_IC_CaptureCallback+0x62>
	{
		if (htim->Instance == TIM3)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a29      	ldr	r2, [pc, #164]	; (800190c <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d149      	bne.n	8001900 <HAL_TIM_IC_CaptureCallback+0xb0>
		{
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	7f1b      	ldrb	r3, [r3, #28]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d145      	bne.n	8001900 <HAL_TIM_IC_CaptureCallback+0xb0>
			{
				periodTIM3 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8001874:	2100      	movs	r1, #0
 8001876:	4826      	ldr	r0, [pc, #152]	; (8001910 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001878:	f005 fb96 	bl	8006fa8 <HAL_TIM_ReadCapturedValue>
 800187c:	4603      	mov	r3, r0
 800187e:	823b      	strh	r3, [r7, #16]
				pulseWidthTIM3 = HAL_TIM_ReadCapturedValue(&htim3,
 8001880:	2104      	movs	r1, #4
 8001882:	4823      	ldr	r0, [pc, #140]	; (8001910 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001884:	f005 fb90 	bl	8006fa8 <HAL_TIM_ReadCapturedValue>
 8001888:	4603      	mov	r3, r0
 800188a:	81fb      	strh	r3, [r7, #14]
														   TIM_CHANNEL_2);

				TIM3->CNT = 0;
 800188c:	4b1f      	ldr	r3, [pc, #124]	; (800190c <HAL_TIM_IC_CaptureCallback+0xbc>)
 800188e:	2200      	movs	r2, #0
 8001890:	625a      	str	r2, [r3, #36]	; 0x24

				int16_t deltaTIM3 = (int16_t)periodTIM3 - (int16_t)pulseWidthTIM3;
 8001892:	8a3a      	ldrh	r2, [r7, #16]
 8001894:	89fb      	ldrh	r3, [r7, #14]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	b29b      	uxth	r3, r3
 800189a:	81bb      	strh	r3, [r7, #12]
				deltaTIM3 = (deltaTIM3 < 0) ? (-1 * deltaTIM3) : deltaTIM3;
 800189c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	bfb8      	it	lt
 80018a4:	425b      	neglt	r3, r3
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	81bb      	strh	r3, [r7, #12]
				g_vTIM3_PB4 = deltaTIM3;
 80018aa:	89ba      	ldrh	r2, [r7, #12]
 80018ac:	4b19      	ldr	r3, [pc, #100]	; (8001914 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80018ae:	801a      	strh	r2, [r3, #0]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
				g_vTIM4_PB6 = deltaTIM4;
			}
		}
	}
}
 80018b0:	e026      	b.n	8001900 <HAL_TIM_IC_CaptureCallback+0xb0>
		if (htim->Instance == TIM4)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a18      	ldr	r2, [pc, #96]	; (8001918 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d121      	bne.n	8001900 <HAL_TIM_IC_CaptureCallback+0xb0>
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	7f1b      	ldrb	r3, [r3, #28]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d11d      	bne.n	8001900 <HAL_TIM_IC_CaptureCallback+0xb0>
				periodTIM4 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 80018c4:	2100      	movs	r1, #0
 80018c6:	4815      	ldr	r0, [pc, #84]	; (800191c <HAL_TIM_IC_CaptureCallback+0xcc>)
 80018c8:	f005 fb6e 	bl	8006fa8 <HAL_TIM_ReadCapturedValue>
 80018cc:	4603      	mov	r3, r0
 80018ce:	82fb      	strh	r3, [r7, #22]
				pulseWidthTIM4 = HAL_TIM_ReadCapturedValue(&htim4,
 80018d0:	2104      	movs	r1, #4
 80018d2:	4812      	ldr	r0, [pc, #72]	; (800191c <HAL_TIM_IC_CaptureCallback+0xcc>)
 80018d4:	f005 fb68 	bl	8006fa8 <HAL_TIM_ReadCapturedValue>
 80018d8:	4603      	mov	r3, r0
 80018da:	82bb      	strh	r3, [r7, #20]
				TIM4->CNT = 0;
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80018de:	2200      	movs	r2, #0
 80018e0:	625a      	str	r2, [r3, #36]	; 0x24
				int16_t deltaTIM4 = (int16_t)periodTIM4 - (int16_t)pulseWidthTIM4;
 80018e2:	8afa      	ldrh	r2, [r7, #22]
 80018e4:	8abb      	ldrh	r3, [r7, #20]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	827b      	strh	r3, [r7, #18]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
 80018ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	bfb8      	it	lt
 80018f4:	425b      	neglt	r3, r3
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	827b      	strh	r3, [r7, #18]
				g_vTIM4_PB6 = deltaTIM4;
 80018fa:	8a7a      	ldrh	r2, [r7, #18]
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80018fe:	801a      	strh	r2, [r3, #0]
}
 8001900:	bf00      	nop
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000272 	.word	0x20000272
 800190c:	40000400 	.word	0x40000400
 8001910:	200008fc 	.word	0x200008fc
 8001914:	20000274 	.word	0x20000274
 8001918:	40000800 	.word	0x40000800
 800191c:	200004ac 	.word	0x200004ac
 8001920:	20000276 	.word	0x20000276

08001924 <GetADC>:
//**************************************************************************
#if TEST_ADC
volatile uint16_t g_VADC = 0;

uint16_t GetADC()
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
	return g_VADC;
 8001928:	4b03      	ldr	r3, [pc, #12]	; (8001938 <GetADC+0x14>)
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	b29b      	uxth	r3, r3
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	20000278 	.word	0x20000278

0800193c <HAL_ADC_ConvCpltCallback>:
//--------------------------------------------------------------------------
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a06      	ldr	r2, [pc, #24]	; (8001964 <HAL_ADC_ConvCpltCallback+0x28>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d106      	bne.n	800195c <HAL_ADC_ConvCpltCallback+0x20>
	{
		g_VADC = HAL_ADC_GetValue(&hadc1); // глобальная переменна g_VADC вычитывается
 800194e:	4806      	ldr	r0, [pc, #24]	; (8001968 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001950:	f001 fcb0 	bl	80032b4 <HAL_ADC_GetValue>
 8001954:	4603      	mov	r3, r0
 8001956:	b29a      	uxth	r2, r3
 8001958:	4b04      	ldr	r3, [pc, #16]	; (800196c <HAL_ADC_ConvCpltCallback+0x30>)
 800195a:	801a      	strh	r2, [r3, #0]
	}
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40012400 	.word	0x40012400
 8001968:	20000944 	.word	0x20000944
 800196c:	20000278 	.word	0x20000278

08001970 <runCommands>:
	Калибровка 
	На вход щупа подается семетричная пила с частотой 1кГц с оффестом установленным на ип.
	после компарирования сигнала МК измеряет длительность импульса
	т.к. 1 кГц соотвествет длительности в 500 мс то это означает что мы попапали в полуку офсета.
	--------------------------------------------------------------------------*/
{
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 8001976:	af00      	add	r7, sp, #0
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	6018      	str	r0, [r3, #0]
 800197c:	463b      	mov	r3, r7
 800197e:	6019      	str	r1, [r3, #0]
	if (*Len < 1)
 8001980:	463b      	mov	r3, r7
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 83f0 	beq.w	800216c <runCommands+0x7fc>

	//--------------------------------------------------------------------------

	uint8_t UserTxBufferFS[APP_TX_DATA_SIZE];
	uint16_t tVal16;
	uint8_t cmd = Buf[0];
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	//--------------------------------------------------------------------------
	if 		(cmd == 0x01)	// Relay:1 - 12V	[0x01 - 0x01]
 8001996:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 800199a:	2b01      	cmp	r3, #1
 800199c:	d16c      	bne.n	8001a78 <runCommands+0x108>
	{
		if (*Len >= 2 && (Buf[1] == 0x01 || Buf[1] == 0x00))
 800199e:	463b      	mov	r3, r7
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d957      	bls.n	8001a58 <runCommands+0xe8>
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	3301      	adds	r3, #1
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d005      	beq.n	80019c0 <runCommands+0x50>
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	3301      	adds	r3, #1
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d14b      	bne.n	8001a58 <runCommands+0xe8>
		{
			if (Buf[1] == 0x01)
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	3301      	adds	r3, #1
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d11f      	bne.n	8001a0c <runCommands+0x9c>
			{
				#if TEST_RELAY
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 80019cc:	2201      	movs	r2, #1
 80019ce:	2104      	movs	r1, #4
 80019d0:	48d6      	ldr	r0, [pc, #856]	; (8001d2c <runCommands+0x3bc>)
 80019d2:	f002 fc68 	bl	80042a6 <HAL_GPIO_WritePin>
				RelayState = m12;
 80019d6:	4bd6      	ldr	r3, [pc, #856]	; (8001d30 <runCommands+0x3c0>)
 80019d8:	2201      	movs	r2, #1
 80019da:	701a      	strb	r2, [r3, #0]
				printf("RelayState:12V - %d \n", RelayState);
 80019dc:	4bd4      	ldr	r3, [pc, #848]	; (8001d30 <runCommands+0x3c0>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	48d4      	ldr	r0, [pc, #848]	; (8001d34 <runCommands+0x3c4>)
 80019e4:	f009 fe50 	bl	800b688 <iprintf>
				SetAllDAC();
 80019e8:	f7ff fdfe 	bl	80015e8 <SetAllDAC>
				UserTxBufferFS[0] = cmd;
 80019ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f0:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80019f4:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 80019f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fa:	2200      	movs	r2, #0
 80019fc:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 80019fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a02:	2102      	movs	r1, #2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f009 fa21 	bl	800ae4c <CDC_Transmit_FS>
				#endif /* TEST_RELAY */
				return;
 8001a0a:	e3b4      	b.n	8002176 <runCommands+0x806>
			}
			else if (Buf[1] == 0x00)
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	3301      	adds	r3, #1
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d11f      	bne.n	8001a58 <runCommands+0xe8>
			{
				#if TEST_RELAY
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2104      	movs	r1, #4
 8001a1c:	48c3      	ldr	r0, [pc, #780]	; (8001d2c <runCommands+0x3bc>)
 8001a1e:	f002 fc42 	bl	80042a6 <HAL_GPIO_WritePin>
				RelayState = m27;
 8001a22:	4bc3      	ldr	r3, [pc, #780]	; (8001d30 <runCommands+0x3c0>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
				printf("RelayState:27V - %d \n", RelayState);
 8001a28:	4bc1      	ldr	r3, [pc, #772]	; (8001d30 <runCommands+0x3c0>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	48c2      	ldr	r0, [pc, #776]	; (8001d38 <runCommands+0x3c8>)
 8001a30:	f009 fe2a 	bl	800b688 <iprintf>
				SetAllDAC();
 8001a34:	f7ff fdd8 	bl	80015e8 <SetAllDAC>

				UserTxBufferFS[0] = cmd;
 8001a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a3c:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001a40:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 8001a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a46:	2200      	movs	r2, #0
 8001a48:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 8001a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a4e:	2102      	movs	r1, #2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f009 f9fb 	bl	800ae4c <CDC_Transmit_FS>
				#endif /* TEST_RELAY */
				return;
 8001a56:	e38e      	b.n	8002176 <runCommands+0x806>
			}
		}

		UserTxBufferFS[0] = cmd;
 8001a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5c:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001a60:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8001a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a66:	2201      	movs	r2, #1
 8001a68:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8001a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6e:	2102      	movs	r1, #2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f009 f9eb 	bl	800ae4c <CDC_Transmit_FS>
		return;
 8001a76:	e37e      	b.n	8002176 <runCommands+0x806>

		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x02)	// DA:4095
 8001a78:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d141      	bne.n	8001b04 <runCommands+0x194>
	{
		if (*Len >= 3)
 8001a80:	463b      	mov	r3, r7
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d92c      	bls.n	8001ae4 <runCommands+0x174>
		{
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 8001a8a:	f7ff feb1 	bl	80017f0 <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 8001a8e:	f7ff fed3 	bl	8001838 <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	3301      	adds	r3, #1
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001aa0:	801a      	strh	r2, [r3, #0]
			SetDacA(tVal16,RelayState);
 8001aa2:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	4aa1      	ldr	r2, [pc, #644]	; (8001d30 <runCommands+0x3c0>)
 8001aac:	7812      	ldrb	r2, [r2, #0]
 8001aae:	4611      	mov	r1, r2
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fd51 	bl	8001558 <SetDacA>
//						SetDacA(tVal16);

			printf("DacA: %d\n", tVal16);
 8001ab6:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	4619      	mov	r1, r3
 8001abe:	489f      	ldr	r0, [pc, #636]	; (8001d3c <runCommands+0x3cc>)
 8001ac0:	f009 fde2 	bl	800b688 <iprintf>
			UserTxBufferFS[0] = cmd;
 8001ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac8:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001acc:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 8001ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	705a      	strb	r2, [r3, #1]

			CDC_Transmit_FS(UserTxBufferFS, 2);
 8001ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ada:	2102      	movs	r1, #2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f009 f9b5 	bl	800ae4c <CDC_Transmit_FS>
			return;
 8001ae2:	e348      	b.n	8002176 <runCommands+0x806>
		}

		UserTxBufferFS[0] = cmd;
 8001ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae8:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001aec:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8001aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af2:	2201      	movs	r2, #1
 8001af4:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8001af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001afa:	2102      	movs	r1, #2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f009 f9a5 	bl	800ae4c <CDC_Transmit_FS>
		return;
 8001b02:	e338      	b.n	8002176 <runCommands+0x806>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x03)	// DB:4095
 8001b04:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d141      	bne.n	8001b90 <runCommands+0x220>
	{
		if (*Len >= 3)
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d92c      	bls.n	8001b70 <runCommands+0x200>
		{
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 8001b16:	f7ff fe6b 	bl	80017f0 <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 8001b1a:	f7ff fe8d 	bl	8001838 <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 8001b1e:	1d3b      	adds	r3, r7, #4
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	3301      	adds	r3, #1
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001b2c:	801a      	strh	r2, [r3, #0]
//			SetDacB(tVal16);
			SetDacB(tVal16,RelayState);
 8001b2e:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	b21b      	sxth	r3, r3
 8001b36:	4a7e      	ldr	r2, [pc, #504]	; (8001d30 <runCommands+0x3c0>)
 8001b38:	7812      	ldrb	r2, [r2, #0]
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fd2f 	bl	80015a0 <SetDacB>

			UserTxBufferFS[0] = cmd;
 8001b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b46:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001b4a:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 8001b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b50:	2200      	movs	r2, #0
 8001b52:	705a      	strb	r2, [r3, #1]

			printf("DacB: %d \n", tVal16);
 8001b54:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4878      	ldr	r0, [pc, #480]	; (8001d40 <runCommands+0x3d0>)
 8001b5e:	f009 fd93 	bl	800b688 <iprintf>

			CDC_Transmit_FS(UserTxBufferFS, 2);
 8001b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b66:	2102      	movs	r1, #2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f009 f96f 	bl	800ae4c <CDC_Transmit_FS>
			return;
 8001b6e:	e302      	b.n	8002176 <runCommands+0x806>
		}

		UserTxBufferFS[0] = cmd;
 8001b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b74:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001b78:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8001b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b7e:	2201      	movs	r2, #1
 8001b80:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8001b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b86:	2102      	movs	r1, #2
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f009 f95f 	bl	800ae4c <CDC_Transmit_FS>
		return;
 8001b8e:	e2f2      	b.n	8002176 <runCommands+0x806>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x04)	// ADC?
 8001b90:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d119      	bne.n	8001bcc <runCommands+0x25c>
	{
		tVal16 = GetADC();
 8001b98:	f7ff fec4 	bl	8001924 <GetADC>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001ba4:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8001ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001baa:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001bae:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &tVal16, sizeof(tVal16));
 8001bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8001bba:	8812      	ldrh	r2, [r2, #0]
 8001bbc:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 3);
 8001bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc2:	2103      	movs	r1, #3
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f009 f941 	bl	800ae4c <CDC_Transmit_FS>
		return;
 8001bca:	e2d4      	b.n	8002176 <runCommands+0x806>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x05)	// Relay?DA?DB?
 8001bcc:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001bd0:	2b05      	cmp	r3, #5
 8001bd2:	d12d      	bne.n	8001c30 <runCommands+0x2c0>
	{
		UserTxBufferFS[0] = cmd;
 8001bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd8:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001bdc:	701a      	strb	r2, [r3, #0]
		#if TEST_RELAY
		UserTxBufferFS[1] = RelayState;
 8001bde:	4b54      	ldr	r3, [pc, #336]	; (8001d30 <runCommands+0x3c0>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be8:	705a      	strb	r2, [r3, #1]
		#endif /* TEST_RELAY */

		tVal16 = GetDacA();
 8001bea:	f7ff fd0f 	bl	800160c <GetDacA>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001bf6:	801a      	strh	r2, [r3, #0]
		memcpy(UserTxBufferFS + 2, &tVal16, sizeof(tVal16));
 8001bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8001c02:	8812      	ldrh	r2, [r2, #0]
 8001c04:	801a      	strh	r2, [r3, #0]

		tVal16 = GetDacB();
 8001c06:	f7ff fd0b 	bl	8001620 <GetDacB>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001c12:	801a      	strh	r2, [r3, #0]
		memcpy(UserTxBufferFS + 4, &tVal16, sizeof(tVal16));
 8001c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c18:	3304      	adds	r3, #4
 8001c1a:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8001c1e:	8812      	ldrh	r2, [r2, #0]
 8001c20:	801a      	strh	r2, [r3, #0]

		CDC_Transmit_FS(UserTxBufferFS, 6);
 8001c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c26:	2106      	movs	r1, #6
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f009 f90f 	bl	800ae4c <CDC_Transmit_FS>
		return;
 8001c2e:	e2a2      	b.n	8002176 <runCommands+0x806>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x06)	// Btn?
 8001c30:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001c34:	2b06      	cmp	r3, #6
 8001c36:	d120      	bne.n	8001c7a <runCommands+0x30a>
	{
		UserTxBufferFS[0] = cmd;
 8001c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3c:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001c40:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = GetBtnRunState();
 8001c42:	f7ff fcf7 	bl	8001634 <GetBtnRunState>
 8001c46:	4603      	mov	r3, r0
 8001c48:	461a      	mov	r2, r3
 8001c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4e:	705a      	strb	r2, [r3, #1]
		UserTxBufferFS[2] = GetBtnUpState();
 8001c50:	f7ff fd32 	bl	80016b8 <GetBtnUpState>
 8001c54:	4603      	mov	r3, r0
 8001c56:	461a      	mov	r2, r3
 8001c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5c:	709a      	strb	r2, [r3, #2]
		UserTxBufferFS[3] = GetBtnDownState();
 8001c5e:	f7ff fd6d 	bl	800173c <GetBtnDownState>
 8001c62:	4603      	mov	r3, r0
 8001c64:	461a      	mov	r2, r3
 8001c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6a:	70da      	strb	r2, [r3, #3]
		CDC_Transmit_FS(UserTxBufferFS, 4);
 8001c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c70:	2104      	movs	r1, #4
 8001c72:	4618      	mov	r0, r3
 8001c74:	f009 f8ea 	bl	800ae4c <CDC_Transmit_FS>
		return;
 8001c78:	e27d      	b.n	8002176 <runCommands+0x806>
		//--------------------------------------------------------------------------
		

	// ID?
	} else if (cmd == 0x07) {
 8001c7a:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001c7e:	2b07      	cmp	r3, #7
 8001c80:	d133      	bne.n	8001cea <runCommands+0x37a>
		char str[] = "prb_v0.3";
 8001c82:	f107 0318 	add.w	r3, r7, #24
 8001c86:	4a2f      	ldr	r2, [pc, #188]	; (8001d44 <runCommands+0x3d4>)
 8001c88:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c8a:	c303      	stmia	r3!, {r0, r1}
 8001c8c:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8001c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c92:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001c96:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = strlen(str);
 8001c98:	f107 0318 	add.w	r3, r7, #24
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fa57 	bl	8000150 <strlen>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001caa:	705a      	strb	r2, [r3, #1]
		memcpy(UserTxBufferFS + 2, str, strlen(str));
 8001cac:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001cb0:	3402      	adds	r4, #2
 8001cb2:	f107 0318 	add.w	r3, r7, #24
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fa4a 	bl	8000150 <strlen>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	f107 0318 	add.w	r3, r7, #24
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	f009 fcc9 	bl	800b65c <memcpy>
		CDC_Transmit_FS(UserTxBufferFS, strlen(str) + 2);
 8001cca:	f107 0318 	add.w	r3, r7, #24
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fa3e 	bl	8000150 <strlen>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	3302      	adds	r3, #2
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f009 f8b2 	bl	800ae4c <CDC_Transmit_FS>
 8001ce8:	e245      	b.n	8002176 <runCommands+0x806>
	На вход щупа подается семетричная пила с частотой 1кГц с оффестом установленным на ип.
	после компарирования сигнала МК измеряет длительность импульса
	т.к. 1 кГц соотвествет длительности в 500 мс то это означает что мы попапали в полуку офсета.*/
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x08)	// Калибровка TIM inHL?
 8001cea:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d12a      	bne.n	8001d48 <runCommands+0x3d8>
	{
		EnableTIM3_PB4();
 8001cf2:	f7ff fd65 	bl	80017c0 <EnableTIM3_PB4>
		uint16_t temp = GetTIM3();
 8001cf6:	f7ff fd6f 	bl	80017d8 <GetTIM3>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	f107 0316 	add.w	r3, r7, #22
 8001d02:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8001d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d08:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001d0c:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &temp, sizeof(uint16_t));
 8001d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d12:	3301      	adds	r3, #1
 8001d14:	f107 0216 	add.w	r2, r7, #22
 8001d18:	8812      	ldrh	r2, [r2, #0]
 8001d1a:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 8001d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d20:	2103      	movs	r1, #3
 8001d22:	4618      	mov	r0, r3
 8001d24:	f009 f892 	bl	800ae4c <CDC_Transmit_FS>
 8001d28:	e225      	b.n	8002176 <runCommands+0x806>
 8001d2a:	bf00      	nop
 8001d2c:	40010800 	.word	0x40010800
 8001d30:	20000010 	.word	0x20000010
 8001d34:	0800c9e8 	.word	0x0800c9e8
 8001d38:	0800ca00 	.word	0x0800ca00
 8001d3c:	0800ca18 	.word	0x0800ca18
 8001d40:	0800ca24 	.word	0x0800ca24
 8001d44:	0800ca48 	.word	0x0800ca48
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x09)	// Калибровка TIM inLL?
 8001d48:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001d4c:	2b09      	cmp	r3, #9
 8001d4e:	d11b      	bne.n	8001d88 <runCommands+0x418>
	{
		EnableTIM4_PB6();
 8001d50:	f7ff fd5a 	bl	8001808 <EnableTIM4_PB6>
		uint16_t temp = GetTIM4();
 8001d54:	f7ff fd64 	bl	8001820 <GetTIM4>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8001d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d66:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001d6a:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &temp, sizeof(uint16_t));
 8001d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d70:	3301      	adds	r3, #1
 8001d72:	f107 0214 	add.w	r2, r7, #20
 8001d76:	8812      	ldrh	r2, [r2, #0]
 8001d78:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 8001d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d7e:	2103      	movs	r1, #3
 8001d80:	4618      	mov	r0, r3
 8001d82:	f009 f863 	bl	800ae4c <CDC_Transmit_FS>
 8001d86:	e1f6      	b.n	8002176 <runCommands+0x806>
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0A)	// TODO: Прием калибровочной таблицы [0x0A][1-4][offset][count][data] 	answer: [0x0A]+[1-4]+[offset]+[count]+[status] (0x00 - сработал; 0x01 - не сработал)
 8001d88:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001d8c:	2b0a      	cmp	r3, #10
 8001d8e:	f040 81aa 	bne.w	80020e6 <runCommands+0x776>
	{
		//Прием калибровочной таблицы [0x0A][1-4][offset][count][data]
		//FIXME: За одну посылку можно получить максимум 64 byte. Нужно организовать пакетную передачу
		uint16_t tOffset, tCount, tData;
		if (*Len >= 2 && Buf[1] >= 0x00 && Buf[1] <= 0x03)
 8001d92:	463b      	mov	r3, r7
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	f240 8194 	bls.w	80020c6 <runCommands+0x756>
 8001d9e:	1d3b      	adds	r3, r7, #4
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	3301      	adds	r3, #1
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	f200 818d 	bhi.w	80020c6 <runCommands+0x756>
		{
			if 		(Buf[1] == 0x00)	//А_m12
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	3301      	adds	r3, #1
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d15f      	bne.n	8001e78 <runCommands+0x508>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	f107 0312 	add.w	r3, r7, #18
 8001dc6:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8001dc8:	1d3b      	adds	r3, r7, #4
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	f107 0310 	add.w	r3, r7, #16
 8001dd6:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
 8001dde:	e01f      	b.n	8001e20 <runCommands+0x4b0>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8001de0:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	3306      	adds	r3, #6
 8001de8:	1d3a      	adds	r2, r7, #4
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	4413      	add	r3, r2
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	f107 030e 	add.w	r3, r7, #14
 8001df6:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValA_m12[i + tOffset] = tData;
 8001df8:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8001dfc:	f107 0212 	add.w	r2, r7, #18
 8001e00:	8812      	ldrh	r2, [r2, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	f107 020e 	add.w	r2, r7, #14
 8001e08:	8811      	ldrh	r1, [r2, #0]
 8001e0a:	4acd      	ldr	r2, [pc, #820]	; (8002140 <runCommands+0x7d0>)
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4413      	add	r3, r2
 8001e12:	460a      	mov	r2, r1
 8001e14:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 8001e16:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
 8001e20:	f107 0310 	add.w	r3, r7, #16
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	f8b7 222e 	ldrh.w	r2, [r7, #558]	; 0x22e
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d3d8      	bcc.n	8001de0 <runCommands+0x470>
				}

				changeTableFlag = true;
 8001e2e:	4bc5      	ldr	r3, [pc, #788]	; (8002144 <runCommands+0x7d4>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	701a      	strb	r2, [r3, #0]
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 8001e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e38:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001e3c:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8001e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e42:	2201      	movs	r2, #1
 8001e44:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2			->4
 8001e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	f107 0212 	add.w	r2, r7, #18
 8001e50:	8812      	ldrh	r2, [r2, #0]
 8001e52:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8001e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e58:	3304      	adds	r3, #4
 8001e5a:	f107 0210 	add.w	r2, r7, #16
 8001e5e:	8812      	ldrh	r2, [r2, #0]
 8001e60:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1		->7
 8001e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e66:	2200      	movs	r2, #0
 8001e68:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8001e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e6e:	2101      	movs	r1, #1
 8001e70:	4618      	mov	r0, r3
 8001e72:	f008 ffeb 	bl	800ae4c <CDC_Transmit_FS>
				return;
 8001e76:	e17e      	b.n	8002176 <runCommands+0x806>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x01)	//B_m12
 8001e78:	1d3b      	adds	r3, r7, #4
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d15c      	bne.n	8001f3e <runCommands+0x5ce>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	3302      	adds	r3, #2
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	f107 0312 	add.w	r3, r7, #18
 8001e92:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8001e94:	1d3b      	adds	r3, r7, #4
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	f107 0310 	add.w	r3, r7, #16
 8001ea2:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
 8001eaa:	e01f      	b.n	8001eec <runCommands+0x57c>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8001eac:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	3306      	adds	r3, #6
 8001eb4:	1d3a      	adds	r2, r7, #4
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	4413      	add	r3, r2
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	f107 030e 	add.w	r3, r7, #14
 8001ec2:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValB_m12[i + tOffset] = tData;
 8001ec4:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8001ec8:	f107 0212 	add.w	r2, r7, #18
 8001ecc:	8812      	ldrh	r2, [r2, #0]
 8001ece:	4413      	add	r3, r2
 8001ed0:	f107 020e 	add.w	r2, r7, #14
 8001ed4:	8811      	ldrh	r1, [r2, #0]
 8001ed6:	4a9a      	ldr	r2, [pc, #616]	; (8002140 <runCommands+0x7d0>)
 8001ed8:	3318      	adds	r3, #24
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	4413      	add	r3, r2
 8001ede:	460a      	mov	r2, r1
 8001ee0:	805a      	strh	r2, [r3, #2]
				for (uint16_t i = 0; i < tCount; i++)
 8001ee2:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
 8001eec:	f107 0310 	add.w	r3, r7, #16
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	f8b7 222c 	ldrh.w	r2, [r7, #556]	; 0x22c
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d3d8      	bcc.n	8001eac <runCommands+0x53c>
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 8001efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001efe:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001f02:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8001f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f08:	2201      	movs	r2, #1
 8001f0a:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 8001f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f10:	3302      	adds	r3, #2
 8001f12:	f107 0212 	add.w	r2, r7, #18
 8001f16:	8812      	ldrh	r2, [r2, #0]
 8001f18:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8001f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1e:	3304      	adds	r3, #4
 8001f20:	f107 0210 	add.w	r2, r7, #16
 8001f24:	8812      	ldrh	r2, [r2, #0]
 8001f26:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 8001f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8001f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f34:	2101      	movs	r1, #1
 8001f36:	4618      	mov	r0, r3
 8001f38:	f008 ff88 	bl	800ae4c <CDC_Transmit_FS>
				return;
 8001f3c:	e11b      	b.n	8002176 <runCommands+0x806>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x02)	//A_m27
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	3301      	adds	r3, #1
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d15a      	bne.n	8002000 <runCommands+0x690>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 8001f4a:	1d3b      	adds	r3, r7, #4
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	3302      	adds	r3, #2
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	f107 0312 	add.w	r3, r7, #18
 8001f58:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8001f5a:	1d3b      	adds	r3, r7, #4
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	3304      	adds	r3, #4
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	f107 0310 	add.w	r3, r7, #16
 8001f68:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f8a7 322a 	strh.w	r3, [r7, #554]	; 0x22a
 8001f70:	e01d      	b.n	8001fae <runCommands+0x63e>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8001f72:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	3306      	adds	r3, #6
 8001f7a:	1d3a      	adds	r2, r7, #4
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	4413      	add	r3, r2
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	f107 030e 	add.w	r3, r7, #14
 8001f88:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValA_m27[i + tOffset] = tData;
 8001f8a:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 8001f8e:	f107 0212 	add.w	r2, r7, #18
 8001f92:	8812      	ldrh	r2, [r2, #0]
 8001f94:	4413      	add	r3, r2
 8001f96:	f107 020e 	add.w	r2, r7, #14
 8001f9a:	8811      	ldrh	r1, [r2, #0]
 8001f9c:	4a68      	ldr	r2, [pc, #416]	; (8002140 <runCommands+0x7d0>)
 8001f9e:	332c      	adds	r3, #44	; 0x2c
 8001fa0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for (uint16_t i = 0; i < tCount; i++)
 8001fa4:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 8001fa8:	3301      	adds	r3, #1
 8001faa:	f8a7 322a 	strh.w	r3, [r7, #554]	; 0x22a
 8001fae:	f107 0310 	add.w	r3, r7, #16
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	f8b7 222a 	ldrh.w	r2, [r7, #554]	; 0x22a
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d3da      	bcc.n	8001f72 <runCommands+0x602>
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 8001fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc0:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001fc4:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8001fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fca:	2201      	movs	r2, #1
 8001fcc:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 8001fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd2:	3302      	adds	r3, #2
 8001fd4:	f107 0212 	add.w	r2, r7, #18
 8001fd8:	8812      	ldrh	r2, [r2, #0]
 8001fda:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8001fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	f107 0210 	add.w	r2, r7, #16
 8001fe6:	8812      	ldrh	r2, [r2, #0]
 8001fe8:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 8001fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fee:	2200      	movs	r2, #0
 8001ff0:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8001ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f008 ff27 	bl	800ae4c <CDC_Transmit_FS>
				return;
 8001ffe:	e0ba      	b.n	8002176 <runCommands+0x806>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x03)	//B_m27
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	3301      	adds	r3, #1
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b03      	cmp	r3, #3
 800200a:	d15c      	bne.n	80020c6 <runCommands+0x756>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 800200c:	1d3b      	adds	r3, r7, #4
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	3302      	adds	r3, #2
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	b29a      	uxth	r2, r3
 8002016:	f107 0312 	add.w	r3, r7, #18
 800201a:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 800201c:	1d3b      	adds	r3, r7, #4
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	3304      	adds	r3, #4
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	b29a      	uxth	r2, r3
 8002026:	f107 0310 	add.w	r3, r7, #16
 800202a:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 800202c:	2300      	movs	r3, #0
 800202e:	f8a7 3228 	strh.w	r3, [r7, #552]	; 0x228
 8002032:	e01f      	b.n	8002074 <runCommands+0x704>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8002034:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	3306      	adds	r3, #6
 800203c:	1d3a      	adds	r2, r7, #4
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	4413      	add	r3, r2
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	b29a      	uxth	r2, r3
 8002046:	f107 030e 	add.w	r3, r7, #14
 800204a:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValB_m27[i + tOffset] = tData;
 800204c:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8002050:	f107 0212 	add.w	r2, r7, #18
 8002054:	8812      	ldrh	r2, [r2, #0]
 8002056:	4413      	add	r3, r2
 8002058:	f107 020e 	add.w	r2, r7, #14
 800205c:	8811      	ldrh	r1, [r2, #0]
 800205e:	4a38      	ldr	r2, [pc, #224]	; (8002140 <runCommands+0x7d0>)
 8002060:	332c      	adds	r3, #44	; 0x2c
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	460a      	mov	r2, r1
 8002068:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 800206a:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 800206e:	3301      	adds	r3, #1
 8002070:	f8a7 3228 	strh.w	r3, [r7, #552]	; 0x228
 8002074:	f107 0310 	add.w	r3, r7, #16
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 800207e:	429a      	cmp	r2, r3
 8002080:	d3d8      	bcc.n	8002034 <runCommands+0x6c4>
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 8002082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002086:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800208a:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 800208c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002090:	2201      	movs	r2, #1
 8002092:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 8002094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002098:	3302      	adds	r3, #2
 800209a:	f107 0212 	add.w	r2, r7, #18
 800209e:	8812      	ldrh	r2, [r2, #0]
 80020a0:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 80020a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a6:	3304      	adds	r3, #4
 80020a8:	f107 0210 	add.w	r2, r7, #16
 80020ac:	8812      	ldrh	r2, [r2, #0]
 80020ae:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 80020b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b4:	2200      	movs	r2, #0
 80020b6:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 80020b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020bc:	2101      	movs	r1, #1
 80020be:	4618      	mov	r0, r3
 80020c0:	f008 fec4 	bl	800ae4c <CDC_Transmit_FS>
				return;
 80020c4:	e057      	b.n	8002176 <runCommands+0x806>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
		}
		UserTxBufferFS[0] = cmd;
 80020c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ca:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80020ce:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 80020d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d4:	2201      	movs	r2, #1
 80020d6:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 80020d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020dc:	2102      	movs	r1, #2
 80020de:	4618      	mov	r0, r3
 80020e0:	f008 feb4 	bl	800ae4c <CDC_Transmit_FS>
		return;
 80020e4:	e047      	b.n	8002176 <runCommands+0x806>
		//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0B)	// TODO: Отправка CRC 1-4 таблицы [0x0B][1-4][CRC(1-4)]	answer:
 80020e6:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80020ea:	2b0b      	cmp	r3, #11
 80020ec:	d040      	beq.n	8002170 <runCommands+0x800>
	{
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0C)	// TODO: Прием длины калибровочной таблицы [0x0C][Длина][???]
 80020ee:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80020f2:	2b0c      	cmp	r3, #12
 80020f4:	d03e      	beq.n	8002174 <runCommands+0x804>
	{
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0D)	// TODO: Запись во флеш калибровочной таблицы [0x0D] data: 1B (0x00 - успешно; 0x01 - ошибка при записи)	answer: 0x0D + 1B status
 80020f6:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80020fa:	2b0d      	cmp	r3, #13
 80020fc:	d13b      	bne.n	8002176 <runCommands+0x806>
	{
		if (*Len >= 2 && (Buf[1] == 0x02))
 80020fe:	463b      	mov	r3, r7
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d921      	bls.n	800214c <runCommands+0x7dc>
 8002108:	1d3b      	adds	r3, r7, #4
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	3301      	adds	r3, #1
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b02      	cmp	r3, #2
 8002112:	d11b      	bne.n	800214c <runCommands+0x7dc>
		{
			//TODO: Функция записи фо флеш. FIXME: не работает запись фо флеш!
			 changeTableFlag = true;
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <runCommands+0x7d4>)
 8002116:	2201      	movs	r2, #1
 8002118:	701a      	strb	r2, [r3, #0]
			// writeTableInFlash();
			printf("changeTableFlag = true!");
 800211a:	480b      	ldr	r0, [pc, #44]	; (8002148 <runCommands+0x7d8>)
 800211c:	f009 fab4 	bl	800b688 <iprintf>
			UserTxBufferFS[0] = cmd;
 8002120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002124:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002128:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 800212a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800212e:	2200      	movs	r2, #0
 8002130:	705a      	strb	r2, [r3, #1]
			CDC_Transmit_FS(UserTxBufferFS, 2);
 8002132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002136:	2102      	movs	r1, #2
 8002138:	4618      	mov	r0, r3
 800213a:	f008 fe87 	bl	800ae4c <CDC_Transmit_FS>
			return;
 800213e:	e01a      	b.n	8002176 <runCommands+0x806>
 8002140:	200004f4 	.word	0x200004f4
 8002144:	20000254 	.word	0x20000254
 8002148:	0800ca30 	.word	0x0800ca30
		}
 		
		//--------------------------------------------------------------------------
		UserTxBufferFS[0] = cmd;
 800214c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002150:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002154:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8002156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800215a:	2201      	movs	r2, #1
 800215c:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 800215e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002162:	2102      	movs	r1, #2
 8002164:	4618      	mov	r0, r3
 8002166:	f008 fe71 	bl	800ae4c <CDC_Transmit_FS>
		return;
 800216a:	e004      	b.n	8002176 <runCommands+0x806>
		return;
 800216c:	bf00      	nop
 800216e:	e002      	b.n	8002176 <runCommands+0x806>
		return;
 8002170:	bf00      	nop
 8002172:	e000      	b.n	8002176 <runCommands+0x806>
		return;
 8002174:	bf00      	nop
		//--------------------------------------------------------------------------
	}
//-------------------------------------------------------------------------
	
}
 8002176:	f507 770d 	add.w	r7, r7, #564	; 0x234
 800217a:	46bd      	mov	sp, r7
 800217c:	bd90      	pop	{r4, r7, pc}
 800217e:	bf00      	nop

08002180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002186:	f000 fea5 	bl	8002ed4 <HAL_Init>

  /* USER CODE BEGIN Init */
//--------------------------------------------------------------------------
#if DWT_INIT
	DWT_Init();
 800218a:	f7ff f9b3 	bl	80014f4 <DWT_Init>
	//--------------------------------------------------------------------------

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800218e:	f000 f97f 	bl	8002490 <SystemClock_Config>
//-------------------------------------------------------------------------

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002192:	f000 fb29 	bl	80027e8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002196:	f000 fa2b 	bl	80025f0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800219a:	f008 fd95 	bl	800acc8 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800219e:	f000 f9d5 	bl	800254c <MX_ADC1_Init>
  MX_TIM3_Init();
 80021a2:	f000 fa5d 	bl	8002660 <MX_TIM3_Init>
  MX_TIM4_Init();
 80021a6:	f000 fabd 	bl	8002724 <MX_TIM4_Init>
  MX_CRC_Init();
 80021aa:	f000 fa0d 	bl	80025c8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
	//**************************************************************************
#if TEST_UID
	sprintf(buffer, "UID %x-%x-%lx-%lx\n", *idBase0, *idBase1, *idBase2, *idBase3);
 80021ae:	4b9e      	ldr	r3, [pc, #632]	; (8002428 <main+0x2a8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	4619      	mov	r1, r3
 80021b6:	4b9d      	ldr	r3, [pc, #628]	; (800242c <main+0x2ac>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	4b9c      	ldr	r3, [pc, #624]	; (8002430 <main+0x2b0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a9b      	ldr	r2, [pc, #620]	; (8002434 <main+0x2b4>)
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	9201      	str	r2, [sp, #4]
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	4603      	mov	r3, r0
 80021d0:	460a      	mov	r2, r1
 80021d2:	4999      	ldr	r1, [pc, #612]	; (8002438 <main+0x2b8>)
 80021d4:	4899      	ldr	r0, [pc, #612]	; (800243c <main+0x2bc>)
 80021d6:	f009 fa6f 	bl	800b6b8 <siprintf>
	printf(buffer);
 80021da:	4898      	ldr	r0, [pc, #608]	; (800243c <main+0x2bc>)
 80021dc:	f009 fa54 	bl	800b688 <iprintf>
#endif /* TEST_UID */

	//**************************************************************************
#if TEST_TIM_CAPTURE
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80021e0:	2100      	movs	r1, #0
 80021e2:	4897      	ldr	r0, [pc, #604]	; (8002440 <main+0x2c0>)
 80021e4:	f004 fc3e 	bl	8006a64 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80021e8:	2104      	movs	r1, #4
 80021ea:	4895      	ldr	r0, [pc, #596]	; (8002440 <main+0x2c0>)
 80021ec:	f004 fc3a 	bl	8006a64 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80021f0:	2100      	movs	r1, #0
 80021f2:	4894      	ldr	r0, [pc, #592]	; (8002444 <main+0x2c4>)
 80021f4:	f004 fc36 	bl	8006a64 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 80021f8:	2104      	movs	r1, #4
 80021fa:	4892      	ldr	r0, [pc, #584]	; (8002444 <main+0x2c4>)
 80021fc:	f004 fc32 	bl	8006a64 <HAL_TIM_IC_Start_IT>
#endif /* TEST_TIM_CAPTURE */
//--------------------------------------------------------------------------
#if TEST_DAC
	SetAllDAC();
 8002200:	f7ff f9f2 	bl	80015e8 <SetAllDAC>
#endif /* TEST_DAC */
	   //**************************************************************************
#if TEST_ADC
	HAL_ADCEx_Calibration_Start(&hadc1);
 8002204:	4890      	ldr	r0, [pc, #576]	; (8002448 <main+0x2c8>)
 8002206:	f001 fab1 	bl	800376c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_IT(&hadc1);
 800220a:	488f      	ldr	r0, [pc, #572]	; (8002448 <main+0x2c8>)
 800220c:	f000 ff9c 	bl	8003148 <HAL_ADC_Start_IT>
#endif /* TEST_ADC */
//**************************************************************************
#if TEST_FLASH_TABLE

//	flash_fill_calibTable();
	crete_calibration_table(&DevNVRAM.calibration_table);
 8002210:	488e      	ldr	r0, [pc, #568]	; (800244c <main+0x2cc>)
 8002212:	f7fe fead 	bl	8000f70 <crete_calibration_table>
	flash_write_calibTable();
 8002216:	f7fe fe13 	bl	8000e40 <flash_write_calibTable>
//	SetDacA(2080,m12);
//	SetDacA(3120,m12);
	SetDacA(2400,m12);
 800221a:	2101      	movs	r1, #1
 800221c:	f44f 6016 	mov.w	r0, #2400	; 0x960
 8002220:	f7ff f99a 	bl	8001558 <SetDacA>
	SetDacA(3120,m12);
 8002224:	2101      	movs	r1, #1
 8002226:	f44f 6043 	mov.w	r0, #3120	; 0xc30
 800222a:	f7ff f995 	bl	8001558 <SetDacA>
    // TODO: Надо по запросе какая версия калиброчной табцы высылать значения дефолтной таблице...
    //--------------------------------------------------------------------------
*/
#endif /* TEST_FLASH_TABLE */

	uint32_t _timer = 0; // для таймера в 10 сек
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// Циклически проверяем соотвествует ли информация в памяти массиву настроек?
		if ((HAL_GetTick() - _timer) > 10000) // интервал  10сек
 8002232:	f000 fea7 	bl	8002f84 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002240:	4293      	cmp	r3, r2
 8002242:	d902      	bls.n	800224a <main+0xca>
				HAL_Delay(100);
				//--------------------------------------------------------------------------
				printf("flash done");
			}*/
#endif /* TEST_FLASH_TABLE */
			_timer = HAL_GetTick();
 8002244:	f000 fe9e 	bl	8002f84 <HAL_GetTick>
 8002248:	60f8      	str	r0, [r7, #12]
		}

//**************************************************************************
#if TEST_READ_BTN //TODO: данная реализация плохо отрабатывает! TODO: Нужно переделать на EXTI+TIM

		uint32_t ms = HAL_GetTick();
 800224a:	f000 fe9b 	bl	8002f84 <HAL_GetTick>
 800224e:	60b8      	str	r0, [r7, #8]
		uint8_t key1_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12); // подставить свой пин //TODO: Проверить работу BACK key!
 8002250:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002254:	487e      	ldr	r0, [pc, #504]	; (8002450 <main+0x2d0>)
 8002256:	f002 f80f 	bl	8004278 <HAL_GPIO_ReadPin>
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]

		if (key1_state == 0 && !short_state1 && (ms - time_key1) > 50)
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d113      	bne.n	800228c <main+0x10c>
 8002264:	4b7b      	ldr	r3, [pc, #492]	; (8002454 <main+0x2d4>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10f      	bne.n	800228c <main+0x10c>
 800226c:	4b7a      	ldr	r3, [pc, #488]	; (8002458 <main+0x2d8>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b32      	cmp	r3, #50	; 0x32
 8002276:	d909      	bls.n	800228c <main+0x10c>
		{
			short_state1 = 1;
 8002278:	4b76      	ldr	r3, [pc, #472]	; (8002454 <main+0x2d4>)
 800227a:	2201      	movs	r2, #1
 800227c:	701a      	strb	r2, [r3, #0]
			long_state1 = 0;
 800227e:	4b77      	ldr	r3, [pc, #476]	; (800245c <main+0x2dc>)
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 8002284:	4a74      	ldr	r2, [pc, #464]	; (8002458 <main+0x2d8>)
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	e02e      	b.n	80022ea <main+0x16a>
		}
		else if (key1_state == 0 && !long_state1 && (ms - time_key1) > KEY_LONG_DELAY)
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d111      	bne.n	80022b6 <main+0x136>
 8002292:	4b72      	ldr	r3, [pc, #456]	; (800245c <main+0x2dc>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10d      	bne.n	80022b6 <main+0x136>
 800229a:	4b6f      	ldr	r3, [pc, #444]	; (8002458 <main+0x2d8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022a6:	d906      	bls.n	80022b6 <main+0x136>
		{
			long_state1 = 1;
 80022a8:	4b6c      	ldr	r3, [pc, #432]	; (800245c <main+0x2dc>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn1_long_rd = 1;
 80022ae:	4b6c      	ldr	r3, [pc, #432]	; (8002460 <main+0x2e0>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]
 80022b4:	e019      	b.n	80022ea <main+0x16a>
		}
		else if (key1_state == 1 && short_state1 && (ms - time_key1) > 50)
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d116      	bne.n	80022ea <main+0x16a>
 80022bc:	4b65      	ldr	r3, [pc, #404]	; (8002454 <main+0x2d4>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d012      	beq.n	80022ea <main+0x16a>
 80022c4:	4b64      	ldr	r3, [pc, #400]	; (8002458 <main+0x2d8>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b32      	cmp	r3, #50	; 0x32
 80022ce:	d90c      	bls.n	80022ea <main+0x16a>
		{
			short_state1 = 0;
 80022d0:	4b60      	ldr	r3, [pc, #384]	; (8002454 <main+0x2d4>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 80022d6:	4a60      	ldr	r2, [pc, #384]	; (8002458 <main+0x2d8>)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	6013      	str	r3, [r2, #0]

			if (!long_state1)
 80022dc:	4b5f      	ldr	r3, [pc, #380]	; (800245c <main+0x2dc>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d102      	bne.n	80022ea <main+0x16a>
			{
				// действие на короткое нажатие
				btn1_short_rd = 1;
 80022e4:	4b5f      	ldr	r3, [pc, #380]	; (8002464 <main+0x2e4>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]
			}
		}
		uint8_t key2_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); // подставить свой пин
 80022ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022ee:	4858      	ldr	r0, [pc, #352]	; (8002450 <main+0x2d0>)
 80022f0:	f001 ffc2 	bl	8004278 <HAL_GPIO_ReadPin>
 80022f4:	4603      	mov	r3, r0
 80022f6:	71bb      	strb	r3, [r7, #6]

		if (key2_state == 0 && !short_state2 && (ms - time_key2) > 50)
 80022f8:	79bb      	ldrb	r3, [r7, #6]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d113      	bne.n	8002326 <main+0x1a6>
 80022fe:	4b5a      	ldr	r3, [pc, #360]	; (8002468 <main+0x2e8>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10f      	bne.n	8002326 <main+0x1a6>
 8002306:	4b59      	ldr	r3, [pc, #356]	; (800246c <main+0x2ec>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b32      	cmp	r3, #50	; 0x32
 8002310:	d909      	bls.n	8002326 <main+0x1a6>
		{
			short_state2 = 1;
 8002312:	4b55      	ldr	r3, [pc, #340]	; (8002468 <main+0x2e8>)
 8002314:	2201      	movs	r2, #1
 8002316:	701a      	strb	r2, [r3, #0]
			long_state2 = 0;
 8002318:	4b55      	ldr	r3, [pc, #340]	; (8002470 <main+0x2f0>)
 800231a:	2200      	movs	r2, #0
 800231c:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 800231e:	4a53      	ldr	r2, [pc, #332]	; (800246c <main+0x2ec>)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	e02e      	b.n	8002384 <main+0x204>
		}
		else if (key2_state == 0 && !long_state2 && (ms - time_key2) > KEY_LONG_DELAY)
 8002326:	79bb      	ldrb	r3, [r7, #6]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d111      	bne.n	8002350 <main+0x1d0>
 800232c:	4b50      	ldr	r3, [pc, #320]	; (8002470 <main+0x2f0>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10d      	bne.n	8002350 <main+0x1d0>
 8002334:	4b4d      	ldr	r3, [pc, #308]	; (800246c <main+0x2ec>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002340:	d906      	bls.n	8002350 <main+0x1d0>
		{
			long_state2 = 1;
 8002342:	4b4b      	ldr	r3, [pc, #300]	; (8002470 <main+0x2f0>)
 8002344:	2201      	movs	r2, #1
 8002346:	701a      	strb	r2, [r3, #0]

			// действие на длинное нажатие
			btn2_long_rd = 1;
 8002348:	4b4a      	ldr	r3, [pc, #296]	; (8002474 <main+0x2f4>)
 800234a:	2201      	movs	r2, #1
 800234c:	701a      	strb	r2, [r3, #0]
 800234e:	e019      	b.n	8002384 <main+0x204>
		}
		else if (key2_state == 1 && short_state2 && (ms - time_key2) > 50)
 8002350:	79bb      	ldrb	r3, [r7, #6]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d116      	bne.n	8002384 <main+0x204>
 8002356:	4b44      	ldr	r3, [pc, #272]	; (8002468 <main+0x2e8>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d012      	beq.n	8002384 <main+0x204>
 800235e:	4b43      	ldr	r3, [pc, #268]	; (800246c <main+0x2ec>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b32      	cmp	r3, #50	; 0x32
 8002368:	d90c      	bls.n	8002384 <main+0x204>
		{
			short_state2 = 0;
 800236a:	4b3f      	ldr	r3, [pc, #252]	; (8002468 <main+0x2e8>)
 800236c:	2200      	movs	r2, #0
 800236e:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 8002370:	4a3e      	ldr	r2, [pc, #248]	; (800246c <main+0x2ec>)
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	6013      	str	r3, [r2, #0]

			if (!long_state2)
 8002376:	4b3e      	ldr	r3, [pc, #248]	; (8002470 <main+0x2f0>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d102      	bne.n	8002384 <main+0x204>
			{
				// действие на короткое нажатие
				btn2_short_rd = 1;
 800237e:	4b3e      	ldr	r3, [pc, #248]	; (8002478 <main+0x2f8>)
 8002380:	2201      	movs	r2, #1
 8002382:	701a      	strb	r2, [r3, #0]
			}
		}

		uint8_t key3_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // подставить свой пин
 8002384:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002388:	4831      	ldr	r0, [pc, #196]	; (8002450 <main+0x2d0>)
 800238a:	f001 ff75 	bl	8004278 <HAL_GPIO_ReadPin>
 800238e:	4603      	mov	r3, r0
 8002390:	717b      	strb	r3, [r7, #5]
		if (key3_state == 0 && !short_state3 && (ms - time_key3) > 50)
 8002392:	797b      	ldrb	r3, [r7, #5]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d113      	bne.n	80023c0 <main+0x240>
 8002398:	4b38      	ldr	r3, [pc, #224]	; (800247c <main+0x2fc>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10f      	bne.n	80023c0 <main+0x240>
 80023a0:	4b37      	ldr	r3, [pc, #220]	; (8002480 <main+0x300>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b32      	cmp	r3, #50	; 0x32
 80023aa:	d909      	bls.n	80023c0 <main+0x240>
		{
			short_state3 = 1;
 80023ac:	4b33      	ldr	r3, [pc, #204]	; (800247c <main+0x2fc>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]
			long_state3 = 0;
 80023b2:	4b34      	ldr	r3, [pc, #208]	; (8002484 <main+0x304>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 80023b8:	4a31      	ldr	r2, [pc, #196]	; (8002480 <main+0x300>)
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	e032      	b.n	8002426 <main+0x2a6>
		}
		else if (key3_state == 0 && !long_state3 && (ms - time_key3) > KEY_LONG_DELAY)
 80023c0:	797b      	ldrb	r3, [r7, #5]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d111      	bne.n	80023ea <main+0x26a>
 80023c6:	4b2f      	ldr	r3, [pc, #188]	; (8002484 <main+0x304>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10d      	bne.n	80023ea <main+0x26a>
 80023ce:	4b2c      	ldr	r3, [pc, #176]	; (8002480 <main+0x300>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023da:	d906      	bls.n	80023ea <main+0x26a>
		{
			long_state3 = 1;
 80023dc:	4b29      	ldr	r3, [pc, #164]	; (8002484 <main+0x304>)
 80023de:	2201      	movs	r2, #1
 80023e0:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn3_long_rd = 1;
 80023e2:	4b29      	ldr	r3, [pc, #164]	; (8002488 <main+0x308>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	701a      	strb	r2, [r3, #0]
 80023e8:	e01d      	b.n	8002426 <main+0x2a6>
		}
		else if (key3_state == 1 && short_state3 && (ms - time_key3) > 50)
 80023ea:	797b      	ldrb	r3, [r7, #5]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	f47f af20 	bne.w	8002232 <main+0xb2>
 80023f2:	4b22      	ldr	r3, [pc, #136]	; (800247c <main+0x2fc>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f43f af1b 	beq.w	8002232 <main+0xb2>
 80023fc:	4b20      	ldr	r3, [pc, #128]	; (8002480 <main+0x300>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b32      	cmp	r3, #50	; 0x32
 8002406:	f67f af14 	bls.w	8002232 <main+0xb2>
		{
			short_state3 = 0;
 800240a:	4b1c      	ldr	r3, [pc, #112]	; (800247c <main+0x2fc>)
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 8002410:	4a1b      	ldr	r2, [pc, #108]	; (8002480 <main+0x300>)
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	6013      	str	r3, [r2, #0]

			if (!long_state3)
 8002416:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <main+0x304>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	f47f af09 	bne.w	8002232 <main+0xb2>
			{
				// действие на короткое нажатие
				btn3_short_rd = 1;
 8002420:	4b1a      	ldr	r3, [pc, #104]	; (800248c <main+0x30c>)
 8002422:	2201      	movs	r2, #1
 8002424:	701a      	strb	r2, [r3, #0]
	{
 8002426:	e704      	b.n	8002232 <main+0xb2>
 8002428:	20000000 	.word	0x20000000
 800242c:	20000004 	.word	0x20000004
 8002430:	20000008 	.word	0x20000008
 8002434:	2000000c 	.word	0x2000000c
 8002438:	0800ca54 	.word	0x0800ca54
 800243c:	20000214 	.word	0x20000214
 8002440:	200008fc 	.word	0x200008fc
 8002444:	200004ac 	.word	0x200004ac
 8002448:	20000944 	.word	0x20000944
 800244c:	200004f4 	.word	0x200004f4
 8002450:	40010c00 	.word	0x40010c00
 8002454:	2000025a 	.word	0x2000025a
 8002458:	2000025c 	.word	0x2000025c
 800245c:	2000025b 	.word	0x2000025b
 8002460:	20000260 	.word	0x20000260
 8002464:	20000261 	.word	0x20000261
 8002468:	20000262 	.word	0x20000262
 800246c:	20000264 	.word	0x20000264
 8002470:	20000263 	.word	0x20000263
 8002474:	20000268 	.word	0x20000268
 8002478:	20000269 	.word	0x20000269
 800247c:	2000026a 	.word	0x2000026a
 8002480:	2000026c 	.word	0x2000026c
 8002484:	2000026b 	.word	0x2000026b
 8002488:	20000270 	.word	0x20000270
 800248c:	20000271 	.word	0x20000271

08002490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b094      	sub	sp, #80	; 0x50
 8002494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002496:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800249a:	2228      	movs	r2, #40	; 0x28
 800249c:	2100      	movs	r1, #0
 800249e:	4618      	mov	r0, r3
 80024a0:	f009 f8ea 	bl	800b678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024b4:	1d3b      	adds	r3, r7, #4
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	605a      	str	r2, [r3, #4]
 80024bc:	609a      	str	r2, [r3, #8]
 80024be:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024c0:	2301      	movs	r3, #1
 80024c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80024ca:	2300      	movs	r3, #0
 80024cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024ce:	2301      	movs	r3, #1
 80024d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024d2:	2302      	movs	r3, #2
 80024d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80024dc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80024e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024e6:	4618      	mov	r0, r3
 80024e8:	f003 fa86 	bl	80059f8 <HAL_RCC_OscConfig>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80024f2:	f000 fa51 	bl	8002998 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024f6:	230f      	movs	r3, #15
 80024f8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024fa:	2302      	movs	r3, #2
 80024fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002506:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002508:	2300      	movs	r3, #0
 800250a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800250c:	f107 0314 	add.w	r3, r7, #20
 8002510:	2102      	movs	r1, #2
 8002512:	4618      	mov	r0, r3
 8002514:	f003 fcf0 	bl	8005ef8 <HAL_RCC_ClockConfig>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800251e:	f000 fa3b 	bl	8002998 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002522:	2312      	movs	r3, #18
 8002524:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800252a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800252c:	2300      	movs	r3, #0
 800252e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002530:	1d3b      	adds	r3, r7, #4
 8002532:	4618      	mov	r0, r3
 8002534:	f003 fe66 	bl	8006204 <HAL_RCCEx_PeriphCLKConfig>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800253e:	f000 fa2b 	bl	8002998 <Error_Handler>
  }
}
 8002542:	bf00      	nop
 8002544:	3750      	adds	r7, #80	; 0x50
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800255c:	4b18      	ldr	r3, [pc, #96]	; (80025c0 <MX_ADC1_Init+0x74>)
 800255e:	4a19      	ldr	r2, [pc, #100]	; (80025c4 <MX_ADC1_Init+0x78>)
 8002560:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002562:	4b17      	ldr	r3, [pc, #92]	; (80025c0 <MX_ADC1_Init+0x74>)
 8002564:	2200      	movs	r2, #0
 8002566:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002568:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <MX_ADC1_Init+0x74>)
 800256a:	2201      	movs	r2, #1
 800256c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800256e:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <MX_ADC1_Init+0x74>)
 8002570:	2200      	movs	r2, #0
 8002572:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002574:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <MX_ADC1_Init+0x74>)
 8002576:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800257a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800257c:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <MX_ADC1_Init+0x74>)
 800257e:	2200      	movs	r2, #0
 8002580:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002582:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <MX_ADC1_Init+0x74>)
 8002584:	2201      	movs	r2, #1
 8002586:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002588:	480d      	ldr	r0, [pc, #52]	; (80025c0 <MX_ADC1_Init+0x74>)
 800258a:	f000 fd05 	bl	8002f98 <HAL_ADC_Init>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002594:	f000 fa00 	bl	8002998 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002598:	2303      	movs	r3, #3
 800259a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800259c:	2301      	movs	r3, #1
 800259e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80025a0:	2302      	movs	r3, #2
 80025a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025a4:	1d3b      	adds	r3, r7, #4
 80025a6:	4619      	mov	r1, r3
 80025a8:	4805      	ldr	r0, [pc, #20]	; (80025c0 <MX_ADC1_Init+0x74>)
 80025aa:	f000 ff5b 	bl	8003464 <HAL_ADC_ConfigChannel>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80025b4:	f000 f9f0 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80025b8:	bf00      	nop
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000944 	.word	0x20000944
 80025c4:	40012400 	.word	0x40012400

080025c8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <MX_CRC_Init+0x20>)
 80025ce:	4a07      	ldr	r2, [pc, #28]	; (80025ec <MX_CRC_Init+0x24>)
 80025d0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80025d2:	4805      	ldr	r0, [pc, #20]	; (80025e8 <MX_CRC_Init+0x20>)
 80025d4:	f001 fa7d 	bl	8003ad2 <HAL_CRC_Init>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80025de:	f000 f9db 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	200008f4 	.word	0x200008f4
 80025ec:	40023000 	.word	0x40023000

080025f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80025f4:	4b18      	ldr	r3, [pc, #96]	; (8002658 <MX_SPI1_Init+0x68>)
 80025f6:	4a19      	ldr	r2, [pc, #100]	; (800265c <MX_SPI1_Init+0x6c>)
 80025f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025fa:	4b17      	ldr	r3, [pc, #92]	; (8002658 <MX_SPI1_Init+0x68>)
 80025fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002600:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002602:	4b15      	ldr	r3, [pc, #84]	; (8002658 <MX_SPI1_Init+0x68>)
 8002604:	2200      	movs	r2, #0
 8002606:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002608:	4b13      	ldr	r3, [pc, #76]	; (8002658 <MX_SPI1_Init+0x68>)
 800260a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800260e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002610:	4b11      	ldr	r3, [pc, #68]	; (8002658 <MX_SPI1_Init+0x68>)
 8002612:	2200      	movs	r2, #0
 8002614:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002616:	4b10      	ldr	r3, [pc, #64]	; (8002658 <MX_SPI1_Init+0x68>)
 8002618:	2200      	movs	r2, #0
 800261a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800261c:	4b0e      	ldr	r3, [pc, #56]	; (8002658 <MX_SPI1_Init+0x68>)
 800261e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002622:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <MX_SPI1_Init+0x68>)
 8002626:	2208      	movs	r2, #8
 8002628:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800262a:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <MX_SPI1_Init+0x68>)
 800262c:	2200      	movs	r2, #0
 800262e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002630:	4b09      	ldr	r3, [pc, #36]	; (8002658 <MX_SPI1_Init+0x68>)
 8002632:	2200      	movs	r2, #0
 8002634:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002636:	4b08      	ldr	r3, [pc, #32]	; (8002658 <MX_SPI1_Init+0x68>)
 8002638:	2200      	movs	r2, #0
 800263a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <MX_SPI1_Init+0x68>)
 800263e:	220a      	movs	r2, #10
 8002640:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002642:	4805      	ldr	r0, [pc, #20]	; (8002658 <MX_SPI1_Init+0x68>)
 8002644:	f003 ff58 	bl	80064f8 <HAL_SPI_Init>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800264e:	f000 f9a3 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20000974 	.word	0x20000974
 800265c:	40013000 	.word	0x40013000

08002660 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002666:	f107 0310 	add.w	r3, r7, #16
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002670:	463b      	mov	r3, r7
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	605a      	str	r2, [r3, #4]
 8002678:	609a      	str	r2, [r3, #8]
 800267a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800267c:	4b27      	ldr	r3, [pc, #156]	; (800271c <MX_TIM3_Init+0xbc>)
 800267e:	4a28      	ldr	r2, [pc, #160]	; (8002720 <MX_TIM3_Init+0xc0>)
 8002680:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8002682:	4b26      	ldr	r3, [pc, #152]	; (800271c <MX_TIM3_Init+0xbc>)
 8002684:	2247      	movs	r2, #71	; 0x47
 8002686:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002688:	4b24      	ldr	r3, [pc, #144]	; (800271c <MX_TIM3_Init+0xbc>)
 800268a:	2200      	movs	r2, #0
 800268c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000-1;
 800268e:	4b23      	ldr	r3, [pc, #140]	; (800271c <MX_TIM3_Init+0xbc>)
 8002690:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8002694:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002696:	4b21      	ldr	r3, [pc, #132]	; (800271c <MX_TIM3_Init+0xbc>)
 8002698:	2200      	movs	r2, #0
 800269a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800269c:	4b1f      	ldr	r3, [pc, #124]	; (800271c <MX_TIM3_Init+0xbc>)
 800269e:	2200      	movs	r2, #0
 80026a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80026a2:	481e      	ldr	r0, [pc, #120]	; (800271c <MX_TIM3_Init+0xbc>)
 80026a4:	f004 f98e 	bl	80069c4 <HAL_TIM_IC_Init>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80026ae:	f000 f973 	bl	8002998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026ba:	f107 0310 	add.w	r3, r7, #16
 80026be:	4619      	mov	r1, r3
 80026c0:	4816      	ldr	r0, [pc, #88]	; (800271c <MX_TIM3_Init+0xbc>)
 80026c2:	f004 fe6d 	bl	80073a0 <HAL_TIMEx_MasterConfigSynchronization>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80026cc:	f000 f964 	bl	8002998 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80026d0:	2300      	movs	r3, #0
 80026d2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80026d4:	2301      	movs	r3, #1
 80026d6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80026d8:	2300      	movs	r3, #0
 80026da:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80026e0:	463b      	mov	r3, r7
 80026e2:	2200      	movs	r2, #0
 80026e4:	4619      	mov	r1, r3
 80026e6:	480d      	ldr	r0, [pc, #52]	; (800271c <MX_TIM3_Init+0xbc>)
 80026e8:	f004 fbca 	bl	8006e80 <HAL_TIM_IC_ConfigChannel>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80026f2:	f000 f951 	bl	8002998 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80026f6:	2302      	movs	r3, #2
 80026f8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80026fa:	2302      	movs	r3, #2
 80026fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80026fe:	463b      	mov	r3, r7
 8002700:	2204      	movs	r2, #4
 8002702:	4619      	mov	r1, r3
 8002704:	4805      	ldr	r0, [pc, #20]	; (800271c <MX_TIM3_Init+0xbc>)
 8002706:	f004 fbbb 	bl	8006e80 <HAL_TIM_IC_ConfigChannel>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002710:	f000 f942 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002714:	bf00      	nop
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	200008fc 	.word	0x200008fc
 8002720:	40000400 	.word	0x40000400

08002724 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800272a:	f107 0310 	add.w	r3, r7, #16
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002734:	463b      	mov	r3, r7
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	605a      	str	r2, [r3, #4]
 800273c:	609a      	str	r2, [r3, #8]
 800273e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002740:	4b27      	ldr	r3, [pc, #156]	; (80027e0 <MX_TIM4_Init+0xbc>)
 8002742:	4a28      	ldr	r2, [pc, #160]	; (80027e4 <MX_TIM4_Init+0xc0>)
 8002744:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8002746:	4b26      	ldr	r3, [pc, #152]	; (80027e0 <MX_TIM4_Init+0xbc>)
 8002748:	2247      	movs	r2, #71	; 0x47
 800274a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800274c:	4b24      	ldr	r3, [pc, #144]	; (80027e0 <MX_TIM4_Init+0xbc>)
 800274e:	2200      	movs	r2, #0
 8002750:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000-1;
 8002752:	4b23      	ldr	r3, [pc, #140]	; (80027e0 <MX_TIM4_Init+0xbc>)
 8002754:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8002758:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800275a:	4b21      	ldr	r3, [pc, #132]	; (80027e0 <MX_TIM4_Init+0xbc>)
 800275c:	2200      	movs	r2, #0
 800275e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002760:	4b1f      	ldr	r3, [pc, #124]	; (80027e0 <MX_TIM4_Init+0xbc>)
 8002762:	2200      	movs	r2, #0
 8002764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002766:	481e      	ldr	r0, [pc, #120]	; (80027e0 <MX_TIM4_Init+0xbc>)
 8002768:	f004 f92c 	bl	80069c4 <HAL_TIM_IC_Init>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002772:	f000 f911 	bl	8002998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002776:	2300      	movs	r3, #0
 8002778:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800277e:	f107 0310 	add.w	r3, r7, #16
 8002782:	4619      	mov	r1, r3
 8002784:	4816      	ldr	r0, [pc, #88]	; (80027e0 <MX_TIM4_Init+0xbc>)
 8002786:	f004 fe0b 	bl	80073a0 <HAL_TIMEx_MasterConfigSynchronization>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002790:	f000 f902 	bl	8002998 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002794:	2300      	movs	r3, #0
 8002796:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002798:	2301      	movs	r3, #1
 800279a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800279c:	2300      	movs	r3, #0
 800279e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80027a4:	463b      	mov	r3, r7
 80027a6:	2200      	movs	r2, #0
 80027a8:	4619      	mov	r1, r3
 80027aa:	480d      	ldr	r0, [pc, #52]	; (80027e0 <MX_TIM4_Init+0xbc>)
 80027ac:	f004 fb68 	bl	8006e80 <HAL_TIM_IC_ConfigChannel>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80027b6:	f000 f8ef 	bl	8002998 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80027ba:	2302      	movs	r3, #2
 80027bc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80027be:	2302      	movs	r3, #2
 80027c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80027c2:	463b      	mov	r3, r7
 80027c4:	2204      	movs	r2, #4
 80027c6:	4619      	mov	r1, r3
 80027c8:	4805      	ldr	r0, [pc, #20]	; (80027e0 <MX_TIM4_Init+0xbc>)
 80027ca:	f004 fb59 	bl	8006e80 <HAL_TIM_IC_ConfigChannel>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80027d4:	f000 f8e0 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80027d8:	bf00      	nop
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	200004ac 	.word	0x200004ac
 80027e4:	40000800 	.word	0x40000800

080027e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08a      	sub	sp, #40	; 0x28
 80027ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ee:	f107 0314 	add.w	r3, r7, #20
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	605a      	str	r2, [r3, #4]
 80027f8:	609a      	str	r2, [r3, #8]
 80027fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027fc:	4b62      	ldr	r3, [pc, #392]	; (8002988 <MX_GPIO_Init+0x1a0>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	4a61      	ldr	r2, [pc, #388]	; (8002988 <MX_GPIO_Init+0x1a0>)
 8002802:	f043 0310 	orr.w	r3, r3, #16
 8002806:	6193      	str	r3, [r2, #24]
 8002808:	4b5f      	ldr	r3, [pc, #380]	; (8002988 <MX_GPIO_Init+0x1a0>)
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002814:	4b5c      	ldr	r3, [pc, #368]	; (8002988 <MX_GPIO_Init+0x1a0>)
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	4a5b      	ldr	r2, [pc, #364]	; (8002988 <MX_GPIO_Init+0x1a0>)
 800281a:	f043 0320 	orr.w	r3, r3, #32
 800281e:	6193      	str	r3, [r2, #24]
 8002820:	4b59      	ldr	r3, [pc, #356]	; (8002988 <MX_GPIO_Init+0x1a0>)
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	f003 0320 	and.w	r3, r3, #32
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800282c:	4b56      	ldr	r3, [pc, #344]	; (8002988 <MX_GPIO_Init+0x1a0>)
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	4a55      	ldr	r2, [pc, #340]	; (8002988 <MX_GPIO_Init+0x1a0>)
 8002832:	f043 0304 	orr.w	r3, r3, #4
 8002836:	6193      	str	r3, [r2, #24]
 8002838:	4b53      	ldr	r3, [pc, #332]	; (8002988 <MX_GPIO_Init+0x1a0>)
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002844:	4b50      	ldr	r3, [pc, #320]	; (8002988 <MX_GPIO_Init+0x1a0>)
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	4a4f      	ldr	r2, [pc, #316]	; (8002988 <MX_GPIO_Init+0x1a0>)
 800284a:	f043 0308 	orr.w	r3, r3, #8
 800284e:	6193      	str	r3, [r2, #24]
 8002850:	4b4d      	ldr	r3, [pc, #308]	; (8002988 <MX_GPIO_Init+0x1a0>)
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	607b      	str	r3, [r7, #4]
 800285a:	687b      	ldr	r3, [r7, #4]


  // reset USB DP (D+)
  // инициализируем пин DP как выход
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800285c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002862:	2301      	movs	r3, #1
 8002864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002866:	2302      	movs	r3, #2
 8002868:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800286a:	f107 0314 	add.w	r3, r7, #20
 800286e:	4619      	mov	r1, r3
 8002870:	4846      	ldr	r0, [pc, #280]	; (800298c <MX_GPIO_Init+0x1a4>)
 8002872:	f001 fb7d 	bl	8003f70 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // прижимаем DP к "земле"
 8002876:	2200      	movs	r2, #0
 8002878:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800287c:	4843      	ldr	r0, [pc, #268]	; (800298c <MX_GPIO_Init+0x1a4>)
 800287e:	f001 fd12 	bl	80042a6 <HAL_GPIO_WritePin>
  for(uint16_t i = 0; i < 10000; i++) {}; // немного ждём
 8002882:	2300      	movs	r3, #0
 8002884:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002886:	e002      	b.n	800288e <MX_GPIO_Init+0xa6>
 8002888:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800288a:	3301      	adds	r3, #1
 800288c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800288e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002890:	f242 720f 	movw	r2, #9999	; 0x270f
 8002894:	4293      	cmp	r3, r2
 8002896:	d9f7      	bls.n	8002888 <MX_GPIO_Init+0xa0>

  // переинициализируем пин для работы с USB
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002898:	2300      	movs	r3, #0
 800289a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a0:	f107 0314 	add.w	r3, r7, #20
 80028a4:	4619      	mov	r1, r3
 80028a6:	4839      	ldr	r0, [pc, #228]	; (800298c <MX_GPIO_Init+0x1a4>)
 80028a8:	f001 fb62 	bl	8003f70 <HAL_GPIO_Init>
  for(uint16_t i = 0; i < 10000; i++) {}; // немного ждём
 80028ac:	2300      	movs	r3, #0
 80028ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 80028b0:	e002      	b.n	80028b8 <MX_GPIO_Init+0xd0>
 80028b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028b4:	3301      	adds	r3, #1
 80028b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80028b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028ba:	f242 720f 	movw	r2, #9999	; 0x270f
 80028be:	4293      	cmp	r3, r2
 80028c0:	d9f7      	bls.n	80028b2 <MX_GPIO_Init+0xca>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80028c2:	2200      	movs	r2, #0
 80028c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028c8:	4831      	ldr	r0, [pc, #196]	; (8002990 <MX_GPIO_Init+0x1a8>)
 80028ca:	f001 fcec 	bl	80042a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD5312_LDAC_Pin|AD5312_SYNC_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80028ce:	2200      	movs	r2, #0
 80028d0:	f240 4112 	movw	r1, #1042	; 0x412
 80028d4:	482d      	ldr	r0, [pc, #180]	; (800298c <MX_GPIO_Init+0x1a4>)
 80028d6:	f001 fce6 	bl	80042a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 80028da:	2201      	movs	r2, #1
 80028dc:	2104      	movs	r1, #4
 80028de:	482b      	ldr	r0, [pc, #172]	; (800298c <MX_GPIO_Init+0x1a4>)
 80028e0:	f001 fce1 	bl	80042a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80028e4:	2200      	movs	r2, #0
 80028e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028ea:	482a      	ldr	r0, [pc, #168]	; (8002994 <MX_GPIO_Init+0x1ac>)
 80028ec:	f001 fcdb 	bl	80042a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80028f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f6:	2301      	movs	r3, #1
 80028f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fe:	2302      	movs	r3, #2
 8002900:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002902:	f107 0314 	add.w	r3, r7, #20
 8002906:	4619      	mov	r1, r3
 8002908:	4821      	ldr	r0, [pc, #132]	; (8002990 <MX_GPIO_Init+0x1a8>)
 800290a:	f001 fb31 	bl	8003f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD5312_LDAC_Pin Relay_Pin AD5312_SYNC_Pin PA10 */
  GPIO_InitStruct.Pin = AD5312_LDAC_Pin|Relay_Pin|AD5312_SYNC_Pin|GPIO_PIN_10;
 800290e:	f240 4316 	movw	r3, #1046	; 0x416
 8002912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002914:	2301      	movs	r3, #1
 8002916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291c:	2302      	movs	r3, #2
 800291e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002920:	f107 0314 	add.w	r3, r7, #20
 8002924:	4619      	mov	r1, r3
 8002926:	4819      	ldr	r0, [pc, #100]	; (800298c <MX_GPIO_Init+0x1a4>)
 8002928:	f001 fb22 	bl	8003f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800292c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002932:	2300      	movs	r3, #0
 8002934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002936:	2301      	movs	r3, #1
 8002938:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800293a:	f107 0314 	add.w	r3, r7, #20
 800293e:	4619      	mov	r1, r3
 8002940:	4814      	ldr	r0, [pc, #80]	; (8002994 <MX_GPIO_Init+0x1ac>)
 8002942:	f001 fb15 	bl	8003f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002946:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800294a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800294c:	2300      	movs	r3, #0
 800294e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002954:	f107 0314 	add.w	r3, r7, #20
 8002958:	4619      	mov	r1, r3
 800295a:	480e      	ldr	r0, [pc, #56]	; (8002994 <MX_GPIO_Init+0x1ac>)
 800295c:	f001 fb08 	bl	8003f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002960:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002966:	2301      	movs	r3, #1
 8002968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800296a:	2301      	movs	r3, #1
 800296c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296e:	2302      	movs	r3, #2
 8002970:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002972:	f107 0314 	add.w	r3, r7, #20
 8002976:	4619      	mov	r1, r3
 8002978:	4806      	ldr	r0, [pc, #24]	; (8002994 <MX_GPIO_Init+0x1ac>)
 800297a:	f001 faf9 	bl	8003f70 <HAL_GPIO_Init>

}
 800297e:	bf00      	nop
 8002980:	3728      	adds	r7, #40	; 0x28
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40021000 	.word	0x40021000
 800298c:	40010800 	.word	0x40010800
 8002990:	40011000 	.word	0x40011000
 8002994:	40010c00 	.word	0x40010c00

08002998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800299c:	bf00      	nop
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029aa:	4b15      	ldr	r3, [pc, #84]	; (8002a00 <HAL_MspInit+0x5c>)
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	4a14      	ldr	r2, [pc, #80]	; (8002a00 <HAL_MspInit+0x5c>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	6193      	str	r3, [r2, #24]
 80029b6:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <HAL_MspInit+0x5c>)
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029c2:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <HAL_MspInit+0x5c>)
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	4a0e      	ldr	r2, [pc, #56]	; (8002a00 <HAL_MspInit+0x5c>)
 80029c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029cc:	61d3      	str	r3, [r2, #28]
 80029ce:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <HAL_MspInit+0x5c>)
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d6:	607b      	str	r3, [r7, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80029da:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <HAL_MspInit+0x60>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	4a04      	ldr	r2, [pc, #16]	; (8002a04 <HAL_MspInit+0x60>)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40010000 	.word	0x40010000

08002a08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b088      	sub	sp, #32
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a10:	f107 0310 	add.w	r3, r7, #16
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a18      	ldr	r2, [pc, #96]	; (8002a84 <HAL_ADC_MspInit+0x7c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d129      	bne.n	8002a7c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a28:	4b17      	ldr	r3, [pc, #92]	; (8002a88 <HAL_ADC_MspInit+0x80>)
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	4a16      	ldr	r2, [pc, #88]	; (8002a88 <HAL_ADC_MspInit+0x80>)
 8002a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a32:	6193      	str	r3, [r2, #24]
 8002a34:	4b14      	ldr	r3, [pc, #80]	; (8002a88 <HAL_ADC_MspInit+0x80>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a40:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <HAL_ADC_MspInit+0x80>)
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	4a10      	ldr	r2, [pc, #64]	; (8002a88 <HAL_ADC_MspInit+0x80>)
 8002a46:	f043 0304 	orr.w	r3, r3, #4
 8002a4a:	6193      	str	r3, [r2, #24]
 8002a4c:	4b0e      	ldr	r3, [pc, #56]	; (8002a88 <HAL_ADC_MspInit+0x80>)
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a58:	2308      	movs	r3, #8
 8002a5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a60:	f107 0310 	add.w	r3, r7, #16
 8002a64:	4619      	mov	r1, r3
 8002a66:	4809      	ldr	r0, [pc, #36]	; (8002a8c <HAL_ADC_MspInit+0x84>)
 8002a68:	f001 fa82 	bl	8003f70 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2100      	movs	r1, #0
 8002a70:	2012      	movs	r0, #18
 8002a72:	f000 fff8 	bl	8003a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002a76:	2012      	movs	r0, #18
 8002a78:	f001 f811 	bl	8003a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a7c:	bf00      	nop
 8002a7e:	3720      	adds	r7, #32
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40012400 	.word	0x40012400
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	40010800 	.word	0x40010800

08002a90 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a09      	ldr	r2, [pc, #36]	; (8002ac4 <HAL_CRC_MspInit+0x34>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d10b      	bne.n	8002aba <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002aa2:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <HAL_CRC_MspInit+0x38>)
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	4a08      	ldr	r2, [pc, #32]	; (8002ac8 <HAL_CRC_MspInit+0x38>)
 8002aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aac:	6153      	str	r3, [r2, #20]
 8002aae:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <HAL_CRC_MspInit+0x38>)
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr
 8002ac4:	40023000 	.word	0x40023000
 8002ac8:	40021000 	.word	0x40021000

08002acc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad4:	f107 0310 	add.w	r3, r7, #16
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a15      	ldr	r2, [pc, #84]	; (8002b3c <HAL_SPI_MspInit+0x70>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d123      	bne.n	8002b34 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002aec:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <HAL_SPI_MspInit+0x74>)
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	4a13      	ldr	r2, [pc, #76]	; (8002b40 <HAL_SPI_MspInit+0x74>)
 8002af2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002af6:	6193      	str	r3, [r2, #24]
 8002af8:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <HAL_SPI_MspInit+0x74>)
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b04:	4b0e      	ldr	r3, [pc, #56]	; (8002b40 <HAL_SPI_MspInit+0x74>)
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	4a0d      	ldr	r2, [pc, #52]	; (8002b40 <HAL_SPI_MspInit+0x74>)
 8002b0a:	f043 0304 	orr.w	r3, r3, #4
 8002b0e:	6193      	str	r3, [r2, #24]
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_SPI_MspInit+0x74>)
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AD5312_SCLK_Pin|AD5312_DIN_Pin;
 8002b1c:	23a0      	movs	r3, #160	; 0xa0
 8002b1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b20:	2302      	movs	r3, #2
 8002b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b24:	2303      	movs	r3, #3
 8002b26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b28:	f107 0310 	add.w	r3, r7, #16
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4805      	ldr	r0, [pc, #20]	; (8002b44 <HAL_SPI_MspInit+0x78>)
 8002b30:	f001 fa1e 	bl	8003f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b34:	bf00      	nop
 8002b36:	3720      	adds	r7, #32
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40013000 	.word	0x40013000
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40010800 	.word	0x40010800

08002b48 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08c      	sub	sp, #48	; 0x30
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b50:	f107 031c 	add.w	r3, r7, #28
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a3b      	ldr	r2, [pc, #236]	; (8002c50 <HAL_TIM_IC_MspInit+0x108>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d13e      	bne.n	8002be6 <HAL_TIM_IC_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b68:	4b3a      	ldr	r3, [pc, #232]	; (8002c54 <HAL_TIM_IC_MspInit+0x10c>)
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	4a39      	ldr	r2, [pc, #228]	; (8002c54 <HAL_TIM_IC_MspInit+0x10c>)
 8002b6e:	f043 0302 	orr.w	r3, r3, #2
 8002b72:	61d3      	str	r3, [r2, #28]
 8002b74:	4b37      	ldr	r3, [pc, #220]	; (8002c54 <HAL_TIM_IC_MspInit+0x10c>)
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b80:	4b34      	ldr	r3, [pc, #208]	; (8002c54 <HAL_TIM_IC_MspInit+0x10c>)
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	4a33      	ldr	r2, [pc, #204]	; (8002c54 <HAL_TIM_IC_MspInit+0x10c>)
 8002b86:	f043 0308 	orr.w	r3, r3, #8
 8002b8a:	6193      	str	r3, [r2, #24]
 8002b8c:	4b31      	ldr	r3, [pc, #196]	; (8002c54 <HAL_TIM_IC_MspInit+0x10c>)
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	617b      	str	r3, [r7, #20]
 8002b96:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b98:	2310      	movs	r3, #16
 8002b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba4:	f107 031c 	add.w	r3, r7, #28
 8002ba8:	4619      	mov	r1, r3
 8002baa:	482b      	ldr	r0, [pc, #172]	; (8002c58 <HAL_TIM_IC_MspInit+0x110>)
 8002bac:	f001 f9e0 	bl	8003f70 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002bb0:	4b2a      	ldr	r3, [pc, #168]	; (8002c5c <HAL_TIM_IC_MspInit+0x114>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bce:	4a23      	ldr	r2, [pc, #140]	; (8002c5c <HAL_TIM_IC_MspInit+0x114>)
 8002bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd2:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	201d      	movs	r0, #29
 8002bda:	f000 ff44 	bl	8003a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002bde:	201d      	movs	r0, #29
 8002be0:	f000 ff5d 	bl	8003a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002be4:	e030      	b.n	8002c48 <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM4)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a1d      	ldr	r2, [pc, #116]	; (8002c60 <HAL_TIM_IC_MspInit+0x118>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d12b      	bne.n	8002c48 <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bf0:	4b18      	ldr	r3, [pc, #96]	; (8002c54 <HAL_TIM_IC_MspInit+0x10c>)
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	4a17      	ldr	r2, [pc, #92]	; (8002c54 <HAL_TIM_IC_MspInit+0x10c>)
 8002bf6:	f043 0304 	orr.w	r3, r3, #4
 8002bfa:	61d3      	str	r3, [r2, #28]
 8002bfc:	4b15      	ldr	r3, [pc, #84]	; (8002c54 <HAL_TIM_IC_MspInit+0x10c>)
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c08:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <HAL_TIM_IC_MspInit+0x10c>)
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	4a11      	ldr	r2, [pc, #68]	; (8002c54 <HAL_TIM_IC_MspInit+0x10c>)
 8002c0e:	f043 0308 	orr.w	r3, r3, #8
 8002c12:	6193      	str	r3, [r2, #24]
 8002c14:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <HAL_TIM_IC_MspInit+0x10c>)
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c20:	2340      	movs	r3, #64	; 0x40
 8002c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c24:	2300      	movs	r3, #0
 8002c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c2c:	f107 031c 	add.w	r3, r7, #28
 8002c30:	4619      	mov	r1, r3
 8002c32:	4809      	ldr	r0, [pc, #36]	; (8002c58 <HAL_TIM_IC_MspInit+0x110>)
 8002c34:	f001 f99c 	bl	8003f70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	201e      	movs	r0, #30
 8002c3e:	f000 ff12 	bl	8003a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002c42:	201e      	movs	r0, #30
 8002c44:	f000 ff2b 	bl	8003a9e <HAL_NVIC_EnableIRQ>
}
 8002c48:	bf00      	nop
 8002c4a:	3730      	adds	r7, #48	; 0x30
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40000400 	.word	0x40000400
 8002c54:	40021000 	.word	0x40021000
 8002c58:	40010c00 	.word	0x40010c00
 8002c5c:	40010000 	.word	0x40010000
 8002c60:	40000800 	.word	0x40000800

08002c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c68:	bf00      	nop
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr

08002c70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 8002c74:	4806      	ldr	r0, [pc, #24]	; (8002c90 <HardFault_Handler+0x20>)
 8002c76:	f008 fd07 	bl	800b688 <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 8002c7a:	4805      	ldr	r0, [pc, #20]	; (8002c90 <HardFault_Handler+0x20>)
 8002c7c:	f008 fd04 	bl	800b688 <iprintf>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002c80:	2200      	movs	r2, #0
 8002c82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c86:	4803      	ldr	r0, [pc, #12]	; (8002c94 <HardFault_Handler+0x24>)
 8002c88:	f001 fb0d 	bl	80042a6 <HAL_GPIO_WritePin>
	  printf("HardFault_IRQn");
 8002c8c:	e7f5      	b.n	8002c7a <HardFault_Handler+0xa>
 8002c8e:	bf00      	nop
 8002c90:	0800ca68 	.word	0x0800ca68
 8002c94:	40011000 	.word	0x40011000

08002c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c9c:	e7fe      	b.n	8002c9c <MemManage_Handler+0x4>

08002c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ca2:	e7fe      	b.n	8002ca2 <BusFault_Handler+0x4>

08002ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ca8:	e7fe      	b.n	8002ca8 <UsageFault_Handler+0x4>

08002caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002caa:	b480      	push	{r7}
 8002cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr

08002cb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr

08002cce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cd2:	f000 f945 	bl	8002f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002ce0:	4802      	ldr	r0, [pc, #8]	; (8002cec <ADC1_2_IRQHandler+0x10>)
 8002ce2:	f000 faf3 	bl	80032cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000944 	.word	0x20000944

08002cf0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002cf4:	4802      	ldr	r0, [pc, #8]	; (8002d00 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002cf6:	f001 fc1f 	bl	8004538 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	200012b4 	.word	0x200012b4

08002d04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d08:	4802      	ldr	r0, [pc, #8]	; (8002d14 <TIM3_IRQHandler+0x10>)
 8002d0a:	f003 ffb1 	bl	8006c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	200008fc 	.word	0x200008fc

08002d18 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002d1c:	4802      	ldr	r0, [pc, #8]	; (8002d28 <TIM4_IRQHandler+0x10>)
 8002d1e:	f003 ffa7 	bl	8006c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	200004ac 	.word	0x200004ac

08002d2c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	e00a      	b.n	8002d54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d3e:	f3af 8000 	nop.w
 8002d42:	4601      	mov	r1, r0
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	60ba      	str	r2, [r7, #8]
 8002d4a:	b2ca      	uxtb	r2, r1
 8002d4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	3301      	adds	r3, #1
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	dbf0      	blt.n	8002d3e <_read+0x12>
	}

return len;
 8002d5c:	687b      	ldr	r3, [r7, #4]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
	return -1;
 8002d6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d8c:	605a      	str	r2, [r3, #4]
	return 0;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr

08002d9a <_isatty>:

int _isatty(int file)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
	return 1;
 8002da2:	2301      	movs	r3, #1
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr

08002dae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b085      	sub	sp, #20
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	607a      	str	r2, [r7, #4]
	return 0;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr
	...

08002dc8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002dd0:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <_sbrk+0x50>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d102      	bne.n	8002dde <_sbrk+0x16>
		heap_end = &end;
 8002dd8:	4b0f      	ldr	r3, [pc, #60]	; (8002e18 <_sbrk+0x50>)
 8002dda:	4a10      	ldr	r2, [pc, #64]	; (8002e1c <_sbrk+0x54>)
 8002ddc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002dde:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <_sbrk+0x50>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002de4:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <_sbrk+0x50>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4413      	add	r3, r2
 8002dec:	466a      	mov	r2, sp
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d907      	bls.n	8002e02 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002df2:	f008 fc09 	bl	800b608 <__errno>
 8002df6:	4603      	mov	r3, r0
 8002df8:	220c      	movs	r2, #12
 8002dfa:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8002e00:	e006      	b.n	8002e10 <_sbrk+0x48>
	}

	heap_end += incr;
 8002e02:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <_sbrk+0x50>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	4a03      	ldr	r2, [pc, #12]	; (8002e18 <_sbrk+0x50>)
 8002e0c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	2000027c 	.word	0x2000027c
 8002e1c:	200015b0 	.word	0x200015b0

08002e20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002e24:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <SystemInit+0x5c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a14      	ldr	r2, [pc, #80]	; (8002e7c <SystemInit+0x5c>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002e30:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <SystemInit+0x5c>)
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	4911      	ldr	r1, [pc, #68]	; (8002e7c <SystemInit+0x5c>)
 8002e36:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <SystemInit+0x60>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002e3c:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <SystemInit+0x5c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a0e      	ldr	r2, [pc, #56]	; (8002e7c <SystemInit+0x5c>)
 8002e42:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e4a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <SystemInit+0x5c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a0a      	ldr	r2, [pc, #40]	; (8002e7c <SystemInit+0x5c>)
 8002e52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e56:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002e58:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <SystemInit+0x5c>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	4a07      	ldr	r2, [pc, #28]	; (8002e7c <SystemInit+0x5c>)
 8002e5e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002e62:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002e64:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <SystemInit+0x5c>)
 8002e66:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002e6a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002e6c:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <SystemInit+0x64>)
 8002e6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e72:	609a      	str	r2, [r3, #8]
#endif 
}
 8002e74:	bf00      	nop
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	f8ff0000 	.word	0xf8ff0000
 8002e84:	e000ed00 	.word	0xe000ed00

08002e88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002e88:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002e8a:	e003      	b.n	8002e94 <LoopCopyDataInit>

08002e8c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002e8e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002e90:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002e92:	3104      	adds	r1, #4

08002e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002e94:	480a      	ldr	r0, [pc, #40]	; (8002ec0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002e96:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002e98:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002e9a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002e9c:	d3f6      	bcc.n	8002e8c <CopyDataInit>
  ldr r2, =_sbss
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002ea0:	e002      	b.n	8002ea8 <LoopFillZerobss>

08002ea2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002ea2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002ea4:	f842 3b04 	str.w	r3, [r2], #4

08002ea8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002ea8:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002eaa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002eac:	d3f9      	bcc.n	8002ea2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002eae:	f7ff ffb7 	bl	8002e20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eb2:	f008 fbaf 	bl	800b614 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002eb6:	f7ff f963 	bl	8002180 <main>
  bx lr
 8002eba:	4770      	bx	lr
  ldr r3, =_sidata
 8002ebc:	0800cb98 	.word	0x0800cb98
  ldr r0, =_sdata
 8002ec0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002ec4:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8002ec8:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 8002ecc:	200015b0 	.word	0x200015b0

08002ed0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ed0:	e7fe      	b.n	8002ed0 <CAN1_RX1_IRQHandler>
	...

08002ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ed8:	4b08      	ldr	r3, [pc, #32]	; (8002efc <HAL_Init+0x28>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a07      	ldr	r2, [pc, #28]	; (8002efc <HAL_Init+0x28>)
 8002ede:	f043 0310 	orr.w	r3, r3, #16
 8002ee2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ee4:	2003      	movs	r0, #3
 8002ee6:	f000 fdb3 	bl	8003a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eea:	2000      	movs	r0, #0
 8002eec:	f000 f808 	bl	8002f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ef0:	f7ff fd58 	bl	80029a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40022000 	.word	0x40022000

08002f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f08:	4b12      	ldr	r3, [pc, #72]	; (8002f54 <HAL_InitTick+0x54>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <HAL_InitTick+0x58>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	4619      	mov	r1, r3
 8002f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fdcb 	bl	8003aba <HAL_SYSTICK_Config>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e00e      	b.n	8002f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b0f      	cmp	r3, #15
 8002f32:	d80a      	bhi.n	8002f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f34:	2200      	movs	r2, #0
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	f04f 30ff 	mov.w	r0, #4294967295
 8002f3c:	f000 fd93 	bl	8003a66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f40:	4a06      	ldr	r2, [pc, #24]	; (8002f5c <HAL_InitTick+0x5c>)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	e000      	b.n	8002f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20000014 	.word	0x20000014
 8002f58:	2000001c 	.word	0x2000001c
 8002f5c:	20000018 	.word	0x20000018

08002f60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f64:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <HAL_IncTick+0x1c>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <HAL_IncTick+0x20>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4413      	add	r3, r2
 8002f70:	4a03      	ldr	r2, [pc, #12]	; (8002f80 <HAL_IncTick+0x20>)
 8002f72:	6013      	str	r3, [r2, #0]
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	2000001c 	.word	0x2000001c
 8002f80:	200009cc 	.word	0x200009cc

08002f84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  return uwTick;
 8002f88:	4b02      	ldr	r3, [pc, #8]	; (8002f94 <HAL_GetTick+0x10>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr
 8002f94:	200009cc 	.word	0x200009cc

08002f98 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e0be      	b.n	8003138 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d109      	bne.n	8002fdc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff fd16 	bl	8002a08 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fb8b 	bl	80036f8 <ADC_ConversionStop_Disable>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f040 8099 	bne.w	8003126 <HAL_ADC_Init+0x18e>
 8002ff4:	7dfb      	ldrb	r3, [r7, #23]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f040 8095 	bne.w	8003126 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003000:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003004:	f023 0302 	bic.w	r3, r3, #2
 8003008:	f043 0202 	orr.w	r2, r3, #2
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003018:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	7b1b      	ldrb	r3, [r3, #12]
 800301e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003020:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	4313      	orrs	r3, r2
 8003026:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003030:	d003      	beq.n	800303a <HAL_ADC_Init+0xa2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d102      	bne.n	8003040 <HAL_ADC_Init+0xa8>
 800303a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800303e:	e000      	b.n	8003042 <HAL_ADC_Init+0xaa>
 8003040:	2300      	movs	r3, #0
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	7d1b      	ldrb	r3, [r3, #20]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d119      	bne.n	8003084 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	7b1b      	ldrb	r3, [r3, #12]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d109      	bne.n	800306c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	3b01      	subs	r3, #1
 800305e:	035a      	lsls	r2, r3, #13
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	e00b      	b.n	8003084 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003070:	f043 0220 	orr.w	r2, r3, #32
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307c:	f043 0201 	orr.w	r2, r3, #1
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	430a      	orrs	r2, r1
 8003096:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	4b28      	ldr	r3, [pc, #160]	; (8003140 <HAL_ADC_Init+0x1a8>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6812      	ldr	r2, [r2, #0]
 80030a6:	68b9      	ldr	r1, [r7, #8]
 80030a8:	430b      	orrs	r3, r1
 80030aa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b4:	d003      	beq.n	80030be <HAL_ADC_Init+0x126>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d104      	bne.n	80030c8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	051b      	lsls	r3, r3, #20
 80030c6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ce:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	430a      	orrs	r2, r1
 80030da:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	4b18      	ldr	r3, [pc, #96]	; (8003144 <HAL_ADC_Init+0x1ac>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d10b      	bne.n	8003104 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f6:	f023 0303 	bic.w	r3, r3, #3
 80030fa:	f043 0201 	orr.w	r2, r3, #1
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003102:	e018      	b.n	8003136 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	f023 0312 	bic.w	r3, r3, #18
 800310c:	f043 0210 	orr.w	r2, r3, #16
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	f043 0201 	orr.w	r2, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003124:	e007      	b.n	8003136 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312a:	f043 0210 	orr.w	r2, r3, #16
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003136:	7dfb      	ldrb	r3, [r7, #23]
}
 8003138:	4618      	mov	r0, r3
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	ffe1f7fd 	.word	0xffe1f7fd
 8003144:	ff1f0efe 	.word	0xff1f0efe

08003148 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003150:	2300      	movs	r3, #0
 8003152:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_ADC_Start_IT+0x1a>
 800315e:	2302      	movs	r3, #2
 8003160:	e0a0      	b.n	80032a4 <HAL_ADC_Start_IT+0x15c>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fa72 	bl	8003654 <ADC_Enable>
 8003170:	4603      	mov	r3, r0
 8003172:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003174:	7bfb      	ldrb	r3, [r7, #15]
 8003176:	2b00      	cmp	r3, #0
 8003178:	f040 808f 	bne.w	800329a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003184:	f023 0301 	bic.w	r3, r3, #1
 8003188:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a45      	ldr	r2, [pc, #276]	; (80032ac <HAL_ADC_Start_IT+0x164>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d105      	bne.n	80031a6 <HAL_ADC_Start_IT+0x5e>
 800319a:	4b45      	ldr	r3, [pc, #276]	; (80032b0 <HAL_ADC_Start_IT+0x168>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d115      	bne.n	80031d2 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d026      	beq.n	800320e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031d0:	e01d      	b.n	800320e <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a33      	ldr	r2, [pc, #204]	; (80032b0 <HAL_ADC_Start_IT+0x168>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d004      	beq.n	80031f2 <HAL_ADC_Start_IT+0xaa>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a2f      	ldr	r2, [pc, #188]	; (80032ac <HAL_ADC_Start_IT+0x164>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d10d      	bne.n	800320e <HAL_ADC_Start_IT+0xc6>
 80031f2:	4b2f      	ldr	r3, [pc, #188]	; (80032b0 <HAL_ADC_Start_IT+0x168>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d007      	beq.n	800320e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003202:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003206:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003212:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d006      	beq.n	8003228 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	f023 0206 	bic.w	r2, r3, #6
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	62da      	str	r2, [r3, #44]	; 0x2c
 8003226:	e002      	b.n	800322e <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f06f 0202 	mvn.w	r2, #2
 800323e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0220 	orr.w	r2, r2, #32
 800324e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800325a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800325e:	d113      	bne.n	8003288 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003264:	4a11      	ldr	r2, [pc, #68]	; (80032ac <HAL_ADC_Start_IT+0x164>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d105      	bne.n	8003276 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800326a:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <HAL_ADC_Start_IT+0x168>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003272:	2b00      	cmp	r3, #0
 8003274:	d108      	bne.n	8003288 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003284:	609a      	str	r2, [r3, #8]
 8003286:	e00c      	b.n	80032a2 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003296:	609a      	str	r2, [r3, #8]
 8003298:	e003      	b.n	80032a2 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40012800 	.word	0x40012800
 80032b0:	40012400 	.word	0x40012400

080032b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr

080032cc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f003 0320 	and.w	r3, r3, #32
 80032de:	2b20      	cmp	r3, #32
 80032e0:	d140      	bne.n	8003364 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d139      	bne.n	8003364 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f4:	f003 0310 	and.w	r3, r3, #16
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d105      	bne.n	8003308 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003312:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003316:	d11d      	bne.n	8003354 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800331c:	2b00      	cmp	r3, #0
 800331e:	d119      	bne.n	8003354 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0220 	bic.w	r2, r2, #32
 800332e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003340:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d105      	bne.n	8003354 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	f043 0201 	orr.w	r2, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7fe faf1 	bl	800193c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f06f 0212 	mvn.w	r2, #18
 8003362:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336e:	2b80      	cmp	r3, #128	; 0x80
 8003370:	d14f      	bne.n	8003412 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b04      	cmp	r3, #4
 800337e:	d148      	bne.n	8003412 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2b00      	cmp	r3, #0
 800338a:	d105      	bne.n	8003398 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80033a2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80033a6:	d012      	beq.n	80033ce <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d125      	bne.n	8003402 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80033c0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80033c4:	d11d      	bne.n	8003402 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d119      	bne.n	8003402 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033dc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d105      	bne.n	8003402 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	f043 0201 	orr.w	r2, r3, #1
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fa4e 	bl	80038a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f06f 020c 	mvn.w	r2, #12
 8003410:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341c:	2b40      	cmp	r3, #64	; 0x40
 800341e:	d114      	bne.n	800344a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b01      	cmp	r3, #1
 800342c:	d10d      	bne.n	800344a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003432:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f809 	bl	8003452 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0201 	mvn.w	r2, #1
 8003448:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800344a:	bf00      	nop
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr

08003464 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003472:	2300      	movs	r3, #0
 8003474:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x20>
 8003480:	2302      	movs	r3, #2
 8003482:	e0dc      	b.n	800363e <HAL_ADC_ConfigChannel+0x1da>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b06      	cmp	r3, #6
 8003492:	d81c      	bhi.n	80034ce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	3b05      	subs	r3, #5
 80034a6:	221f      	movs	r2, #31
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	4019      	ands	r1, r3
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	6818      	ldr	r0, [r3, #0]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	3b05      	subs	r3, #5
 80034c0:	fa00 f203 	lsl.w	r2, r0, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	635a      	str	r2, [r3, #52]	; 0x34
 80034cc:	e03c      	b.n	8003548 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b0c      	cmp	r3, #12
 80034d4:	d81c      	bhi.n	8003510 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	3b23      	subs	r3, #35	; 0x23
 80034e8:	221f      	movs	r2, #31
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43db      	mvns	r3, r3
 80034f0:	4019      	ands	r1, r3
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	6818      	ldr	r0, [r3, #0]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	3b23      	subs	r3, #35	; 0x23
 8003502:	fa00 f203 	lsl.w	r2, r0, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	631a      	str	r2, [r3, #48]	; 0x30
 800350e:	e01b      	b.n	8003548 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	3b41      	subs	r3, #65	; 0x41
 8003522:	221f      	movs	r2, #31
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	43db      	mvns	r3, r3
 800352a:	4019      	ands	r1, r3
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	6818      	ldr	r0, [r3, #0]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	3b41      	subs	r3, #65	; 0x41
 800353c:	fa00 f203 	lsl.w	r2, r0, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b09      	cmp	r3, #9
 800354e:	d91c      	bls.n	800358a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68d9      	ldr	r1, [r3, #12]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	4613      	mov	r3, r2
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	4413      	add	r3, r2
 8003560:	3b1e      	subs	r3, #30
 8003562:	2207      	movs	r2, #7
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	4019      	ands	r1, r3
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	6898      	ldr	r0, [r3, #8]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	4613      	mov	r3, r2
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	4413      	add	r3, r2
 800357a:	3b1e      	subs	r3, #30
 800357c:	fa00 f203 	lsl.w	r2, r0, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	60da      	str	r2, [r3, #12]
 8003588:	e019      	b.n	80035be <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6919      	ldr	r1, [r3, #16]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	4613      	mov	r3, r2
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	4413      	add	r3, r2
 800359a:	2207      	movs	r2, #7
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	4019      	ands	r1, r3
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	6898      	ldr	r0, [r3, #8]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	4613      	mov	r3, r2
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	4413      	add	r3, r2
 80035b2:	fa00 f203 	lsl.w	r2, r0, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2b10      	cmp	r3, #16
 80035c4:	d003      	beq.n	80035ce <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035ca:	2b11      	cmp	r3, #17
 80035cc:	d132      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1d      	ldr	r2, [pc, #116]	; (8003648 <HAL_ADC_ConfigChannel+0x1e4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d125      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d126      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80035f4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b10      	cmp	r3, #16
 80035fc:	d11a      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035fe:	4b13      	ldr	r3, [pc, #76]	; (800364c <HAL_ADC_ConfigChannel+0x1e8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a13      	ldr	r2, [pc, #76]	; (8003650 <HAL_ADC_ConfigChannel+0x1ec>)
 8003604:	fba2 2303 	umull	r2, r3, r2, r3
 8003608:	0c9a      	lsrs	r2, r3, #18
 800360a:	4613      	mov	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003614:	e002      	b.n	800361c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	3b01      	subs	r3, #1
 800361a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f9      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x1b2>
 8003622:	e007      	b.n	8003634 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003628:	f043 0220 	orr.w	r2, r3, #32
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800363c:	7bfb      	ldrb	r3, [r7, #15]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	bc80      	pop	{r7}
 8003646:	4770      	bx	lr
 8003648:	40012400 	.word	0x40012400
 800364c:	20000014 	.word	0x20000014
 8003650:	431bde83 	.word	0x431bde83

08003654 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b01      	cmp	r3, #1
 8003670:	d039      	beq.n	80036e6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f042 0201 	orr.w	r2, r2, #1
 8003680:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003682:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <ADC_Enable+0x9c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1b      	ldr	r2, [pc, #108]	; (80036f4 <ADC_Enable+0xa0>)
 8003688:	fba2 2303 	umull	r2, r3, r2, r3
 800368c:	0c9b      	lsrs	r3, r3, #18
 800368e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003690:	e002      	b.n	8003698 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	3b01      	subs	r3, #1
 8003696:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f9      	bne.n	8003692 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800369e:	f7ff fc71 	bl	8002f84 <HAL_GetTick>
 80036a2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80036a4:	e018      	b.n	80036d8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036a6:	f7ff fc6d 	bl	8002f84 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d911      	bls.n	80036d8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	f043 0210 	orr.w	r2, r3, #16
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	f043 0201 	orr.w	r2, r3, #1
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e007      	b.n	80036e8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d1df      	bne.n	80036a6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	20000014 	.word	0x20000014
 80036f4:	431bde83 	.word	0x431bde83

080036f8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b01      	cmp	r3, #1
 8003710:	d127      	bne.n	8003762 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0201 	bic.w	r2, r2, #1
 8003720:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003722:	f7ff fc2f 	bl	8002f84 <HAL_GetTick>
 8003726:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003728:	e014      	b.n	8003754 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800372a:	f7ff fc2b 	bl	8002f84 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d90d      	bls.n	8003754 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	f043 0210 	orr.w	r2, r3, #16
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	f043 0201 	orr.w	r2, r3, #1
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e007      	b.n	8003764 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b01      	cmp	r3, #1
 8003760:	d0e3      	beq.n	800372a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800376c:	b590      	push	{r4, r7, lr}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003774:	2300      	movs	r3, #0
 8003776:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <HAL_ADCEx_Calibration_Start+0x1e>
 8003786:	2302      	movs	r3, #2
 8003788:	e086      	b.n	8003898 <HAL_ADCEx_Calibration_Start+0x12c>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff ffb0 	bl	80036f8 <ADC_ConversionStop_Disable>
 8003798:	4603      	mov	r3, r0
 800379a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800379c:	7dfb      	ldrb	r3, [r7, #23]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d175      	bne.n	800388e <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80037aa:	f023 0302 	bic.w	r3, r3, #2
 80037ae:	f043 0202 	orr.w	r2, r3, #2
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80037b6:	4b3a      	ldr	r3, [pc, #232]	; (80038a0 <HAL_ADCEx_Calibration_Start+0x134>)
 80037b8:	681c      	ldr	r4, [r3, #0]
 80037ba:	2002      	movs	r0, #2
 80037bc:	f002 fdd8 	bl	8006370 <HAL_RCCEx_GetPeriphCLKFreq>
 80037c0:	4603      	mov	r3, r0
 80037c2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80037c6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80037c8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80037ca:	e002      	b.n	80037d2 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1f9      	bne.n	80037cc <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff ff3b 	bl	8003654 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0208 	orr.w	r2, r2, #8
 80037ec:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80037ee:	f7ff fbc9 	bl	8002f84 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80037f4:	e014      	b.n	8003820 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80037f6:	f7ff fbc5 	bl	8002f84 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b0a      	cmp	r3, #10
 8003802:	d90d      	bls.n	8003820 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003808:	f023 0312 	bic.w	r3, r3, #18
 800380c:	f043 0210 	orr.w	r2, r3, #16
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e03b      	b.n	8003898 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1e3      	bne.n	80037f6 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f042 0204 	orr.w	r2, r2, #4
 800383c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800383e:	f7ff fba1 	bl	8002f84 <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003844:	e014      	b.n	8003870 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003846:	f7ff fb9d 	bl	8002f84 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b0a      	cmp	r3, #10
 8003852:	d90d      	bls.n	8003870 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003858:	f023 0312 	bic.w	r3, r3, #18
 800385c:	f043 0210 	orr.w	r2, r3, #16
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e013      	b.n	8003898 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 0304 	and.w	r3, r3, #4
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1e3      	bne.n	8003846 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003882:	f023 0303 	bic.w	r3, r3, #3
 8003886:	f043 0201 	orr.w	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003896:	7dfb      	ldrb	r3, [r7, #23]
}
 8003898:	4618      	mov	r0, r3
 800389a:	371c      	adds	r7, #28
 800389c:	46bd      	mov	sp, r7
 800389e:	bd90      	pop	{r4, r7, pc}
 80038a0:	20000014 	.word	0x20000014

080038a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr
	...

080038b8 <__NVIC_SetPriorityGrouping>:
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038c8:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <__NVIC_SetPriorityGrouping+0x44>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038d4:	4013      	ands	r3, r2
 80038d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ea:	4a04      	ldr	r2, [pc, #16]	; (80038fc <__NVIC_SetPriorityGrouping+0x44>)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	60d3      	str	r3, [r2, #12]
}
 80038f0:	bf00      	nop
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	e000ed00 	.word	0xe000ed00

08003900 <__NVIC_GetPriorityGrouping>:
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003904:	4b04      	ldr	r3, [pc, #16]	; (8003918 <__NVIC_GetPriorityGrouping+0x18>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	0a1b      	lsrs	r3, r3, #8
 800390a:	f003 0307 	and.w	r3, r3, #7
}
 800390e:	4618      	mov	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	bc80      	pop	{r7}
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	e000ed00 	.word	0xe000ed00

0800391c <__NVIC_EnableIRQ>:
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392a:	2b00      	cmp	r3, #0
 800392c:	db0b      	blt.n	8003946 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	f003 021f 	and.w	r2, r3, #31
 8003934:	4906      	ldr	r1, [pc, #24]	; (8003950 <__NVIC_EnableIRQ+0x34>)
 8003936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393a:	095b      	lsrs	r3, r3, #5
 800393c:	2001      	movs	r0, #1
 800393e:	fa00 f202 	lsl.w	r2, r0, r2
 8003942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	bc80      	pop	{r7}
 800394e:	4770      	bx	lr
 8003950:	e000e100 	.word	0xe000e100

08003954 <__NVIC_SetPriority>:
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	6039      	str	r1, [r7, #0]
 800395e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003964:	2b00      	cmp	r3, #0
 8003966:	db0a      	blt.n	800397e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	b2da      	uxtb	r2, r3
 800396c:	490c      	ldr	r1, [pc, #48]	; (80039a0 <__NVIC_SetPriority+0x4c>)
 800396e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003972:	0112      	lsls	r2, r2, #4
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	440b      	add	r3, r1
 8003978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800397c:	e00a      	b.n	8003994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	b2da      	uxtb	r2, r3
 8003982:	4908      	ldr	r1, [pc, #32]	; (80039a4 <__NVIC_SetPriority+0x50>)
 8003984:	79fb      	ldrb	r3, [r7, #7]
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	3b04      	subs	r3, #4
 800398c:	0112      	lsls	r2, r2, #4
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	440b      	add	r3, r1
 8003992:	761a      	strb	r2, [r3, #24]
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	e000e100 	.word	0xe000e100
 80039a4:	e000ed00 	.word	0xe000ed00

080039a8 <NVIC_EncodePriority>:
{
 80039a8:	b480      	push	{r7}
 80039aa:	b089      	sub	sp, #36	; 0x24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f1c3 0307 	rsb	r3, r3, #7
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	bf28      	it	cs
 80039c6:	2304      	movcs	r3, #4
 80039c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	3304      	adds	r3, #4
 80039ce:	2b06      	cmp	r3, #6
 80039d0:	d902      	bls.n	80039d8 <NVIC_EncodePriority+0x30>
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	3b03      	subs	r3, #3
 80039d6:	e000      	b.n	80039da <NVIC_EncodePriority+0x32>
 80039d8:	2300      	movs	r3, #0
 80039da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039dc:	f04f 32ff 	mov.w	r2, #4294967295
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	43da      	mvns	r2, r3
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	401a      	ands	r2, r3
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039f0:	f04f 31ff 	mov.w	r1, #4294967295
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	fa01 f303 	lsl.w	r3, r1, r3
 80039fa:	43d9      	mvns	r1, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a00:	4313      	orrs	r3, r2
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3724      	adds	r7, #36	; 0x24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc80      	pop	{r7}
 8003a0a:	4770      	bx	lr

08003a0c <SysTick_Config>:
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a1c:	d301      	bcc.n	8003a22 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e00f      	b.n	8003a42 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a22:	4a0a      	ldr	r2, [pc, #40]	; (8003a4c <SysTick_Config+0x40>)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a2a:	210f      	movs	r1, #15
 8003a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a30:	f7ff ff90 	bl	8003954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a34:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <SysTick_Config+0x40>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a3a:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <SysTick_Config+0x40>)
 8003a3c:	2207      	movs	r2, #7
 8003a3e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	e000e010 	.word	0xe000e010

08003a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7ff ff2d 	bl	80038b8 <__NVIC_SetPriorityGrouping>
}
 8003a5e:	bf00      	nop
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b086      	sub	sp, #24
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	607a      	str	r2, [r7, #4]
 8003a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a78:	f7ff ff42 	bl	8003900 <__NVIC_GetPriorityGrouping>
 8003a7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	68b9      	ldr	r1, [r7, #8]
 8003a82:	6978      	ldr	r0, [r7, #20]
 8003a84:	f7ff ff90 	bl	80039a8 <NVIC_EncodePriority>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a8e:	4611      	mov	r1, r2
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff ff5f 	bl	8003954 <__NVIC_SetPriority>
}
 8003a96:	bf00      	nop
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b082      	sub	sp, #8
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff ff35 	bl	800391c <__NVIC_EnableIRQ>
}
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7ff ffa2 	bl	8003a0c <SysTick_Config>
 8003ac8:	4603      	mov	r3, r0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e00e      	b.n	8003b02 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	795b      	ldrb	r3, [r3, #5]
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d105      	bne.n	8003afa <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7fe ffcb 	bl	8002a90 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b087      	sub	sp, #28
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003b16:	2300      	movs	r3, #0
 8003b18:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689a      	ldr	r2, [r3, #8]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0201 	orr.w	r2, r2, #1
 8003b2e:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	e00a      	b.n	8003b4c <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	441a      	add	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6812      	ldr	r2, [r2, #0]
 8003b44:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d3f0      	bcc.n	8003b36 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8003b62:	693b      	ldr	r3, [r7, #16]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	371c      	adds	r7, #28
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bc80      	pop	{r7}
 8003b6c:	4770      	bx	lr
	...

08003b70 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003b82:	2300      	movs	r3, #0
 8003b84:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003b8a:	4b2f      	ldr	r3, [pc, #188]	; (8003c48 <HAL_FLASH_Program+0xd8>)
 8003b8c:	7e1b      	ldrb	r3, [r3, #24]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_FLASH_Program+0x26>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e054      	b.n	8003c40 <HAL_FLASH_Program+0xd0>
 8003b96:	4b2c      	ldr	r3, [pc, #176]	; (8003c48 <HAL_FLASH_Program+0xd8>)
 8003b98:	2201      	movs	r2, #1
 8003b9a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003b9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ba0:	f000 f8a8 	bl	8003cf4 <FLASH_WaitForLastOperation>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003ba8:	7dfb      	ldrb	r3, [r7, #23]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d144      	bne.n	8003c38 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d102      	bne.n	8003bba <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	757b      	strb	r3, [r7, #21]
 8003bb8:	e007      	b.n	8003bca <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d102      	bne.n	8003bc6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	757b      	strb	r3, [r7, #21]
 8003bc4:	e001      	b.n	8003bca <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003bc6:	2304      	movs	r3, #4
 8003bc8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003bca:	2300      	movs	r3, #0
 8003bcc:	75bb      	strb	r3, [r7, #22]
 8003bce:	e02d      	b.n	8003c2c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003bd0:	7dbb      	ldrb	r3, [r7, #22]
 8003bd2:	005a      	lsls	r2, r3, #1
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	eb02 0c03 	add.w	ip, r2, r3
 8003bda:	7dbb      	ldrb	r3, [r7, #22]
 8003bdc:	0119      	lsls	r1, r3, #4
 8003bde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003be2:	f1c1 0620 	rsb	r6, r1, #32
 8003be6:	f1a1 0020 	sub.w	r0, r1, #32
 8003bea:	fa22 f401 	lsr.w	r4, r2, r1
 8003bee:	fa03 f606 	lsl.w	r6, r3, r6
 8003bf2:	4334      	orrs	r4, r6
 8003bf4:	fa23 f000 	lsr.w	r0, r3, r0
 8003bf8:	4304      	orrs	r4, r0
 8003bfa:	fa23 f501 	lsr.w	r5, r3, r1
 8003bfe:	b2a3      	uxth	r3, r4
 8003c00:	4619      	mov	r1, r3
 8003c02:	4660      	mov	r0, ip
 8003c04:	f000 f85a 	bl	8003cbc <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c08:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c0c:	f000 f872 	bl	8003cf4 <FLASH_WaitForLastOperation>
 8003c10:	4603      	mov	r3, r0
 8003c12:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003c14:	4b0d      	ldr	r3, [pc, #52]	; (8003c4c <HAL_FLASH_Program+0xdc>)
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	4a0c      	ldr	r2, [pc, #48]	; (8003c4c <HAL_FLASH_Program+0xdc>)
 8003c1a:	f023 0301 	bic.w	r3, r3, #1
 8003c1e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003c20:	7dfb      	ldrb	r3, [r7, #23]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d107      	bne.n	8003c36 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003c26:	7dbb      	ldrb	r3, [r7, #22]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	75bb      	strb	r3, [r7, #22]
 8003c2c:	7dba      	ldrb	r2, [r7, #22]
 8003c2e:	7d7b      	ldrb	r3, [r7, #21]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d3cd      	bcc.n	8003bd0 <HAL_FLASH_Program+0x60>
 8003c34:	e000      	b.n	8003c38 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003c36:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003c38:	4b03      	ldr	r3, [pc, #12]	; (8003c48 <HAL_FLASH_Program+0xd8>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	761a      	strb	r2, [r3, #24]

  return status;
 8003c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	371c      	adds	r7, #28
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c48:	200009d0 	.word	0x200009d0
 8003c4c:	40022000 	.word	0x40022000

08003c50 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003c5a:	4b0d      	ldr	r3, [pc, #52]	; (8003c90 <HAL_FLASH_Unlock+0x40>)
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00d      	beq.n	8003c82 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003c66:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <HAL_FLASH_Unlock+0x40>)
 8003c68:	4a0a      	ldr	r2, [pc, #40]	; (8003c94 <HAL_FLASH_Unlock+0x44>)
 8003c6a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003c6c:	4b08      	ldr	r3, [pc, #32]	; (8003c90 <HAL_FLASH_Unlock+0x40>)
 8003c6e:	4a0a      	ldr	r2, [pc, #40]	; (8003c98 <HAL_FLASH_Unlock+0x48>)
 8003c70:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003c72:	4b07      	ldr	r3, [pc, #28]	; (8003c90 <HAL_FLASH_Unlock+0x40>)
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003c82:	79fb      	ldrb	r3, [r7, #7]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bc80      	pop	{r7}
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40022000 	.word	0x40022000
 8003c94:	45670123 	.word	0x45670123
 8003c98:	cdef89ab 	.word	0xcdef89ab

08003c9c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003ca0:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <HAL_FLASH_Lock+0x1c>)
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	4a04      	ldr	r2, [pc, #16]	; (8003cb8 <HAL_FLASH_Lock+0x1c>)
 8003ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003caa:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bc80      	pop	{r7}
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40022000 	.word	0x40022000

08003cbc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003cc8:	4b08      	ldr	r3, [pc, #32]	; (8003cec <FLASH_Program_HalfWord+0x30>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003cce:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <FLASH_Program_HalfWord+0x34>)
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	4a07      	ldr	r2, [pc, #28]	; (8003cf0 <FLASH_Program_HalfWord+0x34>)
 8003cd4:	f043 0301 	orr.w	r3, r3, #1
 8003cd8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	887a      	ldrh	r2, [r7, #2]
 8003cde:	801a      	strh	r2, [r3, #0]
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bc80      	pop	{r7}
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	200009d0 	.word	0x200009d0
 8003cf0:	40022000 	.word	0x40022000

08003cf4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003cfc:	f7ff f942 	bl	8002f84 <HAL_GetTick>
 8003d00:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003d02:	e010      	b.n	8003d26 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0a:	d00c      	beq.n	8003d26 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d007      	beq.n	8003d22 <FLASH_WaitForLastOperation+0x2e>
 8003d12:	f7ff f937 	bl	8002f84 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d201      	bcs.n	8003d26 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e025      	b.n	8003d72 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003d26:	4b15      	ldr	r3, [pc, #84]	; (8003d7c <FLASH_WaitForLastOperation+0x88>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1e8      	bne.n	8003d04 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003d32:	4b12      	ldr	r3, [pc, #72]	; (8003d7c <FLASH_WaitForLastOperation+0x88>)
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003d3e:	4b0f      	ldr	r3, [pc, #60]	; (8003d7c <FLASH_WaitForLastOperation+0x88>)
 8003d40:	2220      	movs	r2, #32
 8003d42:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003d44:	4b0d      	ldr	r3, [pc, #52]	; (8003d7c <FLASH_WaitForLastOperation+0x88>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10b      	bne.n	8003d68 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003d50:	4b0a      	ldr	r3, [pc, #40]	; (8003d7c <FLASH_WaitForLastOperation+0x88>)
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d105      	bne.n	8003d68 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003d5c:	4b07      	ldr	r3, [pc, #28]	; (8003d7c <FLASH_WaitForLastOperation+0x88>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003d68:	f000 f80a 	bl	8003d80 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e000      	b.n	8003d72 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40022000 	.word	0x40022000

08003d80 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003d8a:	4b23      	ldr	r3, [pc, #140]	; (8003e18 <FLASH_SetErrorCode+0x98>)
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	f003 0310 	and.w	r3, r3, #16
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d009      	beq.n	8003daa <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003d96:	4b21      	ldr	r3, [pc, #132]	; (8003e1c <FLASH_SetErrorCode+0x9c>)
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	f043 0302 	orr.w	r3, r3, #2
 8003d9e:	4a1f      	ldr	r2, [pc, #124]	; (8003e1c <FLASH_SetErrorCode+0x9c>)
 8003da0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f043 0310 	orr.w	r3, r3, #16
 8003da8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003daa:	4b1b      	ldr	r3, [pc, #108]	; (8003e18 <FLASH_SetErrorCode+0x98>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d009      	beq.n	8003dca <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003db6:	4b19      	ldr	r3, [pc, #100]	; (8003e1c <FLASH_SetErrorCode+0x9c>)
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	f043 0301 	orr.w	r3, r3, #1
 8003dbe:	4a17      	ldr	r2, [pc, #92]	; (8003e1c <FLASH_SetErrorCode+0x9c>)
 8003dc0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f043 0304 	orr.w	r3, r3, #4
 8003dc8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003dca:	4b13      	ldr	r3, [pc, #76]	; (8003e18 <FLASH_SetErrorCode+0x98>)
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00b      	beq.n	8003dee <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003dd6:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <FLASH_SetErrorCode+0x9c>)
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	f043 0304 	orr.w	r3, r3, #4
 8003dde:	4a0f      	ldr	r2, [pc, #60]	; (8003e1c <FLASH_SetErrorCode+0x9c>)
 8003de0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003de2:	4b0d      	ldr	r3, [pc, #52]	; (8003e18 <FLASH_SetErrorCode+0x98>)
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	4a0c      	ldr	r2, [pc, #48]	; (8003e18 <FLASH_SetErrorCode+0x98>)
 8003de8:	f023 0301 	bic.w	r3, r3, #1
 8003dec:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f240 1201 	movw	r2, #257	; 0x101
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d106      	bne.n	8003e06 <FLASH_SetErrorCode+0x86>
 8003df8:	4b07      	ldr	r3, [pc, #28]	; (8003e18 <FLASH_SetErrorCode+0x98>)
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	4a06      	ldr	r2, [pc, #24]	; (8003e18 <FLASH_SetErrorCode+0x98>)
 8003dfe:	f023 0301 	bic.w	r3, r3, #1
 8003e02:	61d3      	str	r3, [r2, #28]
}  
 8003e04:	e002      	b.n	8003e0c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003e06:	4a04      	ldr	r2, [pc, #16]	; (8003e18 <FLASH_SetErrorCode+0x98>)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	60d3      	str	r3, [r2, #12]
}  
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc80      	pop	{r7}
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40022000 	.word	0x40022000
 8003e1c:	200009d0 	.word	0x200009d0

08003e20 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003e32:	4b2f      	ldr	r3, [pc, #188]	; (8003ef0 <HAL_FLASHEx_Erase+0xd0>)
 8003e34:	7e1b      	ldrb	r3, [r3, #24]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d101      	bne.n	8003e3e <HAL_FLASHEx_Erase+0x1e>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e053      	b.n	8003ee6 <HAL_FLASHEx_Erase+0xc6>
 8003e3e:	4b2c      	ldr	r3, [pc, #176]	; (8003ef0 <HAL_FLASHEx_Erase+0xd0>)
 8003e40:	2201      	movs	r2, #1
 8003e42:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d116      	bne.n	8003e7a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003e4c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e50:	f7ff ff50 	bl	8003cf4 <FLASH_WaitForLastOperation>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d141      	bne.n	8003ede <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003e5a:	2001      	movs	r0, #1
 8003e5c:	f000 f84c 	bl	8003ef8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e64:	f7ff ff46 	bl	8003cf4 <FLASH_WaitForLastOperation>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003e6c:	4b21      	ldr	r3, [pc, #132]	; (8003ef4 <HAL_FLASHEx_Erase+0xd4>)
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	4a20      	ldr	r2, [pc, #128]	; (8003ef4 <HAL_FLASHEx_Erase+0xd4>)
 8003e72:	f023 0304 	bic.w	r3, r3, #4
 8003e76:	6113      	str	r3, [r2, #16]
 8003e78:	e031      	b.n	8003ede <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003e7a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e7e:	f7ff ff39 	bl	8003cf4 <FLASH_WaitForLastOperation>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d12a      	bne.n	8003ede <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e8e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	60bb      	str	r3, [r7, #8]
 8003e96:	e019      	b.n	8003ecc <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003e98:	68b8      	ldr	r0, [r7, #8]
 8003e9a:	f000 f849 	bl	8003f30 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e9e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ea2:	f7ff ff27 	bl	8003cf4 <FLASH_WaitForLastOperation>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003eaa:	4b12      	ldr	r3, [pc, #72]	; (8003ef4 <HAL_FLASHEx_Erase+0xd4>)
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	4a11      	ldr	r2, [pc, #68]	; (8003ef4 <HAL_FLASHEx_Erase+0xd4>)
 8003eb0:	f023 0302 	bic.w	r3, r3, #2
 8003eb4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003eb6:	7bfb      	ldrb	r3, [r7, #15]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	601a      	str	r2, [r3, #0]
            break;
 8003ec2:	e00c      	b.n	8003ede <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003eca:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	029a      	lsls	r2, r3, #10
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d3dc      	bcc.n	8003e98 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003ede:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <HAL_FLASHEx_Erase+0xd0>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	761a      	strb	r2, [r3, #24]

  return status;
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	200009d0 	.word	0x200009d0
 8003ef4:	40022000 	.word	0x40022000

08003ef8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003f00:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <FLASH_MassErase+0x30>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003f06:	4b09      	ldr	r3, [pc, #36]	; (8003f2c <FLASH_MassErase+0x34>)
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	4a08      	ldr	r2, [pc, #32]	; (8003f2c <FLASH_MassErase+0x34>)
 8003f0c:	f043 0304 	orr.w	r3, r3, #4
 8003f10:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003f12:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <FLASH_MassErase+0x34>)
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	4a05      	ldr	r2, [pc, #20]	; (8003f2c <FLASH_MassErase+0x34>)
 8003f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f1c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr
 8003f28:	200009d0 	.word	0x200009d0
 8003f2c:	40022000 	.word	0x40022000

08003f30 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003f38:	4b0b      	ldr	r3, [pc, #44]	; (8003f68 <FLASH_PageErase+0x38>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003f3e:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <FLASH_PageErase+0x3c>)
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	4a0a      	ldr	r2, [pc, #40]	; (8003f6c <FLASH_PageErase+0x3c>)
 8003f44:	f043 0302 	orr.w	r3, r3, #2
 8003f48:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003f4a:	4a08      	ldr	r2, [pc, #32]	; (8003f6c <FLASH_PageErase+0x3c>)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003f50:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <FLASH_PageErase+0x3c>)
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	4a05      	ldr	r2, [pc, #20]	; (8003f6c <FLASH_PageErase+0x3c>)
 8003f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f5a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bc80      	pop	{r7}
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	200009d0 	.word	0x200009d0
 8003f6c:	40022000 	.word	0x40022000

08003f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b08b      	sub	sp, #44	; 0x2c
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f82:	e169      	b.n	8004258 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003f84:	2201      	movs	r2, #1
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	4013      	ands	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	f040 8158 	bne.w	8004252 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	4a9a      	ldr	r2, [pc, #616]	; (8004210 <HAL_GPIO_Init+0x2a0>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d05e      	beq.n	800406a <HAL_GPIO_Init+0xfa>
 8003fac:	4a98      	ldr	r2, [pc, #608]	; (8004210 <HAL_GPIO_Init+0x2a0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d875      	bhi.n	800409e <HAL_GPIO_Init+0x12e>
 8003fb2:	4a98      	ldr	r2, [pc, #608]	; (8004214 <HAL_GPIO_Init+0x2a4>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d058      	beq.n	800406a <HAL_GPIO_Init+0xfa>
 8003fb8:	4a96      	ldr	r2, [pc, #600]	; (8004214 <HAL_GPIO_Init+0x2a4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d86f      	bhi.n	800409e <HAL_GPIO_Init+0x12e>
 8003fbe:	4a96      	ldr	r2, [pc, #600]	; (8004218 <HAL_GPIO_Init+0x2a8>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d052      	beq.n	800406a <HAL_GPIO_Init+0xfa>
 8003fc4:	4a94      	ldr	r2, [pc, #592]	; (8004218 <HAL_GPIO_Init+0x2a8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d869      	bhi.n	800409e <HAL_GPIO_Init+0x12e>
 8003fca:	4a94      	ldr	r2, [pc, #592]	; (800421c <HAL_GPIO_Init+0x2ac>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d04c      	beq.n	800406a <HAL_GPIO_Init+0xfa>
 8003fd0:	4a92      	ldr	r2, [pc, #584]	; (800421c <HAL_GPIO_Init+0x2ac>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d863      	bhi.n	800409e <HAL_GPIO_Init+0x12e>
 8003fd6:	4a92      	ldr	r2, [pc, #584]	; (8004220 <HAL_GPIO_Init+0x2b0>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d046      	beq.n	800406a <HAL_GPIO_Init+0xfa>
 8003fdc:	4a90      	ldr	r2, [pc, #576]	; (8004220 <HAL_GPIO_Init+0x2b0>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d85d      	bhi.n	800409e <HAL_GPIO_Init+0x12e>
 8003fe2:	2b12      	cmp	r3, #18
 8003fe4:	d82a      	bhi.n	800403c <HAL_GPIO_Init+0xcc>
 8003fe6:	2b12      	cmp	r3, #18
 8003fe8:	d859      	bhi.n	800409e <HAL_GPIO_Init+0x12e>
 8003fea:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <HAL_GPIO_Init+0x80>)
 8003fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff0:	0800406b 	.word	0x0800406b
 8003ff4:	08004045 	.word	0x08004045
 8003ff8:	08004057 	.word	0x08004057
 8003ffc:	08004099 	.word	0x08004099
 8004000:	0800409f 	.word	0x0800409f
 8004004:	0800409f 	.word	0x0800409f
 8004008:	0800409f 	.word	0x0800409f
 800400c:	0800409f 	.word	0x0800409f
 8004010:	0800409f 	.word	0x0800409f
 8004014:	0800409f 	.word	0x0800409f
 8004018:	0800409f 	.word	0x0800409f
 800401c:	0800409f 	.word	0x0800409f
 8004020:	0800409f 	.word	0x0800409f
 8004024:	0800409f 	.word	0x0800409f
 8004028:	0800409f 	.word	0x0800409f
 800402c:	0800409f 	.word	0x0800409f
 8004030:	0800409f 	.word	0x0800409f
 8004034:	0800404d 	.word	0x0800404d
 8004038:	08004061 	.word	0x08004061
 800403c:	4a79      	ldr	r2, [pc, #484]	; (8004224 <HAL_GPIO_Init+0x2b4>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d013      	beq.n	800406a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004042:	e02c      	b.n	800409e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	623b      	str	r3, [r7, #32]
          break;
 800404a:	e029      	b.n	80040a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	3304      	adds	r3, #4
 8004052:	623b      	str	r3, [r7, #32]
          break;
 8004054:	e024      	b.n	80040a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	3308      	adds	r3, #8
 800405c:	623b      	str	r3, [r7, #32]
          break;
 800405e:	e01f      	b.n	80040a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	330c      	adds	r3, #12
 8004066:	623b      	str	r3, [r7, #32]
          break;
 8004068:	e01a      	b.n	80040a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d102      	bne.n	8004078 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004072:	2304      	movs	r3, #4
 8004074:	623b      	str	r3, [r7, #32]
          break;
 8004076:	e013      	b.n	80040a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d105      	bne.n	800408c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004080:	2308      	movs	r3, #8
 8004082:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69fa      	ldr	r2, [r7, #28]
 8004088:	611a      	str	r2, [r3, #16]
          break;
 800408a:	e009      	b.n	80040a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800408c:	2308      	movs	r3, #8
 800408e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	69fa      	ldr	r2, [r7, #28]
 8004094:	615a      	str	r2, [r3, #20]
          break;
 8004096:	e003      	b.n	80040a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004098:	2300      	movs	r3, #0
 800409a:	623b      	str	r3, [r7, #32]
          break;
 800409c:	e000      	b.n	80040a0 <HAL_GPIO_Init+0x130>
          break;
 800409e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	2bff      	cmp	r3, #255	; 0xff
 80040a4:	d801      	bhi.n	80040aa <HAL_GPIO_Init+0x13a>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	e001      	b.n	80040ae <HAL_GPIO_Init+0x13e>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3304      	adds	r3, #4
 80040ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	2bff      	cmp	r3, #255	; 0xff
 80040b4:	d802      	bhi.n	80040bc <HAL_GPIO_Init+0x14c>
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	e002      	b.n	80040c2 <HAL_GPIO_Init+0x152>
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	3b08      	subs	r3, #8
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	210f      	movs	r1, #15
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	fa01 f303 	lsl.w	r3, r1, r3
 80040d0:	43db      	mvns	r3, r3
 80040d2:	401a      	ands	r2, r3
 80040d4:	6a39      	ldr	r1, [r7, #32]
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	fa01 f303 	lsl.w	r3, r1, r3
 80040dc:	431a      	orrs	r2, r3
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 80b1 	beq.w	8004252 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80040f0:	4b4d      	ldr	r3, [pc, #308]	; (8004228 <HAL_GPIO_Init+0x2b8>)
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	4a4c      	ldr	r2, [pc, #304]	; (8004228 <HAL_GPIO_Init+0x2b8>)
 80040f6:	f043 0301 	orr.w	r3, r3, #1
 80040fa:	6193      	str	r3, [r2, #24]
 80040fc:	4b4a      	ldr	r3, [pc, #296]	; (8004228 <HAL_GPIO_Init+0x2b8>)
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	60bb      	str	r3, [r7, #8]
 8004106:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004108:	4a48      	ldr	r2, [pc, #288]	; (800422c <HAL_GPIO_Init+0x2bc>)
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	089b      	lsrs	r3, r3, #2
 800410e:	3302      	adds	r3, #2
 8004110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004114:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	f003 0303 	and.w	r3, r3, #3
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	220f      	movs	r2, #15
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	43db      	mvns	r3, r3
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4013      	ands	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a40      	ldr	r2, [pc, #256]	; (8004230 <HAL_GPIO_Init+0x2c0>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d013      	beq.n	800415c <HAL_GPIO_Init+0x1ec>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a3f      	ldr	r2, [pc, #252]	; (8004234 <HAL_GPIO_Init+0x2c4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00d      	beq.n	8004158 <HAL_GPIO_Init+0x1e8>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a3e      	ldr	r2, [pc, #248]	; (8004238 <HAL_GPIO_Init+0x2c8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d007      	beq.n	8004154 <HAL_GPIO_Init+0x1e4>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a3d      	ldr	r2, [pc, #244]	; (800423c <HAL_GPIO_Init+0x2cc>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d101      	bne.n	8004150 <HAL_GPIO_Init+0x1e0>
 800414c:	2303      	movs	r3, #3
 800414e:	e006      	b.n	800415e <HAL_GPIO_Init+0x1ee>
 8004150:	2304      	movs	r3, #4
 8004152:	e004      	b.n	800415e <HAL_GPIO_Init+0x1ee>
 8004154:	2302      	movs	r3, #2
 8004156:	e002      	b.n	800415e <HAL_GPIO_Init+0x1ee>
 8004158:	2301      	movs	r3, #1
 800415a:	e000      	b.n	800415e <HAL_GPIO_Init+0x1ee>
 800415c:	2300      	movs	r3, #0
 800415e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004160:	f002 0203 	and.w	r2, r2, #3
 8004164:	0092      	lsls	r2, r2, #2
 8004166:	4093      	lsls	r3, r2
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800416e:	492f      	ldr	r1, [pc, #188]	; (800422c <HAL_GPIO_Init+0x2bc>)
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	089b      	lsrs	r3, r3, #2
 8004174:	3302      	adds	r3, #2
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d006      	beq.n	8004196 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004188:	4b2d      	ldr	r3, [pc, #180]	; (8004240 <HAL_GPIO_Init+0x2d0>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	492c      	ldr	r1, [pc, #176]	; (8004240 <HAL_GPIO_Init+0x2d0>)
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	4313      	orrs	r3, r2
 8004192:	600b      	str	r3, [r1, #0]
 8004194:	e006      	b.n	80041a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004196:	4b2a      	ldr	r3, [pc, #168]	; (8004240 <HAL_GPIO_Init+0x2d0>)
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	43db      	mvns	r3, r3
 800419e:	4928      	ldr	r1, [pc, #160]	; (8004240 <HAL_GPIO_Init+0x2d0>)
 80041a0:	4013      	ands	r3, r2
 80041a2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d006      	beq.n	80041be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80041b0:	4b23      	ldr	r3, [pc, #140]	; (8004240 <HAL_GPIO_Init+0x2d0>)
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	4922      	ldr	r1, [pc, #136]	; (8004240 <HAL_GPIO_Init+0x2d0>)
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	604b      	str	r3, [r1, #4]
 80041bc:	e006      	b.n	80041cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80041be:	4b20      	ldr	r3, [pc, #128]	; (8004240 <HAL_GPIO_Init+0x2d0>)
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	43db      	mvns	r3, r3
 80041c6:	491e      	ldr	r1, [pc, #120]	; (8004240 <HAL_GPIO_Init+0x2d0>)
 80041c8:	4013      	ands	r3, r2
 80041ca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d006      	beq.n	80041e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80041d8:	4b19      	ldr	r3, [pc, #100]	; (8004240 <HAL_GPIO_Init+0x2d0>)
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	4918      	ldr	r1, [pc, #96]	; (8004240 <HAL_GPIO_Init+0x2d0>)
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	608b      	str	r3, [r1, #8]
 80041e4:	e006      	b.n	80041f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80041e6:	4b16      	ldr	r3, [pc, #88]	; (8004240 <HAL_GPIO_Init+0x2d0>)
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	43db      	mvns	r3, r3
 80041ee:	4914      	ldr	r1, [pc, #80]	; (8004240 <HAL_GPIO_Init+0x2d0>)
 80041f0:	4013      	ands	r3, r2
 80041f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d021      	beq.n	8004244 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004200:	4b0f      	ldr	r3, [pc, #60]	; (8004240 <HAL_GPIO_Init+0x2d0>)
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	490e      	ldr	r1, [pc, #56]	; (8004240 <HAL_GPIO_Init+0x2d0>)
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	4313      	orrs	r3, r2
 800420a:	60cb      	str	r3, [r1, #12]
 800420c:	e021      	b.n	8004252 <HAL_GPIO_Init+0x2e2>
 800420e:	bf00      	nop
 8004210:	10320000 	.word	0x10320000
 8004214:	10310000 	.word	0x10310000
 8004218:	10220000 	.word	0x10220000
 800421c:	10210000 	.word	0x10210000
 8004220:	10120000 	.word	0x10120000
 8004224:	10110000 	.word	0x10110000
 8004228:	40021000 	.word	0x40021000
 800422c:	40010000 	.word	0x40010000
 8004230:	40010800 	.word	0x40010800
 8004234:	40010c00 	.word	0x40010c00
 8004238:	40011000 	.word	0x40011000
 800423c:	40011400 	.word	0x40011400
 8004240:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004244:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <HAL_GPIO_Init+0x304>)
 8004246:	68da      	ldr	r2, [r3, #12]
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	43db      	mvns	r3, r3
 800424c:	4909      	ldr	r1, [pc, #36]	; (8004274 <HAL_GPIO_Init+0x304>)
 800424e:	4013      	ands	r3, r2
 8004250:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	3301      	adds	r3, #1
 8004256:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	fa22 f303 	lsr.w	r3, r2, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	f47f ae8e 	bne.w	8003f84 <HAL_GPIO_Init+0x14>
  }
}
 8004268:	bf00      	nop
 800426a:	bf00      	nop
 800426c:	372c      	adds	r7, #44	; 0x2c
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr
 8004274:	40010400 	.word	0x40010400

08004278 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	460b      	mov	r3, r1
 8004282:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	887b      	ldrh	r3, [r7, #2]
 800428a:	4013      	ands	r3, r2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004290:	2301      	movs	r3, #1
 8004292:	73fb      	strb	r3, [r7, #15]
 8004294:	e001      	b.n	800429a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004296:	2300      	movs	r3, #0
 8004298:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800429a:	7bfb      	ldrb	r3, [r7, #15]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bc80      	pop	{r7}
 80042a4:	4770      	bx	lr

080042a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	460b      	mov	r3, r1
 80042b0:	807b      	strh	r3, [r7, #2]
 80042b2:	4613      	mov	r3, r2
 80042b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042b6:	787b      	ldrb	r3, [r7, #1]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042bc:	887a      	ldrh	r2, [r7, #2]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80042c2:	e003      	b.n	80042cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80042c4:	887b      	ldrh	r3, [r7, #2]
 80042c6:	041a      	lsls	r2, r3, #16
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	611a      	str	r2, [r3, #16]
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bc80      	pop	{r7}
 80042d4:	4770      	bx	lr

080042d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80042d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042d8:	b08b      	sub	sp, #44	; 0x2c
 80042da:	af06      	add	r7, sp, #24
 80042dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e0fd      	b.n	80044e4 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d106      	bne.n	8004302 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f006 fed9 	bl	800b0b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2203      	movs	r2, #3
 8004306:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f003 f8dc 	bl	80074cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	603b      	str	r3, [r7, #0]
 800431a:	687e      	ldr	r6, [r7, #4]
 800431c:	466d      	mov	r5, sp
 800431e:	f106 0410 	add.w	r4, r6, #16
 8004322:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004324:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	602b      	str	r3, [r5, #0]
 800432a:	1d33      	adds	r3, r6, #4
 800432c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800432e:	6838      	ldr	r0, [r7, #0]
 8004330:	f003 f8a6 	bl	8007480 <USB_CoreInit>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d005      	beq.n	8004346 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2202      	movs	r2, #2
 800433e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e0ce      	b.n	80044e4 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2100      	movs	r1, #0
 800434c:	4618      	mov	r0, r3
 800434e:	f003 f8d7 	bl	8007500 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004352:	2300      	movs	r3, #0
 8004354:	73fb      	strb	r3, [r7, #15]
 8004356:	e04c      	b.n	80043f2 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004358:	7bfb      	ldrb	r3, [r7, #15]
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	4613      	mov	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4413      	add	r3, r2
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	440b      	add	r3, r1
 8004368:	3301      	adds	r3, #1
 800436a:	2201      	movs	r2, #1
 800436c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800436e:	7bfb      	ldrb	r3, [r7, #15]
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	4613      	mov	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	440b      	add	r3, r1
 800437e:	7bfa      	ldrb	r2, [r7, #15]
 8004380:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004382:	7bfa      	ldrb	r2, [r7, #15]
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	b298      	uxth	r0, r3
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	4613      	mov	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	440b      	add	r3, r1
 8004394:	3336      	adds	r3, #54	; 0x36
 8004396:	4602      	mov	r2, r0
 8004398:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800439a:	7bfb      	ldrb	r3, [r7, #15]
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	440b      	add	r3, r1
 80043aa:	3303      	adds	r3, #3
 80043ac:	2200      	movs	r2, #0
 80043ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80043b0:	7bfa      	ldrb	r2, [r7, #15]
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	440b      	add	r3, r1
 80043be:	3338      	adds	r3, #56	; 0x38
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80043c4:	7bfa      	ldrb	r2, [r7, #15]
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	4613      	mov	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	440b      	add	r3, r1
 80043d2:	333c      	adds	r3, #60	; 0x3c
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80043d8:	7bfa      	ldrb	r2, [r7, #15]
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	4613      	mov	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	440b      	add	r3, r1
 80043e6:	3340      	adds	r3, #64	; 0x40
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	3301      	adds	r3, #1
 80043f0:	73fb      	strb	r3, [r7, #15]
 80043f2:	7bfa      	ldrb	r2, [r7, #15]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d3ad      	bcc.n	8004358 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043fc:	2300      	movs	r3, #0
 80043fe:	73fb      	strb	r3, [r7, #15]
 8004400:	e044      	b.n	800448c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004402:	7bfa      	ldrb	r2, [r7, #15]
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	4613      	mov	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	440b      	add	r3, r1
 8004410:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004414:	2200      	movs	r2, #0
 8004416:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004418:	7bfa      	ldrb	r2, [r7, #15]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	440b      	add	r3, r1
 8004426:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800442a:	7bfa      	ldrb	r2, [r7, #15]
 800442c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800442e:	7bfa      	ldrb	r2, [r7, #15]
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	440b      	add	r3, r1
 800443c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004440:	2200      	movs	r2, #0
 8004442:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004444:	7bfa      	ldrb	r2, [r7, #15]
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	440b      	add	r3, r1
 8004452:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800445a:	7bfa      	ldrb	r2, [r7, #15]
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	440b      	add	r3, r1
 8004468:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004470:	7bfa      	ldrb	r2, [r7, #15]
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	440b      	add	r3, r1
 800447e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004486:	7bfb      	ldrb	r3, [r7, #15]
 8004488:	3301      	adds	r3, #1
 800448a:	73fb      	strb	r3, [r7, #15]
 800448c:	7bfa      	ldrb	r2, [r7, #15]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	429a      	cmp	r2, r3
 8004494:	d3b5      	bcc.n	8004402 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	603b      	str	r3, [r7, #0]
 800449c:	687e      	ldr	r6, [r7, #4]
 800449e:	466d      	mov	r5, sp
 80044a0:	f106 0410 	add.w	r4, r6, #16
 80044a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	602b      	str	r3, [r5, #0]
 80044ac:	1d33      	adds	r3, r6, #4
 80044ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044b0:	6838      	ldr	r0, [r7, #0]
 80044b2:	f003 f831 	bl	8007518 <USB_DevInit>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d005      	beq.n	80044c8 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e00d      	b.n	80044e4 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4618      	mov	r0, r3
 80044de:	f004 ffcb 	bl	8009478 <USB_DevDisconnect>

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080044ec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d101      	bne.n	8004502 <HAL_PCD_Start+0x16>
 80044fe:	2302      	movs	r3, #2
 8004500:	e016      	b.n	8004530 <HAL_PCD_Start+0x44>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f002 ffc6 	bl	80074a0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004514:	2101      	movs	r1, #1
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f007 f83f 	bl	800b59a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4618      	mov	r0, r3
 8004522:	f004 ff9f 	bl	8009464 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4618      	mov	r0, r3
 8004546:	f004 ffa1 	bl	800948c <USB_ReadInterrupts>
 800454a:	4603      	mov	r3, r0
 800454c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004554:	d102      	bne.n	800455c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fb61 	bl	8004c1e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4618      	mov	r0, r3
 8004562:	f004 ff93 	bl	800948c <USB_ReadInterrupts>
 8004566:	4603      	mov	r3, r0
 8004568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800456c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004570:	d112      	bne.n	8004598 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800457a:	b29a      	uxth	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004584:	b292      	uxth	r2, r2
 8004586:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f006 fe0d 	bl	800b1aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004590:	2100      	movs	r1, #0
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f925 	bl	80047e2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	f004 ff75 	bl	800948c <USB_ReadInterrupts>
 80045a2:	4603      	mov	r3, r0
 80045a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045ac:	d10b      	bne.n	80045c6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80045c0:	b292      	uxth	r2, r2
 80045c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f004 ff5e 	bl	800948c <USB_ReadInterrupts>
 80045d0:	4603      	mov	r3, r0
 80045d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045da:	d10b      	bne.n	80045f4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045ee:	b292      	uxth	r2, r2
 80045f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f004 ff47 	bl	800948c <USB_ReadInterrupts>
 80045fe:	4603      	mov	r3, r0
 8004600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004608:	d126      	bne.n	8004658 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004612:	b29a      	uxth	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0204 	bic.w	r2, r2, #4
 800461c:	b292      	uxth	r2, r2
 800461e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800462a:	b29a      	uxth	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0208 	bic.w	r2, r2, #8
 8004634:	b292      	uxth	r2, r2
 8004636:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f006 fdee 	bl	800b21c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004648:	b29a      	uxth	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004652:	b292      	uxth	r2, r2
 8004654:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4618      	mov	r0, r3
 800465e:	f004 ff15 	bl	800948c <USB_ReadInterrupts>
 8004662:	4603      	mov	r3, r0
 8004664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800466c:	f040 8084 	bne.w	8004778 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004670:	2300      	movs	r3, #0
 8004672:	77fb      	strb	r3, [r7, #31]
 8004674:	e011      	b.n	800469a <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	7ffb      	ldrb	r3, [r7, #31]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	441a      	add	r2, r3
 8004682:	7ffb      	ldrb	r3, [r7, #31]
 8004684:	8812      	ldrh	r2, [r2, #0]
 8004686:	b292      	uxth	r2, r2
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	f107 0120 	add.w	r1, r7, #32
 800468e:	440b      	add	r3, r1
 8004690:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004694:	7ffb      	ldrb	r3, [r7, #31]
 8004696:	3301      	adds	r3, #1
 8004698:	77fb      	strb	r3, [r7, #31]
 800469a:	7ffb      	ldrb	r3, [r7, #31]
 800469c:	2b07      	cmp	r3, #7
 800469e:	d9ea      	bls.n	8004676 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0201 	orr.w	r2, r2, #1
 80046b2:	b292      	uxth	r2, r2
 80046b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0201 	bic.w	r2, r2, #1
 80046ca:	b292      	uxth	r2, r2
 80046cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80046d0:	bf00      	nop
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046da:	b29b      	uxth	r3, r3
 80046dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0f6      	beq.n	80046d2 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046f6:	b292      	uxth	r2, r2
 80046f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80046fc:	2300      	movs	r3, #0
 80046fe:	77fb      	strb	r3, [r7, #31]
 8004700:	e010      	b.n	8004724 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004702:	7ffb      	ldrb	r3, [r7, #31]
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6812      	ldr	r2, [r2, #0]
 8004708:	4611      	mov	r1, r2
 800470a:	7ffa      	ldrb	r2, [r7, #31]
 800470c:	0092      	lsls	r2, r2, #2
 800470e:	440a      	add	r2, r1
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	f107 0120 	add.w	r1, r7, #32
 8004716:	440b      	add	r3, r1
 8004718:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800471c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800471e:	7ffb      	ldrb	r3, [r7, #31]
 8004720:	3301      	adds	r3, #1
 8004722:	77fb      	strb	r3, [r7, #31]
 8004724:	7ffb      	ldrb	r3, [r7, #31]
 8004726:	2b07      	cmp	r3, #7
 8004728:	d9eb      	bls.n	8004702 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004732:	b29a      	uxth	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f042 0208 	orr.w	r2, r2, #8
 800473c:	b292      	uxth	r2, r2
 800473e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800474a:	b29a      	uxth	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004754:	b292      	uxth	r2, r2
 8004756:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004762:	b29a      	uxth	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f042 0204 	orr.w	r2, r2, #4
 800476c:	b292      	uxth	r2, r2
 800476e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f006 fd38 	bl	800b1e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f004 fe85 	bl	800948c <USB_ReadInterrupts>
 8004782:	4603      	mov	r3, r0
 8004784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800478c:	d10e      	bne.n	80047ac <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004796:	b29a      	uxth	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80047a0:	b292      	uxth	r2, r2
 80047a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f006 fcf1 	bl	800b18e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f004 fe6b 	bl	800948c <USB_ReadInterrupts>
 80047b6:	4603      	mov	r3, r0
 80047b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047c0:	d10b      	bne.n	80047da <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047d4:	b292      	uxth	r2, r2
 80047d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80047da:	bf00      	nop
 80047dc:	3720      	adds	r7, #32
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b082      	sub	sp, #8
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
 80047ea:	460b      	mov	r3, r1
 80047ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_PCD_SetAddress+0x1a>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e013      	b.n	8004824 <HAL_PCD_SetAddress+0x42>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	78fa      	ldrb	r2, [r7, #3]
 8004808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	78fa      	ldrb	r2, [r7, #3]
 8004812:	4611      	mov	r1, r2
 8004814:	4618      	mov	r0, r3
 8004816:	f004 fe12 	bl	800943e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	4608      	mov	r0, r1
 8004836:	4611      	mov	r1, r2
 8004838:	461a      	mov	r2, r3
 800483a:	4603      	mov	r3, r0
 800483c:	70fb      	strb	r3, [r7, #3]
 800483e:	460b      	mov	r3, r1
 8004840:	803b      	strh	r3, [r7, #0]
 8004842:	4613      	mov	r3, r2
 8004844:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800484a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800484e:	2b00      	cmp	r3, #0
 8004850:	da0e      	bge.n	8004870 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004852:	78fb      	ldrb	r3, [r7, #3]
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	1c5a      	adds	r2, r3, #1
 800485a:	4613      	mov	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	4413      	add	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2201      	movs	r2, #1
 800486c:	705a      	strb	r2, [r3, #1]
 800486e:	e00e      	b.n	800488e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004870:	78fb      	ldrb	r3, [r7, #3]
 8004872:	f003 0207 	and.w	r2, r3, #7
 8004876:	4613      	mov	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	4413      	add	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800488e:	78fb      	ldrb	r3, [r7, #3]
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	b2da      	uxtb	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800489a:	883a      	ldrh	r2, [r7, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	78ba      	ldrb	r2, [r7, #2]
 80048a4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	785b      	ldrb	r3, [r3, #1]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d004      	beq.n	80048b8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80048b8:	78bb      	ldrb	r3, [r7, #2]
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d102      	bne.n	80048c4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d101      	bne.n	80048d2 <HAL_PCD_EP_Open+0xa6>
 80048ce:	2302      	movs	r3, #2
 80048d0:	e00e      	b.n	80048f0 <HAL_PCD_EP_Open+0xc4>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68f9      	ldr	r1, [r7, #12]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f002 fe39 	bl	8007558 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80048ee:	7afb      	ldrb	r3, [r7, #11]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004904:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004908:	2b00      	cmp	r3, #0
 800490a:	da0e      	bge.n	800492a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800490c:	78fb      	ldrb	r3, [r7, #3]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	4613      	mov	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	4413      	add	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2201      	movs	r2, #1
 8004926:	705a      	strb	r2, [r3, #1]
 8004928:	e00e      	b.n	8004948 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800492a:	78fb      	ldrb	r3, [r7, #3]
 800492c:	f003 0207 	and.w	r2, r3, #7
 8004930:	4613      	mov	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	4413      	add	r3, r2
 8004940:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004948:	78fb      	ldrb	r3, [r7, #3]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	b2da      	uxtb	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800495a:	2b01      	cmp	r3, #1
 800495c:	d101      	bne.n	8004962 <HAL_PCD_EP_Close+0x6a>
 800495e:	2302      	movs	r3, #2
 8004960:	e00e      	b.n	8004980 <HAL_PCD_EP_Close+0x88>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68f9      	ldr	r1, [r7, #12]
 8004970:	4618      	mov	r0, r3
 8004972:	f003 f95b 	bl	8007c2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	607a      	str	r2, [r7, #4]
 8004992:	603b      	str	r3, [r7, #0]
 8004994:	460b      	mov	r3, r1
 8004996:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004998:	7afb      	ldrb	r3, [r7, #11]
 800499a:	f003 0207 	and.w	r2, r3, #7
 800499e:	4613      	mov	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	4413      	add	r3, r2
 80049ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	2200      	movs	r2, #0
 80049c0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2200      	movs	r2, #0
 80049c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049c8:	7afb      	ldrb	r3, [r7, #11]
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80049d4:	7afb      	ldrb	r3, [r7, #11]
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d106      	bne.n	80049ec <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6979      	ldr	r1, [r7, #20]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f003 fb0d 	bl	8008004 <USB_EPStartXfer>
 80049ea:	e005      	b.n	80049f8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6979      	ldr	r1, [r7, #20]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f003 fb06 	bl	8008004 <USB_EPStartXfer>
  }

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004a0e:	78fb      	ldrb	r3, [r7, #3]
 8004a10:	f003 0207 	and.w	r2, r3, #7
 8004a14:	6879      	ldr	r1, [r7, #4]
 8004a16:	4613      	mov	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	440b      	add	r3, r1
 8004a20:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004a24:	681b      	ldr	r3, [r3, #0]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bc80      	pop	{r7}
 8004a2e:	4770      	bx	lr

08004a30 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	607a      	str	r2, [r7, #4]
 8004a3a:	603b      	str	r3, [r7, #0]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a40:	7afb      	ldrb	r3, [r7, #11]
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	4613      	mov	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	4413      	add	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	2200      	movs	r2, #0
 8004a74:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a7c:	7afb      	ldrb	r3, [r7, #11]
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a88:	7afb      	ldrb	r3, [r7, #11]
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d106      	bne.n	8004aa0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6979      	ldr	r1, [r7, #20]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f003 fab3 	bl	8008004 <USB_EPStartXfer>
 8004a9e:	e005      	b.n	8004aac <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6979      	ldr	r1, [r7, #20]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f003 faac 	bl	8008004 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b084      	sub	sp, #16
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	460b      	mov	r3, r1
 8004ac0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004ac2:	78fb      	ldrb	r3, [r7, #3]
 8004ac4:	f003 0207 	and.w	r2, r3, #7
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d901      	bls.n	8004ad4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e04c      	b.n	8004b6e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ad4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	da0e      	bge.n	8004afa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004adc:	78fb      	ldrb	r3, [r7, #3]
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	4413      	add	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2201      	movs	r2, #1
 8004af6:	705a      	strb	r2, [r3, #1]
 8004af8:	e00c      	b.n	8004b14 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004afa:	78fa      	ldrb	r2, [r7, #3]
 8004afc:	4613      	mov	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2201      	movs	r2, #1
 8004b18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b1a:	78fb      	ldrb	r3, [r7, #3]
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d101      	bne.n	8004b34 <HAL_PCD_EP_SetStall+0x7e>
 8004b30:	2302      	movs	r3, #2
 8004b32:	e01c      	b.n	8004b6e <HAL_PCD_EP_SetStall+0xb8>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68f9      	ldr	r1, [r7, #12]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f004 fb7e 	bl	8009244 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d108      	bne.n	8004b64 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	4610      	mov	r0, r2
 8004b60:	f004 fca3 	bl	80094aa <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b084      	sub	sp, #16
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
 8004b7e:	460b      	mov	r3, r1
 8004b80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004b82:	78fb      	ldrb	r3, [r7, #3]
 8004b84:	f003 020f 	and.w	r2, r3, #15
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d901      	bls.n	8004b94 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e040      	b.n	8004c16 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	da0e      	bge.n	8004bba <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b9c:	78fb      	ldrb	r3, [r7, #3]
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	1c5a      	adds	r2, r3, #1
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	4413      	add	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	705a      	strb	r2, [r3, #1]
 8004bb8:	e00e      	b.n	8004bd8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bba:	78fb      	ldrb	r3, [r7, #3]
 8004bbc:	f003 0207 	and.w	r2, r3, #7
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	4413      	add	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bde:	78fb      	ldrb	r3, [r7, #3]
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d101      	bne.n	8004bf8 <HAL_PCD_EP_ClrStall+0x82>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	e00e      	b.n	8004c16 <HAL_PCD_EP_ClrStall+0xa0>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68f9      	ldr	r1, [r7, #12]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f004 fb6c 	bl	80092e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b08e      	sub	sp, #56	; 0x38
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004c26:	e2df      	b.n	80051e8 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c30:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004c32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004c3e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f040 8158 	bne.w	8004ef8 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004c48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c4a:	f003 0310 	and.w	r3, r3, #16
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d152      	bne.n	8004cf8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c62:	81fb      	strh	r3, [r7, #14]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	89fb      	ldrh	r3, [r7, #14]
 8004c6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	3328      	adds	r3, #40	; 0x28
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	461a      	mov	r2, r3
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	4413      	add	r3, r2
 8004c90:	3302      	adds	r3, #2
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6812      	ldr	r2, [r2, #0]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	695a      	ldr	r2, [r3, #20]
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	441a      	add	r2, r3
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f006 fa4e 	bl	800b15a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 828e 	beq.w	80051e8 <PCD_EP_ISR_Handler+0x5ca>
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f040 8289 	bne.w	80051e8 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	b292      	uxth	r2, r2
 8004cea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004cf6:	e277      	b.n	80051e8 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	881b      	ldrh	r3, [r3, #0]
 8004d06:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004d08:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d034      	beq.n	8004d7c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	4413      	add	r3, r2
 8004d26:	3306      	adds	r3, #6
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6812      	ldr	r2, [r2, #0]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6818      	ldr	r0, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	f004 fbfa 	bl	800954a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	881b      	ldrh	r3, [r3, #0]
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004d62:	4013      	ands	r3, r2
 8004d64:	823b      	strh	r3, [r7, #16]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	8a3a      	ldrh	r2, [r7, #16]
 8004d6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d70:	b292      	uxth	r2, r2
 8004d72:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f006 f9c3 	bl	800b100 <HAL_PCD_SetupStageCallback>
 8004d7a:	e235      	b.n	80051e8 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004d7c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f280 8231 	bge.w	80051e8 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004d92:	4013      	ands	r3, r2
 8004d94:	83bb      	strh	r3, [r7, #28]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	8bba      	ldrh	r2, [r7, #28]
 8004d9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004da0:	b292      	uxth	r2, r2
 8004da2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	461a      	mov	r2, r3
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	4413      	add	r3, r2
 8004db8:	3306      	adds	r3, #6
 8004dba:	005b      	lsls	r3, r3, #1
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6812      	ldr	r2, [r2, #0]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	69db      	ldr	r3, [r3, #28]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d019      	beq.n	8004e0c <PCD_EP_ISR_Handler+0x1ee>
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d015      	beq.n	8004e0c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6818      	ldr	r0, [r3, #0]
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	6959      	ldr	r1, [r3, #20]
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	f004 fbaa 	bl	800954a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	695a      	ldr	r2, [r3, #20]
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	441a      	add	r2, r3
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004e04:	2100      	movs	r1, #0
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f006 f98c 	bl	800b124 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	61bb      	str	r3, [r7, #24]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	4413      	add	r3, r2
 8004e22:	61bb      	str	r3, [r7, #24]
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d112      	bne.n	8004e5a <PCD_EP_ISR_Handler+0x23c>
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	801a      	strh	r2, [r3, #0]
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	881b      	ldrh	r3, [r3, #0]
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	801a      	strh	r2, [r3, #0]
 8004e58:	e02f      	b.n	8004eba <PCD_EP_ISR_Handler+0x29c>
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	2b3e      	cmp	r3, #62	; 0x3e
 8004e60:	d813      	bhi.n	8004e8a <PCD_EP_ISR_Handler+0x26c>
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	085b      	lsrs	r3, r3, #1
 8004e68:	633b      	str	r3, [r7, #48]	; 0x30
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <PCD_EP_ISR_Handler+0x25e>
 8004e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e78:	3301      	adds	r3, #1
 8004e7a:	633b      	str	r3, [r7, #48]	; 0x30
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	029b      	lsls	r3, r3, #10
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	801a      	strh	r2, [r3, #0]
 8004e88:	e017      	b.n	8004eba <PCD_EP_ISR_Handler+0x29c>
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	095b      	lsrs	r3, r3, #5
 8004e90:	633b      	str	r3, [r7, #48]	; 0x30
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	f003 031f 	and.w	r3, r3, #31
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d102      	bne.n	8004ea4 <PCD_EP_ISR_Handler+0x286>
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	029b      	lsls	r3, r3, #10
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	881b      	ldrh	r3, [r3, #0]
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eca:	827b      	strh	r3, [r7, #18]
 8004ecc:	8a7b      	ldrh	r3, [r7, #18]
 8004ece:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ed2:	827b      	strh	r3, [r7, #18]
 8004ed4:	8a7b      	ldrh	r3, [r7, #18]
 8004ed6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004eda:	827b      	strh	r3, [r7, #18]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	8a7b      	ldrh	r3, [r7, #18]
 8004ee2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ee6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	8013      	strh	r3, [r2, #0]
 8004ef6:	e177      	b.n	80051e8 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	461a      	mov	r2, r3
 8004efe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004f0a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f280 80ea 	bge.w	80050e8 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	881b      	ldrh	r3, [r3, #0]
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	853b      	strh	r3, [r7, #40]	; 0x28
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	461a      	mov	r2, r3
 8004f34:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004f3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f42:	b292      	uxth	r2, r2
 8004f44:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004f46:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	4413      	add	r3, r2
 8004f5a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	7b1b      	ldrb	r3, [r3, #12]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d122      	bne.n	8004faa <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	461a      	mov	r2, r3
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	00db      	lsls	r3, r3, #3
 8004f76:	4413      	add	r3, r2
 8004f78:	3306      	adds	r3, #6
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6812      	ldr	r2, [r2, #0]
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f8c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004f8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 8087 	beq.w	80050a4 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6818      	ldr	r0, [r3, #0]
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	6959      	ldr	r1, [r3, #20]
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	88da      	ldrh	r2, [r3, #6]
 8004fa2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004fa4:	f004 fad1 	bl	800954a <USB_ReadPMA>
 8004fa8:	e07c      	b.n	80050a4 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	78db      	ldrb	r3, [r3, #3]
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d108      	bne.n	8004fc4 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004fb2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f923 	bl	8005204 <HAL_PCD_EP_DB_Receive>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004fc2:	e06f      	b.n	80050a4 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fde:	847b      	strh	r3, [r7, #34]	; 0x22
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	441a      	add	r2, r3
 8004fee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ff0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ff8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ffc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005000:	b29b      	uxth	r3, r3
 8005002:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	461a      	mov	r2, r3
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	b29b      	uxth	r3, r3
 8005016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d021      	beq.n	8005062 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005026:	b29b      	uxth	r3, r3
 8005028:	461a      	mov	r2, r3
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	4413      	add	r3, r2
 8005032:	3302      	adds	r3, #2
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6812      	ldr	r2, [r2, #0]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005040:	881b      	ldrh	r3, [r3, #0]
 8005042:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005046:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005048:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800504a:	2b00      	cmp	r3, #0
 800504c:	d02a      	beq.n	80050a4 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6818      	ldr	r0, [r3, #0]
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	6959      	ldr	r1, [r3, #20]
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	891a      	ldrh	r2, [r3, #8]
 800505a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800505c:	f004 fa75 	bl	800954a <USB_ReadPMA>
 8005060:	e020      	b.n	80050a4 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800506a:	b29b      	uxth	r3, r3
 800506c:	461a      	mov	r2, r3
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	4413      	add	r3, r2
 8005076:	3306      	adds	r3, #6
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6812      	ldr	r2, [r2, #0]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800508a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800508c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800508e:	2b00      	cmp	r3, #0
 8005090:	d008      	beq.n	80050a4 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6818      	ldr	r0, [r3, #0]
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	6959      	ldr	r1, [r3, #20]
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	895a      	ldrh	r2, [r3, #10]
 800509e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050a0:	f004 fa53 	bl	800954a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	69da      	ldr	r2, [r3, #28]
 80050a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050aa:	441a      	add	r2, r3
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	695a      	ldr	r2, [r3, #20]
 80050b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050b6:	441a      	add	r2, r3
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d004      	beq.n	80050ce <PCD_EP_ISR_Handler+0x4b0>
 80050c4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d206      	bcs.n	80050dc <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	4619      	mov	r1, r3
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f006 f825 	bl	800b124 <HAL_PCD_DataOutStageCallback>
 80050da:	e005      	b.n	80050e8 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050e2:	4618      	mov	r0, r3
 80050e4:	f002 ff8e 	bl	8008004 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80050e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80050ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d07a      	beq.n	80051e8 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80050f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80050f6:	1c5a      	adds	r2, r3, #1
 80050f8:	4613      	mov	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	4413      	add	r3, r2
 8005104:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	461a      	mov	r2, r3
 800510c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	b29b      	uxth	r3, r3
 8005118:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800511c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005120:	843b      	strh	r3, [r7, #32]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	461a      	mov	r2, r3
 8005128:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	441a      	add	r2, r3
 8005130:	8c3b      	ldrh	r3, [r7, #32]
 8005132:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005136:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800513a:	b29b      	uxth	r3, r3
 800513c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	78db      	ldrb	r3, [r3, #3]
 8005142:	2b02      	cmp	r3, #2
 8005144:	d108      	bne.n	8005158 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800514a:	2b02      	cmp	r3, #2
 800514c:	d146      	bne.n	80051dc <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800514e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005154:	2b00      	cmp	r3, #0
 8005156:	d141      	bne.n	80051dc <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005160:	b29b      	uxth	r3, r3
 8005162:	461a      	mov	r2, r3
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	00db      	lsls	r3, r3, #3
 800516a:	4413      	add	r3, r2
 800516c:	3302      	adds	r3, #2
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6812      	ldr	r2, [r2, #0]
 8005174:	4413      	add	r3, r2
 8005176:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800517a:	881b      	ldrh	r3, [r3, #0]
 800517c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005180:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	699a      	ldr	r2, [r3, #24]
 8005186:	8bfb      	ldrh	r3, [r7, #30]
 8005188:	429a      	cmp	r2, r3
 800518a:	d906      	bls.n	800519a <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	699a      	ldr	r2, [r3, #24]
 8005190:	8bfb      	ldrh	r3, [r7, #30]
 8005192:	1ad2      	subs	r2, r2, r3
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	619a      	str	r2, [r3, #24]
 8005198:	e002      	b.n	80051a0 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	2200      	movs	r2, #0
 800519e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d106      	bne.n	80051b6 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	4619      	mov	r1, r3
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f005 ffd3 	bl	800b15a <HAL_PCD_DataInStageCallback>
 80051b4:	e018      	b.n	80051e8 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	695a      	ldr	r2, [r3, #20]
 80051ba:	8bfb      	ldrh	r3, [r7, #30]
 80051bc:	441a      	add	r2, r3
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	69da      	ldr	r2, [r3, #28]
 80051c6:	8bfb      	ldrh	r3, [r7, #30]
 80051c8:	441a      	add	r2, r3
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051d4:	4618      	mov	r0, r3
 80051d6:	f002 ff15 	bl	8008004 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80051da:	e005      	b.n	80051e8 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80051dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80051de:	461a      	mov	r2, r3
 80051e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f91b 	bl	800541e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	b21b      	sxth	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f6ff ad17 	blt.w	8004c28 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3738      	adds	r7, #56	; 0x38
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	4613      	mov	r3, r2
 8005210:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005212:	88fb      	ldrh	r3, [r7, #6]
 8005214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d07e      	beq.n	800531a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005224:	b29b      	uxth	r3, r3
 8005226:	461a      	mov	r2, r3
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	4413      	add	r3, r2
 8005230:	3302      	adds	r3, #2
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	6812      	ldr	r2, [r2, #0]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800523e:	881b      	ldrh	r3, [r3, #0]
 8005240:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005244:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	699a      	ldr	r2, [r3, #24]
 800524a:	8b7b      	ldrh	r3, [r7, #26]
 800524c:	429a      	cmp	r2, r3
 800524e:	d306      	bcc.n	800525e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	699a      	ldr	r2, [r3, #24]
 8005254:	8b7b      	ldrh	r3, [r7, #26]
 8005256:	1ad2      	subs	r2, r2, r3
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	619a      	str	r2, [r3, #24]
 800525c:	e002      	b.n	8005264 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2200      	movs	r2, #0
 8005262:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d123      	bne.n	80052b4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	461a      	mov	r2, r3
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	881b      	ldrh	r3, [r3, #0]
 800527c:	b29b      	uxth	r3, r3
 800527e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005286:	833b      	strh	r3, [r7, #24]
 8005288:	8b3b      	ldrh	r3, [r7, #24]
 800528a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800528e:	833b      	strh	r3, [r7, #24]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	461a      	mov	r2, r3
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	441a      	add	r2, r3
 800529e:	8b3b      	ldrh	r3, [r7, #24]
 80052a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80052b4:	88fb      	ldrh	r3, [r7, #6]
 80052b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d01f      	beq.n	80052fe <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d8:	82fb      	strh	r3, [r7, #22]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	461a      	mov	r2, r3
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	441a      	add	r2, r3
 80052e8:	8afb      	ldrh	r3, [r7, #22]
 80052ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80052fe:	8b7b      	ldrh	r3, [r7, #26]
 8005300:	2b00      	cmp	r3, #0
 8005302:	f000 8087 	beq.w	8005414 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6818      	ldr	r0, [r3, #0]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	6959      	ldr	r1, [r3, #20]
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	891a      	ldrh	r2, [r3, #8]
 8005312:	8b7b      	ldrh	r3, [r7, #26]
 8005314:	f004 f919 	bl	800954a <USB_ReadPMA>
 8005318:	e07c      	b.n	8005414 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005322:	b29b      	uxth	r3, r3
 8005324:	461a      	mov	r2, r3
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	4413      	add	r3, r2
 800532e:	3306      	adds	r3, #6
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	6812      	ldr	r2, [r2, #0]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005342:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	699a      	ldr	r2, [r3, #24]
 8005348:	8b7b      	ldrh	r3, [r7, #26]
 800534a:	429a      	cmp	r2, r3
 800534c:	d306      	bcc.n	800535c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	699a      	ldr	r2, [r3, #24]
 8005352:	8b7b      	ldrh	r3, [r7, #26]
 8005354:	1ad2      	subs	r2, r2, r3
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	619a      	str	r2, [r3, #24]
 800535a:	e002      	b.n	8005362 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2200      	movs	r2, #0
 8005360:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d123      	bne.n	80053b2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	461a      	mov	r2, r3
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4413      	add	r3, r2
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	b29b      	uxth	r3, r3
 800537c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005384:	83fb      	strh	r3, [r7, #30]
 8005386:	8bfb      	ldrh	r3, [r7, #30]
 8005388:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800538c:	83fb      	strh	r3, [r7, #30]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	461a      	mov	r2, r3
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	441a      	add	r2, r3
 800539c:	8bfb      	ldrh	r3, [r7, #30]
 800539e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d11f      	bne.n	80053fc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	461a      	mov	r2, r3
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	881b      	ldrh	r3, [r3, #0]
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d6:	83bb      	strh	r3, [r7, #28]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	461a      	mov	r2, r3
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	441a      	add	r2, r3
 80053e6:	8bbb      	ldrh	r3, [r7, #28]
 80053e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80053fc:	8b7b      	ldrh	r3, [r7, #26]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d008      	beq.n	8005414 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6818      	ldr	r0, [r3, #0]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	6959      	ldr	r1, [r3, #20]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	895a      	ldrh	r2, [r3, #10]
 800540e:	8b7b      	ldrh	r3, [r7, #26]
 8005410:	f004 f89b 	bl	800954a <USB_ReadPMA>
    }
  }

  return count;
 8005414:	8b7b      	ldrh	r3, [r7, #26]
}
 8005416:	4618      	mov	r0, r3
 8005418:	3720      	adds	r7, #32
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b094      	sub	sp, #80	; 0x50
 8005422:	af00      	add	r7, sp, #0
 8005424:	60f8      	str	r0, [r7, #12]
 8005426:	60b9      	str	r1, [r7, #8]
 8005428:	4613      	mov	r3, r2
 800542a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800542c:	88fb      	ldrh	r3, [r7, #6]
 800542e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 8138 	beq.w	80056a8 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005440:	b29b      	uxth	r3, r3
 8005442:	461a      	mov	r2, r3
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	00db      	lsls	r3, r3, #3
 800544a:	4413      	add	r3, r2
 800544c:	3302      	adds	r3, #2
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	6812      	ldr	r2, [r2, #0]
 8005454:	4413      	add	r3, r2
 8005456:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005460:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	699a      	ldr	r2, [r3, #24]
 8005468:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800546c:	429a      	cmp	r2, r3
 800546e:	d907      	bls.n	8005480 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	699a      	ldr	r2, [r3, #24]
 8005474:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005478:	1ad2      	subs	r2, r2, r3
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	619a      	str	r2, [r3, #24]
 800547e:	e002      	b.n	8005486 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2200      	movs	r2, #0
 8005484:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d12c      	bne.n	80054e8 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	4619      	mov	r1, r3
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f005 fe60 	bl	800b15a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800549a:	88fb      	ldrh	r3, [r7, #6]
 800549c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 823a 	beq.w	800591a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	461a      	mov	r2, r3
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c0:	82fb      	strh	r3, [r7, #22]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	461a      	mov	r2, r3
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	441a      	add	r2, r3
 80054d0:	8afb      	ldrh	r3, [r7, #22]
 80054d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	8013      	strh	r3, [r2, #0]
 80054e6:	e218      	b.n	800591a <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80054e8:	88fb      	ldrh	r3, [r7, #6]
 80054ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d01f      	beq.n	8005532 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	461a      	mov	r2, r3
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	b29b      	uxth	r3, r3
 8005504:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800550c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	441a      	add	r2, r3
 800551c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800551e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005526:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800552a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800552e:	b29b      	uxth	r3, r3
 8005530:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005538:	2b01      	cmp	r3, #1
 800553a:	f040 81ee 	bne.w	800591a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	695a      	ldr	r2, [r3, #20]
 8005542:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005546:	441a      	add	r2, r3
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	69da      	ldr	r2, [r3, #28]
 8005550:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005554:	441a      	add	r2, r3
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	6a1a      	ldr	r2, [r3, #32]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	429a      	cmp	r2, r3
 8005564:	d309      	bcc.n	800557a <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	6a1a      	ldr	r2, [r3, #32]
 8005570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005572:	1ad2      	subs	r2, r2, r3
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	621a      	str	r2, [r3, #32]
 8005578:	e015      	b.n	80055a6 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d107      	bne.n	8005592 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8005582:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005586:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005590:	e009      	b.n	80055a6 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2200      	movs	r2, #0
 80055a4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	785b      	ldrb	r3, [r3, #1]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d155      	bne.n	800565a <HAL_PCD_EP_DB_Transmit+0x23c>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	61fb      	str	r3, [r7, #28]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055bc:	b29b      	uxth	r3, r3
 80055be:	461a      	mov	r2, r3
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	4413      	add	r3, r2
 80055c4:	61fb      	str	r3, [r7, #28]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	011a      	lsls	r2, r3, #4
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	4413      	add	r3, r2
 80055d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055d4:	61bb      	str	r3, [r7, #24]
 80055d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d112      	bne.n	8005602 <HAL_PCD_EP_DB_Transmit+0x1e4>
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	881b      	ldrh	r3, [r3, #0]
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	801a      	strh	r2, [r3, #0]
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	801a      	strh	r2, [r3, #0]
 8005600:	e047      	b.n	8005692 <HAL_PCD_EP_DB_Transmit+0x274>
 8005602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005604:	2b3e      	cmp	r3, #62	; 0x3e
 8005606:	d811      	bhi.n	800562c <HAL_PCD_EP_DB_Transmit+0x20e>
 8005608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800560a:	085b      	lsrs	r3, r3, #1
 800560c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800560e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <HAL_PCD_EP_DB_Transmit+0x200>
 8005618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561a:	3301      	adds	r3, #1
 800561c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800561e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005620:	b29b      	uxth	r3, r3
 8005622:	029b      	lsls	r3, r3, #10
 8005624:	b29a      	uxth	r2, r3
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	801a      	strh	r2, [r3, #0]
 800562a:	e032      	b.n	8005692 <HAL_PCD_EP_DB_Transmit+0x274>
 800562c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800562e:	095b      	lsrs	r3, r3, #5
 8005630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005634:	f003 031f 	and.w	r3, r3, #31
 8005638:	2b00      	cmp	r3, #0
 800563a:	d102      	bne.n	8005642 <HAL_PCD_EP_DB_Transmit+0x224>
 800563c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563e:	3b01      	subs	r3, #1
 8005640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005644:	b29b      	uxth	r3, r3
 8005646:	029b      	lsls	r3, r3, #10
 8005648:	b29b      	uxth	r3, r3
 800564a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800564e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005652:	b29a      	uxth	r2, r3
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	801a      	strh	r2, [r3, #0]
 8005658:	e01b      	b.n	8005692 <HAL_PCD_EP_DB_Transmit+0x274>
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	785b      	ldrb	r3, [r3, #1]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d117      	bne.n	8005692 <HAL_PCD_EP_DB_Transmit+0x274>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	627b      	str	r3, [r7, #36]	; 0x24
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005670:	b29b      	uxth	r3, r3
 8005672:	461a      	mov	r2, r3
 8005674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005676:	4413      	add	r3, r2
 8005678:	627b      	str	r3, [r7, #36]	; 0x24
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	011a      	lsls	r2, r3, #4
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	4413      	add	r3, r2
 8005684:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005688:	623b      	str	r3, [r7, #32]
 800568a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800568c:	b29a      	uxth	r2, r3
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6818      	ldr	r0, [r3, #0]
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	6959      	ldr	r1, [r3, #20]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	891a      	ldrh	r2, [r3, #8]
 800569e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	f003 ff0d 	bl	80094c0 <USB_WritePMA>
 80056a6:	e138      	b.n	800591a <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	461a      	mov	r2, r3
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	4413      	add	r3, r2
 80056bc:	3306      	adds	r3, #6
 80056be:	005b      	lsls	r3, r3, #1
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	6812      	ldr	r2, [r2, #0]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056ca:	881b      	ldrh	r3, [r3, #0]
 80056cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056d0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	699a      	ldr	r2, [r3, #24]
 80056d8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80056dc:	429a      	cmp	r2, r3
 80056de:	d307      	bcc.n	80056f0 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	699a      	ldr	r2, [r3, #24]
 80056e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80056e8:	1ad2      	subs	r2, r2, r3
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	619a      	str	r2, [r3, #24]
 80056ee:	e002      	b.n	80056f6 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2200      	movs	r2, #0
 80056f4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d12e      	bne.n	800575c <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	4619      	mov	r1, r3
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f005 fd28 	bl	800b15a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800570a:	88fb      	ldrh	r3, [r7, #6]
 800570c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005710:	2b00      	cmp	r3, #0
 8005712:	f040 8102 	bne.w	800591a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	461a      	mov	r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4413      	add	r3, r2
 8005724:	881b      	ldrh	r3, [r3, #0]
 8005726:	b29b      	uxth	r3, r3
 8005728:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800572c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005730:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	461a      	mov	r2, r3
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	441a      	add	r2, r3
 8005742:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005746:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800574a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800574e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005756:	b29b      	uxth	r3, r3
 8005758:	8013      	strh	r3, [r2, #0]
 800575a:	e0de      	b.n	800591a <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800575c:	88fb      	ldrh	r3, [r7, #6]
 800575e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d11f      	bne.n	80057a6 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	461a      	mov	r2, r3
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	b29b      	uxth	r3, r3
 8005778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800577c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005780:	867b      	strh	r3, [r7, #50]	; 0x32
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	461a      	mov	r2, r3
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	441a      	add	r2, r3
 8005790:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005792:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005796:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800579a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800579e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	f040 80b4 	bne.w	800591a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	695a      	ldr	r2, [r3, #20]
 80057b6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80057ba:	441a      	add	r2, r3
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	69da      	ldr	r2, [r3, #28]
 80057c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80057c8:	441a      	add	r2, r3
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	6a1a      	ldr	r2, [r3, #32]
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d309      	bcc.n	80057ee <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	6a1a      	ldr	r2, [r3, #32]
 80057e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057e6:	1ad2      	subs	r2, r2, r3
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	621a      	str	r2, [r3, #32]
 80057ec:	e015      	b.n	800581a <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d107      	bne.n	8005806 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 80057f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80057fa:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005804:	e009      	b.n	800581a <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2200      	movs	r2, #0
 8005810:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	643b      	str	r3, [r7, #64]	; 0x40
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	785b      	ldrb	r3, [r3, #1]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d155      	bne.n	80058d4 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	63bb      	str	r3, [r7, #56]	; 0x38
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005836:	b29b      	uxth	r3, r3
 8005838:	461a      	mov	r2, r3
 800583a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583c:	4413      	add	r3, r2
 800583e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	011a      	lsls	r2, r3, #4
 8005846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005848:	4413      	add	r3, r2
 800584a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800584e:	637b      	str	r3, [r7, #52]	; 0x34
 8005850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005852:	2b00      	cmp	r3, #0
 8005854:	d112      	bne.n	800587c <HAL_PCD_EP_DB_Transmit+0x45e>
 8005856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	b29b      	uxth	r3, r3
 800585c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005860:	b29a      	uxth	r2, r3
 8005862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005864:	801a      	strh	r2, [r3, #0]
 8005866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	b29b      	uxth	r3, r3
 800586c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005870:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005874:	b29a      	uxth	r2, r3
 8005876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005878:	801a      	strh	r2, [r3, #0]
 800587a:	e044      	b.n	8005906 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800587c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800587e:	2b3e      	cmp	r3, #62	; 0x3e
 8005880:	d811      	bhi.n	80058a6 <HAL_PCD_EP_DB_Transmit+0x488>
 8005882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005884:	085b      	lsrs	r3, r3, #1
 8005886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <HAL_PCD_EP_DB_Transmit+0x47a>
 8005892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005894:	3301      	adds	r3, #1
 8005896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800589a:	b29b      	uxth	r3, r3
 800589c:	029b      	lsls	r3, r3, #10
 800589e:	b29a      	uxth	r2, r3
 80058a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a2:	801a      	strh	r2, [r3, #0]
 80058a4:	e02f      	b.n	8005906 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80058a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058a8:	095b      	lsrs	r3, r3, #5
 80058aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058ae:	f003 031f 	and.w	r3, r3, #31
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d102      	bne.n	80058bc <HAL_PCD_EP_DB_Transmit+0x49e>
 80058b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058b8:	3b01      	subs	r3, #1
 80058ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058be:	b29b      	uxth	r3, r3
 80058c0:	029b      	lsls	r3, r3, #10
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d0:	801a      	strh	r2, [r3, #0]
 80058d2:	e018      	b.n	8005906 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	785b      	ldrb	r3, [r3, #1]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d114      	bne.n	8005906 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	461a      	mov	r2, r3
 80058e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ea:	4413      	add	r3, r2
 80058ec:	643b      	str	r3, [r7, #64]	; 0x40
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	011a      	lsls	r2, r3, #4
 80058f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058f6:	4413      	add	r3, r2
 80058f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005900:	b29a      	uxth	r2, r3
 8005902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005904:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6818      	ldr	r0, [r3, #0]
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	6959      	ldr	r1, [r3, #20]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	895a      	ldrh	r2, [r3, #10]
 8005912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005914:	b29b      	uxth	r3, r3
 8005916:	f003 fdd3 	bl	80094c0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	b29b      	uxth	r3, r3
 800592c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005934:	82bb      	strh	r3, [r7, #20]
 8005936:	8abb      	ldrh	r3, [r7, #20]
 8005938:	f083 0310 	eor.w	r3, r3, #16
 800593c:	82bb      	strh	r3, [r7, #20]
 800593e:	8abb      	ldrh	r3, [r7, #20]
 8005940:	f083 0320 	eor.w	r3, r3, #32
 8005944:	82bb      	strh	r3, [r7, #20]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	461a      	mov	r2, r3
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	441a      	add	r2, r3
 8005954:	8abb      	ldrh	r3, [r7, #20]
 8005956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800595a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800595e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005966:	b29b      	uxth	r3, r3
 8005968:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3750      	adds	r7, #80	; 0x50
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005974:	b480      	push	{r7}
 8005976:	b087      	sub	sp, #28
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	607b      	str	r3, [r7, #4]
 800597e:	460b      	mov	r3, r1
 8005980:	817b      	strh	r3, [r7, #10]
 8005982:	4613      	mov	r3, r2
 8005984:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005986:	897b      	ldrh	r3, [r7, #10]
 8005988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598c:	b29b      	uxth	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00b      	beq.n	80059aa <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005992:	897b      	ldrh	r3, [r7, #10]
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	1c5a      	adds	r2, r3, #1
 800599a:	4613      	mov	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	4413      	add	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	e009      	b.n	80059be <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80059aa:	897a      	ldrh	r2, [r7, #10]
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80059be:	893b      	ldrh	r3, [r7, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d107      	bne.n	80059d4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	2200      	movs	r2, #0
 80059c8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	80da      	strh	r2, [r3, #6]
 80059d2:	e00b      	b.n	80059ec <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	2201      	movs	r2, #1
 80059d8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	b29a      	uxth	r2, r3
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	0c1b      	lsrs	r3, r3, #16
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	371c      	adds	r7, #28
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bc80      	pop	{r7}
 80059f6:	4770      	bx	lr

080059f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e26c      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 8087 	beq.w	8005b26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a18:	4b92      	ldr	r3, [pc, #584]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f003 030c 	and.w	r3, r3, #12
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d00c      	beq.n	8005a3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a24:	4b8f      	ldr	r3, [pc, #572]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f003 030c 	and.w	r3, r3, #12
 8005a2c:	2b08      	cmp	r3, #8
 8005a2e:	d112      	bne.n	8005a56 <HAL_RCC_OscConfig+0x5e>
 8005a30:	4b8c      	ldr	r3, [pc, #560]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a3c:	d10b      	bne.n	8005a56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a3e:	4b89      	ldr	r3, [pc, #548]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d06c      	beq.n	8005b24 <HAL_RCC_OscConfig+0x12c>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d168      	bne.n	8005b24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e246      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a5e:	d106      	bne.n	8005a6e <HAL_RCC_OscConfig+0x76>
 8005a60:	4b80      	ldr	r3, [pc, #512]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a7f      	ldr	r2, [pc, #508]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a6a:	6013      	str	r3, [r2, #0]
 8005a6c:	e02e      	b.n	8005acc <HAL_RCC_OscConfig+0xd4>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10c      	bne.n	8005a90 <HAL_RCC_OscConfig+0x98>
 8005a76:	4b7b      	ldr	r3, [pc, #492]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a7a      	ldr	r2, [pc, #488]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a80:	6013      	str	r3, [r2, #0]
 8005a82:	4b78      	ldr	r3, [pc, #480]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a77      	ldr	r2, [pc, #476]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005a88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a8c:	6013      	str	r3, [r2, #0]
 8005a8e:	e01d      	b.n	8005acc <HAL_RCC_OscConfig+0xd4>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a98:	d10c      	bne.n	8005ab4 <HAL_RCC_OscConfig+0xbc>
 8005a9a:	4b72      	ldr	r3, [pc, #456]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a71      	ldr	r2, [pc, #452]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005aa4:	6013      	str	r3, [r2, #0]
 8005aa6:	4b6f      	ldr	r3, [pc, #444]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a6e      	ldr	r2, [pc, #440]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	e00b      	b.n	8005acc <HAL_RCC_OscConfig+0xd4>
 8005ab4:	4b6b      	ldr	r3, [pc, #428]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a6a      	ldr	r2, [pc, #424]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005abe:	6013      	str	r3, [r2, #0]
 8005ac0:	4b68      	ldr	r3, [pc, #416]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a67      	ldr	r2, [pc, #412]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d013      	beq.n	8005afc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad4:	f7fd fa56 	bl	8002f84 <HAL_GetTick>
 8005ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ada:	e008      	b.n	8005aee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005adc:	f7fd fa52 	bl	8002f84 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b64      	cmp	r3, #100	; 0x64
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e1fa      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aee:	4b5d      	ldr	r3, [pc, #372]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d0f0      	beq.n	8005adc <HAL_RCC_OscConfig+0xe4>
 8005afa:	e014      	b.n	8005b26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005afc:	f7fd fa42 	bl	8002f84 <HAL_GetTick>
 8005b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b02:	e008      	b.n	8005b16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b04:	f7fd fa3e 	bl	8002f84 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b64      	cmp	r3, #100	; 0x64
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e1e6      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b16:	4b53      	ldr	r3, [pc, #332]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1f0      	bne.n	8005b04 <HAL_RCC_OscConfig+0x10c>
 8005b22:	e000      	b.n	8005b26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d063      	beq.n	8005bfa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b32:	4b4c      	ldr	r3, [pc, #304]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f003 030c 	and.w	r3, r3, #12
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00b      	beq.n	8005b56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005b3e:	4b49      	ldr	r3, [pc, #292]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f003 030c 	and.w	r3, r3, #12
 8005b46:	2b08      	cmp	r3, #8
 8005b48:	d11c      	bne.n	8005b84 <HAL_RCC_OscConfig+0x18c>
 8005b4a:	4b46      	ldr	r3, [pc, #280]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d116      	bne.n	8005b84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b56:	4b43      	ldr	r3, [pc, #268]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d005      	beq.n	8005b6e <HAL_RCC_OscConfig+0x176>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d001      	beq.n	8005b6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e1ba      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b6e:	4b3d      	ldr	r3, [pc, #244]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	4939      	ldr	r1, [pc, #228]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b82:	e03a      	b.n	8005bfa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d020      	beq.n	8005bce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b8c:	4b36      	ldr	r3, [pc, #216]	; (8005c68 <HAL_RCC_OscConfig+0x270>)
 8005b8e:	2201      	movs	r2, #1
 8005b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b92:	f7fd f9f7 	bl	8002f84 <HAL_GetTick>
 8005b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b98:	e008      	b.n	8005bac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b9a:	f7fd f9f3 	bl	8002f84 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d901      	bls.n	8005bac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e19b      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bac:	4b2d      	ldr	r3, [pc, #180]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d0f0      	beq.n	8005b9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bb8:	4b2a      	ldr	r3, [pc, #168]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	00db      	lsls	r3, r3, #3
 8005bc6:	4927      	ldr	r1, [pc, #156]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	600b      	str	r3, [r1, #0]
 8005bcc:	e015      	b.n	8005bfa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bce:	4b26      	ldr	r3, [pc, #152]	; (8005c68 <HAL_RCC_OscConfig+0x270>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bd4:	f7fd f9d6 	bl	8002f84 <HAL_GetTick>
 8005bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bda:	e008      	b.n	8005bee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bdc:	f7fd f9d2 	bl	8002f84 <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e17a      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bee:	4b1d      	ldr	r3, [pc, #116]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1f0      	bne.n	8005bdc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0308 	and.w	r3, r3, #8
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d03a      	beq.n	8005c7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d019      	beq.n	8005c42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c0e:	4b17      	ldr	r3, [pc, #92]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005c10:	2201      	movs	r2, #1
 8005c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c14:	f7fd f9b6 	bl	8002f84 <HAL_GetTick>
 8005c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c1a:	e008      	b.n	8005c2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c1c:	f7fd f9b2 	bl	8002f84 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d901      	bls.n	8005c2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e15a      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c2e:	4b0d      	ldr	r3, [pc, #52]	; (8005c64 <HAL_RCC_OscConfig+0x26c>)
 8005c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0f0      	beq.n	8005c1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005c3a:	2001      	movs	r0, #1
 8005c3c:	f000 fac4 	bl	80061c8 <RCC_Delay>
 8005c40:	e01c      	b.n	8005c7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c42:	4b0a      	ldr	r3, [pc, #40]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c48:	f7fd f99c 	bl	8002f84 <HAL_GetTick>
 8005c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c4e:	e00f      	b.n	8005c70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c50:	f7fd f998 	bl	8002f84 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d908      	bls.n	8005c70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e140      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4ec>
 8005c62:	bf00      	nop
 8005c64:	40021000 	.word	0x40021000
 8005c68:	42420000 	.word	0x42420000
 8005c6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c70:	4b9e      	ldr	r3, [pc, #632]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1e9      	bne.n	8005c50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 80a6 	beq.w	8005dd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c8e:	4b97      	ldr	r3, [pc, #604]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10d      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c9a:	4b94      	ldr	r3, [pc, #592]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	4a93      	ldr	r2, [pc, #588]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ca4:	61d3      	str	r3, [r2, #28]
 8005ca6:	4b91      	ldr	r3, [pc, #580]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cae:	60bb      	str	r3, [r7, #8]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb6:	4b8e      	ldr	r3, [pc, #568]	; (8005ef0 <HAL_RCC_OscConfig+0x4f8>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d118      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cc2:	4b8b      	ldr	r3, [pc, #556]	; (8005ef0 <HAL_RCC_OscConfig+0x4f8>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a8a      	ldr	r2, [pc, #552]	; (8005ef0 <HAL_RCC_OscConfig+0x4f8>)
 8005cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cce:	f7fd f959 	bl	8002f84 <HAL_GetTick>
 8005cd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd4:	e008      	b.n	8005ce8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cd6:	f7fd f955 	bl	8002f84 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b64      	cmp	r3, #100	; 0x64
 8005ce2:	d901      	bls.n	8005ce8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e0fd      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ce8:	4b81      	ldr	r3, [pc, #516]	; (8005ef0 <HAL_RCC_OscConfig+0x4f8>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d0f0      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d106      	bne.n	8005d0a <HAL_RCC_OscConfig+0x312>
 8005cfc:	4b7b      	ldr	r3, [pc, #492]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	4a7a      	ldr	r2, [pc, #488]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005d02:	f043 0301 	orr.w	r3, r3, #1
 8005d06:	6213      	str	r3, [r2, #32]
 8005d08:	e02d      	b.n	8005d66 <HAL_RCC_OscConfig+0x36e>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10c      	bne.n	8005d2c <HAL_RCC_OscConfig+0x334>
 8005d12:	4b76      	ldr	r3, [pc, #472]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	4a75      	ldr	r2, [pc, #468]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005d18:	f023 0301 	bic.w	r3, r3, #1
 8005d1c:	6213      	str	r3, [r2, #32]
 8005d1e:	4b73      	ldr	r3, [pc, #460]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	4a72      	ldr	r2, [pc, #456]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005d24:	f023 0304 	bic.w	r3, r3, #4
 8005d28:	6213      	str	r3, [r2, #32]
 8005d2a:	e01c      	b.n	8005d66 <HAL_RCC_OscConfig+0x36e>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	2b05      	cmp	r3, #5
 8005d32:	d10c      	bne.n	8005d4e <HAL_RCC_OscConfig+0x356>
 8005d34:	4b6d      	ldr	r3, [pc, #436]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	4a6c      	ldr	r2, [pc, #432]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005d3a:	f043 0304 	orr.w	r3, r3, #4
 8005d3e:	6213      	str	r3, [r2, #32]
 8005d40:	4b6a      	ldr	r3, [pc, #424]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	4a69      	ldr	r2, [pc, #420]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005d46:	f043 0301 	orr.w	r3, r3, #1
 8005d4a:	6213      	str	r3, [r2, #32]
 8005d4c:	e00b      	b.n	8005d66 <HAL_RCC_OscConfig+0x36e>
 8005d4e:	4b67      	ldr	r3, [pc, #412]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	4a66      	ldr	r2, [pc, #408]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005d54:	f023 0301 	bic.w	r3, r3, #1
 8005d58:	6213      	str	r3, [r2, #32]
 8005d5a:	4b64      	ldr	r3, [pc, #400]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	4a63      	ldr	r2, [pc, #396]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005d60:	f023 0304 	bic.w	r3, r3, #4
 8005d64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d015      	beq.n	8005d9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d6e:	f7fd f909 	bl	8002f84 <HAL_GetTick>
 8005d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d74:	e00a      	b.n	8005d8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d76:	f7fd f905 	bl	8002f84 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d901      	bls.n	8005d8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e0ab      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d8c:	4b57      	ldr	r3, [pc, #348]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	f003 0302 	and.w	r3, r3, #2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d0ee      	beq.n	8005d76 <HAL_RCC_OscConfig+0x37e>
 8005d98:	e014      	b.n	8005dc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d9a:	f7fd f8f3 	bl	8002f84 <HAL_GetTick>
 8005d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005da0:	e00a      	b.n	8005db8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005da2:	f7fd f8ef 	bl	8002f84 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d901      	bls.n	8005db8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e095      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005db8:	4b4c      	ldr	r3, [pc, #304]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005dba:	6a1b      	ldr	r3, [r3, #32]
 8005dbc:	f003 0302 	and.w	r3, r3, #2
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1ee      	bne.n	8005da2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005dc4:	7dfb      	ldrb	r3, [r7, #23]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d105      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dca:	4b48      	ldr	r3, [pc, #288]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	4a47      	ldr	r2, [pc, #284]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 8081 	beq.w	8005ee2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005de0:	4b42      	ldr	r3, [pc, #264]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f003 030c 	and.w	r3, r3, #12
 8005de8:	2b08      	cmp	r3, #8
 8005dea:	d061      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	69db      	ldr	r3, [r3, #28]
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d146      	bne.n	8005e82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005df4:	4b3f      	ldr	r3, [pc, #252]	; (8005ef4 <HAL_RCC_OscConfig+0x4fc>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dfa:	f7fd f8c3 	bl	8002f84 <HAL_GetTick>
 8005dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e00:	e008      	b.n	8005e14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e02:	f7fd f8bf 	bl	8002f84 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d901      	bls.n	8005e14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e067      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e14:	4b35      	ldr	r3, [pc, #212]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1f0      	bne.n	8005e02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a1b      	ldr	r3, [r3, #32]
 8005e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e28:	d108      	bne.n	8005e3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e2a:	4b30      	ldr	r3, [pc, #192]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	492d      	ldr	r1, [pc, #180]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e3c:	4b2b      	ldr	r3, [pc, #172]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a19      	ldr	r1, [r3, #32]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4c:	430b      	orrs	r3, r1
 8005e4e:	4927      	ldr	r1, [pc, #156]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e54:	4b27      	ldr	r3, [pc, #156]	; (8005ef4 <HAL_RCC_OscConfig+0x4fc>)
 8005e56:	2201      	movs	r2, #1
 8005e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e5a:	f7fd f893 	bl	8002f84 <HAL_GetTick>
 8005e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e60:	e008      	b.n	8005e74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e62:	f7fd f88f 	bl	8002f84 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d901      	bls.n	8005e74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e037      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e74:	4b1d      	ldr	r3, [pc, #116]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d0f0      	beq.n	8005e62 <HAL_RCC_OscConfig+0x46a>
 8005e80:	e02f      	b.n	8005ee2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e82:	4b1c      	ldr	r3, [pc, #112]	; (8005ef4 <HAL_RCC_OscConfig+0x4fc>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e88:	f7fd f87c 	bl	8002f84 <HAL_GetTick>
 8005e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e90:	f7fd f878 	bl	8002f84 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e020      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ea2:	4b12      	ldr	r3, [pc, #72]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1f0      	bne.n	8005e90 <HAL_RCC_OscConfig+0x498>
 8005eae:	e018      	b.n	8005ee2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d101      	bne.n	8005ebc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e013      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ebc:	4b0b      	ldr	r3, [pc, #44]	; (8005eec <HAL_RCC_OscConfig+0x4f4>)
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d106      	bne.n	8005ede <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d001      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e000      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3718      	adds	r7, #24
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	40021000 	.word	0x40021000
 8005ef0:	40007000 	.word	0x40007000
 8005ef4:	42420060 	.word	0x42420060

08005ef8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e0d0      	b.n	80060ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f0c:	4b6a      	ldr	r3, [pc, #424]	; (80060b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0307 	and.w	r3, r3, #7
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d910      	bls.n	8005f3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f1a:	4b67      	ldr	r3, [pc, #412]	; (80060b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f023 0207 	bic.w	r2, r3, #7
 8005f22:	4965      	ldr	r1, [pc, #404]	; (80060b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f2a:	4b63      	ldr	r3, [pc, #396]	; (80060b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0307 	and.w	r3, r3, #7
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d001      	beq.n	8005f3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e0b8      	b.n	80060ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d020      	beq.n	8005f8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0304 	and.w	r3, r3, #4
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d005      	beq.n	8005f60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f54:	4b59      	ldr	r3, [pc, #356]	; (80060bc <HAL_RCC_ClockConfig+0x1c4>)
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	4a58      	ldr	r2, [pc, #352]	; (80060bc <HAL_RCC_ClockConfig+0x1c4>)
 8005f5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0308 	and.w	r3, r3, #8
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d005      	beq.n	8005f78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f6c:	4b53      	ldr	r3, [pc, #332]	; (80060bc <HAL_RCC_ClockConfig+0x1c4>)
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	4a52      	ldr	r2, [pc, #328]	; (80060bc <HAL_RCC_ClockConfig+0x1c4>)
 8005f72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005f76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f78:	4b50      	ldr	r3, [pc, #320]	; (80060bc <HAL_RCC_ClockConfig+0x1c4>)
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	494d      	ldr	r1, [pc, #308]	; (80060bc <HAL_RCC_ClockConfig+0x1c4>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d040      	beq.n	8006018 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d107      	bne.n	8005fae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f9e:	4b47      	ldr	r3, [pc, #284]	; (80060bc <HAL_RCC_ClockConfig+0x1c4>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d115      	bne.n	8005fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e07f      	b.n	80060ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d107      	bne.n	8005fc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fb6:	4b41      	ldr	r3, [pc, #260]	; (80060bc <HAL_RCC_ClockConfig+0x1c4>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d109      	bne.n	8005fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e073      	b.n	80060ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fc6:	4b3d      	ldr	r3, [pc, #244]	; (80060bc <HAL_RCC_ClockConfig+0x1c4>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e06b      	b.n	80060ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fd6:	4b39      	ldr	r3, [pc, #228]	; (80060bc <HAL_RCC_ClockConfig+0x1c4>)
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f023 0203 	bic.w	r2, r3, #3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	4936      	ldr	r1, [pc, #216]	; (80060bc <HAL_RCC_ClockConfig+0x1c4>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fe8:	f7fc ffcc 	bl	8002f84 <HAL_GetTick>
 8005fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fee:	e00a      	b.n	8006006 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ff0:	f7fc ffc8 	bl	8002f84 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d901      	bls.n	8006006 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e053      	b.n	80060ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006006:	4b2d      	ldr	r3, [pc, #180]	; (80060bc <HAL_RCC_ClockConfig+0x1c4>)
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f003 020c 	and.w	r2, r3, #12
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	429a      	cmp	r2, r3
 8006016:	d1eb      	bne.n	8005ff0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006018:	4b27      	ldr	r3, [pc, #156]	; (80060b8 <HAL_RCC_ClockConfig+0x1c0>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0307 	and.w	r3, r3, #7
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	429a      	cmp	r2, r3
 8006024:	d210      	bcs.n	8006048 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006026:	4b24      	ldr	r3, [pc, #144]	; (80060b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f023 0207 	bic.w	r2, r3, #7
 800602e:	4922      	ldr	r1, [pc, #136]	; (80060b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	4313      	orrs	r3, r2
 8006034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006036:	4b20      	ldr	r3, [pc, #128]	; (80060b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0307 	and.w	r3, r3, #7
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	429a      	cmp	r2, r3
 8006042:	d001      	beq.n	8006048 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e032      	b.n	80060ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0304 	and.w	r3, r3, #4
 8006050:	2b00      	cmp	r3, #0
 8006052:	d008      	beq.n	8006066 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006054:	4b19      	ldr	r3, [pc, #100]	; (80060bc <HAL_RCC_ClockConfig+0x1c4>)
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	4916      	ldr	r1, [pc, #88]	; (80060bc <HAL_RCC_ClockConfig+0x1c4>)
 8006062:	4313      	orrs	r3, r2
 8006064:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0308 	and.w	r3, r3, #8
 800606e:	2b00      	cmp	r3, #0
 8006070:	d009      	beq.n	8006086 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006072:	4b12      	ldr	r3, [pc, #72]	; (80060bc <HAL_RCC_ClockConfig+0x1c4>)
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	00db      	lsls	r3, r3, #3
 8006080:	490e      	ldr	r1, [pc, #56]	; (80060bc <HAL_RCC_ClockConfig+0x1c4>)
 8006082:	4313      	orrs	r3, r2
 8006084:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006086:	f000 f821 	bl	80060cc <HAL_RCC_GetSysClockFreq>
 800608a:	4602      	mov	r2, r0
 800608c:	4b0b      	ldr	r3, [pc, #44]	; (80060bc <HAL_RCC_ClockConfig+0x1c4>)
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	091b      	lsrs	r3, r3, #4
 8006092:	f003 030f 	and.w	r3, r3, #15
 8006096:	490a      	ldr	r1, [pc, #40]	; (80060c0 <HAL_RCC_ClockConfig+0x1c8>)
 8006098:	5ccb      	ldrb	r3, [r1, r3]
 800609a:	fa22 f303 	lsr.w	r3, r2, r3
 800609e:	4a09      	ldr	r2, [pc, #36]	; (80060c4 <HAL_RCC_ClockConfig+0x1cc>)
 80060a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80060a2:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <HAL_RCC_ClockConfig+0x1d0>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fc ff2a 	bl	8002f00 <HAL_InitTick>

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	40022000 	.word	0x40022000
 80060bc:	40021000 	.word	0x40021000
 80060c0:	0800cae0 	.word	0x0800cae0
 80060c4:	20000014 	.word	0x20000014
 80060c8:	20000018 	.word	0x20000018

080060cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060cc:	b490      	push	{r4, r7}
 80060ce:	b08a      	sub	sp, #40	; 0x28
 80060d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80060d2:	4b2a      	ldr	r3, [pc, #168]	; (800617c <HAL_RCC_GetSysClockFreq+0xb0>)
 80060d4:	1d3c      	adds	r4, r7, #4
 80060d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80060dc:	f240 2301 	movw	r3, #513	; 0x201
 80060e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	61fb      	str	r3, [r7, #28]
 80060e6:	2300      	movs	r3, #0
 80060e8:	61bb      	str	r3, [r7, #24]
 80060ea:	2300      	movs	r3, #0
 80060ec:	627b      	str	r3, [r7, #36]	; 0x24
 80060ee:	2300      	movs	r3, #0
 80060f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80060f6:	4b22      	ldr	r3, [pc, #136]	; (8006180 <HAL_RCC_GetSysClockFreq+0xb4>)
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	f003 030c 	and.w	r3, r3, #12
 8006102:	2b04      	cmp	r3, #4
 8006104:	d002      	beq.n	800610c <HAL_RCC_GetSysClockFreq+0x40>
 8006106:	2b08      	cmp	r3, #8
 8006108:	d003      	beq.n	8006112 <HAL_RCC_GetSysClockFreq+0x46>
 800610a:	e02d      	b.n	8006168 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800610c:	4b1d      	ldr	r3, [pc, #116]	; (8006184 <HAL_RCC_GetSysClockFreq+0xb8>)
 800610e:	623b      	str	r3, [r7, #32]
      break;
 8006110:	e02d      	b.n	800616e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	0c9b      	lsrs	r3, r3, #18
 8006116:	f003 030f 	and.w	r3, r3, #15
 800611a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800611e:	4413      	add	r3, r2
 8006120:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006124:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d013      	beq.n	8006158 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006130:	4b13      	ldr	r3, [pc, #76]	; (8006180 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	0c5b      	lsrs	r3, r3, #17
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800613e:	4413      	add	r3, r2
 8006140:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006144:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	4a0e      	ldr	r2, [pc, #56]	; (8006184 <HAL_RCC_GetSysClockFreq+0xb8>)
 800614a:	fb02 f203 	mul.w	r2, r2, r3
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	fbb2 f3f3 	udiv	r3, r2, r3
 8006154:	627b      	str	r3, [r7, #36]	; 0x24
 8006156:	e004      	b.n	8006162 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	4a0b      	ldr	r2, [pc, #44]	; (8006188 <HAL_RCC_GetSysClockFreq+0xbc>)
 800615c:	fb02 f303 	mul.w	r3, r2, r3
 8006160:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	623b      	str	r3, [r7, #32]
      break;
 8006166:	e002      	b.n	800616e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006168:	4b06      	ldr	r3, [pc, #24]	; (8006184 <HAL_RCC_GetSysClockFreq+0xb8>)
 800616a:	623b      	str	r3, [r7, #32]
      break;
 800616c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800616e:	6a3b      	ldr	r3, [r7, #32]
}
 8006170:	4618      	mov	r0, r3
 8006172:	3728      	adds	r7, #40	; 0x28
 8006174:	46bd      	mov	sp, r7
 8006176:	bc90      	pop	{r4, r7}
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	0800ca78 	.word	0x0800ca78
 8006180:	40021000 	.word	0x40021000
 8006184:	007a1200 	.word	0x007a1200
 8006188:	003d0900 	.word	0x003d0900

0800618c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800618c:	b480      	push	{r7}
 800618e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006190:	4b02      	ldr	r3, [pc, #8]	; (800619c <HAL_RCC_GetHCLKFreq+0x10>)
 8006192:	681b      	ldr	r3, [r3, #0]
}
 8006194:	4618      	mov	r0, r3
 8006196:	46bd      	mov	sp, r7
 8006198:	bc80      	pop	{r7}
 800619a:	4770      	bx	lr
 800619c:	20000014 	.word	0x20000014

080061a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80061a4:	f7ff fff2 	bl	800618c <HAL_RCC_GetHCLKFreq>
 80061a8:	4602      	mov	r2, r0
 80061aa:	4b05      	ldr	r3, [pc, #20]	; (80061c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	0adb      	lsrs	r3, r3, #11
 80061b0:	f003 0307 	and.w	r3, r3, #7
 80061b4:	4903      	ldr	r1, [pc, #12]	; (80061c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061b6:	5ccb      	ldrb	r3, [r1, r3]
 80061b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061bc:	4618      	mov	r0, r3
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	40021000 	.word	0x40021000
 80061c4:	0800caf0 	.word	0x0800caf0

080061c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80061d0:	4b0a      	ldr	r3, [pc, #40]	; (80061fc <RCC_Delay+0x34>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a0a      	ldr	r2, [pc, #40]	; (8006200 <RCC_Delay+0x38>)
 80061d6:	fba2 2303 	umull	r2, r3, r2, r3
 80061da:	0a5b      	lsrs	r3, r3, #9
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	fb02 f303 	mul.w	r3, r2, r3
 80061e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80061e4:	bf00      	nop
  }
  while (Delay --);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	1e5a      	subs	r2, r3, #1
 80061ea:	60fa      	str	r2, [r7, #12]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1f9      	bne.n	80061e4 <RCC_Delay+0x1c>
}
 80061f0:	bf00      	nop
 80061f2:	bf00      	nop
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bc80      	pop	{r7}
 80061fa:	4770      	bx	lr
 80061fc:	20000014 	.word	0x20000014
 8006200:	10624dd3 	.word	0x10624dd3

08006204 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800620c:	2300      	movs	r3, #0
 800620e:	613b      	str	r3, [r7, #16]
 8006210:	2300      	movs	r3, #0
 8006212:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b00      	cmp	r3, #0
 800621e:	d07d      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006220:	2300      	movs	r3, #0
 8006222:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006224:	4b4f      	ldr	r3, [pc, #316]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10d      	bne.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006230:	4b4c      	ldr	r3, [pc, #304]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	4a4b      	ldr	r2, [pc, #300]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800623a:	61d3      	str	r3, [r2, #28]
 800623c:	4b49      	ldr	r3, [pc, #292]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800623e:	69db      	ldr	r3, [r3, #28]
 8006240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006244:	60bb      	str	r3, [r7, #8]
 8006246:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006248:	2301      	movs	r3, #1
 800624a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800624c:	4b46      	ldr	r3, [pc, #280]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006254:	2b00      	cmp	r3, #0
 8006256:	d118      	bne.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006258:	4b43      	ldr	r3, [pc, #268]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a42      	ldr	r2, [pc, #264]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800625e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006262:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006264:	f7fc fe8e 	bl	8002f84 <HAL_GetTick>
 8006268:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800626a:	e008      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800626c:	f7fc fe8a 	bl	8002f84 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b64      	cmp	r3, #100	; 0x64
 8006278:	d901      	bls.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e06d      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800627e:	4b3a      	ldr	r3, [pc, #232]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0f0      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800628a:	4b36      	ldr	r3, [pc, #216]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006292:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d02e      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d027      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062a8:	4b2e      	ldr	r3, [pc, #184]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062aa:	6a1b      	ldr	r3, [r3, #32]
 80062ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062b2:	4b2e      	ldr	r3, [pc, #184]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80062b4:	2201      	movs	r2, #1
 80062b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062b8:	4b2c      	ldr	r3, [pc, #176]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80062be:	4a29      	ldr	r2, [pc, #164]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d014      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ce:	f7fc fe59 	bl	8002f84 <HAL_GetTick>
 80062d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062d4:	e00a      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062d6:	f7fc fe55 	bl	8002f84 <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d901      	bls.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e036      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062ec:	4b1d      	ldr	r3, [pc, #116]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d0ee      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062f8:	4b1a      	ldr	r3, [pc, #104]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	4917      	ldr	r1, [pc, #92]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006306:	4313      	orrs	r3, r2
 8006308:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800630a:	7dfb      	ldrb	r3, [r7, #23]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d105      	bne.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006310:	4b14      	ldr	r3, [pc, #80]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006312:	69db      	ldr	r3, [r3, #28]
 8006314:	4a13      	ldr	r2, [pc, #76]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800631a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0302 	and.w	r3, r3, #2
 8006324:	2b00      	cmp	r3, #0
 8006326:	d008      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006328:	4b0e      	ldr	r3, [pc, #56]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	490b      	ldr	r1, [pc, #44]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006336:	4313      	orrs	r3, r2
 8006338:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0310 	and.w	r3, r3, #16
 8006342:	2b00      	cmp	r3, #0
 8006344:	d008      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006346:	4b07      	ldr	r3, [pc, #28]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	4904      	ldr	r1, [pc, #16]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006354:	4313      	orrs	r3, r2
 8006356:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3718      	adds	r7, #24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	40021000 	.word	0x40021000
 8006368:	40007000 	.word	0x40007000
 800636c:	42420440 	.word	0x42420440

08006370 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006370:	b590      	push	{r4, r7, lr}
 8006372:	b08d      	sub	sp, #52	; 0x34
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006378:	4b5a      	ldr	r3, [pc, #360]	; (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800637a:	f107 040c 	add.w	r4, r7, #12
 800637e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006380:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006384:	f240 2301 	movw	r3, #513	; 0x201
 8006388:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	627b      	str	r3, [r7, #36]	; 0x24
 800638e:	2300      	movs	r3, #0
 8006390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006392:	2300      	movs	r3, #0
 8006394:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006396:	2300      	movs	r3, #0
 8006398:	61fb      	str	r3, [r7, #28]
 800639a:	2300      	movs	r3, #0
 800639c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b10      	cmp	r3, #16
 80063a2:	d00a      	beq.n	80063ba <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b10      	cmp	r3, #16
 80063a8:	f200 8091 	bhi.w	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d04c      	beq.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d07c      	beq.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80063b8:	e089      	b.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80063ba:	4b4b      	ldr	r3, [pc, #300]	; (80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80063c0:	4b49      	ldr	r3, [pc, #292]	; (80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 8082 	beq.w	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	0c9b      	lsrs	r3, r3, #18
 80063d2:	f003 030f 	and.w	r3, r3, #15
 80063d6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80063da:	4413      	add	r3, r2
 80063dc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80063e0:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d018      	beq.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80063ec:	4b3e      	ldr	r3, [pc, #248]	; (80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	0c5b      	lsrs	r3, r3, #17
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80063fa:	4413      	add	r3, r2
 80063fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006400:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00d      	beq.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800640c:	4a37      	ldr	r2, [pc, #220]	; (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006410:	fbb2 f2f3 	udiv	r2, r2, r3
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	fb02 f303 	mul.w	r3, r2, r3
 800641a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800641c:	e004      	b.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800641e:	6a3b      	ldr	r3, [r7, #32]
 8006420:	4a33      	ldr	r2, [pc, #204]	; (80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8006422:	fb02 f303 	mul.w	r3, r2, r3
 8006426:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006428:	4b2f      	ldr	r3, [pc, #188]	; (80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006430:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006434:	d102      	bne.n	800643c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8006436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006438:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800643a:	e04a      	b.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 800643c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643e:	005b      	lsls	r3, r3, #1
 8006440:	4a2c      	ldr	r2, [pc, #176]	; (80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8006442:	fba2 2303 	umull	r2, r3, r2, r3
 8006446:	085b      	lsrs	r3, r3, #1
 8006448:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800644a:	e042      	b.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 800644c:	4b26      	ldr	r3, [pc, #152]	; (80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800645c:	d108      	bne.n	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	f003 0302 	and.w	r3, r3, #2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8006468:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800646c:	62bb      	str	r3, [r7, #40]	; 0x28
 800646e:	e01f      	b.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006476:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800647a:	d109      	bne.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800647c:	4b1a      	ldr	r3, [pc, #104]	; (80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800647e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006480:	f003 0302 	and.w	r3, r3, #2
 8006484:	2b00      	cmp	r3, #0
 8006486:	d003      	beq.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8006488:	f649 4340 	movw	r3, #40000	; 0x9c40
 800648c:	62bb      	str	r3, [r7, #40]	; 0x28
 800648e:	e00f      	b.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006496:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800649a:	d11c      	bne.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800649c:	4b12      	ldr	r3, [pc, #72]	; (80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d016      	beq.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80064a8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80064ac:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80064ae:	e012      	b.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80064b0:	e011      	b.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80064b2:	f7ff fe75 	bl	80061a0 <HAL_RCC_GetPCLK2Freq>
 80064b6:	4602      	mov	r2, r0
 80064b8:	4b0b      	ldr	r3, [pc, #44]	; (80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	0b9b      	lsrs	r3, r3, #14
 80064be:	f003 0303 	and.w	r3, r3, #3
 80064c2:	3301      	adds	r3, #1
 80064c4:	005b      	lsls	r3, r3, #1
 80064c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ca:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80064cc:	e004      	b.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80064ce:	bf00      	nop
 80064d0:	e002      	b.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80064d2:	bf00      	nop
 80064d4:	e000      	b.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80064d6:	bf00      	nop
    }
  }
  return (frequency);
 80064d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3734      	adds	r7, #52	; 0x34
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd90      	pop	{r4, r7, pc}
 80064e2:	bf00      	nop
 80064e4:	0800ca88 	.word	0x0800ca88
 80064e8:	40021000 	.word	0x40021000
 80064ec:	007a1200 	.word	0x007a1200
 80064f0:	003d0900 	.word	0x003d0900
 80064f4:	aaaaaaab 	.word	0xaaaaaaab

080064f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e076      	b.n	80065f8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650e:	2b00      	cmp	r3, #0
 8006510:	d108      	bne.n	8006524 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800651a:	d009      	beq.n	8006530 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	61da      	str	r2, [r3, #28]
 8006522:	e005      	b.n	8006530 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d106      	bne.n	8006550 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7fc fabe 	bl	8002acc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2202      	movs	r2, #2
 8006554:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006566:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006578:	431a      	orrs	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006582:	431a      	orrs	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	f003 0302 	and.w	r3, r3, #2
 800658c:	431a      	orrs	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	431a      	orrs	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065a0:	431a      	orrs	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065aa:	431a      	orrs	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b4:	ea42 0103 	orr.w	r1, r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	0c1a      	lsrs	r2, r3, #16
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f002 0204 	and.w	r2, r2, #4
 80065d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	69da      	ldr	r2, [r3, #28]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b088      	sub	sp, #32
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	603b      	str	r3, [r7, #0]
 800660c:	4613      	mov	r3, r2
 800660e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800661a:	2b01      	cmp	r3, #1
 800661c:	d101      	bne.n	8006622 <HAL_SPI_Transmit+0x22>
 800661e:	2302      	movs	r3, #2
 8006620:	e126      	b.n	8006870 <HAL_SPI_Transmit+0x270>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800662a:	f7fc fcab 	bl	8002f84 <HAL_GetTick>
 800662e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006630:	88fb      	ldrh	r3, [r7, #6]
 8006632:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800663a:	b2db      	uxtb	r3, r3
 800663c:	2b01      	cmp	r3, #1
 800663e:	d002      	beq.n	8006646 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006640:	2302      	movs	r3, #2
 8006642:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006644:	e10b      	b.n	800685e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <HAL_SPI_Transmit+0x52>
 800664c:	88fb      	ldrh	r3, [r7, #6]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d102      	bne.n	8006658 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006656:	e102      	b.n	800685e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2203      	movs	r2, #3
 800665c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	88fa      	ldrh	r2, [r7, #6]
 8006670:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	88fa      	ldrh	r2, [r7, #6]
 8006676:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800669e:	d10f      	bne.n	80066c0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ca:	2b40      	cmp	r3, #64	; 0x40
 80066cc:	d007      	beq.n	80066de <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066e6:	d14b      	bne.n	8006780 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d002      	beq.n	80066f6 <HAL_SPI_Transmit+0xf6>
 80066f0:	8afb      	ldrh	r3, [r7, #22]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d13e      	bne.n	8006774 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fa:	881a      	ldrh	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006706:	1c9a      	adds	r2, r3, #2
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006710:	b29b      	uxth	r3, r3
 8006712:	3b01      	subs	r3, #1
 8006714:	b29a      	uxth	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800671a:	e02b      	b.n	8006774 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b02      	cmp	r3, #2
 8006728:	d112      	bne.n	8006750 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672e:	881a      	ldrh	r2, [r3, #0]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673a:	1c9a      	adds	r2, r3, #2
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006744:	b29b      	uxth	r3, r3
 8006746:	3b01      	subs	r3, #1
 8006748:	b29a      	uxth	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	86da      	strh	r2, [r3, #54]	; 0x36
 800674e:	e011      	b.n	8006774 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006750:	f7fc fc18 	bl	8002f84 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	429a      	cmp	r2, r3
 800675e:	d803      	bhi.n	8006768 <HAL_SPI_Transmit+0x168>
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006766:	d102      	bne.n	800676e <HAL_SPI_Transmit+0x16e>
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d102      	bne.n	8006774 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006772:	e074      	b.n	800685e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006778:	b29b      	uxth	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1ce      	bne.n	800671c <HAL_SPI_Transmit+0x11c>
 800677e:	e04c      	b.n	800681a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d002      	beq.n	800678e <HAL_SPI_Transmit+0x18e>
 8006788:	8afb      	ldrh	r3, [r7, #22]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d140      	bne.n	8006810 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	330c      	adds	r3, #12
 8006798:	7812      	ldrb	r2, [r2, #0]
 800679a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a0:	1c5a      	adds	r2, r3, #1
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	3b01      	subs	r3, #1
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80067b4:	e02c      	b.n	8006810 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d113      	bne.n	80067ec <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	330c      	adds	r3, #12
 80067ce:	7812      	ldrb	r2, [r2, #0]
 80067d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d6:	1c5a      	adds	r2, r3, #1
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	86da      	strh	r2, [r3, #54]	; 0x36
 80067ea:	e011      	b.n	8006810 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067ec:	f7fc fbca 	bl	8002f84 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d803      	bhi.n	8006804 <HAL_SPI_Transmit+0x204>
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006802:	d102      	bne.n	800680a <HAL_SPI_Transmit+0x20a>
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d102      	bne.n	8006810 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800680e:	e026      	b.n	800685e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006814:	b29b      	uxth	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1cd      	bne.n	80067b6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	6839      	ldr	r1, [r7, #0]
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f000 f8b2 	bl	8006988 <SPI_EndRxTxTransaction>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2220      	movs	r2, #32
 800682e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10a      	bne.n	800684e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006838:	2300      	movs	r3, #0
 800683a:	613b      	str	r3, [r7, #16]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	613b      	str	r3, [r7, #16]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	613b      	str	r3, [r7, #16]
 800684c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006852:	2b00      	cmp	r3, #0
 8006854:	d002      	beq.n	800685c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	77fb      	strb	r3, [r7, #31]
 800685a:	e000      	b.n	800685e <HAL_SPI_Transmit+0x25e>
  }

error:
 800685c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800686e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3720      	adds	r7, #32
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b088      	sub	sp, #32
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	603b      	str	r3, [r7, #0]
 8006884:	4613      	mov	r3, r2
 8006886:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006888:	f7fc fb7c 	bl	8002f84 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006890:	1a9b      	subs	r3, r3, r2
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	4413      	add	r3, r2
 8006896:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006898:	f7fc fb74 	bl	8002f84 <HAL_GetTick>
 800689c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800689e:	4b39      	ldr	r3, [pc, #228]	; (8006984 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	015b      	lsls	r3, r3, #5
 80068a4:	0d1b      	lsrs	r3, r3, #20
 80068a6:	69fa      	ldr	r2, [r7, #28]
 80068a8:	fb02 f303 	mul.w	r3, r2, r3
 80068ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068ae:	e054      	b.n	800695a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b6:	d050      	beq.n	800695a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068b8:	f7fc fb64 	bl	8002f84 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	69fa      	ldr	r2, [r7, #28]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d902      	bls.n	80068ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d13d      	bne.n	800694a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80068dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068e6:	d111      	bne.n	800690c <SPI_WaitFlagStateUntilTimeout+0x94>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068f0:	d004      	beq.n	80068fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068fa:	d107      	bne.n	800690c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800690a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006914:	d10f      	bne.n	8006936 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006924:	601a      	str	r2, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006934:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e017      	b.n	800697a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d101      	bne.n	8006954 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006950:	2300      	movs	r3, #0
 8006952:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	3b01      	subs	r3, #1
 8006958:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689a      	ldr	r2, [r3, #8]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	4013      	ands	r3, r2
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	429a      	cmp	r2, r3
 8006968:	bf0c      	ite	eq
 800696a:	2301      	moveq	r3, #1
 800696c:	2300      	movne	r3, #0
 800696e:	b2db      	uxtb	r3, r3
 8006970:	461a      	mov	r2, r3
 8006972:	79fb      	ldrb	r3, [r7, #7]
 8006974:	429a      	cmp	r2, r3
 8006976:	d19b      	bne.n	80068b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3720      	adds	r7, #32
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	20000014 	.word	0x20000014

08006988 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af02      	add	r7, sp, #8
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2200      	movs	r2, #0
 800699c:	2180      	movs	r1, #128	; 0x80
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f7ff ff6a 	bl	8006878 <SPI_WaitFlagStateUntilTimeout>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d007      	beq.n	80069ba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ae:	f043 0220 	orr.w	r2, r3, #32
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e000      	b.n	80069bc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e041      	b.n	8006a5a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d106      	bne.n	80069f0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7fc f8ac 	bl	8002b48 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2202      	movs	r2, #2
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	3304      	adds	r3, #4
 8006a00:	4619      	mov	r1, r3
 8006a02:	4610      	mov	r0, r2
 8006a04:	f000 fb38 	bl	8007078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
	...

08006a64 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d104      	bne.n	8006a7e <HAL_TIM_IC_Start_IT+0x1a>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	e013      	b.n	8006aa6 <HAL_TIM_IC_Start_IT+0x42>
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2b04      	cmp	r3, #4
 8006a82:	d104      	bne.n	8006a8e <HAL_TIM_IC_Start_IT+0x2a>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	e00b      	b.n	8006aa6 <HAL_TIM_IC_Start_IT+0x42>
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	2b08      	cmp	r3, #8
 8006a92:	d104      	bne.n	8006a9e <HAL_TIM_IC_Start_IT+0x3a>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	e003      	b.n	8006aa6 <HAL_TIM_IC_Start_IT+0x42>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d104      	bne.n	8006ab8 <HAL_TIM_IC_Start_IT+0x54>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	e013      	b.n	8006ae0 <HAL_TIM_IC_Start_IT+0x7c>
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	2b04      	cmp	r3, #4
 8006abc:	d104      	bne.n	8006ac8 <HAL_TIM_IC_Start_IT+0x64>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	e00b      	b.n	8006ae0 <HAL_TIM_IC_Start_IT+0x7c>
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	2b08      	cmp	r3, #8
 8006acc:	d104      	bne.n	8006ad8 <HAL_TIM_IC_Start_IT+0x74>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	e003      	b.n	8006ae0 <HAL_TIM_IC_Start_IT+0x7c>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ae2:	7bfb      	ldrb	r3, [r7, #15]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d102      	bne.n	8006aee <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ae8:	7bbb      	ldrb	r3, [r7, #14]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d001      	beq.n	8006af2 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e0b3      	b.n	8006c5a <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d104      	bne.n	8006b02 <HAL_TIM_IC_Start_IT+0x9e>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2202      	movs	r2, #2
 8006afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b00:	e013      	b.n	8006b2a <HAL_TIM_IC_Start_IT+0xc6>
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	2b04      	cmp	r3, #4
 8006b06:	d104      	bne.n	8006b12 <HAL_TIM_IC_Start_IT+0xae>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b10:	e00b      	b.n	8006b2a <HAL_TIM_IC_Start_IT+0xc6>
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b08      	cmp	r3, #8
 8006b16:	d104      	bne.n	8006b22 <HAL_TIM_IC_Start_IT+0xbe>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b20:	e003      	b.n	8006b2a <HAL_TIM_IC_Start_IT+0xc6>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2202      	movs	r2, #2
 8006b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d104      	bne.n	8006b3a <HAL_TIM_IC_Start_IT+0xd6>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2202      	movs	r2, #2
 8006b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b38:	e013      	b.n	8006b62 <HAL_TIM_IC_Start_IT+0xfe>
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b04      	cmp	r3, #4
 8006b3e:	d104      	bne.n	8006b4a <HAL_TIM_IC_Start_IT+0xe6>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2202      	movs	r2, #2
 8006b44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b48:	e00b      	b.n	8006b62 <HAL_TIM_IC_Start_IT+0xfe>
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2b08      	cmp	r3, #8
 8006b4e:	d104      	bne.n	8006b5a <HAL_TIM_IC_Start_IT+0xf6>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2202      	movs	r2, #2
 8006b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b58:	e003      	b.n	8006b62 <HAL_TIM_IC_Start_IT+0xfe>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	2b0c      	cmp	r3, #12
 8006b66:	d841      	bhi.n	8006bec <HAL_TIM_IC_Start_IT+0x188>
 8006b68:	a201      	add	r2, pc, #4	; (adr r2, 8006b70 <HAL_TIM_IC_Start_IT+0x10c>)
 8006b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6e:	bf00      	nop
 8006b70:	08006ba5 	.word	0x08006ba5
 8006b74:	08006bed 	.word	0x08006bed
 8006b78:	08006bed 	.word	0x08006bed
 8006b7c:	08006bed 	.word	0x08006bed
 8006b80:	08006bb7 	.word	0x08006bb7
 8006b84:	08006bed 	.word	0x08006bed
 8006b88:	08006bed 	.word	0x08006bed
 8006b8c:	08006bed 	.word	0x08006bed
 8006b90:	08006bc9 	.word	0x08006bc9
 8006b94:	08006bed 	.word	0x08006bed
 8006b98:	08006bed 	.word	0x08006bed
 8006b9c:	08006bed 	.word	0x08006bed
 8006ba0:	08006bdb 	.word	0x08006bdb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68da      	ldr	r2, [r3, #12]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f042 0202 	orr.w	r2, r2, #2
 8006bb2:	60da      	str	r2, [r3, #12]
      break;
 8006bb4:	e01b      	b.n	8006bee <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68da      	ldr	r2, [r3, #12]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f042 0204 	orr.w	r2, r2, #4
 8006bc4:	60da      	str	r2, [r3, #12]
      break;
 8006bc6:	e012      	b.n	8006bee <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68da      	ldr	r2, [r3, #12]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f042 0208 	orr.w	r2, r2, #8
 8006bd6:	60da      	str	r2, [r3, #12]
      break;
 8006bd8:	e009      	b.n	8006bee <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68da      	ldr	r2, [r3, #12]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f042 0210 	orr.w	r2, r2, #16
 8006be8:	60da      	str	r2, [r3, #12]
      break;
 8006bea:	e000      	b.n	8006bee <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8006bec:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	6839      	ldr	r1, [r7, #0]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 fbad 	bl	8007356 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a18      	ldr	r2, [pc, #96]	; (8006c64 <HAL_TIM_IC_Start_IT+0x200>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d00e      	beq.n	8006c24 <HAL_TIM_IC_Start_IT+0x1c0>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c0e:	d009      	beq.n	8006c24 <HAL_TIM_IC_Start_IT+0x1c0>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a14      	ldr	r2, [pc, #80]	; (8006c68 <HAL_TIM_IC_Start_IT+0x204>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d004      	beq.n	8006c24 <HAL_TIM_IC_Start_IT+0x1c0>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a13      	ldr	r2, [pc, #76]	; (8006c6c <HAL_TIM_IC_Start_IT+0x208>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d111      	bne.n	8006c48 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f003 0307 	and.w	r3, r3, #7
 8006c2e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2b06      	cmp	r3, #6
 8006c34:	d010      	beq.n	8006c58 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f042 0201 	orr.w	r2, r2, #1
 8006c44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c46:	e007      	b.n	8006c58 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f042 0201 	orr.w	r2, r2, #1
 8006c56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	40012c00 	.word	0x40012c00
 8006c68:	40000400 	.word	0x40000400
 8006c6c:	40000800 	.word	0x40000800

08006c70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d122      	bne.n	8006ccc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f003 0302 	and.w	r3, r3, #2
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d11b      	bne.n	8006ccc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f06f 0202 	mvn.w	r2, #2
 8006c9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	f003 0303 	and.w	r3, r3, #3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f7fa fdcc 	bl	8001850 <HAL_TIM_IC_CaptureCallback>
 8006cb8:	e005      	b.n	8006cc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f9c1 	bl	8007042 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 f9c7 	bl	8007054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	f003 0304 	and.w	r3, r3, #4
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	d122      	bne.n	8006d20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	f003 0304 	and.w	r3, r3, #4
 8006ce4:	2b04      	cmp	r3, #4
 8006ce6:	d11b      	bne.n	8006d20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f06f 0204 	mvn.w	r2, #4
 8006cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2202      	movs	r2, #2
 8006cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7fa fda2 	bl	8001850 <HAL_TIM_IC_CaptureCallback>
 8006d0c:	e005      	b.n	8006d1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f997 	bl	8007042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f99d 	bl	8007054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	f003 0308 	and.w	r3, r3, #8
 8006d2a:	2b08      	cmp	r3, #8
 8006d2c:	d122      	bne.n	8006d74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	f003 0308 	and.w	r3, r3, #8
 8006d38:	2b08      	cmp	r3, #8
 8006d3a:	d11b      	bne.n	8006d74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f06f 0208 	mvn.w	r2, #8
 8006d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2204      	movs	r2, #4
 8006d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	f003 0303 	and.w	r3, r3, #3
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f7fa fd78 	bl	8001850 <HAL_TIM_IC_CaptureCallback>
 8006d60:	e005      	b.n	8006d6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f96d 	bl	8007042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f973 	bl	8007054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	f003 0310 	and.w	r3, r3, #16
 8006d7e:	2b10      	cmp	r3, #16
 8006d80:	d122      	bne.n	8006dc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f003 0310 	and.w	r3, r3, #16
 8006d8c:	2b10      	cmp	r3, #16
 8006d8e:	d11b      	bne.n	8006dc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f06f 0210 	mvn.w	r2, #16
 8006d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2208      	movs	r2, #8
 8006d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	69db      	ldr	r3, [r3, #28]
 8006da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7fa fd4e 	bl	8001850 <HAL_TIM_IC_CaptureCallback>
 8006db4:	e005      	b.n	8006dc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f943 	bl	8007042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f949 	bl	8007054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d10e      	bne.n	8006df4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d107      	bne.n	8006df4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f06f 0201 	mvn.w	r2, #1
 8006dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f91e 	bl	8007030 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dfe:	2b80      	cmp	r3, #128	; 0x80
 8006e00:	d10e      	bne.n	8006e20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e0c:	2b80      	cmp	r3, #128	; 0x80
 8006e0e:	d107      	bne.n	8006e20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 fb27 	bl	800746e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2a:	2b40      	cmp	r3, #64	; 0x40
 8006e2c:	d10e      	bne.n	8006e4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e38:	2b40      	cmp	r3, #64	; 0x40
 8006e3a:	d107      	bne.n	8006e4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f90d 	bl	8007066 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	f003 0320 	and.w	r3, r3, #32
 8006e56:	2b20      	cmp	r3, #32
 8006e58:	d10e      	bne.n	8006e78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	f003 0320 	and.w	r3, r3, #32
 8006e64:	2b20      	cmp	r3, #32
 8006e66:	d107      	bne.n	8006e78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f06f 0220 	mvn.w	r2, #32
 8006e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 faf2 	bl	800745c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e78:	bf00      	nop
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d101      	bne.n	8006e9a <HAL_TIM_IC_ConfigChannel+0x1a>
 8006e96:	2302      	movs	r3, #2
 8006e98:	e082      	b.n	8006fa0 <HAL_TIM_IC_ConfigChannel+0x120>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d11b      	bne.n	8006ee0 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6818      	ldr	r0, [r3, #0]
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	6819      	ldr	r1, [r3, #0]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	685a      	ldr	r2, [r3, #4]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	f000 f940 	bl	800713c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	699a      	ldr	r2, [r3, #24]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f022 020c 	bic.w	r2, r2, #12
 8006eca:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6999      	ldr	r1, [r3, #24]
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	689a      	ldr	r2, [r3, #8]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	430a      	orrs	r2, r1
 8006edc:	619a      	str	r2, [r3, #24]
 8006ede:	e05a      	b.n	8006f96 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b04      	cmp	r3, #4
 8006ee4:	d11c      	bne.n	8006f20 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6818      	ldr	r0, [r3, #0]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	6819      	ldr	r1, [r3, #0]
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f000 f97b 	bl	80071f0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	699a      	ldr	r2, [r3, #24]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006f08:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	6999      	ldr	r1, [r3, #24]
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	021a      	lsls	r2, r3, #8
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	619a      	str	r2, [r3, #24]
 8006f1e:	e03a      	b.n	8006f96 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b08      	cmp	r3, #8
 8006f24:	d11b      	bne.n	8006f5e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6818      	ldr	r0, [r3, #0]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	6819      	ldr	r1, [r3, #0]
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	f000 f997 	bl	8007268 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	69da      	ldr	r2, [r3, #28]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 020c 	bic.w	r2, r2, #12
 8006f48:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	69d9      	ldr	r1, [r3, #28]
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	689a      	ldr	r2, [r3, #8]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	61da      	str	r2, [r3, #28]
 8006f5c:	e01b      	b.n	8006f96 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6818      	ldr	r0, [r3, #0]
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	6819      	ldr	r1, [r3, #0]
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	685a      	ldr	r2, [r3, #4]
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	f000 f9b6 	bl	80072de <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	69da      	ldr	r2, [r3, #28]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006f80:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	69d9      	ldr	r1, [r3, #28]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	021a      	lsls	r2, r3, #8
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	430a      	orrs	r2, r1
 8006f94:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60fb      	str	r3, [r7, #12]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	2b0c      	cmp	r3, #12
 8006fba:	d831      	bhi.n	8007020 <HAL_TIM_ReadCapturedValue+0x78>
 8006fbc:	a201      	add	r2, pc, #4	; (adr r2, 8006fc4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc2:	bf00      	nop
 8006fc4:	08006ff9 	.word	0x08006ff9
 8006fc8:	08007021 	.word	0x08007021
 8006fcc:	08007021 	.word	0x08007021
 8006fd0:	08007021 	.word	0x08007021
 8006fd4:	08007003 	.word	0x08007003
 8006fd8:	08007021 	.word	0x08007021
 8006fdc:	08007021 	.word	0x08007021
 8006fe0:	08007021 	.word	0x08007021
 8006fe4:	0800700d 	.word	0x0800700d
 8006fe8:	08007021 	.word	0x08007021
 8006fec:	08007021 	.word	0x08007021
 8006ff0:	08007021 	.word	0x08007021
 8006ff4:	08007017 	.word	0x08007017
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ffe:	60fb      	str	r3, [r7, #12]

      break;
 8007000:	e00f      	b.n	8007022 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007008:	60fb      	str	r3, [r7, #12]

      break;
 800700a:	e00a      	b.n	8007022 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007012:	60fb      	str	r3, [r7, #12]

      break;
 8007014:	e005      	b.n	8007022 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701c:	60fb      	str	r3, [r7, #12]

      break;
 800701e:	e000      	b.n	8007022 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007020:	bf00      	nop
  }

  return tmpreg;
 8007022:	68fb      	ldr	r3, [r7, #12]
}
 8007024:	4618      	mov	r0, r3
 8007026:	3714      	adds	r7, #20
 8007028:	46bd      	mov	sp, r7
 800702a:	bc80      	pop	{r7}
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop

08007030 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007038:	bf00      	nop
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	bc80      	pop	{r7}
 8007040:	4770      	bx	lr

08007042 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007042:	b480      	push	{r7}
 8007044:	b083      	sub	sp, #12
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800704a:	bf00      	nop
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	bc80      	pop	{r7}
 8007052:	4770      	bx	lr

08007054 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	bc80      	pop	{r7}
 8007064:	4770      	bx	lr

08007066 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007066:	b480      	push	{r7}
 8007068:	b083      	sub	sp, #12
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800706e:	bf00      	nop
 8007070:	370c      	adds	r7, #12
 8007072:	46bd      	mov	sp, r7
 8007074:	bc80      	pop	{r7}
 8007076:	4770      	bx	lr

08007078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a29      	ldr	r2, [pc, #164]	; (8007130 <TIM_Base_SetConfig+0xb8>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d00b      	beq.n	80070a8 <TIM_Base_SetConfig+0x30>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007096:	d007      	beq.n	80070a8 <TIM_Base_SetConfig+0x30>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a26      	ldr	r2, [pc, #152]	; (8007134 <TIM_Base_SetConfig+0xbc>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d003      	beq.n	80070a8 <TIM_Base_SetConfig+0x30>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a25      	ldr	r2, [pc, #148]	; (8007138 <TIM_Base_SetConfig+0xc0>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d108      	bne.n	80070ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a1c      	ldr	r2, [pc, #112]	; (8007130 <TIM_Base_SetConfig+0xb8>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d00b      	beq.n	80070da <TIM_Base_SetConfig+0x62>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070c8:	d007      	beq.n	80070da <TIM_Base_SetConfig+0x62>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a19      	ldr	r2, [pc, #100]	; (8007134 <TIM_Base_SetConfig+0xbc>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d003      	beq.n	80070da <TIM_Base_SetConfig+0x62>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a18      	ldr	r2, [pc, #96]	; (8007138 <TIM_Base_SetConfig+0xc0>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d108      	bne.n	80070ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	689a      	ldr	r2, [r3, #8]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a07      	ldr	r2, [pc, #28]	; (8007130 <TIM_Base_SetConfig+0xb8>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d103      	bne.n	8007120 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	691a      	ldr	r2, [r3, #16]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	615a      	str	r2, [r3, #20]
}
 8007126:	bf00      	nop
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	bc80      	pop	{r7}
 800712e:	4770      	bx	lr
 8007130:	40012c00 	.word	0x40012c00
 8007134:	40000400 	.word	0x40000400
 8007138:	40000800 	.word	0x40000800

0800713c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800713c:	b480      	push	{r7}
 800713e:	b087      	sub	sp, #28
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]
 8007148:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	f023 0201 	bic.w	r2, r3, #1
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6a1b      	ldr	r3, [r3, #32]
 8007160:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	4a1f      	ldr	r2, [pc, #124]	; (80071e4 <TIM_TI1_SetConfig+0xa8>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d00b      	beq.n	8007182 <TIM_TI1_SetConfig+0x46>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007170:	d007      	beq.n	8007182 <TIM_TI1_SetConfig+0x46>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	4a1c      	ldr	r2, [pc, #112]	; (80071e8 <TIM_TI1_SetConfig+0xac>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d003      	beq.n	8007182 <TIM_TI1_SetConfig+0x46>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	4a1b      	ldr	r2, [pc, #108]	; (80071ec <TIM_TI1_SetConfig+0xb0>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d101      	bne.n	8007186 <TIM_TI1_SetConfig+0x4a>
 8007182:	2301      	movs	r3, #1
 8007184:	e000      	b.n	8007188 <TIM_TI1_SetConfig+0x4c>
 8007186:	2300      	movs	r3, #0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d008      	beq.n	800719e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	f023 0303 	bic.w	r3, r3, #3
 8007192:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4313      	orrs	r3, r2
 800719a:	617b      	str	r3, [r7, #20]
 800719c:	e003      	b.n	80071a6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f043 0301 	orr.w	r3, r3, #1
 80071a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	011b      	lsls	r3, r3, #4
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	f023 030a 	bic.w	r3, r3, #10
 80071c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	f003 030a 	and.w	r3, r3, #10
 80071c8:	693a      	ldr	r2, [r7, #16]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	621a      	str	r2, [r3, #32]
}
 80071da:	bf00      	nop
 80071dc:	371c      	adds	r7, #28
 80071de:	46bd      	mov	sp, r7
 80071e0:	bc80      	pop	{r7}
 80071e2:	4770      	bx	lr
 80071e4:	40012c00 	.word	0x40012c00
 80071e8:	40000400 	.word	0x40000400
 80071ec:	40000800 	.word	0x40000800

080071f0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
 80071fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	f023 0210 	bic.w	r2, r3, #16
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6a1b      	ldr	r3, [r3, #32]
 8007214:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800721c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	021b      	lsls	r3, r3, #8
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	4313      	orrs	r3, r2
 8007226:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800722e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	031b      	lsls	r3, r3, #12
 8007234:	b29b      	uxth	r3, r3
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	4313      	orrs	r3, r2
 800723a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007242:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	011b      	lsls	r3, r3, #4
 8007248:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	4313      	orrs	r3, r2
 8007250:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	621a      	str	r2, [r3, #32]
}
 800725e:	bf00      	nop
 8007260:	371c      	adds	r7, #28
 8007262:	46bd      	mov	sp, r7
 8007264:	bc80      	pop	{r7}
 8007266:	4770      	bx	lr

08007268 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007268:	b480      	push	{r7}
 800726a:	b087      	sub	sp, #28
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
 8007274:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	69db      	ldr	r3, [r3, #28]
 8007286:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6a1b      	ldr	r3, [r3, #32]
 800728c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f023 0303 	bic.w	r3, r3, #3
 8007294:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4313      	orrs	r3, r2
 800729c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	011b      	lsls	r3, r3, #4
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072b8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	021b      	lsls	r3, r3, #8
 80072be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	621a      	str	r2, [r3, #32]
}
 80072d4:	bf00      	nop
 80072d6:	371c      	adds	r7, #28
 80072d8:	46bd      	mov	sp, r7
 80072da:	bc80      	pop	{r7}
 80072dc:	4770      	bx	lr

080072de <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80072de:	b480      	push	{r7}
 80072e0:	b087      	sub	sp, #28
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	60f8      	str	r0, [r7, #12]
 80072e6:	60b9      	str	r1, [r7, #8]
 80072e8:	607a      	str	r2, [r7, #4]
 80072ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	69db      	ldr	r3, [r3, #28]
 80072fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800730a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	021b      	lsls	r3, r3, #8
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	4313      	orrs	r3, r2
 8007314:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800731c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	031b      	lsls	r3, r3, #12
 8007322:	b29b      	uxth	r3, r3
 8007324:	697a      	ldr	r2, [r7, #20]
 8007326:	4313      	orrs	r3, r2
 8007328:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007330:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	031b      	lsls	r3, r3, #12
 8007336:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	4313      	orrs	r3, r2
 800733e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	621a      	str	r2, [r3, #32]
}
 800734c:	bf00      	nop
 800734e:	371c      	adds	r7, #28
 8007350:	46bd      	mov	sp, r7
 8007352:	bc80      	pop	{r7}
 8007354:	4770      	bx	lr

08007356 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007356:	b480      	push	{r7}
 8007358:	b087      	sub	sp, #28
 800735a:	af00      	add	r7, sp, #0
 800735c:	60f8      	str	r0, [r7, #12]
 800735e:	60b9      	str	r1, [r7, #8]
 8007360:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	f003 031f 	and.w	r3, r3, #31
 8007368:	2201      	movs	r2, #1
 800736a:	fa02 f303 	lsl.w	r3, r2, r3
 800736e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6a1a      	ldr	r2, [r3, #32]
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	43db      	mvns	r3, r3
 8007378:	401a      	ands	r2, r3
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6a1a      	ldr	r2, [r3, #32]
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	f003 031f 	and.w	r3, r3, #31
 8007388:	6879      	ldr	r1, [r7, #4]
 800738a:	fa01 f303 	lsl.w	r3, r1, r3
 800738e:	431a      	orrs	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	621a      	str	r2, [r3, #32]
}
 8007394:	bf00      	nop
 8007396:	371c      	adds	r7, #28
 8007398:	46bd      	mov	sp, r7
 800739a:	bc80      	pop	{r7}
 800739c:	4770      	bx	lr
	...

080073a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d101      	bne.n	80073b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073b4:	2302      	movs	r3, #2
 80073b6:	e046      	b.n	8007446 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2202      	movs	r2, #2
 80073c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a16      	ldr	r2, [pc, #88]	; (8007450 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d00e      	beq.n	800741a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007404:	d009      	beq.n	800741a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a12      	ldr	r2, [pc, #72]	; (8007454 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d004      	beq.n	800741a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a10      	ldr	r2, [pc, #64]	; (8007458 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d10c      	bne.n	8007434 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007420:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	4313      	orrs	r3, r2
 800742a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3714      	adds	r7, #20
 800744a:	46bd      	mov	sp, r7
 800744c:	bc80      	pop	{r7}
 800744e:	4770      	bx	lr
 8007450:	40012c00 	.word	0x40012c00
 8007454:	40000400 	.word	0x40000400
 8007458:	40000800 	.word	0x40000800

0800745c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	bc80      	pop	{r7}
 800746c:	4770      	bx	lr

0800746e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800746e:	b480      	push	{r7}
 8007470:	b083      	sub	sp, #12
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007476:	bf00      	nop
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	bc80      	pop	{r7}
 800747e:	4770      	bx	lr

08007480 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007480:	b084      	sub	sp, #16
 8007482:	b480      	push	{r7}
 8007484:	b083      	sub	sp, #12
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	f107 0014 	add.w	r0, r7, #20
 800748e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	bc80      	pop	{r7}
 800749c:	b004      	add	sp, #16
 800749e:	4770      	bx	lr

080074a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80074b0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80074b4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3714      	adds	r7, #20
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bc80      	pop	{r7}
 80074ca:	4770      	bx	lr

080074cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80074d4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80074d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	43db      	mvns	r3, r3
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	4013      	ands	r3, r2
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3714      	adds	r7, #20
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bc80      	pop	{r7}
 80074fe:	4770      	bx	lr

08007500 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	460b      	mov	r3, r1
 800750a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	bc80      	pop	{r7}
 8007516:	4770      	bx	lr

08007518 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007518:	b084      	sub	sp, #16
 800751a:	b480      	push	{r7}
 800751c:	b083      	sub	sp, #12
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	f107 0014 	add.w	r0, r7, #20
 8007526:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	bc80      	pop	{r7}
 8007554:	b004      	add	sp, #16
 8007556:	4770      	bx	lr

08007558 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007558:	b480      	push	{r7}
 800755a:	b09b      	sub	sp, #108	; 0x6c
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007562:	2300      	movs	r3, #0
 8007564:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4413      	add	r3, r2
 8007572:	881b      	ldrh	r3, [r3, #0]
 8007574:	b29b      	uxth	r3, r3
 8007576:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800757a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800757e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	78db      	ldrb	r3, [r3, #3]
 8007586:	2b03      	cmp	r3, #3
 8007588:	d81f      	bhi.n	80075ca <USB_ActivateEndpoint+0x72>
 800758a:	a201      	add	r2, pc, #4	; (adr r2, 8007590 <USB_ActivateEndpoint+0x38>)
 800758c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007590:	080075a1 	.word	0x080075a1
 8007594:	080075bd 	.word	0x080075bd
 8007598:	080075d3 	.word	0x080075d3
 800759c:	080075af 	.word	0x080075af
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80075a0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80075a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075a8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80075ac:	e012      	b.n	80075d4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80075ae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80075b2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80075b6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80075ba:	e00b      	b.n	80075d4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80075bc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80075c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80075c4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80075c8:	e004      	b.n	80075d4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80075d0:	e000      	b.n	80075d4 <USB_ActivateEndpoint+0x7c>
      break;
 80075d2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	441a      	add	r2, r3
 80075de:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80075e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	b29b      	uxth	r3, r3
 8007604:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800760c:	b29a      	uxth	r2, r3
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	b29b      	uxth	r3, r3
 8007614:	4313      	orrs	r3, r2
 8007616:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	441a      	add	r2, r3
 8007624:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007628:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800762c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007630:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007638:	b29b      	uxth	r3, r3
 800763a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	7b1b      	ldrb	r3, [r3, #12]
 8007640:	2b00      	cmp	r3, #0
 8007642:	f040 8149 	bne.w	80078d8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	785b      	ldrb	r3, [r3, #1]
 800764a:	2b00      	cmp	r3, #0
 800764c:	f000 8084 	beq.w	8007758 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	617b      	str	r3, [r7, #20]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800765a:	b29b      	uxth	r3, r3
 800765c:	461a      	mov	r2, r3
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	4413      	add	r3, r2
 8007662:	617b      	str	r3, [r7, #20]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	011a      	lsls	r2, r3, #4
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	4413      	add	r3, r2
 800766e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007672:	613b      	str	r3, [r7, #16]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	88db      	ldrh	r3, [r3, #6]
 8007678:	085b      	lsrs	r3, r3, #1
 800767a:	b29b      	uxth	r3, r3
 800767c:	005b      	lsls	r3, r3, #1
 800767e:	b29a      	uxth	r2, r3
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4413      	add	r3, r2
 800768e:	881b      	ldrh	r3, [r3, #0]
 8007690:	81fb      	strh	r3, [r7, #14]
 8007692:	89fb      	ldrh	r3, [r7, #14]
 8007694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007698:	2b00      	cmp	r3, #0
 800769a:	d01b      	beq.n	80076d4 <USB_ActivateEndpoint+0x17c>
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b2:	81bb      	strh	r3, [r7, #12]
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	441a      	add	r2, r3
 80076be:	89bb      	ldrh	r3, [r7, #12]
 80076c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	78db      	ldrb	r3, [r3, #3]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d020      	beq.n	800771e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	4413      	add	r3, r2
 80076e6:	881b      	ldrh	r3, [r3, #0]
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076f2:	813b      	strh	r3, [r7, #8]
 80076f4:	893b      	ldrh	r3, [r7, #8]
 80076f6:	f083 0320 	eor.w	r3, r3, #32
 80076fa:	813b      	strh	r3, [r7, #8]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	441a      	add	r2, r3
 8007706:	893b      	ldrh	r3, [r7, #8]
 8007708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800770c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007710:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007718:	b29b      	uxth	r3, r3
 800771a:	8013      	strh	r3, [r2, #0]
 800771c:	e27f      	b.n	8007c1e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4413      	add	r3, r2
 8007728:	881b      	ldrh	r3, [r3, #0]
 800772a:	b29b      	uxth	r3, r3
 800772c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007734:	817b      	strh	r3, [r7, #10]
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	441a      	add	r2, r3
 8007740:	897b      	ldrh	r3, [r7, #10]
 8007742:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007746:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800774a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800774e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007752:	b29b      	uxth	r3, r3
 8007754:	8013      	strh	r3, [r2, #0]
 8007756:	e262      	b.n	8007c1e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007762:	b29b      	uxth	r3, r3
 8007764:	461a      	mov	r2, r3
 8007766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007768:	4413      	add	r3, r2
 800776a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	011a      	lsls	r2, r3, #4
 8007772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007774:	4413      	add	r3, r2
 8007776:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800777a:	62bb      	str	r3, [r7, #40]	; 0x28
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	88db      	ldrh	r3, [r3, #6]
 8007780:	085b      	lsrs	r3, r3, #1
 8007782:	b29b      	uxth	r3, r3
 8007784:	005b      	lsls	r3, r3, #1
 8007786:	b29a      	uxth	r2, r3
 8007788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	627b      	str	r3, [r7, #36]	; 0x24
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007796:	b29b      	uxth	r3, r3
 8007798:	461a      	mov	r2, r3
 800779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779c:	4413      	add	r3, r2
 800779e:	627b      	str	r3, [r7, #36]	; 0x24
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	011a      	lsls	r2, r3, #4
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	4413      	add	r3, r2
 80077aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077ae:	623b      	str	r3, [r7, #32]
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d112      	bne.n	80077de <USB_ActivateEndpoint+0x286>
 80077b8:	6a3b      	ldr	r3, [r7, #32]
 80077ba:	881b      	ldrh	r3, [r3, #0]
 80077bc:	b29b      	uxth	r3, r3
 80077be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	6a3b      	ldr	r3, [r7, #32]
 80077c6:	801a      	strh	r2, [r3, #0]
 80077c8:	6a3b      	ldr	r3, [r7, #32]
 80077ca:	881b      	ldrh	r3, [r3, #0]
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	6a3b      	ldr	r3, [r7, #32]
 80077da:	801a      	strh	r2, [r3, #0]
 80077dc:	e02f      	b.n	800783e <USB_ActivateEndpoint+0x2e6>
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	2b3e      	cmp	r3, #62	; 0x3e
 80077e4:	d813      	bhi.n	800780e <USB_ActivateEndpoint+0x2b6>
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	085b      	lsrs	r3, r3, #1
 80077ec:	663b      	str	r3, [r7, #96]	; 0x60
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d002      	beq.n	8007800 <USB_ActivateEndpoint+0x2a8>
 80077fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077fc:	3301      	adds	r3, #1
 80077fe:	663b      	str	r3, [r7, #96]	; 0x60
 8007800:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007802:	b29b      	uxth	r3, r3
 8007804:	029b      	lsls	r3, r3, #10
 8007806:	b29a      	uxth	r2, r3
 8007808:	6a3b      	ldr	r3, [r7, #32]
 800780a:	801a      	strh	r2, [r3, #0]
 800780c:	e017      	b.n	800783e <USB_ActivateEndpoint+0x2e6>
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	095b      	lsrs	r3, r3, #5
 8007814:	663b      	str	r3, [r7, #96]	; 0x60
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	f003 031f 	and.w	r3, r3, #31
 800781e:	2b00      	cmp	r3, #0
 8007820:	d102      	bne.n	8007828 <USB_ActivateEndpoint+0x2d0>
 8007822:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007824:	3b01      	subs	r3, #1
 8007826:	663b      	str	r3, [r7, #96]	; 0x60
 8007828:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800782a:	b29b      	uxth	r3, r3
 800782c:	029b      	lsls	r3, r3, #10
 800782e:	b29b      	uxth	r3, r3
 8007830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007838:	b29a      	uxth	r2, r3
 800783a:	6a3b      	ldr	r3, [r7, #32]
 800783c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	4413      	add	r3, r2
 8007848:	881b      	ldrh	r3, [r3, #0]
 800784a:	83fb      	strh	r3, [r7, #30]
 800784c:	8bfb      	ldrh	r3, [r7, #30]
 800784e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d01b      	beq.n	800788e <USB_ActivateEndpoint+0x336>
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	4413      	add	r3, r2
 8007860:	881b      	ldrh	r3, [r3, #0]
 8007862:	b29b      	uxth	r3, r3
 8007864:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800786c:	83bb      	strh	r3, [r7, #28]
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	441a      	add	r2, r3
 8007878:	8bbb      	ldrh	r3, [r7, #28]
 800787a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800787e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007882:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800788a:	b29b      	uxth	r3, r3
 800788c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4413      	add	r3, r2
 8007898:	881b      	ldrh	r3, [r3, #0]
 800789a:	b29b      	uxth	r3, r3
 800789c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a4:	837b      	strh	r3, [r7, #26]
 80078a6:	8b7b      	ldrh	r3, [r7, #26]
 80078a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80078ac:	837b      	strh	r3, [r7, #26]
 80078ae:	8b7b      	ldrh	r3, [r7, #26]
 80078b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80078b4:	837b      	strh	r3, [r7, #26]
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	441a      	add	r2, r3
 80078c0:	8b7b      	ldrh	r3, [r7, #26]
 80078c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	8013      	strh	r3, [r2, #0]
 80078d6:	e1a2      	b.n	8007c1e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	881b      	ldrh	r3, [r3, #0]
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ee:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	441a      	add	r2, r3
 80078fc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007900:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007904:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007908:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800790c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007910:	b29b      	uxth	r3, r3
 8007912:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	65bb      	str	r3, [r7, #88]	; 0x58
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800791e:	b29b      	uxth	r3, r3
 8007920:	461a      	mov	r2, r3
 8007922:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007924:	4413      	add	r3, r2
 8007926:	65bb      	str	r3, [r7, #88]	; 0x58
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	011a      	lsls	r2, r3, #4
 800792e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007930:	4413      	add	r3, r2
 8007932:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007936:	657b      	str	r3, [r7, #84]	; 0x54
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	891b      	ldrh	r3, [r3, #8]
 800793c:	085b      	lsrs	r3, r3, #1
 800793e:	b29b      	uxth	r3, r3
 8007940:	005b      	lsls	r3, r3, #1
 8007942:	b29a      	uxth	r2, r3
 8007944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007946:	801a      	strh	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	653b      	str	r3, [r7, #80]	; 0x50
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007952:	b29b      	uxth	r3, r3
 8007954:	461a      	mov	r2, r3
 8007956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007958:	4413      	add	r3, r2
 800795a:	653b      	str	r3, [r7, #80]	; 0x50
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	011a      	lsls	r2, r3, #4
 8007962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007964:	4413      	add	r3, r2
 8007966:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800796a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	895b      	ldrh	r3, [r3, #10]
 8007970:	085b      	lsrs	r3, r3, #1
 8007972:	b29b      	uxth	r3, r3
 8007974:	005b      	lsls	r3, r3, #1
 8007976:	b29a      	uxth	r2, r3
 8007978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800797a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	785b      	ldrb	r3, [r3, #1]
 8007980:	2b00      	cmp	r3, #0
 8007982:	f040 8091 	bne.w	8007aa8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4413      	add	r3, r2
 8007990:	881b      	ldrh	r3, [r3, #0]
 8007992:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007994:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d01b      	beq.n	80079d6 <USB_ActivateEndpoint+0x47e>
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	4413      	add	r3, r2
 80079a8:	881b      	ldrh	r3, [r3, #0]
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079b4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	441a      	add	r2, r3
 80079c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80079c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4413      	add	r3, r2
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	873b      	strh	r3, [r7, #56]	; 0x38
 80079e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80079e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d01b      	beq.n	8007a26 <USB_ActivateEndpoint+0x4ce>
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	4413      	add	r3, r2
 80079f8:	881b      	ldrh	r3, [r3, #0]
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a04:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	441a      	add	r2, r3
 8007a10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007a12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	4413      	add	r3, r2
 8007a30:	881b      	ldrh	r3, [r3, #0]
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a3c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007a3e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007a40:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a44:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007a46:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007a48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a4c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	441a      	add	r2, r3
 8007a58:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4413      	add	r3, r2
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a84:	867b      	strh	r3, [r7, #50]	; 0x32
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	441a      	add	r2, r3
 8007a90:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	8013      	strh	r3, [r2, #0]
 8007aa6:	e0ba      	b.n	8007c1e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4413      	add	r3, r2
 8007ab2:	881b      	ldrh	r3, [r3, #0]
 8007ab4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007ab8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d01d      	beq.n	8007b00 <USB_ActivateEndpoint+0x5a8>
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	4413      	add	r3, r2
 8007ace:	881b      	ldrh	r3, [r3, #0]
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ada:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	441a      	add	r2, r3
 8007ae8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007aec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007af0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007af4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	4413      	add	r3, r2
 8007b0a:	881b      	ldrh	r3, [r3, #0]
 8007b0c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007b10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d01d      	beq.n	8007b58 <USB_ActivateEndpoint+0x600>
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	881b      	ldrh	r3, [r3, #0]
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b32:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	441a      	add	r2, r3
 8007b40:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	78db      	ldrb	r3, [r3, #3]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d024      	beq.n	8007baa <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	881b      	ldrh	r3, [r3, #0]
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b76:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007b7a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007b7e:	f083 0320 	eor.w	r3, r3, #32
 8007b82:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	441a      	add	r2, r3
 8007b90:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007b94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	8013      	strh	r3, [r2, #0]
 8007ba8:	e01d      	b.n	8007be6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4413      	add	r3, r2
 8007bb4:	881b      	ldrh	r3, [r3, #0]
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bc0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	441a      	add	r2, r3
 8007bce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	4413      	add	r3, r2
 8007bf0:	881b      	ldrh	r3, [r3, #0]
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bfc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	441a      	add	r2, r3
 8007c08:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007c1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	376c      	adds	r7, #108	; 0x6c
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bc80      	pop	{r7}
 8007c2a:	4770      	bx	lr

08007c2c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b08d      	sub	sp, #52	; 0x34
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	7b1b      	ldrb	r3, [r3, #12]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	f040 808e 	bne.w	8007d5c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	785b      	ldrb	r3, [r3, #1]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d044      	beq.n	8007cd2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	81bb      	strh	r3, [r7, #12]
 8007c56:	89bb      	ldrh	r3, [r7, #12]
 8007c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d01b      	beq.n	8007c98 <USB_DeactivateEndpoint+0x6c>
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	4413      	add	r3, r2
 8007c6a:	881b      	ldrh	r3, [r3, #0]
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c76:	817b      	strh	r3, [r7, #10]
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	441a      	add	r2, r3
 8007c82:	897b      	ldrh	r3, [r7, #10]
 8007c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	4413      	add	r3, r2
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007caa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cae:	813b      	strh	r3, [r7, #8]
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	441a      	add	r2, r3
 8007cba:	893b      	ldrh	r3, [r7, #8]
 8007cbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	8013      	strh	r3, [r2, #0]
 8007cd0:	e192      	b.n	8007ff8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4413      	add	r3, r2
 8007cdc:	881b      	ldrh	r3, [r3, #0]
 8007cde:	827b      	strh	r3, [r7, #18]
 8007ce0:	8a7b      	ldrh	r3, [r7, #18]
 8007ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d01b      	beq.n	8007d22 <USB_DeactivateEndpoint+0xf6>
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	4413      	add	r3, r2
 8007cf4:	881b      	ldrh	r3, [r3, #0]
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d00:	823b      	strh	r3, [r7, #16]
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	441a      	add	r2, r3
 8007d0c:	8a3b      	ldrh	r3, [r7, #16]
 8007d0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	4413      	add	r3, r2
 8007d2c:	881b      	ldrh	r3, [r3, #0]
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d38:	81fb      	strh	r3, [r7, #14]
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	441a      	add	r2, r3
 8007d44:	89fb      	ldrh	r3, [r7, #14]
 8007d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	8013      	strh	r3, [r2, #0]
 8007d5a:	e14d      	b.n	8007ff8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	785b      	ldrb	r3, [r3, #1]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f040 80a5 	bne.w	8007eb0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4413      	add	r3, r2
 8007d70:	881b      	ldrh	r3, [r3, #0]
 8007d72:	843b      	strh	r3, [r7, #32]
 8007d74:	8c3b      	ldrh	r3, [r7, #32]
 8007d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d01b      	beq.n	8007db6 <USB_DeactivateEndpoint+0x18a>
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	4413      	add	r3, r2
 8007d88:	881b      	ldrh	r3, [r3, #0]
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d94:	83fb      	strh	r3, [r7, #30]
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	441a      	add	r2, r3
 8007da0:	8bfb      	ldrh	r3, [r7, #30]
 8007da2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007da6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007daa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4413      	add	r3, r2
 8007dc0:	881b      	ldrh	r3, [r3, #0]
 8007dc2:	83bb      	strh	r3, [r7, #28]
 8007dc4:	8bbb      	ldrh	r3, [r7, #28]
 8007dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d01b      	beq.n	8007e06 <USB_DeactivateEndpoint+0x1da>
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	4413      	add	r3, r2
 8007dd8:	881b      	ldrh	r3, [r3, #0]
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007de4:	837b      	strh	r3, [r7, #26]
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	441a      	add	r2, r3
 8007df0:	8b7b      	ldrh	r3, [r7, #26]
 8007df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dfe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4413      	add	r3, r2
 8007e10:	881b      	ldrh	r3, [r3, #0]
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e1c:	833b      	strh	r3, [r7, #24]
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	441a      	add	r2, r3
 8007e28:	8b3b      	ldrh	r3, [r7, #24]
 8007e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e54:	82fb      	strh	r3, [r7, #22]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	441a      	add	r2, r3
 8007e60:	8afb      	ldrh	r3, [r7, #22]
 8007e62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4413      	add	r3, r2
 8007e80:	881b      	ldrh	r3, [r3, #0]
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e8c:	82bb      	strh	r3, [r7, #20]
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	441a      	add	r2, r3
 8007e98:	8abb      	ldrh	r3, [r7, #20]
 8007e9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	8013      	strh	r3, [r2, #0]
 8007eae:	e0a3      	b.n	8007ff8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	4413      	add	r3, r2
 8007eba:	881b      	ldrh	r3, [r3, #0]
 8007ebc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007ebe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d01b      	beq.n	8007f00 <USB_DeactivateEndpoint+0x2d4>
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	4413      	add	r3, r2
 8007ed2:	881b      	ldrh	r3, [r3, #0]
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ede:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	441a      	add	r2, r3
 8007eea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007eec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ef0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ef4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4413      	add	r3, r2
 8007f0a:	881b      	ldrh	r3, [r3, #0]
 8007f0c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007f0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d01b      	beq.n	8007f50 <USB_DeactivateEndpoint+0x324>
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	4413      	add	r3, r2
 8007f22:	881b      	ldrh	r3, [r3, #0]
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f2e:	853b      	strh	r3, [r7, #40]	; 0x28
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	441a      	add	r2, r3
 8007f3a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	4413      	add	r3, r2
 8007f5a:	881b      	ldrh	r3, [r3, #0]
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f66:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	441a      	add	r2, r3
 8007f72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	4413      	add	r3, r2
 8007f92:	881b      	ldrh	r3, [r3, #0]
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f9e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	441a      	add	r2, r3
 8007faa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	4413      	add	r3, r2
 8007fca:	881b      	ldrh	r3, [r3, #0]
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fd6:	847b      	strh	r3, [r7, #34]	; 0x22
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	441a      	add	r2, r3
 8007fe2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3734      	adds	r7, #52	; 0x34
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bc80      	pop	{r7}
 8008002:	4770      	bx	lr

08008004 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b0c4      	sub	sp, #272	; 0x110
 8008008:	af00      	add	r7, sp, #0
 800800a:	1d3b      	adds	r3, r7, #4
 800800c:	6018      	str	r0, [r3, #0]
 800800e:	463b      	mov	r3, r7
 8008010:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008012:	463b      	mov	r3, r7
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	785b      	ldrb	r3, [r3, #1]
 8008018:	2b01      	cmp	r3, #1
 800801a:	f040 8557 	bne.w	8008acc <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800801e:	463b      	mov	r3, r7
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	699a      	ldr	r2, [r3, #24]
 8008024:	463b      	mov	r3, r7
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	429a      	cmp	r2, r3
 800802c:	d905      	bls.n	800803a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800802e:	463b      	mov	r3, r7
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008038:	e004      	b.n	8008044 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800803a:	463b      	mov	r3, r7
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	699b      	ldr	r3, [r3, #24]
 8008040:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008044:	463b      	mov	r3, r7
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	7b1b      	ldrb	r3, [r3, #12]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d12c      	bne.n	80080a8 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800804e:	463b      	mov	r3, r7
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	6959      	ldr	r1, [r3, #20]
 8008054:	463b      	mov	r3, r7
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	88da      	ldrh	r2, [r3, #6]
 800805a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800805e:	b29b      	uxth	r3, r3
 8008060:	1d38      	adds	r0, r7, #4
 8008062:	6800      	ldr	r0, [r0, #0]
 8008064:	f001 fa2c 	bl	80094c0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008068:	1d3b      	adds	r3, r7, #4
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	617b      	str	r3, [r7, #20]
 800806e:	1d3b      	adds	r3, r7, #4
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008076:	b29b      	uxth	r3, r3
 8008078:	461a      	mov	r2, r3
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	4413      	add	r3, r2
 800807e:	617b      	str	r3, [r7, #20]
 8008080:	463b      	mov	r3, r7
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	011a      	lsls	r2, r3, #4
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	4413      	add	r3, r2
 800808c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008090:	f107 0310 	add.w	r3, r7, #16
 8008094:	601a      	str	r2, [r3, #0]
 8008096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800809a:	b29a      	uxth	r2, r3
 800809c:	f107 0310 	add.w	r3, r7, #16
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	801a      	strh	r2, [r3, #0]
 80080a4:	f000 bcdd 	b.w	8008a62 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80080a8:	463b      	mov	r3, r7
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	78db      	ldrb	r3, [r3, #3]
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	f040 8347 	bne.w	8008742 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80080b4:	463b      	mov	r3, r7
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	6a1a      	ldr	r2, [r3, #32]
 80080ba:	463b      	mov	r3, r7
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	691b      	ldr	r3, [r3, #16]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	f240 82eb 	bls.w	800869c <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80080c6:	1d3b      	adds	r3, r7, #4
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	463b      	mov	r3, r7
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	4413      	add	r3, r2
 80080d4:	881b      	ldrh	r3, [r3, #0]
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080e0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80080e4:	1d3b      	adds	r3, r7, #4
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	463b      	mov	r3, r7
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	441a      	add	r2, r3
 80080f2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80080f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008106:	b29b      	uxth	r3, r3
 8008108:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800810a:	463b      	mov	r3, r7
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	6a1a      	ldr	r2, [r3, #32]
 8008110:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008114:	1ad2      	subs	r2, r2, r3
 8008116:	463b      	mov	r3, r7
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800811c:	1d3b      	adds	r3, r7, #4
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	463b      	mov	r3, r7
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4413      	add	r3, r2
 800812a:	881b      	ldrh	r3, [r3, #0]
 800812c:	b29b      	uxth	r3, r3
 800812e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008132:	2b00      	cmp	r3, #0
 8008134:	f000 8159 	beq.w	80083ea <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008138:	1d3b      	adds	r3, r7, #4
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	637b      	str	r3, [r7, #52]	; 0x34
 800813e:	463b      	mov	r3, r7
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	785b      	ldrb	r3, [r3, #1]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d164      	bne.n	8008212 <USB_EPStartXfer+0x20e>
 8008148:	1d3b      	adds	r3, r7, #4
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800814e:	1d3b      	adds	r3, r7, #4
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008156:	b29b      	uxth	r3, r3
 8008158:	461a      	mov	r2, r3
 800815a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815c:	4413      	add	r3, r2
 800815e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008160:	463b      	mov	r3, r7
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	011a      	lsls	r2, r3, #4
 8008168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816a:	4413      	add	r3, r2
 800816c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008170:	62bb      	str	r3, [r7, #40]	; 0x28
 8008172:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008176:	2b00      	cmp	r3, #0
 8008178:	d112      	bne.n	80081a0 <USB_EPStartXfer+0x19c>
 800817a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817c:	881b      	ldrh	r3, [r3, #0]
 800817e:	b29b      	uxth	r3, r3
 8008180:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008184:	b29a      	uxth	r2, r3
 8008186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008188:	801a      	strh	r2, [r3, #0]
 800818a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818c:	881b      	ldrh	r3, [r3, #0]
 800818e:	b29b      	uxth	r3, r3
 8008190:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008194:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008198:	b29a      	uxth	r2, r3
 800819a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819c:	801a      	strh	r2, [r3, #0]
 800819e:	e054      	b.n	800824a <USB_EPStartXfer+0x246>
 80081a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081a4:	2b3e      	cmp	r3, #62	; 0x3e
 80081a6:	d817      	bhi.n	80081d8 <USB_EPStartXfer+0x1d4>
 80081a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081ac:	085b      	lsrs	r3, r3, #1
 80081ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80081b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081b6:	f003 0301 	and.w	r3, r3, #1
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d004      	beq.n	80081c8 <USB_EPStartXfer+0x1c4>
 80081be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081c2:	3301      	adds	r3, #1
 80081c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80081c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	029b      	lsls	r3, r3, #10
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d4:	801a      	strh	r2, [r3, #0]
 80081d6:	e038      	b.n	800824a <USB_EPStartXfer+0x246>
 80081d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081dc:	095b      	lsrs	r3, r3, #5
 80081de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80081e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081e6:	f003 031f 	and.w	r3, r3, #31
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d104      	bne.n	80081f8 <USB_EPStartXfer+0x1f4>
 80081ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081f2:	3b01      	subs	r3, #1
 80081f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80081f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	029b      	lsls	r3, r3, #10
 8008200:	b29b      	uxth	r3, r3
 8008202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800820a:	b29a      	uxth	r2, r3
 800820c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820e:	801a      	strh	r2, [r3, #0]
 8008210:	e01b      	b.n	800824a <USB_EPStartXfer+0x246>
 8008212:	463b      	mov	r3, r7
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	785b      	ldrb	r3, [r3, #1]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d116      	bne.n	800824a <USB_EPStartXfer+0x246>
 800821c:	1d3b      	adds	r3, r7, #4
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008224:	b29b      	uxth	r3, r3
 8008226:	461a      	mov	r2, r3
 8008228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800822a:	4413      	add	r3, r2
 800822c:	637b      	str	r3, [r7, #52]	; 0x34
 800822e:	463b      	mov	r3, r7
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	011a      	lsls	r2, r3, #4
 8008236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008238:	4413      	add	r3, r2
 800823a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800823e:	633b      	str	r3, [r7, #48]	; 0x30
 8008240:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008244:	b29a      	uxth	r2, r3
 8008246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008248:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800824a:	463b      	mov	r3, r7
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	895b      	ldrh	r3, [r3, #10]
 8008250:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008254:	463b      	mov	r3, r7
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	6959      	ldr	r1, [r3, #20]
 800825a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800825e:	b29b      	uxth	r3, r3
 8008260:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008264:	1d38      	adds	r0, r7, #4
 8008266:	6800      	ldr	r0, [r0, #0]
 8008268:	f001 f92a 	bl	80094c0 <USB_WritePMA>
            ep->xfer_buff += len;
 800826c:	463b      	mov	r3, r7
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	695a      	ldr	r2, [r3, #20]
 8008272:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008276:	441a      	add	r2, r3
 8008278:	463b      	mov	r3, r7
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800827e:	463b      	mov	r3, r7
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	6a1a      	ldr	r2, [r3, #32]
 8008284:	463b      	mov	r3, r7
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	429a      	cmp	r2, r3
 800828c:	d909      	bls.n	80082a2 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 800828e:	463b      	mov	r3, r7
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	6a1a      	ldr	r2, [r3, #32]
 8008294:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008298:	1ad2      	subs	r2, r2, r3
 800829a:	463b      	mov	r3, r7
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	621a      	str	r2, [r3, #32]
 80082a0:	e008      	b.n	80082b4 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80082a2:	463b      	mov	r3, r7
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	6a1b      	ldr	r3, [r3, #32]
 80082a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80082ac:	463b      	mov	r3, r7
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2200      	movs	r2, #0
 80082b2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80082b4:	463b      	mov	r3, r7
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	785b      	ldrb	r3, [r3, #1]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d164      	bne.n	8008388 <USB_EPStartXfer+0x384>
 80082be:	1d3b      	adds	r3, r7, #4
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	61fb      	str	r3, [r7, #28]
 80082c4:	1d3b      	adds	r3, r7, #4
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	461a      	mov	r2, r3
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	4413      	add	r3, r2
 80082d4:	61fb      	str	r3, [r7, #28]
 80082d6:	463b      	mov	r3, r7
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	011a      	lsls	r2, r3, #4
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	4413      	add	r3, r2
 80082e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80082e6:	61bb      	str	r3, [r7, #24]
 80082e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d112      	bne.n	8008316 <USB_EPStartXfer+0x312>
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	881b      	ldrh	r3, [r3, #0]
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	801a      	strh	r2, [r3, #0]
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	881b      	ldrh	r3, [r3, #0]
 8008304:	b29b      	uxth	r3, r3
 8008306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800830a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800830e:	b29a      	uxth	r2, r3
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	801a      	strh	r2, [r3, #0]
 8008314:	e057      	b.n	80083c6 <USB_EPStartXfer+0x3c2>
 8008316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800831a:	2b3e      	cmp	r3, #62	; 0x3e
 800831c:	d817      	bhi.n	800834e <USB_EPStartXfer+0x34a>
 800831e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008322:	085b      	lsrs	r3, r3, #1
 8008324:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008328:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800832c:	f003 0301 	and.w	r3, r3, #1
 8008330:	2b00      	cmp	r3, #0
 8008332:	d004      	beq.n	800833e <USB_EPStartXfer+0x33a>
 8008334:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008338:	3301      	adds	r3, #1
 800833a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800833e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008342:	b29b      	uxth	r3, r3
 8008344:	029b      	lsls	r3, r3, #10
 8008346:	b29a      	uxth	r2, r3
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	801a      	strh	r2, [r3, #0]
 800834c:	e03b      	b.n	80083c6 <USB_EPStartXfer+0x3c2>
 800834e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008352:	095b      	lsrs	r3, r3, #5
 8008354:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008358:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800835c:	f003 031f 	and.w	r3, r3, #31
 8008360:	2b00      	cmp	r3, #0
 8008362:	d104      	bne.n	800836e <USB_EPStartXfer+0x36a>
 8008364:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008368:	3b01      	subs	r3, #1
 800836a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800836e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008372:	b29b      	uxth	r3, r3
 8008374:	029b      	lsls	r3, r3, #10
 8008376:	b29b      	uxth	r3, r3
 8008378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800837c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008380:	b29a      	uxth	r2, r3
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	801a      	strh	r2, [r3, #0]
 8008386:	e01e      	b.n	80083c6 <USB_EPStartXfer+0x3c2>
 8008388:	463b      	mov	r3, r7
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	785b      	ldrb	r3, [r3, #1]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d119      	bne.n	80083c6 <USB_EPStartXfer+0x3c2>
 8008392:	1d3b      	adds	r3, r7, #4
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	627b      	str	r3, [r7, #36]	; 0x24
 8008398:	1d3b      	adds	r3, r7, #4
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	461a      	mov	r2, r3
 80083a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a6:	4413      	add	r3, r2
 80083a8:	627b      	str	r3, [r7, #36]	; 0x24
 80083aa:	463b      	mov	r3, r7
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	011a      	lsls	r2, r3, #4
 80083b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b4:	4413      	add	r3, r2
 80083b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80083ba:	623b      	str	r3, [r7, #32]
 80083bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	6a3b      	ldr	r3, [r7, #32]
 80083c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80083c6:	463b      	mov	r3, r7
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	891b      	ldrh	r3, [r3, #8]
 80083cc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80083d0:	463b      	mov	r3, r7
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6959      	ldr	r1, [r3, #20]
 80083d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083da:	b29b      	uxth	r3, r3
 80083dc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80083e0:	1d38      	adds	r0, r7, #4
 80083e2:	6800      	ldr	r0, [r0, #0]
 80083e4:	f001 f86c 	bl	80094c0 <USB_WritePMA>
 80083e8:	e33b      	b.n	8008a62 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80083ea:	463b      	mov	r3, r7
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	785b      	ldrb	r3, [r3, #1]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d164      	bne.n	80084be <USB_EPStartXfer+0x4ba>
 80083f4:	1d3b      	adds	r3, r7, #4
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083fa:	1d3b      	adds	r3, r7, #4
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008402:	b29b      	uxth	r3, r3
 8008404:	461a      	mov	r2, r3
 8008406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008408:	4413      	add	r3, r2
 800840a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800840c:	463b      	mov	r3, r7
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	011a      	lsls	r2, r3, #4
 8008414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008416:	4413      	add	r3, r2
 8008418:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800841c:	64bb      	str	r3, [r7, #72]	; 0x48
 800841e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008422:	2b00      	cmp	r3, #0
 8008424:	d112      	bne.n	800844c <USB_EPStartXfer+0x448>
 8008426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008428:	881b      	ldrh	r3, [r3, #0]
 800842a:	b29b      	uxth	r3, r3
 800842c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008430:	b29a      	uxth	r2, r3
 8008432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008434:	801a      	strh	r2, [r3, #0]
 8008436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008438:	881b      	ldrh	r3, [r3, #0]
 800843a:	b29b      	uxth	r3, r3
 800843c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008444:	b29a      	uxth	r2, r3
 8008446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008448:	801a      	strh	r2, [r3, #0]
 800844a:	e057      	b.n	80084fc <USB_EPStartXfer+0x4f8>
 800844c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008450:	2b3e      	cmp	r3, #62	; 0x3e
 8008452:	d817      	bhi.n	8008484 <USB_EPStartXfer+0x480>
 8008454:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008458:	085b      	lsrs	r3, r3, #1
 800845a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800845e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008462:	f003 0301 	and.w	r3, r3, #1
 8008466:	2b00      	cmp	r3, #0
 8008468:	d004      	beq.n	8008474 <USB_EPStartXfer+0x470>
 800846a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800846e:	3301      	adds	r3, #1
 8008470:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008474:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008478:	b29b      	uxth	r3, r3
 800847a:	029b      	lsls	r3, r3, #10
 800847c:	b29a      	uxth	r2, r3
 800847e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008480:	801a      	strh	r2, [r3, #0]
 8008482:	e03b      	b.n	80084fc <USB_EPStartXfer+0x4f8>
 8008484:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008488:	095b      	lsrs	r3, r3, #5
 800848a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800848e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008492:	f003 031f 	and.w	r3, r3, #31
 8008496:	2b00      	cmp	r3, #0
 8008498:	d104      	bne.n	80084a4 <USB_EPStartXfer+0x4a0>
 800849a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800849e:	3b01      	subs	r3, #1
 80084a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80084a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	029b      	lsls	r3, r3, #10
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084ba:	801a      	strh	r2, [r3, #0]
 80084bc:	e01e      	b.n	80084fc <USB_EPStartXfer+0x4f8>
 80084be:	463b      	mov	r3, r7
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	785b      	ldrb	r3, [r3, #1]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d119      	bne.n	80084fc <USB_EPStartXfer+0x4f8>
 80084c8:	1d3b      	adds	r3, r7, #4
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	657b      	str	r3, [r7, #84]	; 0x54
 80084ce:	1d3b      	adds	r3, r7, #4
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	461a      	mov	r2, r3
 80084da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084dc:	4413      	add	r3, r2
 80084de:	657b      	str	r3, [r7, #84]	; 0x54
 80084e0:	463b      	mov	r3, r7
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	011a      	lsls	r2, r3, #4
 80084e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084ea:	4413      	add	r3, r2
 80084ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80084f0:	653b      	str	r3, [r7, #80]	; 0x50
 80084f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80084fc:	463b      	mov	r3, r7
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	891b      	ldrh	r3, [r3, #8]
 8008502:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008506:	463b      	mov	r3, r7
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	6959      	ldr	r1, [r3, #20]
 800850c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008510:	b29b      	uxth	r3, r3
 8008512:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008516:	1d38      	adds	r0, r7, #4
 8008518:	6800      	ldr	r0, [r0, #0]
 800851a:	f000 ffd1 	bl	80094c0 <USB_WritePMA>
            ep->xfer_buff += len;
 800851e:	463b      	mov	r3, r7
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	695a      	ldr	r2, [r3, #20]
 8008524:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008528:	441a      	add	r2, r3
 800852a:	463b      	mov	r3, r7
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008530:	463b      	mov	r3, r7
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	6a1a      	ldr	r2, [r3, #32]
 8008536:	463b      	mov	r3, r7
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	429a      	cmp	r2, r3
 800853e:	d909      	bls.n	8008554 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8008540:	463b      	mov	r3, r7
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	6a1a      	ldr	r2, [r3, #32]
 8008546:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800854a:	1ad2      	subs	r2, r2, r3
 800854c:	463b      	mov	r3, r7
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	621a      	str	r2, [r3, #32]
 8008552:	e008      	b.n	8008566 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8008554:	463b      	mov	r3, r7
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800855e:	463b      	mov	r3, r7
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2200      	movs	r2, #0
 8008564:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008566:	1d3b      	adds	r3, r7, #4
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	647b      	str	r3, [r7, #68]	; 0x44
 800856c:	463b      	mov	r3, r7
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	785b      	ldrb	r3, [r3, #1]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d164      	bne.n	8008640 <USB_EPStartXfer+0x63c>
 8008576:	1d3b      	adds	r3, r7, #4
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800857c:	1d3b      	adds	r3, r7, #4
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008584:	b29b      	uxth	r3, r3
 8008586:	461a      	mov	r2, r3
 8008588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800858a:	4413      	add	r3, r2
 800858c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800858e:	463b      	mov	r3, r7
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	011a      	lsls	r2, r3, #4
 8008596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008598:	4413      	add	r3, r2
 800859a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800859e:	63bb      	str	r3, [r7, #56]	; 0x38
 80085a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d112      	bne.n	80085ce <USB_EPStartXfer+0x5ca>
 80085a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085aa:	881b      	ldrh	r3, [r3, #0]
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b6:	801a      	strh	r2, [r3, #0]
 80085b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ba:	881b      	ldrh	r3, [r3, #0]
 80085bc:	b29b      	uxth	r3, r3
 80085be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085c6:	b29a      	uxth	r2, r3
 80085c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ca:	801a      	strh	r2, [r3, #0]
 80085cc:	e054      	b.n	8008678 <USB_EPStartXfer+0x674>
 80085ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085d2:	2b3e      	cmp	r3, #62	; 0x3e
 80085d4:	d817      	bhi.n	8008606 <USB_EPStartXfer+0x602>
 80085d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085da:	085b      	lsrs	r3, r3, #1
 80085dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80085e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085e4:	f003 0301 	and.w	r3, r3, #1
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d004      	beq.n	80085f6 <USB_EPStartXfer+0x5f2>
 80085ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80085f0:	3301      	adds	r3, #1
 80085f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80085f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	029b      	lsls	r3, r3, #10
 80085fe:	b29a      	uxth	r2, r3
 8008600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008602:	801a      	strh	r2, [r3, #0]
 8008604:	e038      	b.n	8008678 <USB_EPStartXfer+0x674>
 8008606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800860a:	095b      	lsrs	r3, r3, #5
 800860c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008610:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008614:	f003 031f 	and.w	r3, r3, #31
 8008618:	2b00      	cmp	r3, #0
 800861a:	d104      	bne.n	8008626 <USB_EPStartXfer+0x622>
 800861c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008620:	3b01      	subs	r3, #1
 8008622:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008626:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800862a:	b29b      	uxth	r3, r3
 800862c:	029b      	lsls	r3, r3, #10
 800862e:	b29b      	uxth	r3, r3
 8008630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008638:	b29a      	uxth	r2, r3
 800863a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863c:	801a      	strh	r2, [r3, #0]
 800863e:	e01b      	b.n	8008678 <USB_EPStartXfer+0x674>
 8008640:	463b      	mov	r3, r7
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	785b      	ldrb	r3, [r3, #1]
 8008646:	2b01      	cmp	r3, #1
 8008648:	d116      	bne.n	8008678 <USB_EPStartXfer+0x674>
 800864a:	1d3b      	adds	r3, r7, #4
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008652:	b29b      	uxth	r3, r3
 8008654:	461a      	mov	r2, r3
 8008656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008658:	4413      	add	r3, r2
 800865a:	647b      	str	r3, [r7, #68]	; 0x44
 800865c:	463b      	mov	r3, r7
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	011a      	lsls	r2, r3, #4
 8008664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008666:	4413      	add	r3, r2
 8008668:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800866c:	643b      	str	r3, [r7, #64]	; 0x40
 800866e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008672:	b29a      	uxth	r2, r3
 8008674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008676:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008678:	463b      	mov	r3, r7
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	895b      	ldrh	r3, [r3, #10]
 800867e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008682:	463b      	mov	r3, r7
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	6959      	ldr	r1, [r3, #20]
 8008688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800868c:	b29b      	uxth	r3, r3
 800868e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008692:	1d38      	adds	r0, r7, #4
 8008694:	6800      	ldr	r0, [r0, #0]
 8008696:	f000 ff13 	bl	80094c0 <USB_WritePMA>
 800869a:	e1e2      	b.n	8008a62 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800869c:	463b      	mov	r3, r7
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	6a1b      	ldr	r3, [r3, #32]
 80086a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80086a6:	1d3b      	adds	r3, r7, #4
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	463b      	mov	r3, r7
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4413      	add	r3, r2
 80086b4:	881b      	ldrh	r3, [r3, #0]
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80086bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086c0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80086c4:	1d3b      	adds	r3, r7, #4
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	463b      	mov	r3, r7
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	441a      	add	r2, r3
 80086d2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80086d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80086ea:	1d3b      	adds	r3, r7, #4
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	663b      	str	r3, [r7, #96]	; 0x60
 80086f0:	1d3b      	adds	r3, r7, #4
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	461a      	mov	r2, r3
 80086fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086fe:	4413      	add	r3, r2
 8008700:	663b      	str	r3, [r7, #96]	; 0x60
 8008702:	463b      	mov	r3, r7
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	011a      	lsls	r2, r3, #4
 800870a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800870c:	4413      	add	r3, r2
 800870e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008712:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008714:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008718:	b29a      	uxth	r2, r3
 800871a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800871c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800871e:	463b      	mov	r3, r7
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	891b      	ldrh	r3, [r3, #8]
 8008724:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008728:	463b      	mov	r3, r7
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6959      	ldr	r1, [r3, #20]
 800872e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008732:	b29b      	uxth	r3, r3
 8008734:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008738:	1d38      	adds	r0, r7, #4
 800873a:	6800      	ldr	r0, [r0, #0]
 800873c:	f000 fec0 	bl	80094c0 <USB_WritePMA>
 8008740:	e18f      	b.n	8008a62 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008742:	1d3b      	adds	r3, r7, #4
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	463b      	mov	r3, r7
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	4413      	add	r3, r2
 8008750:	881b      	ldrh	r3, [r3, #0]
 8008752:	b29b      	uxth	r3, r3
 8008754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008758:	2b00      	cmp	r3, #0
 800875a:	f000 808f 	beq.w	800887c <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800875e:	1d3b      	adds	r3, r7, #4
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	67bb      	str	r3, [r7, #120]	; 0x78
 8008764:	463b      	mov	r3, r7
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	785b      	ldrb	r3, [r3, #1]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d164      	bne.n	8008838 <USB_EPStartXfer+0x834>
 800876e:	1d3b      	adds	r3, r7, #4
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	673b      	str	r3, [r7, #112]	; 0x70
 8008774:	1d3b      	adds	r3, r7, #4
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800877c:	b29b      	uxth	r3, r3
 800877e:	461a      	mov	r2, r3
 8008780:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008782:	4413      	add	r3, r2
 8008784:	673b      	str	r3, [r7, #112]	; 0x70
 8008786:	463b      	mov	r3, r7
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	011a      	lsls	r2, r3, #4
 800878e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008790:	4413      	add	r3, r2
 8008792:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008796:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008798:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800879c:	2b00      	cmp	r3, #0
 800879e:	d112      	bne.n	80087c6 <USB_EPStartXfer+0x7c2>
 80087a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a2:	881b      	ldrh	r3, [r3, #0]
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ae:	801a      	strh	r2, [r3, #0]
 80087b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087b2:	881b      	ldrh	r3, [r3, #0]
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087be:	b29a      	uxth	r2, r3
 80087c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087c2:	801a      	strh	r2, [r3, #0]
 80087c4:	e054      	b.n	8008870 <USB_EPStartXfer+0x86c>
 80087c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087ca:	2b3e      	cmp	r3, #62	; 0x3e
 80087cc:	d817      	bhi.n	80087fe <USB_EPStartXfer+0x7fa>
 80087ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087d2:	085b      	lsrs	r3, r3, #1
 80087d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80087d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087dc:	f003 0301 	and.w	r3, r3, #1
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d004      	beq.n	80087ee <USB_EPStartXfer+0x7ea>
 80087e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087e8:	3301      	adds	r3, #1
 80087ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80087ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	029b      	lsls	r3, r3, #10
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087fa:	801a      	strh	r2, [r3, #0]
 80087fc:	e038      	b.n	8008870 <USB_EPStartXfer+0x86c>
 80087fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008802:	095b      	lsrs	r3, r3, #5
 8008804:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008808:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800880c:	f003 031f 	and.w	r3, r3, #31
 8008810:	2b00      	cmp	r3, #0
 8008812:	d104      	bne.n	800881e <USB_EPStartXfer+0x81a>
 8008814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008818:	3b01      	subs	r3, #1
 800881a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800881e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008822:	b29b      	uxth	r3, r3
 8008824:	029b      	lsls	r3, r3, #10
 8008826:	b29b      	uxth	r3, r3
 8008828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800882c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008830:	b29a      	uxth	r2, r3
 8008832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008834:	801a      	strh	r2, [r3, #0]
 8008836:	e01b      	b.n	8008870 <USB_EPStartXfer+0x86c>
 8008838:	463b      	mov	r3, r7
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	785b      	ldrb	r3, [r3, #1]
 800883e:	2b01      	cmp	r3, #1
 8008840:	d116      	bne.n	8008870 <USB_EPStartXfer+0x86c>
 8008842:	1d3b      	adds	r3, r7, #4
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800884a:	b29b      	uxth	r3, r3
 800884c:	461a      	mov	r2, r3
 800884e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008850:	4413      	add	r3, r2
 8008852:	67bb      	str	r3, [r7, #120]	; 0x78
 8008854:	463b      	mov	r3, r7
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	011a      	lsls	r2, r3, #4
 800885c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800885e:	4413      	add	r3, r2
 8008860:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008864:	677b      	str	r3, [r7, #116]	; 0x74
 8008866:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800886a:	b29a      	uxth	r2, r3
 800886c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800886e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008870:	463b      	mov	r3, r7
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	895b      	ldrh	r3, [r3, #10]
 8008876:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800887a:	e097      	b.n	80089ac <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800887c:	463b      	mov	r3, r7
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	785b      	ldrb	r3, [r3, #1]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d168      	bne.n	8008958 <USB_EPStartXfer+0x954>
 8008886:	1d3b      	adds	r3, r7, #4
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800888e:	1d3b      	adds	r3, r7, #4
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008896:	b29b      	uxth	r3, r3
 8008898:	461a      	mov	r2, r3
 800889a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800889e:	4413      	add	r3, r2
 80088a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088a4:	463b      	mov	r3, r7
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	011a      	lsls	r2, r3, #4
 80088ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80088b0:	4413      	add	r3, r2
 80088b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80088b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80088b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d112      	bne.n	80088e6 <USB_EPStartXfer+0x8e2>
 80088c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088c2:	881b      	ldrh	r3, [r3, #0]
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088ce:	801a      	strh	r2, [r3, #0]
 80088d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088d2:	881b      	ldrh	r3, [r3, #0]
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088de:	b29a      	uxth	r2, r3
 80088e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088e2:	801a      	strh	r2, [r3, #0]
 80088e4:	e05d      	b.n	80089a2 <USB_EPStartXfer+0x99e>
 80088e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088ea:	2b3e      	cmp	r3, #62	; 0x3e
 80088ec:	d817      	bhi.n	800891e <USB_EPStartXfer+0x91a>
 80088ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088f2:	085b      	lsrs	r3, r3, #1
 80088f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80088f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088fc:	f003 0301 	and.w	r3, r3, #1
 8008900:	2b00      	cmp	r3, #0
 8008902:	d004      	beq.n	800890e <USB_EPStartXfer+0x90a>
 8008904:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008908:	3301      	adds	r3, #1
 800890a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800890e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008912:	b29b      	uxth	r3, r3
 8008914:	029b      	lsls	r3, r3, #10
 8008916:	b29a      	uxth	r2, r3
 8008918:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800891a:	801a      	strh	r2, [r3, #0]
 800891c:	e041      	b.n	80089a2 <USB_EPStartXfer+0x99e>
 800891e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008922:	095b      	lsrs	r3, r3, #5
 8008924:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008928:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800892c:	f003 031f 	and.w	r3, r3, #31
 8008930:	2b00      	cmp	r3, #0
 8008932:	d104      	bne.n	800893e <USB_EPStartXfer+0x93a>
 8008934:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008938:	3b01      	subs	r3, #1
 800893a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800893e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008942:	b29b      	uxth	r3, r3
 8008944:	029b      	lsls	r3, r3, #10
 8008946:	b29b      	uxth	r3, r3
 8008948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800894c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008950:	b29a      	uxth	r2, r3
 8008952:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008954:	801a      	strh	r2, [r3, #0]
 8008956:	e024      	b.n	80089a2 <USB_EPStartXfer+0x99e>
 8008958:	463b      	mov	r3, r7
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	785b      	ldrb	r3, [r3, #1]
 800895e:	2b01      	cmp	r3, #1
 8008960:	d11f      	bne.n	80089a2 <USB_EPStartXfer+0x99e>
 8008962:	1d3b      	adds	r3, r7, #4
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800896a:	1d3b      	adds	r3, r7, #4
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008972:	b29b      	uxth	r3, r3
 8008974:	461a      	mov	r2, r3
 8008976:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800897a:	4413      	add	r3, r2
 800897c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008980:	463b      	mov	r3, r7
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	011a      	lsls	r2, r3, #4
 8008988:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800898c:	4413      	add	r3, r2
 800898e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008992:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800899a:	b29a      	uxth	r2, r3
 800899c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089a0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80089a2:	463b      	mov	r3, r7
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	891b      	ldrh	r3, [r3, #8]
 80089a8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089ac:	463b      	mov	r3, r7
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6959      	ldr	r1, [r3, #20]
 80089b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80089bc:	1d38      	adds	r0, r7, #4
 80089be:	6800      	ldr	r0, [r0, #0]
 80089c0:	f000 fd7e 	bl	80094c0 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80089c4:	463b      	mov	r3, r7
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	785b      	ldrb	r3, [r3, #1]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d122      	bne.n	8008a14 <USB_EPStartXfer+0xa10>
 80089ce:	1d3b      	adds	r3, r7, #4
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	463b      	mov	r3, r7
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	4413      	add	r3, r2
 80089dc:	881b      	ldrh	r3, [r3, #0]
 80089de:	b29b      	uxth	r3, r3
 80089e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089e8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80089ec:	1d3b      	adds	r3, r7, #4
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	463b      	mov	r3, r7
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	441a      	add	r2, r3
 80089fa:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80089fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	8013      	strh	r3, [r2, #0]
 8008a12:	e026      	b.n	8008a62 <USB_EPStartXfer+0xa5e>
 8008a14:	463b      	mov	r3, r7
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	785b      	ldrb	r3, [r3, #1]
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d121      	bne.n	8008a62 <USB_EPStartXfer+0xa5e>
 8008a1e:	1d3b      	adds	r3, r7, #4
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	463b      	mov	r3, r7
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4413      	add	r3, r2
 8008a2c:	881b      	ldrh	r3, [r3, #0]
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a38:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8008a3c:	1d3b      	adds	r3, r7, #4
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	463b      	mov	r3, r7
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	441a      	add	r2, r3
 8008a4a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8008a4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008a62:	1d3b      	adds	r3, r7, #4
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	463b      	mov	r3, r7
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4413      	add	r3, r2
 8008a70:	881b      	ldrh	r3, [r3, #0]
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	f107 020e 	add.w	r2, r7, #14
 8008a78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a80:	8013      	strh	r3, [r2, #0]
 8008a82:	f107 030e 	add.w	r3, r7, #14
 8008a86:	f107 020e 	add.w	r2, r7, #14
 8008a8a:	8812      	ldrh	r2, [r2, #0]
 8008a8c:	f082 0210 	eor.w	r2, r2, #16
 8008a90:	801a      	strh	r2, [r3, #0]
 8008a92:	f107 030e 	add.w	r3, r7, #14
 8008a96:	f107 020e 	add.w	r2, r7, #14
 8008a9a:	8812      	ldrh	r2, [r2, #0]
 8008a9c:	f082 0220 	eor.w	r2, r2, #32
 8008aa0:	801a      	strh	r2, [r3, #0]
 8008aa2:	1d3b      	adds	r3, r7, #4
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	463b      	mov	r3, r7
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	441a      	add	r2, r3
 8008ab0:	f107 030e 	add.w	r3, r7, #14
 8008ab4:	881b      	ldrh	r3, [r3, #0]
 8008ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	8013      	strh	r3, [r2, #0]
 8008aca:	e3b5      	b.n	8009238 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008acc:	463b      	mov	r3, r7
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	7b1b      	ldrb	r3, [r3, #12]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f040 8090 	bne.w	8008bf8 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008ad8:	463b      	mov	r3, r7
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	699a      	ldr	r2, [r3, #24]
 8008ade:	463b      	mov	r3, r7
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d90e      	bls.n	8008b06 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8008ae8:	463b      	mov	r3, r7
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8008af2:	463b      	mov	r3, r7
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	699a      	ldr	r2, [r3, #24]
 8008af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008afc:	1ad2      	subs	r2, r2, r3
 8008afe:	463b      	mov	r3, r7
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	619a      	str	r2, [r3, #24]
 8008b04:	e008      	b.n	8008b18 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8008b06:	463b      	mov	r3, r7
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	699b      	ldr	r3, [r3, #24]
 8008b0c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8008b10:	463b      	mov	r3, r7
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2200      	movs	r2, #0
 8008b16:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008b18:	1d3b      	adds	r3, r7, #4
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008b20:	1d3b      	adds	r3, r7, #4
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008b30:	4413      	add	r3, r2
 8008b32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008b36:	463b      	mov	r3, r7
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	011a      	lsls	r2, r3, #4
 8008b3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008b42:	4413      	add	r3, r2
 8008b44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d116      	bne.n	8008b82 <USB_EPStartXfer+0xb7e>
 8008b54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b58:	881b      	ldrh	r3, [r3, #0]
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b66:	801a      	strh	r2, [r3, #0]
 8008b68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b6c:	881b      	ldrh	r3, [r3, #0]
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b78:	b29a      	uxth	r2, r3
 8008b7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b7e:	801a      	strh	r2, [r3, #0]
 8008b80:	e32c      	b.n	80091dc <USB_EPStartXfer+0x11d8>
 8008b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b86:	2b3e      	cmp	r3, #62	; 0x3e
 8008b88:	d818      	bhi.n	8008bbc <USB_EPStartXfer+0xbb8>
 8008b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b8e:	085b      	lsrs	r3, r3, #1
 8008b90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b98:	f003 0301 	and.w	r3, r3, #1
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d004      	beq.n	8008baa <USB_EPStartXfer+0xba6>
 8008ba0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008baa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	029b      	lsls	r3, r3, #10
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008bb8:	801a      	strh	r2, [r3, #0]
 8008bba:	e30f      	b.n	80091dc <USB_EPStartXfer+0x11d8>
 8008bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bc0:	095b      	lsrs	r3, r3, #5
 8008bc2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bca:	f003 031f 	and.w	r3, r3, #31
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d104      	bne.n	8008bdc <USB_EPStartXfer+0xbd8>
 8008bd2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008bdc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	029b      	lsls	r3, r3, #10
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008bf4:	801a      	strh	r2, [r3, #0]
 8008bf6:	e2f1      	b.n	80091dc <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008bf8:	463b      	mov	r3, r7
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	78db      	ldrb	r3, [r3, #3]
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	f040 818f 	bne.w	8008f22 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008c04:	463b      	mov	r3, r7
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	785b      	ldrb	r3, [r3, #1]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d175      	bne.n	8008cfa <USB_EPStartXfer+0xcf6>
 8008c0e:	1d3b      	adds	r3, r7, #4
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c16:	1d3b      	adds	r3, r7, #4
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	461a      	mov	r2, r3
 8008c22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008c26:	4413      	add	r3, r2
 8008c28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c2c:	463b      	mov	r3, r7
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	011a      	lsls	r2, r3, #4
 8008c34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008c38:	4413      	add	r3, r2
 8008c3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c42:	463b      	mov	r3, r7
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	691b      	ldr	r3, [r3, #16]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d116      	bne.n	8008c7a <USB_EPStartXfer+0xc76>
 8008c4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c50:	881b      	ldrh	r3, [r3, #0]
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c5e:	801a      	strh	r2, [r3, #0]
 8008c60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c64:	881b      	ldrh	r3, [r3, #0]
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c70:	b29a      	uxth	r2, r3
 8008c72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c76:	801a      	strh	r2, [r3, #0]
 8008c78:	e065      	b.n	8008d46 <USB_EPStartXfer+0xd42>
 8008c7a:	463b      	mov	r3, r7
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	2b3e      	cmp	r3, #62	; 0x3e
 8008c82:	d81a      	bhi.n	8008cba <USB_EPStartXfer+0xcb6>
 8008c84:	463b      	mov	r3, r7
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	085b      	lsrs	r3, r3, #1
 8008c8c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c90:	463b      	mov	r3, r7
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	f003 0301 	and.w	r3, r3, #1
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d004      	beq.n	8008ca8 <USB_EPStartXfer+0xca4>
 8008c9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008ca8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	029b      	lsls	r3, r3, #10
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008cb6:	801a      	strh	r2, [r3, #0]
 8008cb8:	e045      	b.n	8008d46 <USB_EPStartXfer+0xd42>
 8008cba:	463b      	mov	r3, r7
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	095b      	lsrs	r3, r3, #5
 8008cc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008cc6:	463b      	mov	r3, r7
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	f003 031f 	and.w	r3, r3, #31
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d104      	bne.n	8008cde <USB_EPStartXfer+0xcda>
 8008cd4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008cde:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	029b      	lsls	r3, r3, #10
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cf0:	b29a      	uxth	r2, r3
 8008cf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008cf6:	801a      	strh	r2, [r3, #0]
 8008cf8:	e025      	b.n	8008d46 <USB_EPStartXfer+0xd42>
 8008cfa:	463b      	mov	r3, r7
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	785b      	ldrb	r3, [r3, #1]
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d120      	bne.n	8008d46 <USB_EPStartXfer+0xd42>
 8008d04:	1d3b      	adds	r3, r7, #4
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d0c:	1d3b      	adds	r3, r7, #4
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	461a      	mov	r2, r3
 8008d18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d1c:	4413      	add	r3, r2
 8008d1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d22:	463b      	mov	r3, r7
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	011a      	lsls	r2, r3, #4
 8008d2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d2e:	4413      	add	r3, r2
 8008d30:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d38:	463b      	mov	r3, r7
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	691b      	ldr	r3, [r3, #16]
 8008d3e:	b29a      	uxth	r2, r3
 8008d40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008d44:	801a      	strh	r2, [r3, #0]
 8008d46:	1d3b      	adds	r3, r7, #4
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008d4e:	463b      	mov	r3, r7
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	785b      	ldrb	r3, [r3, #1]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d175      	bne.n	8008e44 <USB_EPStartXfer+0xe40>
 8008d58:	1d3b      	adds	r3, r7, #4
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d60:	1d3b      	adds	r3, r7, #4
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d70:	4413      	add	r3, r2
 8008d72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d76:	463b      	mov	r3, r7
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	011a      	lsls	r2, r3, #4
 8008d7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d82:	4413      	add	r3, r2
 8008d84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008d88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008d8c:	463b      	mov	r3, r7
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d116      	bne.n	8008dc4 <USB_EPStartXfer+0xdc0>
 8008d96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d9a:	881b      	ldrh	r3, [r3, #0]
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008da2:	b29a      	uxth	r2, r3
 8008da4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008da8:	801a      	strh	r2, [r3, #0]
 8008daa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008dae:	881b      	ldrh	r3, [r3, #0]
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dba:	b29a      	uxth	r2, r3
 8008dbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008dc0:	801a      	strh	r2, [r3, #0]
 8008dc2:	e061      	b.n	8008e88 <USB_EPStartXfer+0xe84>
 8008dc4:	463b      	mov	r3, r7
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	2b3e      	cmp	r3, #62	; 0x3e
 8008dcc:	d81a      	bhi.n	8008e04 <USB_EPStartXfer+0xe00>
 8008dce:	463b      	mov	r3, r7
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	085b      	lsrs	r3, r3, #1
 8008dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008dda:	463b      	mov	r3, r7
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	691b      	ldr	r3, [r3, #16]
 8008de0:	f003 0301 	and.w	r3, r3, #1
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d004      	beq.n	8008df2 <USB_EPStartXfer+0xdee>
 8008de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dec:	3301      	adds	r3, #1
 8008dee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	029b      	lsls	r3, r3, #10
 8008dfa:	b29a      	uxth	r2, r3
 8008dfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e00:	801a      	strh	r2, [r3, #0]
 8008e02:	e041      	b.n	8008e88 <USB_EPStartXfer+0xe84>
 8008e04:	463b      	mov	r3, r7
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	095b      	lsrs	r3, r3, #5
 8008e0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e10:	463b      	mov	r3, r7
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	f003 031f 	and.w	r3, r3, #31
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d104      	bne.n	8008e28 <USB_EPStartXfer+0xe24>
 8008e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e22:	3b01      	subs	r3, #1
 8008e24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	029b      	lsls	r3, r3, #10
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e40:	801a      	strh	r2, [r3, #0]
 8008e42:	e021      	b.n	8008e88 <USB_EPStartXfer+0xe84>
 8008e44:	463b      	mov	r3, r7
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	785b      	ldrb	r3, [r3, #1]
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d11c      	bne.n	8008e88 <USB_EPStartXfer+0xe84>
 8008e4e:	1d3b      	adds	r3, r7, #4
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	461a      	mov	r2, r3
 8008e5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e5e:	4413      	add	r3, r2
 8008e60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e64:	463b      	mov	r3, r7
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	011a      	lsls	r2, r3, #4
 8008e6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e70:	4413      	add	r3, r2
 8008e72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008e76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008e7a:	463b      	mov	r3, r7
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	b29a      	uxth	r2, r3
 8008e82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008e86:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008e88:	463b      	mov	r3, r7
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	69db      	ldr	r3, [r3, #28]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f000 81a4 	beq.w	80091dc <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008e94:	1d3b      	adds	r3, r7, #4
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	463b      	mov	r3, r7
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	4413      	add	r3, r2
 8008ea2:	881b      	ldrh	r3, [r3, #0]
 8008ea4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008ea8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008eac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d005      	beq.n	8008ec0 <USB_EPStartXfer+0xebc>
 8008eb4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10d      	bne.n	8008edc <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008ec0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f040 8187 	bne.w	80091dc <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008ece:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f040 8180 	bne.w	80091dc <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008edc:	1d3b      	adds	r3, r7, #4
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	463b      	mov	r3, r7
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	4413      	add	r3, r2
 8008eea:	881b      	ldrh	r3, [r3, #0]
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ef6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8008efa:	1d3b      	adds	r3, r7, #4
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	463b      	mov	r3, r7
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	441a      	add	r2, r3
 8008f08:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8008f0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	8013      	strh	r3, [r2, #0]
 8008f20:	e15c      	b.n	80091dc <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008f22:	463b      	mov	r3, r7
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	78db      	ldrb	r3, [r3, #3]
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	f040 8155 	bne.w	80091d8 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008f2e:	463b      	mov	r3, r7
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	699a      	ldr	r2, [r3, #24]
 8008f34:	463b      	mov	r3, r7
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d90e      	bls.n	8008f5c <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8008f3e:	463b      	mov	r3, r7
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	691b      	ldr	r3, [r3, #16]
 8008f44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8008f48:	463b      	mov	r3, r7
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	699a      	ldr	r2, [r3, #24]
 8008f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f52:	1ad2      	subs	r2, r2, r3
 8008f54:	463b      	mov	r3, r7
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	619a      	str	r2, [r3, #24]
 8008f5a:	e008      	b.n	8008f6e <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8008f5c:	463b      	mov	r3, r7
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	699b      	ldr	r3, [r3, #24]
 8008f62:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8008f66:	463b      	mov	r3, r7
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008f6e:	463b      	mov	r3, r7
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	785b      	ldrb	r3, [r3, #1]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d16f      	bne.n	8009058 <USB_EPStartXfer+0x1054>
 8008f78:	1d3b      	adds	r3, r7, #4
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f80:	1d3b      	adds	r3, r7, #4
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008f90:	4413      	add	r3, r2
 8008f92:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f96:	463b      	mov	r3, r7
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	011a      	lsls	r2, r3, #4
 8008f9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008fa2:	4413      	add	r3, r2
 8008fa4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008fa8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008fac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d116      	bne.n	8008fe2 <USB_EPStartXfer+0xfde>
 8008fb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008fb8:	881b      	ldrh	r3, [r3, #0]
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008fc6:	801a      	strh	r2, [r3, #0]
 8008fc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008fcc:	881b      	ldrh	r3, [r3, #0]
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008fde:	801a      	strh	r2, [r3, #0]
 8008fe0:	e05f      	b.n	80090a2 <USB_EPStartXfer+0x109e>
 8008fe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008fe6:	2b3e      	cmp	r3, #62	; 0x3e
 8008fe8:	d818      	bhi.n	800901c <USB_EPStartXfer+0x1018>
 8008fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008fee:	085b      	lsrs	r3, r3, #1
 8008ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ff8:	f003 0301 	and.w	r3, r3, #1
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d004      	beq.n	800900a <USB_EPStartXfer+0x1006>
 8009000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009004:	3301      	adds	r3, #1
 8009006:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800900a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800900e:	b29b      	uxth	r3, r3
 8009010:	029b      	lsls	r3, r3, #10
 8009012:	b29a      	uxth	r2, r3
 8009014:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009018:	801a      	strh	r2, [r3, #0]
 800901a:	e042      	b.n	80090a2 <USB_EPStartXfer+0x109e>
 800901c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009020:	095b      	lsrs	r3, r3, #5
 8009022:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009026:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800902a:	f003 031f 	and.w	r3, r3, #31
 800902e:	2b00      	cmp	r3, #0
 8009030:	d104      	bne.n	800903c <USB_EPStartXfer+0x1038>
 8009032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009036:	3b01      	subs	r3, #1
 8009038:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800903c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009040:	b29b      	uxth	r3, r3
 8009042:	029b      	lsls	r3, r3, #10
 8009044:	b29b      	uxth	r3, r3
 8009046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800904a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800904e:	b29a      	uxth	r2, r3
 8009050:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009054:	801a      	strh	r2, [r3, #0]
 8009056:	e024      	b.n	80090a2 <USB_EPStartXfer+0x109e>
 8009058:	463b      	mov	r3, r7
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	785b      	ldrb	r3, [r3, #1]
 800905e:	2b01      	cmp	r3, #1
 8009060:	d11f      	bne.n	80090a2 <USB_EPStartXfer+0x109e>
 8009062:	1d3b      	adds	r3, r7, #4
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800906a:	1d3b      	adds	r3, r7, #4
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009072:	b29b      	uxth	r3, r3
 8009074:	461a      	mov	r2, r3
 8009076:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800907a:	4413      	add	r3, r2
 800907c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009080:	463b      	mov	r3, r7
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	011a      	lsls	r2, r3, #4
 8009088:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800908c:	4413      	add	r3, r2
 800908e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009092:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800909a:	b29a      	uxth	r2, r3
 800909c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80090a0:	801a      	strh	r2, [r3, #0]
 80090a2:	1d3b      	adds	r3, r7, #4
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80090aa:	463b      	mov	r3, r7
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	785b      	ldrb	r3, [r3, #1]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d16f      	bne.n	8009194 <USB_EPStartXfer+0x1190>
 80090b4:	1d3b      	adds	r3, r7, #4
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80090bc:	1d3b      	adds	r3, r7, #4
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	461a      	mov	r2, r3
 80090c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80090cc:	4413      	add	r3, r2
 80090ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80090d2:	463b      	mov	r3, r7
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	011a      	lsls	r2, r3, #4
 80090da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80090de:	4413      	add	r3, r2
 80090e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80090e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80090e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d116      	bne.n	800911e <USB_EPStartXfer+0x111a>
 80090f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80090f4:	881b      	ldrh	r3, [r3, #0]
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80090fc:	b29a      	uxth	r2, r3
 80090fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009102:	801a      	strh	r2, [r3, #0]
 8009104:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009108:	881b      	ldrh	r3, [r3, #0]
 800910a:	b29b      	uxth	r3, r3
 800910c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009114:	b29a      	uxth	r2, r3
 8009116:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800911a:	801a      	strh	r2, [r3, #0]
 800911c:	e05e      	b.n	80091dc <USB_EPStartXfer+0x11d8>
 800911e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009122:	2b3e      	cmp	r3, #62	; 0x3e
 8009124:	d818      	bhi.n	8009158 <USB_EPStartXfer+0x1154>
 8009126:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800912a:	085b      	lsrs	r3, r3, #1
 800912c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009130:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009134:	f003 0301 	and.w	r3, r3, #1
 8009138:	2b00      	cmp	r3, #0
 800913a:	d004      	beq.n	8009146 <USB_EPStartXfer+0x1142>
 800913c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009140:	3301      	adds	r3, #1
 8009142:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800914a:	b29b      	uxth	r3, r3
 800914c:	029b      	lsls	r3, r3, #10
 800914e:	b29a      	uxth	r2, r3
 8009150:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009154:	801a      	strh	r2, [r3, #0]
 8009156:	e041      	b.n	80091dc <USB_EPStartXfer+0x11d8>
 8009158:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800915c:	095b      	lsrs	r3, r3, #5
 800915e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009162:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009166:	f003 031f 	and.w	r3, r3, #31
 800916a:	2b00      	cmp	r3, #0
 800916c:	d104      	bne.n	8009178 <USB_EPStartXfer+0x1174>
 800916e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009172:	3b01      	subs	r3, #1
 8009174:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009178:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800917c:	b29b      	uxth	r3, r3
 800917e:	029b      	lsls	r3, r3, #10
 8009180:	b29b      	uxth	r3, r3
 8009182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800918a:	b29a      	uxth	r2, r3
 800918c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009190:	801a      	strh	r2, [r3, #0]
 8009192:	e023      	b.n	80091dc <USB_EPStartXfer+0x11d8>
 8009194:	463b      	mov	r3, r7
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	785b      	ldrb	r3, [r3, #1]
 800919a:	2b01      	cmp	r3, #1
 800919c:	d11e      	bne.n	80091dc <USB_EPStartXfer+0x11d8>
 800919e:	1d3b      	adds	r3, r7, #4
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	461a      	mov	r2, r3
 80091aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091ae:	4413      	add	r3, r2
 80091b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80091b4:	463b      	mov	r3, r7
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	011a      	lsls	r2, r3, #4
 80091bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091c0:	4413      	add	r3, r2
 80091c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80091c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80091ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80091d4:	801a      	strh	r2, [r3, #0]
 80091d6:	e001      	b.n	80091dc <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	e02e      	b.n	800923a <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80091dc:	1d3b      	adds	r3, r7, #4
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	463b      	mov	r3, r7
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	4413      	add	r3, r2
 80091ea:	881b      	ldrh	r3, [r3, #0]
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091f6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80091fa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80091fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009202:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009206:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800920a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800920e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009212:	1d3b      	adds	r3, r7, #4
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	463b      	mov	r3, r7
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	441a      	add	r2, r3
 8009220:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800922c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009234:	b29b      	uxth	r3, r3
 8009236:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	785b      	ldrb	r3, [r3, #1]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d020      	beq.n	8009298 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	4413      	add	r3, r2
 8009260:	881b      	ldrh	r3, [r3, #0]
 8009262:	b29b      	uxth	r3, r3
 8009264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800926c:	81bb      	strh	r3, [r7, #12]
 800926e:	89bb      	ldrh	r3, [r7, #12]
 8009270:	f083 0310 	eor.w	r3, r3, #16
 8009274:	81bb      	strh	r3, [r7, #12]
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	441a      	add	r2, r3
 8009280:	89bb      	ldrh	r3, [r7, #12]
 8009282:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009286:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800928a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800928e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009292:	b29b      	uxth	r3, r3
 8009294:	8013      	strh	r3, [r2, #0]
 8009296:	e01f      	b.n	80092d8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4413      	add	r3, r2
 80092a2:	881b      	ldrh	r3, [r3, #0]
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ae:	81fb      	strh	r3, [r7, #14]
 80092b0:	89fb      	ldrh	r3, [r7, #14]
 80092b2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80092b6:	81fb      	strh	r3, [r7, #14]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	441a      	add	r2, r3
 80092c2:	89fb      	ldrh	r3, [r7, #14]
 80092c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3714      	adds	r7, #20
 80092de:	46bd      	mov	sp, r7
 80092e0:	bc80      	pop	{r7}
 80092e2:	4770      	bx	lr

080092e4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b087      	sub	sp, #28
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	7b1b      	ldrb	r3, [r3, #12]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f040 809d 	bne.w	8009432 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	785b      	ldrb	r3, [r3, #1]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d04c      	beq.n	800939a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4413      	add	r3, r2
 800930a:	881b      	ldrh	r3, [r3, #0]
 800930c:	823b      	strh	r3, [r7, #16]
 800930e:	8a3b      	ldrh	r3, [r7, #16]
 8009310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009314:	2b00      	cmp	r3, #0
 8009316:	d01b      	beq.n	8009350 <USB_EPClearStall+0x6c>
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	4413      	add	r3, r2
 8009322:	881b      	ldrh	r3, [r3, #0]
 8009324:	b29b      	uxth	r3, r3
 8009326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800932a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800932e:	81fb      	strh	r3, [r7, #14]
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	441a      	add	r2, r3
 800933a:	89fb      	ldrh	r3, [r7, #14]
 800933c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009348:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800934c:	b29b      	uxth	r3, r3
 800934e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	78db      	ldrb	r3, [r3, #3]
 8009354:	2b01      	cmp	r3, #1
 8009356:	d06c      	beq.n	8009432 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	881b      	ldrh	r3, [r3, #0]
 8009364:	b29b      	uxth	r3, r3
 8009366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800936a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800936e:	81bb      	strh	r3, [r7, #12]
 8009370:	89bb      	ldrh	r3, [r7, #12]
 8009372:	f083 0320 	eor.w	r3, r3, #32
 8009376:	81bb      	strh	r3, [r7, #12]
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	441a      	add	r2, r3
 8009382:	89bb      	ldrh	r3, [r7, #12]
 8009384:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009388:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800938c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009394:	b29b      	uxth	r3, r3
 8009396:	8013      	strh	r3, [r2, #0]
 8009398:	e04b      	b.n	8009432 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	4413      	add	r3, r2
 80093a4:	881b      	ldrh	r3, [r3, #0]
 80093a6:	82fb      	strh	r3, [r7, #22]
 80093a8:	8afb      	ldrh	r3, [r7, #22]
 80093aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d01b      	beq.n	80093ea <USB_EPClearStall+0x106>
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	4413      	add	r3, r2
 80093bc:	881b      	ldrh	r3, [r3, #0]
 80093be:	b29b      	uxth	r3, r3
 80093c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093c8:	82bb      	strh	r3, [r7, #20]
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	441a      	add	r2, r3
 80093d4:	8abb      	ldrh	r3, [r7, #20]
 80093d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80093e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	4413      	add	r3, r2
 80093f4:	881b      	ldrh	r3, [r3, #0]
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009400:	827b      	strh	r3, [r7, #18]
 8009402:	8a7b      	ldrh	r3, [r7, #18]
 8009404:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009408:	827b      	strh	r3, [r7, #18]
 800940a:	8a7b      	ldrh	r3, [r7, #18]
 800940c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009410:	827b      	strh	r3, [r7, #18]
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	441a      	add	r2, r3
 800941c:	8a7b      	ldrh	r3, [r7, #18]
 800941e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800942a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800942e:	b29b      	uxth	r3, r3
 8009430:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	371c      	adds	r7, #28
 8009438:	46bd      	mov	sp, r7
 800943a:	bc80      	pop	{r7}
 800943c:	4770      	bx	lr

0800943e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800943e:	b480      	push	{r7}
 8009440:	b083      	sub	sp, #12
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
 8009446:	460b      	mov	r3, r1
 8009448:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800944a:	78fb      	ldrb	r3, [r7, #3]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d103      	bne.n	8009458 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2280      	movs	r2, #128	; 0x80
 8009454:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	370c      	adds	r7, #12
 800945e:	46bd      	mov	sp, r7
 8009460:	bc80      	pop	{r7}
 8009462:	4770      	bx	lr

08009464 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800946c:	2300      	movs	r3, #0
}
 800946e:	4618      	mov	r0, r3
 8009470:	370c      	adds	r7, #12
 8009472:	46bd      	mov	sp, r7
 8009474:	bc80      	pop	{r7}
 8009476:	4770      	bx	lr

08009478 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009480:	2300      	movs	r3, #0
}
 8009482:	4618      	mov	r0, r3
 8009484:	370c      	adds	r7, #12
 8009486:	46bd      	mov	sp, r7
 8009488:	bc80      	pop	{r7}
 800948a:	4770      	bx	lr

0800948c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800948c:	b480      	push	{r7}
 800948e:	b085      	sub	sp, #20
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800949a:	b29b      	uxth	r3, r3
 800949c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800949e:	68fb      	ldr	r3, [r7, #12]
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3714      	adds	r7, #20
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bc80      	pop	{r7}
 80094a8:	4770      	bx	lr

080094aa <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80094aa:	b480      	push	{r7}
 80094ac:	b083      	sub	sp, #12
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	370c      	adds	r7, #12
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bc80      	pop	{r7}
 80094be:	4770      	bx	lr

080094c0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b08d      	sub	sp, #52	; 0x34
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	4611      	mov	r1, r2
 80094cc:	461a      	mov	r2, r3
 80094ce:	460b      	mov	r3, r1
 80094d0:	80fb      	strh	r3, [r7, #6]
 80094d2:	4613      	mov	r3, r2
 80094d4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80094d6:	88bb      	ldrh	r3, [r7, #4]
 80094d8:	3301      	adds	r3, #1
 80094da:	085b      	lsrs	r3, r3, #1
 80094dc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80094e6:	88fb      	ldrh	r3, [r7, #6]
 80094e8:	005a      	lsls	r2, r3, #1
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	4413      	add	r3, r2
 80094ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094f2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80094f4:	6a3b      	ldr	r3, [r7, #32]
 80094f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094f8:	e01e      	b.n	8009538 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80094fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009502:	3301      	adds	r3, #1
 8009504:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	b29b      	uxth	r3, r3
 800950c:	021b      	lsls	r3, r3, #8
 800950e:	b29b      	uxth	r3, r3
 8009510:	461a      	mov	r2, r3
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	4313      	orrs	r3, r2
 8009516:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	b29a      	uxth	r2, r3
 800951c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009522:	3302      	adds	r3, #2
 8009524:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009528:	3302      	adds	r3, #2
 800952a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800952c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952e:	3301      	adds	r3, #1
 8009530:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009534:	3b01      	subs	r3, #1
 8009536:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1dd      	bne.n	80094fa <USB_WritePMA+0x3a>
  }
}
 800953e:	bf00      	nop
 8009540:	bf00      	nop
 8009542:	3734      	adds	r7, #52	; 0x34
 8009544:	46bd      	mov	sp, r7
 8009546:	bc80      	pop	{r7}
 8009548:	4770      	bx	lr

0800954a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800954a:	b480      	push	{r7}
 800954c:	b08b      	sub	sp, #44	; 0x2c
 800954e:	af00      	add	r7, sp, #0
 8009550:	60f8      	str	r0, [r7, #12]
 8009552:	60b9      	str	r1, [r7, #8]
 8009554:	4611      	mov	r1, r2
 8009556:	461a      	mov	r2, r3
 8009558:	460b      	mov	r3, r1
 800955a:	80fb      	strh	r3, [r7, #6]
 800955c:	4613      	mov	r3, r2
 800955e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009560:	88bb      	ldrh	r3, [r7, #4]
 8009562:	085b      	lsrs	r3, r3, #1
 8009564:	b29b      	uxth	r3, r3
 8009566:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009570:	88fb      	ldrh	r3, [r7, #6]
 8009572:	005a      	lsls	r2, r3, #1
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	4413      	add	r3, r2
 8009578:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800957c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800957e:	69bb      	ldr	r3, [r7, #24]
 8009580:	627b      	str	r3, [r7, #36]	; 0x24
 8009582:	e01b      	b.n	80095bc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009584:	6a3b      	ldr	r3, [r7, #32]
 8009586:	881b      	ldrh	r3, [r3, #0]
 8009588:	b29b      	uxth	r3, r3
 800958a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800958c:	6a3b      	ldr	r3, [r7, #32]
 800958e:	3302      	adds	r3, #2
 8009590:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	b2da      	uxtb	r2, r3
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800959a:	69fb      	ldr	r3, [r7, #28]
 800959c:	3301      	adds	r3, #1
 800959e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	0a1b      	lsrs	r3, r3, #8
 80095a4:	b2da      	uxtb	r2, r3
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	3301      	adds	r3, #1
 80095ae:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80095b0:	6a3b      	ldr	r3, [r7, #32]
 80095b2:	3302      	adds	r3, #2
 80095b4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80095b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b8:	3b01      	subs	r3, #1
 80095ba:	627b      	str	r3, [r7, #36]	; 0x24
 80095bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d1e0      	bne.n	8009584 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80095c2:	88bb      	ldrh	r3, [r7, #4]
 80095c4:	f003 0301 	and.w	r3, r3, #1
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d007      	beq.n	80095de <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80095ce:	6a3b      	ldr	r3, [r7, #32]
 80095d0:	881b      	ldrh	r3, [r3, #0]
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	b2da      	uxtb	r2, r3
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	701a      	strb	r2, [r3, #0]
  }
}
 80095de:	bf00      	nop
 80095e0:	372c      	adds	r7, #44	; 0x2c
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bc80      	pop	{r7}
 80095e6:	4770      	bx	lr

080095e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	460b      	mov	r3, r1
 80095f2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80095f4:	2300      	movs	r3, #0
 80095f6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	7c1b      	ldrb	r3, [r3, #16]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d115      	bne.n	800962c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009604:	2202      	movs	r2, #2
 8009606:	2181      	movs	r1, #129	; 0x81
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f001 fe8a 	bl	800b322 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2201      	movs	r2, #1
 8009612:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009614:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009618:	2202      	movs	r2, #2
 800961a:	2101      	movs	r1, #1
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f001 fe80 	bl	800b322 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2201      	movs	r2, #1
 8009626:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800962a:	e012      	b.n	8009652 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800962c:	2340      	movs	r3, #64	; 0x40
 800962e:	2202      	movs	r2, #2
 8009630:	2181      	movs	r1, #129	; 0x81
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f001 fe75 	bl	800b322 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800963e:	2340      	movs	r3, #64	; 0x40
 8009640:	2202      	movs	r2, #2
 8009642:	2101      	movs	r1, #1
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f001 fe6c 	bl	800b322 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2201      	movs	r2, #1
 800964e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009652:	2308      	movs	r3, #8
 8009654:	2203      	movs	r2, #3
 8009656:	2182      	movs	r1, #130	; 0x82
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f001 fe62 	bl	800b322 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2201      	movs	r2, #1
 8009662:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009664:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009668:	f001 ff82 	bl	800b570 <USBD_static_malloc>
 800966c:	4602      	mov	r2, r0
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800967a:	2b00      	cmp	r3, #0
 800967c:	d102      	bne.n	8009684 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800967e:	2301      	movs	r3, #1
 8009680:	73fb      	strb	r3, [r7, #15]
 8009682:	e026      	b.n	80096d2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800968a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	2200      	movs	r2, #0
 800969a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	7c1b      	ldrb	r3, [r3, #16]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d109      	bne.n	80096c2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80096b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096b8:	2101      	movs	r1, #1
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f001 ff22 	bl	800b504 <USBD_LL_PrepareReceive>
 80096c0:	e007      	b.n	80096d2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80096c8:	2340      	movs	r3, #64	; 0x40
 80096ca:	2101      	movs	r1, #1
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f001 ff19 	bl	800b504 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80096d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	460b      	mov	r3, r1
 80096e6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80096e8:	2300      	movs	r3, #0
 80096ea:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80096ec:	2181      	movs	r1, #129	; 0x81
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f001 fe3d 	bl	800b36e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80096fa:	2101      	movs	r1, #1
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f001 fe36 	bl	800b36e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800970a:	2182      	movs	r1, #130	; 0x82
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f001 fe2e 	bl	800b36e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800971e:	2b00      	cmp	r3, #0
 8009720:	d00e      	beq.n	8009740 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009732:	4618      	mov	r0, r3
 8009734:	f001 ff28 	bl	800b588 <USBD_static_free>
    pdev->pClassData = NULL;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009740:	7bfb      	ldrb	r3, [r7, #15]
}
 8009742:	4618      	mov	r0, r3
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800974a:	b580      	push	{r7, lr}
 800974c:	b086      	sub	sp, #24
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
 8009752:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800975a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800975c:	2300      	movs	r3, #0
 800975e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009760:	2300      	movs	r3, #0
 8009762:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009764:	2300      	movs	r3, #0
 8009766:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009770:	2b00      	cmp	r3, #0
 8009772:	d039      	beq.n	80097e8 <USBD_CDC_Setup+0x9e>
 8009774:	2b20      	cmp	r3, #32
 8009776:	d17f      	bne.n	8009878 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	88db      	ldrh	r3, [r3, #6]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d029      	beq.n	80097d4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	b25b      	sxtb	r3, r3
 8009786:	2b00      	cmp	r3, #0
 8009788:	da11      	bge.n	80097ae <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009796:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009798:	683a      	ldr	r2, [r7, #0]
 800979a:	88d2      	ldrh	r2, [r2, #6]
 800979c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800979e:	6939      	ldr	r1, [r7, #16]
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	88db      	ldrh	r3, [r3, #6]
 80097a4:	461a      	mov	r2, r3
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f001 fa09 	bl	800abbe <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80097ac:	e06b      	b.n	8009886 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	785a      	ldrb	r2, [r3, #1]
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	88db      	ldrh	r3, [r3, #6]
 80097bc:	b2da      	uxtb	r2, r3
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80097c4:	6939      	ldr	r1, [r7, #16]
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	88db      	ldrh	r3, [r3, #6]
 80097ca:	461a      	mov	r2, r3
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f001 fa24 	bl	800ac1a <USBD_CtlPrepareRx>
      break;
 80097d2:	e058      	b.n	8009886 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	683a      	ldr	r2, [r7, #0]
 80097de:	7850      	ldrb	r0, [r2, #1]
 80097e0:	2200      	movs	r2, #0
 80097e2:	6839      	ldr	r1, [r7, #0]
 80097e4:	4798      	blx	r3
      break;
 80097e6:	e04e      	b.n	8009886 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	785b      	ldrb	r3, [r3, #1]
 80097ec:	2b0b      	cmp	r3, #11
 80097ee:	d02e      	beq.n	800984e <USBD_CDC_Setup+0x104>
 80097f0:	2b0b      	cmp	r3, #11
 80097f2:	dc38      	bgt.n	8009866 <USBD_CDC_Setup+0x11c>
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d002      	beq.n	80097fe <USBD_CDC_Setup+0xb4>
 80097f8:	2b0a      	cmp	r3, #10
 80097fa:	d014      	beq.n	8009826 <USBD_CDC_Setup+0xdc>
 80097fc:	e033      	b.n	8009866 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009804:	2b03      	cmp	r3, #3
 8009806:	d107      	bne.n	8009818 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009808:	f107 030c 	add.w	r3, r7, #12
 800980c:	2202      	movs	r2, #2
 800980e:	4619      	mov	r1, r3
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f001 f9d4 	bl	800abbe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009816:	e02e      	b.n	8009876 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009818:	6839      	ldr	r1, [r7, #0]
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f001 f965 	bl	800aaea <USBD_CtlError>
            ret = USBD_FAIL;
 8009820:	2302      	movs	r3, #2
 8009822:	75fb      	strb	r3, [r7, #23]
          break;
 8009824:	e027      	b.n	8009876 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800982c:	2b03      	cmp	r3, #3
 800982e:	d107      	bne.n	8009840 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009830:	f107 030f 	add.w	r3, r7, #15
 8009834:	2201      	movs	r2, #1
 8009836:	4619      	mov	r1, r3
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f001 f9c0 	bl	800abbe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800983e:	e01a      	b.n	8009876 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009840:	6839      	ldr	r1, [r7, #0]
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f001 f951 	bl	800aaea <USBD_CtlError>
            ret = USBD_FAIL;
 8009848:	2302      	movs	r3, #2
 800984a:	75fb      	strb	r3, [r7, #23]
          break;
 800984c:	e013      	b.n	8009876 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009854:	2b03      	cmp	r3, #3
 8009856:	d00d      	beq.n	8009874 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009858:	6839      	ldr	r1, [r7, #0]
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f001 f945 	bl	800aaea <USBD_CtlError>
            ret = USBD_FAIL;
 8009860:	2302      	movs	r3, #2
 8009862:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009864:	e006      	b.n	8009874 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009866:	6839      	ldr	r1, [r7, #0]
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f001 f93e 	bl	800aaea <USBD_CtlError>
          ret = USBD_FAIL;
 800986e:	2302      	movs	r3, #2
 8009870:	75fb      	strb	r3, [r7, #23]
          break;
 8009872:	e000      	b.n	8009876 <USBD_CDC_Setup+0x12c>
          break;
 8009874:	bf00      	nop
      }
      break;
 8009876:	e006      	b.n	8009886 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f001 f935 	bl	800aaea <USBD_CtlError>
      ret = USBD_FAIL;
 8009880:	2302      	movs	r3, #2
 8009882:	75fb      	strb	r3, [r7, #23]
      break;
 8009884:	bf00      	nop
  }

  return ret;
 8009886:	7dfb      	ldrb	r3, [r7, #23]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3718      	adds	r7, #24
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	460b      	mov	r3, r1
 800989a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098a2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098aa:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d03a      	beq.n	800992c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80098b6:	78fa      	ldrb	r2, [r7, #3]
 80098b8:	6879      	ldr	r1, [r7, #4]
 80098ba:	4613      	mov	r3, r2
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	4413      	add	r3, r2
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	440b      	add	r3, r1
 80098c4:	331c      	adds	r3, #28
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d029      	beq.n	8009920 <USBD_CDC_DataIn+0x90>
 80098cc:	78fa      	ldrb	r2, [r7, #3]
 80098ce:	6879      	ldr	r1, [r7, #4]
 80098d0:	4613      	mov	r3, r2
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	4413      	add	r3, r2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	440b      	add	r3, r1
 80098da:	331c      	adds	r3, #28
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	78f9      	ldrb	r1, [r7, #3]
 80098e0:	68b8      	ldr	r0, [r7, #8]
 80098e2:	460b      	mov	r3, r1
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	440b      	add	r3, r1
 80098e8:	00db      	lsls	r3, r3, #3
 80098ea:	4403      	add	r3, r0
 80098ec:	3338      	adds	r3, #56	; 0x38
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	fbb2 f1f3 	udiv	r1, r2, r3
 80098f4:	fb03 f301 	mul.w	r3, r3, r1
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d110      	bne.n	8009920 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80098fe:	78fa      	ldrb	r2, [r7, #3]
 8009900:	6879      	ldr	r1, [r7, #4]
 8009902:	4613      	mov	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4413      	add	r3, r2
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	440b      	add	r3, r1
 800990c:	331c      	adds	r3, #28
 800990e:	2200      	movs	r2, #0
 8009910:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009912:	78f9      	ldrb	r1, [r7, #3]
 8009914:	2300      	movs	r3, #0
 8009916:	2200      	movs	r2, #0
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f001 fdd0 	bl	800b4be <USBD_LL_Transmit>
 800991e:	e003      	b.n	8009928 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2200      	movs	r2, #0
 8009924:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009928:	2300      	movs	r3, #0
 800992a:	e000      	b.n	800992e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800992c:	2302      	movs	r3, #2
  }
}
 800992e:	4618      	mov	r0, r3
 8009930:	3710      	adds	r7, #16
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b084      	sub	sp, #16
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
 800993e:	460b      	mov	r3, r1
 8009940:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009948:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800994a:	78fb      	ldrb	r3, [r7, #3]
 800994c:	4619      	mov	r1, r3
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f001 fdfb 	bl	800b54a <USBD_LL_GetRxDataSize>
 8009954:	4602      	mov	r2, r0
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00d      	beq.n	8009982 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800997a:	4611      	mov	r1, r2
 800997c:	4798      	blx	r3

    return USBD_OK;
 800997e:	2300      	movs	r3, #0
 8009980:	e000      	b.n	8009984 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009982:	2302      	movs	r3, #2
  }
}
 8009984:	4618      	mov	r0, r3
 8009986:	3710      	adds	r7, #16
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800999a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d015      	beq.n	80099d2 <USBD_CDC_EP0_RxReady+0x46>
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80099ac:	2bff      	cmp	r3, #255	; 0xff
 80099ae:	d010      	beq.n	80099d2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80099be:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80099c6:	b292      	uxth	r2, r2
 80099c8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	22ff      	movs	r2, #255	; 0xff
 80099ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2243      	movs	r2, #67	; 0x43
 80099e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80099ea:	4b03      	ldr	r3, [pc, #12]	; (80099f8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	370c      	adds	r7, #12
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bc80      	pop	{r7}
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	200000a8 	.word	0x200000a8

080099fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2243      	movs	r2, #67	; 0x43
 8009a08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009a0a:	4b03      	ldr	r3, [pc, #12]	; (8009a18 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bc80      	pop	{r7}
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop
 8009a18:	20000064 	.word	0x20000064

08009a1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2243      	movs	r2, #67	; 0x43
 8009a28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009a2a:	4b03      	ldr	r3, [pc, #12]	; (8009a38 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bc80      	pop	{r7}
 8009a34:	4770      	bx	lr
 8009a36:	bf00      	nop
 8009a38:	200000ec 	.word	0x200000ec

08009a3c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	220a      	movs	r2, #10
 8009a48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009a4a:	4b03      	ldr	r3, [pc, #12]	; (8009a58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bc80      	pop	{r7}
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	20000020 	.word	0x20000020

08009a5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009a66:	2302      	movs	r3, #2
 8009a68:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d005      	beq.n	8009a7c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	683a      	ldr	r2, [r7, #0]
 8009a74:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3714      	adds	r7, #20
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bc80      	pop	{r7}
 8009a86:	4770      	bx	lr

08009a88 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b087      	sub	sp, #28
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	4613      	mov	r3, r2
 8009a94:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a9c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009aa6:	88fa      	ldrh	r2, [r7, #6]
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	371c      	adds	r7, #28
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bc80      	pop	{r7}
 8009ab8:	4770      	bx	lr

08009aba <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009aba:	b480      	push	{r7}
 8009abc:	b085      	sub	sp, #20
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
 8009ac2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aca:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	683a      	ldr	r2, [r7, #0]
 8009ad0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3714      	adds	r7, #20
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bc80      	pop	{r7}
 8009ade:	4770      	bx	lr

08009ae0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d01c      	beq.n	8009b34 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d115      	bne.n	8009b30 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	2181      	movs	r1, #129	; 0x81
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f001 fcc9 	bl	800b4be <USBD_LL_Transmit>

      return USBD_OK;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	e002      	b.n	8009b36 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009b30:	2301      	movs	r3, #1
 8009b32:	e000      	b.n	8009b36 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009b34:	2302      	movs	r3, #2
  }
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b084      	sub	sp, #16
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b4c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d017      	beq.n	8009b88 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	7c1b      	ldrb	r3, [r3, #16]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d109      	bne.n	8009b74 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b6a:	2101      	movs	r1, #1
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f001 fcc9 	bl	800b504 <USBD_LL_PrepareReceive>
 8009b72:	e007      	b.n	8009b84 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b7a:	2340      	movs	r3, #64	; 0x40
 8009b7c:	2101      	movs	r1, #1
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f001 fcc0 	bl	800b504 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009b84:	2300      	movs	r3, #0
 8009b86:	e000      	b.n	8009b8a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009b88:	2302      	movs	r3, #2
  }
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3710      	adds	r7, #16
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b084      	sub	sp, #16
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	60f8      	str	r0, [r7, #12]
 8009b9a:	60b9      	str	r1, [r7, #8]
 8009b9c:	4613      	mov	r3, r2
 8009b9e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d101      	bne.n	8009baa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009ba6:	2302      	movs	r3, #2
 8009ba8:	e01a      	b.n	8009be0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d003      	beq.n	8009bbc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d003      	beq.n	8009bca <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	79fa      	ldrb	r2, [r7, #7]
 8009bd6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009bd8:	68f8      	ldr	r0, [r7, #12]
 8009bda:	f001 fb2d 	bl	800b238 <USBD_LL_Init>

  return USBD_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d006      	beq.n	8009c0a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	683a      	ldr	r2, [r7, #0]
 8009c00:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009c04:	2300      	movs	r3, #0
 8009c06:	73fb      	strb	r3, [r7, #15]
 8009c08:	e001      	b.n	8009c0e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009c0a:	2302      	movs	r3, #2
 8009c0c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3714      	adds	r7, #20
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bc80      	pop	{r7}
 8009c18:	4770      	bx	lr

08009c1a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b082      	sub	sp, #8
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f001 fb62 	bl	800b2ec <USBD_LL_Start>

  return USBD_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3708      	adds	r7, #8
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009c32:	b480      	push	{r7}
 8009c34:	b083      	sub	sp, #12
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c3a:	2300      	movs	r3, #0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bc80      	pop	{r7}
 8009c44:	4770      	bx	lr

08009c46 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009c46:	b580      	push	{r7, lr}
 8009c48:	b084      	sub	sp, #16
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
 8009c4e:	460b      	mov	r3, r1
 8009c50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009c52:	2302      	movs	r3, #2
 8009c54:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d00c      	beq.n	8009c7a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	78fa      	ldrb	r2, [r7, #3]
 8009c6a:	4611      	mov	r1, r2
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	4798      	blx	r3
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d101      	bne.n	8009c7a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009c76:	2300      	movs	r3, #0
 8009c78:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3710      	adds	r7, #16
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	78fa      	ldrb	r2, [r7, #3]
 8009c9a:	4611      	mov	r1, r2
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	4798      	blx	r3

  return USBD_OK;
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3708      	adds	r7, #8
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b082      	sub	sp, #8
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
 8009cb2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f000 fed8 	bl	800aa72 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009cde:	f003 031f 	and.w	r3, r3, #31
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d016      	beq.n	8009d14 <USBD_LL_SetupStage+0x6a>
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	d81c      	bhi.n	8009d24 <USBD_LL_SetupStage+0x7a>
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d002      	beq.n	8009cf4 <USBD_LL_SetupStage+0x4a>
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d008      	beq.n	8009d04 <USBD_LL_SetupStage+0x5a>
 8009cf2:	e017      	b.n	8009d24 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 f9cb 	bl	800a098 <USBD_StdDevReq>
      break;
 8009d02:	e01a      	b.n	8009d3a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fa2d 	bl	800a16c <USBD_StdItfReq>
      break;
 8009d12:	e012      	b.n	8009d3a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 fa6d 	bl	800a1fc <USBD_StdEPReq>
      break;
 8009d22:	e00a      	b.n	8009d3a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009d2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	4619      	mov	r1, r3
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f001 fb3a 	bl	800b3ac <USBD_LL_StallEP>
      break;
 8009d38:	bf00      	nop
  }

  return USBD_OK;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3708      	adds	r7, #8
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b086      	sub	sp, #24
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	607a      	str	r2, [r7, #4]
 8009d50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009d52:	7afb      	ldrb	r3, [r7, #11]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d14b      	bne.n	8009df0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009d5e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d66:	2b03      	cmp	r3, #3
 8009d68:	d134      	bne.n	8009dd4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	68da      	ldr	r2, [r3, #12]
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	691b      	ldr	r3, [r3, #16]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d919      	bls.n	8009daa <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	68da      	ldr	r2, [r3, #12]
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	691b      	ldr	r3, [r3, #16]
 8009d7e:	1ad2      	subs	r2, r2, r3
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	68da      	ldr	r2, [r3, #12]
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d203      	bcs.n	8009d98 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	e002      	b.n	8009d9e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	461a      	mov	r2, r3
 8009da0:	6879      	ldr	r1, [r7, #4]
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	f000 ff57 	bl	800ac56 <USBD_CtlContinueRx>
 8009da8:	e038      	b.n	8009e1c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00a      	beq.n	8009dcc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009dbc:	2b03      	cmp	r3, #3
 8009dbe:	d105      	bne.n	8009dcc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	68f8      	ldr	r0, [r7, #12]
 8009dca:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009dcc:	68f8      	ldr	r0, [r7, #12]
 8009dce:	f000 ff54 	bl	800ac7a <USBD_CtlSendStatus>
 8009dd2:	e023      	b.n	8009e1c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009dda:	2b05      	cmp	r3, #5
 8009ddc:	d11e      	bne.n	8009e1c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009de6:	2100      	movs	r1, #0
 8009de8:	68f8      	ldr	r0, [r7, #12]
 8009dea:	f001 fadf 	bl	800b3ac <USBD_LL_StallEP>
 8009dee:	e015      	b.n	8009e1c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009df6:	699b      	ldr	r3, [r3, #24]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00d      	beq.n	8009e18 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009e02:	2b03      	cmp	r3, #3
 8009e04:	d108      	bne.n	8009e18 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e0c:	699b      	ldr	r3, [r3, #24]
 8009e0e:	7afa      	ldrb	r2, [r7, #11]
 8009e10:	4611      	mov	r1, r2
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	4798      	blx	r3
 8009e16:	e001      	b.n	8009e1c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009e18:	2302      	movs	r3, #2
 8009e1a:	e000      	b.n	8009e1e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3718      	adds	r7, #24
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009e26:	b580      	push	{r7, lr}
 8009e28:	b086      	sub	sp, #24
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	60f8      	str	r0, [r7, #12]
 8009e2e:	460b      	mov	r3, r1
 8009e30:	607a      	str	r2, [r7, #4]
 8009e32:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009e34:	7afb      	ldrb	r3, [r7, #11]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d17f      	bne.n	8009f3a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	3314      	adds	r3, #20
 8009e3e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	d15c      	bne.n	8009f04 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	68da      	ldr	r2, [r3, #12]
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d915      	bls.n	8009e82 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	68da      	ldr	r2, [r3, #12]
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	691b      	ldr	r3, [r3, #16]
 8009e5e:	1ad2      	subs	r2, r2, r3
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	6879      	ldr	r1, [r7, #4]
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f000 fec1 	bl	800abf6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e74:	2300      	movs	r3, #0
 8009e76:	2200      	movs	r2, #0
 8009e78:	2100      	movs	r1, #0
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f001 fb42 	bl	800b504 <USBD_LL_PrepareReceive>
 8009e80:	e04e      	b.n	8009f20 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	697a      	ldr	r2, [r7, #20]
 8009e88:	6912      	ldr	r2, [r2, #16]
 8009e8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e8e:	fb02 f201 	mul.w	r2, r2, r1
 8009e92:	1a9b      	subs	r3, r3, r2
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d11c      	bne.n	8009ed2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	689a      	ldr	r2, [r3, #8]
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d316      	bcc.n	8009ed2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	689a      	ldr	r2, [r3, #8]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d20f      	bcs.n	8009ed2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f000 fe9d 	bl	800abf6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	2100      	movs	r1, #0
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	f001 fb1a 	bl	800b504 <USBD_LL_PrepareReceive>
 8009ed0:	e026      	b.n	8009f20 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00a      	beq.n	8009ef4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009ee4:	2b03      	cmp	r3, #3
 8009ee6:	d105      	bne.n	8009ef4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009ef4:	2180      	movs	r1, #128	; 0x80
 8009ef6:	68f8      	ldr	r0, [r7, #12]
 8009ef8:	f001 fa58 	bl	800b3ac <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009efc:	68f8      	ldr	r0, [r7, #12]
 8009efe:	f000 fecf 	bl	800aca0 <USBD_CtlReceiveStatus>
 8009f02:	e00d      	b.n	8009f20 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f0a:	2b04      	cmp	r3, #4
 8009f0c:	d004      	beq.n	8009f18 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d103      	bne.n	8009f20 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009f18:	2180      	movs	r1, #128	; 0x80
 8009f1a:	68f8      	ldr	r0, [r7, #12]
 8009f1c:	f001 fa46 	bl	800b3ac <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d11d      	bne.n	8009f66 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009f2a:	68f8      	ldr	r0, [r7, #12]
 8009f2c:	f7ff fe81 	bl	8009c32 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009f38:	e015      	b.n	8009f66 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f40:	695b      	ldr	r3, [r3, #20]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d00d      	beq.n	8009f62 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009f4c:	2b03      	cmp	r3, #3
 8009f4e:	d108      	bne.n	8009f62 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f56:	695b      	ldr	r3, [r3, #20]
 8009f58:	7afa      	ldrb	r2, [r7, #11]
 8009f5a:	4611      	mov	r1, r2
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	4798      	blx	r3
 8009f60:	e001      	b.n	8009f66 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009f62:	2302      	movs	r3, #2
 8009f64:	e000      	b.n	8009f68 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3718      	adds	r7, #24
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f78:	2340      	movs	r3, #64	; 0x40
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f001 f9cf 	bl	800b322 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2201      	movs	r2, #1
 8009f88:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2240      	movs	r2, #64	; 0x40
 8009f90:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f94:	2340      	movs	r3, #64	; 0x40
 8009f96:	2200      	movs	r2, #0
 8009f98:	2180      	movs	r1, #128	; 0x80
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f001 f9c1 	bl	800b322 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2240      	movs	r2, #64	; 0x40
 8009faa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d009      	beq.n	8009fe8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	6852      	ldr	r2, [r2, #4]
 8009fe0:	b2d2      	uxtb	r2, r2
 8009fe2:	4611      	mov	r1, r2
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	4798      	blx	r3
  }

  return USBD_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3708      	adds	r7, #8
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009ff2:	b480      	push	{r7}
 8009ff4:	b083      	sub	sp, #12
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	78fa      	ldrb	r2, [r7, #3]
 800a002:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	370c      	adds	r7, #12
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bc80      	pop	{r7}
 800a00e:	4770      	bx	lr

0800a010 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2204      	movs	r2, #4
 800a028:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	370c      	adds	r7, #12
 800a032:	46bd      	mov	sp, r7
 800a034:	bc80      	pop	{r7}
 800a036:	4770      	bx	lr

0800a038 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a046:	2b04      	cmp	r3, #4
 800a048:	d105      	bne.n	800a056 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	370c      	adds	r7, #12
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bc80      	pop	{r7}
 800a060:	4770      	bx	lr

0800a062 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b082      	sub	sp, #8
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a070:	2b03      	cmp	r3, #3
 800a072:	d10b      	bne.n	800a08c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a07a:	69db      	ldr	r3, [r3, #28]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d005      	beq.n	800a08c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a086:	69db      	ldr	r3, [r3, #28]
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3708      	adds	r7, #8
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
	...

0800a098 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a0ae:	2b40      	cmp	r3, #64	; 0x40
 800a0b0:	d005      	beq.n	800a0be <USBD_StdDevReq+0x26>
 800a0b2:	2b40      	cmp	r3, #64	; 0x40
 800a0b4:	d84f      	bhi.n	800a156 <USBD_StdDevReq+0xbe>
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d009      	beq.n	800a0ce <USBD_StdDevReq+0x36>
 800a0ba:	2b20      	cmp	r3, #32
 800a0bc:	d14b      	bne.n	800a156 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	6839      	ldr	r1, [r7, #0]
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	4798      	blx	r3
      break;
 800a0cc:	e048      	b.n	800a160 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	785b      	ldrb	r3, [r3, #1]
 800a0d2:	2b09      	cmp	r3, #9
 800a0d4:	d839      	bhi.n	800a14a <USBD_StdDevReq+0xb2>
 800a0d6:	a201      	add	r2, pc, #4	; (adr r2, 800a0dc <USBD_StdDevReq+0x44>)
 800a0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0dc:	0800a12d 	.word	0x0800a12d
 800a0e0:	0800a141 	.word	0x0800a141
 800a0e4:	0800a14b 	.word	0x0800a14b
 800a0e8:	0800a137 	.word	0x0800a137
 800a0ec:	0800a14b 	.word	0x0800a14b
 800a0f0:	0800a10f 	.word	0x0800a10f
 800a0f4:	0800a105 	.word	0x0800a105
 800a0f8:	0800a14b 	.word	0x0800a14b
 800a0fc:	0800a123 	.word	0x0800a123
 800a100:	0800a119 	.word	0x0800a119
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a104:	6839      	ldr	r1, [r7, #0]
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 f9dc 	bl	800a4c4 <USBD_GetDescriptor>
          break;
 800a10c:	e022      	b.n	800a154 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a10e:	6839      	ldr	r1, [r7, #0]
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 fb3f 	bl	800a794 <USBD_SetAddress>
          break;
 800a116:	e01d      	b.n	800a154 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a118:	6839      	ldr	r1, [r7, #0]
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 fb7e 	bl	800a81c <USBD_SetConfig>
          break;
 800a120:	e018      	b.n	800a154 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a122:	6839      	ldr	r1, [r7, #0]
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 fc07 	bl	800a938 <USBD_GetConfig>
          break;
 800a12a:	e013      	b.n	800a154 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a12c:	6839      	ldr	r1, [r7, #0]
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fc37 	bl	800a9a2 <USBD_GetStatus>
          break;
 800a134:	e00e      	b.n	800a154 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a136:	6839      	ldr	r1, [r7, #0]
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 fc65 	bl	800aa08 <USBD_SetFeature>
          break;
 800a13e:	e009      	b.n	800a154 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a140:	6839      	ldr	r1, [r7, #0]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 fc74 	bl	800aa30 <USBD_ClrFeature>
          break;
 800a148:	e004      	b.n	800a154 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a14a:	6839      	ldr	r1, [r7, #0]
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 fccc 	bl	800aaea <USBD_CtlError>
          break;
 800a152:	bf00      	nop
      }
      break;
 800a154:	e004      	b.n	800a160 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a156:	6839      	ldr	r1, [r7, #0]
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 fcc6 	bl	800aaea <USBD_CtlError>
      break;
 800a15e:	bf00      	nop
  }

  return ret;
 800a160:	7bfb      	ldrb	r3, [r7, #15]
}
 800a162:	4618      	mov	r0, r3
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop

0800a16c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a176:	2300      	movs	r3, #0
 800a178:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a182:	2b40      	cmp	r3, #64	; 0x40
 800a184:	d005      	beq.n	800a192 <USBD_StdItfReq+0x26>
 800a186:	2b40      	cmp	r3, #64	; 0x40
 800a188:	d82e      	bhi.n	800a1e8 <USBD_StdItfReq+0x7c>
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d001      	beq.n	800a192 <USBD_StdItfReq+0x26>
 800a18e:	2b20      	cmp	r3, #32
 800a190:	d12a      	bne.n	800a1e8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a198:	3b01      	subs	r3, #1
 800a19a:	2b02      	cmp	r3, #2
 800a19c:	d81d      	bhi.n	800a1da <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	889b      	ldrh	r3, [r3, #4]
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d813      	bhi.n	800a1d0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1ae:	689b      	ldr	r3, [r3, #8]
 800a1b0:	6839      	ldr	r1, [r7, #0]
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	4798      	blx	r3
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	88db      	ldrh	r3, [r3, #6]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d110      	bne.n	800a1e4 <USBD_StdItfReq+0x78>
 800a1c2:	7bfb      	ldrb	r3, [r7, #15]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d10d      	bne.n	800a1e4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fd56 	bl	800ac7a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a1ce:	e009      	b.n	800a1e4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a1d0:	6839      	ldr	r1, [r7, #0]
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 fc89 	bl	800aaea <USBD_CtlError>
          break;
 800a1d8:	e004      	b.n	800a1e4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a1da:	6839      	ldr	r1, [r7, #0]
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 fc84 	bl	800aaea <USBD_CtlError>
          break;
 800a1e2:	e000      	b.n	800a1e6 <USBD_StdItfReq+0x7a>
          break;
 800a1e4:	bf00      	nop
      }
      break;
 800a1e6:	e004      	b.n	800a1f2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a1e8:	6839      	ldr	r1, [r7, #0]
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 fc7d 	bl	800aaea <USBD_CtlError>
      break;
 800a1f0:	bf00      	nop
  }

  return USBD_OK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3710      	adds	r7, #16
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a206:	2300      	movs	r3, #0
 800a208:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	889b      	ldrh	r3, [r3, #4]
 800a20e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a218:	2b40      	cmp	r3, #64	; 0x40
 800a21a:	d007      	beq.n	800a22c <USBD_StdEPReq+0x30>
 800a21c:	2b40      	cmp	r3, #64	; 0x40
 800a21e:	f200 8146 	bhi.w	800a4ae <USBD_StdEPReq+0x2b2>
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00a      	beq.n	800a23c <USBD_StdEPReq+0x40>
 800a226:	2b20      	cmp	r3, #32
 800a228:	f040 8141 	bne.w	800a4ae <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	6839      	ldr	r1, [r7, #0]
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	4798      	blx	r3
      break;
 800a23a:	e13d      	b.n	800a4b8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a244:	2b20      	cmp	r3, #32
 800a246:	d10a      	bne.n	800a25e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a24e:	689b      	ldr	r3, [r3, #8]
 800a250:	6839      	ldr	r1, [r7, #0]
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	4798      	blx	r3
 800a256:	4603      	mov	r3, r0
 800a258:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a25a:	7bfb      	ldrb	r3, [r7, #15]
 800a25c:	e12d      	b.n	800a4ba <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	785b      	ldrb	r3, [r3, #1]
 800a262:	2b03      	cmp	r3, #3
 800a264:	d007      	beq.n	800a276 <USBD_StdEPReq+0x7a>
 800a266:	2b03      	cmp	r3, #3
 800a268:	f300 811b 	bgt.w	800a4a2 <USBD_StdEPReq+0x2a6>
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d072      	beq.n	800a356 <USBD_StdEPReq+0x15a>
 800a270:	2b01      	cmp	r3, #1
 800a272:	d03a      	beq.n	800a2ea <USBD_StdEPReq+0xee>
 800a274:	e115      	b.n	800a4a2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	d002      	beq.n	800a286 <USBD_StdEPReq+0x8a>
 800a280:	2b03      	cmp	r3, #3
 800a282:	d015      	beq.n	800a2b0 <USBD_StdEPReq+0xb4>
 800a284:	e02b      	b.n	800a2de <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a286:	7bbb      	ldrb	r3, [r7, #14]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d00c      	beq.n	800a2a6 <USBD_StdEPReq+0xaa>
 800a28c:	7bbb      	ldrb	r3, [r7, #14]
 800a28e:	2b80      	cmp	r3, #128	; 0x80
 800a290:	d009      	beq.n	800a2a6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a292:	7bbb      	ldrb	r3, [r7, #14]
 800a294:	4619      	mov	r1, r3
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f001 f888 	bl	800b3ac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a29c:	2180      	movs	r1, #128	; 0x80
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f001 f884 	bl	800b3ac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a2a4:	e020      	b.n	800a2e8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a2a6:	6839      	ldr	r1, [r7, #0]
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 fc1e 	bl	800aaea <USBD_CtlError>
              break;
 800a2ae:	e01b      	b.n	800a2e8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	885b      	ldrh	r3, [r3, #2]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d10e      	bne.n	800a2d6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a2b8:	7bbb      	ldrb	r3, [r7, #14]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00b      	beq.n	800a2d6 <USBD_StdEPReq+0xda>
 800a2be:	7bbb      	ldrb	r3, [r7, #14]
 800a2c0:	2b80      	cmp	r3, #128	; 0x80
 800a2c2:	d008      	beq.n	800a2d6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	88db      	ldrh	r3, [r3, #6]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d104      	bne.n	800a2d6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a2cc:	7bbb      	ldrb	r3, [r7, #14]
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f001 f86b 	bl	800b3ac <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 fccf 	bl	800ac7a <USBD_CtlSendStatus>

              break;
 800a2dc:	e004      	b.n	800a2e8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a2de:	6839      	ldr	r1, [r7, #0]
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 fc02 	bl	800aaea <USBD_CtlError>
              break;
 800a2e6:	bf00      	nop
          }
          break;
 800a2e8:	e0e0      	b.n	800a4ac <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2f0:	2b02      	cmp	r3, #2
 800a2f2:	d002      	beq.n	800a2fa <USBD_StdEPReq+0xfe>
 800a2f4:	2b03      	cmp	r3, #3
 800a2f6:	d015      	beq.n	800a324 <USBD_StdEPReq+0x128>
 800a2f8:	e026      	b.n	800a348 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a2fa:	7bbb      	ldrb	r3, [r7, #14]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d00c      	beq.n	800a31a <USBD_StdEPReq+0x11e>
 800a300:	7bbb      	ldrb	r3, [r7, #14]
 800a302:	2b80      	cmp	r3, #128	; 0x80
 800a304:	d009      	beq.n	800a31a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a306:	7bbb      	ldrb	r3, [r7, #14]
 800a308:	4619      	mov	r1, r3
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f001 f84e 	bl	800b3ac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a310:	2180      	movs	r1, #128	; 0x80
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f001 f84a 	bl	800b3ac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a318:	e01c      	b.n	800a354 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a31a:	6839      	ldr	r1, [r7, #0]
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 fbe4 	bl	800aaea <USBD_CtlError>
              break;
 800a322:	e017      	b.n	800a354 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	885b      	ldrh	r3, [r3, #2]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d112      	bne.n	800a352 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a32c:	7bbb      	ldrb	r3, [r7, #14]
 800a32e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a332:	2b00      	cmp	r3, #0
 800a334:	d004      	beq.n	800a340 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a336:	7bbb      	ldrb	r3, [r7, #14]
 800a338:	4619      	mov	r1, r3
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f001 f855 	bl	800b3ea <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 fc9a 	bl	800ac7a <USBD_CtlSendStatus>
              }
              break;
 800a346:	e004      	b.n	800a352 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a348:	6839      	ldr	r1, [r7, #0]
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 fbcd 	bl	800aaea <USBD_CtlError>
              break;
 800a350:	e000      	b.n	800a354 <USBD_StdEPReq+0x158>
              break;
 800a352:	bf00      	nop
          }
          break;
 800a354:	e0aa      	b.n	800a4ac <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d002      	beq.n	800a366 <USBD_StdEPReq+0x16a>
 800a360:	2b03      	cmp	r3, #3
 800a362:	d032      	beq.n	800a3ca <USBD_StdEPReq+0x1ce>
 800a364:	e097      	b.n	800a496 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a366:	7bbb      	ldrb	r3, [r7, #14]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d007      	beq.n	800a37c <USBD_StdEPReq+0x180>
 800a36c:	7bbb      	ldrb	r3, [r7, #14]
 800a36e:	2b80      	cmp	r3, #128	; 0x80
 800a370:	d004      	beq.n	800a37c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a372:	6839      	ldr	r1, [r7, #0]
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 fbb8 	bl	800aaea <USBD_CtlError>
                break;
 800a37a:	e091      	b.n	800a4a0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a37c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a380:	2b00      	cmp	r3, #0
 800a382:	da0b      	bge.n	800a39c <USBD_StdEPReq+0x1a0>
 800a384:	7bbb      	ldrb	r3, [r7, #14]
 800a386:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a38a:	4613      	mov	r3, r2
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	4413      	add	r3, r2
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	3310      	adds	r3, #16
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	4413      	add	r3, r2
 800a398:	3304      	adds	r3, #4
 800a39a:	e00b      	b.n	800a3b4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a39c:	7bbb      	ldrb	r3, [r7, #14]
 800a39e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	4413      	add	r3, r2
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	3304      	adds	r3, #4
 800a3b4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	2202      	movs	r2, #2
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 fbfb 	bl	800abbe <USBD_CtlSendData>
              break;
 800a3c8:	e06a      	b.n	800a4a0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a3ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	da11      	bge.n	800a3f6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a3d2:	7bbb      	ldrb	r3, [r7, #14]
 800a3d4:	f003 020f 	and.w	r2, r3, #15
 800a3d8:	6879      	ldr	r1, [r7, #4]
 800a3da:	4613      	mov	r3, r2
 800a3dc:	009b      	lsls	r3, r3, #2
 800a3de:	4413      	add	r3, r2
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	440b      	add	r3, r1
 800a3e4:	3318      	adds	r3, #24
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d117      	bne.n	800a41c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a3ec:	6839      	ldr	r1, [r7, #0]
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 fb7b 	bl	800aaea <USBD_CtlError>
                  break;
 800a3f4:	e054      	b.n	800a4a0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a3f6:	7bbb      	ldrb	r3, [r7, #14]
 800a3f8:	f003 020f 	and.w	r2, r3, #15
 800a3fc:	6879      	ldr	r1, [r7, #4]
 800a3fe:	4613      	mov	r3, r2
 800a400:	009b      	lsls	r3, r3, #2
 800a402:	4413      	add	r3, r2
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	440b      	add	r3, r1
 800a408:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d104      	bne.n	800a41c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a412:	6839      	ldr	r1, [r7, #0]
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 fb68 	bl	800aaea <USBD_CtlError>
                  break;
 800a41a:	e041      	b.n	800a4a0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a41c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a420:	2b00      	cmp	r3, #0
 800a422:	da0b      	bge.n	800a43c <USBD_StdEPReq+0x240>
 800a424:	7bbb      	ldrb	r3, [r7, #14]
 800a426:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a42a:	4613      	mov	r3, r2
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	4413      	add	r3, r2
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	3310      	adds	r3, #16
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	4413      	add	r3, r2
 800a438:	3304      	adds	r3, #4
 800a43a:	e00b      	b.n	800a454 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a43c:	7bbb      	ldrb	r3, [r7, #14]
 800a43e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a442:	4613      	mov	r3, r2
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	4413      	add	r3, r2
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	4413      	add	r3, r2
 800a452:	3304      	adds	r3, #4
 800a454:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a456:	7bbb      	ldrb	r3, [r7, #14]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d002      	beq.n	800a462 <USBD_StdEPReq+0x266>
 800a45c:	7bbb      	ldrb	r3, [r7, #14]
 800a45e:	2b80      	cmp	r3, #128	; 0x80
 800a460:	d103      	bne.n	800a46a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	2200      	movs	r2, #0
 800a466:	601a      	str	r2, [r3, #0]
 800a468:	e00e      	b.n	800a488 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a46a:	7bbb      	ldrb	r3, [r7, #14]
 800a46c:	4619      	mov	r1, r3
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 ffda 	bl	800b428 <USBD_LL_IsStallEP>
 800a474:	4603      	mov	r3, r0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d003      	beq.n	800a482 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	2201      	movs	r2, #1
 800a47e:	601a      	str	r2, [r3, #0]
 800a480:	e002      	b.n	800a488 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	2200      	movs	r2, #0
 800a486:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	2202      	movs	r2, #2
 800a48c:	4619      	mov	r1, r3
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 fb95 	bl	800abbe <USBD_CtlSendData>
              break;
 800a494:	e004      	b.n	800a4a0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a496:	6839      	ldr	r1, [r7, #0]
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 fb26 	bl	800aaea <USBD_CtlError>
              break;
 800a49e:	bf00      	nop
          }
          break;
 800a4a0:	e004      	b.n	800a4ac <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a4a2:	6839      	ldr	r1, [r7, #0]
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 fb20 	bl	800aaea <USBD_CtlError>
          break;
 800a4aa:	bf00      	nop
      }
      break;
 800a4ac:	e004      	b.n	800a4b8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a4ae:	6839      	ldr	r1, [r7, #0]
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 fb1a 	bl	800aaea <USBD_CtlError>
      break;
 800a4b6:	bf00      	nop
  }

  return ret;
 800a4b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
	...

0800a4c4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	885b      	ldrh	r3, [r3, #2]
 800a4de:	0a1b      	lsrs	r3, r3, #8
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	3b01      	subs	r3, #1
 800a4e4:	2b06      	cmp	r3, #6
 800a4e6:	f200 8128 	bhi.w	800a73a <USBD_GetDescriptor+0x276>
 800a4ea:	a201      	add	r2, pc, #4	; (adr r2, 800a4f0 <USBD_GetDescriptor+0x2c>)
 800a4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f0:	0800a50d 	.word	0x0800a50d
 800a4f4:	0800a525 	.word	0x0800a525
 800a4f8:	0800a565 	.word	0x0800a565
 800a4fc:	0800a73b 	.word	0x0800a73b
 800a500:	0800a73b 	.word	0x0800a73b
 800a504:	0800a6db 	.word	0x0800a6db
 800a508:	0800a707 	.word	0x0800a707
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	7c12      	ldrb	r2, [r2, #16]
 800a518:	f107 0108 	add.w	r1, r7, #8
 800a51c:	4610      	mov	r0, r2
 800a51e:	4798      	blx	r3
 800a520:	60f8      	str	r0, [r7, #12]
      break;
 800a522:	e112      	b.n	800a74a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	7c1b      	ldrb	r3, [r3, #16]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d10d      	bne.n	800a548 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a534:	f107 0208 	add.w	r2, r7, #8
 800a538:	4610      	mov	r0, r2
 800a53a:	4798      	blx	r3
 800a53c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	3301      	adds	r3, #1
 800a542:	2202      	movs	r2, #2
 800a544:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a546:	e100      	b.n	800a74a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a550:	f107 0208 	add.w	r2, r7, #8
 800a554:	4610      	mov	r0, r2
 800a556:	4798      	blx	r3
 800a558:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	3301      	adds	r3, #1
 800a55e:	2202      	movs	r2, #2
 800a560:	701a      	strb	r2, [r3, #0]
      break;
 800a562:	e0f2      	b.n	800a74a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	885b      	ldrh	r3, [r3, #2]
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	2b05      	cmp	r3, #5
 800a56c:	f200 80ac 	bhi.w	800a6c8 <USBD_GetDescriptor+0x204>
 800a570:	a201      	add	r2, pc, #4	; (adr r2, 800a578 <USBD_GetDescriptor+0xb4>)
 800a572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a576:	bf00      	nop
 800a578:	0800a591 	.word	0x0800a591
 800a57c:	0800a5c5 	.word	0x0800a5c5
 800a580:	0800a5f9 	.word	0x0800a5f9
 800a584:	0800a62d 	.word	0x0800a62d
 800a588:	0800a661 	.word	0x0800a661
 800a58c:	0800a695 	.word	0x0800a695
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00b      	beq.n	800a5b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	7c12      	ldrb	r2, [r2, #16]
 800a5a8:	f107 0108 	add.w	r1, r7, #8
 800a5ac:	4610      	mov	r0, r2
 800a5ae:	4798      	blx	r3
 800a5b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5b2:	e091      	b.n	800a6d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5b4:	6839      	ldr	r1, [r7, #0]
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 fa97 	bl	800aaea <USBD_CtlError>
            err++;
 800a5bc:	7afb      	ldrb	r3, [r7, #11]
 800a5be:	3301      	adds	r3, #1
 800a5c0:	72fb      	strb	r3, [r7, #11]
          break;
 800a5c2:	e089      	b.n	800a6d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d00b      	beq.n	800a5e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	7c12      	ldrb	r2, [r2, #16]
 800a5dc:	f107 0108 	add.w	r1, r7, #8
 800a5e0:	4610      	mov	r0, r2
 800a5e2:	4798      	blx	r3
 800a5e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5e6:	e077      	b.n	800a6d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5e8:	6839      	ldr	r1, [r7, #0]
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 fa7d 	bl	800aaea <USBD_CtlError>
            err++;
 800a5f0:	7afb      	ldrb	r3, [r7, #11]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	72fb      	strb	r3, [r7, #11]
          break;
 800a5f6:	e06f      	b.n	800a6d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00b      	beq.n	800a61c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	7c12      	ldrb	r2, [r2, #16]
 800a610:	f107 0108 	add.w	r1, r7, #8
 800a614:	4610      	mov	r0, r2
 800a616:	4798      	blx	r3
 800a618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a61a:	e05d      	b.n	800a6d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a61c:	6839      	ldr	r1, [r7, #0]
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 fa63 	bl	800aaea <USBD_CtlError>
            err++;
 800a624:	7afb      	ldrb	r3, [r7, #11]
 800a626:	3301      	adds	r3, #1
 800a628:	72fb      	strb	r3, [r7, #11]
          break;
 800a62a:	e055      	b.n	800a6d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d00b      	beq.n	800a650 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a63e:	691b      	ldr	r3, [r3, #16]
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	7c12      	ldrb	r2, [r2, #16]
 800a644:	f107 0108 	add.w	r1, r7, #8
 800a648:	4610      	mov	r0, r2
 800a64a:	4798      	blx	r3
 800a64c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a64e:	e043      	b.n	800a6d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a650:	6839      	ldr	r1, [r7, #0]
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 fa49 	bl	800aaea <USBD_CtlError>
            err++;
 800a658:	7afb      	ldrb	r3, [r7, #11]
 800a65a:	3301      	adds	r3, #1
 800a65c:	72fb      	strb	r3, [r7, #11]
          break;
 800a65e:	e03b      	b.n	800a6d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a666:	695b      	ldr	r3, [r3, #20]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00b      	beq.n	800a684 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a672:	695b      	ldr	r3, [r3, #20]
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	7c12      	ldrb	r2, [r2, #16]
 800a678:	f107 0108 	add.w	r1, r7, #8
 800a67c:	4610      	mov	r0, r2
 800a67e:	4798      	blx	r3
 800a680:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a682:	e029      	b.n	800a6d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a684:	6839      	ldr	r1, [r7, #0]
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 fa2f 	bl	800aaea <USBD_CtlError>
            err++;
 800a68c:	7afb      	ldrb	r3, [r7, #11]
 800a68e:	3301      	adds	r3, #1
 800a690:	72fb      	strb	r3, [r7, #11]
          break;
 800a692:	e021      	b.n	800a6d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a69a:	699b      	ldr	r3, [r3, #24]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d00b      	beq.n	800a6b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a6a6:	699b      	ldr	r3, [r3, #24]
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	7c12      	ldrb	r2, [r2, #16]
 800a6ac:	f107 0108 	add.w	r1, r7, #8
 800a6b0:	4610      	mov	r0, r2
 800a6b2:	4798      	blx	r3
 800a6b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6b6:	e00f      	b.n	800a6d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a6b8:	6839      	ldr	r1, [r7, #0]
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 fa15 	bl	800aaea <USBD_CtlError>
            err++;
 800a6c0:	7afb      	ldrb	r3, [r7, #11]
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	72fb      	strb	r3, [r7, #11]
          break;
 800a6c6:	e007      	b.n	800a6d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a6c8:	6839      	ldr	r1, [r7, #0]
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 fa0d 	bl	800aaea <USBD_CtlError>
          err++;
 800a6d0:	7afb      	ldrb	r3, [r7, #11]
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a6d6:	e038      	b.n	800a74a <USBD_GetDescriptor+0x286>
 800a6d8:	e037      	b.n	800a74a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	7c1b      	ldrb	r3, [r3, #16]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d109      	bne.n	800a6f6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ea:	f107 0208 	add.w	r2, r7, #8
 800a6ee:	4610      	mov	r0, r2
 800a6f0:	4798      	blx	r3
 800a6f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a6f4:	e029      	b.n	800a74a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a6f6:	6839      	ldr	r1, [r7, #0]
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 f9f6 	bl	800aaea <USBD_CtlError>
        err++;
 800a6fe:	7afb      	ldrb	r3, [r7, #11]
 800a700:	3301      	adds	r3, #1
 800a702:	72fb      	strb	r3, [r7, #11]
      break;
 800a704:	e021      	b.n	800a74a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	7c1b      	ldrb	r3, [r3, #16]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d10d      	bne.n	800a72a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a716:	f107 0208 	add.w	r2, r7, #8
 800a71a:	4610      	mov	r0, r2
 800a71c:	4798      	blx	r3
 800a71e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	3301      	adds	r3, #1
 800a724:	2207      	movs	r2, #7
 800a726:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a728:	e00f      	b.n	800a74a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a72a:	6839      	ldr	r1, [r7, #0]
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 f9dc 	bl	800aaea <USBD_CtlError>
        err++;
 800a732:	7afb      	ldrb	r3, [r7, #11]
 800a734:	3301      	adds	r3, #1
 800a736:	72fb      	strb	r3, [r7, #11]
      break;
 800a738:	e007      	b.n	800a74a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a73a:	6839      	ldr	r1, [r7, #0]
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f000 f9d4 	bl	800aaea <USBD_CtlError>
      err++;
 800a742:	7afb      	ldrb	r3, [r7, #11]
 800a744:	3301      	adds	r3, #1
 800a746:	72fb      	strb	r3, [r7, #11]
      break;
 800a748:	bf00      	nop
  }

  if (err != 0U)
 800a74a:	7afb      	ldrb	r3, [r7, #11]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d11c      	bne.n	800a78a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a750:	893b      	ldrh	r3, [r7, #8]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d011      	beq.n	800a77a <USBD_GetDescriptor+0x2b6>
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	88db      	ldrh	r3, [r3, #6]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00d      	beq.n	800a77a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	88da      	ldrh	r2, [r3, #6]
 800a762:	893b      	ldrh	r3, [r7, #8]
 800a764:	4293      	cmp	r3, r2
 800a766:	bf28      	it	cs
 800a768:	4613      	movcs	r3, r2
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a76e:	893b      	ldrh	r3, [r7, #8]
 800a770:	461a      	mov	r2, r3
 800a772:	68f9      	ldr	r1, [r7, #12]
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 fa22 	bl	800abbe <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	88db      	ldrh	r3, [r3, #6]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d104      	bne.n	800a78c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 fa79 	bl	800ac7a <USBD_CtlSendStatus>
 800a788:	e000      	b.n	800a78c <USBD_GetDescriptor+0x2c8>
    return;
 800a78a:	bf00      	nop
    }
  }
}
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop

0800a794 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	889b      	ldrh	r3, [r3, #4]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d130      	bne.n	800a808 <USBD_SetAddress+0x74>
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	88db      	ldrh	r3, [r3, #6]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d12c      	bne.n	800a808 <USBD_SetAddress+0x74>
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	885b      	ldrh	r3, [r3, #2]
 800a7b2:	2b7f      	cmp	r3, #127	; 0x7f
 800a7b4:	d828      	bhi.n	800a808 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	885b      	ldrh	r3, [r3, #2]
 800a7ba:	b2db      	uxtb	r3, r3
 800a7bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7c8:	2b03      	cmp	r3, #3
 800a7ca:	d104      	bne.n	800a7d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a7cc:	6839      	ldr	r1, [r7, #0]
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 f98b 	bl	800aaea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7d4:	e01d      	b.n	800a812 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	7bfa      	ldrb	r2, [r7, #15]
 800a7da:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a7de:	7bfb      	ldrb	r3, [r7, #15]
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 fe4c 	bl	800b480 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 fa46 	bl	800ac7a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a7ee:	7bfb      	ldrb	r3, [r7, #15]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d004      	beq.n	800a7fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2202      	movs	r2, #2
 800a7f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7fc:	e009      	b.n	800a812 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2201      	movs	r2, #1
 800a802:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a806:	e004      	b.n	800a812 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a808:	6839      	ldr	r1, [r7, #0]
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 f96d 	bl	800aaea <USBD_CtlError>
  }
}
 800a810:	bf00      	nop
 800a812:	bf00      	nop
 800a814:	3710      	adds	r7, #16
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
	...

0800a81c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	885b      	ldrh	r3, [r3, #2]
 800a82a:	b2da      	uxtb	r2, r3
 800a82c:	4b41      	ldr	r3, [pc, #260]	; (800a934 <USBD_SetConfig+0x118>)
 800a82e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a830:	4b40      	ldr	r3, [pc, #256]	; (800a934 <USBD_SetConfig+0x118>)
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	2b01      	cmp	r3, #1
 800a836:	d904      	bls.n	800a842 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a838:	6839      	ldr	r1, [r7, #0]
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 f955 	bl	800aaea <USBD_CtlError>
 800a840:	e075      	b.n	800a92e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a848:	2b02      	cmp	r3, #2
 800a84a:	d002      	beq.n	800a852 <USBD_SetConfig+0x36>
 800a84c:	2b03      	cmp	r3, #3
 800a84e:	d023      	beq.n	800a898 <USBD_SetConfig+0x7c>
 800a850:	e062      	b.n	800a918 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a852:	4b38      	ldr	r3, [pc, #224]	; (800a934 <USBD_SetConfig+0x118>)
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d01a      	beq.n	800a890 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a85a:	4b36      	ldr	r3, [pc, #216]	; (800a934 <USBD_SetConfig+0x118>)
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	461a      	mov	r2, r3
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2203      	movs	r2, #3
 800a868:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a86c:	4b31      	ldr	r3, [pc, #196]	; (800a934 <USBD_SetConfig+0x118>)
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	4619      	mov	r1, r3
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f7ff f9e7 	bl	8009c46 <USBD_SetClassConfig>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b02      	cmp	r3, #2
 800a87c:	d104      	bne.n	800a888 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a87e:	6839      	ldr	r1, [r7, #0]
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 f932 	bl	800aaea <USBD_CtlError>
            return;
 800a886:	e052      	b.n	800a92e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 f9f6 	bl	800ac7a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a88e:	e04e      	b.n	800a92e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 f9f2 	bl	800ac7a <USBD_CtlSendStatus>
        break;
 800a896:	e04a      	b.n	800a92e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a898:	4b26      	ldr	r3, [pc, #152]	; (800a934 <USBD_SetConfig+0x118>)
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d112      	bne.n	800a8c6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2202      	movs	r2, #2
 800a8a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a8a8:	4b22      	ldr	r3, [pc, #136]	; (800a934 <USBD_SetConfig+0x118>)
 800a8aa:	781b      	ldrb	r3, [r3, #0]
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a8b2:	4b20      	ldr	r3, [pc, #128]	; (800a934 <USBD_SetConfig+0x118>)
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f7ff f9e3 	bl	8009c84 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 f9db 	bl	800ac7a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a8c4:	e033      	b.n	800a92e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a8c6:	4b1b      	ldr	r3, [pc, #108]	; (800a934 <USBD_SetConfig+0x118>)
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d01d      	beq.n	800a910 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	b2db      	uxtb	r3, r3
 800a8da:	4619      	mov	r1, r3
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f7ff f9d1 	bl	8009c84 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a8e2:	4b14      	ldr	r3, [pc, #80]	; (800a934 <USBD_SetConfig+0x118>)
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a8ec:	4b11      	ldr	r3, [pc, #68]	; (800a934 <USBD_SetConfig+0x118>)
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f7ff f9a7 	bl	8009c46 <USBD_SetClassConfig>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b02      	cmp	r3, #2
 800a8fc:	d104      	bne.n	800a908 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a8fe:	6839      	ldr	r1, [r7, #0]
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 f8f2 	bl	800aaea <USBD_CtlError>
            return;
 800a906:	e012      	b.n	800a92e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 f9b6 	bl	800ac7a <USBD_CtlSendStatus>
        break;
 800a90e:	e00e      	b.n	800a92e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 f9b2 	bl	800ac7a <USBD_CtlSendStatus>
        break;
 800a916:	e00a      	b.n	800a92e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a918:	6839      	ldr	r1, [r7, #0]
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 f8e5 	bl	800aaea <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a920:	4b04      	ldr	r3, [pc, #16]	; (800a934 <USBD_SetConfig+0x118>)
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	4619      	mov	r1, r3
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f7ff f9ac 	bl	8009c84 <USBD_ClrClassConfig>
        break;
 800a92c:	bf00      	nop
    }
  }
}
 800a92e:	3708      	adds	r7, #8
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	20000280 	.word	0x20000280

0800a938 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	88db      	ldrh	r3, [r3, #6]
 800a946:	2b01      	cmp	r3, #1
 800a948:	d004      	beq.n	800a954 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a94a:	6839      	ldr	r1, [r7, #0]
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f000 f8cc 	bl	800aaea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a952:	e022      	b.n	800a99a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	dc02      	bgt.n	800a964 <USBD_GetConfig+0x2c>
 800a95e:	2b00      	cmp	r3, #0
 800a960:	dc03      	bgt.n	800a96a <USBD_GetConfig+0x32>
 800a962:	e015      	b.n	800a990 <USBD_GetConfig+0x58>
 800a964:	2b03      	cmp	r3, #3
 800a966:	d00b      	beq.n	800a980 <USBD_GetConfig+0x48>
 800a968:	e012      	b.n	800a990 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	3308      	adds	r3, #8
 800a974:	2201      	movs	r2, #1
 800a976:	4619      	mov	r1, r3
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 f920 	bl	800abbe <USBD_CtlSendData>
        break;
 800a97e:	e00c      	b.n	800a99a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	3304      	adds	r3, #4
 800a984:	2201      	movs	r2, #1
 800a986:	4619      	mov	r1, r3
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 f918 	bl	800abbe <USBD_CtlSendData>
        break;
 800a98e:	e004      	b.n	800a99a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a990:	6839      	ldr	r1, [r7, #0]
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 f8a9 	bl	800aaea <USBD_CtlError>
        break;
 800a998:	bf00      	nop
}
 800a99a:	bf00      	nop
 800a99c:	3708      	adds	r7, #8
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b082      	sub	sp, #8
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
 800a9aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	2b02      	cmp	r3, #2
 800a9b6:	d81e      	bhi.n	800a9f6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	88db      	ldrh	r3, [r3, #6]
 800a9bc:	2b02      	cmp	r3, #2
 800a9be:	d004      	beq.n	800a9ca <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a9c0:	6839      	ldr	r1, [r7, #0]
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 f891 	bl	800aaea <USBD_CtlError>
        break;
 800a9c8:	e01a      	b.n	800aa00 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d005      	beq.n	800a9e6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	68db      	ldr	r3, [r3, #12]
 800a9de:	f043 0202 	orr.w	r2, r3, #2
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	330c      	adds	r3, #12
 800a9ea:	2202      	movs	r2, #2
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 f8e5 	bl	800abbe <USBD_CtlSendData>
      break;
 800a9f4:	e004      	b.n	800aa00 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a9f6:	6839      	ldr	r1, [r7, #0]
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 f876 	bl	800aaea <USBD_CtlError>
      break;
 800a9fe:	bf00      	nop
  }
}
 800aa00:	bf00      	nop
 800aa02:	3708      	adds	r7, #8
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	885b      	ldrh	r3, [r3, #2]
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d106      	bne.n	800aa28 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 f929 	bl	800ac7a <USBD_CtlSendStatus>
  }
}
 800aa28:	bf00      	nop
 800aa2a:	3708      	adds	r7, #8
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa40:	3b01      	subs	r3, #1
 800aa42:	2b02      	cmp	r3, #2
 800aa44:	d80b      	bhi.n	800aa5e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	885b      	ldrh	r3, [r3, #2]
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d10c      	bne.n	800aa68 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 f90f 	bl	800ac7a <USBD_CtlSendStatus>
      }
      break;
 800aa5c:	e004      	b.n	800aa68 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800aa5e:	6839      	ldr	r1, [r7, #0]
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 f842 	bl	800aaea <USBD_CtlError>
      break;
 800aa66:	e000      	b.n	800aa6a <USBD_ClrFeature+0x3a>
      break;
 800aa68:	bf00      	nop
  }
}
 800aa6a:	bf00      	nop
 800aa6c:	3708      	adds	r7, #8
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}

0800aa72 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aa72:	b480      	push	{r7}
 800aa74:	b083      	sub	sp, #12
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
 800aa7a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	781a      	ldrb	r2, [r3, #0]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	785a      	ldrb	r2, [r3, #1]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	3302      	adds	r3, #2
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	3303      	adds	r3, #3
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	021b      	lsls	r3, r3, #8
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	4413      	add	r3, r2
 800aaa2:	b29a      	uxth	r2, r3
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	3304      	adds	r3, #4
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	b29a      	uxth	r2, r3
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	3305      	adds	r3, #5
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	021b      	lsls	r3, r3, #8
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	4413      	add	r3, r2
 800aabe:	b29a      	uxth	r2, r3
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	3306      	adds	r3, #6
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	3307      	adds	r3, #7
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	021b      	lsls	r3, r3, #8
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	4413      	add	r3, r2
 800aada:	b29a      	uxth	r2, r3
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	80da      	strh	r2, [r3, #6]

}
 800aae0:	bf00      	nop
 800aae2:	370c      	adds	r7, #12
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bc80      	pop	{r7}
 800aae8:	4770      	bx	lr

0800aaea <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800aaea:	b580      	push	{r7, lr}
 800aaec:	b082      	sub	sp, #8
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
 800aaf2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800aaf4:	2180      	movs	r1, #128	; 0x80
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 fc58 	bl	800b3ac <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800aafc:	2100      	movs	r1, #0
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 fc54 	bl	800b3ac <USBD_LL_StallEP>
}
 800ab04:	bf00      	nop
 800ab06:	3708      	adds	r7, #8
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b086      	sub	sp, #24
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	60b9      	str	r1, [r7, #8]
 800ab16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d032      	beq.n	800ab88 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	f000 f834 	bl	800ab90 <USBD_GetLen>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	005b      	lsls	r3, r3, #1
 800ab30:	b29a      	uxth	r2, r3
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ab36:	7dfb      	ldrb	r3, [r7, #23]
 800ab38:	1c5a      	adds	r2, r3, #1
 800ab3a:	75fa      	strb	r2, [r7, #23]
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	4413      	add	r3, r2
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	7812      	ldrb	r2, [r2, #0]
 800ab46:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ab48:	7dfb      	ldrb	r3, [r7, #23]
 800ab4a:	1c5a      	adds	r2, r3, #1
 800ab4c:	75fa      	strb	r2, [r7, #23]
 800ab4e:	461a      	mov	r2, r3
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	4413      	add	r3, r2
 800ab54:	2203      	movs	r2, #3
 800ab56:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ab58:	e012      	b.n	800ab80 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	1c5a      	adds	r2, r3, #1
 800ab5e:	60fa      	str	r2, [r7, #12]
 800ab60:	7dfa      	ldrb	r2, [r7, #23]
 800ab62:	1c51      	adds	r1, r2, #1
 800ab64:	75f9      	strb	r1, [r7, #23]
 800ab66:	4611      	mov	r1, r2
 800ab68:	68ba      	ldr	r2, [r7, #8]
 800ab6a:	440a      	add	r2, r1
 800ab6c:	781b      	ldrb	r3, [r3, #0]
 800ab6e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ab70:	7dfb      	ldrb	r3, [r7, #23]
 800ab72:	1c5a      	adds	r2, r3, #1
 800ab74:	75fa      	strb	r2, [r7, #23]
 800ab76:	461a      	mov	r2, r3
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	4413      	add	r3, r2
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d1e8      	bne.n	800ab5a <USBD_GetString+0x4e>
    }
  }
}
 800ab88:	bf00      	nop
 800ab8a:	3718      	adds	r7, #24
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b085      	sub	sp, #20
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800ab9c:	e005      	b.n	800abaa <USBD_GetLen+0x1a>
  {
    len++;
 800ab9e:	7bfb      	ldrb	r3, [r7, #15]
 800aba0:	3301      	adds	r3, #1
 800aba2:	73fb      	strb	r3, [r7, #15]
    buf++;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	3301      	adds	r3, #1
 800aba8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d1f5      	bne.n	800ab9e <USBD_GetLen+0xe>
  }

  return len;
 800abb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3714      	adds	r7, #20
 800abb8:	46bd      	mov	sp, r7
 800abba:	bc80      	pop	{r7}
 800abbc:	4770      	bx	lr

0800abbe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b084      	sub	sp, #16
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	60f8      	str	r0, [r7, #12]
 800abc6:	60b9      	str	r1, [r7, #8]
 800abc8:	4613      	mov	r3, r2
 800abca:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2202      	movs	r2, #2
 800abd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800abd4:	88fa      	ldrh	r2, [r7, #6]
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800abda:	88fa      	ldrh	r2, [r7, #6]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800abe0:	88fb      	ldrh	r3, [r7, #6]
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	2100      	movs	r1, #0
 800abe6:	68f8      	ldr	r0, [r7, #12]
 800abe8:	f000 fc69 	bl	800b4be <USBD_LL_Transmit>

  return USBD_OK;
 800abec:	2300      	movs	r3, #0
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3710      	adds	r7, #16
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b084      	sub	sp, #16
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	60f8      	str	r0, [r7, #12]
 800abfe:	60b9      	str	r1, [r7, #8]
 800ac00:	4613      	mov	r3, r2
 800ac02:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ac04:	88fb      	ldrh	r3, [r7, #6]
 800ac06:	68ba      	ldr	r2, [r7, #8]
 800ac08:	2100      	movs	r1, #0
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	f000 fc57 	bl	800b4be <USBD_LL_Transmit>

  return USBD_OK;
 800ac10:	2300      	movs	r3, #0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3710      	adds	r7, #16
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b084      	sub	sp, #16
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	60f8      	str	r0, [r7, #12]
 800ac22:	60b9      	str	r1, [r7, #8]
 800ac24:	4613      	mov	r3, r2
 800ac26:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2203      	movs	r2, #3
 800ac2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ac30:	88fa      	ldrh	r2, [r7, #6]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800ac38:	88fa      	ldrh	r2, [r7, #6]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac40:	88fb      	ldrh	r3, [r7, #6]
 800ac42:	68ba      	ldr	r2, [r7, #8]
 800ac44:	2100      	movs	r1, #0
 800ac46:	68f8      	ldr	r0, [r7, #12]
 800ac48:	f000 fc5c 	bl	800b504 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac4c:	2300      	movs	r3, #0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3710      	adds	r7, #16
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}

0800ac56 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b084      	sub	sp, #16
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	60f8      	str	r0, [r7, #12]
 800ac5e:	60b9      	str	r1, [r7, #8]
 800ac60:	4613      	mov	r3, r2
 800ac62:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac64:	88fb      	ldrh	r3, [r7, #6]
 800ac66:	68ba      	ldr	r2, [r7, #8]
 800ac68:	2100      	movs	r1, #0
 800ac6a:	68f8      	ldr	r0, [r7, #12]
 800ac6c:	f000 fc4a 	bl	800b504 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac70:	2300      	movs	r3, #0
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}

0800ac7a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b082      	sub	sp, #8
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2204      	movs	r2, #4
 800ac86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	2100      	movs	r1, #0
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 fc14 	bl	800b4be <USBD_LL_Transmit>

  return USBD_OK;
 800ac96:	2300      	movs	r3, #0
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3708      	adds	r7, #8
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b082      	sub	sp, #8
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2205      	movs	r2, #5
 800acac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800acb0:	2300      	movs	r3, #0
 800acb2:	2200      	movs	r2, #0
 800acb4:	2100      	movs	r1, #0
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 fc24 	bl	800b504 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800acbc:	2300      	movs	r3, #0
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3708      	adds	r7, #8
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
	...

0800acc8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800accc:	2200      	movs	r2, #0
 800acce:	4912      	ldr	r1, [pc, #72]	; (800ad18 <MX_USB_DEVICE_Init+0x50>)
 800acd0:	4812      	ldr	r0, [pc, #72]	; (800ad1c <MX_USB_DEVICE_Init+0x54>)
 800acd2:	f7fe ff5e 	bl	8009b92 <USBD_Init>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d001      	beq.n	800ace0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800acdc:	f7f7 fe5c 	bl	8002998 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ace0:	490f      	ldr	r1, [pc, #60]	; (800ad20 <MX_USB_DEVICE_Init+0x58>)
 800ace2:	480e      	ldr	r0, [pc, #56]	; (800ad1c <MX_USB_DEVICE_Init+0x54>)
 800ace4:	f7fe ff80 	bl	8009be8 <USBD_RegisterClass>
 800ace8:	4603      	mov	r3, r0
 800acea:	2b00      	cmp	r3, #0
 800acec:	d001      	beq.n	800acf2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800acee:	f7f7 fe53 	bl	8002998 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800acf2:	490c      	ldr	r1, [pc, #48]	; (800ad24 <MX_USB_DEVICE_Init+0x5c>)
 800acf4:	4809      	ldr	r0, [pc, #36]	; (800ad1c <MX_USB_DEVICE_Init+0x54>)
 800acf6:	f7fe feb1 	bl	8009a5c <USBD_CDC_RegisterInterface>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d001      	beq.n	800ad04 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ad00:	f7f7 fe4a 	bl	8002998 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ad04:	4805      	ldr	r0, [pc, #20]	; (800ad1c <MX_USB_DEVICE_Init+0x54>)
 800ad06:	f7fe ff88 	bl	8009c1a <USBD_Start>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d001      	beq.n	800ad14 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ad10:	f7f7 fe42 	bl	8002998 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ad14:	bf00      	nop
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	20000140 	.word	0x20000140
 800ad1c:	200009f0 	.word	0x200009f0
 800ad20:	2000002c 	.word	0x2000002c
 800ad24:	20000130 	.word	0x20000130

0800ad28 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	4905      	ldr	r1, [pc, #20]	; (800ad44 <CDC_Init_FS+0x1c>)
 800ad30:	4805      	ldr	r0, [pc, #20]	; (800ad48 <CDC_Init_FS+0x20>)
 800ad32:	f7fe fea9 	bl	8009a88 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ad36:	4905      	ldr	r1, [pc, #20]	; (800ad4c <CDC_Init_FS+0x24>)
 800ad38:	4803      	ldr	r0, [pc, #12]	; (800ad48 <CDC_Init_FS+0x20>)
 800ad3a:	f7fe febe 	bl	8009aba <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800ad3e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	20000eb4 	.word	0x20000eb4
 800ad48:	200009f0 	.word	0x200009f0
 800ad4c:	20000cb4 	.word	0x20000cb4

0800ad50 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ad50:	b480      	push	{r7}
 800ad52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 800ad54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bc80      	pop	{r7}
 800ad5c:	4770      	bx	lr
	...

0800ad60 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b083      	sub	sp, #12
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	4603      	mov	r3, r0
 800ad68:	6039      	str	r1, [r7, #0]
 800ad6a:	71fb      	strb	r3, [r7, #7]
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd)
 800ad70:	79fb      	ldrb	r3, [r7, #7]
 800ad72:	2b23      	cmp	r3, #35	; 0x23
 800ad74:	d84a      	bhi.n	800ae0c <CDC_Control_FS+0xac>
 800ad76:	a201      	add	r2, pc, #4	; (adr r2, 800ad7c <CDC_Control_FS+0x1c>)
 800ad78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad7c:	0800ae0d 	.word	0x0800ae0d
 800ad80:	0800ae0d 	.word	0x0800ae0d
 800ad84:	0800ae0d 	.word	0x0800ae0d
 800ad88:	0800ae0d 	.word	0x0800ae0d
 800ad8c:	0800ae0d 	.word	0x0800ae0d
 800ad90:	0800ae0d 	.word	0x0800ae0d
 800ad94:	0800ae0d 	.word	0x0800ae0d
 800ad98:	0800ae0d 	.word	0x0800ae0d
 800ad9c:	0800ae0d 	.word	0x0800ae0d
 800ada0:	0800ae0d 	.word	0x0800ae0d
 800ada4:	0800ae0d 	.word	0x0800ae0d
 800ada8:	0800ae0d 	.word	0x0800ae0d
 800adac:	0800ae0d 	.word	0x0800ae0d
 800adb0:	0800ae0d 	.word	0x0800ae0d
 800adb4:	0800ae0d 	.word	0x0800ae0d
 800adb8:	0800ae0d 	.word	0x0800ae0d
 800adbc:	0800ae0d 	.word	0x0800ae0d
 800adc0:	0800ae0d 	.word	0x0800ae0d
 800adc4:	0800ae0d 	.word	0x0800ae0d
 800adc8:	0800ae0d 	.word	0x0800ae0d
 800adcc:	0800ae0d 	.word	0x0800ae0d
 800add0:	0800ae0d 	.word	0x0800ae0d
 800add4:	0800ae0d 	.word	0x0800ae0d
 800add8:	0800ae0d 	.word	0x0800ae0d
 800addc:	0800ae0d 	.word	0x0800ae0d
 800ade0:	0800ae0d 	.word	0x0800ae0d
 800ade4:	0800ae0d 	.word	0x0800ae0d
 800ade8:	0800ae0d 	.word	0x0800ae0d
 800adec:	0800ae0d 	.word	0x0800ae0d
 800adf0:	0800ae0d 	.word	0x0800ae0d
 800adf4:	0800ae0d 	.word	0x0800ae0d
 800adf8:	0800ae0d 	.word	0x0800ae0d
 800adfc:	0800ae0d 	.word	0x0800ae0d
 800ae00:	0800ae0d 	.word	0x0800ae0d
 800ae04:	0800ae0d 	.word	0x0800ae0d
 800ae08:	0800ae0d 	.word	0x0800ae0d
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800ae0c:	bf00      	nop
	}

	return (USBD_OK);
 800ae0e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	370c      	adds	r7, #12
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bc80      	pop	{r7}
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop

0800ae1c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ae26:	6879      	ldr	r1, [r7, #4]
 800ae28:	4807      	ldr	r0, [pc, #28]	; (800ae48 <CDC_Receive_FS+0x2c>)
 800ae2a:	f7fe fe46 	bl	8009aba <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ae2e:	4806      	ldr	r0, [pc, #24]	; (800ae48 <CDC_Receive_FS+0x2c>)
 800ae30:	f7fe fe85 	bl	8009b3e <USBD_CDC_ReceivePacket>

	runCommands(Buf, Len);
 800ae34:	6839      	ldr	r1, [r7, #0]
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f7f6 fd9a 	bl	8001970 <runCommands>
	return (USBD_OK);
 800ae3c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3708      	adds	r7, #8
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	200009f0 	.word	0x200009f0

0800ae4c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	460b      	mov	r3, r1
 800ae56:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800ae5c:	4b0d      	ldr	r3, [pc, #52]	; (800ae94 <CDC_Transmit_FS+0x48>)
 800ae5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae62:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0)
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d001      	beq.n	800ae72 <CDC_Transmit_FS+0x26>
	{
		return USBD_BUSY;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	e00b      	b.n	800ae8a <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ae72:	887b      	ldrh	r3, [r7, #2]
 800ae74:	461a      	mov	r2, r3
 800ae76:	6879      	ldr	r1, [r7, #4]
 800ae78:	4806      	ldr	r0, [pc, #24]	; (800ae94 <CDC_Transmit_FS+0x48>)
 800ae7a:	f7fe fe05 	bl	8009a88 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ae7e:	4805      	ldr	r0, [pc, #20]	; (800ae94 <CDC_Transmit_FS+0x48>)
 800ae80:	f7fe fe2e 	bl	8009ae0 <USBD_CDC_TransmitPacket>
 800ae84:	4603      	mov	r3, r0
 800ae86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ae88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3710      	adds	r7, #16
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	200009f0 	.word	0x200009f0

0800ae98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	4603      	mov	r3, r0
 800aea0:	6039      	str	r1, [r7, #0]
 800aea2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	2212      	movs	r2, #18
 800aea8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aeaa:	4b03      	ldr	r3, [pc, #12]	; (800aeb8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	370c      	adds	r7, #12
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bc80      	pop	{r7}
 800aeb4:	4770      	bx	lr
 800aeb6:	bf00      	nop
 800aeb8:	2000015c 	.word	0x2000015c

0800aebc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	4603      	mov	r3, r0
 800aec4:	6039      	str	r1, [r7, #0]
 800aec6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	2204      	movs	r2, #4
 800aecc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aece:	4b03      	ldr	r3, [pc, #12]	; (800aedc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	370c      	adds	r7, #12
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bc80      	pop	{r7}
 800aed8:	4770      	bx	lr
 800aeda:	bf00      	nop
 800aedc:	20000170 	.word	0x20000170

0800aee0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	4603      	mov	r3, r0
 800aee8:	6039      	str	r1, [r7, #0]
 800aeea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aeec:	79fb      	ldrb	r3, [r7, #7]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d105      	bne.n	800aefe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aef2:	683a      	ldr	r2, [r7, #0]
 800aef4:	4907      	ldr	r1, [pc, #28]	; (800af14 <USBD_FS_ProductStrDescriptor+0x34>)
 800aef6:	4808      	ldr	r0, [pc, #32]	; (800af18 <USBD_FS_ProductStrDescriptor+0x38>)
 800aef8:	f7ff fe08 	bl	800ab0c <USBD_GetString>
 800aefc:	e004      	b.n	800af08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aefe:	683a      	ldr	r2, [r7, #0]
 800af00:	4904      	ldr	r1, [pc, #16]	; (800af14 <USBD_FS_ProductStrDescriptor+0x34>)
 800af02:	4805      	ldr	r0, [pc, #20]	; (800af18 <USBD_FS_ProductStrDescriptor+0x38>)
 800af04:	f7ff fe02 	bl	800ab0c <USBD_GetString>
  }
  return USBD_StrDesc;
 800af08:	4b02      	ldr	r3, [pc, #8]	; (800af14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3708      	adds	r7, #8
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	200010b4 	.word	0x200010b4
 800af18:	0800ca98 	.word	0x0800ca98

0800af1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
 800af22:	4603      	mov	r3, r0
 800af24:	6039      	str	r1, [r7, #0]
 800af26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800af28:	683a      	ldr	r2, [r7, #0]
 800af2a:	4904      	ldr	r1, [pc, #16]	; (800af3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800af2c:	4804      	ldr	r0, [pc, #16]	; (800af40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800af2e:	f7ff fded 	bl	800ab0c <USBD_GetString>
  return USBD_StrDesc;
 800af32:	4b02      	ldr	r3, [pc, #8]	; (800af3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800af34:	4618      	mov	r0, r3
 800af36:	3708      	adds	r7, #8
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	200010b4 	.word	0x200010b4
 800af40:	0800cab0 	.word	0x0800cab0

0800af44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
 800af4a:	4603      	mov	r3, r0
 800af4c:	6039      	str	r1, [r7, #0]
 800af4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	221a      	movs	r2, #26
 800af54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800af56:	f000 f843 	bl	800afe0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800af5a:	4b02      	ldr	r3, [pc, #8]	; (800af64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}
 800af64:	20000174 	.word	0x20000174

0800af68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	4603      	mov	r3, r0
 800af70:	6039      	str	r1, [r7, #0]
 800af72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800af74:	79fb      	ldrb	r3, [r7, #7]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d105      	bne.n	800af86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800af7a:	683a      	ldr	r2, [r7, #0]
 800af7c:	4907      	ldr	r1, [pc, #28]	; (800af9c <USBD_FS_ConfigStrDescriptor+0x34>)
 800af7e:	4808      	ldr	r0, [pc, #32]	; (800afa0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800af80:	f7ff fdc4 	bl	800ab0c <USBD_GetString>
 800af84:	e004      	b.n	800af90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800af86:	683a      	ldr	r2, [r7, #0]
 800af88:	4904      	ldr	r1, [pc, #16]	; (800af9c <USBD_FS_ConfigStrDescriptor+0x34>)
 800af8a:	4805      	ldr	r0, [pc, #20]	; (800afa0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800af8c:	f7ff fdbe 	bl	800ab0c <USBD_GetString>
  }
  return USBD_StrDesc;
 800af90:	4b02      	ldr	r3, [pc, #8]	; (800af9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800af92:	4618      	mov	r0, r3
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	200010b4 	.word	0x200010b4
 800afa0:	0800cac4 	.word	0x0800cac4

0800afa4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	4603      	mov	r3, r0
 800afac:	6039      	str	r1, [r7, #0]
 800afae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800afb0:	79fb      	ldrb	r3, [r7, #7]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d105      	bne.n	800afc2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800afb6:	683a      	ldr	r2, [r7, #0]
 800afb8:	4907      	ldr	r1, [pc, #28]	; (800afd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800afba:	4808      	ldr	r0, [pc, #32]	; (800afdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800afbc:	f7ff fda6 	bl	800ab0c <USBD_GetString>
 800afc0:	e004      	b.n	800afcc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800afc2:	683a      	ldr	r2, [r7, #0]
 800afc4:	4904      	ldr	r1, [pc, #16]	; (800afd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800afc6:	4805      	ldr	r0, [pc, #20]	; (800afdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800afc8:	f7ff fda0 	bl	800ab0c <USBD_GetString>
  }
  return USBD_StrDesc;
 800afcc:	4b02      	ldr	r3, [pc, #8]	; (800afd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3708      	adds	r7, #8
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
 800afd6:	bf00      	nop
 800afd8:	200010b4 	.word	0x200010b4
 800afdc:	0800cad0 	.word	0x0800cad0

0800afe0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800afe6:	4b0f      	ldr	r3, [pc, #60]	; (800b024 <Get_SerialNum+0x44>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800afec:	4b0e      	ldr	r3, [pc, #56]	; (800b028 <Get_SerialNum+0x48>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aff2:	4b0e      	ldr	r3, [pc, #56]	; (800b02c <Get_SerialNum+0x4c>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aff8:	68fa      	ldr	r2, [r7, #12]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4413      	add	r3, r2
 800affe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d009      	beq.n	800b01a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b006:	2208      	movs	r2, #8
 800b008:	4909      	ldr	r1, [pc, #36]	; (800b030 <Get_SerialNum+0x50>)
 800b00a:	68f8      	ldr	r0, [r7, #12]
 800b00c:	f000 f814 	bl	800b038 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b010:	2204      	movs	r2, #4
 800b012:	4908      	ldr	r1, [pc, #32]	; (800b034 <Get_SerialNum+0x54>)
 800b014:	68b8      	ldr	r0, [r7, #8]
 800b016:	f000 f80f 	bl	800b038 <IntToUnicode>
  }
}
 800b01a:	bf00      	nop
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop
 800b024:	1ffff7e8 	.word	0x1ffff7e8
 800b028:	1ffff7ec 	.word	0x1ffff7ec
 800b02c:	1ffff7f0 	.word	0x1ffff7f0
 800b030:	20000176 	.word	0x20000176
 800b034:	20000186 	.word	0x20000186

0800b038 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b038:	b480      	push	{r7}
 800b03a:	b087      	sub	sp, #28
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	4613      	mov	r3, r2
 800b044:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b046:	2300      	movs	r3, #0
 800b048:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b04a:	2300      	movs	r3, #0
 800b04c:	75fb      	strb	r3, [r7, #23]
 800b04e:	e027      	b.n	800b0a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	0f1b      	lsrs	r3, r3, #28
 800b054:	2b09      	cmp	r3, #9
 800b056:	d80b      	bhi.n	800b070 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	0f1b      	lsrs	r3, r3, #28
 800b05c:	b2da      	uxtb	r2, r3
 800b05e:	7dfb      	ldrb	r3, [r7, #23]
 800b060:	005b      	lsls	r3, r3, #1
 800b062:	4619      	mov	r1, r3
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	440b      	add	r3, r1
 800b068:	3230      	adds	r2, #48	; 0x30
 800b06a:	b2d2      	uxtb	r2, r2
 800b06c:	701a      	strb	r2, [r3, #0]
 800b06e:	e00a      	b.n	800b086 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	0f1b      	lsrs	r3, r3, #28
 800b074:	b2da      	uxtb	r2, r3
 800b076:	7dfb      	ldrb	r3, [r7, #23]
 800b078:	005b      	lsls	r3, r3, #1
 800b07a:	4619      	mov	r1, r3
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	440b      	add	r3, r1
 800b080:	3237      	adds	r2, #55	; 0x37
 800b082:	b2d2      	uxtb	r2, r2
 800b084:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	011b      	lsls	r3, r3, #4
 800b08a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b08c:	7dfb      	ldrb	r3, [r7, #23]
 800b08e:	005b      	lsls	r3, r3, #1
 800b090:	3301      	adds	r3, #1
 800b092:	68ba      	ldr	r2, [r7, #8]
 800b094:	4413      	add	r3, r2
 800b096:	2200      	movs	r2, #0
 800b098:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b09a:	7dfb      	ldrb	r3, [r7, #23]
 800b09c:	3301      	adds	r3, #1
 800b09e:	75fb      	strb	r3, [r7, #23]
 800b0a0:	7dfa      	ldrb	r2, [r7, #23]
 800b0a2:	79fb      	ldrb	r3, [r7, #7]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d3d3      	bcc.n	800b050 <IntToUnicode+0x18>
  }
}
 800b0a8:	bf00      	nop
 800b0aa:	bf00      	nop
 800b0ac:	371c      	adds	r7, #28
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bc80      	pop	{r7}
 800b0b2:	4770      	bx	lr

0800b0b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4a0d      	ldr	r2, [pc, #52]	; (800b0f8 <HAL_PCD_MspInit+0x44>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d113      	bne.n	800b0ee <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b0c6:	4b0d      	ldr	r3, [pc, #52]	; (800b0fc <HAL_PCD_MspInit+0x48>)
 800b0c8:	69db      	ldr	r3, [r3, #28]
 800b0ca:	4a0c      	ldr	r2, [pc, #48]	; (800b0fc <HAL_PCD_MspInit+0x48>)
 800b0cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b0d0:	61d3      	str	r3, [r2, #28]
 800b0d2:	4b0a      	ldr	r3, [pc, #40]	; (800b0fc <HAL_PCD_MspInit+0x48>)
 800b0d4:	69db      	ldr	r3, [r3, #28]
 800b0d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b0da:	60fb      	str	r3, [r7, #12]
 800b0dc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b0de:	2200      	movs	r2, #0
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	2014      	movs	r0, #20
 800b0e4:	f7f8 fcbf 	bl	8003a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b0e8:	2014      	movs	r0, #20
 800b0ea:	f7f8 fcd8 	bl	8003a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b0ee:	bf00      	nop
 800b0f0:	3710      	adds	r7, #16
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}
 800b0f6:	bf00      	nop
 800b0f8:	40005c00 	.word	0x40005c00
 800b0fc:	40021000 	.word	0x40021000

0800b100 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b114:	4619      	mov	r1, r3
 800b116:	4610      	mov	r0, r2
 800b118:	f7fe fdc7 	bl	8009caa <USBD_LL_SetupStage>
}
 800b11c:	bf00      	nop
 800b11e:	3708      	adds	r7, #8
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	460b      	mov	r3, r1
 800b12e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b136:	78fa      	ldrb	r2, [r7, #3]
 800b138:	6879      	ldr	r1, [r7, #4]
 800b13a:	4613      	mov	r3, r2
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	4413      	add	r3, r2
 800b140:	00db      	lsls	r3, r3, #3
 800b142:	440b      	add	r3, r1
 800b144:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	78fb      	ldrb	r3, [r7, #3]
 800b14c:	4619      	mov	r1, r3
 800b14e:	f7fe fdf9 	bl	8009d44 <USBD_LL_DataOutStage>
}
 800b152:	bf00      	nop
 800b154:	3708      	adds	r7, #8
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b082      	sub	sp, #8
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
 800b162:	460b      	mov	r3, r1
 800b164:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b16c:	78fa      	ldrb	r2, [r7, #3]
 800b16e:	6879      	ldr	r1, [r7, #4]
 800b170:	4613      	mov	r3, r2
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	4413      	add	r3, r2
 800b176:	00db      	lsls	r3, r3, #3
 800b178:	440b      	add	r3, r1
 800b17a:	333c      	adds	r3, #60	; 0x3c
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	78fb      	ldrb	r3, [r7, #3]
 800b180:	4619      	mov	r1, r3
 800b182:	f7fe fe50 	bl	8009e26 <USBD_LL_DataInStage>
}
 800b186:	bf00      	nop
 800b188:	3708      	adds	r7, #8
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}

0800b18e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b18e:	b580      	push	{r7, lr}
 800b190:	b082      	sub	sp, #8
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b19c:	4618      	mov	r0, r3
 800b19e:	f7fe ff60 	bl	800a062 <USBD_LL_SOF>
}
 800b1a2:	bf00      	nop
 800b1a4:	3708      	adds	r7, #8
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b084      	sub	sp, #16
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	2b02      	cmp	r3, #2
 800b1bc:	d001      	beq.n	800b1c2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b1be:	f7f7 fbeb 	bl	8002998 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b1c8:	7bfa      	ldrb	r2, [r7, #15]
 800b1ca:	4611      	mov	r1, r2
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7fe ff10 	bl	8009ff2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7fe fec9 	bl	8009f70 <USBD_LL_Reset>
}
 800b1de:	bf00      	nop
 800b1e0:	3710      	adds	r7, #16
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
	...

0800b1e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b082      	sub	sp, #8
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7fe ff0a 	bl	800a010 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	699b      	ldr	r3, [r3, #24]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d005      	beq.n	800b210 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b204:	4b04      	ldr	r3, [pc, #16]	; (800b218 <HAL_PCD_SuspendCallback+0x30>)
 800b206:	691b      	ldr	r3, [r3, #16]
 800b208:	4a03      	ldr	r2, [pc, #12]	; (800b218 <HAL_PCD_SuspendCallback+0x30>)
 800b20a:	f043 0306 	orr.w	r3, r3, #6
 800b20e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b210:	bf00      	nop
 800b212:	3708      	adds	r7, #8
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}
 800b218:	e000ed00 	.word	0xe000ed00

0800b21c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7fe ff04 	bl	800a038 <USBD_LL_Resume>
}
 800b230:	bf00      	nop
 800b232:	3708      	adds	r7, #8
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b240:	4a28      	ldr	r2, [pc, #160]	; (800b2e4 <USBD_LL_Init+0xac>)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	4a26      	ldr	r2, [pc, #152]	; (800b2e4 <USBD_LL_Init+0xac>)
 800b24c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b250:	4b24      	ldr	r3, [pc, #144]	; (800b2e4 <USBD_LL_Init+0xac>)
 800b252:	4a25      	ldr	r2, [pc, #148]	; (800b2e8 <USBD_LL_Init+0xb0>)
 800b254:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b256:	4b23      	ldr	r3, [pc, #140]	; (800b2e4 <USBD_LL_Init+0xac>)
 800b258:	2208      	movs	r2, #8
 800b25a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b25c:	4b21      	ldr	r3, [pc, #132]	; (800b2e4 <USBD_LL_Init+0xac>)
 800b25e:	2202      	movs	r2, #2
 800b260:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b262:	4b20      	ldr	r3, [pc, #128]	; (800b2e4 <USBD_LL_Init+0xac>)
 800b264:	2200      	movs	r2, #0
 800b266:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b268:	4b1e      	ldr	r3, [pc, #120]	; (800b2e4 <USBD_LL_Init+0xac>)
 800b26a:	2200      	movs	r2, #0
 800b26c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b26e:	4b1d      	ldr	r3, [pc, #116]	; (800b2e4 <USBD_LL_Init+0xac>)
 800b270:	2200      	movs	r2, #0
 800b272:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b274:	481b      	ldr	r0, [pc, #108]	; (800b2e4 <USBD_LL_Init+0xac>)
 800b276:	f7f9 f82e 	bl	80042d6 <HAL_PCD_Init>
 800b27a:	4603      	mov	r3, r0
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d001      	beq.n	800b284 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b280:	f7f7 fb8a 	bl	8002998 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b28a:	2318      	movs	r3, #24
 800b28c:	2200      	movs	r2, #0
 800b28e:	2100      	movs	r1, #0
 800b290:	f7fa fb70 	bl	8005974 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b29a:	2358      	movs	r3, #88	; 0x58
 800b29c:	2200      	movs	r2, #0
 800b29e:	2180      	movs	r1, #128	; 0x80
 800b2a0:	f7fa fb68 	bl	8005974 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b2aa:	23c0      	movs	r3, #192	; 0xc0
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	2181      	movs	r1, #129	; 0x81
 800b2b0:	f7fa fb60 	bl	8005974 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b2ba:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b2be:	2200      	movs	r2, #0
 800b2c0:	2101      	movs	r1, #1
 800b2c2:	f7fa fb57 	bl	8005974 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b2cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	2182      	movs	r1, #130	; 0x82
 800b2d4:	f7fa fb4e 	bl	8005974 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b2d8:	2300      	movs	r3, #0
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3708      	adds	r7, #8
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	200012b4 	.word	0x200012b4
 800b2e8:	40005c00 	.word	0x40005c00

0800b2ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b302:	4618      	mov	r0, r3
 800b304:	f7f9 f8f2 	bl	80044ec <HAL_PCD_Start>
 800b308:	4603      	mov	r3, r0
 800b30a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b30c:	7bfb      	ldrb	r3, [r7, #15]
 800b30e:	4618      	mov	r0, r3
 800b310:	f000 f94e 	bl	800b5b0 <USBD_Get_USB_Status>
 800b314:	4603      	mov	r3, r0
 800b316:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b318:	7bbb      	ldrb	r3, [r7, #14]
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3710      	adds	r7, #16
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}

0800b322 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b322:	b580      	push	{r7, lr}
 800b324:	b084      	sub	sp, #16
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
 800b32a:	4608      	mov	r0, r1
 800b32c:	4611      	mov	r1, r2
 800b32e:	461a      	mov	r2, r3
 800b330:	4603      	mov	r3, r0
 800b332:	70fb      	strb	r3, [r7, #3]
 800b334:	460b      	mov	r3, r1
 800b336:	70bb      	strb	r3, [r7, #2]
 800b338:	4613      	mov	r3, r2
 800b33a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b33c:	2300      	movs	r3, #0
 800b33e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b340:	2300      	movs	r3, #0
 800b342:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b34a:	78bb      	ldrb	r3, [r7, #2]
 800b34c:	883a      	ldrh	r2, [r7, #0]
 800b34e:	78f9      	ldrb	r1, [r7, #3]
 800b350:	f7f9 fa6c 	bl	800482c <HAL_PCD_EP_Open>
 800b354:	4603      	mov	r3, r0
 800b356:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b358:	7bfb      	ldrb	r3, [r7, #15]
 800b35a:	4618      	mov	r0, r3
 800b35c:	f000 f928 	bl	800b5b0 <USBD_Get_USB_Status>
 800b360:	4603      	mov	r3, r0
 800b362:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b364:	7bbb      	ldrb	r3, [r7, #14]
}
 800b366:	4618      	mov	r0, r3
 800b368:	3710      	adds	r7, #16
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}

0800b36e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b36e:	b580      	push	{r7, lr}
 800b370:	b084      	sub	sp, #16
 800b372:	af00      	add	r7, sp, #0
 800b374:	6078      	str	r0, [r7, #4]
 800b376:	460b      	mov	r3, r1
 800b378:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b37a:	2300      	movs	r3, #0
 800b37c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b37e:	2300      	movs	r3, #0
 800b380:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b388:	78fa      	ldrb	r2, [r7, #3]
 800b38a:	4611      	mov	r1, r2
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7f9 fab3 	bl	80048f8 <HAL_PCD_EP_Close>
 800b392:	4603      	mov	r3, r0
 800b394:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b396:	7bfb      	ldrb	r3, [r7, #15]
 800b398:	4618      	mov	r0, r3
 800b39a:	f000 f909 	bl	800b5b0 <USBD_Get_USB_Status>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3710      	adds	r7, #16
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b084      	sub	sp, #16
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	460b      	mov	r3, r1
 800b3b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b3c6:	78fa      	ldrb	r2, [r7, #3]
 800b3c8:	4611      	mov	r1, r2
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7f9 fb73 	bl	8004ab6 <HAL_PCD_EP_SetStall>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3d4:	7bfb      	ldrb	r3, [r7, #15]
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f000 f8ea 	bl	800b5b0 <USBD_Get_USB_Status>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3710      	adds	r7, #16
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b084      	sub	sp, #16
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b404:	78fa      	ldrb	r2, [r7, #3]
 800b406:	4611      	mov	r1, r2
 800b408:	4618      	mov	r0, r3
 800b40a:	f7f9 fbb4 	bl	8004b76 <HAL_PCD_EP_ClrStall>
 800b40e:	4603      	mov	r3, r0
 800b410:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b412:	7bfb      	ldrb	r3, [r7, #15]
 800b414:	4618      	mov	r0, r3
 800b416:	f000 f8cb 	bl	800b5b0 <USBD_Get_USB_Status>
 800b41a:	4603      	mov	r3, r0
 800b41c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b41e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b420:	4618      	mov	r0, r3
 800b422:	3710      	adds	r7, #16
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b428:	b480      	push	{r7}
 800b42a:	b085      	sub	sp, #20
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	460b      	mov	r3, r1
 800b432:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b43a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b43c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b440:	2b00      	cmp	r3, #0
 800b442:	da0c      	bge.n	800b45e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b444:	78fb      	ldrb	r3, [r7, #3]
 800b446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b44a:	68f9      	ldr	r1, [r7, #12]
 800b44c:	1c5a      	adds	r2, r3, #1
 800b44e:	4613      	mov	r3, r2
 800b450:	009b      	lsls	r3, r3, #2
 800b452:	4413      	add	r3, r2
 800b454:	00db      	lsls	r3, r3, #3
 800b456:	440b      	add	r3, r1
 800b458:	3302      	adds	r3, #2
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	e00b      	b.n	800b476 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b45e:	78fb      	ldrb	r3, [r7, #3]
 800b460:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b464:	68f9      	ldr	r1, [r7, #12]
 800b466:	4613      	mov	r3, r2
 800b468:	009b      	lsls	r3, r3, #2
 800b46a:	4413      	add	r3, r2
 800b46c:	00db      	lsls	r3, r3, #3
 800b46e:	440b      	add	r3, r1
 800b470:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b474:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b476:	4618      	mov	r0, r3
 800b478:	3714      	adds	r7, #20
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bc80      	pop	{r7}
 800b47e:	4770      	bx	lr

0800b480 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	460b      	mov	r3, r1
 800b48a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b48c:	2300      	movs	r3, #0
 800b48e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b490:	2300      	movs	r3, #0
 800b492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b49a:	78fa      	ldrb	r2, [r7, #3]
 800b49c:	4611      	mov	r1, r2
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f7f9 f99f 	bl	80047e2 <HAL_PCD_SetAddress>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4a8:	7bfb      	ldrb	r3, [r7, #15]
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f000 f880 	bl	800b5b0 <USBD_Get_USB_Status>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3710      	adds	r7, #16
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}

0800b4be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b4be:	b580      	push	{r7, lr}
 800b4c0:	b086      	sub	sp, #24
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	60f8      	str	r0, [r7, #12]
 800b4c6:	607a      	str	r2, [r7, #4]
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	72fb      	strb	r3, [r7, #11]
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b4e0:	893b      	ldrh	r3, [r7, #8]
 800b4e2:	7af9      	ldrb	r1, [r7, #11]
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	f7f9 faa3 	bl	8004a30 <HAL_PCD_EP_Transmit>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4ee:	7dfb      	ldrb	r3, [r7, #23]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f000 f85d 	bl	800b5b0 <USBD_Get_USB_Status>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b4fa:	7dbb      	ldrb	r3, [r7, #22]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3718      	adds	r7, #24
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b086      	sub	sp, #24
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	607a      	str	r2, [r7, #4]
 800b50e:	461a      	mov	r2, r3
 800b510:	460b      	mov	r3, r1
 800b512:	72fb      	strb	r3, [r7, #11]
 800b514:	4613      	mov	r3, r2
 800b516:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b518:	2300      	movs	r3, #0
 800b51a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b51c:	2300      	movs	r3, #0
 800b51e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b526:	893b      	ldrh	r3, [r7, #8]
 800b528:	7af9      	ldrb	r1, [r7, #11]
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	f7f9 fa2c 	bl	8004988 <HAL_PCD_EP_Receive>
 800b530:	4603      	mov	r3, r0
 800b532:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b534:	7dfb      	ldrb	r3, [r7, #23]
 800b536:	4618      	mov	r0, r3
 800b538:	f000 f83a 	bl	800b5b0 <USBD_Get_USB_Status>
 800b53c:	4603      	mov	r3, r0
 800b53e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b540:	7dbb      	ldrb	r3, [r7, #22]
}
 800b542:	4618      	mov	r0, r3
 800b544:	3718      	adds	r7, #24
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b54a:	b580      	push	{r7, lr}
 800b54c:	b082      	sub	sp, #8
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
 800b552:	460b      	mov	r3, r1
 800b554:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b55c:	78fa      	ldrb	r2, [r7, #3]
 800b55e:	4611      	mov	r1, r2
 800b560:	4618      	mov	r0, r3
 800b562:	f7f9 fa4e 	bl	8004a02 <HAL_PCD_EP_GetRxCount>
 800b566:	4603      	mov	r3, r0
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3708      	adds	r7, #8
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b570:	b480      	push	{r7}
 800b572:	b083      	sub	sp, #12
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b578:	4b02      	ldr	r3, [pc, #8]	; (800b584 <USBD_static_malloc+0x14>)
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	370c      	adds	r7, #12
 800b57e:	46bd      	mov	sp, r7
 800b580:	bc80      	pop	{r7}
 800b582:	4770      	bx	lr
 800b584:	20000284 	.word	0x20000284

0800b588 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]

}
 800b590:	bf00      	nop
 800b592:	370c      	adds	r7, #12
 800b594:	46bd      	mov	sp, r7
 800b596:	bc80      	pop	{r7}
 800b598:	4770      	bx	lr

0800b59a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b59a:	b480      	push	{r7}
 800b59c:	b083      	sub	sp, #12
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b5a6:	bf00      	nop
 800b5a8:	370c      	adds	r7, #12
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bc80      	pop	{r7}
 800b5ae:	4770      	bx	lr

0800b5b0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b085      	sub	sp, #20
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b5be:	79fb      	ldrb	r3, [r7, #7]
 800b5c0:	2b03      	cmp	r3, #3
 800b5c2:	d817      	bhi.n	800b5f4 <USBD_Get_USB_Status+0x44>
 800b5c4:	a201      	add	r2, pc, #4	; (adr r2, 800b5cc <USBD_Get_USB_Status+0x1c>)
 800b5c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ca:	bf00      	nop
 800b5cc:	0800b5dd 	.word	0x0800b5dd
 800b5d0:	0800b5e3 	.word	0x0800b5e3
 800b5d4:	0800b5e9 	.word	0x0800b5e9
 800b5d8:	0800b5ef 	.word	0x0800b5ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	73fb      	strb	r3, [r7, #15]
    break;
 800b5e0:	e00b      	b.n	800b5fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b5e2:	2302      	movs	r3, #2
 800b5e4:	73fb      	strb	r3, [r7, #15]
    break;
 800b5e6:	e008      	b.n	800b5fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	73fb      	strb	r3, [r7, #15]
    break;
 800b5ec:	e005      	b.n	800b5fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b5ee:	2302      	movs	r3, #2
 800b5f0:	73fb      	strb	r3, [r7, #15]
    break;
 800b5f2:	e002      	b.n	800b5fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b5f4:	2302      	movs	r3, #2
 800b5f6:	73fb      	strb	r3, [r7, #15]
    break;
 800b5f8:	bf00      	nop
  }
  return usb_status;
 800b5fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3714      	adds	r7, #20
 800b600:	46bd      	mov	sp, r7
 800b602:	bc80      	pop	{r7}
 800b604:	4770      	bx	lr
 800b606:	bf00      	nop

0800b608 <__errno>:
 800b608:	4b01      	ldr	r3, [pc, #4]	; (800b610 <__errno+0x8>)
 800b60a:	6818      	ldr	r0, [r3, #0]
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	20000190 	.word	0x20000190

0800b614 <__libc_init_array>:
 800b614:	b570      	push	{r4, r5, r6, lr}
 800b616:	2600      	movs	r6, #0
 800b618:	4d0c      	ldr	r5, [pc, #48]	; (800b64c <__libc_init_array+0x38>)
 800b61a:	4c0d      	ldr	r4, [pc, #52]	; (800b650 <__libc_init_array+0x3c>)
 800b61c:	1b64      	subs	r4, r4, r5
 800b61e:	10a4      	asrs	r4, r4, #2
 800b620:	42a6      	cmp	r6, r4
 800b622:	d109      	bne.n	800b638 <__libc_init_array+0x24>
 800b624:	f001 f9d4 	bl	800c9d0 <_init>
 800b628:	2600      	movs	r6, #0
 800b62a:	4d0a      	ldr	r5, [pc, #40]	; (800b654 <__libc_init_array+0x40>)
 800b62c:	4c0a      	ldr	r4, [pc, #40]	; (800b658 <__libc_init_array+0x44>)
 800b62e:	1b64      	subs	r4, r4, r5
 800b630:	10a4      	asrs	r4, r4, #2
 800b632:	42a6      	cmp	r6, r4
 800b634:	d105      	bne.n	800b642 <__libc_init_array+0x2e>
 800b636:	bd70      	pop	{r4, r5, r6, pc}
 800b638:	f855 3b04 	ldr.w	r3, [r5], #4
 800b63c:	4798      	blx	r3
 800b63e:	3601      	adds	r6, #1
 800b640:	e7ee      	b.n	800b620 <__libc_init_array+0xc>
 800b642:	f855 3b04 	ldr.w	r3, [r5], #4
 800b646:	4798      	blx	r3
 800b648:	3601      	adds	r6, #1
 800b64a:	e7f2      	b.n	800b632 <__libc_init_array+0x1e>
 800b64c:	0800cb90 	.word	0x0800cb90
 800b650:	0800cb90 	.word	0x0800cb90
 800b654:	0800cb90 	.word	0x0800cb90
 800b658:	0800cb94 	.word	0x0800cb94

0800b65c <memcpy>:
 800b65c:	440a      	add	r2, r1
 800b65e:	4291      	cmp	r1, r2
 800b660:	f100 33ff 	add.w	r3, r0, #4294967295
 800b664:	d100      	bne.n	800b668 <memcpy+0xc>
 800b666:	4770      	bx	lr
 800b668:	b510      	push	{r4, lr}
 800b66a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b66e:	4291      	cmp	r1, r2
 800b670:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b674:	d1f9      	bne.n	800b66a <memcpy+0xe>
 800b676:	bd10      	pop	{r4, pc}

0800b678 <memset>:
 800b678:	4603      	mov	r3, r0
 800b67a:	4402      	add	r2, r0
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d100      	bne.n	800b682 <memset+0xa>
 800b680:	4770      	bx	lr
 800b682:	f803 1b01 	strb.w	r1, [r3], #1
 800b686:	e7f9      	b.n	800b67c <memset+0x4>

0800b688 <iprintf>:
 800b688:	b40f      	push	{r0, r1, r2, r3}
 800b68a:	4b0a      	ldr	r3, [pc, #40]	; (800b6b4 <iprintf+0x2c>)
 800b68c:	b513      	push	{r0, r1, r4, lr}
 800b68e:	681c      	ldr	r4, [r3, #0]
 800b690:	b124      	cbz	r4, 800b69c <iprintf+0x14>
 800b692:	69a3      	ldr	r3, [r4, #24]
 800b694:	b913      	cbnz	r3, 800b69c <iprintf+0x14>
 800b696:	4620      	mov	r0, r4
 800b698:	f000 f886 	bl	800b7a8 <__sinit>
 800b69c:	ab05      	add	r3, sp, #20
 800b69e:	4620      	mov	r0, r4
 800b6a0:	9a04      	ldr	r2, [sp, #16]
 800b6a2:	68a1      	ldr	r1, [r4, #8]
 800b6a4:	9301      	str	r3, [sp, #4]
 800b6a6:	f000 fafd 	bl	800bca4 <_vfiprintf_r>
 800b6aa:	b002      	add	sp, #8
 800b6ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6b0:	b004      	add	sp, #16
 800b6b2:	4770      	bx	lr
 800b6b4:	20000190 	.word	0x20000190

0800b6b8 <siprintf>:
 800b6b8:	b40e      	push	{r1, r2, r3}
 800b6ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b6be:	b500      	push	{lr}
 800b6c0:	b09c      	sub	sp, #112	; 0x70
 800b6c2:	ab1d      	add	r3, sp, #116	; 0x74
 800b6c4:	9002      	str	r0, [sp, #8]
 800b6c6:	9006      	str	r0, [sp, #24]
 800b6c8:	9107      	str	r1, [sp, #28]
 800b6ca:	9104      	str	r1, [sp, #16]
 800b6cc:	4808      	ldr	r0, [pc, #32]	; (800b6f0 <siprintf+0x38>)
 800b6ce:	4909      	ldr	r1, [pc, #36]	; (800b6f4 <siprintf+0x3c>)
 800b6d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6d4:	9105      	str	r1, [sp, #20]
 800b6d6:	6800      	ldr	r0, [r0, #0]
 800b6d8:	a902      	add	r1, sp, #8
 800b6da:	9301      	str	r3, [sp, #4]
 800b6dc:	f000 f9ba 	bl	800ba54 <_svfiprintf_r>
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	9b02      	ldr	r3, [sp, #8]
 800b6e4:	701a      	strb	r2, [r3, #0]
 800b6e6:	b01c      	add	sp, #112	; 0x70
 800b6e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6ec:	b003      	add	sp, #12
 800b6ee:	4770      	bx	lr
 800b6f0:	20000190 	.word	0x20000190
 800b6f4:	ffff0208 	.word	0xffff0208

0800b6f8 <std>:
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	b510      	push	{r4, lr}
 800b6fc:	4604      	mov	r4, r0
 800b6fe:	e9c0 3300 	strd	r3, r3, [r0]
 800b702:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b706:	6083      	str	r3, [r0, #8]
 800b708:	8181      	strh	r1, [r0, #12]
 800b70a:	6643      	str	r3, [r0, #100]	; 0x64
 800b70c:	81c2      	strh	r2, [r0, #14]
 800b70e:	6183      	str	r3, [r0, #24]
 800b710:	4619      	mov	r1, r3
 800b712:	2208      	movs	r2, #8
 800b714:	305c      	adds	r0, #92	; 0x5c
 800b716:	f7ff ffaf 	bl	800b678 <memset>
 800b71a:	4b05      	ldr	r3, [pc, #20]	; (800b730 <std+0x38>)
 800b71c:	6224      	str	r4, [r4, #32]
 800b71e:	6263      	str	r3, [r4, #36]	; 0x24
 800b720:	4b04      	ldr	r3, [pc, #16]	; (800b734 <std+0x3c>)
 800b722:	62a3      	str	r3, [r4, #40]	; 0x28
 800b724:	4b04      	ldr	r3, [pc, #16]	; (800b738 <std+0x40>)
 800b726:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b728:	4b04      	ldr	r3, [pc, #16]	; (800b73c <std+0x44>)
 800b72a:	6323      	str	r3, [r4, #48]	; 0x30
 800b72c:	bd10      	pop	{r4, pc}
 800b72e:	bf00      	nop
 800b730:	0800c251 	.word	0x0800c251
 800b734:	0800c273 	.word	0x0800c273
 800b738:	0800c2ab 	.word	0x0800c2ab
 800b73c:	0800c2cf 	.word	0x0800c2cf

0800b740 <_cleanup_r>:
 800b740:	4901      	ldr	r1, [pc, #4]	; (800b748 <_cleanup_r+0x8>)
 800b742:	f000 b8af 	b.w	800b8a4 <_fwalk_reent>
 800b746:	bf00      	nop
 800b748:	0800c5a9 	.word	0x0800c5a9

0800b74c <__sfmoreglue>:
 800b74c:	b570      	push	{r4, r5, r6, lr}
 800b74e:	2568      	movs	r5, #104	; 0x68
 800b750:	1e4a      	subs	r2, r1, #1
 800b752:	4355      	muls	r5, r2
 800b754:	460e      	mov	r6, r1
 800b756:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b75a:	f000 f8c5 	bl	800b8e8 <_malloc_r>
 800b75e:	4604      	mov	r4, r0
 800b760:	b140      	cbz	r0, 800b774 <__sfmoreglue+0x28>
 800b762:	2100      	movs	r1, #0
 800b764:	e9c0 1600 	strd	r1, r6, [r0]
 800b768:	300c      	adds	r0, #12
 800b76a:	60a0      	str	r0, [r4, #8]
 800b76c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b770:	f7ff ff82 	bl	800b678 <memset>
 800b774:	4620      	mov	r0, r4
 800b776:	bd70      	pop	{r4, r5, r6, pc}

0800b778 <__sfp_lock_acquire>:
 800b778:	4801      	ldr	r0, [pc, #4]	; (800b780 <__sfp_lock_acquire+0x8>)
 800b77a:	f000 b8b3 	b.w	800b8e4 <__retarget_lock_acquire_recursive>
 800b77e:	bf00      	nop
 800b780:	200015a8 	.word	0x200015a8

0800b784 <__sfp_lock_release>:
 800b784:	4801      	ldr	r0, [pc, #4]	; (800b78c <__sfp_lock_release+0x8>)
 800b786:	f000 b8ae 	b.w	800b8e6 <__retarget_lock_release_recursive>
 800b78a:	bf00      	nop
 800b78c:	200015a8 	.word	0x200015a8

0800b790 <__sinit_lock_acquire>:
 800b790:	4801      	ldr	r0, [pc, #4]	; (800b798 <__sinit_lock_acquire+0x8>)
 800b792:	f000 b8a7 	b.w	800b8e4 <__retarget_lock_acquire_recursive>
 800b796:	bf00      	nop
 800b798:	200015a3 	.word	0x200015a3

0800b79c <__sinit_lock_release>:
 800b79c:	4801      	ldr	r0, [pc, #4]	; (800b7a4 <__sinit_lock_release+0x8>)
 800b79e:	f000 b8a2 	b.w	800b8e6 <__retarget_lock_release_recursive>
 800b7a2:	bf00      	nop
 800b7a4:	200015a3 	.word	0x200015a3

0800b7a8 <__sinit>:
 800b7a8:	b510      	push	{r4, lr}
 800b7aa:	4604      	mov	r4, r0
 800b7ac:	f7ff fff0 	bl	800b790 <__sinit_lock_acquire>
 800b7b0:	69a3      	ldr	r3, [r4, #24]
 800b7b2:	b11b      	cbz	r3, 800b7bc <__sinit+0x14>
 800b7b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7b8:	f7ff bff0 	b.w	800b79c <__sinit_lock_release>
 800b7bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b7c0:	6523      	str	r3, [r4, #80]	; 0x50
 800b7c2:	4b13      	ldr	r3, [pc, #76]	; (800b810 <__sinit+0x68>)
 800b7c4:	4a13      	ldr	r2, [pc, #76]	; (800b814 <__sinit+0x6c>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b7ca:	42a3      	cmp	r3, r4
 800b7cc:	bf08      	it	eq
 800b7ce:	2301      	moveq	r3, #1
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	bf08      	it	eq
 800b7d4:	61a3      	streq	r3, [r4, #24]
 800b7d6:	f000 f81f 	bl	800b818 <__sfp>
 800b7da:	6060      	str	r0, [r4, #4]
 800b7dc:	4620      	mov	r0, r4
 800b7de:	f000 f81b 	bl	800b818 <__sfp>
 800b7e2:	60a0      	str	r0, [r4, #8]
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	f000 f817 	bl	800b818 <__sfp>
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	2104      	movs	r1, #4
 800b7ee:	60e0      	str	r0, [r4, #12]
 800b7f0:	6860      	ldr	r0, [r4, #4]
 800b7f2:	f7ff ff81 	bl	800b6f8 <std>
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	2109      	movs	r1, #9
 800b7fa:	68a0      	ldr	r0, [r4, #8]
 800b7fc:	f7ff ff7c 	bl	800b6f8 <std>
 800b800:	2202      	movs	r2, #2
 800b802:	2112      	movs	r1, #18
 800b804:	68e0      	ldr	r0, [r4, #12]
 800b806:	f7ff ff77 	bl	800b6f8 <std>
 800b80a:	2301      	movs	r3, #1
 800b80c:	61a3      	str	r3, [r4, #24]
 800b80e:	e7d1      	b.n	800b7b4 <__sinit+0xc>
 800b810:	0800caf8 	.word	0x0800caf8
 800b814:	0800b741 	.word	0x0800b741

0800b818 <__sfp>:
 800b818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b81a:	4607      	mov	r7, r0
 800b81c:	f7ff ffac 	bl	800b778 <__sfp_lock_acquire>
 800b820:	4b1e      	ldr	r3, [pc, #120]	; (800b89c <__sfp+0x84>)
 800b822:	681e      	ldr	r6, [r3, #0]
 800b824:	69b3      	ldr	r3, [r6, #24]
 800b826:	b913      	cbnz	r3, 800b82e <__sfp+0x16>
 800b828:	4630      	mov	r0, r6
 800b82a:	f7ff ffbd 	bl	800b7a8 <__sinit>
 800b82e:	3648      	adds	r6, #72	; 0x48
 800b830:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b834:	3b01      	subs	r3, #1
 800b836:	d503      	bpl.n	800b840 <__sfp+0x28>
 800b838:	6833      	ldr	r3, [r6, #0]
 800b83a:	b30b      	cbz	r3, 800b880 <__sfp+0x68>
 800b83c:	6836      	ldr	r6, [r6, #0]
 800b83e:	e7f7      	b.n	800b830 <__sfp+0x18>
 800b840:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b844:	b9d5      	cbnz	r5, 800b87c <__sfp+0x64>
 800b846:	4b16      	ldr	r3, [pc, #88]	; (800b8a0 <__sfp+0x88>)
 800b848:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b84c:	60e3      	str	r3, [r4, #12]
 800b84e:	6665      	str	r5, [r4, #100]	; 0x64
 800b850:	f000 f847 	bl	800b8e2 <__retarget_lock_init_recursive>
 800b854:	f7ff ff96 	bl	800b784 <__sfp_lock_release>
 800b858:	2208      	movs	r2, #8
 800b85a:	4629      	mov	r1, r5
 800b85c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b860:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b864:	6025      	str	r5, [r4, #0]
 800b866:	61a5      	str	r5, [r4, #24]
 800b868:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b86c:	f7ff ff04 	bl	800b678 <memset>
 800b870:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b874:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b878:	4620      	mov	r0, r4
 800b87a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b87c:	3468      	adds	r4, #104	; 0x68
 800b87e:	e7d9      	b.n	800b834 <__sfp+0x1c>
 800b880:	2104      	movs	r1, #4
 800b882:	4638      	mov	r0, r7
 800b884:	f7ff ff62 	bl	800b74c <__sfmoreglue>
 800b888:	4604      	mov	r4, r0
 800b88a:	6030      	str	r0, [r6, #0]
 800b88c:	2800      	cmp	r0, #0
 800b88e:	d1d5      	bne.n	800b83c <__sfp+0x24>
 800b890:	f7ff ff78 	bl	800b784 <__sfp_lock_release>
 800b894:	230c      	movs	r3, #12
 800b896:	603b      	str	r3, [r7, #0]
 800b898:	e7ee      	b.n	800b878 <__sfp+0x60>
 800b89a:	bf00      	nop
 800b89c:	0800caf8 	.word	0x0800caf8
 800b8a0:	ffff0001 	.word	0xffff0001

0800b8a4 <_fwalk_reent>:
 800b8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8a8:	4606      	mov	r6, r0
 800b8aa:	4688      	mov	r8, r1
 800b8ac:	2700      	movs	r7, #0
 800b8ae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b8b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b8b6:	f1b9 0901 	subs.w	r9, r9, #1
 800b8ba:	d505      	bpl.n	800b8c8 <_fwalk_reent+0x24>
 800b8bc:	6824      	ldr	r4, [r4, #0]
 800b8be:	2c00      	cmp	r4, #0
 800b8c0:	d1f7      	bne.n	800b8b2 <_fwalk_reent+0xe>
 800b8c2:	4638      	mov	r0, r7
 800b8c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8c8:	89ab      	ldrh	r3, [r5, #12]
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d907      	bls.n	800b8de <_fwalk_reent+0x3a>
 800b8ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	d003      	beq.n	800b8de <_fwalk_reent+0x3a>
 800b8d6:	4629      	mov	r1, r5
 800b8d8:	4630      	mov	r0, r6
 800b8da:	47c0      	blx	r8
 800b8dc:	4307      	orrs	r7, r0
 800b8de:	3568      	adds	r5, #104	; 0x68
 800b8e0:	e7e9      	b.n	800b8b6 <_fwalk_reent+0x12>

0800b8e2 <__retarget_lock_init_recursive>:
 800b8e2:	4770      	bx	lr

0800b8e4 <__retarget_lock_acquire_recursive>:
 800b8e4:	4770      	bx	lr

0800b8e6 <__retarget_lock_release_recursive>:
 800b8e6:	4770      	bx	lr

0800b8e8 <_malloc_r>:
 800b8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ea:	1ccd      	adds	r5, r1, #3
 800b8ec:	f025 0503 	bic.w	r5, r5, #3
 800b8f0:	3508      	adds	r5, #8
 800b8f2:	2d0c      	cmp	r5, #12
 800b8f4:	bf38      	it	cc
 800b8f6:	250c      	movcc	r5, #12
 800b8f8:	2d00      	cmp	r5, #0
 800b8fa:	4606      	mov	r6, r0
 800b8fc:	db01      	blt.n	800b902 <_malloc_r+0x1a>
 800b8fe:	42a9      	cmp	r1, r5
 800b900:	d903      	bls.n	800b90a <_malloc_r+0x22>
 800b902:	230c      	movs	r3, #12
 800b904:	6033      	str	r3, [r6, #0]
 800b906:	2000      	movs	r0, #0
 800b908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b90a:	f000 ff27 	bl	800c75c <__malloc_lock>
 800b90e:	4921      	ldr	r1, [pc, #132]	; (800b994 <_malloc_r+0xac>)
 800b910:	680a      	ldr	r2, [r1, #0]
 800b912:	4614      	mov	r4, r2
 800b914:	b99c      	cbnz	r4, 800b93e <_malloc_r+0x56>
 800b916:	4f20      	ldr	r7, [pc, #128]	; (800b998 <_malloc_r+0xb0>)
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	b923      	cbnz	r3, 800b926 <_malloc_r+0x3e>
 800b91c:	4621      	mov	r1, r4
 800b91e:	4630      	mov	r0, r6
 800b920:	f000 fc86 	bl	800c230 <_sbrk_r>
 800b924:	6038      	str	r0, [r7, #0]
 800b926:	4629      	mov	r1, r5
 800b928:	4630      	mov	r0, r6
 800b92a:	f000 fc81 	bl	800c230 <_sbrk_r>
 800b92e:	1c43      	adds	r3, r0, #1
 800b930:	d123      	bne.n	800b97a <_malloc_r+0x92>
 800b932:	230c      	movs	r3, #12
 800b934:	4630      	mov	r0, r6
 800b936:	6033      	str	r3, [r6, #0]
 800b938:	f000 ff16 	bl	800c768 <__malloc_unlock>
 800b93c:	e7e3      	b.n	800b906 <_malloc_r+0x1e>
 800b93e:	6823      	ldr	r3, [r4, #0]
 800b940:	1b5b      	subs	r3, r3, r5
 800b942:	d417      	bmi.n	800b974 <_malloc_r+0x8c>
 800b944:	2b0b      	cmp	r3, #11
 800b946:	d903      	bls.n	800b950 <_malloc_r+0x68>
 800b948:	6023      	str	r3, [r4, #0]
 800b94a:	441c      	add	r4, r3
 800b94c:	6025      	str	r5, [r4, #0]
 800b94e:	e004      	b.n	800b95a <_malloc_r+0x72>
 800b950:	6863      	ldr	r3, [r4, #4]
 800b952:	42a2      	cmp	r2, r4
 800b954:	bf0c      	ite	eq
 800b956:	600b      	streq	r3, [r1, #0]
 800b958:	6053      	strne	r3, [r2, #4]
 800b95a:	4630      	mov	r0, r6
 800b95c:	f000 ff04 	bl	800c768 <__malloc_unlock>
 800b960:	f104 000b 	add.w	r0, r4, #11
 800b964:	1d23      	adds	r3, r4, #4
 800b966:	f020 0007 	bic.w	r0, r0, #7
 800b96a:	1ac2      	subs	r2, r0, r3
 800b96c:	d0cc      	beq.n	800b908 <_malloc_r+0x20>
 800b96e:	1a1b      	subs	r3, r3, r0
 800b970:	50a3      	str	r3, [r4, r2]
 800b972:	e7c9      	b.n	800b908 <_malloc_r+0x20>
 800b974:	4622      	mov	r2, r4
 800b976:	6864      	ldr	r4, [r4, #4]
 800b978:	e7cc      	b.n	800b914 <_malloc_r+0x2c>
 800b97a:	1cc4      	adds	r4, r0, #3
 800b97c:	f024 0403 	bic.w	r4, r4, #3
 800b980:	42a0      	cmp	r0, r4
 800b982:	d0e3      	beq.n	800b94c <_malloc_r+0x64>
 800b984:	1a21      	subs	r1, r4, r0
 800b986:	4630      	mov	r0, r6
 800b988:	f000 fc52 	bl	800c230 <_sbrk_r>
 800b98c:	3001      	adds	r0, #1
 800b98e:	d1dd      	bne.n	800b94c <_malloc_r+0x64>
 800b990:	e7cf      	b.n	800b932 <_malloc_r+0x4a>
 800b992:	bf00      	nop
 800b994:	200004a4 	.word	0x200004a4
 800b998:	200004a8 	.word	0x200004a8

0800b99c <__ssputs_r>:
 800b99c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9a0:	688e      	ldr	r6, [r1, #8]
 800b9a2:	4682      	mov	sl, r0
 800b9a4:	429e      	cmp	r6, r3
 800b9a6:	460c      	mov	r4, r1
 800b9a8:	4690      	mov	r8, r2
 800b9aa:	461f      	mov	r7, r3
 800b9ac:	d838      	bhi.n	800ba20 <__ssputs_r+0x84>
 800b9ae:	898a      	ldrh	r2, [r1, #12]
 800b9b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b9b4:	d032      	beq.n	800ba1c <__ssputs_r+0x80>
 800b9b6:	6825      	ldr	r5, [r4, #0]
 800b9b8:	6909      	ldr	r1, [r1, #16]
 800b9ba:	3301      	adds	r3, #1
 800b9bc:	eba5 0901 	sub.w	r9, r5, r1
 800b9c0:	6965      	ldr	r5, [r4, #20]
 800b9c2:	444b      	add	r3, r9
 800b9c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b9c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b9cc:	106d      	asrs	r5, r5, #1
 800b9ce:	429d      	cmp	r5, r3
 800b9d0:	bf38      	it	cc
 800b9d2:	461d      	movcc	r5, r3
 800b9d4:	0553      	lsls	r3, r2, #21
 800b9d6:	d531      	bpl.n	800ba3c <__ssputs_r+0xa0>
 800b9d8:	4629      	mov	r1, r5
 800b9da:	f7ff ff85 	bl	800b8e8 <_malloc_r>
 800b9de:	4606      	mov	r6, r0
 800b9e0:	b950      	cbnz	r0, 800b9f8 <__ssputs_r+0x5c>
 800b9e2:	230c      	movs	r3, #12
 800b9e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e8:	f8ca 3000 	str.w	r3, [sl]
 800b9ec:	89a3      	ldrh	r3, [r4, #12]
 800b9ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9f2:	81a3      	strh	r3, [r4, #12]
 800b9f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9f8:	464a      	mov	r2, r9
 800b9fa:	6921      	ldr	r1, [r4, #16]
 800b9fc:	f7ff fe2e 	bl	800b65c <memcpy>
 800ba00:	89a3      	ldrh	r3, [r4, #12]
 800ba02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba0a:	81a3      	strh	r3, [r4, #12]
 800ba0c:	6126      	str	r6, [r4, #16]
 800ba0e:	444e      	add	r6, r9
 800ba10:	6026      	str	r6, [r4, #0]
 800ba12:	463e      	mov	r6, r7
 800ba14:	6165      	str	r5, [r4, #20]
 800ba16:	eba5 0509 	sub.w	r5, r5, r9
 800ba1a:	60a5      	str	r5, [r4, #8]
 800ba1c:	42be      	cmp	r6, r7
 800ba1e:	d900      	bls.n	800ba22 <__ssputs_r+0x86>
 800ba20:	463e      	mov	r6, r7
 800ba22:	4632      	mov	r2, r6
 800ba24:	4641      	mov	r1, r8
 800ba26:	6820      	ldr	r0, [r4, #0]
 800ba28:	f000 fe7e 	bl	800c728 <memmove>
 800ba2c:	68a3      	ldr	r3, [r4, #8]
 800ba2e:	6822      	ldr	r2, [r4, #0]
 800ba30:	1b9b      	subs	r3, r3, r6
 800ba32:	4432      	add	r2, r6
 800ba34:	2000      	movs	r0, #0
 800ba36:	60a3      	str	r3, [r4, #8]
 800ba38:	6022      	str	r2, [r4, #0]
 800ba3a:	e7db      	b.n	800b9f4 <__ssputs_r+0x58>
 800ba3c:	462a      	mov	r2, r5
 800ba3e:	f000 fee5 	bl	800c80c <_realloc_r>
 800ba42:	4606      	mov	r6, r0
 800ba44:	2800      	cmp	r0, #0
 800ba46:	d1e1      	bne.n	800ba0c <__ssputs_r+0x70>
 800ba48:	4650      	mov	r0, sl
 800ba4a:	6921      	ldr	r1, [r4, #16]
 800ba4c:	f000 fe92 	bl	800c774 <_free_r>
 800ba50:	e7c7      	b.n	800b9e2 <__ssputs_r+0x46>
	...

0800ba54 <_svfiprintf_r>:
 800ba54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba58:	4698      	mov	r8, r3
 800ba5a:	898b      	ldrh	r3, [r1, #12]
 800ba5c:	4607      	mov	r7, r0
 800ba5e:	061b      	lsls	r3, r3, #24
 800ba60:	460d      	mov	r5, r1
 800ba62:	4614      	mov	r4, r2
 800ba64:	b09d      	sub	sp, #116	; 0x74
 800ba66:	d50e      	bpl.n	800ba86 <_svfiprintf_r+0x32>
 800ba68:	690b      	ldr	r3, [r1, #16]
 800ba6a:	b963      	cbnz	r3, 800ba86 <_svfiprintf_r+0x32>
 800ba6c:	2140      	movs	r1, #64	; 0x40
 800ba6e:	f7ff ff3b 	bl	800b8e8 <_malloc_r>
 800ba72:	6028      	str	r0, [r5, #0]
 800ba74:	6128      	str	r0, [r5, #16]
 800ba76:	b920      	cbnz	r0, 800ba82 <_svfiprintf_r+0x2e>
 800ba78:	230c      	movs	r3, #12
 800ba7a:	603b      	str	r3, [r7, #0]
 800ba7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba80:	e0d1      	b.n	800bc26 <_svfiprintf_r+0x1d2>
 800ba82:	2340      	movs	r3, #64	; 0x40
 800ba84:	616b      	str	r3, [r5, #20]
 800ba86:	2300      	movs	r3, #0
 800ba88:	9309      	str	r3, [sp, #36]	; 0x24
 800ba8a:	2320      	movs	r3, #32
 800ba8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba90:	2330      	movs	r3, #48	; 0x30
 800ba92:	f04f 0901 	mov.w	r9, #1
 800ba96:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bc40 <_svfiprintf_r+0x1ec>
 800ba9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800baa2:	4623      	mov	r3, r4
 800baa4:	469a      	mov	sl, r3
 800baa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800baaa:	b10a      	cbz	r2, 800bab0 <_svfiprintf_r+0x5c>
 800baac:	2a25      	cmp	r2, #37	; 0x25
 800baae:	d1f9      	bne.n	800baa4 <_svfiprintf_r+0x50>
 800bab0:	ebba 0b04 	subs.w	fp, sl, r4
 800bab4:	d00b      	beq.n	800bace <_svfiprintf_r+0x7a>
 800bab6:	465b      	mov	r3, fp
 800bab8:	4622      	mov	r2, r4
 800baba:	4629      	mov	r1, r5
 800babc:	4638      	mov	r0, r7
 800babe:	f7ff ff6d 	bl	800b99c <__ssputs_r>
 800bac2:	3001      	adds	r0, #1
 800bac4:	f000 80aa 	beq.w	800bc1c <_svfiprintf_r+0x1c8>
 800bac8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800baca:	445a      	add	r2, fp
 800bacc:	9209      	str	r2, [sp, #36]	; 0x24
 800bace:	f89a 3000 	ldrb.w	r3, [sl]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	f000 80a2 	beq.w	800bc1c <_svfiprintf_r+0x1c8>
 800bad8:	2300      	movs	r3, #0
 800bada:	f04f 32ff 	mov.w	r2, #4294967295
 800bade:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bae2:	f10a 0a01 	add.w	sl, sl, #1
 800bae6:	9304      	str	r3, [sp, #16]
 800bae8:	9307      	str	r3, [sp, #28]
 800baea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800baee:	931a      	str	r3, [sp, #104]	; 0x68
 800baf0:	4654      	mov	r4, sl
 800baf2:	2205      	movs	r2, #5
 800baf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baf8:	4851      	ldr	r0, [pc, #324]	; (800bc40 <_svfiprintf_r+0x1ec>)
 800bafa:	f000 fe07 	bl	800c70c <memchr>
 800bafe:	9a04      	ldr	r2, [sp, #16]
 800bb00:	b9d8      	cbnz	r0, 800bb3a <_svfiprintf_r+0xe6>
 800bb02:	06d0      	lsls	r0, r2, #27
 800bb04:	bf44      	itt	mi
 800bb06:	2320      	movmi	r3, #32
 800bb08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb0c:	0711      	lsls	r1, r2, #28
 800bb0e:	bf44      	itt	mi
 800bb10:	232b      	movmi	r3, #43	; 0x2b
 800bb12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb16:	f89a 3000 	ldrb.w	r3, [sl]
 800bb1a:	2b2a      	cmp	r3, #42	; 0x2a
 800bb1c:	d015      	beq.n	800bb4a <_svfiprintf_r+0xf6>
 800bb1e:	4654      	mov	r4, sl
 800bb20:	2000      	movs	r0, #0
 800bb22:	f04f 0c0a 	mov.w	ip, #10
 800bb26:	9a07      	ldr	r2, [sp, #28]
 800bb28:	4621      	mov	r1, r4
 800bb2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb2e:	3b30      	subs	r3, #48	; 0x30
 800bb30:	2b09      	cmp	r3, #9
 800bb32:	d94e      	bls.n	800bbd2 <_svfiprintf_r+0x17e>
 800bb34:	b1b0      	cbz	r0, 800bb64 <_svfiprintf_r+0x110>
 800bb36:	9207      	str	r2, [sp, #28]
 800bb38:	e014      	b.n	800bb64 <_svfiprintf_r+0x110>
 800bb3a:	eba0 0308 	sub.w	r3, r0, r8
 800bb3e:	fa09 f303 	lsl.w	r3, r9, r3
 800bb42:	4313      	orrs	r3, r2
 800bb44:	46a2      	mov	sl, r4
 800bb46:	9304      	str	r3, [sp, #16]
 800bb48:	e7d2      	b.n	800baf0 <_svfiprintf_r+0x9c>
 800bb4a:	9b03      	ldr	r3, [sp, #12]
 800bb4c:	1d19      	adds	r1, r3, #4
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	9103      	str	r1, [sp, #12]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	bfbb      	ittet	lt
 800bb56:	425b      	neglt	r3, r3
 800bb58:	f042 0202 	orrlt.w	r2, r2, #2
 800bb5c:	9307      	strge	r3, [sp, #28]
 800bb5e:	9307      	strlt	r3, [sp, #28]
 800bb60:	bfb8      	it	lt
 800bb62:	9204      	strlt	r2, [sp, #16]
 800bb64:	7823      	ldrb	r3, [r4, #0]
 800bb66:	2b2e      	cmp	r3, #46	; 0x2e
 800bb68:	d10c      	bne.n	800bb84 <_svfiprintf_r+0x130>
 800bb6a:	7863      	ldrb	r3, [r4, #1]
 800bb6c:	2b2a      	cmp	r3, #42	; 0x2a
 800bb6e:	d135      	bne.n	800bbdc <_svfiprintf_r+0x188>
 800bb70:	9b03      	ldr	r3, [sp, #12]
 800bb72:	3402      	adds	r4, #2
 800bb74:	1d1a      	adds	r2, r3, #4
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	9203      	str	r2, [sp, #12]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	bfb8      	it	lt
 800bb7e:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb82:	9305      	str	r3, [sp, #20]
 800bb84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bc50 <_svfiprintf_r+0x1fc>
 800bb88:	2203      	movs	r2, #3
 800bb8a:	4650      	mov	r0, sl
 800bb8c:	7821      	ldrb	r1, [r4, #0]
 800bb8e:	f000 fdbd 	bl	800c70c <memchr>
 800bb92:	b140      	cbz	r0, 800bba6 <_svfiprintf_r+0x152>
 800bb94:	2340      	movs	r3, #64	; 0x40
 800bb96:	eba0 000a 	sub.w	r0, r0, sl
 800bb9a:	fa03 f000 	lsl.w	r0, r3, r0
 800bb9e:	9b04      	ldr	r3, [sp, #16]
 800bba0:	3401      	adds	r4, #1
 800bba2:	4303      	orrs	r3, r0
 800bba4:	9304      	str	r3, [sp, #16]
 800bba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbaa:	2206      	movs	r2, #6
 800bbac:	4825      	ldr	r0, [pc, #148]	; (800bc44 <_svfiprintf_r+0x1f0>)
 800bbae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbb2:	f000 fdab 	bl	800c70c <memchr>
 800bbb6:	2800      	cmp	r0, #0
 800bbb8:	d038      	beq.n	800bc2c <_svfiprintf_r+0x1d8>
 800bbba:	4b23      	ldr	r3, [pc, #140]	; (800bc48 <_svfiprintf_r+0x1f4>)
 800bbbc:	bb1b      	cbnz	r3, 800bc06 <_svfiprintf_r+0x1b2>
 800bbbe:	9b03      	ldr	r3, [sp, #12]
 800bbc0:	3307      	adds	r3, #7
 800bbc2:	f023 0307 	bic.w	r3, r3, #7
 800bbc6:	3308      	adds	r3, #8
 800bbc8:	9303      	str	r3, [sp, #12]
 800bbca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbcc:	4433      	add	r3, r6
 800bbce:	9309      	str	r3, [sp, #36]	; 0x24
 800bbd0:	e767      	b.n	800baa2 <_svfiprintf_r+0x4e>
 800bbd2:	460c      	mov	r4, r1
 800bbd4:	2001      	movs	r0, #1
 800bbd6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbda:	e7a5      	b.n	800bb28 <_svfiprintf_r+0xd4>
 800bbdc:	2300      	movs	r3, #0
 800bbde:	f04f 0c0a 	mov.w	ip, #10
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	3401      	adds	r4, #1
 800bbe6:	9305      	str	r3, [sp, #20]
 800bbe8:	4620      	mov	r0, r4
 800bbea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbee:	3a30      	subs	r2, #48	; 0x30
 800bbf0:	2a09      	cmp	r2, #9
 800bbf2:	d903      	bls.n	800bbfc <_svfiprintf_r+0x1a8>
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d0c5      	beq.n	800bb84 <_svfiprintf_r+0x130>
 800bbf8:	9105      	str	r1, [sp, #20]
 800bbfa:	e7c3      	b.n	800bb84 <_svfiprintf_r+0x130>
 800bbfc:	4604      	mov	r4, r0
 800bbfe:	2301      	movs	r3, #1
 800bc00:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc04:	e7f0      	b.n	800bbe8 <_svfiprintf_r+0x194>
 800bc06:	ab03      	add	r3, sp, #12
 800bc08:	9300      	str	r3, [sp, #0]
 800bc0a:	462a      	mov	r2, r5
 800bc0c:	4638      	mov	r0, r7
 800bc0e:	4b0f      	ldr	r3, [pc, #60]	; (800bc4c <_svfiprintf_r+0x1f8>)
 800bc10:	a904      	add	r1, sp, #16
 800bc12:	f3af 8000 	nop.w
 800bc16:	1c42      	adds	r2, r0, #1
 800bc18:	4606      	mov	r6, r0
 800bc1a:	d1d6      	bne.n	800bbca <_svfiprintf_r+0x176>
 800bc1c:	89ab      	ldrh	r3, [r5, #12]
 800bc1e:	065b      	lsls	r3, r3, #25
 800bc20:	f53f af2c 	bmi.w	800ba7c <_svfiprintf_r+0x28>
 800bc24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc26:	b01d      	add	sp, #116	; 0x74
 800bc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc2c:	ab03      	add	r3, sp, #12
 800bc2e:	9300      	str	r3, [sp, #0]
 800bc30:	462a      	mov	r2, r5
 800bc32:	4638      	mov	r0, r7
 800bc34:	4b05      	ldr	r3, [pc, #20]	; (800bc4c <_svfiprintf_r+0x1f8>)
 800bc36:	a904      	add	r1, sp, #16
 800bc38:	f000 f9d4 	bl	800bfe4 <_printf_i>
 800bc3c:	e7eb      	b.n	800bc16 <_svfiprintf_r+0x1c2>
 800bc3e:	bf00      	nop
 800bc40:	0800cb5c 	.word	0x0800cb5c
 800bc44:	0800cb66 	.word	0x0800cb66
 800bc48:	00000000 	.word	0x00000000
 800bc4c:	0800b99d 	.word	0x0800b99d
 800bc50:	0800cb62 	.word	0x0800cb62

0800bc54 <__sfputc_r>:
 800bc54:	6893      	ldr	r3, [r2, #8]
 800bc56:	b410      	push	{r4}
 800bc58:	3b01      	subs	r3, #1
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	6093      	str	r3, [r2, #8]
 800bc5e:	da07      	bge.n	800bc70 <__sfputc_r+0x1c>
 800bc60:	6994      	ldr	r4, [r2, #24]
 800bc62:	42a3      	cmp	r3, r4
 800bc64:	db01      	blt.n	800bc6a <__sfputc_r+0x16>
 800bc66:	290a      	cmp	r1, #10
 800bc68:	d102      	bne.n	800bc70 <__sfputc_r+0x1c>
 800bc6a:	bc10      	pop	{r4}
 800bc6c:	f000 bb34 	b.w	800c2d8 <__swbuf_r>
 800bc70:	6813      	ldr	r3, [r2, #0]
 800bc72:	1c58      	adds	r0, r3, #1
 800bc74:	6010      	str	r0, [r2, #0]
 800bc76:	7019      	strb	r1, [r3, #0]
 800bc78:	4608      	mov	r0, r1
 800bc7a:	bc10      	pop	{r4}
 800bc7c:	4770      	bx	lr

0800bc7e <__sfputs_r>:
 800bc7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc80:	4606      	mov	r6, r0
 800bc82:	460f      	mov	r7, r1
 800bc84:	4614      	mov	r4, r2
 800bc86:	18d5      	adds	r5, r2, r3
 800bc88:	42ac      	cmp	r4, r5
 800bc8a:	d101      	bne.n	800bc90 <__sfputs_r+0x12>
 800bc8c:	2000      	movs	r0, #0
 800bc8e:	e007      	b.n	800bca0 <__sfputs_r+0x22>
 800bc90:	463a      	mov	r2, r7
 800bc92:	4630      	mov	r0, r6
 800bc94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc98:	f7ff ffdc 	bl	800bc54 <__sfputc_r>
 800bc9c:	1c43      	adds	r3, r0, #1
 800bc9e:	d1f3      	bne.n	800bc88 <__sfputs_r+0xa>
 800bca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bca4 <_vfiprintf_r>:
 800bca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca8:	460d      	mov	r5, r1
 800bcaa:	4614      	mov	r4, r2
 800bcac:	4698      	mov	r8, r3
 800bcae:	4606      	mov	r6, r0
 800bcb0:	b09d      	sub	sp, #116	; 0x74
 800bcb2:	b118      	cbz	r0, 800bcbc <_vfiprintf_r+0x18>
 800bcb4:	6983      	ldr	r3, [r0, #24]
 800bcb6:	b90b      	cbnz	r3, 800bcbc <_vfiprintf_r+0x18>
 800bcb8:	f7ff fd76 	bl	800b7a8 <__sinit>
 800bcbc:	4b89      	ldr	r3, [pc, #548]	; (800bee4 <_vfiprintf_r+0x240>)
 800bcbe:	429d      	cmp	r5, r3
 800bcc0:	d11b      	bne.n	800bcfa <_vfiprintf_r+0x56>
 800bcc2:	6875      	ldr	r5, [r6, #4]
 800bcc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcc6:	07d9      	lsls	r1, r3, #31
 800bcc8:	d405      	bmi.n	800bcd6 <_vfiprintf_r+0x32>
 800bcca:	89ab      	ldrh	r3, [r5, #12]
 800bccc:	059a      	lsls	r2, r3, #22
 800bcce:	d402      	bmi.n	800bcd6 <_vfiprintf_r+0x32>
 800bcd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcd2:	f7ff fe07 	bl	800b8e4 <__retarget_lock_acquire_recursive>
 800bcd6:	89ab      	ldrh	r3, [r5, #12]
 800bcd8:	071b      	lsls	r3, r3, #28
 800bcda:	d501      	bpl.n	800bce0 <_vfiprintf_r+0x3c>
 800bcdc:	692b      	ldr	r3, [r5, #16]
 800bcde:	b9eb      	cbnz	r3, 800bd1c <_vfiprintf_r+0x78>
 800bce0:	4629      	mov	r1, r5
 800bce2:	4630      	mov	r0, r6
 800bce4:	f000 fb5c 	bl	800c3a0 <__swsetup_r>
 800bce8:	b1c0      	cbz	r0, 800bd1c <_vfiprintf_r+0x78>
 800bcea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcec:	07dc      	lsls	r4, r3, #31
 800bcee:	d50e      	bpl.n	800bd0e <_vfiprintf_r+0x6a>
 800bcf0:	f04f 30ff 	mov.w	r0, #4294967295
 800bcf4:	b01d      	add	sp, #116	; 0x74
 800bcf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcfa:	4b7b      	ldr	r3, [pc, #492]	; (800bee8 <_vfiprintf_r+0x244>)
 800bcfc:	429d      	cmp	r5, r3
 800bcfe:	d101      	bne.n	800bd04 <_vfiprintf_r+0x60>
 800bd00:	68b5      	ldr	r5, [r6, #8]
 800bd02:	e7df      	b.n	800bcc4 <_vfiprintf_r+0x20>
 800bd04:	4b79      	ldr	r3, [pc, #484]	; (800beec <_vfiprintf_r+0x248>)
 800bd06:	429d      	cmp	r5, r3
 800bd08:	bf08      	it	eq
 800bd0a:	68f5      	ldreq	r5, [r6, #12]
 800bd0c:	e7da      	b.n	800bcc4 <_vfiprintf_r+0x20>
 800bd0e:	89ab      	ldrh	r3, [r5, #12]
 800bd10:	0598      	lsls	r0, r3, #22
 800bd12:	d4ed      	bmi.n	800bcf0 <_vfiprintf_r+0x4c>
 800bd14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd16:	f7ff fde6 	bl	800b8e6 <__retarget_lock_release_recursive>
 800bd1a:	e7e9      	b.n	800bcf0 <_vfiprintf_r+0x4c>
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	9309      	str	r3, [sp, #36]	; 0x24
 800bd20:	2320      	movs	r3, #32
 800bd22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd26:	2330      	movs	r3, #48	; 0x30
 800bd28:	f04f 0901 	mov.w	r9, #1
 800bd2c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd30:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800bef0 <_vfiprintf_r+0x24c>
 800bd34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd38:	4623      	mov	r3, r4
 800bd3a:	469a      	mov	sl, r3
 800bd3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd40:	b10a      	cbz	r2, 800bd46 <_vfiprintf_r+0xa2>
 800bd42:	2a25      	cmp	r2, #37	; 0x25
 800bd44:	d1f9      	bne.n	800bd3a <_vfiprintf_r+0x96>
 800bd46:	ebba 0b04 	subs.w	fp, sl, r4
 800bd4a:	d00b      	beq.n	800bd64 <_vfiprintf_r+0xc0>
 800bd4c:	465b      	mov	r3, fp
 800bd4e:	4622      	mov	r2, r4
 800bd50:	4629      	mov	r1, r5
 800bd52:	4630      	mov	r0, r6
 800bd54:	f7ff ff93 	bl	800bc7e <__sfputs_r>
 800bd58:	3001      	adds	r0, #1
 800bd5a:	f000 80aa 	beq.w	800beb2 <_vfiprintf_r+0x20e>
 800bd5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd60:	445a      	add	r2, fp
 800bd62:	9209      	str	r2, [sp, #36]	; 0x24
 800bd64:	f89a 3000 	ldrb.w	r3, [sl]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	f000 80a2 	beq.w	800beb2 <_vfiprintf_r+0x20e>
 800bd6e:	2300      	movs	r3, #0
 800bd70:	f04f 32ff 	mov.w	r2, #4294967295
 800bd74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd78:	f10a 0a01 	add.w	sl, sl, #1
 800bd7c:	9304      	str	r3, [sp, #16]
 800bd7e:	9307      	str	r3, [sp, #28]
 800bd80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd84:	931a      	str	r3, [sp, #104]	; 0x68
 800bd86:	4654      	mov	r4, sl
 800bd88:	2205      	movs	r2, #5
 800bd8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd8e:	4858      	ldr	r0, [pc, #352]	; (800bef0 <_vfiprintf_r+0x24c>)
 800bd90:	f000 fcbc 	bl	800c70c <memchr>
 800bd94:	9a04      	ldr	r2, [sp, #16]
 800bd96:	b9d8      	cbnz	r0, 800bdd0 <_vfiprintf_r+0x12c>
 800bd98:	06d1      	lsls	r1, r2, #27
 800bd9a:	bf44      	itt	mi
 800bd9c:	2320      	movmi	r3, #32
 800bd9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bda2:	0713      	lsls	r3, r2, #28
 800bda4:	bf44      	itt	mi
 800bda6:	232b      	movmi	r3, #43	; 0x2b
 800bda8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdac:	f89a 3000 	ldrb.w	r3, [sl]
 800bdb0:	2b2a      	cmp	r3, #42	; 0x2a
 800bdb2:	d015      	beq.n	800bde0 <_vfiprintf_r+0x13c>
 800bdb4:	4654      	mov	r4, sl
 800bdb6:	2000      	movs	r0, #0
 800bdb8:	f04f 0c0a 	mov.w	ip, #10
 800bdbc:	9a07      	ldr	r2, [sp, #28]
 800bdbe:	4621      	mov	r1, r4
 800bdc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdc4:	3b30      	subs	r3, #48	; 0x30
 800bdc6:	2b09      	cmp	r3, #9
 800bdc8:	d94e      	bls.n	800be68 <_vfiprintf_r+0x1c4>
 800bdca:	b1b0      	cbz	r0, 800bdfa <_vfiprintf_r+0x156>
 800bdcc:	9207      	str	r2, [sp, #28]
 800bdce:	e014      	b.n	800bdfa <_vfiprintf_r+0x156>
 800bdd0:	eba0 0308 	sub.w	r3, r0, r8
 800bdd4:	fa09 f303 	lsl.w	r3, r9, r3
 800bdd8:	4313      	orrs	r3, r2
 800bdda:	46a2      	mov	sl, r4
 800bddc:	9304      	str	r3, [sp, #16]
 800bdde:	e7d2      	b.n	800bd86 <_vfiprintf_r+0xe2>
 800bde0:	9b03      	ldr	r3, [sp, #12]
 800bde2:	1d19      	adds	r1, r3, #4
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	9103      	str	r1, [sp, #12]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	bfbb      	ittet	lt
 800bdec:	425b      	neglt	r3, r3
 800bdee:	f042 0202 	orrlt.w	r2, r2, #2
 800bdf2:	9307      	strge	r3, [sp, #28]
 800bdf4:	9307      	strlt	r3, [sp, #28]
 800bdf6:	bfb8      	it	lt
 800bdf8:	9204      	strlt	r2, [sp, #16]
 800bdfa:	7823      	ldrb	r3, [r4, #0]
 800bdfc:	2b2e      	cmp	r3, #46	; 0x2e
 800bdfe:	d10c      	bne.n	800be1a <_vfiprintf_r+0x176>
 800be00:	7863      	ldrb	r3, [r4, #1]
 800be02:	2b2a      	cmp	r3, #42	; 0x2a
 800be04:	d135      	bne.n	800be72 <_vfiprintf_r+0x1ce>
 800be06:	9b03      	ldr	r3, [sp, #12]
 800be08:	3402      	adds	r4, #2
 800be0a:	1d1a      	adds	r2, r3, #4
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	9203      	str	r2, [sp, #12]
 800be10:	2b00      	cmp	r3, #0
 800be12:	bfb8      	it	lt
 800be14:	f04f 33ff 	movlt.w	r3, #4294967295
 800be18:	9305      	str	r3, [sp, #20]
 800be1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bf00 <_vfiprintf_r+0x25c>
 800be1e:	2203      	movs	r2, #3
 800be20:	4650      	mov	r0, sl
 800be22:	7821      	ldrb	r1, [r4, #0]
 800be24:	f000 fc72 	bl	800c70c <memchr>
 800be28:	b140      	cbz	r0, 800be3c <_vfiprintf_r+0x198>
 800be2a:	2340      	movs	r3, #64	; 0x40
 800be2c:	eba0 000a 	sub.w	r0, r0, sl
 800be30:	fa03 f000 	lsl.w	r0, r3, r0
 800be34:	9b04      	ldr	r3, [sp, #16]
 800be36:	3401      	adds	r4, #1
 800be38:	4303      	orrs	r3, r0
 800be3a:	9304      	str	r3, [sp, #16]
 800be3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be40:	2206      	movs	r2, #6
 800be42:	482c      	ldr	r0, [pc, #176]	; (800bef4 <_vfiprintf_r+0x250>)
 800be44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be48:	f000 fc60 	bl	800c70c <memchr>
 800be4c:	2800      	cmp	r0, #0
 800be4e:	d03f      	beq.n	800bed0 <_vfiprintf_r+0x22c>
 800be50:	4b29      	ldr	r3, [pc, #164]	; (800bef8 <_vfiprintf_r+0x254>)
 800be52:	bb1b      	cbnz	r3, 800be9c <_vfiprintf_r+0x1f8>
 800be54:	9b03      	ldr	r3, [sp, #12]
 800be56:	3307      	adds	r3, #7
 800be58:	f023 0307 	bic.w	r3, r3, #7
 800be5c:	3308      	adds	r3, #8
 800be5e:	9303      	str	r3, [sp, #12]
 800be60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be62:	443b      	add	r3, r7
 800be64:	9309      	str	r3, [sp, #36]	; 0x24
 800be66:	e767      	b.n	800bd38 <_vfiprintf_r+0x94>
 800be68:	460c      	mov	r4, r1
 800be6a:	2001      	movs	r0, #1
 800be6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800be70:	e7a5      	b.n	800bdbe <_vfiprintf_r+0x11a>
 800be72:	2300      	movs	r3, #0
 800be74:	f04f 0c0a 	mov.w	ip, #10
 800be78:	4619      	mov	r1, r3
 800be7a:	3401      	adds	r4, #1
 800be7c:	9305      	str	r3, [sp, #20]
 800be7e:	4620      	mov	r0, r4
 800be80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be84:	3a30      	subs	r2, #48	; 0x30
 800be86:	2a09      	cmp	r2, #9
 800be88:	d903      	bls.n	800be92 <_vfiprintf_r+0x1ee>
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d0c5      	beq.n	800be1a <_vfiprintf_r+0x176>
 800be8e:	9105      	str	r1, [sp, #20]
 800be90:	e7c3      	b.n	800be1a <_vfiprintf_r+0x176>
 800be92:	4604      	mov	r4, r0
 800be94:	2301      	movs	r3, #1
 800be96:	fb0c 2101 	mla	r1, ip, r1, r2
 800be9a:	e7f0      	b.n	800be7e <_vfiprintf_r+0x1da>
 800be9c:	ab03      	add	r3, sp, #12
 800be9e:	9300      	str	r3, [sp, #0]
 800bea0:	462a      	mov	r2, r5
 800bea2:	4630      	mov	r0, r6
 800bea4:	4b15      	ldr	r3, [pc, #84]	; (800befc <_vfiprintf_r+0x258>)
 800bea6:	a904      	add	r1, sp, #16
 800bea8:	f3af 8000 	nop.w
 800beac:	4607      	mov	r7, r0
 800beae:	1c78      	adds	r0, r7, #1
 800beb0:	d1d6      	bne.n	800be60 <_vfiprintf_r+0x1bc>
 800beb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800beb4:	07d9      	lsls	r1, r3, #31
 800beb6:	d405      	bmi.n	800bec4 <_vfiprintf_r+0x220>
 800beb8:	89ab      	ldrh	r3, [r5, #12]
 800beba:	059a      	lsls	r2, r3, #22
 800bebc:	d402      	bmi.n	800bec4 <_vfiprintf_r+0x220>
 800bebe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bec0:	f7ff fd11 	bl	800b8e6 <__retarget_lock_release_recursive>
 800bec4:	89ab      	ldrh	r3, [r5, #12]
 800bec6:	065b      	lsls	r3, r3, #25
 800bec8:	f53f af12 	bmi.w	800bcf0 <_vfiprintf_r+0x4c>
 800becc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bece:	e711      	b.n	800bcf4 <_vfiprintf_r+0x50>
 800bed0:	ab03      	add	r3, sp, #12
 800bed2:	9300      	str	r3, [sp, #0]
 800bed4:	462a      	mov	r2, r5
 800bed6:	4630      	mov	r0, r6
 800bed8:	4b08      	ldr	r3, [pc, #32]	; (800befc <_vfiprintf_r+0x258>)
 800beda:	a904      	add	r1, sp, #16
 800bedc:	f000 f882 	bl	800bfe4 <_printf_i>
 800bee0:	e7e4      	b.n	800beac <_vfiprintf_r+0x208>
 800bee2:	bf00      	nop
 800bee4:	0800cb1c 	.word	0x0800cb1c
 800bee8:	0800cb3c 	.word	0x0800cb3c
 800beec:	0800cafc 	.word	0x0800cafc
 800bef0:	0800cb5c 	.word	0x0800cb5c
 800bef4:	0800cb66 	.word	0x0800cb66
 800bef8:	00000000 	.word	0x00000000
 800befc:	0800bc7f 	.word	0x0800bc7f
 800bf00:	0800cb62 	.word	0x0800cb62

0800bf04 <_printf_common>:
 800bf04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf08:	4616      	mov	r6, r2
 800bf0a:	4699      	mov	r9, r3
 800bf0c:	688a      	ldr	r2, [r1, #8]
 800bf0e:	690b      	ldr	r3, [r1, #16]
 800bf10:	4607      	mov	r7, r0
 800bf12:	4293      	cmp	r3, r2
 800bf14:	bfb8      	it	lt
 800bf16:	4613      	movlt	r3, r2
 800bf18:	6033      	str	r3, [r6, #0]
 800bf1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bf1e:	460c      	mov	r4, r1
 800bf20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bf24:	b10a      	cbz	r2, 800bf2a <_printf_common+0x26>
 800bf26:	3301      	adds	r3, #1
 800bf28:	6033      	str	r3, [r6, #0]
 800bf2a:	6823      	ldr	r3, [r4, #0]
 800bf2c:	0699      	lsls	r1, r3, #26
 800bf2e:	bf42      	ittt	mi
 800bf30:	6833      	ldrmi	r3, [r6, #0]
 800bf32:	3302      	addmi	r3, #2
 800bf34:	6033      	strmi	r3, [r6, #0]
 800bf36:	6825      	ldr	r5, [r4, #0]
 800bf38:	f015 0506 	ands.w	r5, r5, #6
 800bf3c:	d106      	bne.n	800bf4c <_printf_common+0x48>
 800bf3e:	f104 0a19 	add.w	sl, r4, #25
 800bf42:	68e3      	ldr	r3, [r4, #12]
 800bf44:	6832      	ldr	r2, [r6, #0]
 800bf46:	1a9b      	subs	r3, r3, r2
 800bf48:	42ab      	cmp	r3, r5
 800bf4a:	dc28      	bgt.n	800bf9e <_printf_common+0x9a>
 800bf4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bf50:	1e13      	subs	r3, r2, #0
 800bf52:	6822      	ldr	r2, [r4, #0]
 800bf54:	bf18      	it	ne
 800bf56:	2301      	movne	r3, #1
 800bf58:	0692      	lsls	r2, r2, #26
 800bf5a:	d42d      	bmi.n	800bfb8 <_printf_common+0xb4>
 800bf5c:	4649      	mov	r1, r9
 800bf5e:	4638      	mov	r0, r7
 800bf60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf64:	47c0      	blx	r8
 800bf66:	3001      	adds	r0, #1
 800bf68:	d020      	beq.n	800bfac <_printf_common+0xa8>
 800bf6a:	6823      	ldr	r3, [r4, #0]
 800bf6c:	68e5      	ldr	r5, [r4, #12]
 800bf6e:	f003 0306 	and.w	r3, r3, #6
 800bf72:	2b04      	cmp	r3, #4
 800bf74:	bf18      	it	ne
 800bf76:	2500      	movne	r5, #0
 800bf78:	6832      	ldr	r2, [r6, #0]
 800bf7a:	f04f 0600 	mov.w	r6, #0
 800bf7e:	68a3      	ldr	r3, [r4, #8]
 800bf80:	bf08      	it	eq
 800bf82:	1aad      	subeq	r5, r5, r2
 800bf84:	6922      	ldr	r2, [r4, #16]
 800bf86:	bf08      	it	eq
 800bf88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	bfc4      	itt	gt
 800bf90:	1a9b      	subgt	r3, r3, r2
 800bf92:	18ed      	addgt	r5, r5, r3
 800bf94:	341a      	adds	r4, #26
 800bf96:	42b5      	cmp	r5, r6
 800bf98:	d11a      	bne.n	800bfd0 <_printf_common+0xcc>
 800bf9a:	2000      	movs	r0, #0
 800bf9c:	e008      	b.n	800bfb0 <_printf_common+0xac>
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	4652      	mov	r2, sl
 800bfa2:	4649      	mov	r1, r9
 800bfa4:	4638      	mov	r0, r7
 800bfa6:	47c0      	blx	r8
 800bfa8:	3001      	adds	r0, #1
 800bfaa:	d103      	bne.n	800bfb4 <_printf_common+0xb0>
 800bfac:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfb4:	3501      	adds	r5, #1
 800bfb6:	e7c4      	b.n	800bf42 <_printf_common+0x3e>
 800bfb8:	2030      	movs	r0, #48	; 0x30
 800bfba:	18e1      	adds	r1, r4, r3
 800bfbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bfc0:	1c5a      	adds	r2, r3, #1
 800bfc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bfc6:	4422      	add	r2, r4
 800bfc8:	3302      	adds	r3, #2
 800bfca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bfce:	e7c5      	b.n	800bf5c <_printf_common+0x58>
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	4622      	mov	r2, r4
 800bfd4:	4649      	mov	r1, r9
 800bfd6:	4638      	mov	r0, r7
 800bfd8:	47c0      	blx	r8
 800bfda:	3001      	adds	r0, #1
 800bfdc:	d0e6      	beq.n	800bfac <_printf_common+0xa8>
 800bfde:	3601      	adds	r6, #1
 800bfe0:	e7d9      	b.n	800bf96 <_printf_common+0x92>
	...

0800bfe4 <_printf_i>:
 800bfe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bfe8:	460c      	mov	r4, r1
 800bfea:	7e27      	ldrb	r7, [r4, #24]
 800bfec:	4691      	mov	r9, r2
 800bfee:	2f78      	cmp	r7, #120	; 0x78
 800bff0:	4680      	mov	r8, r0
 800bff2:	469a      	mov	sl, r3
 800bff4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bff6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bffa:	d807      	bhi.n	800c00c <_printf_i+0x28>
 800bffc:	2f62      	cmp	r7, #98	; 0x62
 800bffe:	d80a      	bhi.n	800c016 <_printf_i+0x32>
 800c000:	2f00      	cmp	r7, #0
 800c002:	f000 80d9 	beq.w	800c1b8 <_printf_i+0x1d4>
 800c006:	2f58      	cmp	r7, #88	; 0x58
 800c008:	f000 80a4 	beq.w	800c154 <_printf_i+0x170>
 800c00c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c010:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c014:	e03a      	b.n	800c08c <_printf_i+0xa8>
 800c016:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c01a:	2b15      	cmp	r3, #21
 800c01c:	d8f6      	bhi.n	800c00c <_printf_i+0x28>
 800c01e:	a001      	add	r0, pc, #4	; (adr r0, 800c024 <_printf_i+0x40>)
 800c020:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c024:	0800c07d 	.word	0x0800c07d
 800c028:	0800c091 	.word	0x0800c091
 800c02c:	0800c00d 	.word	0x0800c00d
 800c030:	0800c00d 	.word	0x0800c00d
 800c034:	0800c00d 	.word	0x0800c00d
 800c038:	0800c00d 	.word	0x0800c00d
 800c03c:	0800c091 	.word	0x0800c091
 800c040:	0800c00d 	.word	0x0800c00d
 800c044:	0800c00d 	.word	0x0800c00d
 800c048:	0800c00d 	.word	0x0800c00d
 800c04c:	0800c00d 	.word	0x0800c00d
 800c050:	0800c19f 	.word	0x0800c19f
 800c054:	0800c0c1 	.word	0x0800c0c1
 800c058:	0800c181 	.word	0x0800c181
 800c05c:	0800c00d 	.word	0x0800c00d
 800c060:	0800c00d 	.word	0x0800c00d
 800c064:	0800c1c1 	.word	0x0800c1c1
 800c068:	0800c00d 	.word	0x0800c00d
 800c06c:	0800c0c1 	.word	0x0800c0c1
 800c070:	0800c00d 	.word	0x0800c00d
 800c074:	0800c00d 	.word	0x0800c00d
 800c078:	0800c189 	.word	0x0800c189
 800c07c:	680b      	ldr	r3, [r1, #0]
 800c07e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c082:	1d1a      	adds	r2, r3, #4
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	600a      	str	r2, [r1, #0]
 800c088:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c08c:	2301      	movs	r3, #1
 800c08e:	e0a4      	b.n	800c1da <_printf_i+0x1f6>
 800c090:	6825      	ldr	r5, [r4, #0]
 800c092:	6808      	ldr	r0, [r1, #0]
 800c094:	062e      	lsls	r6, r5, #24
 800c096:	f100 0304 	add.w	r3, r0, #4
 800c09a:	d50a      	bpl.n	800c0b2 <_printf_i+0xce>
 800c09c:	6805      	ldr	r5, [r0, #0]
 800c09e:	600b      	str	r3, [r1, #0]
 800c0a0:	2d00      	cmp	r5, #0
 800c0a2:	da03      	bge.n	800c0ac <_printf_i+0xc8>
 800c0a4:	232d      	movs	r3, #45	; 0x2d
 800c0a6:	426d      	negs	r5, r5
 800c0a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0ac:	230a      	movs	r3, #10
 800c0ae:	485e      	ldr	r0, [pc, #376]	; (800c228 <_printf_i+0x244>)
 800c0b0:	e019      	b.n	800c0e6 <_printf_i+0x102>
 800c0b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c0b6:	6805      	ldr	r5, [r0, #0]
 800c0b8:	600b      	str	r3, [r1, #0]
 800c0ba:	bf18      	it	ne
 800c0bc:	b22d      	sxthne	r5, r5
 800c0be:	e7ef      	b.n	800c0a0 <_printf_i+0xbc>
 800c0c0:	680b      	ldr	r3, [r1, #0]
 800c0c2:	6825      	ldr	r5, [r4, #0]
 800c0c4:	1d18      	adds	r0, r3, #4
 800c0c6:	6008      	str	r0, [r1, #0]
 800c0c8:	0628      	lsls	r0, r5, #24
 800c0ca:	d501      	bpl.n	800c0d0 <_printf_i+0xec>
 800c0cc:	681d      	ldr	r5, [r3, #0]
 800c0ce:	e002      	b.n	800c0d6 <_printf_i+0xf2>
 800c0d0:	0669      	lsls	r1, r5, #25
 800c0d2:	d5fb      	bpl.n	800c0cc <_printf_i+0xe8>
 800c0d4:	881d      	ldrh	r5, [r3, #0]
 800c0d6:	2f6f      	cmp	r7, #111	; 0x6f
 800c0d8:	bf0c      	ite	eq
 800c0da:	2308      	moveq	r3, #8
 800c0dc:	230a      	movne	r3, #10
 800c0de:	4852      	ldr	r0, [pc, #328]	; (800c228 <_printf_i+0x244>)
 800c0e0:	2100      	movs	r1, #0
 800c0e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c0e6:	6866      	ldr	r6, [r4, #4]
 800c0e8:	2e00      	cmp	r6, #0
 800c0ea:	bfa8      	it	ge
 800c0ec:	6821      	ldrge	r1, [r4, #0]
 800c0ee:	60a6      	str	r6, [r4, #8]
 800c0f0:	bfa4      	itt	ge
 800c0f2:	f021 0104 	bicge.w	r1, r1, #4
 800c0f6:	6021      	strge	r1, [r4, #0]
 800c0f8:	b90d      	cbnz	r5, 800c0fe <_printf_i+0x11a>
 800c0fa:	2e00      	cmp	r6, #0
 800c0fc:	d04d      	beq.n	800c19a <_printf_i+0x1b6>
 800c0fe:	4616      	mov	r6, r2
 800c100:	fbb5 f1f3 	udiv	r1, r5, r3
 800c104:	fb03 5711 	mls	r7, r3, r1, r5
 800c108:	5dc7      	ldrb	r7, [r0, r7]
 800c10a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c10e:	462f      	mov	r7, r5
 800c110:	42bb      	cmp	r3, r7
 800c112:	460d      	mov	r5, r1
 800c114:	d9f4      	bls.n	800c100 <_printf_i+0x11c>
 800c116:	2b08      	cmp	r3, #8
 800c118:	d10b      	bne.n	800c132 <_printf_i+0x14e>
 800c11a:	6823      	ldr	r3, [r4, #0]
 800c11c:	07df      	lsls	r7, r3, #31
 800c11e:	d508      	bpl.n	800c132 <_printf_i+0x14e>
 800c120:	6923      	ldr	r3, [r4, #16]
 800c122:	6861      	ldr	r1, [r4, #4]
 800c124:	4299      	cmp	r1, r3
 800c126:	bfde      	ittt	le
 800c128:	2330      	movle	r3, #48	; 0x30
 800c12a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c12e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c132:	1b92      	subs	r2, r2, r6
 800c134:	6122      	str	r2, [r4, #16]
 800c136:	464b      	mov	r3, r9
 800c138:	4621      	mov	r1, r4
 800c13a:	4640      	mov	r0, r8
 800c13c:	f8cd a000 	str.w	sl, [sp]
 800c140:	aa03      	add	r2, sp, #12
 800c142:	f7ff fedf 	bl	800bf04 <_printf_common>
 800c146:	3001      	adds	r0, #1
 800c148:	d14c      	bne.n	800c1e4 <_printf_i+0x200>
 800c14a:	f04f 30ff 	mov.w	r0, #4294967295
 800c14e:	b004      	add	sp, #16
 800c150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c154:	4834      	ldr	r0, [pc, #208]	; (800c228 <_printf_i+0x244>)
 800c156:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c15a:	680e      	ldr	r6, [r1, #0]
 800c15c:	6823      	ldr	r3, [r4, #0]
 800c15e:	f856 5b04 	ldr.w	r5, [r6], #4
 800c162:	061f      	lsls	r7, r3, #24
 800c164:	600e      	str	r6, [r1, #0]
 800c166:	d514      	bpl.n	800c192 <_printf_i+0x1ae>
 800c168:	07d9      	lsls	r1, r3, #31
 800c16a:	bf44      	itt	mi
 800c16c:	f043 0320 	orrmi.w	r3, r3, #32
 800c170:	6023      	strmi	r3, [r4, #0]
 800c172:	b91d      	cbnz	r5, 800c17c <_printf_i+0x198>
 800c174:	6823      	ldr	r3, [r4, #0]
 800c176:	f023 0320 	bic.w	r3, r3, #32
 800c17a:	6023      	str	r3, [r4, #0]
 800c17c:	2310      	movs	r3, #16
 800c17e:	e7af      	b.n	800c0e0 <_printf_i+0xfc>
 800c180:	6823      	ldr	r3, [r4, #0]
 800c182:	f043 0320 	orr.w	r3, r3, #32
 800c186:	6023      	str	r3, [r4, #0]
 800c188:	2378      	movs	r3, #120	; 0x78
 800c18a:	4828      	ldr	r0, [pc, #160]	; (800c22c <_printf_i+0x248>)
 800c18c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c190:	e7e3      	b.n	800c15a <_printf_i+0x176>
 800c192:	065e      	lsls	r6, r3, #25
 800c194:	bf48      	it	mi
 800c196:	b2ad      	uxthmi	r5, r5
 800c198:	e7e6      	b.n	800c168 <_printf_i+0x184>
 800c19a:	4616      	mov	r6, r2
 800c19c:	e7bb      	b.n	800c116 <_printf_i+0x132>
 800c19e:	680b      	ldr	r3, [r1, #0]
 800c1a0:	6826      	ldr	r6, [r4, #0]
 800c1a2:	1d1d      	adds	r5, r3, #4
 800c1a4:	6960      	ldr	r0, [r4, #20]
 800c1a6:	600d      	str	r5, [r1, #0]
 800c1a8:	0635      	lsls	r5, r6, #24
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	d501      	bpl.n	800c1b2 <_printf_i+0x1ce>
 800c1ae:	6018      	str	r0, [r3, #0]
 800c1b0:	e002      	b.n	800c1b8 <_printf_i+0x1d4>
 800c1b2:	0671      	lsls	r1, r6, #25
 800c1b4:	d5fb      	bpl.n	800c1ae <_printf_i+0x1ca>
 800c1b6:	8018      	strh	r0, [r3, #0]
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	4616      	mov	r6, r2
 800c1bc:	6123      	str	r3, [r4, #16]
 800c1be:	e7ba      	b.n	800c136 <_printf_i+0x152>
 800c1c0:	680b      	ldr	r3, [r1, #0]
 800c1c2:	1d1a      	adds	r2, r3, #4
 800c1c4:	600a      	str	r2, [r1, #0]
 800c1c6:	681e      	ldr	r6, [r3, #0]
 800c1c8:	2100      	movs	r1, #0
 800c1ca:	4630      	mov	r0, r6
 800c1cc:	6862      	ldr	r2, [r4, #4]
 800c1ce:	f000 fa9d 	bl	800c70c <memchr>
 800c1d2:	b108      	cbz	r0, 800c1d8 <_printf_i+0x1f4>
 800c1d4:	1b80      	subs	r0, r0, r6
 800c1d6:	6060      	str	r0, [r4, #4]
 800c1d8:	6863      	ldr	r3, [r4, #4]
 800c1da:	6123      	str	r3, [r4, #16]
 800c1dc:	2300      	movs	r3, #0
 800c1de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1e2:	e7a8      	b.n	800c136 <_printf_i+0x152>
 800c1e4:	4632      	mov	r2, r6
 800c1e6:	4649      	mov	r1, r9
 800c1e8:	4640      	mov	r0, r8
 800c1ea:	6923      	ldr	r3, [r4, #16]
 800c1ec:	47d0      	blx	sl
 800c1ee:	3001      	adds	r0, #1
 800c1f0:	d0ab      	beq.n	800c14a <_printf_i+0x166>
 800c1f2:	6823      	ldr	r3, [r4, #0]
 800c1f4:	079b      	lsls	r3, r3, #30
 800c1f6:	d413      	bmi.n	800c220 <_printf_i+0x23c>
 800c1f8:	68e0      	ldr	r0, [r4, #12]
 800c1fa:	9b03      	ldr	r3, [sp, #12]
 800c1fc:	4298      	cmp	r0, r3
 800c1fe:	bfb8      	it	lt
 800c200:	4618      	movlt	r0, r3
 800c202:	e7a4      	b.n	800c14e <_printf_i+0x16a>
 800c204:	2301      	movs	r3, #1
 800c206:	4632      	mov	r2, r6
 800c208:	4649      	mov	r1, r9
 800c20a:	4640      	mov	r0, r8
 800c20c:	47d0      	blx	sl
 800c20e:	3001      	adds	r0, #1
 800c210:	d09b      	beq.n	800c14a <_printf_i+0x166>
 800c212:	3501      	adds	r5, #1
 800c214:	68e3      	ldr	r3, [r4, #12]
 800c216:	9903      	ldr	r1, [sp, #12]
 800c218:	1a5b      	subs	r3, r3, r1
 800c21a:	42ab      	cmp	r3, r5
 800c21c:	dcf2      	bgt.n	800c204 <_printf_i+0x220>
 800c21e:	e7eb      	b.n	800c1f8 <_printf_i+0x214>
 800c220:	2500      	movs	r5, #0
 800c222:	f104 0619 	add.w	r6, r4, #25
 800c226:	e7f5      	b.n	800c214 <_printf_i+0x230>
 800c228:	0800cb6d 	.word	0x0800cb6d
 800c22c:	0800cb7e 	.word	0x0800cb7e

0800c230 <_sbrk_r>:
 800c230:	b538      	push	{r3, r4, r5, lr}
 800c232:	2300      	movs	r3, #0
 800c234:	4d05      	ldr	r5, [pc, #20]	; (800c24c <_sbrk_r+0x1c>)
 800c236:	4604      	mov	r4, r0
 800c238:	4608      	mov	r0, r1
 800c23a:	602b      	str	r3, [r5, #0]
 800c23c:	f7f6 fdc4 	bl	8002dc8 <_sbrk>
 800c240:	1c43      	adds	r3, r0, #1
 800c242:	d102      	bne.n	800c24a <_sbrk_r+0x1a>
 800c244:	682b      	ldr	r3, [r5, #0]
 800c246:	b103      	cbz	r3, 800c24a <_sbrk_r+0x1a>
 800c248:	6023      	str	r3, [r4, #0]
 800c24a:	bd38      	pop	{r3, r4, r5, pc}
 800c24c:	200015ac 	.word	0x200015ac

0800c250 <__sread>:
 800c250:	b510      	push	{r4, lr}
 800c252:	460c      	mov	r4, r1
 800c254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c258:	f000 fafe 	bl	800c858 <_read_r>
 800c25c:	2800      	cmp	r0, #0
 800c25e:	bfab      	itete	ge
 800c260:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c262:	89a3      	ldrhlt	r3, [r4, #12]
 800c264:	181b      	addge	r3, r3, r0
 800c266:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c26a:	bfac      	ite	ge
 800c26c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c26e:	81a3      	strhlt	r3, [r4, #12]
 800c270:	bd10      	pop	{r4, pc}

0800c272 <__swrite>:
 800c272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c276:	461f      	mov	r7, r3
 800c278:	898b      	ldrh	r3, [r1, #12]
 800c27a:	4605      	mov	r5, r0
 800c27c:	05db      	lsls	r3, r3, #23
 800c27e:	460c      	mov	r4, r1
 800c280:	4616      	mov	r6, r2
 800c282:	d505      	bpl.n	800c290 <__swrite+0x1e>
 800c284:	2302      	movs	r3, #2
 800c286:	2200      	movs	r2, #0
 800c288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c28c:	f000 f9c8 	bl	800c620 <_lseek_r>
 800c290:	89a3      	ldrh	r3, [r4, #12]
 800c292:	4632      	mov	r2, r6
 800c294:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c298:	81a3      	strh	r3, [r4, #12]
 800c29a:	4628      	mov	r0, r5
 800c29c:	463b      	mov	r3, r7
 800c29e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2a6:	f000 b869 	b.w	800c37c <_write_r>

0800c2aa <__sseek>:
 800c2aa:	b510      	push	{r4, lr}
 800c2ac:	460c      	mov	r4, r1
 800c2ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2b2:	f000 f9b5 	bl	800c620 <_lseek_r>
 800c2b6:	1c43      	adds	r3, r0, #1
 800c2b8:	89a3      	ldrh	r3, [r4, #12]
 800c2ba:	bf15      	itete	ne
 800c2bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c2be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c2c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c2c6:	81a3      	strheq	r3, [r4, #12]
 800c2c8:	bf18      	it	ne
 800c2ca:	81a3      	strhne	r3, [r4, #12]
 800c2cc:	bd10      	pop	{r4, pc}

0800c2ce <__sclose>:
 800c2ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2d2:	f000 b8d3 	b.w	800c47c <_close_r>
	...

0800c2d8 <__swbuf_r>:
 800c2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2da:	460e      	mov	r6, r1
 800c2dc:	4614      	mov	r4, r2
 800c2de:	4605      	mov	r5, r0
 800c2e0:	b118      	cbz	r0, 800c2ea <__swbuf_r+0x12>
 800c2e2:	6983      	ldr	r3, [r0, #24]
 800c2e4:	b90b      	cbnz	r3, 800c2ea <__swbuf_r+0x12>
 800c2e6:	f7ff fa5f 	bl	800b7a8 <__sinit>
 800c2ea:	4b21      	ldr	r3, [pc, #132]	; (800c370 <__swbuf_r+0x98>)
 800c2ec:	429c      	cmp	r4, r3
 800c2ee:	d12b      	bne.n	800c348 <__swbuf_r+0x70>
 800c2f0:	686c      	ldr	r4, [r5, #4]
 800c2f2:	69a3      	ldr	r3, [r4, #24]
 800c2f4:	60a3      	str	r3, [r4, #8]
 800c2f6:	89a3      	ldrh	r3, [r4, #12]
 800c2f8:	071a      	lsls	r2, r3, #28
 800c2fa:	d52f      	bpl.n	800c35c <__swbuf_r+0x84>
 800c2fc:	6923      	ldr	r3, [r4, #16]
 800c2fe:	b36b      	cbz	r3, 800c35c <__swbuf_r+0x84>
 800c300:	6923      	ldr	r3, [r4, #16]
 800c302:	6820      	ldr	r0, [r4, #0]
 800c304:	b2f6      	uxtb	r6, r6
 800c306:	1ac0      	subs	r0, r0, r3
 800c308:	6963      	ldr	r3, [r4, #20]
 800c30a:	4637      	mov	r7, r6
 800c30c:	4283      	cmp	r3, r0
 800c30e:	dc04      	bgt.n	800c31a <__swbuf_r+0x42>
 800c310:	4621      	mov	r1, r4
 800c312:	4628      	mov	r0, r5
 800c314:	f000 f948 	bl	800c5a8 <_fflush_r>
 800c318:	bb30      	cbnz	r0, 800c368 <__swbuf_r+0x90>
 800c31a:	68a3      	ldr	r3, [r4, #8]
 800c31c:	3001      	adds	r0, #1
 800c31e:	3b01      	subs	r3, #1
 800c320:	60a3      	str	r3, [r4, #8]
 800c322:	6823      	ldr	r3, [r4, #0]
 800c324:	1c5a      	adds	r2, r3, #1
 800c326:	6022      	str	r2, [r4, #0]
 800c328:	701e      	strb	r6, [r3, #0]
 800c32a:	6963      	ldr	r3, [r4, #20]
 800c32c:	4283      	cmp	r3, r0
 800c32e:	d004      	beq.n	800c33a <__swbuf_r+0x62>
 800c330:	89a3      	ldrh	r3, [r4, #12]
 800c332:	07db      	lsls	r3, r3, #31
 800c334:	d506      	bpl.n	800c344 <__swbuf_r+0x6c>
 800c336:	2e0a      	cmp	r6, #10
 800c338:	d104      	bne.n	800c344 <__swbuf_r+0x6c>
 800c33a:	4621      	mov	r1, r4
 800c33c:	4628      	mov	r0, r5
 800c33e:	f000 f933 	bl	800c5a8 <_fflush_r>
 800c342:	b988      	cbnz	r0, 800c368 <__swbuf_r+0x90>
 800c344:	4638      	mov	r0, r7
 800c346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c348:	4b0a      	ldr	r3, [pc, #40]	; (800c374 <__swbuf_r+0x9c>)
 800c34a:	429c      	cmp	r4, r3
 800c34c:	d101      	bne.n	800c352 <__swbuf_r+0x7a>
 800c34e:	68ac      	ldr	r4, [r5, #8]
 800c350:	e7cf      	b.n	800c2f2 <__swbuf_r+0x1a>
 800c352:	4b09      	ldr	r3, [pc, #36]	; (800c378 <__swbuf_r+0xa0>)
 800c354:	429c      	cmp	r4, r3
 800c356:	bf08      	it	eq
 800c358:	68ec      	ldreq	r4, [r5, #12]
 800c35a:	e7ca      	b.n	800c2f2 <__swbuf_r+0x1a>
 800c35c:	4621      	mov	r1, r4
 800c35e:	4628      	mov	r0, r5
 800c360:	f000 f81e 	bl	800c3a0 <__swsetup_r>
 800c364:	2800      	cmp	r0, #0
 800c366:	d0cb      	beq.n	800c300 <__swbuf_r+0x28>
 800c368:	f04f 37ff 	mov.w	r7, #4294967295
 800c36c:	e7ea      	b.n	800c344 <__swbuf_r+0x6c>
 800c36e:	bf00      	nop
 800c370:	0800cb1c 	.word	0x0800cb1c
 800c374:	0800cb3c 	.word	0x0800cb3c
 800c378:	0800cafc 	.word	0x0800cafc

0800c37c <_write_r>:
 800c37c:	b538      	push	{r3, r4, r5, lr}
 800c37e:	4604      	mov	r4, r0
 800c380:	4608      	mov	r0, r1
 800c382:	4611      	mov	r1, r2
 800c384:	2200      	movs	r2, #0
 800c386:	4d05      	ldr	r5, [pc, #20]	; (800c39c <_write_r+0x20>)
 800c388:	602a      	str	r2, [r5, #0]
 800c38a:	461a      	mov	r2, r3
 800c38c:	f7f5 f8c8 	bl	8001520 <_write>
 800c390:	1c43      	adds	r3, r0, #1
 800c392:	d102      	bne.n	800c39a <_write_r+0x1e>
 800c394:	682b      	ldr	r3, [r5, #0]
 800c396:	b103      	cbz	r3, 800c39a <_write_r+0x1e>
 800c398:	6023      	str	r3, [r4, #0]
 800c39a:	bd38      	pop	{r3, r4, r5, pc}
 800c39c:	200015ac 	.word	0x200015ac

0800c3a0 <__swsetup_r>:
 800c3a0:	4b32      	ldr	r3, [pc, #200]	; (800c46c <__swsetup_r+0xcc>)
 800c3a2:	b570      	push	{r4, r5, r6, lr}
 800c3a4:	681d      	ldr	r5, [r3, #0]
 800c3a6:	4606      	mov	r6, r0
 800c3a8:	460c      	mov	r4, r1
 800c3aa:	b125      	cbz	r5, 800c3b6 <__swsetup_r+0x16>
 800c3ac:	69ab      	ldr	r3, [r5, #24]
 800c3ae:	b913      	cbnz	r3, 800c3b6 <__swsetup_r+0x16>
 800c3b0:	4628      	mov	r0, r5
 800c3b2:	f7ff f9f9 	bl	800b7a8 <__sinit>
 800c3b6:	4b2e      	ldr	r3, [pc, #184]	; (800c470 <__swsetup_r+0xd0>)
 800c3b8:	429c      	cmp	r4, r3
 800c3ba:	d10f      	bne.n	800c3dc <__swsetup_r+0x3c>
 800c3bc:	686c      	ldr	r4, [r5, #4]
 800c3be:	89a3      	ldrh	r3, [r4, #12]
 800c3c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c3c4:	0719      	lsls	r1, r3, #28
 800c3c6:	d42c      	bmi.n	800c422 <__swsetup_r+0x82>
 800c3c8:	06dd      	lsls	r5, r3, #27
 800c3ca:	d411      	bmi.n	800c3f0 <__swsetup_r+0x50>
 800c3cc:	2309      	movs	r3, #9
 800c3ce:	6033      	str	r3, [r6, #0]
 800c3d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c3d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3d8:	81a3      	strh	r3, [r4, #12]
 800c3da:	e03e      	b.n	800c45a <__swsetup_r+0xba>
 800c3dc:	4b25      	ldr	r3, [pc, #148]	; (800c474 <__swsetup_r+0xd4>)
 800c3de:	429c      	cmp	r4, r3
 800c3e0:	d101      	bne.n	800c3e6 <__swsetup_r+0x46>
 800c3e2:	68ac      	ldr	r4, [r5, #8]
 800c3e4:	e7eb      	b.n	800c3be <__swsetup_r+0x1e>
 800c3e6:	4b24      	ldr	r3, [pc, #144]	; (800c478 <__swsetup_r+0xd8>)
 800c3e8:	429c      	cmp	r4, r3
 800c3ea:	bf08      	it	eq
 800c3ec:	68ec      	ldreq	r4, [r5, #12]
 800c3ee:	e7e6      	b.n	800c3be <__swsetup_r+0x1e>
 800c3f0:	0758      	lsls	r0, r3, #29
 800c3f2:	d512      	bpl.n	800c41a <__swsetup_r+0x7a>
 800c3f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3f6:	b141      	cbz	r1, 800c40a <__swsetup_r+0x6a>
 800c3f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3fc:	4299      	cmp	r1, r3
 800c3fe:	d002      	beq.n	800c406 <__swsetup_r+0x66>
 800c400:	4630      	mov	r0, r6
 800c402:	f000 f9b7 	bl	800c774 <_free_r>
 800c406:	2300      	movs	r3, #0
 800c408:	6363      	str	r3, [r4, #52]	; 0x34
 800c40a:	89a3      	ldrh	r3, [r4, #12]
 800c40c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c410:	81a3      	strh	r3, [r4, #12]
 800c412:	2300      	movs	r3, #0
 800c414:	6063      	str	r3, [r4, #4]
 800c416:	6923      	ldr	r3, [r4, #16]
 800c418:	6023      	str	r3, [r4, #0]
 800c41a:	89a3      	ldrh	r3, [r4, #12]
 800c41c:	f043 0308 	orr.w	r3, r3, #8
 800c420:	81a3      	strh	r3, [r4, #12]
 800c422:	6923      	ldr	r3, [r4, #16]
 800c424:	b94b      	cbnz	r3, 800c43a <__swsetup_r+0x9a>
 800c426:	89a3      	ldrh	r3, [r4, #12]
 800c428:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c42c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c430:	d003      	beq.n	800c43a <__swsetup_r+0x9a>
 800c432:	4621      	mov	r1, r4
 800c434:	4630      	mov	r0, r6
 800c436:	f000 f929 	bl	800c68c <__smakebuf_r>
 800c43a:	89a0      	ldrh	r0, [r4, #12]
 800c43c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c440:	f010 0301 	ands.w	r3, r0, #1
 800c444:	d00a      	beq.n	800c45c <__swsetup_r+0xbc>
 800c446:	2300      	movs	r3, #0
 800c448:	60a3      	str	r3, [r4, #8]
 800c44a:	6963      	ldr	r3, [r4, #20]
 800c44c:	425b      	negs	r3, r3
 800c44e:	61a3      	str	r3, [r4, #24]
 800c450:	6923      	ldr	r3, [r4, #16]
 800c452:	b943      	cbnz	r3, 800c466 <__swsetup_r+0xc6>
 800c454:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c458:	d1ba      	bne.n	800c3d0 <__swsetup_r+0x30>
 800c45a:	bd70      	pop	{r4, r5, r6, pc}
 800c45c:	0781      	lsls	r1, r0, #30
 800c45e:	bf58      	it	pl
 800c460:	6963      	ldrpl	r3, [r4, #20]
 800c462:	60a3      	str	r3, [r4, #8]
 800c464:	e7f4      	b.n	800c450 <__swsetup_r+0xb0>
 800c466:	2000      	movs	r0, #0
 800c468:	e7f7      	b.n	800c45a <__swsetup_r+0xba>
 800c46a:	bf00      	nop
 800c46c:	20000190 	.word	0x20000190
 800c470:	0800cb1c 	.word	0x0800cb1c
 800c474:	0800cb3c 	.word	0x0800cb3c
 800c478:	0800cafc 	.word	0x0800cafc

0800c47c <_close_r>:
 800c47c:	b538      	push	{r3, r4, r5, lr}
 800c47e:	2300      	movs	r3, #0
 800c480:	4d05      	ldr	r5, [pc, #20]	; (800c498 <_close_r+0x1c>)
 800c482:	4604      	mov	r4, r0
 800c484:	4608      	mov	r0, r1
 800c486:	602b      	str	r3, [r5, #0]
 800c488:	f7f6 fc6d 	bl	8002d66 <_close>
 800c48c:	1c43      	adds	r3, r0, #1
 800c48e:	d102      	bne.n	800c496 <_close_r+0x1a>
 800c490:	682b      	ldr	r3, [r5, #0]
 800c492:	b103      	cbz	r3, 800c496 <_close_r+0x1a>
 800c494:	6023      	str	r3, [r4, #0]
 800c496:	bd38      	pop	{r3, r4, r5, pc}
 800c498:	200015ac 	.word	0x200015ac

0800c49c <__sflush_r>:
 800c49c:	898a      	ldrh	r2, [r1, #12]
 800c49e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4a2:	4605      	mov	r5, r0
 800c4a4:	0710      	lsls	r0, r2, #28
 800c4a6:	460c      	mov	r4, r1
 800c4a8:	d458      	bmi.n	800c55c <__sflush_r+0xc0>
 800c4aa:	684b      	ldr	r3, [r1, #4]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	dc05      	bgt.n	800c4bc <__sflush_r+0x20>
 800c4b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	dc02      	bgt.n	800c4bc <__sflush_r+0x20>
 800c4b6:	2000      	movs	r0, #0
 800c4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c4be:	2e00      	cmp	r6, #0
 800c4c0:	d0f9      	beq.n	800c4b6 <__sflush_r+0x1a>
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c4c8:	682f      	ldr	r7, [r5, #0]
 800c4ca:	602b      	str	r3, [r5, #0]
 800c4cc:	d032      	beq.n	800c534 <__sflush_r+0x98>
 800c4ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c4d0:	89a3      	ldrh	r3, [r4, #12]
 800c4d2:	075a      	lsls	r2, r3, #29
 800c4d4:	d505      	bpl.n	800c4e2 <__sflush_r+0x46>
 800c4d6:	6863      	ldr	r3, [r4, #4]
 800c4d8:	1ac0      	subs	r0, r0, r3
 800c4da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c4dc:	b10b      	cbz	r3, 800c4e2 <__sflush_r+0x46>
 800c4de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c4e0:	1ac0      	subs	r0, r0, r3
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	4602      	mov	r2, r0
 800c4e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c4e8:	4628      	mov	r0, r5
 800c4ea:	6a21      	ldr	r1, [r4, #32]
 800c4ec:	47b0      	blx	r6
 800c4ee:	1c43      	adds	r3, r0, #1
 800c4f0:	89a3      	ldrh	r3, [r4, #12]
 800c4f2:	d106      	bne.n	800c502 <__sflush_r+0x66>
 800c4f4:	6829      	ldr	r1, [r5, #0]
 800c4f6:	291d      	cmp	r1, #29
 800c4f8:	d82c      	bhi.n	800c554 <__sflush_r+0xb8>
 800c4fa:	4a2a      	ldr	r2, [pc, #168]	; (800c5a4 <__sflush_r+0x108>)
 800c4fc:	40ca      	lsrs	r2, r1
 800c4fe:	07d6      	lsls	r6, r2, #31
 800c500:	d528      	bpl.n	800c554 <__sflush_r+0xb8>
 800c502:	2200      	movs	r2, #0
 800c504:	6062      	str	r2, [r4, #4]
 800c506:	6922      	ldr	r2, [r4, #16]
 800c508:	04d9      	lsls	r1, r3, #19
 800c50a:	6022      	str	r2, [r4, #0]
 800c50c:	d504      	bpl.n	800c518 <__sflush_r+0x7c>
 800c50e:	1c42      	adds	r2, r0, #1
 800c510:	d101      	bne.n	800c516 <__sflush_r+0x7a>
 800c512:	682b      	ldr	r3, [r5, #0]
 800c514:	b903      	cbnz	r3, 800c518 <__sflush_r+0x7c>
 800c516:	6560      	str	r0, [r4, #84]	; 0x54
 800c518:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c51a:	602f      	str	r7, [r5, #0]
 800c51c:	2900      	cmp	r1, #0
 800c51e:	d0ca      	beq.n	800c4b6 <__sflush_r+0x1a>
 800c520:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c524:	4299      	cmp	r1, r3
 800c526:	d002      	beq.n	800c52e <__sflush_r+0x92>
 800c528:	4628      	mov	r0, r5
 800c52a:	f000 f923 	bl	800c774 <_free_r>
 800c52e:	2000      	movs	r0, #0
 800c530:	6360      	str	r0, [r4, #52]	; 0x34
 800c532:	e7c1      	b.n	800c4b8 <__sflush_r+0x1c>
 800c534:	6a21      	ldr	r1, [r4, #32]
 800c536:	2301      	movs	r3, #1
 800c538:	4628      	mov	r0, r5
 800c53a:	47b0      	blx	r6
 800c53c:	1c41      	adds	r1, r0, #1
 800c53e:	d1c7      	bne.n	800c4d0 <__sflush_r+0x34>
 800c540:	682b      	ldr	r3, [r5, #0]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d0c4      	beq.n	800c4d0 <__sflush_r+0x34>
 800c546:	2b1d      	cmp	r3, #29
 800c548:	d001      	beq.n	800c54e <__sflush_r+0xb2>
 800c54a:	2b16      	cmp	r3, #22
 800c54c:	d101      	bne.n	800c552 <__sflush_r+0xb6>
 800c54e:	602f      	str	r7, [r5, #0]
 800c550:	e7b1      	b.n	800c4b6 <__sflush_r+0x1a>
 800c552:	89a3      	ldrh	r3, [r4, #12]
 800c554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c558:	81a3      	strh	r3, [r4, #12]
 800c55a:	e7ad      	b.n	800c4b8 <__sflush_r+0x1c>
 800c55c:	690f      	ldr	r7, [r1, #16]
 800c55e:	2f00      	cmp	r7, #0
 800c560:	d0a9      	beq.n	800c4b6 <__sflush_r+0x1a>
 800c562:	0793      	lsls	r3, r2, #30
 800c564:	bf18      	it	ne
 800c566:	2300      	movne	r3, #0
 800c568:	680e      	ldr	r6, [r1, #0]
 800c56a:	bf08      	it	eq
 800c56c:	694b      	ldreq	r3, [r1, #20]
 800c56e:	eba6 0807 	sub.w	r8, r6, r7
 800c572:	600f      	str	r7, [r1, #0]
 800c574:	608b      	str	r3, [r1, #8]
 800c576:	f1b8 0f00 	cmp.w	r8, #0
 800c57a:	dd9c      	ble.n	800c4b6 <__sflush_r+0x1a>
 800c57c:	4643      	mov	r3, r8
 800c57e:	463a      	mov	r2, r7
 800c580:	4628      	mov	r0, r5
 800c582:	6a21      	ldr	r1, [r4, #32]
 800c584:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c586:	47b0      	blx	r6
 800c588:	2800      	cmp	r0, #0
 800c58a:	dc06      	bgt.n	800c59a <__sflush_r+0xfe>
 800c58c:	89a3      	ldrh	r3, [r4, #12]
 800c58e:	f04f 30ff 	mov.w	r0, #4294967295
 800c592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c596:	81a3      	strh	r3, [r4, #12]
 800c598:	e78e      	b.n	800c4b8 <__sflush_r+0x1c>
 800c59a:	4407      	add	r7, r0
 800c59c:	eba8 0800 	sub.w	r8, r8, r0
 800c5a0:	e7e9      	b.n	800c576 <__sflush_r+0xda>
 800c5a2:	bf00      	nop
 800c5a4:	20400001 	.word	0x20400001

0800c5a8 <_fflush_r>:
 800c5a8:	b538      	push	{r3, r4, r5, lr}
 800c5aa:	690b      	ldr	r3, [r1, #16]
 800c5ac:	4605      	mov	r5, r0
 800c5ae:	460c      	mov	r4, r1
 800c5b0:	b913      	cbnz	r3, 800c5b8 <_fflush_r+0x10>
 800c5b2:	2500      	movs	r5, #0
 800c5b4:	4628      	mov	r0, r5
 800c5b6:	bd38      	pop	{r3, r4, r5, pc}
 800c5b8:	b118      	cbz	r0, 800c5c2 <_fflush_r+0x1a>
 800c5ba:	6983      	ldr	r3, [r0, #24]
 800c5bc:	b90b      	cbnz	r3, 800c5c2 <_fflush_r+0x1a>
 800c5be:	f7ff f8f3 	bl	800b7a8 <__sinit>
 800c5c2:	4b14      	ldr	r3, [pc, #80]	; (800c614 <_fflush_r+0x6c>)
 800c5c4:	429c      	cmp	r4, r3
 800c5c6:	d11b      	bne.n	800c600 <_fflush_r+0x58>
 800c5c8:	686c      	ldr	r4, [r5, #4]
 800c5ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d0ef      	beq.n	800c5b2 <_fflush_r+0xa>
 800c5d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c5d4:	07d0      	lsls	r0, r2, #31
 800c5d6:	d404      	bmi.n	800c5e2 <_fflush_r+0x3a>
 800c5d8:	0599      	lsls	r1, r3, #22
 800c5da:	d402      	bmi.n	800c5e2 <_fflush_r+0x3a>
 800c5dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5de:	f7ff f981 	bl	800b8e4 <__retarget_lock_acquire_recursive>
 800c5e2:	4628      	mov	r0, r5
 800c5e4:	4621      	mov	r1, r4
 800c5e6:	f7ff ff59 	bl	800c49c <__sflush_r>
 800c5ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5ec:	4605      	mov	r5, r0
 800c5ee:	07da      	lsls	r2, r3, #31
 800c5f0:	d4e0      	bmi.n	800c5b4 <_fflush_r+0xc>
 800c5f2:	89a3      	ldrh	r3, [r4, #12]
 800c5f4:	059b      	lsls	r3, r3, #22
 800c5f6:	d4dd      	bmi.n	800c5b4 <_fflush_r+0xc>
 800c5f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5fa:	f7ff f974 	bl	800b8e6 <__retarget_lock_release_recursive>
 800c5fe:	e7d9      	b.n	800c5b4 <_fflush_r+0xc>
 800c600:	4b05      	ldr	r3, [pc, #20]	; (800c618 <_fflush_r+0x70>)
 800c602:	429c      	cmp	r4, r3
 800c604:	d101      	bne.n	800c60a <_fflush_r+0x62>
 800c606:	68ac      	ldr	r4, [r5, #8]
 800c608:	e7df      	b.n	800c5ca <_fflush_r+0x22>
 800c60a:	4b04      	ldr	r3, [pc, #16]	; (800c61c <_fflush_r+0x74>)
 800c60c:	429c      	cmp	r4, r3
 800c60e:	bf08      	it	eq
 800c610:	68ec      	ldreq	r4, [r5, #12]
 800c612:	e7da      	b.n	800c5ca <_fflush_r+0x22>
 800c614:	0800cb1c 	.word	0x0800cb1c
 800c618:	0800cb3c 	.word	0x0800cb3c
 800c61c:	0800cafc 	.word	0x0800cafc

0800c620 <_lseek_r>:
 800c620:	b538      	push	{r3, r4, r5, lr}
 800c622:	4604      	mov	r4, r0
 800c624:	4608      	mov	r0, r1
 800c626:	4611      	mov	r1, r2
 800c628:	2200      	movs	r2, #0
 800c62a:	4d05      	ldr	r5, [pc, #20]	; (800c640 <_lseek_r+0x20>)
 800c62c:	602a      	str	r2, [r5, #0]
 800c62e:	461a      	mov	r2, r3
 800c630:	f7f6 fbbd 	bl	8002dae <_lseek>
 800c634:	1c43      	adds	r3, r0, #1
 800c636:	d102      	bne.n	800c63e <_lseek_r+0x1e>
 800c638:	682b      	ldr	r3, [r5, #0]
 800c63a:	b103      	cbz	r3, 800c63e <_lseek_r+0x1e>
 800c63c:	6023      	str	r3, [r4, #0]
 800c63e:	bd38      	pop	{r3, r4, r5, pc}
 800c640:	200015ac 	.word	0x200015ac

0800c644 <__swhatbuf_r>:
 800c644:	b570      	push	{r4, r5, r6, lr}
 800c646:	460e      	mov	r6, r1
 800c648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c64c:	4614      	mov	r4, r2
 800c64e:	2900      	cmp	r1, #0
 800c650:	461d      	mov	r5, r3
 800c652:	b096      	sub	sp, #88	; 0x58
 800c654:	da07      	bge.n	800c666 <__swhatbuf_r+0x22>
 800c656:	2300      	movs	r3, #0
 800c658:	602b      	str	r3, [r5, #0]
 800c65a:	89b3      	ldrh	r3, [r6, #12]
 800c65c:	061a      	lsls	r2, r3, #24
 800c65e:	d410      	bmi.n	800c682 <__swhatbuf_r+0x3e>
 800c660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c664:	e00e      	b.n	800c684 <__swhatbuf_r+0x40>
 800c666:	466a      	mov	r2, sp
 800c668:	f000 f908 	bl	800c87c <_fstat_r>
 800c66c:	2800      	cmp	r0, #0
 800c66e:	dbf2      	blt.n	800c656 <__swhatbuf_r+0x12>
 800c670:	9a01      	ldr	r2, [sp, #4]
 800c672:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c676:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c67a:	425a      	negs	r2, r3
 800c67c:	415a      	adcs	r2, r3
 800c67e:	602a      	str	r2, [r5, #0]
 800c680:	e7ee      	b.n	800c660 <__swhatbuf_r+0x1c>
 800c682:	2340      	movs	r3, #64	; 0x40
 800c684:	2000      	movs	r0, #0
 800c686:	6023      	str	r3, [r4, #0]
 800c688:	b016      	add	sp, #88	; 0x58
 800c68a:	bd70      	pop	{r4, r5, r6, pc}

0800c68c <__smakebuf_r>:
 800c68c:	898b      	ldrh	r3, [r1, #12]
 800c68e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c690:	079d      	lsls	r5, r3, #30
 800c692:	4606      	mov	r6, r0
 800c694:	460c      	mov	r4, r1
 800c696:	d507      	bpl.n	800c6a8 <__smakebuf_r+0x1c>
 800c698:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c69c:	6023      	str	r3, [r4, #0]
 800c69e:	6123      	str	r3, [r4, #16]
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	6163      	str	r3, [r4, #20]
 800c6a4:	b002      	add	sp, #8
 800c6a6:	bd70      	pop	{r4, r5, r6, pc}
 800c6a8:	466a      	mov	r2, sp
 800c6aa:	ab01      	add	r3, sp, #4
 800c6ac:	f7ff ffca 	bl	800c644 <__swhatbuf_r>
 800c6b0:	9900      	ldr	r1, [sp, #0]
 800c6b2:	4605      	mov	r5, r0
 800c6b4:	4630      	mov	r0, r6
 800c6b6:	f7ff f917 	bl	800b8e8 <_malloc_r>
 800c6ba:	b948      	cbnz	r0, 800c6d0 <__smakebuf_r+0x44>
 800c6bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6c0:	059a      	lsls	r2, r3, #22
 800c6c2:	d4ef      	bmi.n	800c6a4 <__smakebuf_r+0x18>
 800c6c4:	f023 0303 	bic.w	r3, r3, #3
 800c6c8:	f043 0302 	orr.w	r3, r3, #2
 800c6cc:	81a3      	strh	r3, [r4, #12]
 800c6ce:	e7e3      	b.n	800c698 <__smakebuf_r+0xc>
 800c6d0:	4b0d      	ldr	r3, [pc, #52]	; (800c708 <__smakebuf_r+0x7c>)
 800c6d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c6d4:	89a3      	ldrh	r3, [r4, #12]
 800c6d6:	6020      	str	r0, [r4, #0]
 800c6d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6dc:	81a3      	strh	r3, [r4, #12]
 800c6de:	9b00      	ldr	r3, [sp, #0]
 800c6e0:	6120      	str	r0, [r4, #16]
 800c6e2:	6163      	str	r3, [r4, #20]
 800c6e4:	9b01      	ldr	r3, [sp, #4]
 800c6e6:	b15b      	cbz	r3, 800c700 <__smakebuf_r+0x74>
 800c6e8:	4630      	mov	r0, r6
 800c6ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6ee:	f000 f8d7 	bl	800c8a0 <_isatty_r>
 800c6f2:	b128      	cbz	r0, 800c700 <__smakebuf_r+0x74>
 800c6f4:	89a3      	ldrh	r3, [r4, #12]
 800c6f6:	f023 0303 	bic.w	r3, r3, #3
 800c6fa:	f043 0301 	orr.w	r3, r3, #1
 800c6fe:	81a3      	strh	r3, [r4, #12]
 800c700:	89a0      	ldrh	r0, [r4, #12]
 800c702:	4305      	orrs	r5, r0
 800c704:	81a5      	strh	r5, [r4, #12]
 800c706:	e7cd      	b.n	800c6a4 <__smakebuf_r+0x18>
 800c708:	0800b741 	.word	0x0800b741

0800c70c <memchr>:
 800c70c:	4603      	mov	r3, r0
 800c70e:	b510      	push	{r4, lr}
 800c710:	b2c9      	uxtb	r1, r1
 800c712:	4402      	add	r2, r0
 800c714:	4293      	cmp	r3, r2
 800c716:	4618      	mov	r0, r3
 800c718:	d101      	bne.n	800c71e <memchr+0x12>
 800c71a:	2000      	movs	r0, #0
 800c71c:	e003      	b.n	800c726 <memchr+0x1a>
 800c71e:	7804      	ldrb	r4, [r0, #0]
 800c720:	3301      	adds	r3, #1
 800c722:	428c      	cmp	r4, r1
 800c724:	d1f6      	bne.n	800c714 <memchr+0x8>
 800c726:	bd10      	pop	{r4, pc}

0800c728 <memmove>:
 800c728:	4288      	cmp	r0, r1
 800c72a:	b510      	push	{r4, lr}
 800c72c:	eb01 0402 	add.w	r4, r1, r2
 800c730:	d902      	bls.n	800c738 <memmove+0x10>
 800c732:	4284      	cmp	r4, r0
 800c734:	4623      	mov	r3, r4
 800c736:	d807      	bhi.n	800c748 <memmove+0x20>
 800c738:	1e43      	subs	r3, r0, #1
 800c73a:	42a1      	cmp	r1, r4
 800c73c:	d008      	beq.n	800c750 <memmove+0x28>
 800c73e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c742:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c746:	e7f8      	b.n	800c73a <memmove+0x12>
 800c748:	4601      	mov	r1, r0
 800c74a:	4402      	add	r2, r0
 800c74c:	428a      	cmp	r2, r1
 800c74e:	d100      	bne.n	800c752 <memmove+0x2a>
 800c750:	bd10      	pop	{r4, pc}
 800c752:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c756:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c75a:	e7f7      	b.n	800c74c <memmove+0x24>

0800c75c <__malloc_lock>:
 800c75c:	4801      	ldr	r0, [pc, #4]	; (800c764 <__malloc_lock+0x8>)
 800c75e:	f7ff b8c1 	b.w	800b8e4 <__retarget_lock_acquire_recursive>
 800c762:	bf00      	nop
 800c764:	200015a4 	.word	0x200015a4

0800c768 <__malloc_unlock>:
 800c768:	4801      	ldr	r0, [pc, #4]	; (800c770 <__malloc_unlock+0x8>)
 800c76a:	f7ff b8bc 	b.w	800b8e6 <__retarget_lock_release_recursive>
 800c76e:	bf00      	nop
 800c770:	200015a4 	.word	0x200015a4

0800c774 <_free_r>:
 800c774:	b538      	push	{r3, r4, r5, lr}
 800c776:	4605      	mov	r5, r0
 800c778:	2900      	cmp	r1, #0
 800c77a:	d043      	beq.n	800c804 <_free_r+0x90>
 800c77c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c780:	1f0c      	subs	r4, r1, #4
 800c782:	2b00      	cmp	r3, #0
 800c784:	bfb8      	it	lt
 800c786:	18e4      	addlt	r4, r4, r3
 800c788:	f7ff ffe8 	bl	800c75c <__malloc_lock>
 800c78c:	4a1e      	ldr	r2, [pc, #120]	; (800c808 <_free_r+0x94>)
 800c78e:	6813      	ldr	r3, [r2, #0]
 800c790:	4610      	mov	r0, r2
 800c792:	b933      	cbnz	r3, 800c7a2 <_free_r+0x2e>
 800c794:	6063      	str	r3, [r4, #4]
 800c796:	6014      	str	r4, [r2, #0]
 800c798:	4628      	mov	r0, r5
 800c79a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c79e:	f7ff bfe3 	b.w	800c768 <__malloc_unlock>
 800c7a2:	42a3      	cmp	r3, r4
 800c7a4:	d90a      	bls.n	800c7bc <_free_r+0x48>
 800c7a6:	6821      	ldr	r1, [r4, #0]
 800c7a8:	1862      	adds	r2, r4, r1
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	bf01      	itttt	eq
 800c7ae:	681a      	ldreq	r2, [r3, #0]
 800c7b0:	685b      	ldreq	r3, [r3, #4]
 800c7b2:	1852      	addeq	r2, r2, r1
 800c7b4:	6022      	streq	r2, [r4, #0]
 800c7b6:	6063      	str	r3, [r4, #4]
 800c7b8:	6004      	str	r4, [r0, #0]
 800c7ba:	e7ed      	b.n	800c798 <_free_r+0x24>
 800c7bc:	461a      	mov	r2, r3
 800c7be:	685b      	ldr	r3, [r3, #4]
 800c7c0:	b10b      	cbz	r3, 800c7c6 <_free_r+0x52>
 800c7c2:	42a3      	cmp	r3, r4
 800c7c4:	d9fa      	bls.n	800c7bc <_free_r+0x48>
 800c7c6:	6811      	ldr	r1, [r2, #0]
 800c7c8:	1850      	adds	r0, r2, r1
 800c7ca:	42a0      	cmp	r0, r4
 800c7cc:	d10b      	bne.n	800c7e6 <_free_r+0x72>
 800c7ce:	6820      	ldr	r0, [r4, #0]
 800c7d0:	4401      	add	r1, r0
 800c7d2:	1850      	adds	r0, r2, r1
 800c7d4:	4283      	cmp	r3, r0
 800c7d6:	6011      	str	r1, [r2, #0]
 800c7d8:	d1de      	bne.n	800c798 <_free_r+0x24>
 800c7da:	6818      	ldr	r0, [r3, #0]
 800c7dc:	685b      	ldr	r3, [r3, #4]
 800c7de:	4401      	add	r1, r0
 800c7e0:	6011      	str	r1, [r2, #0]
 800c7e2:	6053      	str	r3, [r2, #4]
 800c7e4:	e7d8      	b.n	800c798 <_free_r+0x24>
 800c7e6:	d902      	bls.n	800c7ee <_free_r+0x7a>
 800c7e8:	230c      	movs	r3, #12
 800c7ea:	602b      	str	r3, [r5, #0]
 800c7ec:	e7d4      	b.n	800c798 <_free_r+0x24>
 800c7ee:	6820      	ldr	r0, [r4, #0]
 800c7f0:	1821      	adds	r1, r4, r0
 800c7f2:	428b      	cmp	r3, r1
 800c7f4:	bf01      	itttt	eq
 800c7f6:	6819      	ldreq	r1, [r3, #0]
 800c7f8:	685b      	ldreq	r3, [r3, #4]
 800c7fa:	1809      	addeq	r1, r1, r0
 800c7fc:	6021      	streq	r1, [r4, #0]
 800c7fe:	6063      	str	r3, [r4, #4]
 800c800:	6054      	str	r4, [r2, #4]
 800c802:	e7c9      	b.n	800c798 <_free_r+0x24>
 800c804:	bd38      	pop	{r3, r4, r5, pc}
 800c806:	bf00      	nop
 800c808:	200004a4 	.word	0x200004a4

0800c80c <_realloc_r>:
 800c80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c80e:	4607      	mov	r7, r0
 800c810:	4614      	mov	r4, r2
 800c812:	460e      	mov	r6, r1
 800c814:	b921      	cbnz	r1, 800c820 <_realloc_r+0x14>
 800c816:	4611      	mov	r1, r2
 800c818:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c81c:	f7ff b864 	b.w	800b8e8 <_malloc_r>
 800c820:	b922      	cbnz	r2, 800c82c <_realloc_r+0x20>
 800c822:	f7ff ffa7 	bl	800c774 <_free_r>
 800c826:	4625      	mov	r5, r4
 800c828:	4628      	mov	r0, r5
 800c82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c82c:	f000 f848 	bl	800c8c0 <_malloc_usable_size_r>
 800c830:	42a0      	cmp	r0, r4
 800c832:	d20f      	bcs.n	800c854 <_realloc_r+0x48>
 800c834:	4621      	mov	r1, r4
 800c836:	4638      	mov	r0, r7
 800c838:	f7ff f856 	bl	800b8e8 <_malloc_r>
 800c83c:	4605      	mov	r5, r0
 800c83e:	2800      	cmp	r0, #0
 800c840:	d0f2      	beq.n	800c828 <_realloc_r+0x1c>
 800c842:	4631      	mov	r1, r6
 800c844:	4622      	mov	r2, r4
 800c846:	f7fe ff09 	bl	800b65c <memcpy>
 800c84a:	4631      	mov	r1, r6
 800c84c:	4638      	mov	r0, r7
 800c84e:	f7ff ff91 	bl	800c774 <_free_r>
 800c852:	e7e9      	b.n	800c828 <_realloc_r+0x1c>
 800c854:	4635      	mov	r5, r6
 800c856:	e7e7      	b.n	800c828 <_realloc_r+0x1c>

0800c858 <_read_r>:
 800c858:	b538      	push	{r3, r4, r5, lr}
 800c85a:	4604      	mov	r4, r0
 800c85c:	4608      	mov	r0, r1
 800c85e:	4611      	mov	r1, r2
 800c860:	2200      	movs	r2, #0
 800c862:	4d05      	ldr	r5, [pc, #20]	; (800c878 <_read_r+0x20>)
 800c864:	602a      	str	r2, [r5, #0]
 800c866:	461a      	mov	r2, r3
 800c868:	f7f6 fa60 	bl	8002d2c <_read>
 800c86c:	1c43      	adds	r3, r0, #1
 800c86e:	d102      	bne.n	800c876 <_read_r+0x1e>
 800c870:	682b      	ldr	r3, [r5, #0]
 800c872:	b103      	cbz	r3, 800c876 <_read_r+0x1e>
 800c874:	6023      	str	r3, [r4, #0]
 800c876:	bd38      	pop	{r3, r4, r5, pc}
 800c878:	200015ac 	.word	0x200015ac

0800c87c <_fstat_r>:
 800c87c:	b538      	push	{r3, r4, r5, lr}
 800c87e:	2300      	movs	r3, #0
 800c880:	4d06      	ldr	r5, [pc, #24]	; (800c89c <_fstat_r+0x20>)
 800c882:	4604      	mov	r4, r0
 800c884:	4608      	mov	r0, r1
 800c886:	4611      	mov	r1, r2
 800c888:	602b      	str	r3, [r5, #0]
 800c88a:	f7f6 fa77 	bl	8002d7c <_fstat>
 800c88e:	1c43      	adds	r3, r0, #1
 800c890:	d102      	bne.n	800c898 <_fstat_r+0x1c>
 800c892:	682b      	ldr	r3, [r5, #0]
 800c894:	b103      	cbz	r3, 800c898 <_fstat_r+0x1c>
 800c896:	6023      	str	r3, [r4, #0]
 800c898:	bd38      	pop	{r3, r4, r5, pc}
 800c89a:	bf00      	nop
 800c89c:	200015ac 	.word	0x200015ac

0800c8a0 <_isatty_r>:
 800c8a0:	b538      	push	{r3, r4, r5, lr}
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	4d05      	ldr	r5, [pc, #20]	; (800c8bc <_isatty_r+0x1c>)
 800c8a6:	4604      	mov	r4, r0
 800c8a8:	4608      	mov	r0, r1
 800c8aa:	602b      	str	r3, [r5, #0]
 800c8ac:	f7f6 fa75 	bl	8002d9a <_isatty>
 800c8b0:	1c43      	adds	r3, r0, #1
 800c8b2:	d102      	bne.n	800c8ba <_isatty_r+0x1a>
 800c8b4:	682b      	ldr	r3, [r5, #0]
 800c8b6:	b103      	cbz	r3, 800c8ba <_isatty_r+0x1a>
 800c8b8:	6023      	str	r3, [r4, #0]
 800c8ba:	bd38      	pop	{r3, r4, r5, pc}
 800c8bc:	200015ac 	.word	0x200015ac

0800c8c0 <_malloc_usable_size_r>:
 800c8c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8c4:	1f18      	subs	r0, r3, #4
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	bfbc      	itt	lt
 800c8ca:	580b      	ldrlt	r3, [r1, r0]
 800c8cc:	18c0      	addlt	r0, r0, r3
 800c8ce:	4770      	bx	lr

0800c8d0 <floor>:
 800c8d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8d4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800c8d8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800c8dc:	2e13      	cmp	r6, #19
 800c8de:	4602      	mov	r2, r0
 800c8e0:	460b      	mov	r3, r1
 800c8e2:	4607      	mov	r7, r0
 800c8e4:	460c      	mov	r4, r1
 800c8e6:	4605      	mov	r5, r0
 800c8e8:	dc34      	bgt.n	800c954 <floor+0x84>
 800c8ea:	2e00      	cmp	r6, #0
 800c8ec:	da15      	bge.n	800c91a <floor+0x4a>
 800c8ee:	a334      	add	r3, pc, #208	; (adr r3, 800c9c0 <floor+0xf0>)
 800c8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f4:	f7f3 fc3a 	bl	800016c <__adddf3>
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	f7f3 fe6a 	bl	80005d4 <__aeabi_dcmpgt>
 800c900:	b140      	cbz	r0, 800c914 <floor+0x44>
 800c902:	2c00      	cmp	r4, #0
 800c904:	da59      	bge.n	800c9ba <floor+0xea>
 800c906:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c90a:	ea57 0503 	orrs.w	r5, r7, r3
 800c90e:	d001      	beq.n	800c914 <floor+0x44>
 800c910:	2500      	movs	r5, #0
 800c912:	4c2d      	ldr	r4, [pc, #180]	; (800c9c8 <floor+0xf8>)
 800c914:	4623      	mov	r3, r4
 800c916:	462f      	mov	r7, r5
 800c918:	e025      	b.n	800c966 <floor+0x96>
 800c91a:	4a2c      	ldr	r2, [pc, #176]	; (800c9cc <floor+0xfc>)
 800c91c:	fa42 f806 	asr.w	r8, r2, r6
 800c920:	ea01 0208 	and.w	r2, r1, r8
 800c924:	4302      	orrs	r2, r0
 800c926:	d01e      	beq.n	800c966 <floor+0x96>
 800c928:	a325      	add	r3, pc, #148	; (adr r3, 800c9c0 <floor+0xf0>)
 800c92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92e:	f7f3 fc1d 	bl	800016c <__adddf3>
 800c932:	2200      	movs	r2, #0
 800c934:	2300      	movs	r3, #0
 800c936:	f7f3 fe4d 	bl	80005d4 <__aeabi_dcmpgt>
 800c93a:	2800      	cmp	r0, #0
 800c93c:	d0ea      	beq.n	800c914 <floor+0x44>
 800c93e:	2c00      	cmp	r4, #0
 800c940:	bfbe      	ittt	lt
 800c942:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c946:	fa43 f606 	asrlt.w	r6, r3, r6
 800c94a:	19a4      	addlt	r4, r4, r6
 800c94c:	2500      	movs	r5, #0
 800c94e:	ea24 0408 	bic.w	r4, r4, r8
 800c952:	e7df      	b.n	800c914 <floor+0x44>
 800c954:	2e33      	cmp	r6, #51	; 0x33
 800c956:	dd0a      	ble.n	800c96e <floor+0x9e>
 800c958:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c95c:	d103      	bne.n	800c966 <floor+0x96>
 800c95e:	f7f3 fc05 	bl	800016c <__adddf3>
 800c962:	4607      	mov	r7, r0
 800c964:	460b      	mov	r3, r1
 800c966:	4638      	mov	r0, r7
 800c968:	4619      	mov	r1, r3
 800c96a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c96e:	f04f 32ff 	mov.w	r2, #4294967295
 800c972:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800c976:	fa22 f808 	lsr.w	r8, r2, r8
 800c97a:	ea18 0f00 	tst.w	r8, r0
 800c97e:	d0f2      	beq.n	800c966 <floor+0x96>
 800c980:	a30f      	add	r3, pc, #60	; (adr r3, 800c9c0 <floor+0xf0>)
 800c982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c986:	f7f3 fbf1 	bl	800016c <__adddf3>
 800c98a:	2200      	movs	r2, #0
 800c98c:	2300      	movs	r3, #0
 800c98e:	f7f3 fe21 	bl	80005d4 <__aeabi_dcmpgt>
 800c992:	2800      	cmp	r0, #0
 800c994:	d0be      	beq.n	800c914 <floor+0x44>
 800c996:	2c00      	cmp	r4, #0
 800c998:	da02      	bge.n	800c9a0 <floor+0xd0>
 800c99a:	2e14      	cmp	r6, #20
 800c99c:	d103      	bne.n	800c9a6 <floor+0xd6>
 800c99e:	3401      	adds	r4, #1
 800c9a0:	ea25 0508 	bic.w	r5, r5, r8
 800c9a4:	e7b6      	b.n	800c914 <floor+0x44>
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c9ac:	fa03 f606 	lsl.w	r6, r3, r6
 800c9b0:	4435      	add	r5, r6
 800c9b2:	42bd      	cmp	r5, r7
 800c9b4:	bf38      	it	cc
 800c9b6:	18e4      	addcc	r4, r4, r3
 800c9b8:	e7f2      	b.n	800c9a0 <floor+0xd0>
 800c9ba:	2500      	movs	r5, #0
 800c9bc:	462c      	mov	r4, r5
 800c9be:	e7a9      	b.n	800c914 <floor+0x44>
 800c9c0:	8800759c 	.word	0x8800759c
 800c9c4:	7e37e43c 	.word	0x7e37e43c
 800c9c8:	bff00000 	.word	0xbff00000
 800c9cc:	000fffff 	.word	0x000fffff

0800c9d0 <_init>:
 800c9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9d2:	bf00      	nop
 800c9d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9d6:	bc08      	pop	{r3}
 800c9d8:	469e      	mov	lr, r3
 800c9da:	4770      	bx	lr

0800c9dc <_fini>:
 800c9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9de:	bf00      	nop
 800c9e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9e2:	bc08      	pop	{r3}
 800c9e4:	469e      	mov	lr, r3
 800c9e6:	4770      	bx	lr
