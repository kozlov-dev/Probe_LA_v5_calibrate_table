
Probe_LA_v5_calibrate_table.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6a0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  0800c7b0  0800c7b0  0001c7b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c990  0800c990  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c990  0800c990  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c990  0800c990  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c990  0800c990  0001c990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c994  0800c994  0001c994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800c998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c8  200001f0  0800cb88  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200015b8  0800cb88  000215b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fbae  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a97  00000000  00000000  0003fdc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  00044860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c8  00000000  00000000  00045f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dd24  00000000  00000000  000473f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e37a  00000000  00000000  0006511c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097f0b  00000000  00000000  00083496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011b3a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006960  00000000  00000000  0011b3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c798 	.word	0x0800c798

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800c798 	.word	0x0800c798

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__gedf2>:
 80004d8:	f04f 3cff 	mov.w	ip, #4294967295
 80004dc:	e006      	b.n	80004ec <__cmpdf2+0x4>
 80004de:	bf00      	nop

080004e0 <__ledf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	e002      	b.n	80004ec <__cmpdf2+0x4>
 80004e6:	bf00      	nop

080004e8 <__cmpdf2>:
 80004e8:	f04f 0c01 	mov.w	ip, #1
 80004ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004fc:	bf18      	it	ne
 80004fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000502:	d01b      	beq.n	800053c <__cmpdf2+0x54>
 8000504:	b001      	add	sp, #4
 8000506:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800050a:	bf0c      	ite	eq
 800050c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000510:	ea91 0f03 	teqne	r1, r3
 8000514:	bf02      	ittt	eq
 8000516:	ea90 0f02 	teqeq	r0, r2
 800051a:	2000      	moveq	r0, #0
 800051c:	4770      	bxeq	lr
 800051e:	f110 0f00 	cmn.w	r0, #0
 8000522:	ea91 0f03 	teq	r1, r3
 8000526:	bf58      	it	pl
 8000528:	4299      	cmppl	r1, r3
 800052a:	bf08      	it	eq
 800052c:	4290      	cmpeq	r0, r2
 800052e:	bf2c      	ite	cs
 8000530:	17d8      	asrcs	r0, r3, #31
 8000532:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000536:	f040 0001 	orr.w	r0, r0, #1
 800053a:	4770      	bx	lr
 800053c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d102      	bne.n	800054c <__cmpdf2+0x64>
 8000546:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800054a:	d107      	bne.n	800055c <__cmpdf2+0x74>
 800054c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000550:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000554:	d1d6      	bne.n	8000504 <__cmpdf2+0x1c>
 8000556:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800055a:	d0d3      	beq.n	8000504 <__cmpdf2+0x1c>
 800055c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <__aeabi_cdrcmple>:
 8000564:	4684      	mov	ip, r0
 8000566:	4610      	mov	r0, r2
 8000568:	4662      	mov	r2, ip
 800056a:	468c      	mov	ip, r1
 800056c:	4619      	mov	r1, r3
 800056e:	4663      	mov	r3, ip
 8000570:	e000      	b.n	8000574 <__aeabi_cdcmpeq>
 8000572:	bf00      	nop

08000574 <__aeabi_cdcmpeq>:
 8000574:	b501      	push	{r0, lr}
 8000576:	f7ff ffb7 	bl	80004e8 <__cmpdf2>
 800057a:	2800      	cmp	r0, #0
 800057c:	bf48      	it	mi
 800057e:	f110 0f00 	cmnmi.w	r0, #0
 8000582:	bd01      	pop	{r0, pc}

08000584 <__aeabi_dcmpeq>:
 8000584:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000588:	f7ff fff4 	bl	8000574 <__aeabi_cdcmpeq>
 800058c:	bf0c      	ite	eq
 800058e:	2001      	moveq	r0, #1
 8000590:	2000      	movne	r0, #0
 8000592:	f85d fb08 	ldr.w	pc, [sp], #8
 8000596:	bf00      	nop

08000598 <__aeabi_dcmplt>:
 8000598:	f84d ed08 	str.w	lr, [sp, #-8]!
 800059c:	f7ff ffea 	bl	8000574 <__aeabi_cdcmpeq>
 80005a0:	bf34      	ite	cc
 80005a2:	2001      	movcc	r0, #1
 80005a4:	2000      	movcs	r0, #0
 80005a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005aa:	bf00      	nop

080005ac <__aeabi_dcmple>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff ffe0 	bl	8000574 <__aeabi_cdcmpeq>
 80005b4:	bf94      	ite	ls
 80005b6:	2001      	movls	r0, #1
 80005b8:	2000      	movhi	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmpge>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffce 	bl	8000564 <__aeabi_cdrcmple>
 80005c8:	bf94      	ite	ls
 80005ca:	2001      	movls	r0, #1
 80005cc:	2000      	movhi	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmpgt>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffc4 	bl	8000564 <__aeabi_cdrcmple>
 80005dc:	bf34      	ite	cc
 80005de:	2001      	movcc	r0, #1
 80005e0:	2000      	movcs	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2uiz>:
 80005e8:	004a      	lsls	r2, r1, #1
 80005ea:	d211      	bcs.n	8000610 <__aeabi_d2uiz+0x28>
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d211      	bcs.n	8000616 <__aeabi_d2uiz+0x2e>
 80005f2:	d50d      	bpl.n	8000610 <__aeabi_d2uiz+0x28>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d40e      	bmi.n	800061c <__aeabi_d2uiz+0x34>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	fa23 f002 	lsr.w	r0, r3, r2
 800060e:	4770      	bx	lr
 8000610:	f04f 0000 	mov.w	r0, #0
 8000614:	4770      	bx	lr
 8000616:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800061a:	d102      	bne.n	8000622 <__aeabi_d2uiz+0x3a>
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	4770      	bx	lr
 8000622:	f04f 0000 	mov.w	r0, #0
 8000626:	4770      	bx	lr

08000628 <__aeabi_frsub>:
 8000628:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800062c:	e002      	b.n	8000634 <__addsf3>
 800062e:	bf00      	nop

08000630 <__aeabi_fsub>:
 8000630:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000634 <__addsf3>:
 8000634:	0042      	lsls	r2, r0, #1
 8000636:	bf1f      	itttt	ne
 8000638:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800063c:	ea92 0f03 	teqne	r2, r3
 8000640:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000644:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000648:	d06a      	beq.n	8000720 <__addsf3+0xec>
 800064a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800064e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000652:	bfc1      	itttt	gt
 8000654:	18d2      	addgt	r2, r2, r3
 8000656:	4041      	eorgt	r1, r0
 8000658:	4048      	eorgt	r0, r1
 800065a:	4041      	eorgt	r1, r0
 800065c:	bfb8      	it	lt
 800065e:	425b      	neglt	r3, r3
 8000660:	2b19      	cmp	r3, #25
 8000662:	bf88      	it	hi
 8000664:	4770      	bxhi	lr
 8000666:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800066a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800066e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000672:	bf18      	it	ne
 8000674:	4240      	negne	r0, r0
 8000676:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800067a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800067e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000682:	bf18      	it	ne
 8000684:	4249      	negne	r1, r1
 8000686:	ea92 0f03 	teq	r2, r3
 800068a:	d03f      	beq.n	800070c <__addsf3+0xd8>
 800068c:	f1a2 0201 	sub.w	r2, r2, #1
 8000690:	fa41 fc03 	asr.w	ip, r1, r3
 8000694:	eb10 000c 	adds.w	r0, r0, ip
 8000698:	f1c3 0320 	rsb	r3, r3, #32
 800069c:	fa01 f103 	lsl.w	r1, r1, r3
 80006a0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006a4:	d502      	bpl.n	80006ac <__addsf3+0x78>
 80006a6:	4249      	negs	r1, r1
 80006a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006ac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006b0:	d313      	bcc.n	80006da <__addsf3+0xa6>
 80006b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006b6:	d306      	bcc.n	80006c6 <__addsf3+0x92>
 80006b8:	0840      	lsrs	r0, r0, #1
 80006ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80006be:	f102 0201 	add.w	r2, r2, #1
 80006c2:	2afe      	cmp	r2, #254	; 0xfe
 80006c4:	d251      	bcs.n	800076a <__addsf3+0x136>
 80006c6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80006ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006ce:	bf08      	it	eq
 80006d0:	f020 0001 	biceq.w	r0, r0, #1
 80006d4:	ea40 0003 	orr.w	r0, r0, r3
 80006d8:	4770      	bx	lr
 80006da:	0049      	lsls	r1, r1, #1
 80006dc:	eb40 0000 	adc.w	r0, r0, r0
 80006e0:	3a01      	subs	r2, #1
 80006e2:	bf28      	it	cs
 80006e4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80006e8:	d2ed      	bcs.n	80006c6 <__addsf3+0x92>
 80006ea:	fab0 fc80 	clz	ip, r0
 80006ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80006f2:	ebb2 020c 	subs.w	r2, r2, ip
 80006f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006fa:	bfaa      	itet	ge
 80006fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000700:	4252      	neglt	r2, r2
 8000702:	4318      	orrge	r0, r3
 8000704:	bfbc      	itt	lt
 8000706:	40d0      	lsrlt	r0, r2
 8000708:	4318      	orrlt	r0, r3
 800070a:	4770      	bx	lr
 800070c:	f092 0f00 	teq	r2, #0
 8000710:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000714:	bf06      	itte	eq
 8000716:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800071a:	3201      	addeq	r2, #1
 800071c:	3b01      	subne	r3, #1
 800071e:	e7b5      	b.n	800068c <__addsf3+0x58>
 8000720:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000724:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000728:	bf18      	it	ne
 800072a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800072e:	d021      	beq.n	8000774 <__addsf3+0x140>
 8000730:	ea92 0f03 	teq	r2, r3
 8000734:	d004      	beq.n	8000740 <__addsf3+0x10c>
 8000736:	f092 0f00 	teq	r2, #0
 800073a:	bf08      	it	eq
 800073c:	4608      	moveq	r0, r1
 800073e:	4770      	bx	lr
 8000740:	ea90 0f01 	teq	r0, r1
 8000744:	bf1c      	itt	ne
 8000746:	2000      	movne	r0, #0
 8000748:	4770      	bxne	lr
 800074a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800074e:	d104      	bne.n	800075a <__addsf3+0x126>
 8000750:	0040      	lsls	r0, r0, #1
 8000752:	bf28      	it	cs
 8000754:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000758:	4770      	bx	lr
 800075a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800075e:	bf3c      	itt	cc
 8000760:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000764:	4770      	bxcc	lr
 8000766:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800076a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800076e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000772:	4770      	bx	lr
 8000774:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000778:	bf16      	itet	ne
 800077a:	4608      	movne	r0, r1
 800077c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000780:	4601      	movne	r1, r0
 8000782:	0242      	lsls	r2, r0, #9
 8000784:	bf06      	itte	eq
 8000786:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800078a:	ea90 0f01 	teqeq	r0, r1
 800078e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000792:	4770      	bx	lr

08000794 <__aeabi_ui2f>:
 8000794:	f04f 0300 	mov.w	r3, #0
 8000798:	e004      	b.n	80007a4 <__aeabi_i2f+0x8>
 800079a:	bf00      	nop

0800079c <__aeabi_i2f>:
 800079c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	ea5f 0c00 	movs.w	ip, r0
 80007a8:	bf08      	it	eq
 80007aa:	4770      	bxeq	lr
 80007ac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007b0:	4601      	mov	r1, r0
 80007b2:	f04f 0000 	mov.w	r0, #0
 80007b6:	e01c      	b.n	80007f2 <__aeabi_l2f+0x2a>

080007b8 <__aeabi_ul2f>:
 80007b8:	ea50 0201 	orrs.w	r2, r0, r1
 80007bc:	bf08      	it	eq
 80007be:	4770      	bxeq	lr
 80007c0:	f04f 0300 	mov.w	r3, #0
 80007c4:	e00a      	b.n	80007dc <__aeabi_l2f+0x14>
 80007c6:	bf00      	nop

080007c8 <__aeabi_l2f>:
 80007c8:	ea50 0201 	orrs.w	r2, r0, r1
 80007cc:	bf08      	it	eq
 80007ce:	4770      	bxeq	lr
 80007d0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80007d4:	d502      	bpl.n	80007dc <__aeabi_l2f+0x14>
 80007d6:	4240      	negs	r0, r0
 80007d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007dc:	ea5f 0c01 	movs.w	ip, r1
 80007e0:	bf02      	ittt	eq
 80007e2:	4684      	moveq	ip, r0
 80007e4:	4601      	moveq	r1, r0
 80007e6:	2000      	moveq	r0, #0
 80007e8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80007ec:	bf08      	it	eq
 80007ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007f2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007f6:	fabc f28c 	clz	r2, ip
 80007fa:	3a08      	subs	r2, #8
 80007fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000800:	db10      	blt.n	8000824 <__aeabi_l2f+0x5c>
 8000802:	fa01 fc02 	lsl.w	ip, r1, r2
 8000806:	4463      	add	r3, ip
 8000808:	fa00 fc02 	lsl.w	ip, r0, r2
 800080c:	f1c2 0220 	rsb	r2, r2, #32
 8000810:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000814:	fa20 f202 	lsr.w	r2, r0, r2
 8000818:	eb43 0002 	adc.w	r0, r3, r2
 800081c:	bf08      	it	eq
 800081e:	f020 0001 	biceq.w	r0, r0, #1
 8000822:	4770      	bx	lr
 8000824:	f102 0220 	add.w	r2, r2, #32
 8000828:	fa01 fc02 	lsl.w	ip, r1, r2
 800082c:	f1c2 0220 	rsb	r2, r2, #32
 8000830:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000834:	fa21 f202 	lsr.w	r2, r1, r2
 8000838:	eb43 0002 	adc.w	r0, r3, r2
 800083c:	bf08      	it	eq
 800083e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000842:	4770      	bx	lr

08000844 <__aeabi_fmul>:
 8000844:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000848:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800084c:	bf1e      	ittt	ne
 800084e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000852:	ea92 0f0c 	teqne	r2, ip
 8000856:	ea93 0f0c 	teqne	r3, ip
 800085a:	d06f      	beq.n	800093c <__aeabi_fmul+0xf8>
 800085c:	441a      	add	r2, r3
 800085e:	ea80 0c01 	eor.w	ip, r0, r1
 8000862:	0240      	lsls	r0, r0, #9
 8000864:	bf18      	it	ne
 8000866:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800086a:	d01e      	beq.n	80008aa <__aeabi_fmul+0x66>
 800086c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000870:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000874:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000878:	fba0 3101 	umull	r3, r1, r0, r1
 800087c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000880:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000884:	bf3e      	ittt	cc
 8000886:	0049      	lslcc	r1, r1, #1
 8000888:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800088c:	005b      	lslcc	r3, r3, #1
 800088e:	ea40 0001 	orr.w	r0, r0, r1
 8000892:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000896:	2afd      	cmp	r2, #253	; 0xfd
 8000898:	d81d      	bhi.n	80008d6 <__aeabi_fmul+0x92>
 800089a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800089e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008a2:	bf08      	it	eq
 80008a4:	f020 0001 	biceq.w	r0, r0, #1
 80008a8:	4770      	bx	lr
 80008aa:	f090 0f00 	teq	r0, #0
 80008ae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008b2:	bf08      	it	eq
 80008b4:	0249      	lsleq	r1, r1, #9
 80008b6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008ba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008be:	3a7f      	subs	r2, #127	; 0x7f
 80008c0:	bfc2      	ittt	gt
 80008c2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008c6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008ca:	4770      	bxgt	lr
 80008cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008d0:	f04f 0300 	mov.w	r3, #0
 80008d4:	3a01      	subs	r2, #1
 80008d6:	dc5d      	bgt.n	8000994 <__aeabi_fmul+0x150>
 80008d8:	f112 0f19 	cmn.w	r2, #25
 80008dc:	bfdc      	itt	le
 80008de:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80008e2:	4770      	bxle	lr
 80008e4:	f1c2 0200 	rsb	r2, r2, #0
 80008e8:	0041      	lsls	r1, r0, #1
 80008ea:	fa21 f102 	lsr.w	r1, r1, r2
 80008ee:	f1c2 0220 	rsb	r2, r2, #32
 80008f2:	fa00 fc02 	lsl.w	ip, r0, r2
 80008f6:	ea5f 0031 	movs.w	r0, r1, rrx
 80008fa:	f140 0000 	adc.w	r0, r0, #0
 80008fe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000902:	bf08      	it	eq
 8000904:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000908:	4770      	bx	lr
 800090a:	f092 0f00 	teq	r2, #0
 800090e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000912:	bf02      	ittt	eq
 8000914:	0040      	lsleq	r0, r0, #1
 8000916:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800091a:	3a01      	subeq	r2, #1
 800091c:	d0f9      	beq.n	8000912 <__aeabi_fmul+0xce>
 800091e:	ea40 000c 	orr.w	r0, r0, ip
 8000922:	f093 0f00 	teq	r3, #0
 8000926:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800092a:	bf02      	ittt	eq
 800092c:	0049      	lsleq	r1, r1, #1
 800092e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000932:	3b01      	subeq	r3, #1
 8000934:	d0f9      	beq.n	800092a <__aeabi_fmul+0xe6>
 8000936:	ea41 010c 	orr.w	r1, r1, ip
 800093a:	e78f      	b.n	800085c <__aeabi_fmul+0x18>
 800093c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000940:	ea92 0f0c 	teq	r2, ip
 8000944:	bf18      	it	ne
 8000946:	ea93 0f0c 	teqne	r3, ip
 800094a:	d00a      	beq.n	8000962 <__aeabi_fmul+0x11e>
 800094c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000950:	bf18      	it	ne
 8000952:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000956:	d1d8      	bne.n	800090a <__aeabi_fmul+0xc6>
 8000958:	ea80 0001 	eor.w	r0, r0, r1
 800095c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000960:	4770      	bx	lr
 8000962:	f090 0f00 	teq	r0, #0
 8000966:	bf17      	itett	ne
 8000968:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800096c:	4608      	moveq	r0, r1
 800096e:	f091 0f00 	teqne	r1, #0
 8000972:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000976:	d014      	beq.n	80009a2 <__aeabi_fmul+0x15e>
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	d101      	bne.n	8000982 <__aeabi_fmul+0x13e>
 800097e:	0242      	lsls	r2, r0, #9
 8000980:	d10f      	bne.n	80009a2 <__aeabi_fmul+0x15e>
 8000982:	ea93 0f0c 	teq	r3, ip
 8000986:	d103      	bne.n	8000990 <__aeabi_fmul+0x14c>
 8000988:	024b      	lsls	r3, r1, #9
 800098a:	bf18      	it	ne
 800098c:	4608      	movne	r0, r1
 800098e:	d108      	bne.n	80009a2 <__aeabi_fmul+0x15e>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800099c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a0:	4770      	bx	lr
 80009a2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009aa:	4770      	bx	lr

080009ac <__aeabi_fdiv>:
 80009ac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009b0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009b4:	bf1e      	ittt	ne
 80009b6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009ba:	ea92 0f0c 	teqne	r2, ip
 80009be:	ea93 0f0c 	teqne	r3, ip
 80009c2:	d069      	beq.n	8000a98 <__aeabi_fdiv+0xec>
 80009c4:	eba2 0203 	sub.w	r2, r2, r3
 80009c8:	ea80 0c01 	eor.w	ip, r0, r1
 80009cc:	0249      	lsls	r1, r1, #9
 80009ce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80009d2:	d037      	beq.n	8000a44 <__aeabi_fdiv+0x98>
 80009d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009d8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80009dc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80009e0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009e4:	428b      	cmp	r3, r1
 80009e6:	bf38      	it	cc
 80009e8:	005b      	lslcc	r3, r3, #1
 80009ea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80009ee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80009f2:	428b      	cmp	r3, r1
 80009f4:	bf24      	itt	cs
 80009f6:	1a5b      	subcs	r3, r3, r1
 80009f8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009fc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a00:	bf24      	itt	cs
 8000a02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a0e:	bf24      	itt	cs
 8000a10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a1c:	bf24      	itt	cs
 8000a1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a26:	011b      	lsls	r3, r3, #4
 8000a28:	bf18      	it	ne
 8000a2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a2e:	d1e0      	bne.n	80009f2 <__aeabi_fdiv+0x46>
 8000a30:	2afd      	cmp	r2, #253	; 0xfd
 8000a32:	f63f af50 	bhi.w	80008d6 <__aeabi_fmul+0x92>
 8000a36:	428b      	cmp	r3, r1
 8000a38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a3c:	bf08      	it	eq
 8000a3e:	f020 0001 	biceq.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4c:	327f      	adds	r2, #127	; 0x7f
 8000a4e:	bfc2      	ittt	gt
 8000a50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a58:	4770      	bxgt	lr
 8000a5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5e:	f04f 0300 	mov.w	r3, #0
 8000a62:	3a01      	subs	r2, #1
 8000a64:	e737      	b.n	80008d6 <__aeabi_fmul+0x92>
 8000a66:	f092 0f00 	teq	r2, #0
 8000a6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a6e:	bf02      	ittt	eq
 8000a70:	0040      	lsleq	r0, r0, #1
 8000a72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a76:	3a01      	subeq	r2, #1
 8000a78:	d0f9      	beq.n	8000a6e <__aeabi_fdiv+0xc2>
 8000a7a:	ea40 000c 	orr.w	r0, r0, ip
 8000a7e:	f093 0f00 	teq	r3, #0
 8000a82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a86:	bf02      	ittt	eq
 8000a88:	0049      	lsleq	r1, r1, #1
 8000a8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a8e:	3b01      	subeq	r3, #1
 8000a90:	d0f9      	beq.n	8000a86 <__aeabi_fdiv+0xda>
 8000a92:	ea41 010c 	orr.w	r1, r1, ip
 8000a96:	e795      	b.n	80009c4 <__aeabi_fdiv+0x18>
 8000a98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a9c:	ea92 0f0c 	teq	r2, ip
 8000aa0:	d108      	bne.n	8000ab4 <__aeabi_fdiv+0x108>
 8000aa2:	0242      	lsls	r2, r0, #9
 8000aa4:	f47f af7d 	bne.w	80009a2 <__aeabi_fmul+0x15e>
 8000aa8:	ea93 0f0c 	teq	r3, ip
 8000aac:	f47f af70 	bne.w	8000990 <__aeabi_fmul+0x14c>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	e776      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ab4:	ea93 0f0c 	teq	r3, ip
 8000ab8:	d104      	bne.n	8000ac4 <__aeabi_fdiv+0x118>
 8000aba:	024b      	lsls	r3, r1, #9
 8000abc:	f43f af4c 	beq.w	8000958 <__aeabi_fmul+0x114>
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	e76e      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ac4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ac8:	bf18      	it	ne
 8000aca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ace:	d1ca      	bne.n	8000a66 <__aeabi_fdiv+0xba>
 8000ad0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ad4:	f47f af5c 	bne.w	8000990 <__aeabi_fmul+0x14c>
 8000ad8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000adc:	f47f af3c 	bne.w	8000958 <__aeabi_fmul+0x114>
 8000ae0:	e75f      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ae2:	bf00      	nop

08000ae4 <ToggleLDAC>:
// Подключение заголовочного файла
#include <DAC_AD5322.h>

//--------------------------------------------------------------------------
// Необходим для загрузки значений в ЦАП
void ToggleLDAC() {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2102      	movs	r1, #2
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <ToggleLDAC+0x1c>)
 8000aee:	f003 fa60 	bl	8003fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	2102      	movs	r1, #2
 8000af6:	4802      	ldr	r0, [pc, #8]	; (8000b00 <ToggleLDAC+0x1c>)
 8000af8:	f003 fa5b 	bl	8003fb2 <HAL_GPIO_WritePin>
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40010800 	.word	0x40010800

08000b04 <SendSPI>:
//--------------------------------------------------------------------------
void SendSPI(SPI_HandleTypeDef *pSPI,uint16_t out){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	807b      	strh	r3, [r7, #2]

  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2110      	movs	r1, #16
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <SendSPI+0x34>)
 8000b16:	f003 fa4c 	bl	8003fb2 <HAL_GPIO_WritePin>

  	// Передача значений в цап
  	//out	= 0b0100000111111111;
  	HAL_SPI_Transmit(pSPI, (uint8_t*)(&out), 1, 1);
 8000b1a:	1cb9      	adds	r1, r7, #2
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	2201      	movs	r2, #1
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f005 fbf3 	bl	800630c <HAL_SPI_Transmit>

  	// запепрет передачи CS
  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2110      	movs	r1, #16
 8000b2a:	4803      	ldr	r0, [pc, #12]	; (8000b38 <SendSPI+0x34>)
 8000b2c:	f003 fa41 	bl	8003fb2 <HAL_GPIO_WritePin>

}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40010800 	.word	0x40010800

08000b3c <DAC_AD5322_Ch1>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала А
void DAC_AD5322_Ch1(SPI_HandleTypeDef *pSPI, uint16_t data_ch1) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	807b      	strh	r3, [r7, #2]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000b48:	887b      	ldrh	r3, [r7, #2]
 8000b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b4e:	d302      	bcc.n	8000b56 <DAC_AD5322_Ch1+0x1a>
 8000b50:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000b54:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000b56:	2300      	movs	r3, #0
 8000b58:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000b5e:	2300      	movs	r3, #0
 8000b60:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000b62:	2300      	movs	r3, #0
 8000b64:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000b66:	8afb      	ldrh	r3, [r7, #22]
 8000b68:	03db      	lsls	r3, r3, #15
 8000b6a:	b21a      	sxth	r2, r3
 8000b6c:	8abb      	ldrh	r3, [r7, #20]
 8000b6e:	039b      	lsls	r3, r3, #14
 8000b70:	b21b      	sxth	r3, r3
 8000b72:	4313      	orrs	r3, r2
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	8a7b      	ldrh	r3, [r7, #18]
 8000b78:	035b      	lsls	r3, r3, #13
 8000b7a:	b21b      	sxth	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b21a      	sxth	r2, r3
 8000b80:	8a3b      	ldrh	r3, [r7, #16]
 8000b82:	031b      	lsls	r3, r3, #12
 8000b84:	b21b      	sxth	r3, r3
 8000b86:	4313      	orrs	r3, r2
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000b8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b90:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000b94:	f023 030f 	bic.w	r3, r3, #15
 8000b98:	b21a      	sxth	r2, r3
 8000b9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ba2:	b21b      	sxth	r3, r3
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	b21b      	sxth	r3, r3
 8000ba8:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000baa:	89bb      	ldrh	r3, [r7, #12]
 8000bac:	4619      	mov	r1, r3
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ffa8 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000bb4:	89bb      	ldrh	r3, [r7, #12]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ffa3 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000bbe:	f7ff ff91 	bl	8000ae4 <ToggleLDAC>
}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <DAC_AD5322_Ch2>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала В
void DAC_AD5322_Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch2) {
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	807b      	strh	r3, [r7, #2]

	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 8000bd6:	887b      	ldrh	r3, [r7, #2]
 8000bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bdc:	d302      	bcc.n	8000be4 <DAC_AD5322_Ch2+0x1a>
 8000bde:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000be2:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000be4:	2301      	movs	r3, #1
 8000be6:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000be8:	2301      	movs	r3, #1
 8000bea:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000bec:	2300      	movs	r3, #0
 8000bee:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000bf4:	8afb      	ldrh	r3, [r7, #22]
 8000bf6:	03db      	lsls	r3, r3, #15
 8000bf8:	b21a      	sxth	r2, r3
 8000bfa:	8abb      	ldrh	r3, [r7, #20]
 8000bfc:	039b      	lsls	r3, r3, #14
 8000bfe:	b21b      	sxth	r3, r3
 8000c00:	4313      	orrs	r3, r2
 8000c02:	b21a      	sxth	r2, r3
 8000c04:	8a7b      	ldrh	r3, [r7, #18]
 8000c06:	035b      	lsls	r3, r3, #13
 8000c08:	b21b      	sxth	r3, r3
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	b21a      	sxth	r2, r3
 8000c0e:	8a3b      	ldrh	r3, [r7, #16]
 8000c10:	031b      	lsls	r3, r3, #12
 8000c12:	b21b      	sxth	r3, r3
 8000c14:	4313      	orrs	r3, r2
 8000c16:	b21b      	sxth	r3, r3
 8000c18:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000c1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c1e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000c22:	f023 030f 	bic.w	r3, r3, #15
 8000c26:	b21a      	sxth	r2, r3
 8000c28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000c38:	89bb      	ldrh	r3, [r7, #12]
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ff61 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000c42:	89bb      	ldrh	r3, [r7, #12]
 8000c44:	4619      	mov	r1, r3
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ff5c 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000c4c:	f7ff ff4a 	bl	8000ae4 <ToggleLDAC>
}
 8000c50:	bf00      	nop
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <DAC_AD5322_Ch1Ch2>:
//--------------------------------------------------------------------------
void DAC_AD5322_Ch1Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch1, uint16_t data_ch2) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	807b      	strh	r3, [r7, #2]
 8000c64:	4613      	mov	r3, r2
 8000c66:	803b      	strh	r3, [r7, #0]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000c68:	887b      	ldrh	r3, [r7, #2]
 8000c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c6e:	d302      	bcc.n	8000c76 <DAC_AD5322_Ch1Ch2+0x1e>
 8000c70:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000c74:	807b      	strh	r3, [r7, #2]
	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 8000c76:	883b      	ldrh	r3, [r7, #0]
 8000c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c7c:	d302      	bcc.n	8000c84 <DAC_AD5322_Ch1Ch2+0x2c>
 8000c7e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000c82:	803b      	strh	r3, [r7, #0]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000c84:	2300      	movs	r3, #0
 8000c86:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000c88:	2301      	movs	r3, #1
 8000c8a:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000c90:	2300      	movs	r3, #0
 8000c92:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000c94:	8afb      	ldrh	r3, [r7, #22]
 8000c96:	03db      	lsls	r3, r3, #15
 8000c98:	b21a      	sxth	r2, r3
 8000c9a:	8abb      	ldrh	r3, [r7, #20]
 8000c9c:	039b      	lsls	r3, r3, #14
 8000c9e:	b21b      	sxth	r3, r3
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	b21a      	sxth	r2, r3
 8000ca4:	8a7b      	ldrh	r3, [r7, #18]
 8000ca6:	035b      	lsls	r3, r3, #13
 8000ca8:	b21b      	sxth	r3, r3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b21a      	sxth	r2, r3
 8000cae:	8a3b      	ldrh	r3, [r7, #16]
 8000cb0:	031b      	lsls	r3, r3, #12
 8000cb2:	b21b      	sxth	r3, r3
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	b21b      	sxth	r3, r3
 8000cb8:	81fb      	strh	r3, [r7, #14]
	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000cba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cbe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000cc2:	f023 030f 	bic.w	r3, r3, #15
 8000cc6:	b21a      	sxth	r2, r3
 8000cc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	81bb      	strh	r3, [r7, #12]

  	SendSPI(pSPI,out);
 8000cd8:	89bb      	ldrh	r3, [r7, #12]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ff11 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000ce2:	89bb      	ldrh	r3, [r7, #12]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff ff0c 	bl	8000b04 <SendSPI>
  	//--------------------------------------------------------------------------
  	chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000cec:	2301      	movs	r3, #1
 8000cee:	82fb      	strh	r3, [r7, #22]
  	bufferVref 	= 1;	// bit 14: усилитель VREF?
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	82bb      	strh	r3, [r7, #20]
  	PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	827b      	strh	r3, [r7, #18]
  	PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	823b      	strh	r3, [r7, #16]

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000cfc:	8afb      	ldrh	r3, [r7, #22]
 8000cfe:	03db      	lsls	r3, r3, #15
 8000d00:	b21a      	sxth	r2, r3
 8000d02:	8abb      	ldrh	r3, [r7, #20]
 8000d04:	039b      	lsls	r3, r3, #14
 8000d06:	b21b      	sxth	r3, r3
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	b21a      	sxth	r2, r3
 8000d0c:	8a7b      	ldrh	r3, [r7, #18]
 8000d0e:	035b      	lsls	r3, r3, #13
 8000d10:	b21b      	sxth	r3, r3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	b21a      	sxth	r2, r3
 8000d16:	8a3b      	ldrh	r3, [r7, #16]
 8000d18:	031b      	lsls	r3, r3, #12
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	b21b      	sxth	r3, r3
 8000d20:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000d22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d26:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000d2a:	f023 030f 	bic.w	r3, r3, #15
 8000d2e:	b21a      	sxth	r2, r3
 8000d30:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d38:	b21b      	sxth	r3, r3
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	b21b      	sxth	r3, r3
 8000d3e:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000d40:	89bb      	ldrh	r3, [r7, #12]
 8000d42:	4619      	mov	r1, r3
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff fedd 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000d4a:	89bb      	ldrh	r3, [r7, #12]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff fed8 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000d54:	f7ff fec6 	bl	8000ae4 <ToggleLDAC>
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <volt2dgt>:
// floor()
// Пример: 
// Следующий фрагмент кода выводит на экран «10»:
// printf("%f", floor(10.9));

uint16_t volt2dgt(Table_t *calibTable, int16_t volt){
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	807b      	strh	r3, [r7, #2]

// TODO: Нужно ли учитывать Ктр? volt = volt*Ktr 
float count = (abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/STEP_CALIBRATE;
 8000d6c:	4b3f      	ldr	r3, [pc, #252]	; (8000e6c <volt2dgt+0x10c>)
 8000d6e:	60fb      	str	r3, [r7, #12]
uint16_t y = (floor((count*abs(MIN_VOLT_MODE_12))/(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/abs(MIN_VOLT_MODE_12)*volt+(count*abs(MIN_VOLT_MODE_12))/(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12)))); // искомый индекс в массиве!!! найти минимальное значение от него 26.5-->26 через floor
 8000d70:	493f      	ldr	r1, [pc, #252]	; (8000e70 <volt2dgt+0x110>)
 8000d72:	68f8      	ldr	r0, [r7, #12]
 8000d74:	f7ff fd66 	bl	8000844 <__aeabi_fmul>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	493e      	ldr	r1, [pc, #248]	; (8000e74 <volt2dgt+0x114>)
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fe15 	bl	80009ac <__aeabi_fdiv>
 8000d82:	4603      	mov	r3, r0
 8000d84:	493a      	ldr	r1, [pc, #232]	; (8000e70 <volt2dgt+0x110>)
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fe10 	bl	80009ac <__aeabi_fdiv>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461c      	mov	r4, r3
 8000d90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fd01 	bl	800079c <__aeabi_i2f>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4620      	mov	r0, r4
 8000da0:	f7ff fd50 	bl	8000844 <__aeabi_fmul>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461c      	mov	r4, r3
 8000da8:	4931      	ldr	r1, [pc, #196]	; (8000e70 <volt2dgt+0x110>)
 8000daa:	68f8      	ldr	r0, [r7, #12]
 8000dac:	f7ff fd4a 	bl	8000844 <__aeabi_fmul>
 8000db0:	4603      	mov	r3, r0
 8000db2:	4930      	ldr	r1, [pc, #192]	; (8000e74 <volt2dgt+0x114>)
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fdf9 	bl	80009ac <__aeabi_fdiv>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	f7ff fc38 	bl	8000634 <__addsf3>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fb2e 	bl	8000428 <__aeabi_f2d>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f00b fc60 	bl	800c698 <floor>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4610      	mov	r0, r2
 8000dde:	4619      	mov	r1, r3
 8000de0:	f7ff fc02 	bl	80005e8 <__aeabi_d2uiz>
 8000de4:	4603      	mov	r3, r0
 8000de6:	817b      	strh	r3, [r7, #10]
uint16_t CodeX = (((calibTable->dacValA_m12[y+1+1]-calibTable->dacValA_m12[y])/(((y+1+1) * STEP_CALIBRATE) -abs( MIN_VOLT_MODE_12)-((y+1) * STEP_CALIBRATE) - abs( MIN_VOLT_MODE_12))))*(volt-((y+1) * STEP_CALIBRATE) - abs( MIN_VOLT_MODE_12))+calibTable->dacValA_m12[y+1];
 8000de8:	897b      	ldrh	r3, [r7, #10]
 8000dea:	3302      	adds	r3, #2
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	3304      	adds	r3, #4
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	4413      	add	r3, r2
 8000df4:	889b      	ldrh	r3, [r3, #4]
 8000df6:	4619      	mov	r1, r3
 8000df8:	897b      	ldrh	r3, [r7, #10]
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	4413      	add	r3, r2
 8000e02:	889b      	ldrh	r3, [r3, #4]
 8000e04:	1aca      	subs	r2, r1, r3
 8000e06:	897b      	ldrh	r3, [r7, #10]
 8000e08:	3302      	adds	r3, #2
 8000e0a:	21c8      	movs	r1, #200	; 0xc8
 8000e0c:	fb01 f303 	mul.w	r3, r1, r3
 8000e10:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000e14:	3b08      	subs	r3, #8
 8000e16:	8979      	ldrh	r1, [r7, #10]
 8000e18:	3101      	adds	r1, #1
 8000e1a:	f06f 00c7 	mvn.w	r0, #199	; 0xc7
 8000e1e:	fb00 f101 	mul.w	r1, r0, r1
 8000e22:	440b      	add	r3, r1
 8000e24:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000e28:	3b08      	subs	r3, #8
 8000e2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000e34:	897b      	ldrh	r3, [r7, #10]
 8000e36:	3301      	adds	r3, #1
 8000e38:	f06f 00c7 	mvn.w	r0, #199	; 0xc7
 8000e3c:	fb00 f303 	mul.w	r3, r0, r3
 8000e40:	440b      	add	r3, r1
 8000e42:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000e46:	3b08      	subs	r3, #8
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	fb03 f302 	mul.w	r3, r3, r2
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	897b      	ldrh	r3, [r7, #10]
 8000e52:	3301      	adds	r3, #1
 8000e54:	6879      	ldr	r1, [r7, #4]
 8000e56:	3304      	adds	r3, #4
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	440b      	add	r3, r1
 8000e5c:	889b      	ldrh	r3, [r3, #4]
 8000e5e:	4413      	add	r3, r2
 8000e60:	813b      	strh	r3, [r7, #8]
	return CodeX;
 8000e62:	893b      	ldrh	r3, [r7, #8]





}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd90      	pop	{r4, r7, pc}
 8000e6c:	42aa0000 	.word	0x42aa0000
 8000e70:	459c4000 	.word	0x459c4000
 8000e74:	4684d000 	.word	0x4684d000

08000e78 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e80:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e84:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d013      	beq.n	8000eb8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e90:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e94:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000e98:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d00b      	beq.n	8000eb8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ea0:	e000      	b.n	8000ea4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ea2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ea4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0f9      	beq.n	8000ea2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000eae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000eb8:	687b      	ldr	r3, [r7, #4]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <DWT_Init>:
#define SCB_DEMCR   *(volatile unsigned long *)0xE000EDFC

/******************************************************************************/
/* inline func */
__STATIC_INLINE void DWT_Init(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <DWT_Init+0x24>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <DWT_Init+0x24>)
 8000ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ed2:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <DWT_Init+0x28>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a04      	ldr	r2, [pc, #16]	; (8000eec <DWT_Init+0x28>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr
 8000ee8:	e000edf0 	.word	0xe000edf0
 8000eec:	e0001000 	.word	0xe0001000

08000ef0 <_write>:
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */
//**************************************************************************
#if DEBUG_SWO
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	e009      	b.n	8000f16 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	1c5a      	adds	r2, r3, #1
 8000f06:	60ba      	str	r2, [r7, #8]
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ffb4 	bl	8000e78 <ITM_SendChar>
	for (int i = 0; i < len; i++)
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	3301      	adds	r3, #1
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	dbf1      	blt.n	8000f02 <_write+0x12>
	}
	return len;
 8000f1e:	687b      	ldr	r3, [r7, #4]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <getCRC_table_a_m12>:
//}
//--------------------------------------------------------------------------
union NVRAM DevNVRAM;
//--------------------------------------------------------------------------
uint32_t getCRC_table_a_m12()
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
	//	uint16_t len_ = sizeof(aqrr)/(sizeof(uint32_t)*2);
	uint32_t crc = HAL_CRC_Calculate(&hcrc, &DevNVRAM.calibration_table.dacValA_m12, sizeof(DevNVRAM.calibration_table.dacValA_m12) / (sizeof(uint32_t) * 2));
 8000f2e:	2216      	movs	r2, #22
 8000f30:	4906      	ldr	r1, [pc, #24]	; (8000f4c <getCRC_table_a_m12+0x24>)
 8000f32:	4807      	ldr	r0, [pc, #28]	; (8000f50 <getCRC_table_a_m12+0x28>)
 8000f34:	f002 fc6f 	bl	8003816 <HAL_CRC_Calculate>
 8000f38:	6078      	str	r0, [r7, #4]
	HAL_Delay(1);
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f001 fe8e 	bl	8002c5c <HAL_Delay>
	return crc;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200004c0 	.word	0x200004c0
 8000f50:	200008fc 	.word	0x200008fc

08000f54 <SetDacA>:
}
//--------------------------------------------------------------------------

//**************************************************************************
void SetDacA(int16_t da)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	80fb      	strh	r3, [r7, #6]
	VDAC_A = volt2dgt(&(DevNVRAM.calibration_table), da);
 8000f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f62:	4619      	mov	r1, r3
 8000f64:	4808      	ldr	r0, [pc, #32]	; (8000f88 <SetDacA+0x34>)
 8000f66:	f7ff fefb 	bl	8000d60 <volt2dgt>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <SetDacA+0x38>)
 8000f70:	801a      	strh	r2, [r3, #0]
	DAC_AD5322_Ch1(&hspi1, VDAC_A);
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <SetDacA+0x38>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	4619      	mov	r1, r3
 8000f78:	4805      	ldr	r0, [pc, #20]	; (8000f90 <SetDacA+0x3c>)
 8000f7a:	f7ff fddf 	bl	8000b3c <DAC_AD5322_Ch1>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200004b4 	.word	0x200004b4
 8000f8c:	2000024c 	.word	0x2000024c
 8000f90:	2000097c 	.word	0x2000097c

08000f94 <SetDacB>:
void SetDacB(int16_t db)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	80fb      	strh	r3, [r7, #6]
	VDAC_B = volt2dgt(&(DevNVRAM.calibration_table), db);
 8000f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4808      	ldr	r0, [pc, #32]	; (8000fc8 <SetDacB+0x34>)
 8000fa6:	f7ff fedb 	bl	8000d60 <volt2dgt>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <SetDacB+0x38>)
 8000fb0:	801a      	strh	r2, [r3, #0]
	DAC_AD5322_Ch2(&hspi1, VDAC_B);
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <SetDacB+0x38>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <SetDacB+0x3c>)
 8000fba:	f7ff fe06 	bl	8000bca <DAC_AD5322_Ch2>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200004b4 	.word	0x200004b4
 8000fcc:	2000024e 	.word	0x2000024e
 8000fd0:	2000097c 	.word	0x2000097c

08000fd4 <SetAllDAC>:
void SetAllDAC()
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	DAC_AD5322_Ch1Ch2(&hspi1, VDAC_A, VDAC_B);
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <SetAllDAC+0x18>)
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <SetAllDAC+0x1c>)
 8000fde:	8812      	ldrh	r2, [r2, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <SetAllDAC+0x20>)
 8000fe4:	f7ff fe38 	bl	8000c58 <DAC_AD5322_Ch1Ch2>
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	2000024c 	.word	0x2000024c
 8000ff0:	2000024e 	.word	0x2000024e
 8000ff4:	2000097c 	.word	0x2000097c

08000ff8 <GetDacA>:
uint16_t GetDacA()
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
	return VDAC_A;
 8000ffc:	4b02      	ldr	r3, [pc, #8]	; (8001008 <GetDacA+0x10>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	2000024c 	.word	0x2000024c

0800100c <GetDacB>:
uint16_t GetDacB()
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
	return VDAC_B;
 8001010:	4b02      	ldr	r3, [pc, #8]	; (800101c <GetDacB+0x10>)
 8001012:	881b      	ldrh	r3, [r3, #0]
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	2000024e 	.word	0x2000024e

08001020 <GetBtnRunState>:

uint8_t btn3_long_rd = 0;
uint8_t btn3_short_rd = 0;
//--------------------------------------------------------------------------
uint8_t GetBtnRunState()
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x00)
 8001024:	4b1d      	ldr	r3, [pc, #116]	; (800109c <GetBtnRunState+0x7c>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d10b      	bne.n	8001044 <GetBtnRunState+0x24>
 800102c:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <GetBtnRunState+0x80>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d107      	bne.n	8001044 <GetBtnRunState+0x24>
	{
		btn1_long_rd = 0;
 8001034:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <GetBtnRunState+0x80>)
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <GetBtnRunState+0x7c>)
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8001040:	2300      	movs	r3, #0
 8001042:	e026      	b.n	8001092 <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x01 && btn1_long_rd == 0x00)
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <GetBtnRunState+0x7c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d10b      	bne.n	8001064 <GetBtnRunState+0x44>
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <GetBtnRunState+0x80>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d107      	bne.n	8001064 <GetBtnRunState+0x44>
	{
		btn1_long_rd = 0;
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <GetBtnRunState+0x80>)
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <GetBtnRunState+0x7c>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
		return 0x01;
 8001060:	2301      	movs	r3, #1
 8001062:	e016      	b.n	8001092 <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x01)
 8001064:	4b0d      	ldr	r3, [pc, #52]	; (800109c <GetBtnRunState+0x7c>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d10b      	bne.n	8001084 <GetBtnRunState+0x64>
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <GetBtnRunState+0x80>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d107      	bne.n	8001084 <GetBtnRunState+0x64>
	{
		btn1_long_rd = 0;
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <GetBtnRunState+0x80>)
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <GetBtnRunState+0x7c>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
		return 0x02;
 8001080:	2302      	movs	r3, #2
 8001082:	e006      	b.n	8001092 <GetBtnRunState+0x72>
	}

	btn1_long_rd = 0;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <GetBtnRunState+0x80>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
	btn1_short_rd = 0;
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <GetBtnRunState+0x7c>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]

	//	if (short_state1 == 0x00 && long_state1 == 0x00)	return 0x00;
	//	if (short_state1 == 0x01 && long_state1 == 0x00)	return 0x01;
	//	if (short_state1 == 0x00 && long_state1 == 0x01)	return 0x02;
	return 0x00;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000259 	.word	0x20000259
 80010a0:	20000258 	.word	0x20000258

080010a4 <GetBtnUpState>:
//--------------------------------------------------------------------------
uint8_t GetBtnUpState()
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x00)
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <GetBtnUpState+0x7c>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d10b      	bne.n	80010c8 <GetBtnUpState+0x24>
 80010b0:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <GetBtnUpState+0x80>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d107      	bne.n	80010c8 <GetBtnUpState+0x24>
	{
		btn2_long_rd = 0;
 80010b8:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <GetBtnUpState+0x80>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <GetBtnUpState+0x7c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
		return 0x00;
 80010c4:	2300      	movs	r3, #0
 80010c6:	e026      	b.n	8001116 <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x01 && btn2_long_rd == 0x00)
 80010c8:	4b15      	ldr	r3, [pc, #84]	; (8001120 <GetBtnUpState+0x7c>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d10b      	bne.n	80010e8 <GetBtnUpState+0x44>
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <GetBtnUpState+0x80>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d107      	bne.n	80010e8 <GetBtnUpState+0x44>
	{
		btn2_long_rd = 0;
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <GetBtnUpState+0x80>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <GetBtnUpState+0x7c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
		return 0x01;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e016      	b.n	8001116 <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x01)
 80010e8:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <GetBtnUpState+0x7c>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d10b      	bne.n	8001108 <GetBtnUpState+0x64>
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <GetBtnUpState+0x80>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d107      	bne.n	8001108 <GetBtnUpState+0x64>
	{
		btn2_long_rd = 0;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <GetBtnUpState+0x80>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <GetBtnUpState+0x7c>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
		return 0x02;
 8001104:	2302      	movs	r3, #2
 8001106:	e006      	b.n	8001116 <GetBtnUpState+0x72>
	}

	btn2_long_rd = 0;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <GetBtnUpState+0x80>)
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
	btn2_short_rd = 0;
 800110e:	4b04      	ldr	r3, [pc, #16]	; (8001120 <GetBtnUpState+0x7c>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
	//	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	//	if (short_state2 == 0x00 && long_state2 == 0x00)	return 0x00;
	//	if (short_state2 == 0x01 && long_state2 == 0x00)	return 0x01;
	//	if (short_state2 == 0x00 && long_state2 == 0x01)	return 0x02;
	return 0x00;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000261 	.word	0x20000261
 8001124:	20000260 	.word	0x20000260

08001128 <GetBtnDownState>:
//--------------------------------------------------------------------------
uint8_t GetBtnDownState()
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x00)
 800112c:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <GetBtnDownState+0x7c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d10b      	bne.n	800114c <GetBtnDownState+0x24>
 8001134:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <GetBtnDownState+0x80>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d107      	bne.n	800114c <GetBtnDownState+0x24>
	{
		btn3_long_rd = 0;
 800113c:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <GetBtnDownState+0x80>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <GetBtnDownState+0x7c>)
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8001148:	2300      	movs	r3, #0
 800114a:	e026      	b.n	800119a <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x01 && btn3_long_rd == 0x00)
 800114c:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <GetBtnDownState+0x7c>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d10b      	bne.n	800116c <GetBtnDownState+0x44>
 8001154:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <GetBtnDownState+0x80>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d107      	bne.n	800116c <GetBtnDownState+0x44>
	{
		btn3_long_rd = 0;
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <GetBtnDownState+0x80>)
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <GetBtnDownState+0x7c>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
		return 0x01;
 8001168:	2301      	movs	r3, #1
 800116a:	e016      	b.n	800119a <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x01)
 800116c:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <GetBtnDownState+0x7c>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10b      	bne.n	800118c <GetBtnDownState+0x64>
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <GetBtnDownState+0x80>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d107      	bne.n	800118c <GetBtnDownState+0x64>
	{
		btn3_long_rd = 0;
 800117c:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <GetBtnDownState+0x80>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <GetBtnDownState+0x7c>)
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
		return 0x02;
 8001188:	2302      	movs	r3, #2
 800118a:	e006      	b.n	800119a <GetBtnDownState+0x72>
	}

	btn3_long_rd = 0;
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <GetBtnDownState+0x80>)
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
	btn3_short_rd = 0;
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <GetBtnDownState+0x7c>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
	//	if (short_state3 == 0x00 && long_state3 == 0x00)	return 0x00;
	//	if (short_state3 == 0x01 && long_state3 == 0x00)	return 0x01;
	//	if (short_state3 == 0x00 && long_state3 == 0x01)	return 0x02;
	return 0x00;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	20000269 	.word	0x20000269
 80011a8:	20000268 	.word	0x20000268

080011ac <EnableTIM3_PB4>:
// char trans2_str[64] = {
// 	0,
// };
//--------------------------------------------------------------------------
void EnableTIM3_PB4()
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
	timWork = 1;
 80011b0:	4b03      	ldr	r3, [pc, #12]	; (80011c0 <EnableTIM3_PB4+0x14>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	2000026a 	.word	0x2000026a

080011c4 <GetTIM3>:
uint16_t GetTIM3()
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
	return g_vTIM3_PB4;
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <GetTIM3+0x14>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	b29b      	uxth	r3, r3
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	2000026c 	.word	0x2000026c

080011dc <resValTIM3_PB4>:
void resValTIM3_PB4()
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
	g_vTIM3_PB4 = 0;
 80011e0:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <resValTIM3_PB4+0x14>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	801a      	strh	r2, [r3, #0]
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	2000026c 	.word	0x2000026c

080011f4 <EnableTIM4_PB6>:
//--------------------------------------------------------------------------
void EnableTIM4_PB6()
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
	timWork = 0;
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <EnableTIM4_PB6+0x14>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	2000026a 	.word	0x2000026a

0800120c <GetTIM4>:
uint16_t GetTIM4()
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
	return g_vTIM4_PB6;
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <GetTIM4+0x14>)
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	b29b      	uxth	r3, r3
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	2000026e 	.word	0x2000026e

08001224 <resValTIM4_PB6>:
void resValTIM4_PB6()
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
	g_vTIM4_PB6 = 0;
 8001228:	4b03      	ldr	r3, [pc, #12]	; (8001238 <resValTIM4_PB6+0x14>)
 800122a:	2200      	movs	r2, #0
 800122c:	801a      	strh	r2, [r3, #0]
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	2000026e 	.word	0x2000026e

0800123c <HAL_TIM_IC_CaptureCallback>:
//--------------------------------------------------------------------------
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	uint16_t periodTIM3, pulseWidthTIM3, periodTIM4, pulseWidthTIM4;

	if (timWork)
 8001244:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d027      	beq.n	800129e <HAL_TIM_IC_CaptureCallback+0x62>
	{
		if (htim->Instance == TIM3)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a29      	ldr	r2, [pc, #164]	; (80012f8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d149      	bne.n	80012ec <HAL_TIM_IC_CaptureCallback+0xb0>
		{
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	7f1b      	ldrb	r3, [r3, #28]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d145      	bne.n	80012ec <HAL_TIM_IC_CaptureCallback+0xb0>
			{
				periodTIM3 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8001260:	2100      	movs	r1, #0
 8001262:	4826      	ldr	r0, [pc, #152]	; (80012fc <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001264:	f005 fd26 	bl	8006cb4 <HAL_TIM_ReadCapturedValue>
 8001268:	4603      	mov	r3, r0
 800126a:	823b      	strh	r3, [r7, #16]
				pulseWidthTIM3 = HAL_TIM_ReadCapturedValue(&htim3,
 800126c:	2104      	movs	r1, #4
 800126e:	4823      	ldr	r0, [pc, #140]	; (80012fc <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001270:	f005 fd20 	bl	8006cb4 <HAL_TIM_ReadCapturedValue>
 8001274:	4603      	mov	r3, r0
 8001276:	81fb      	strh	r3, [r7, #14]
														   TIM_CHANNEL_2);

				TIM3->CNT = 0;
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	; 0x24

				int16_t deltaTIM3 = (int16_t)periodTIM3 - (int16_t)pulseWidthTIM3;
 800127e:	8a3a      	ldrh	r2, [r7, #16]
 8001280:	89fb      	ldrh	r3, [r7, #14]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	b29b      	uxth	r3, r3
 8001286:	81bb      	strh	r3, [r7, #12]
				deltaTIM3 = (deltaTIM3 < 0) ? (-1 * deltaTIM3) : deltaTIM3;
 8001288:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800128c:	2b00      	cmp	r3, #0
 800128e:	bfb8      	it	lt
 8001290:	425b      	neglt	r3, r3
 8001292:	b29b      	uxth	r3, r3
 8001294:	81bb      	strh	r3, [r7, #12]
				g_vTIM3_PB4 = deltaTIM3;
 8001296:	89ba      	ldrh	r2, [r7, #12]
 8001298:	4b19      	ldr	r3, [pc, #100]	; (8001300 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800129a:	801a      	strh	r2, [r3, #0]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
				g_vTIM4_PB6 = deltaTIM4;
			}
		}
	}
}
 800129c:	e026      	b.n	80012ec <HAL_TIM_IC_CaptureCallback+0xb0>
		if (htim->Instance == TIM4)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a18      	ldr	r2, [pc, #96]	; (8001304 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d121      	bne.n	80012ec <HAL_TIM_IC_CaptureCallback+0xb0>
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	7f1b      	ldrb	r3, [r3, #28]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d11d      	bne.n	80012ec <HAL_TIM_IC_CaptureCallback+0xb0>
				periodTIM4 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 80012b0:	2100      	movs	r1, #0
 80012b2:	4815      	ldr	r0, [pc, #84]	; (8001308 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80012b4:	f005 fcfe 	bl	8006cb4 <HAL_TIM_ReadCapturedValue>
 80012b8:	4603      	mov	r3, r0
 80012ba:	82fb      	strh	r3, [r7, #22]
				pulseWidthTIM4 = HAL_TIM_ReadCapturedValue(&htim4,
 80012bc:	2104      	movs	r1, #4
 80012be:	4812      	ldr	r0, [pc, #72]	; (8001308 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80012c0:	f005 fcf8 	bl	8006cb4 <HAL_TIM_ReadCapturedValue>
 80012c4:	4603      	mov	r3, r0
 80012c6:	82bb      	strh	r3, [r7, #20]
				TIM4->CNT = 0;
 80012c8:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	625a      	str	r2, [r3, #36]	; 0x24
				int16_t deltaTIM4 = (int16_t)periodTIM4 - (int16_t)pulseWidthTIM4;
 80012ce:	8afa      	ldrh	r2, [r7, #22]
 80012d0:	8abb      	ldrh	r3, [r7, #20]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	827b      	strh	r3, [r7, #18]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
 80012d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	bfb8      	it	lt
 80012e0:	425b      	neglt	r3, r3
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	827b      	strh	r3, [r7, #18]
				g_vTIM4_PB6 = deltaTIM4;
 80012e6:	8a7a      	ldrh	r2, [r7, #18]
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_TIM_IC_CaptureCallback+0xd0>)
 80012ea:	801a      	strh	r2, [r3, #0]
}
 80012ec:	bf00      	nop
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	2000026a 	.word	0x2000026a
 80012f8:	40000400 	.word	0x40000400
 80012fc:	20000904 	.word	0x20000904
 8001300:	2000026c 	.word	0x2000026c
 8001304:	40000800 	.word	0x40000800
 8001308:	200008b4 	.word	0x200008b4
 800130c:	2000026e 	.word	0x2000026e

08001310 <GetADC>:
//**************************************************************************
#if TEST_ADC
volatile uint16_t g_VADC = 0;

uint16_t GetADC()
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
	return g_VADC;
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <GetADC+0x14>)
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	b29b      	uxth	r3, r3
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000270 	.word	0x20000270

08001328 <HAL_ADC_ConvCpltCallback>:
//--------------------------------------------------------------------------
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a06      	ldr	r2, [pc, #24]	; (8001350 <HAL_ADC_ConvCpltCallback+0x28>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d106      	bne.n	8001348 <HAL_ADC_ConvCpltCallback+0x20>
	{
		g_VADC = HAL_ADC_GetValue(&hadc1); // глобальная переменна g_VADC вычитывается
 800133a:	4806      	ldr	r0, [pc, #24]	; (8001354 <HAL_ADC_ConvCpltCallback+0x2c>)
 800133c:	f001 fe40 	bl	8002fc0 <HAL_ADC_GetValue>
 8001340:	4603      	mov	r3, r0
 8001342:	b29a      	uxth	r2, r3
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <HAL_ADC_ConvCpltCallback+0x30>)
 8001346:	801a      	strh	r2, [r3, #0]
	}
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40012400 	.word	0x40012400
 8001354:	2000094c 	.word	0x2000094c
 8001358:	20000270 	.word	0x20000270

0800135c <runCommands>:
//}

uint8_t RelayState = 0x00; //TODO: проверить первое состоянеи первоначальное состояние реле 27V
bool changeTableFlag = false;
void runCommands(uint8_t *Buf, uint32_t *Len)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 8001362:	af00      	add	r7, sp, #0
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	6018      	str	r0, [r3, #0]
 8001368:	463b      	mov	r3, r7
 800136a:	6019      	str	r1, [r3, #0]
	if (*Len < 1)
 800136c:	463b      	mov	r3, r7
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 83f2 	beq.w	8001b5c <runCommands+0x800>

	//--------------------------------------------------------------------------

	uint8_t UserTxBufferFS[APP_TX_DATA_SIZE];
	uint16_t tVal16;
	uint8_t cmd = Buf[0];
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	 */

	//--------------------------------------------------------------------------

	
	if (cmd == 0x01)		// Relay:1 - 12V	[0x01 - 0x01]
 8001382:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001386:	2b01      	cmp	r3, #1
 8001388:	d16c      	bne.n	8001464 <runCommands+0x108>
	{
		if (*Len >= 2 && (Buf[1] == 0x01 || Buf[1] == 0x00))
 800138a:	463b      	mov	r3, r7
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d957      	bls.n	8001444 <runCommands+0xe8>
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	3301      	adds	r3, #1
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d005      	beq.n	80013ac <runCommands+0x50>
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	3301      	adds	r3, #1
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d14b      	bne.n	8001444 <runCommands+0xe8>
		{
			if (Buf[1] == 0x01)
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d11f      	bne.n	80013f8 <runCommands+0x9c>
			{
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2104      	movs	r1, #4
 80013bc:	48db      	ldr	r0, [pc, #876]	; (800172c <runCommands+0x3d0>)
 80013be:	f002 fdf8 	bl	8003fb2 <HAL_GPIO_WritePin>
				RelayState = 0x01;
 80013c2:	4bdb      	ldr	r3, [pc, #876]	; (8001730 <runCommands+0x3d4>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	701a      	strb	r2, [r3, #0]
				printf("RelayState:12V - %d \n", RelayState);
 80013c8:	4bd9      	ldr	r3, [pc, #868]	; (8001730 <runCommands+0x3d4>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	4619      	mov	r1, r3
 80013ce:	48d9      	ldr	r0, [pc, #868]	; (8001734 <runCommands+0x3d8>)
 80013d0:	f009 fffa 	bl	800b3c8 <iprintf>
				SetAllDAC();
 80013d4:	f7ff fdfe 	bl	8000fd4 <SetAllDAC>

				UserTxBufferFS[0] = cmd;
 80013d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013dc:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80013e0:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 80013e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e6:	2200      	movs	r2, #0
 80013e8:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 80013ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ee:	2102      	movs	r1, #2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f009 fbb1 	bl	800ab58 <CDC_Transmit_FS>
				return;
 80013f6:	e3b6      	b.n	8001b66 <runCommands+0x80a>
			}
			else if (Buf[1] == 0x00)
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d11f      	bne.n	8001444 <runCommands+0xe8>
			{
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	2104      	movs	r1, #4
 8001408:	48c8      	ldr	r0, [pc, #800]	; (800172c <runCommands+0x3d0>)
 800140a:	f002 fdd2 	bl	8003fb2 <HAL_GPIO_WritePin>
				RelayState = 0x00;
 800140e:	4bc8      	ldr	r3, [pc, #800]	; (8001730 <runCommands+0x3d4>)
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
				printf("RelayState:27V - %d \n", RelayState);
 8001414:	4bc6      	ldr	r3, [pc, #792]	; (8001730 <runCommands+0x3d4>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	4619      	mov	r1, r3
 800141a:	48c7      	ldr	r0, [pc, #796]	; (8001738 <runCommands+0x3dc>)
 800141c:	f009 ffd4 	bl	800b3c8 <iprintf>
				SetAllDAC();
 8001420:	f7ff fdd8 	bl	8000fd4 <SetAllDAC>

				UserTxBufferFS[0] = cmd;
 8001424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001428:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800142c:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 800142e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001432:	2200      	movs	r2, #0
 8001434:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 8001436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143a:	2102      	movs	r1, #2
 800143c:	4618      	mov	r0, r3
 800143e:	f009 fb8b 	bl	800ab58 <CDC_Transmit_FS>
				return;
 8001442:	e390      	b.n	8001b66 <runCommands+0x80a>
			}
		}

		UserTxBufferFS[0] = cmd;
 8001444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001448:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800144c:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 800144e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001452:	2201      	movs	r2, #1
 8001454:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8001456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145a:	2102      	movs	r1, #2
 800145c:	4618      	mov	r0, r3
 800145e:	f009 fb7b 	bl	800ab58 <CDC_Transmit_FS>
		return;
 8001462:	e380      	b.n	8001b66 <runCommands+0x80a>

		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x02)	// DA:4095
 8001464:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001468:	2b02      	cmp	r3, #2
 800146a:	d13e      	bne.n	80014ea <runCommands+0x18e>
	{
		if (*Len >= 3)
 800146c:	463b      	mov	r3, r7
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b02      	cmp	r3, #2
 8001474:	d929      	bls.n	80014ca <runCommands+0x16e>
		{
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 8001476:	f7ff feb1 	bl	80011dc <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 800147a:	f7ff fed3 	bl	8001224 <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	3301      	adds	r3, #1
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	b29a      	uxth	r2, r3
 8001488:	f107 0322 	add.w	r3, r7, #34	; 0x22
 800148c:	801a      	strh	r2, [r3, #0]
			SetDacA(tVal16);
 800148e:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	b21b      	sxth	r3, r3
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fd5c 	bl	8000f54 <SetDacA>
			//			SetDacA(tVal16);

			printf("DacA: %d\n", tVal16);
 800149c:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	4619      	mov	r1, r3
 80014a4:	48a5      	ldr	r0, [pc, #660]	; (800173c <runCommands+0x3e0>)
 80014a6:	f009 ff8f 	bl	800b3c8 <iprintf>
			UserTxBufferFS[0] = cmd;
 80014aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ae:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80014b2:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 80014b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b8:	2200      	movs	r2, #0
 80014ba:	705a      	strb	r2, [r3, #1]

			CDC_Transmit_FS(UserTxBufferFS, 2);
 80014bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c0:	2102      	movs	r1, #2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f009 fb48 	bl	800ab58 <CDC_Transmit_FS>
			return;
 80014c8:	e34d      	b.n	8001b66 <runCommands+0x80a>
		}

		UserTxBufferFS[0] = cmd;
 80014ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ce:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80014d2:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 80014d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d8:	2201      	movs	r2, #1
 80014da:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 80014dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e0:	2102      	movs	r1, #2
 80014e2:	4618      	mov	r0, r3
 80014e4:	f009 fb38 	bl	800ab58 <CDC_Transmit_FS>
		return;
 80014e8:	e33d      	b.n	8001b66 <runCommands+0x80a>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x03)	// DB:4095
 80014ea:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d13e      	bne.n	8001570 <runCommands+0x214>
	{
		if (*Len >= 3)
 80014f2:	463b      	mov	r3, r7
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d929      	bls.n	8001550 <runCommands+0x1f4>
		{
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 80014fc:	f7ff fe6e 	bl	80011dc <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 8001500:	f7ff fe90 	bl	8001224 <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	b29a      	uxth	r2, r3
 800150e:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001512:	801a      	strh	r2, [r3, #0]
			SetDacB(tVal16);
 8001514:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	b21b      	sxth	r3, r3
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fd39 	bl	8000f94 <SetDacB>

			UserTxBufferFS[0] = cmd;
 8001522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001526:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800152a:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 800152c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001530:	2200      	movs	r2, #0
 8001532:	705a      	strb	r2, [r3, #1]

			printf("DacB: %d \n", tVal16);
 8001534:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	4619      	mov	r1, r3
 800153c:	4880      	ldr	r0, [pc, #512]	; (8001740 <runCommands+0x3e4>)
 800153e:	f009 ff43 	bl	800b3c8 <iprintf>

			CDC_Transmit_FS(UserTxBufferFS, 2);
 8001542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001546:	2102      	movs	r1, #2
 8001548:	4618      	mov	r0, r3
 800154a:	f009 fb05 	bl	800ab58 <CDC_Transmit_FS>
			return;
 800154e:	e30a      	b.n	8001b66 <runCommands+0x80a>
		}

		UserTxBufferFS[0] = cmd;
 8001550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001554:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001558:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 800155a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155e:	2201      	movs	r2, #1
 8001560:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8001562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001566:	2102      	movs	r1, #2
 8001568:	4618      	mov	r0, r3
 800156a:	f009 faf5 	bl	800ab58 <CDC_Transmit_FS>
		return;
 800156e:	e2fa      	b.n	8001b66 <runCommands+0x80a>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x04)	// ADC?
 8001570:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001574:	2b04      	cmp	r3, #4
 8001576:	d119      	bne.n	80015ac <runCommands+0x250>
	{
		tVal16 = GetADC();
 8001578:	f7ff feca 	bl	8001310 <GetADC>
 800157c:	4603      	mov	r3, r0
 800157e:	461a      	mov	r2, r3
 8001580:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001584:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8001586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158a:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800158e:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &tVal16, sizeof(tVal16));
 8001590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001594:	3301      	adds	r3, #1
 8001596:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800159a:	8812      	ldrh	r2, [r2, #0]
 800159c:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 3);
 800159e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a2:	2103      	movs	r1, #3
 80015a4:	4618      	mov	r0, r3
 80015a6:	f009 fad7 	bl	800ab58 <CDC_Transmit_FS>
		return;
 80015aa:	e2dc      	b.n	8001b66 <runCommands+0x80a>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x05)	// Relay?DA?DB?
 80015ac:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80015b0:	2b05      	cmp	r3, #5
 80015b2:	d12c      	bne.n	800160e <runCommands+0x2b2>
	{
		UserTxBufferFS[0] = cmd;
 80015b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b8:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80015bc:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = RelayState;
 80015be:	4b5c      	ldr	r3, [pc, #368]	; (8001730 <runCommands+0x3d4>)
 80015c0:	781a      	ldrb	r2, [r3, #0]
 80015c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c6:	705a      	strb	r2, [r3, #1]

		tVal16 = GetDacA();
 80015c8:	f7ff fd16 	bl	8000ff8 <GetDacA>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461a      	mov	r2, r3
 80015d0:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80015d4:	801a      	strh	r2, [r3, #0]
		memcpy(UserTxBufferFS + 2, &tVal16, sizeof(tVal16));
 80015d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015da:	3302      	adds	r3, #2
 80015dc:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80015e0:	8812      	ldrh	r2, [r2, #0]
 80015e2:	801a      	strh	r2, [r3, #0]

		tVal16 = GetDacB();
 80015e4:	f7ff fd12 	bl	800100c <GetDacB>
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80015f0:	801a      	strh	r2, [r3, #0]
		memcpy(UserTxBufferFS + 4, &tVal16, sizeof(tVal16));
 80015f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f6:	3304      	adds	r3, #4
 80015f8:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80015fc:	8812      	ldrh	r2, [r2, #0]
 80015fe:	801a      	strh	r2, [r3, #0]

		CDC_Transmit_FS(UserTxBufferFS, 6);
 8001600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001604:	2106      	movs	r1, #6
 8001606:	4618      	mov	r0, r3
 8001608:	f009 faa6 	bl	800ab58 <CDC_Transmit_FS>
		return;
 800160c:	e2ab      	b.n	8001b66 <runCommands+0x80a>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x06)	// Btn?
 800160e:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001612:	2b06      	cmp	r3, #6
 8001614:	d120      	bne.n	8001658 <runCommands+0x2fc>
	{
		UserTxBufferFS[0] = cmd;
 8001616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161a:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800161e:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = GetBtnRunState();
 8001620:	f7ff fcfe 	bl	8001020 <GetBtnRunState>
 8001624:	4603      	mov	r3, r0
 8001626:	461a      	mov	r2, r3
 8001628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162c:	705a      	strb	r2, [r3, #1]
		UserTxBufferFS[2] = GetBtnUpState();
 800162e:	f7ff fd39 	bl	80010a4 <GetBtnUpState>
 8001632:	4603      	mov	r3, r0
 8001634:	461a      	mov	r2, r3
 8001636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163a:	709a      	strb	r2, [r3, #2]
		UserTxBufferFS[3] = GetBtnDownState();
 800163c:	f7ff fd74 	bl	8001128 <GetBtnDownState>
 8001640:	4603      	mov	r3, r0
 8001642:	461a      	mov	r2, r3
 8001644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001648:	70da      	strb	r2, [r3, #3]
		CDC_Transmit_FS(UserTxBufferFS, 4);
 800164a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164e:	2104      	movs	r1, #4
 8001650:	4618      	mov	r0, r3
 8001652:	f009 fa81 	bl	800ab58 <CDC_Transmit_FS>
		return;
 8001656:	e286      	b.n	8001b66 <runCommands+0x80a>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x07)	// ID?
 8001658:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 800165c:	2b07      	cmp	r3, #7
 800165e:	d144      	bne.n	80016ea <runCommands+0x38e>
	{
		char str[9] = {
 8001660:	f107 0318 	add.w	r3, r7, #24
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	3304      	adds	r3, #4
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	711a      	strb	r2, [r3, #4]
			0,
		};
		memcpy(str, "SN", strlen("SN"));
 8001670:	f107 0318 	add.w	r3, r7, #24
 8001674:	2202      	movs	r2, #2
 8001676:	4933      	ldr	r1, [pc, #204]	; (8001744 <runCommands+0x3e8>)
 8001678:	4618      	mov	r0, r3
 800167a:	f009 fe8f 	bl	800b39c <memcpy>
		itoa(SN_DEFINE, str + 2, 16);
 800167e:	f107 0318 	add.w	r3, r7, #24
 8001682:	3302      	adds	r3, #2
 8001684:	2210      	movs	r2, #16
 8001686:	4619      	mov	r1, r3
 8001688:	482f      	ldr	r0, [pc, #188]	; (8001748 <runCommands+0x3ec>)
 800168a:	f009 fe85 	bl	800b398 <itoa>

		UserTxBufferFS[0] = cmd;
 800168e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001692:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001696:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = strlen(str);
 8001698:	f107 0318 	add.w	r3, r7, #24
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe fd57 	bl	8000150 <strlen>
 80016a2:	4603      	mov	r3, r0
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016aa:	705a      	strb	r2, [r3, #1]
		memcpy(UserTxBufferFS + 2, str, strlen(str));
 80016ac:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80016b0:	3402      	adds	r4, #2
 80016b2:	f107 0318 	add.w	r3, r7, #24
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe fd4a 	bl	8000150 <strlen>
 80016bc:	4602      	mov	r2, r0
 80016be:	f107 0318 	add.w	r3, r7, #24
 80016c2:	4619      	mov	r1, r3
 80016c4:	4620      	mov	r0, r4
 80016c6:	f009 fe69 	bl	800b39c <memcpy>
		CDC_Transmit_FS(UserTxBufferFS, strlen(str) + 2);
 80016ca:	f107 0318 	add.w	r3, r7, #24
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe fd3e 	bl	8000150 <strlen>
 80016d4:	4603      	mov	r3, r0
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	3302      	adds	r3, #2
 80016da:	b29a      	uxth	r2, r3
 80016dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e0:	4611      	mov	r1, r2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f009 fa38 	bl	800ab58 <CDC_Transmit_FS>
 80016e8:	e23d      	b.n	8001b66 <runCommands+0x80a>
	 */

		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x08)	// Калибровка TIM inHL?
 80016ea:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80016ee:	2b08      	cmp	r3, #8
 80016f0:	d12c      	bne.n	800174c <runCommands+0x3f0>
	{
		EnableTIM3_PB4();
 80016f2:	f7ff fd5b 	bl	80011ac <EnableTIM3_PB4>
		uint16_t temp = GetTIM3();
 80016f6:	f7ff fd65 	bl	80011c4 <GetTIM3>
 80016fa:	4603      	mov	r3, r0
 80016fc:	461a      	mov	r2, r3
 80016fe:	f107 0316 	add.w	r3, r7, #22
 8001702:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8001704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001708:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800170c:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &temp, sizeof(uint16_t));
 800170e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001712:	3301      	adds	r3, #1
 8001714:	f107 0216 	add.w	r2, r7, #22
 8001718:	8812      	ldrh	r2, [r2, #0]
 800171a:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 800171c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001720:	2103      	movs	r1, #3
 8001722:	4618      	mov	r0, r3
 8001724:	f009 fa18 	bl	800ab58 <CDC_Transmit_FS>
 8001728:	e21d      	b.n	8001b66 <runCommands+0x80a>
 800172a:	bf00      	nop
 800172c:	40010800 	.word	0x40010800
 8001730:	20000272 	.word	0x20000272
 8001734:	0800c7b0 	.word	0x0800c7b0
 8001738:	0800c7c8 	.word	0x0800c7c8
 800173c:	0800c7e0 	.word	0x0800c7e0
 8001740:	0800c7ec 	.word	0x0800c7ec
 8001744:	0800c7f8 	.word	0x0800c7f8
 8001748:	01121001 	.word	0x01121001
		return;

		
		//--------------------------------------------------------------------------
	}
	else if (cmd == 0x09)	// Калибровка TIM inLL?
 800174c:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001750:	2b09      	cmp	r3, #9
 8001752:	d11b      	bne.n	800178c <runCommands+0x430>
	{
		EnableTIM4_PB6();
 8001754:	f7ff fd4e 	bl	80011f4 <EnableTIM4_PB6>
		uint16_t temp = GetTIM4();
 8001758:	f7ff fd58 	bl	800120c <GetTIM4>
 800175c:	4603      	mov	r3, r0
 800175e:	461a      	mov	r2, r3
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8001766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176a:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800176e:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &temp, sizeof(uint16_t));
 8001770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001774:	3301      	adds	r3, #1
 8001776:	f107 0214 	add.w	r2, r7, #20
 800177a:	8812      	ldrh	r2, [r2, #0]
 800177c:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 800177e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001782:	2103      	movs	r1, #3
 8001784:	4618      	mov	r0, r3
 8001786:	f009 f9e7 	bl	800ab58 <CDC_Transmit_FS>
 800178a:	e1ec      	b.n	8001b66 <runCommands+0x80a>
		return;
		//--------------------------------------------------------------------------

		
	}
	else if (cmd == 0x0A)	// Прием калибровочной таблицы [0x0A][1-4][offset][count][data] 	answer: [0x0A]+[1-4]+[offset]+[count]+[status] (0x00 - сработал; 0x01 - не сработал)
 800178c:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001790:	2b0a      	cmp	r3, #10
 8001792:	f040 81aa 	bne.w	8001aea <runCommands+0x78e>
	{
		//Прием калибровочной таблицы [0x0A][1-4][offset][count][data]
		uint16_t tOffset, tCount, tData;
		if (*Len >= 2 && Buf[1] >= 0x00 && Buf[1] <= 0x03)
 8001796:	463b      	mov	r3, r7
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b01      	cmp	r3, #1
 800179e:	f240 8194 	bls.w	8001aca <runCommands+0x76e>
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	3301      	adds	r3, #1
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	f200 818d 	bhi.w	8001aca <runCommands+0x76e>
		{
			if 		(Buf[1] == 0x00)	//А_m12
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	3301      	adds	r3, #1
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d15c      	bne.n	8001876 <runCommands+0x51a>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	3302      	adds	r3, #2
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	f107 0312 	add.w	r3, r7, #18
 80017ca:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	3304      	adds	r3, #4
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	f107 0310 	add.w	r3, r7, #16
 80017da:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 80017dc:	2300      	movs	r3, #0
 80017de:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
 80017e2:	e01f      	b.n	8001824 <runCommands+0x4c8>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 80017e4:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	3306      	adds	r3, #6
 80017ec:	1d3a      	adds	r2, r7, #4
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	4413      	add	r3, r2
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	f107 030e 	add.w	r3, r7, #14
 80017fa:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValA_m12[i + tOffset] = tData;
 80017fc:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8001800:	f107 0212 	add.w	r2, r7, #18
 8001804:	8812      	ldrh	r2, [r2, #0]
 8001806:	4413      	add	r3, r2
 8001808:	f107 020e 	add.w	r2, r7, #14
 800180c:	8811      	ldrh	r1, [r2, #0]
 800180e:	4ad2      	ldr	r2, [pc, #840]	; (8001b58 <runCommands+0x7fc>)
 8001810:	3304      	adds	r3, #4
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4413      	add	r3, r2
 8001816:	460a      	mov	r2, r1
 8001818:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 800181a:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 800181e:	3301      	adds	r3, #1
 8001820:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	f8b7 222e 	ldrh.w	r2, [r7, #558]	; 0x22e
 800182e:	429a      	cmp	r2, r3
 8001830:	d3d8      	bcc.n	80017e4 <runCommands+0x488>
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 8001832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001836:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800183a:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 800183c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001840:	2201      	movs	r2, #1
 8001842:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2			->4
 8001844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001848:	3302      	adds	r3, #2
 800184a:	f107 0212 	add.w	r2, r7, #18
 800184e:	8812      	ldrh	r2, [r2, #0]
 8001850:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8001852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001856:	3304      	adds	r3, #4
 8001858:	f107 0210 	add.w	r2, r7, #16
 800185c:	8812      	ldrh	r2, [r2, #0]
 800185e:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1		->7
 8001860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001864:	2200      	movs	r2, #0
 8001866:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8001868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186c:	2101      	movs	r1, #1
 800186e:	4618      	mov	r0, r3
 8001870:	f009 f972 	bl	800ab58 <CDC_Transmit_FS>
				return;
 8001874:	e177      	b.n	8001b66 <runCommands+0x80a>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x01)	//B_m12
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	3301      	adds	r3, #1
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d15c      	bne.n	800193c <runCommands+0x5e0>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	3302      	adds	r3, #2
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	b29a      	uxth	r2, r3
 800188c:	f107 0312 	add.w	r3, r7, #18
 8001890:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	3304      	adds	r3, #4
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	b29a      	uxth	r2, r3
 800189c:	f107 0310 	add.w	r3, r7, #16
 80018a0:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
 80018a8:	e01f      	b.n	80018ea <runCommands+0x58e>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 80018aa:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	3306      	adds	r3, #6
 80018b2:	1d3a      	adds	r2, r7, #4
 80018b4:	6812      	ldr	r2, [r2, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	f107 030e 	add.w	r3, r7, #14
 80018c0:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValB_m12[i + tOffset] = tData;
 80018c2:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 80018c6:	f107 0212 	add.w	r2, r7, #18
 80018ca:	8812      	ldrh	r2, [r2, #0]
 80018cc:	4413      	add	r3, r2
 80018ce:	f107 020e 	add.w	r2, r7, #14
 80018d2:	8811      	ldrh	r1, [r2, #0]
 80018d4:	4aa0      	ldr	r2, [pc, #640]	; (8001b58 <runCommands+0x7fc>)
 80018d6:	335c      	adds	r3, #92	; 0x5c
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	460a      	mov	r2, r1
 80018de:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 80018e0:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 80018e4:	3301      	adds	r3, #1
 80018e6:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
 80018ea:	f107 0310 	add.w	r3, r7, #16
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	f8b7 222c 	ldrh.w	r2, [r7, #556]	; 0x22c
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d3d8      	bcc.n	80018aa <runCommands+0x54e>
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 80018f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fc:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001900:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8001902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001906:	2201      	movs	r2, #1
 8001908:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 800190a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190e:	3302      	adds	r3, #2
 8001910:	f107 0212 	add.w	r2, r7, #18
 8001914:	8812      	ldrh	r2, [r2, #0]
 8001916:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8001918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191c:	3304      	adds	r3, #4
 800191e:	f107 0210 	add.w	r2, r7, #16
 8001922:	8812      	ldrh	r2, [r2, #0]
 8001924:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 8001926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192a:	2200      	movs	r2, #0
 800192c:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 800192e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001932:	2101      	movs	r1, #1
 8001934:	4618      	mov	r0, r3
 8001936:	f009 f90f 	bl	800ab58 <CDC_Transmit_FS>
				return;
 800193a:	e114      	b.n	8001b66 <runCommands+0x80a>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x02)	//A_m27
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	3301      	adds	r3, #1
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d15c      	bne.n	8001a02 <runCommands+0x6a6>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	3302      	adds	r3, #2
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	b29a      	uxth	r2, r3
 8001952:	f107 0312 	add.w	r3, r7, #18
 8001956:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	3304      	adds	r3, #4
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	b29a      	uxth	r2, r3
 8001962:	f107 0310 	add.w	r3, r7, #16
 8001966:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8001968:	2300      	movs	r3, #0
 800196a:	f8a7 322a 	strh.w	r3, [r7, #554]	; 0x22a
 800196e:	e01f      	b.n	80019b0 <runCommands+0x654>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8001970:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	3306      	adds	r3, #6
 8001978:	1d3a      	adds	r2, r7, #4
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	4413      	add	r3, r2
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	b29a      	uxth	r2, r3
 8001982:	f107 030e 	add.w	r3, r7, #14
 8001986:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValA_m27[i + tOffset] = tData;
 8001988:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 800198c:	f107 0212 	add.w	r2, r7, #18
 8001990:	8812      	ldrh	r2, [r2, #0]
 8001992:	4413      	add	r3, r2
 8001994:	f107 020e 	add.w	r2, r7, #14
 8001998:	8811      	ldrh	r1, [r2, #0]
 800199a:	4a6f      	ldr	r2, [pc, #444]	; (8001b58 <runCommands+0x7fc>)
 800199c:	33b4      	adds	r3, #180	; 0xb4
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4413      	add	r3, r2
 80019a2:	460a      	mov	r2, r1
 80019a4:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 80019a6:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 80019aa:	3301      	adds	r3, #1
 80019ac:	f8a7 322a 	strh.w	r3, [r7, #554]	; 0x22a
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	f8b7 222a 	ldrh.w	r2, [r7, #554]	; 0x22a
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d3d8      	bcc.n	8001970 <runCommands+0x614>
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 80019be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c2:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80019c6:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 80019c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019cc:	2201      	movs	r2, #1
 80019ce:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 80019d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d4:	3302      	adds	r3, #2
 80019d6:	f107 0212 	add.w	r2, r7, #18
 80019da:	8812      	ldrh	r2, [r2, #0]
 80019dc:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 80019de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e2:	3304      	adds	r3, #4
 80019e4:	f107 0210 	add.w	r2, r7, #16
 80019e8:	8812      	ldrh	r2, [r2, #0]
 80019ea:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 80019ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f0:	2200      	movs	r2, #0
 80019f2:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 80019f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f8:	2101      	movs	r1, #1
 80019fa:	4618      	mov	r0, r3
 80019fc:	f009 f8ac 	bl	800ab58 <CDC_Transmit_FS>
				return;
 8001a00:	e0b1      	b.n	8001b66 <runCommands+0x80a>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x03)	//B_m27
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	3301      	adds	r3, #1
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d15d      	bne.n	8001aca <runCommands+0x76e>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	3302      	adds	r3, #2
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	f107 0312 	add.w	r3, r7, #18
 8001a1c:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	3304      	adds	r3, #4
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f8a7 3228 	strh.w	r3, [r7, #552]	; 0x228
 8001a34:	e020      	b.n	8001a78 <runCommands+0x71c>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8001a36:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	3306      	adds	r3, #6
 8001a3e:	1d3a      	adds	r2, r7, #4
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	f107 030e 	add.w	r3, r7, #14
 8001a4c:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValB_m27[i + tOffset] = tData;
 8001a4e:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8001a52:	f107 0212 	add.w	r2, r7, #18
 8001a56:	8812      	ldrh	r2, [r2, #0]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f107 020e 	add.w	r2, r7, #14
 8001a5e:	8811      	ldrh	r1, [r2, #0]
 8001a60:	4a3d      	ldr	r2, [pc, #244]	; (8001b58 <runCommands+0x7fc>)
 8001a62:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4413      	add	r3, r2
 8001a6a:	460a      	mov	r2, r1
 8001a6c:	805a      	strh	r2, [r3, #2]
				for (uint16_t i = 0; i < tCount; i++)
 8001a6e:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8001a72:	3301      	adds	r3, #1
 8001a74:	f8a7 3228 	strh.w	r3, [r7, #552]	; 0x228
 8001a78:	f107 0310 	add.w	r3, r7, #16
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d3d7      	bcc.n	8001a36 <runCommands+0x6da>
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 8001a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8a:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001a8e:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8001a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a94:	2201      	movs	r2, #1
 8001a96:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 8001a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	f107 0212 	add.w	r2, r7, #18
 8001aa2:	8812      	ldrh	r2, [r2, #0]
 8001aa4:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8001aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aaa:	3304      	adds	r3, #4
 8001aac:	f107 0210 	add.w	r2, r7, #16
 8001ab0:	8812      	ldrh	r2, [r2, #0]
 8001ab2:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 8001ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab8:	2200      	movs	r2, #0
 8001aba:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8001abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f009 f848 	bl	800ab58 <CDC_Transmit_FS>
				return;
 8001ac8:	e04d      	b.n	8001b66 <runCommands+0x80a>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
		}
		UserTxBufferFS[0] = cmd;
 8001aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ace:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001ad2:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8001ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad8:	2201      	movs	r2, #1
 8001ada:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8001adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae0:	2102      	movs	r1, #2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f009 f838 	bl	800ab58 <CDC_Transmit_FS>
		return;
 8001ae8:	e03d      	b.n	8001b66 <runCommands+0x80a>
		//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0B)	// TODO: Отправка CRC 1-4 таблицы [0x0B][1-4][CRC(1-4)]	answer:
 8001aea:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001aee:	2b0b      	cmp	r3, #11
 8001af0:	d036      	beq.n	8001b60 <runCommands+0x804>
	{
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0C)	// TODO: Прием длины калибровочной таблицы [0x0C][Длина][???]
 8001af2:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001af6:	2b0c      	cmp	r3, #12
 8001af8:	d034      	beq.n	8001b64 <runCommands+0x808>
	{
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0D)	// TODO Запись во флеш калибровочной таблицы [0x0D] data: 1B (0x00 - успешно; 0x01 - ошибка при записи)	answer: 0x0D + 1B status
 8001afa:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001afe:	2b0d      	cmp	r3, #13
 8001b00:	d131      	bne.n	8001b66 <runCommands+0x80a>
	{
		if (*Len >= 2 && (Buf[1] == 0x02))
 8001b02:	463b      	mov	r3, r7
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d915      	bls.n	8001b38 <runCommands+0x7dc>
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	3301      	adds	r3, #1
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d10f      	bne.n	8001b38 <runCommands+0x7dc>
		{
			//TODO: Функция записи фо флеш.
//			writeTable();

				UserTxBufferFS[0] = cmd;
 8001b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b1c:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001b20:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 8001b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b26:	2200      	movs	r2, #0
 8001b28:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 8001b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b2e:	2102      	movs	r1, #2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f009 f811 	bl	800ab58 <CDC_Transmit_FS>
				return;
 8001b36:	e016      	b.n	8001b66 <runCommands+0x80a>
		}
 		
		//--------------------------------------------------------------------------
		UserTxBufferFS[0] = cmd;
 8001b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b3c:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001b40:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8001b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b46:	2201      	movs	r2, #1
 8001b48:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8001b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b4e:	2102      	movs	r1, #2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f009 f801 	bl	800ab58 <CDC_Transmit_FS>
		return;
 8001b56:	e006      	b.n	8001b66 <runCommands+0x80a>
 8001b58:	200004b4 	.word	0x200004b4
		return;
 8001b5c:	bf00      	nop
 8001b5e:	e002      	b.n	8001b66 <runCommands+0x80a>
		return;
 8001b60:	bf00      	nop
 8001b62:	e000      	b.n	8001b66 <runCommands+0x80a>
		return;
 8001b64:	bf00      	nop
		//--------------------------------------------------------------------------
	}
//-------------------------------------------------------------------------
	
}
 8001b66:	f507 770d 	add.w	r7, r7, #564	; 0x234
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd90      	pop	{r4, r7, pc}
 8001b6e:	bf00      	nop

08001b70 <writeTable.8678>:
	//--------------------------------------------------------------------------
	uint32_t l_Address;
	uint32_t l_Error;
	uint32_t l_Index;
	//--------------------------------------------------------------------------
	void writeTable() {
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4664      	mov	r4, ip
 8001b78:	f8c7 c004 	str.w	ip, [r7, #4]
			changeTableFlag = false;
 8001b7c:	4b33      	ldr	r3, [pc, #204]	; (8001c4c <writeTable.8678+0xdc>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
			l_Address = FLASH_TABLE_START_ADDR;
 8001b82:	4b33      	ldr	r3, [pc, #204]	; (8001c50 <writeTable.8678+0xe0>)
 8001b84:	60a3      	str	r3, [r4, #8]
			l_Error = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	6063      	str	r3, [r4, #4]
			l_Index = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	6023      	str	r3, [r4, #0]
			//Читаем и сравниваем
			while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8001b8e:	e010      	b.n	8001bb2 <writeTable.8678+0x42>
				if (&DevNVRAM.data32[l_Index] != *(volatile uint32_t*) l_Address) {
 8001b90:	6823      	ldr	r3, [r4, #0]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4a2f      	ldr	r2, [pc, #188]	; (8001c54 <writeTable.8678+0xe4>)
 8001b96:	4413      	add	r3, r2
 8001b98:	68a2      	ldr	r2, [r4, #8]
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d002      	beq.n	8001ba6 <writeTable.8678+0x36>
					l_Error++;
 8001ba0:	6863      	ldr	r3, [r4, #4]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	6063      	str	r3, [r4, #4]
				}
				l_Index = l_Index + 1;
 8001ba6:	6823      	ldr	r3, [r4, #0]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	6023      	str	r3, [r4, #0]
				l_Address = l_Address + 4;
 8001bac:	68a3      	ldr	r3, [r4, #8]
 8001bae:	3304      	adds	r3, #4
 8001bb0:	60a3      	str	r3, [r4, #8]
			while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8001bb2:	68a3      	ldr	r3, [r4, #8]
 8001bb4:	4a28      	ldr	r2, [pc, #160]	; (8001c58 <writeTable.8678+0xe8>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d9ea      	bls.n	8001b90 <writeTable.8678+0x20>
			}
			// конфигурация изменилась сохраняем
			printf("Ошибка чтения таблицы :%i", l_Error);
 8001bba:	6863      	ldr	r3, [r4, #4]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4827      	ldr	r0, [pc, #156]	; (8001c5c <writeTable.8678+0xec>)
 8001bc0:	f009 fc02 	bl	800b3c8 <iprintf>
			if (l_Error > 0) {
 8001bc4:	6863      	ldr	r3, [r4, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d038      	beq.n	8001c3c <writeTable.8678+0xcc>
				// конфигурация изменилась сохраняем
				// Готовим к записи в память
				HAL_FLASH_Unlock();
 8001bca:	f001 fec7 	bl	800395c <HAL_FLASH_Unlock>
				// Очищаем страницу памяти
				HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 8001bce:	1d23      	adds	r3, r4, #4
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4823      	ldr	r0, [pc, #140]	; (8001c60 <writeTable.8678+0xf0>)
 8001bd4:	f001 ffaa 	bl	8003b2c <HAL_FLASHEx_Erase>
				//Пишем данные в память
				l_Address = FLASH_TABLE_START_ADDR;
 8001bd8:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <writeTable.8678+0xe0>)
 8001bda:	60a3      	str	r3, [r4, #8]
				l_Error = 0x00;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	6063      	str	r3, [r4, #4]
				l_Index = 0x00;
 8001be0:	2300      	movs	r3, #0
 8001be2:	6023      	str	r3, [r4, #0]
				DevNVRAM.sector.NWrite = DevNVRAM.sector.NWrite + 1;
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <writeTable.8678+0xe4>)
 8001be6:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8001bea:	3301      	adds	r3, #1
 8001bec:	4a19      	ldr	r2, [pc, #100]	; (8001c54 <writeTable.8678+0xe4>)
 8001bee:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
				DevNVRAM.sector.CheckSum = 0; //HAL_CRC_Calculate(&hcrc, &DevNVRAM.calibration_table, (sizeof(DevNVRAM.calibration_table)/4));
 8001bf2:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <writeTable.8678+0xe4>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
				while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8001bfa:	e019      	b.n	8001c30 <writeTable.8678+0xc0>
					if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
							&DevNVRAM.data32[l_Index]) != HAL_OK) {
 8001bfc:	6823      	ldr	r3, [r4, #0]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4a14      	ldr	r2, [pc, #80]	; (8001c54 <writeTable.8678+0xe4>)
 8001c02:	4413      	add	r3, r2
					if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 8001c04:	461a      	mov	r2, r3
 8001c06:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001c0a:	68a1      	ldr	r1, [r4, #8]
 8001c0c:	2002      	movs	r0, #2
 8001c0e:	f001 fe35 	bl	800387c <HAL_FLASH_Program>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <writeTable.8678+0xae>
						l_Error++;
 8001c18:	6863      	ldr	r3, [r4, #4]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	6063      	str	r3, [r4, #4]
					}
					l_Address = l_Address + 4;
 8001c1e:	68a3      	ldr	r3, [r4, #8]
 8001c20:	3304      	adds	r3, #4
 8001c22:	60a3      	str	r3, [r4, #8]
					l_Index = l_Index + 1;
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	3301      	adds	r3, #1
 8001c28:	6023      	str	r3, [r4, #0]
					HAL_Delay(10);
 8001c2a:	200a      	movs	r0, #10
 8001c2c:	f001 f816 	bl	8002c5c <HAL_Delay>
				while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8001c30:	68a3      	ldr	r3, [r4, #8]
 8001c32:	4a09      	ldr	r2, [pc, #36]	; (8001c58 <writeTable.8678+0xe8>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d9e1      	bls.n	8001bfc <writeTable.8678+0x8c>
				}
				HAL_FLASH_Lock();
 8001c38:	f001 feb6 	bl	80039a8 <HAL_FLASH_Lock>
			}
			HAL_Delay(100);
 8001c3c:	2064      	movs	r0, #100	; 0x64
 8001c3e:	f001 f80d 	bl	8002c5c <HAL_Delay>
		}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd90      	pop	{r4, r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000273 	.word	0x20000273
 8001c50:	0801fc00 	.word	0x0801fc00
 8001c54:	200004b4 	.word	0x200004b4
 8001c58:	0801ffff 	.word	0x0801ffff
 8001c5c:	0800c7fc 	.word	0x0800c7fc
 8001c60:	20000274 	.word	0x20000274

08001c64 <main>:
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	; 0x28
 8001c68:	af02      	add	r7, sp, #8
int main(void)
 8001c6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c6e:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;	  // постраничная очистка, FLASH_TYPEERASE_MASSERASE - очистка всего флеша
 8001c70:	4ba9      	ldr	r3, [pc, #676]	; (8001f18 <main+0x2b4>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = FLASH_TABLE_START_ADDR; // адрес 127-ой страницы
 8001c76:	4ba8      	ldr	r3, [pc, #672]	; (8001f18 <main+0x2b4>)
 8001c78:	4aa8      	ldr	r2, [pc, #672]	; (8001f1c <main+0x2b8>)
 8001c7a:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages = 0x01;						  // кол-во страниц для стирания
 8001c7c:	4ba6      	ldr	r3, [pc, #664]	; (8001f18 <main+0x2b4>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	60da      	str	r2, [r3, #12]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001c82:	f000 ff89 	bl	8002b98 <HAL_Init>

	/* USER CODE BEGIN Init */
//--------------------------------------------------------------------------
#if DWT_INIT
	DWT_Init();
 8001c86:	f7ff f91d 	bl	8000ec4 <DWT_Init>
	//--------------------------------------------------------------------------

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001c8a:	f000 faab 	bl	80021e4 <SystemClock_Config>
//-------------------------------------------------------------------------

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001c8e:	f000 fc55 	bl	800253c <MX_GPIO_Init>
	MX_SPI1_Init();
 8001c92:	f000 fb57 	bl	8002344 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 8001c96:	f008 fe9d 	bl	800a9d4 <MX_USB_DEVICE_Init>
	MX_ADC1_Init();
 8001c9a:	f000 fb01 	bl	80022a0 <MX_ADC1_Init>
	MX_TIM3_Init();
 8001c9e:	f000 fb89 	bl	80023b4 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001ca2:	f000 fbe9 	bl	8002478 <MX_TIM4_Init>
	MX_CRC_Init();
 8001ca6:	f000 fb39 	bl	800231c <MX_CRC_Init>
	/* USER CODE BEGIN 2 */
	//**************************************************************************
#if TEST_UID
	sprintf(buffer, "UID %x-%x-%lx-%lx\n", *idBase0, *idBase1, *idBase2, *idBase3);
 8001caa:	4b9d      	ldr	r3, [pc, #628]	; (8001f20 <main+0x2bc>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4b9c      	ldr	r3, [pc, #624]	; (8001f24 <main+0x2c0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	4b9b      	ldr	r3, [pc, #620]	; (8001f28 <main+0x2c4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a9a      	ldr	r2, [pc, #616]	; (8001f2c <main+0x2c8>)
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	6812      	ldr	r2, [r2, #0]
 8001cc6:	9201      	str	r2, [sp, #4]
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	4603      	mov	r3, r0
 8001ccc:	460a      	mov	r2, r1
 8001cce:	4998      	ldr	r1, [pc, #608]	; (8001f30 <main+0x2cc>)
 8001cd0:	4898      	ldr	r0, [pc, #608]	; (8001f34 <main+0x2d0>)
 8001cd2:	f009 fb91 	bl	800b3f8 <siprintf>
	printf((uint8_t *)buffer);
 8001cd6:	4897      	ldr	r0, [pc, #604]	; (8001f34 <main+0x2d0>)
 8001cd8:	f009 fb76 	bl	800b3c8 <iprintf>
#endif /* TEST_UID */

	//**************************************************************************
#if TEST_TIM_CAPTURE
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4896      	ldr	r0, [pc, #600]	; (8001f38 <main+0x2d4>)
 8001ce0:	f004 fd46 	bl	8006770 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8001ce4:	2104      	movs	r1, #4
 8001ce6:	4894      	ldr	r0, [pc, #592]	; (8001f38 <main+0x2d4>)
 8001ce8:	f004 fd42 	bl	8006770 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001cec:	2100      	movs	r1, #0
 8001cee:	4893      	ldr	r0, [pc, #588]	; (8001f3c <main+0x2d8>)
 8001cf0:	f004 fd3e 	bl	8006770 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8001cf4:	2104      	movs	r1, #4
 8001cf6:	4891      	ldr	r0, [pc, #580]	; (8001f3c <main+0x2d8>)
 8001cf8:	f004 fd3a 	bl	8006770 <HAL_TIM_IC_Start_IT>
#endif /* TEST_TIM_CAPTURE */
//--------------------------------------------------------------------------
#if TEST_DAC
	SetAllDAC();
 8001cfc:	f7ff f96a 	bl	8000fd4 <SetAllDAC>
#endif /* TEST_DAC */
	   //**************************************************************************
#if TEST_ADC
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001d00:	488f      	ldr	r0, [pc, #572]	; (8001f40 <main+0x2dc>)
 8001d02:	f001 fbb9 	bl	8003478 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_IT(&hadc1);
 8001d06:	488e      	ldr	r0, [pc, #568]	; (8001f40 <main+0x2dc>)
 8001d08:	f001 f8a4 	bl	8002e54 <HAL_ADC_Start_IT>

#endif /* TEST_ADC */
//**************************************************************************

	// Чтение DevNVRAM
	l_Address = FLASH_TABLE_START_ADDR;
 8001d0c:	4b83      	ldr	r3, [pc, #524]	; (8001f1c <main+0x2b8>)
 8001d0e:	60bb      	str	r3, [r7, #8]
	l_Error = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	607b      	str	r3, [r7, #4]
	l_Index = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	603b      	str	r3, [r7, #0]
	while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001d18:	e00b      	b.n	8001d32 <main+0xce>
	{
		DevNVRAM.data32[l_Index] = *(__IO uint32_t *)l_Address;
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	4988      	ldr	r1, [pc, #544]	; (8001f44 <main+0x2e0>)
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		l_Index = l_Index + 1;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	603b      	str	r3, [r7, #0]
		l_Address = l_Address + 4;
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	3304      	adds	r3, #4
 8001d30:	60bb      	str	r3, [r7, #8]
	while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	4a84      	ldr	r2, [pc, #528]	; (8001f48 <main+0x2e4>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d9ef      	bls.n	8001d1a <main+0xb6>
	}

//--------------------------------------------------------------------------
	// если после чтения майджик кей не найден, то это первый запуск

	if (DevNVRAM.calibration_table.MagicNum != MAGIC_KEY_DEFINE)
 8001d3a:	4b82      	ldr	r3, [pc, #520]	; (8001f44 <main+0x2e0>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	4a83      	ldr	r2, [pc, #524]	; (8001f4c <main+0x2e8>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	f000 80b0 	beq.w	8001ea6 <main+0x242>
	{
		// Подготовка
		// Заносим типовые значения
		memset(DevNVRAM.data32, 0, sizeof(DevNVRAM.data32));
 8001d46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	487d      	ldr	r0, [pc, #500]	; (8001f44 <main+0x2e0>)
 8001d4e:	f009 fb33 	bl	800b3b8 <memset>

		// TODO: !!!!!Добавить математику расчета калибровочной таблицы!!!!!!!

		for (uint8_t i = 0; i < MAX_VAL_M12; i++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	77fb      	strb	r3, [r7, #31]
 8001d56:	e00b      	b.n	8001d70 <main+0x10c>
		{
			DevNVRAM.calibration_table.dacValA_m12[i] = i;
 8001d58:	7ffb      	ldrb	r3, [r7, #31]
 8001d5a:	7ffa      	ldrb	r2, [r7, #31]
 8001d5c:	b291      	uxth	r1, r2
 8001d5e:	4a79      	ldr	r2, [pc, #484]	; (8001f44 <main+0x2e0>)
 8001d60:	3304      	adds	r3, #4
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4413      	add	r3, r2
 8001d66:	460a      	mov	r2, r1
 8001d68:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M12; i++)
 8001d6a:	7ffb      	ldrb	r3, [r7, #31]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	77fb      	strb	r3, [r7, #31]
 8001d70:	7ffb      	ldrb	r3, [r7, #31]
 8001d72:	2b57      	cmp	r3, #87	; 0x57
 8001d74:	d9f0      	bls.n	8001d58 <main+0xf4>
		}
		for (uint8_t i = 0; i < MAX_VAL_M12; i++)
 8001d76:	2300      	movs	r3, #0
 8001d78:	77bb      	strb	r3, [r7, #30]
 8001d7a:	e00b      	b.n	8001d94 <main+0x130>
		{
			DevNVRAM.calibration_table.dacValB_m12[i] = i;
 8001d7c:	7fbb      	ldrb	r3, [r7, #30]
 8001d7e:	7fba      	ldrb	r2, [r7, #30]
 8001d80:	b291      	uxth	r1, r2
 8001d82:	4a70      	ldr	r2, [pc, #448]	; (8001f44 <main+0x2e0>)
 8001d84:	335c      	adds	r3, #92	; 0x5c
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	460a      	mov	r2, r1
 8001d8c:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M12; i++)
 8001d8e:	7fbb      	ldrb	r3, [r7, #30]
 8001d90:	3301      	adds	r3, #1
 8001d92:	77bb      	strb	r3, [r7, #30]
 8001d94:	7fbb      	ldrb	r3, [r7, #30]
 8001d96:	2b57      	cmp	r3, #87	; 0x57
 8001d98:	d9f0      	bls.n	8001d7c <main+0x118>
		}
		for (uint8_t i = 0; i < MAX_VAL_M27; i++)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	777b      	strb	r3, [r7, #29]
 8001d9e:	e00b      	b.n	8001db8 <main+0x154>
		{
			DevNVRAM.calibration_table.dacValA_m27[i] = i;
 8001da0:	7f7b      	ldrb	r3, [r7, #29]
 8001da2:	7f7a      	ldrb	r2, [r7, #29]
 8001da4:	b291      	uxth	r1, r2
 8001da6:	4a67      	ldr	r2, [pc, #412]	; (8001f44 <main+0x2e0>)
 8001da8:	33b4      	adds	r3, #180	; 0xb4
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	460a      	mov	r2, r1
 8001db0:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M27; i++)
 8001db2:	7f7b      	ldrb	r3, [r7, #29]
 8001db4:	3301      	adds	r3, #1
 8001db6:	777b      	strb	r3, [r7, #29]
 8001db8:	7f7b      	ldrb	r3, [r7, #29]
 8001dba:	2ba2      	cmp	r3, #162	; 0xa2
 8001dbc:	d9f0      	bls.n	8001da0 <main+0x13c>
		}
		for (uint8_t i = 0; i < MAX_VAL_M27; i++)
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	773b      	strb	r3, [r7, #28]
 8001dc2:	e00b      	b.n	8001ddc <main+0x178>
		{
			DevNVRAM.calibration_table.dacValB_m12[i] = i;
 8001dc4:	7f3b      	ldrb	r3, [r7, #28]
 8001dc6:	7f3a      	ldrb	r2, [r7, #28]
 8001dc8:	b291      	uxth	r1, r2
 8001dca:	4a5e      	ldr	r2, [pc, #376]	; (8001f44 <main+0x2e0>)
 8001dcc:	335c      	adds	r3, #92	; 0x5c
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	4413      	add	r3, r2
 8001dd2:	460a      	mov	r2, r1
 8001dd4:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M27; i++)
 8001dd6:	7f3b      	ldrb	r3, [r7, #28]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	773b      	strb	r3, [r7, #28]
 8001ddc:	7f3b      	ldrb	r3, [r7, #28]
 8001dde:	2ba2      	cmp	r3, #162	; 0xa2
 8001de0:	d9f0      	bls.n	8001dc4 <main+0x160>
		}
		DevNVRAM.calibration_table.Hardwire = 0x06;
 8001de2:	4b58      	ldr	r3, [pc, #352]	; (8001f44 <main+0x2e0>)
 8001de4:	2206      	movs	r2, #6
 8001de6:	801a      	strh	r2, [r3, #0]
		DevNVRAM.calibration_table.Firmware = 0x05;
 8001de8:	4b56      	ldr	r3, [pc, #344]	; (8001f44 <main+0x2e0>)
 8001dea:	2205      	movs	r2, #5
 8001dec:	805a      	strh	r2, [r3, #2]
		DevNVRAM.calibration_table.SN = 0x1121001; //11 недел	я + год + порядковый номер изготовления
 8001dee:	4b55      	ldr	r3, [pc, #340]	; (8001f44 <main+0x2e0>)
 8001df0:	4a57      	ldr	r2, [pc, #348]	; (8001f50 <main+0x2ec>)
 8001df2:	605a      	str	r2, [r3, #4]
		DevNVRAM.calibration_table.MagicNum = MAGIC_KEY_DEFINE;
 8001df4:	4b53      	ldr	r3, [pc, #332]	; (8001f44 <main+0x2e0>)
 8001df6:	4a55      	ldr	r2, [pc, #340]	; (8001f4c <main+0x2e8>)
 8001df8:	609a      	str	r2, [r3, #8]

		DevNVRAM.sector.NWrite = 0;
 8001dfa:	4b52      	ldr	r3, [pc, #328]	; (8001f44 <main+0x2e0>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

		DevNVRAM.sector.CheckSum = 0; //HAL_CRC_Calculate(&hcrc, &DevNVRAM.calibration_table, (sizeof(DevNVRAM.calibration_table)/4));//DONE: нужно отправлять длину кратную 32b! -  по какой то причине в этом проекте не работает CRC!!!
 8001e02:	4b50      	ldr	r3, [pc, #320]	; (8001f44 <main+0x2e0>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc

		//--------------------------------------------------------------------------
		//если после чтения майджик кей не найден, то это первый запуск записываем дефолтную таблицу
		l_Address = FLASH_TABLE_START_ADDR;
 8001e0a:	4b44      	ldr	r3, [pc, #272]	; (8001f1c <main+0x2b8>)
 8001e0c:	60bb      	str	r3, [r7, #8]
		l_Error = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]
		l_Index = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	603b      	str	r3, [r7, #0]

		while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001e16:	e010      	b.n	8001e3a <main+0x1d6>
		{
			if (DevNVRAM.data32[l_Index] != *(__IO uint32_t *)l_Address)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	4a4a      	ldr	r2, [pc, #296]	; (8001f44 <main+0x2e0>)
 8001e1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d002      	beq.n	8001e2e <main+0x1ca>
			{
				l_Error++;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	607b      	str	r3, [r7, #4]
			}
			l_Index = l_Index + 1;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	3301      	adds	r3, #1
 8001e32:	603b      	str	r3, [r7, #0]
			l_Address = l_Address + 4;
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	3304      	adds	r3, #4
 8001e38:	60bb      	str	r3, [r7, #8]
		while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	4a42      	ldr	r2, [pc, #264]	; (8001f48 <main+0x2e4>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d9ea      	bls.n	8001e18 <main+0x1b4>
		}

		if (l_Error > 0)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d02e      	beq.n	8001ea6 <main+0x242>
		{ // конфигурация изменилась сохраняем
			// Готовим к записи в память
			HAL_FLASH_Unlock();
 8001e48:	f001 fd88 	bl	800395c <HAL_FLASH_Unlock>
			// Очищаем страницу памяти
			HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 8001e4c:	463b      	mov	r3, r7
 8001e4e:	3304      	adds	r3, #4
 8001e50:	4619      	mov	r1, r3
 8001e52:	4831      	ldr	r0, [pc, #196]	; (8001f18 <main+0x2b4>)
 8001e54:	f001 fe6a 	bl	8003b2c <HAL_FLASHEx_Erase>
			//Пишем данные в память
			l_Address = FLASH_TABLE_START_ADDR;
 8001e58:	4b30      	ldr	r3, [pc, #192]	; (8001f1c <main+0x2b8>)
 8001e5a:	60bb      	str	r3, [r7, #8]
			l_Error = 0x00;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	607b      	str	r3, [r7, #4]
			l_Index = 0x00;
 8001e60:	2300      	movs	r3, #0
 8001e62:	603b      	str	r3, [r7, #0]

			while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001e64:	e019      	b.n	8001e9a <main+0x236>
			{
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
									  DevNVRAM.data32[l_Index]) != HAL_OK)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	4a36      	ldr	r2, [pc, #216]	; (8001f44 <main+0x2e0>)
 8001e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 8001e6e:	461a      	mov	r2, r3
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	2002      	movs	r0, #2
 8001e78:	f001 fd00 	bl	800387c <HAL_FLASH_Program>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d002      	beq.n	8001e88 <main+0x224>
				{
					l_Error++;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3301      	adds	r3, #1
 8001e86:	607b      	str	r3, [r7, #4]
				}

				l_Address = l_Address + 4;
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	60bb      	str	r3, [r7, #8]
				l_Index = l_Index + 1;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	3301      	adds	r3, #1
 8001e92:	603b      	str	r3, [r7, #0]
				HAL_Delay(10);
 8001e94:	200a      	movs	r0, #10
 8001e96:	f000 fee1 	bl	8002c5c <HAL_Delay>
			while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	4a2a      	ldr	r2, [pc, #168]	; (8001f48 <main+0x2e4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d9e1      	bls.n	8001e66 <main+0x202>
			}
			HAL_FLASH_Lock();
 8001ea2:	f001 fd81 	bl	80039a8 <HAL_FLASH_Lock>

	// TODO: !!!!!Добавить математику расчета калибровочной таблицы!!!!!!!

	// Циклически проверяем соотвествует ли информация в памяти массиву настроек?

	l_Address = FLASH_TABLE_START_ADDR;
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <main+0x2b8>)
 8001ea8:	60bb      	str	r3, [r7, #8]
	l_Error = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
	l_Index = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	603b      	str	r3, [r7, #0]
	//Читаем и сравниваем
	while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001eb2:	e010      	b.n	8001ed6 <main+0x272>
	{
		if (DevNVRAM.data32[l_Index] != *(__IO uint32_t *)l_Address)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4a23      	ldr	r2, [pc, #140]	; (8001f44 <main+0x2e0>)
 8001eb8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d002      	beq.n	8001eca <main+0x266>
		{
			l_Error++;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	607b      	str	r3, [r7, #4]
		}
		l_Index = l_Index + 1;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	603b      	str	r3, [r7, #0]
		l_Address = l_Address + 4;
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	60bb      	str	r3, [r7, #8]
	while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	4a1b      	ldr	r2, [pc, #108]	; (8001f48 <main+0x2e4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d9ea      	bls.n	8001eb4 <main+0x250>
	}

	if (l_Error > 0)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d057      	beq.n	8001f94 <main+0x330>
	{ // конфигурация изменилась сохраняем
		// Готовим к записи в память
		HAL_FLASH_Unlock();
 8001ee4:	f001 fd3a 	bl	800395c <HAL_FLASH_Unlock>
		// Очищаем страницу памяти
		HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 8001ee8:	463b      	mov	r3, r7
 8001eea:	3304      	adds	r3, #4
 8001eec:	4619      	mov	r1, r3
 8001eee:	480a      	ldr	r0, [pc, #40]	; (8001f18 <main+0x2b4>)
 8001ef0:	f001 fe1c 	bl	8003b2c <HAL_FLASHEx_Erase>
		//Пишем данные в память
		l_Address = FLASH_TABLE_START_ADDR;
 8001ef4:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <main+0x2b8>)
 8001ef6:	60bb      	str	r3, [r7, #8]
		l_Error = 0x00;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	607b      	str	r3, [r7, #4]
		l_Index = 0x00;
 8001efc:	2300      	movs	r3, #0
 8001efe:	603b      	str	r3, [r7, #0]

		DevNVRAM.sector.NWrite = DevNVRAM.sector.NWrite + 1;
 8001f00:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <main+0x2e0>)
 8001f02:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8001f06:	3301      	adds	r3, #1
 8001f08:	4a0e      	ldr	r2, [pc, #56]	; (8001f44 <main+0x2e0>)
 8001f0a:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
		DevNVRAM.sector.CheckSum = 0; //HAL_CRC_Calculate(&hcrc, &DevNVRAM.calibration_table, (sizeof(DevNVRAM.calibration_table)/4));
 8001f0e:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <main+0x2e0>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc

		while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001f16:	e037      	b.n	8001f88 <main+0x324>
 8001f18:	20000274 	.word	0x20000274
 8001f1c:	0801fc00 	.word	0x0801fc00
 8001f20:	20000000 	.word	0x20000000
 8001f24:	20000004 	.word	0x20000004
 8001f28:	20000008 	.word	0x20000008
 8001f2c:	2000000c 	.word	0x2000000c
 8001f30:	0800c82c 	.word	0x0800c82c
 8001f34:	2000020c 	.word	0x2000020c
 8001f38:	20000904 	.word	0x20000904
 8001f3c:	200008b4 	.word	0x200008b4
 8001f40:	2000094c 	.word	0x2000094c
 8001f44:	200004b4 	.word	0x200004b4
 8001f48:	0801ffff 	.word	0x0801ffff
 8001f4c:	48151623 	.word	0x48151623
 8001f50:	01121001 	.word	0x01121001
		{
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
								  DevNVRAM.data32[l_Index]) != HAL_OK)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	4a8f      	ldr	r2, [pc, #572]	; (8002194 <main+0x530>)
 8001f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	f04f 0300 	mov.w	r3, #0
 8001f62:	68b9      	ldr	r1, [r7, #8]
 8001f64:	2002      	movs	r0, #2
 8001f66:	f001 fc89 	bl	800387c <HAL_FLASH_Program>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <main+0x312>
			{
				l_Error++;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3301      	adds	r3, #1
 8001f74:	607b      	str	r3, [r7, #4]
			}

			l_Address = l_Address + 4;
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	60bb      	str	r3, [r7, #8]
			l_Index = l_Index + 1;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	603b      	str	r3, [r7, #0]
			HAL_Delay(10);
 8001f82:	200a      	movs	r0, #10
 8001f84:	f000 fe6a 	bl	8002c5c <HAL_Delay>
		while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	4a83      	ldr	r2, [pc, #524]	; (8002198 <main+0x534>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d9e1      	bls.n	8001f54 <main+0x2f0>
		}
		HAL_FLASH_Lock();
 8001f90:	f001 fd0a 	bl	80039a8 <HAL_FLASH_Lock>
	}
	HAL_Delay(100);
 8001f94:	2064      	movs	r0, #100	; 0x64
 8001f96:	f000 fe61 	bl	8002c5c <HAL_Delay>

		//**************************************************************************
		// Циклически проверяем соотвествует ли информация в памяти массиву настроек?


	if(changeTableFlag){
 8001f9a:	4b80      	ldr	r3, [pc, #512]	; (800219c <main+0x538>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d005      	beq.n	8001fae <main+0x34a>
			writeTable(&DevNVRAM, &EraseInitStruct);
 8001fa2:	463b      	mov	r3, r7
 8001fa4:	469c      	mov	ip, r3
 8001fa6:	497e      	ldr	r1, [pc, #504]	; (80021a0 <main+0x53c>)
 8001fa8:	487a      	ldr	r0, [pc, #488]	; (8002194 <main+0x530>)
 8001faa:	f7ff fde1 	bl	8001b70 <writeTable.8678>
	}
//**************************************************************************

		uint32_t Crc_cal_a_m12 = getCRC_table_a_m12();
 8001fae:	f7fe ffbb 	bl	8000f28 <getCRC_table_a_m12>
 8001fb2:	61b8      	str	r0, [r7, #24]
//		uint32_t Crc_cal_b_m27 = getCRC_table_b_m27();

//**************************************************************************
#if TEST_READ_BTN

		uint32_t ms = HAL_GetTick();
 8001fb4:	f000 fe48 	bl	8002c48 <HAL_GetTick>
 8001fb8:	6178      	str	r0, [r7, #20]
		uint8_t key1_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12); // подставить свой пин //TODO: Проверить работу BACK key!
 8001fba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fbe:	4879      	ldr	r0, [pc, #484]	; (80021a4 <main+0x540>)
 8001fc0:	f001 ffe0 	bl	8003f84 <HAL_GPIO_ReadPin>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	74fb      	strb	r3, [r7, #19]

		if (key1_state == 0 && !short_state1 && (ms - time_key1) > 50)
 8001fc8:	7cfb      	ldrb	r3, [r7, #19]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d113      	bne.n	8001ff6 <main+0x392>
 8001fce:	4b76      	ldr	r3, [pc, #472]	; (80021a8 <main+0x544>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10f      	bne.n	8001ff6 <main+0x392>
 8001fd6:	4b75      	ldr	r3, [pc, #468]	; (80021ac <main+0x548>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b32      	cmp	r3, #50	; 0x32
 8001fe0:	d909      	bls.n	8001ff6 <main+0x392>
		{
			short_state1 = 1;
 8001fe2:	4b71      	ldr	r3, [pc, #452]	; (80021a8 <main+0x544>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	701a      	strb	r2, [r3, #0]
			long_state1 = 0;
 8001fe8:	4b71      	ldr	r3, [pc, #452]	; (80021b0 <main+0x54c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 8001fee:	4a6f      	ldr	r2, [pc, #444]	; (80021ac <main+0x548>)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	6013      	str	r3, [r2, #0]
 8001ff4:	e02e      	b.n	8002054 <main+0x3f0>
		}
		else if (key1_state == 0 && !long_state1 && (ms - time_key1) > KEY_LONG_DELAY)
 8001ff6:	7cfb      	ldrb	r3, [r7, #19]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d111      	bne.n	8002020 <main+0x3bc>
 8001ffc:	4b6c      	ldr	r3, [pc, #432]	; (80021b0 <main+0x54c>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10d      	bne.n	8002020 <main+0x3bc>
 8002004:	4b69      	ldr	r3, [pc, #420]	; (80021ac <main+0x548>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002010:	d906      	bls.n	8002020 <main+0x3bc>
		{
			long_state1 = 1;
 8002012:	4b67      	ldr	r3, [pc, #412]	; (80021b0 <main+0x54c>)
 8002014:	2201      	movs	r2, #1
 8002016:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn1_long_rd = 1;
 8002018:	4b66      	ldr	r3, [pc, #408]	; (80021b4 <main+0x550>)
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
 800201e:	e019      	b.n	8002054 <main+0x3f0>
		}
		else if (key1_state == 1 && short_state1 && (ms - time_key1) > 50)
 8002020:	7cfb      	ldrb	r3, [r7, #19]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d116      	bne.n	8002054 <main+0x3f0>
 8002026:	4b60      	ldr	r3, [pc, #384]	; (80021a8 <main+0x544>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d012      	beq.n	8002054 <main+0x3f0>
 800202e:	4b5f      	ldr	r3, [pc, #380]	; (80021ac <main+0x548>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b32      	cmp	r3, #50	; 0x32
 8002038:	d90c      	bls.n	8002054 <main+0x3f0>
		{
			short_state1 = 0;
 800203a:	4b5b      	ldr	r3, [pc, #364]	; (80021a8 <main+0x544>)
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 8002040:	4a5a      	ldr	r2, [pc, #360]	; (80021ac <main+0x548>)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	6013      	str	r3, [r2, #0]

			if (!long_state1)
 8002046:	4b5a      	ldr	r3, [pc, #360]	; (80021b0 <main+0x54c>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d102      	bne.n	8002054 <main+0x3f0>
			{
				// действие на короткое нажатие
				btn1_short_rd = 1;
 800204e:	4b5a      	ldr	r3, [pc, #360]	; (80021b8 <main+0x554>)
 8002050:	2201      	movs	r2, #1
 8002052:	701a      	strb	r2, [r3, #0]
			}
		}
		uint8_t key2_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); // подставить свой пин
 8002054:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002058:	4852      	ldr	r0, [pc, #328]	; (80021a4 <main+0x540>)
 800205a:	f001 ff93 	bl	8003f84 <HAL_GPIO_ReadPin>
 800205e:	4603      	mov	r3, r0
 8002060:	74bb      	strb	r3, [r7, #18]

		if (key2_state == 0 && !short_state2 && (ms - time_key2) > 50)
 8002062:	7cbb      	ldrb	r3, [r7, #18]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d113      	bne.n	8002090 <main+0x42c>
 8002068:	4b54      	ldr	r3, [pc, #336]	; (80021bc <main+0x558>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10f      	bne.n	8002090 <main+0x42c>
 8002070:	4b53      	ldr	r3, [pc, #332]	; (80021c0 <main+0x55c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b32      	cmp	r3, #50	; 0x32
 800207a:	d909      	bls.n	8002090 <main+0x42c>
		{
			short_state2 = 1;
 800207c:	4b4f      	ldr	r3, [pc, #316]	; (80021bc <main+0x558>)
 800207e:	2201      	movs	r2, #1
 8002080:	701a      	strb	r2, [r3, #0]
			long_state2 = 0;
 8002082:	4b50      	ldr	r3, [pc, #320]	; (80021c4 <main+0x560>)
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 8002088:	4a4d      	ldr	r2, [pc, #308]	; (80021c0 <main+0x55c>)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e02e      	b.n	80020ee <main+0x48a>
		}
		else if (key2_state == 0 && !long_state2 && (ms - time_key2) > KEY_LONG_DELAY)
 8002090:	7cbb      	ldrb	r3, [r7, #18]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d111      	bne.n	80020ba <main+0x456>
 8002096:	4b4b      	ldr	r3, [pc, #300]	; (80021c4 <main+0x560>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10d      	bne.n	80020ba <main+0x456>
 800209e:	4b48      	ldr	r3, [pc, #288]	; (80021c0 <main+0x55c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020aa:	d906      	bls.n	80020ba <main+0x456>
		{
			long_state2 = 1;
 80020ac:	4b45      	ldr	r3, [pc, #276]	; (80021c4 <main+0x560>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]

			// действие на длинное нажатие
			btn2_long_rd = 1;
 80020b2:	4b45      	ldr	r3, [pc, #276]	; (80021c8 <main+0x564>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	701a      	strb	r2, [r3, #0]
 80020b8:	e019      	b.n	80020ee <main+0x48a>
		}
		else if (key2_state == 1 && short_state2 && (ms - time_key2) > 50)
 80020ba:	7cbb      	ldrb	r3, [r7, #18]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d116      	bne.n	80020ee <main+0x48a>
 80020c0:	4b3e      	ldr	r3, [pc, #248]	; (80021bc <main+0x558>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d012      	beq.n	80020ee <main+0x48a>
 80020c8:	4b3d      	ldr	r3, [pc, #244]	; (80021c0 <main+0x55c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b32      	cmp	r3, #50	; 0x32
 80020d2:	d90c      	bls.n	80020ee <main+0x48a>
		{
			short_state2 = 0;
 80020d4:	4b39      	ldr	r3, [pc, #228]	; (80021bc <main+0x558>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 80020da:	4a39      	ldr	r2, [pc, #228]	; (80021c0 <main+0x55c>)
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	6013      	str	r3, [r2, #0]

			if (!long_state2)
 80020e0:	4b38      	ldr	r3, [pc, #224]	; (80021c4 <main+0x560>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d102      	bne.n	80020ee <main+0x48a>
			{
				// действие на короткое нажатие
				btn2_short_rd = 1;
 80020e8:	4b38      	ldr	r3, [pc, #224]	; (80021cc <main+0x568>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	701a      	strb	r2, [r3, #0]
			}
		}

		uint8_t key3_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // подставить свой пин
 80020ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020f2:	482c      	ldr	r0, [pc, #176]	; (80021a4 <main+0x540>)
 80020f4:	f001 ff46 	bl	8003f84 <HAL_GPIO_ReadPin>
 80020f8:	4603      	mov	r3, r0
 80020fa:	747b      	strb	r3, [r7, #17]
		if (key3_state == 0 && !short_state3 && (ms - time_key3) > 50)
 80020fc:	7c7b      	ldrb	r3, [r7, #17]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d113      	bne.n	800212a <main+0x4c6>
 8002102:	4b33      	ldr	r3, [pc, #204]	; (80021d0 <main+0x56c>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10f      	bne.n	800212a <main+0x4c6>
 800210a:	4b32      	ldr	r3, [pc, #200]	; (80021d4 <main+0x570>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b32      	cmp	r3, #50	; 0x32
 8002114:	d909      	bls.n	800212a <main+0x4c6>
		{
			short_state3 = 1;
 8002116:	4b2e      	ldr	r3, [pc, #184]	; (80021d0 <main+0x56c>)
 8002118:	2201      	movs	r2, #1
 800211a:	701a      	strb	r2, [r3, #0]
			long_state3 = 0;
 800211c:	4b2e      	ldr	r3, [pc, #184]	; (80021d8 <main+0x574>)
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 8002122:	4a2c      	ldr	r2, [pc, #176]	; (80021d4 <main+0x570>)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	6013      	str	r3, [r2, #0]
 8002128:	e032      	b.n	8002190 <main+0x52c>
		}
		else if (key3_state == 0 && !long_state3 && (ms - time_key3) > KEY_LONG_DELAY)
 800212a:	7c7b      	ldrb	r3, [r7, #17]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d111      	bne.n	8002154 <main+0x4f0>
 8002130:	4b29      	ldr	r3, [pc, #164]	; (80021d8 <main+0x574>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10d      	bne.n	8002154 <main+0x4f0>
 8002138:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <main+0x570>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002144:	d906      	bls.n	8002154 <main+0x4f0>
		{
			long_state3 = 1;
 8002146:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <main+0x574>)
 8002148:	2201      	movs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn3_long_rd = 1;
 800214c:	4b23      	ldr	r3, [pc, #140]	; (80021dc <main+0x578>)
 800214e:	2201      	movs	r2, #1
 8002150:	701a      	strb	r2, [r3, #0]
 8002152:	e01d      	b.n	8002190 <main+0x52c>
		}
		else if (key3_state == 1 && short_state3 && (ms - time_key3) > 50)
 8002154:	7c7b      	ldrb	r3, [r7, #17]
 8002156:	2b01      	cmp	r3, #1
 8002158:	f47f af1f 	bne.w	8001f9a <main+0x336>
 800215c:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <main+0x56c>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	f43f af1a 	beq.w	8001f9a <main+0x336>
 8002166:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <main+0x570>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b32      	cmp	r3, #50	; 0x32
 8002170:	f67f af13 	bls.w	8001f9a <main+0x336>
		{
			short_state3 = 0;
 8002174:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <main+0x56c>)
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 800217a:	4a16      	ldr	r2, [pc, #88]	; (80021d4 <main+0x570>)
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	6013      	str	r3, [r2, #0]

			if (!long_state3)
 8002180:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <main+0x574>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	f47f af08 	bne.w	8001f9a <main+0x336>
			{
				// действие на короткое нажатие
				btn3_short_rd = 1;
 800218a:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <main+0x57c>)
 800218c:	2201      	movs	r2, #1
 800218e:	701a      	strb	r2, [r3, #0]
	{
 8002190:	e703      	b.n	8001f9a <main+0x336>
 8002192:	bf00      	nop
 8002194:	200004b4 	.word	0x200004b4
 8002198:	0801ffff 	.word	0x0801ffff
 800219c:	20000273 	.word	0x20000273
 80021a0:	20000274 	.word	0x20000274
 80021a4:	40010c00 	.word	0x40010c00
 80021a8:	20000250 	.word	0x20000250
 80021ac:	20000254 	.word	0x20000254
 80021b0:	20000251 	.word	0x20000251
 80021b4:	20000258 	.word	0x20000258
 80021b8:	20000259 	.word	0x20000259
 80021bc:	2000025a 	.word	0x2000025a
 80021c0:	2000025c 	.word	0x2000025c
 80021c4:	2000025b 	.word	0x2000025b
 80021c8:	20000260 	.word	0x20000260
 80021cc:	20000261 	.word	0x20000261
 80021d0:	20000262 	.word	0x20000262
 80021d4:	20000264 	.word	0x20000264
 80021d8:	20000263 	.word	0x20000263
 80021dc:	20000268 	.word	0x20000268
 80021e0:	20000269 	.word	0x20000269

080021e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b094      	sub	sp, #80	; 0x50
 80021e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ee:	2228      	movs	r2, #40	; 0x28
 80021f0:	2100      	movs	r1, #0
 80021f2:	4618      	mov	r0, r3
 80021f4:	f009 f8e0 	bl	800b3b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002208:	1d3b      	adds	r3, r7, #4
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002214:	2301      	movs	r3, #1
 8002216:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800221e:	2300      	movs	r3, #0
 8002220:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002222:	2301      	movs	r3, #1
 8002224:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002226:	2302      	movs	r3, #2
 8002228:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800222a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800222e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002230:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002234:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800223a:	4618      	mov	r0, r3
 800223c:	f003 fa62 	bl	8005704 <HAL_RCC_OscConfig>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <SystemClock_Config+0x66>
	{
		Error_Handler();
 8002246:	f000 fa09 	bl	800265c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
  */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800224a:	230f      	movs	r3, #15
 800224c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800224e:	2302      	movs	r3, #2
 8002250:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800225a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800225c:	2300      	movs	r3, #0
 800225e:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	2102      	movs	r1, #2
 8002266:	4618      	mov	r0, r3
 8002268:	f003 fccc 	bl	8005c04 <HAL_RCC_ClockConfig>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <SystemClock_Config+0x92>
	{
		Error_Handler();
 8002272:	f000 f9f3 	bl	800265c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_USB;
 8002276:	2312      	movs	r3, #18
 8002278:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800227a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800227e:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002280:	2300      	movs	r3, #0
 8002282:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002284:	1d3b      	adds	r3, r7, #4
 8002286:	4618      	mov	r0, r3
 8002288:	f003 fe42 	bl	8005f10 <HAL_RCCEx_PeriphCLKConfig>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <SystemClock_Config+0xb2>
	{
		Error_Handler();
 8002292:	f000 f9e3 	bl	800265c <Error_Handler>
	}
}
 8002296:	bf00      	nop
 8002298:	3750      	adds	r7, #80	; 0x50
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
  */
	hadc1.Instance = ADC1;
 80022b0:	4b18      	ldr	r3, [pc, #96]	; (8002314 <MX_ADC1_Init+0x74>)
 80022b2:	4a19      	ldr	r2, [pc, #100]	; (8002318 <MX_ADC1_Init+0x78>)
 80022b4:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80022b6:	4b17      	ldr	r3, [pc, #92]	; (8002314 <MX_ADC1_Init+0x74>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80022bc:	4b15      	ldr	r3, [pc, #84]	; (8002314 <MX_ADC1_Init+0x74>)
 80022be:	2201      	movs	r2, #1
 80022c0:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022c2:	4b14      	ldr	r3, [pc, #80]	; (8002314 <MX_ADC1_Init+0x74>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <MX_ADC1_Init+0x74>)
 80022ca:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80022ce:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022d0:	4b10      	ldr	r3, [pc, #64]	; (8002314 <MX_ADC1_Init+0x74>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 80022d6:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <MX_ADC1_Init+0x74>)
 80022d8:	2201      	movs	r2, #1
 80022da:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022dc:	480d      	ldr	r0, [pc, #52]	; (8002314 <MX_ADC1_Init+0x74>)
 80022de:	f000 fce1 	bl	8002ca4 <HAL_ADC_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_ADC1_Init+0x4c>
	{
		Error_Handler();
 80022e8:	f000 f9b8 	bl	800265c <Error_Handler>
	}
	/** Configure Regular Channel
  */
	sConfig.Channel = ADC_CHANNEL_3;
 80022ec:	2303      	movs	r3, #3
 80022ee:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80022f0:	2301      	movs	r3, #1
 80022f2:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80022f4:	2302      	movs	r3, #2
 80022f6:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022f8:	1d3b      	adds	r3, r7, #4
 80022fa:	4619      	mov	r1, r3
 80022fc:	4805      	ldr	r0, [pc, #20]	; (8002314 <MX_ADC1_Init+0x74>)
 80022fe:	f000 ff37 	bl	8003170 <HAL_ADC_ConfigChannel>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_ADC1_Init+0x6c>
	{
		Error_Handler();
 8002308:	f000 f9a8 	bl	800265c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */
}
 800230c:	bf00      	nop
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	2000094c 	.word	0x2000094c
 8002318:	40012400 	.word	0x40012400

0800231c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <MX_CRC_Init+0x20>)
 8002322:	4a07      	ldr	r2, [pc, #28]	; (8002340 <MX_CRC_Init+0x24>)
 8002324:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002326:	4805      	ldr	r0, [pc, #20]	; (800233c <MX_CRC_Init+0x20>)
 8002328:	f001 fa59 	bl	80037de <HAL_CRC_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_CRC_Init+0x1a>
	{
		Error_Handler();
 8002332:	f000 f993 	bl	800265c <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	200008fc 	.word	0x200008fc
 8002340:	40023000 	.word	0x40023000

08002344 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002348:	4b18      	ldr	r3, [pc, #96]	; (80023ac <MX_SPI1_Init+0x68>)
 800234a:	4a19      	ldr	r2, [pc, #100]	; (80023b0 <MX_SPI1_Init+0x6c>)
 800234c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800234e:	4b17      	ldr	r3, [pc, #92]	; (80023ac <MX_SPI1_Init+0x68>)
 8002350:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002354:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002356:	4b15      	ldr	r3, [pc, #84]	; (80023ac <MX_SPI1_Init+0x68>)
 8002358:	2200      	movs	r2, #0
 800235a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800235c:	4b13      	ldr	r3, [pc, #76]	; (80023ac <MX_SPI1_Init+0x68>)
 800235e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002362:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002364:	4b11      	ldr	r3, [pc, #68]	; (80023ac <MX_SPI1_Init+0x68>)
 8002366:	2200      	movs	r2, #0
 8002368:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800236a:	4b10      	ldr	r3, [pc, #64]	; (80023ac <MX_SPI1_Init+0x68>)
 800236c:	2200      	movs	r2, #0
 800236e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002370:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <MX_SPI1_Init+0x68>)
 8002372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002376:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002378:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <MX_SPI1_Init+0x68>)
 800237a:	2208      	movs	r2, #8
 800237c:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800237e:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <MX_SPI1_Init+0x68>)
 8002380:	2200      	movs	r2, #0
 8002382:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002384:	4b09      	ldr	r3, [pc, #36]	; (80023ac <MX_SPI1_Init+0x68>)
 8002386:	2200      	movs	r2, #0
 8002388:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800238a:	4b08      	ldr	r3, [pc, #32]	; (80023ac <MX_SPI1_Init+0x68>)
 800238c:	2200      	movs	r2, #0
 800238e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <MX_SPI1_Init+0x68>)
 8002392:	220a      	movs	r2, #10
 8002394:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002396:	4805      	ldr	r0, [pc, #20]	; (80023ac <MX_SPI1_Init+0x68>)
 8002398:	f003 ff34 	bl	8006204 <HAL_SPI_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_SPI1_Init+0x62>
	{
		Error_Handler();
 80023a2:	f000 f95b 	bl	800265c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	2000097c 	.word	0x2000097c
 80023b0:	40013000 	.word	0x40013000

080023b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023ba:	f107 0310 	add.w	r3, r7, #16
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 80023c4:	463b      	mov	r3, r7
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]
 80023cc:	609a      	str	r2, [r3, #8]
 80023ce:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80023d0:	4b27      	ldr	r3, [pc, #156]	; (8002470 <MX_TIM3_Init+0xbc>)
 80023d2:	4a28      	ldr	r2, [pc, #160]	; (8002474 <MX_TIM3_Init+0xc0>)
 80023d4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72 - 1;
 80023d6:	4b26      	ldr	r3, [pc, #152]	; (8002470 <MX_TIM3_Init+0xbc>)
 80023d8:	2247      	movs	r2, #71	; 0x47
 80023da:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023dc:	4b24      	ldr	r3, [pc, #144]	; (8002470 <MX_TIM3_Init+0xbc>)
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65000 - 1;
 80023e2:	4b23      	ldr	r3, [pc, #140]	; (8002470 <MX_TIM3_Init+0xbc>)
 80023e4:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 80023e8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ea:	4b21      	ldr	r3, [pc, #132]	; (8002470 <MX_TIM3_Init+0xbc>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f0:	4b1f      	ldr	r3, [pc, #124]	; (8002470 <MX_TIM3_Init+0xbc>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80023f6:	481e      	ldr	r0, [pc, #120]	; (8002470 <MX_TIM3_Init+0xbc>)
 80023f8:	f004 f96a 	bl	80066d0 <HAL_TIM_IC_Init>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_TIM3_Init+0x52>
	{
		Error_Handler();
 8002402:	f000 f92b 	bl	800265c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800240e:	f107 0310 	add.w	r3, r7, #16
 8002412:	4619      	mov	r1, r3
 8002414:	4816      	ldr	r0, [pc, #88]	; (8002470 <MX_TIM3_Init+0xbc>)
 8002416:	f004 fe49 	bl	80070ac <HAL_TIMEx_MasterConfigSynchronization>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_TIM3_Init+0x70>
	{
		Error_Handler();
 8002420:	f000 f91c 	bl	800265c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002424:	2300      	movs	r3, #0
 8002426:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002428:	2301      	movs	r3, #1
 800242a:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800242c:	2300      	movs	r3, #0
 800242e:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002434:	463b      	mov	r3, r7
 8002436:	2200      	movs	r2, #0
 8002438:	4619      	mov	r1, r3
 800243a:	480d      	ldr	r0, [pc, #52]	; (8002470 <MX_TIM3_Init+0xbc>)
 800243c:	f004 fba6 	bl	8006b8c <HAL_TIM_IC_ConfigChannel>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_TIM3_Init+0x96>
	{
		Error_Handler();
 8002446:	f000 f909 	bl	800265c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800244a:	2302      	movs	r3, #2
 800244c:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800244e:	2302      	movs	r3, #2
 8002450:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002452:	463b      	mov	r3, r7
 8002454:	2204      	movs	r2, #4
 8002456:	4619      	mov	r1, r3
 8002458:	4805      	ldr	r0, [pc, #20]	; (8002470 <MX_TIM3_Init+0xbc>)
 800245a:	f004 fb97 	bl	8006b8c <HAL_TIM_IC_ConfigChannel>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <MX_TIM3_Init+0xb4>
	{
		Error_Handler();
 8002464:	f000 f8fa 	bl	800265c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
}
 8002468:	bf00      	nop
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000904 	.word	0x20000904
 8002474:	40000400 	.word	0x40000400

08002478 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800247e:	f107 0310 	add.w	r3, r7, #16
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8002488:	463b      	mov	r3, r7
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	609a      	str	r2, [r3, #8]
 8002492:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8002494:	4b27      	ldr	r3, [pc, #156]	; (8002534 <MX_TIM4_Init+0xbc>)
 8002496:	4a28      	ldr	r2, [pc, #160]	; (8002538 <MX_TIM4_Init+0xc0>)
 8002498:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 72 - 1;
 800249a:	4b26      	ldr	r3, [pc, #152]	; (8002534 <MX_TIM4_Init+0xbc>)
 800249c:	2247      	movs	r2, #71	; 0x47
 800249e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a0:	4b24      	ldr	r3, [pc, #144]	; (8002534 <MX_TIM4_Init+0xbc>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65000 - 1;
 80024a6:	4b23      	ldr	r3, [pc, #140]	; (8002534 <MX_TIM4_Init+0xbc>)
 80024a8:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 80024ac:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ae:	4b21      	ldr	r3, [pc, #132]	; (8002534 <MX_TIM4_Init+0xbc>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b4:	4b1f      	ldr	r3, [pc, #124]	; (8002534 <MX_TIM4_Init+0xbc>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80024ba:	481e      	ldr	r0, [pc, #120]	; (8002534 <MX_TIM4_Init+0xbc>)
 80024bc:	f004 f908 	bl	80066d0 <HAL_TIM_IC_Init>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_TIM4_Init+0x52>
	{
		Error_Handler();
 80024c6:	f000 f8c9 	bl	800265c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024d2:	f107 0310 	add.w	r3, r7, #16
 80024d6:	4619      	mov	r1, r3
 80024d8:	4816      	ldr	r0, [pc, #88]	; (8002534 <MX_TIM4_Init+0xbc>)
 80024da:	f004 fde7 	bl	80070ac <HAL_TIMEx_MasterConfigSynchronization>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_TIM4_Init+0x70>
	{
		Error_Handler();
 80024e4:	f000 f8ba 	bl	800265c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80024e8:	2300      	movs	r3, #0
 80024ea:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80024ec:	2301      	movs	r3, #1
 80024ee:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80024f0:	2300      	movs	r3, #0
 80024f2:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80024f8:	463b      	mov	r3, r7
 80024fa:	2200      	movs	r2, #0
 80024fc:	4619      	mov	r1, r3
 80024fe:	480d      	ldr	r0, [pc, #52]	; (8002534 <MX_TIM4_Init+0xbc>)
 8002500:	f004 fb44 	bl	8006b8c <HAL_TIM_IC_ConfigChannel>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_TIM4_Init+0x96>
	{
		Error_Handler();
 800250a:	f000 f8a7 	bl	800265c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800250e:	2302      	movs	r3, #2
 8002510:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002512:	2302      	movs	r3, #2
 8002514:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002516:	463b      	mov	r3, r7
 8002518:	2204      	movs	r2, #4
 800251a:	4619      	mov	r1, r3
 800251c:	4805      	ldr	r0, [pc, #20]	; (8002534 <MX_TIM4_Init+0xbc>)
 800251e:	f004 fb35 	bl	8006b8c <HAL_TIM_IC_ConfigChannel>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_TIM4_Init+0xb4>
	{
		Error_Handler();
 8002528:	f000 f898 	bl	800265c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
}
 800252c:	bf00      	nop
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	200008b4 	.word	0x200008b4
 8002538:	40000800 	.word	0x40000800

0800253c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002542:	f107 0310 	add.w	r3, r7, #16
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	605a      	str	r2, [r3, #4]
 800254c:	609a      	str	r2, [r3, #8]
 800254e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002550:	4b3e      	ldr	r3, [pc, #248]	; (800264c <MX_GPIO_Init+0x110>)
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	4a3d      	ldr	r2, [pc, #244]	; (800264c <MX_GPIO_Init+0x110>)
 8002556:	f043 0310 	orr.w	r3, r3, #16
 800255a:	6193      	str	r3, [r2, #24]
 800255c:	4b3b      	ldr	r3, [pc, #236]	; (800264c <MX_GPIO_Init+0x110>)
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	f003 0310 	and.w	r3, r3, #16
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002568:	4b38      	ldr	r3, [pc, #224]	; (800264c <MX_GPIO_Init+0x110>)
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	4a37      	ldr	r2, [pc, #220]	; (800264c <MX_GPIO_Init+0x110>)
 800256e:	f043 0320 	orr.w	r3, r3, #32
 8002572:	6193      	str	r3, [r2, #24]
 8002574:	4b35      	ldr	r3, [pc, #212]	; (800264c <MX_GPIO_Init+0x110>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002580:	4b32      	ldr	r3, [pc, #200]	; (800264c <MX_GPIO_Init+0x110>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	4a31      	ldr	r2, [pc, #196]	; (800264c <MX_GPIO_Init+0x110>)
 8002586:	f043 0304 	orr.w	r3, r3, #4
 800258a:	6193      	str	r3, [r2, #24]
 800258c:	4b2f      	ldr	r3, [pc, #188]	; (800264c <MX_GPIO_Init+0x110>)
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	607b      	str	r3, [r7, #4]
 8002596:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002598:	4b2c      	ldr	r3, [pc, #176]	; (800264c <MX_GPIO_Init+0x110>)
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	4a2b      	ldr	r2, [pc, #172]	; (800264c <MX_GPIO_Init+0x110>)
 800259e:	f043 0308 	orr.w	r3, r3, #8
 80025a2:	6193      	str	r3, [r2, #24]
 80025a4:	4b29      	ldr	r3, [pc, #164]	; (800264c <MX_GPIO_Init+0x110>)
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	f003 0308 	and.w	r3, r3, #8
 80025ac:	603b      	str	r3, [r7, #0]
 80025ae:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80025b0:	2200      	movs	r2, #0
 80025b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025b6:	4826      	ldr	r0, [pc, #152]	; (8002650 <MX_GPIO_Init+0x114>)
 80025b8:	f001 fcfb 	bl	8003fb2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, AD5312_LDAC_Pin | AD5312_SYNC_Pin | GPIO_PIN_10, GPIO_PIN_RESET);
 80025bc:	2200      	movs	r2, #0
 80025be:	f240 4112 	movw	r1, #1042	; 0x412
 80025c2:	4824      	ldr	r0, [pc, #144]	; (8002654 <MX_GPIO_Init+0x118>)
 80025c4:	f001 fcf5 	bl	8003fb2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 80025c8:	2201      	movs	r2, #1
 80025ca:	2104      	movs	r1, #4
 80025cc:	4821      	ldr	r0, [pc, #132]	; (8002654 <MX_GPIO_Init+0x118>)
 80025ce:	f001 fcf0 	bl	8003fb2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80025d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d8:	2301      	movs	r3, #1
 80025da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e0:	2302      	movs	r3, #2
 80025e2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025e4:	f107 0310 	add.w	r3, r7, #16
 80025e8:	4619      	mov	r1, r3
 80025ea:	4819      	ldr	r0, [pc, #100]	; (8002650 <MX_GPIO_Init+0x114>)
 80025ec:	f001 fb46 	bl	8003c7c <HAL_GPIO_Init>

	/*Configure GPIO pins : AD5312_LDAC_Pin Relay_Pin AD5312_SYNC_Pin PA10 */
	GPIO_InitStruct.Pin = AD5312_LDAC_Pin | Relay_Pin | AD5312_SYNC_Pin | GPIO_PIN_10;
 80025f0:	f240 4316 	movw	r3, #1046	; 0x416
 80025f4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f6:	2301      	movs	r3, #1
 80025f8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fe:	2302      	movs	r3, #2
 8002600:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002602:	f107 0310 	add.w	r3, r7, #16
 8002606:	4619      	mov	r1, r3
 8002608:	4812      	ldr	r0, [pc, #72]	; (8002654 <MX_GPIO_Init+0x118>)
 800260a:	f001 fb37 	bl	8003c7c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 800260e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002612:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002618:	2301      	movs	r3, #1
 800261a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800261c:	f107 0310 	add.w	r3, r7, #16
 8002620:	4619      	mov	r1, r3
 8002622:	480d      	ldr	r0, [pc, #52]	; (8002658 <MX_GPIO_Init+0x11c>)
 8002624:	f001 fb2a 	bl	8003c7c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB13 PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 8002628:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800262c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002636:	f107 0310 	add.w	r3, r7, #16
 800263a:	4619      	mov	r1, r3
 800263c:	4806      	ldr	r0, [pc, #24]	; (8002658 <MX_GPIO_Init+0x11c>)
 800263e:	f001 fb1d 	bl	8003c7c <HAL_GPIO_Init>
}
 8002642:	bf00      	nop
 8002644:	3720      	adds	r7, #32
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
 8002650:	40011000 	.word	0x40011000
 8002654:	40010800 	.word	0x40010800
 8002658:	40010c00 	.word	0x40010c00

0800265c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002660:	bf00      	nop
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr

08002668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800266e:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <HAL_MspInit+0x5c>)
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	4a14      	ldr	r2, [pc, #80]	; (80026c4 <HAL_MspInit+0x5c>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	6193      	str	r3, [r2, #24]
 800267a:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <HAL_MspInit+0x5c>)
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	60bb      	str	r3, [r7, #8]
 8002684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002686:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <HAL_MspInit+0x5c>)
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	4a0e      	ldr	r2, [pc, #56]	; (80026c4 <HAL_MspInit+0x5c>)
 800268c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002690:	61d3      	str	r3, [r2, #28]
 8002692:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <HAL_MspInit+0x5c>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269a:	607b      	str	r3, [r7, #4]
 800269c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800269e:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <HAL_MspInit+0x60>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	4a04      	ldr	r2, [pc, #16]	; (80026c8 <HAL_MspInit+0x60>)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ba:	bf00      	nop
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	40021000 	.word	0x40021000
 80026c8:	40010000 	.word	0x40010000

080026cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d4:	f107 0310 	add.w	r3, r7, #16
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a18      	ldr	r2, [pc, #96]	; (8002748 <HAL_ADC_MspInit+0x7c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d129      	bne.n	8002740 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026ec:	4b17      	ldr	r3, [pc, #92]	; (800274c <HAL_ADC_MspInit+0x80>)
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	4a16      	ldr	r2, [pc, #88]	; (800274c <HAL_ADC_MspInit+0x80>)
 80026f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026f6:	6193      	str	r3, [r2, #24]
 80026f8:	4b14      	ldr	r3, [pc, #80]	; (800274c <HAL_ADC_MspInit+0x80>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002704:	4b11      	ldr	r3, [pc, #68]	; (800274c <HAL_ADC_MspInit+0x80>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	4a10      	ldr	r2, [pc, #64]	; (800274c <HAL_ADC_MspInit+0x80>)
 800270a:	f043 0304 	orr.w	r3, r3, #4
 800270e:	6193      	str	r3, [r2, #24]
 8002710:	4b0e      	ldr	r3, [pc, #56]	; (800274c <HAL_ADC_MspInit+0x80>)
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800271c:	2308      	movs	r3, #8
 800271e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002720:	2303      	movs	r3, #3
 8002722:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002724:	f107 0310 	add.w	r3, r7, #16
 8002728:	4619      	mov	r1, r3
 800272a:	4809      	ldr	r0, [pc, #36]	; (8002750 <HAL_ADC_MspInit+0x84>)
 800272c:	f001 faa6 	bl	8003c7c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002730:	2200      	movs	r2, #0
 8002732:	2100      	movs	r1, #0
 8002734:	2012      	movs	r0, #18
 8002736:	f001 f81c 	bl	8003772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800273a:	2012      	movs	r0, #18
 800273c:	f001 f835 	bl	80037aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002740:	bf00      	nop
 8002742:	3720      	adds	r7, #32
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40012400 	.word	0x40012400
 800274c:	40021000 	.word	0x40021000
 8002750:	40010800 	.word	0x40010800

08002754 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a09      	ldr	r2, [pc, #36]	; (8002788 <HAL_CRC_MspInit+0x34>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d10b      	bne.n	800277e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <HAL_CRC_MspInit+0x38>)
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	4a08      	ldr	r2, [pc, #32]	; (800278c <HAL_CRC_MspInit+0x38>)
 800276c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002770:	6153      	str	r3, [r2, #20]
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_CRC_MspInit+0x38>)
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800277e:	bf00      	nop
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr
 8002788:	40023000 	.word	0x40023000
 800278c:	40021000 	.word	0x40021000

08002790 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	f107 0310 	add.w	r3, r7, #16
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a15      	ldr	r2, [pc, #84]	; (8002800 <HAL_SPI_MspInit+0x70>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d123      	bne.n	80027f8 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027b0:	4b14      	ldr	r3, [pc, #80]	; (8002804 <HAL_SPI_MspInit+0x74>)
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	4a13      	ldr	r2, [pc, #76]	; (8002804 <HAL_SPI_MspInit+0x74>)
 80027b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027ba:	6193      	str	r3, [r2, #24]
 80027bc:	4b11      	ldr	r3, [pc, #68]	; (8002804 <HAL_SPI_MspInit+0x74>)
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c8:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <HAL_SPI_MspInit+0x74>)
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	4a0d      	ldr	r2, [pc, #52]	; (8002804 <HAL_SPI_MspInit+0x74>)
 80027ce:	f043 0304 	orr.w	r3, r3, #4
 80027d2:	6193      	str	r3, [r2, #24]
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_SPI_MspInit+0x74>)
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AD5312_SCLK_Pin|AD5312_DIN_Pin;
 80027e0:	23a0      	movs	r3, #160	; 0xa0
 80027e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e4:	2302      	movs	r3, #2
 80027e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027e8:	2303      	movs	r3, #3
 80027ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ec:	f107 0310 	add.w	r3, r7, #16
 80027f0:	4619      	mov	r1, r3
 80027f2:	4805      	ldr	r0, [pc, #20]	; (8002808 <HAL_SPI_MspInit+0x78>)
 80027f4:	f001 fa42 	bl	8003c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80027f8:	bf00      	nop
 80027fa:	3720      	adds	r7, #32
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40013000 	.word	0x40013000
 8002804:	40021000 	.word	0x40021000
 8002808:	40010800 	.word	0x40010800

0800280c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08c      	sub	sp, #48	; 0x30
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002814:	f107 031c 	add.w	r3, r7, #28
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a3b      	ldr	r2, [pc, #236]	; (8002914 <HAL_TIM_IC_MspInit+0x108>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d13e      	bne.n	80028aa <HAL_TIM_IC_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800282c:	4b3a      	ldr	r3, [pc, #232]	; (8002918 <HAL_TIM_IC_MspInit+0x10c>)
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	4a39      	ldr	r2, [pc, #228]	; (8002918 <HAL_TIM_IC_MspInit+0x10c>)
 8002832:	f043 0302 	orr.w	r3, r3, #2
 8002836:	61d3      	str	r3, [r2, #28]
 8002838:	4b37      	ldr	r3, [pc, #220]	; (8002918 <HAL_TIM_IC_MspInit+0x10c>)
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	61bb      	str	r3, [r7, #24]
 8002842:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002844:	4b34      	ldr	r3, [pc, #208]	; (8002918 <HAL_TIM_IC_MspInit+0x10c>)
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	4a33      	ldr	r2, [pc, #204]	; (8002918 <HAL_TIM_IC_MspInit+0x10c>)
 800284a:	f043 0308 	orr.w	r3, r3, #8
 800284e:	6193      	str	r3, [r2, #24]
 8002850:	4b31      	ldr	r3, [pc, #196]	; (8002918 <HAL_TIM_IC_MspInit+0x10c>)
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800285c:	2310      	movs	r3, #16
 800285e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002860:	2300      	movs	r3, #0
 8002862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002868:	f107 031c 	add.w	r3, r7, #28
 800286c:	4619      	mov	r1, r3
 800286e:	482b      	ldr	r0, [pc, #172]	; (800291c <HAL_TIM_IC_MspInit+0x110>)
 8002870:	f001 fa04 	bl	8003c7c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002874:	4b2a      	ldr	r3, [pc, #168]	; (8002920 <HAL_TIM_IC_MspInit+0x114>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	62fb      	str	r3, [r7, #44]	; 0x2c
 800287a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002884:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002892:	4a23      	ldr	r2, [pc, #140]	; (8002920 <HAL_TIM_IC_MspInit+0x114>)
 8002894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002896:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002898:	2200      	movs	r2, #0
 800289a:	2100      	movs	r1, #0
 800289c:	201d      	movs	r0, #29
 800289e:	f000 ff68 	bl	8003772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028a2:	201d      	movs	r0, #29
 80028a4:	f000 ff81 	bl	80037aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80028a8:	e030      	b.n	800290c <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM4)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a1d      	ldr	r2, [pc, #116]	; (8002924 <HAL_TIM_IC_MspInit+0x118>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d12b      	bne.n	800290c <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028b4:	4b18      	ldr	r3, [pc, #96]	; (8002918 <HAL_TIM_IC_MspInit+0x10c>)
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	4a17      	ldr	r2, [pc, #92]	; (8002918 <HAL_TIM_IC_MspInit+0x10c>)
 80028ba:	f043 0304 	orr.w	r3, r3, #4
 80028be:	61d3      	str	r3, [r2, #28]
 80028c0:	4b15      	ldr	r3, [pc, #84]	; (8002918 <HAL_TIM_IC_MspInit+0x10c>)
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028cc:	4b12      	ldr	r3, [pc, #72]	; (8002918 <HAL_TIM_IC_MspInit+0x10c>)
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	4a11      	ldr	r2, [pc, #68]	; (8002918 <HAL_TIM_IC_MspInit+0x10c>)
 80028d2:	f043 0308 	orr.w	r3, r3, #8
 80028d6:	6193      	str	r3, [r2, #24]
 80028d8:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <HAL_TIM_IC_MspInit+0x10c>)
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028e4:	2340      	movs	r3, #64	; 0x40
 80028e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028e8:	2300      	movs	r3, #0
 80028ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f0:	f107 031c 	add.w	r3, r7, #28
 80028f4:	4619      	mov	r1, r3
 80028f6:	4809      	ldr	r0, [pc, #36]	; (800291c <HAL_TIM_IC_MspInit+0x110>)
 80028f8:	f001 f9c0 	bl	8003c7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80028fc:	2200      	movs	r2, #0
 80028fe:	2100      	movs	r1, #0
 8002900:	201e      	movs	r0, #30
 8002902:	f000 ff36 	bl	8003772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002906:	201e      	movs	r0, #30
 8002908:	f000 ff4f 	bl	80037aa <HAL_NVIC_EnableIRQ>
}
 800290c:	bf00      	nop
 800290e:	3730      	adds	r7, #48	; 0x30
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40000400 	.word	0x40000400
 8002918:	40021000 	.word	0x40021000
 800291c:	40010c00 	.word	0x40010c00
 8002920:	40010000 	.word	0x40010000
 8002924:	40000800 	.word	0x40000800

08002928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800292c:	bf00      	nop
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 8002938:	4806      	ldr	r0, [pc, #24]	; (8002954 <HardFault_Handler+0x20>)
 800293a:	f008 fd45 	bl	800b3c8 <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 800293e:	4805      	ldr	r0, [pc, #20]	; (8002954 <HardFault_Handler+0x20>)
 8002940:	f008 fd42 	bl	800b3c8 <iprintf>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002944:	2200      	movs	r2, #0
 8002946:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800294a:	4803      	ldr	r0, [pc, #12]	; (8002958 <HardFault_Handler+0x24>)
 800294c:	f001 fb31 	bl	8003fb2 <HAL_GPIO_WritePin>
	  printf("HardFault_IRQn");
 8002950:	e7f5      	b.n	800293e <HardFault_Handler+0xa>
 8002952:	bf00      	nop
 8002954:	0800c840 	.word	0x0800c840
 8002958:	40011000 	.word	0x40011000

0800295c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002960:	e7fe      	b.n	8002960 <MemManage_Handler+0x4>

08002962 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002962:	b480      	push	{r7}
 8002964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002966:	e7fe      	b.n	8002966 <BusFault_Handler+0x4>

08002968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800296c:	e7fe      	b.n	800296c <UsageFault_Handler+0x4>

0800296e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr

0800297a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800297e:	bf00      	nop
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002986:	b480      	push	{r7}
 8002988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr

08002992 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002996:	f000 f945 	bl	8002c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80029a4:	4802      	ldr	r0, [pc, #8]	; (80029b0 <ADC1_2_IRQHandler+0x10>)
 80029a6:	f000 fb17 	bl	8002fd8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	2000094c 	.word	0x2000094c

080029b4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80029b8:	4802      	ldr	r0, [pc, #8]	; (80029c4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80029ba:	f001 fc43 	bl	8004244 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	200012bc 	.word	0x200012bc

080029c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029cc:	4802      	ldr	r0, [pc, #8]	; (80029d8 <TIM3_IRQHandler+0x10>)
 80029ce:	f003 ffd5 	bl	800697c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000904 	.word	0x20000904

080029dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80029e0:	4802      	ldr	r0, [pc, #8]	; (80029ec <TIM4_IRQHandler+0x10>)
 80029e2:	f003 ffcb 	bl	800697c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	200008b4 	.word	0x200008b4

080029f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	e00a      	b.n	8002a18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a02:	f3af 8000 	nop.w
 8002a06:	4601      	mov	r1, r0
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	1c5a      	adds	r2, r3, #1
 8002a0c:	60ba      	str	r2, [r7, #8]
 8002a0e:	b2ca      	uxtb	r2, r1
 8002a10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	3301      	adds	r3, #1
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	dbf0      	blt.n	8002a02 <_read+0x12>
	}

return len;
 8002a20:	687b      	ldr	r3, [r7, #4]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <_close>:
	}
	return len;
}

int _close(int file)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
	return -1;
 8002a32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a50:	605a      	str	r2, [r3, #4]
	return 0;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr

08002a5e <_isatty>:

int _isatty(int file)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
	return 1;
 8002a66:	2301      	movs	r3, #1
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr

08002a72 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b085      	sub	sp, #20
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
	return 0;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr
	...

08002a8c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002a94:	4b11      	ldr	r3, [pc, #68]	; (8002adc <_sbrk+0x50>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d102      	bne.n	8002aa2 <_sbrk+0x16>
		heap_end = &end;
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <_sbrk+0x50>)
 8002a9e:	4a10      	ldr	r2, [pc, #64]	; (8002ae0 <_sbrk+0x54>)
 8002aa0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <_sbrk+0x50>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <_sbrk+0x50>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4413      	add	r3, r2
 8002ab0:	466a      	mov	r2, sp
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d907      	bls.n	8002ac6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002ab6:	f008 fc2d 	bl	800b314 <__errno>
 8002aba:	4603      	mov	r3, r0
 8002abc:	220c      	movs	r2, #12
 8002abe:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac4:	e006      	b.n	8002ad4 <_sbrk+0x48>
	}

	heap_end += incr;
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <_sbrk+0x50>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4413      	add	r3, r2
 8002ace:	4a03      	ldr	r2, [pc, #12]	; (8002adc <_sbrk+0x50>)
 8002ad0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20000284 	.word	0x20000284
 8002ae0:	200015b8 	.word	0x200015b8

08002ae4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002ae8:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <SystemInit+0x5c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a14      	ldr	r2, [pc, #80]	; (8002b40 <SystemInit+0x5c>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002af4:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <SystemInit+0x5c>)
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	4911      	ldr	r1, [pc, #68]	; (8002b40 <SystemInit+0x5c>)
 8002afa:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <SystemInit+0x60>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002b00:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <SystemInit+0x5c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a0e      	ldr	r2, [pc, #56]	; (8002b40 <SystemInit+0x5c>)
 8002b06:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b0e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <SystemInit+0x5c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <SystemInit+0x5c>)
 8002b16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b1a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002b1c:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <SystemInit+0x5c>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	4a07      	ldr	r2, [pc, #28]	; (8002b40 <SystemInit+0x5c>)
 8002b22:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002b26:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <SystemInit+0x5c>)
 8002b2a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002b2e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <SystemInit+0x64>)
 8002b32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b36:	609a      	str	r2, [r3, #8]
#endif 
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr
 8002b40:	40021000 	.word	0x40021000
 8002b44:	f8ff0000 	.word	0xf8ff0000
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002b4c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002b4e:	e003      	b.n	8002b58 <LoopCopyDataInit>

08002b50 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002b52:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002b54:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002b56:	3104      	adds	r1, #4

08002b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002b58:	480a      	ldr	r0, [pc, #40]	; (8002b84 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002b5a:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002b5c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002b5e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002b60:	d3f6      	bcc.n	8002b50 <CopyDataInit>
  ldr r2, =_sbss
 8002b62:	4a0a      	ldr	r2, [pc, #40]	; (8002b8c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002b64:	e002      	b.n	8002b6c <LoopFillZerobss>

08002b66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002b66:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002b68:	f842 3b04 	str.w	r3, [r2], #4

08002b6c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002b6c:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002b6e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002b70:	d3f9      	bcc.n	8002b66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b72:	f7ff ffb7 	bl	8002ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b76:	f008 fbd3 	bl	800b320 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b7a:	f7ff f873 	bl	8001c64 <main>
  bx lr
 8002b7e:	4770      	bx	lr
  ldr r3, =_sidata
 8002b80:	0800c998 	.word	0x0800c998
  ldr r0, =_sdata
 8002b84:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002b88:	200001f0 	.word	0x200001f0
  ldr r2, =_sbss
 8002b8c:	200001f0 	.word	0x200001f0
  ldr r3, = _ebss
 8002b90:	200015b8 	.word	0x200015b8

08002b94 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b94:	e7fe      	b.n	8002b94 <CAN1_RX1_IRQHandler>
	...

08002b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b9c:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <HAL_Init+0x28>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a07      	ldr	r2, [pc, #28]	; (8002bc0 <HAL_Init+0x28>)
 8002ba2:	f043 0310 	orr.w	r3, r3, #16
 8002ba6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ba8:	2003      	movs	r0, #3
 8002baa:	f000 fdd7 	bl	800375c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bae:	2000      	movs	r0, #0
 8002bb0:	f000 f808 	bl	8002bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bb4:	f7ff fd58 	bl	8002668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40022000 	.word	0x40022000

08002bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bcc:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <HAL_InitTick+0x54>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <HAL_InitTick+0x58>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 fdef 	bl	80037c6 <HAL_SYSTICK_Config>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e00e      	b.n	8002c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b0f      	cmp	r3, #15
 8002bf6:	d80a      	bhi.n	8002c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002c00:	f000 fdb7 	bl	8003772 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c04:	4a06      	ldr	r2, [pc, #24]	; (8002c20 <HAL_InitTick+0x5c>)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e000      	b.n	8002c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20000010 	.word	0x20000010
 8002c1c:	20000018 	.word	0x20000018
 8002c20:	20000014 	.word	0x20000014

08002c24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <HAL_IncTick+0x1c>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <HAL_IncTick+0x20>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4413      	add	r3, r2
 8002c34:	4a03      	ldr	r2, [pc, #12]	; (8002c44 <HAL_IncTick+0x20>)
 8002c36:	6013      	str	r3, [r2, #0]
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr
 8002c40:	20000018 	.word	0x20000018
 8002c44:	200009d4 	.word	0x200009d4

08002c48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c4c:	4b02      	ldr	r3, [pc, #8]	; (8002c58 <HAL_GetTick+0x10>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr
 8002c58:	200009d4 	.word	0x200009d4

08002c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c64:	f7ff fff0 	bl	8002c48 <HAL_GetTick>
 8002c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c74:	d005      	beq.n	8002c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <HAL_Delay+0x44>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4413      	add	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c82:	bf00      	nop
 8002c84:	f7ff ffe0 	bl	8002c48 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d8f7      	bhi.n	8002c84 <HAL_Delay+0x28>
  {
  }
}
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000018 	.word	0x20000018

08002ca4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e0be      	b.n	8002e44 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d109      	bne.n	8002ce8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7ff fcf2 	bl	80026cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 fb8b 	bl	8003404 <ADC_ConversionStop_Disable>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf6:	f003 0310 	and.w	r3, r3, #16
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f040 8099 	bne.w	8002e32 <HAL_ADC_Init+0x18e>
 8002d00:	7dfb      	ldrb	r3, [r7, #23]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f040 8095 	bne.w	8002e32 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d10:	f023 0302 	bic.w	r3, r3, #2
 8002d14:	f043 0202 	orr.w	r2, r3, #2
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d24:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	7b1b      	ldrb	r3, [r3, #12]
 8002d2a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d2c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d3c:	d003      	beq.n	8002d46 <HAL_ADC_Init+0xa2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d102      	bne.n	8002d4c <HAL_ADC_Init+0xa8>
 8002d46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d4a:	e000      	b.n	8002d4e <HAL_ADC_Init+0xaa>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	7d1b      	ldrb	r3, [r3, #20]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d119      	bne.n	8002d90 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	7b1b      	ldrb	r3, [r3, #12]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d109      	bne.n	8002d78 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	035a      	lsls	r2, r3, #13
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	e00b      	b.n	8002d90 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	f043 0220 	orr.w	r2, r3, #32
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	f043 0201 	orr.w	r2, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	4b28      	ldr	r3, [pc, #160]	; (8002e4c <HAL_ADC_Init+0x1a8>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6812      	ldr	r2, [r2, #0]
 8002db2:	68b9      	ldr	r1, [r7, #8]
 8002db4:	430b      	orrs	r3, r1
 8002db6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dc0:	d003      	beq.n	8002dca <HAL_ADC_Init+0x126>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d104      	bne.n	8002dd4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	051b      	lsls	r3, r3, #20
 8002dd2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dda:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	4b18      	ldr	r3, [pc, #96]	; (8002e50 <HAL_ADC_Init+0x1ac>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d10b      	bne.n	8002e10 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e02:	f023 0303 	bic.w	r3, r3, #3
 8002e06:	f043 0201 	orr.w	r2, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e0e:	e018      	b.n	8002e42 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e14:	f023 0312 	bic.w	r3, r3, #18
 8002e18:	f043 0210 	orr.w	r2, r3, #16
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e24:	f043 0201 	orr.w	r2, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e30:	e007      	b.n	8002e42 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e36:	f043 0210 	orr.w	r2, r3, #16
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	ffe1f7fd 	.word	0xffe1f7fd
 8002e50:	ff1f0efe 	.word	0xff1f0efe

08002e54 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_ADC_Start_IT+0x1a>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e0a0      	b.n	8002fb0 <HAL_ADC_Start_IT+0x15c>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 fa72 	bl	8003360 <ADC_Enable>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f040 808f 	bne.w	8002fa6 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e90:	f023 0301 	bic.w	r3, r3, #1
 8002e94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a45      	ldr	r2, [pc, #276]	; (8002fb8 <HAL_ADC_Start_IT+0x164>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d105      	bne.n	8002eb2 <HAL_ADC_Start_IT+0x5e>
 8002ea6:	4b45      	ldr	r3, [pc, #276]	; (8002fbc <HAL_ADC_Start_IT+0x168>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d115      	bne.n	8002ede <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d026      	beq.n	8002f1a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ed4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002edc:	e01d      	b.n	8002f1a <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a33      	ldr	r2, [pc, #204]	; (8002fbc <HAL_ADC_Start_IT+0x168>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d004      	beq.n	8002efe <HAL_ADC_Start_IT+0xaa>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a2f      	ldr	r2, [pc, #188]	; (8002fb8 <HAL_ADC_Start_IT+0x164>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d10d      	bne.n	8002f1a <HAL_ADC_Start_IT+0xc6>
 8002efe:	4b2f      	ldr	r3, [pc, #188]	; (8002fbc <HAL_ADC_Start_IT+0x168>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d007      	beq.n	8002f1a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d006      	beq.n	8002f34 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2a:	f023 0206 	bic.w	r2, r3, #6
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f32:	e002      	b.n	8002f3a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f06f 0202 	mvn.w	r2, #2
 8002f4a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0220 	orr.w	r2, r2, #32
 8002f5a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f66:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f6a:	d113      	bne.n	8002f94 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f70:	4a11      	ldr	r2, [pc, #68]	; (8002fb8 <HAL_ADC_Start_IT+0x164>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d105      	bne.n	8002f82 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f76:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <HAL_ADC_Start_IT+0x168>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d108      	bne.n	8002f94 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002f90:	609a      	str	r2, [r3, #8]
 8002f92:	e00c      	b.n	8002fae <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	e003      	b.n	8002fae <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40012800 	.word	0x40012800
 8002fbc:	40012400 	.word	0x40012400

08002fc0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b20      	cmp	r3, #32
 8002fec:	d140      	bne.n	8003070 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d139      	bne.n	8003070 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	2b00      	cmp	r3, #0
 8003006:	d105      	bne.n	8003014 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800301e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003022:	d11d      	bne.n	8003060 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003028:	2b00      	cmp	r3, #0
 800302a:	d119      	bne.n	8003060 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0220 	bic.w	r2, r2, #32
 800303a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d105      	bne.n	8003060 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003058:	f043 0201 	orr.w	r2, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7fe f961 	bl	8001328 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f06f 0212 	mvn.w	r2, #18
 800306e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307a:	2b80      	cmp	r3, #128	; 0x80
 800307c:	d14f      	bne.n	800311e <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b04      	cmp	r3, #4
 800308a:	d148      	bne.n	800311e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	2b00      	cmp	r3, #0
 8003096:	d105      	bne.n	80030a4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80030ae:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80030b2:	d012      	beq.n	80030da <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d125      	bne.n	800310e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80030cc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80030d0:	d11d      	bne.n	800310e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d119      	bne.n	800310e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030e8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d105      	bne.n	800310e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003106:	f043 0201 	orr.w	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fa4e 	bl	80035b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 020c 	mvn.w	r2, #12
 800311c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003128:	2b40      	cmp	r3, #64	; 0x40
 800312a:	d114      	bne.n	8003156 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b01      	cmp	r3, #1
 8003138:	d10d      	bne.n	8003156 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f809 	bl	800315e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f06f 0201 	mvn.w	r2, #1
 8003154:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr

08003170 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800317a:	2300      	movs	r3, #0
 800317c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800317e:	2300      	movs	r3, #0
 8003180:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x20>
 800318c:	2302      	movs	r3, #2
 800318e:	e0dc      	b.n	800334a <HAL_ADC_ConfigChannel+0x1da>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b06      	cmp	r3, #6
 800319e:	d81c      	bhi.n	80031da <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	3b05      	subs	r3, #5
 80031b2:	221f      	movs	r2, #31
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	4019      	ands	r1, r3
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	6818      	ldr	r0, [r3, #0]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	3b05      	subs	r3, #5
 80031cc:	fa00 f203 	lsl.w	r2, r0, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	635a      	str	r2, [r3, #52]	; 0x34
 80031d8:	e03c      	b.n	8003254 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b0c      	cmp	r3, #12
 80031e0:	d81c      	bhi.n	800321c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	3b23      	subs	r3, #35	; 0x23
 80031f4:	221f      	movs	r2, #31
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43db      	mvns	r3, r3
 80031fc:	4019      	ands	r1, r3
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	3b23      	subs	r3, #35	; 0x23
 800320e:	fa00 f203 	lsl.w	r2, r0, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	631a      	str	r2, [r3, #48]	; 0x30
 800321a:	e01b      	b.n	8003254 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	3b41      	subs	r3, #65	; 0x41
 800322e:	221f      	movs	r2, #31
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	4019      	ands	r1, r3
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	6818      	ldr	r0, [r3, #0]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	3b41      	subs	r3, #65	; 0x41
 8003248:	fa00 f203 	lsl.w	r2, r0, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b09      	cmp	r3, #9
 800325a:	d91c      	bls.n	8003296 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68d9      	ldr	r1, [r3, #12]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	4613      	mov	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	4413      	add	r3, r2
 800326c:	3b1e      	subs	r3, #30
 800326e:	2207      	movs	r2, #7
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	4019      	ands	r1, r3
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	6898      	ldr	r0, [r3, #8]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	4613      	mov	r3, r2
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	4413      	add	r3, r2
 8003286:	3b1e      	subs	r3, #30
 8003288:	fa00 f203 	lsl.w	r2, r0, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	60da      	str	r2, [r3, #12]
 8003294:	e019      	b.n	80032ca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6919      	ldr	r1, [r3, #16]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	4613      	mov	r3, r2
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	4413      	add	r3, r2
 80032a6:	2207      	movs	r2, #7
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	4019      	ands	r1, r3
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	6898      	ldr	r0, [r3, #8]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	4613      	mov	r3, r2
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	4413      	add	r3, r2
 80032be:	fa00 f203 	lsl.w	r2, r0, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b10      	cmp	r3, #16
 80032d0:	d003      	beq.n	80032da <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032d6:	2b11      	cmp	r3, #17
 80032d8:	d132      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a1d      	ldr	r2, [pc, #116]	; (8003354 <HAL_ADC_ConfigChannel+0x1e4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d125      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d126      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003300:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b10      	cmp	r3, #16
 8003308:	d11a      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800330a:	4b13      	ldr	r3, [pc, #76]	; (8003358 <HAL_ADC_ConfigChannel+0x1e8>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a13      	ldr	r2, [pc, #76]	; (800335c <HAL_ADC_ConfigChannel+0x1ec>)
 8003310:	fba2 2303 	umull	r2, r3, r2, r3
 8003314:	0c9a      	lsrs	r2, r3, #18
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003320:	e002      	b.n	8003328 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	3b01      	subs	r3, #1
 8003326:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f9      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x1b2>
 800332e:	e007      	b.n	8003340 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f043 0220 	orr.w	r2, r3, #32
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003348:	7bfb      	ldrb	r3, [r7, #15]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr
 8003354:	40012400 	.word	0x40012400
 8003358:	20000010 	.word	0x20000010
 800335c:	431bde83 	.word	0x431bde83

08003360 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b01      	cmp	r3, #1
 800337c:	d039      	beq.n	80033f2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0201 	orr.w	r2, r2, #1
 800338c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800338e:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <ADC_Enable+0x9c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a1b      	ldr	r2, [pc, #108]	; (8003400 <ADC_Enable+0xa0>)
 8003394:	fba2 2303 	umull	r2, r3, r2, r3
 8003398:	0c9b      	lsrs	r3, r3, #18
 800339a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800339c:	e002      	b.n	80033a4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	3b01      	subs	r3, #1
 80033a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1f9      	bne.n	800339e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033aa:	f7ff fc4d 	bl	8002c48 <HAL_GetTick>
 80033ae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80033b0:	e018      	b.n	80033e4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033b2:	f7ff fc49 	bl	8002c48 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d911      	bls.n	80033e4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	f043 0210 	orr.w	r2, r3, #16
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	f043 0201 	orr.w	r2, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e007      	b.n	80033f4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d1df      	bne.n	80033b2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	20000010 	.word	0x20000010
 8003400:	431bde83 	.word	0x431bde83

08003404 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b01      	cmp	r3, #1
 800341c:	d127      	bne.n	800346e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0201 	bic.w	r2, r2, #1
 800342c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800342e:	f7ff fc0b 	bl	8002c48 <HAL_GetTick>
 8003432:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003434:	e014      	b.n	8003460 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003436:	f7ff fc07 	bl	8002c48 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d90d      	bls.n	8003460 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003448:	f043 0210 	orr.w	r2, r3, #16
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	f043 0201 	orr.w	r2, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e007      	b.n	8003470 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b01      	cmp	r3, #1
 800346c:	d0e3      	beq.n	8003436 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003478:	b590      	push	{r4, r7, lr}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003480:	2300      	movs	r3, #0
 8003482:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800348e:	2b01      	cmp	r3, #1
 8003490:	d101      	bne.n	8003496 <HAL_ADCEx_Calibration_Start+0x1e>
 8003492:	2302      	movs	r3, #2
 8003494:	e086      	b.n	80035a4 <HAL_ADCEx_Calibration_Start+0x12c>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7ff ffb0 	bl	8003404 <ADC_ConversionStop_Disable>
 80034a4:	4603      	mov	r3, r0
 80034a6:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80034a8:	7dfb      	ldrb	r3, [r7, #23]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d175      	bne.n	800359a <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034b6:	f023 0302 	bic.w	r3, r3, #2
 80034ba:	f043 0202 	orr.w	r2, r3, #2
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80034c2:	4b3a      	ldr	r3, [pc, #232]	; (80035ac <HAL_ADCEx_Calibration_Start+0x134>)
 80034c4:	681c      	ldr	r4, [r3, #0]
 80034c6:	2002      	movs	r0, #2
 80034c8:	f002 fdd8 	bl	800607c <HAL_RCCEx_GetPeriphCLKFreq>
 80034cc:	4603      	mov	r3, r0
 80034ce:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80034d2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80034d4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80034d6:	e002      	b.n	80034de <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	3b01      	subs	r3, #1
 80034dc:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1f9      	bne.n	80034d8 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff ff3b 	bl	8003360 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0208 	orr.w	r2, r2, #8
 80034f8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80034fa:	f7ff fba5 	bl	8002c48 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003500:	e014      	b.n	800352c <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003502:	f7ff fba1 	bl	8002c48 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b0a      	cmp	r3, #10
 800350e:	d90d      	bls.n	800352c <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003514:	f023 0312 	bic.w	r3, r3, #18
 8003518:	f043 0210 	orr.w	r2, r3, #16
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e03b      	b.n	80035a4 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1e3      	bne.n	8003502 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f042 0204 	orr.w	r2, r2, #4
 8003548:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800354a:	f7ff fb7d 	bl	8002c48 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003550:	e014      	b.n	800357c <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003552:	f7ff fb79 	bl	8002c48 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b0a      	cmp	r3, #10
 800355e:	d90d      	bls.n	800357c <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003564:	f023 0312 	bic.w	r3, r3, #18
 8003568:	f043 0210 	orr.w	r2, r3, #16
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e013      	b.n	80035a4 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1e3      	bne.n	8003552 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	f023 0303 	bic.w	r3, r3, #3
 8003592:	f043 0201 	orr.w	r2, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80035a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	371c      	adds	r7, #28
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd90      	pop	{r4, r7, pc}
 80035ac:	20000010 	.word	0x20000010

080035b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	bc80      	pop	{r7}
 80035c0:	4770      	bx	lr
	...

080035c4 <__NVIC_SetPriorityGrouping>:
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035d4:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <__NVIC_SetPriorityGrouping+0x44>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035e0:	4013      	ands	r3, r2
 80035e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035f6:	4a04      	ldr	r2, [pc, #16]	; (8003608 <__NVIC_SetPriorityGrouping+0x44>)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	60d3      	str	r3, [r2, #12]
}
 80035fc:	bf00      	nop
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	e000ed00 	.word	0xe000ed00

0800360c <__NVIC_GetPriorityGrouping>:
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003610:	4b04      	ldr	r3, [pc, #16]	; (8003624 <__NVIC_GetPriorityGrouping+0x18>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	0a1b      	lsrs	r3, r3, #8
 8003616:	f003 0307 	and.w	r3, r3, #7
}
 800361a:	4618      	mov	r0, r3
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	e000ed00 	.word	0xe000ed00

08003628 <__NVIC_EnableIRQ>:
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003636:	2b00      	cmp	r3, #0
 8003638:	db0b      	blt.n	8003652 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	f003 021f 	and.w	r2, r3, #31
 8003640:	4906      	ldr	r1, [pc, #24]	; (800365c <__NVIC_EnableIRQ+0x34>)
 8003642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	2001      	movs	r0, #1
 800364a:	fa00 f202 	lsl.w	r2, r0, r2
 800364e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr
 800365c:	e000e100 	.word	0xe000e100

08003660 <__NVIC_SetPriority>:
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	4603      	mov	r3, r0
 8003668:	6039      	str	r1, [r7, #0]
 800366a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800366c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003670:	2b00      	cmp	r3, #0
 8003672:	db0a      	blt.n	800368a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	b2da      	uxtb	r2, r3
 8003678:	490c      	ldr	r1, [pc, #48]	; (80036ac <__NVIC_SetPriority+0x4c>)
 800367a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367e:	0112      	lsls	r2, r2, #4
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	440b      	add	r3, r1
 8003684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003688:	e00a      	b.n	80036a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	b2da      	uxtb	r2, r3
 800368e:	4908      	ldr	r1, [pc, #32]	; (80036b0 <__NVIC_SetPriority+0x50>)
 8003690:	79fb      	ldrb	r3, [r7, #7]
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	3b04      	subs	r3, #4
 8003698:	0112      	lsls	r2, r2, #4
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	440b      	add	r3, r1
 800369e:	761a      	strb	r2, [r3, #24]
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc80      	pop	{r7}
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	e000e100 	.word	0xe000e100
 80036b0:	e000ed00 	.word	0xe000ed00

080036b4 <NVIC_EncodePriority>:
{
 80036b4:	b480      	push	{r7}
 80036b6:	b089      	sub	sp, #36	; 0x24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f1c3 0307 	rsb	r3, r3, #7
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	bf28      	it	cs
 80036d2:	2304      	movcs	r3, #4
 80036d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	3304      	adds	r3, #4
 80036da:	2b06      	cmp	r3, #6
 80036dc:	d902      	bls.n	80036e4 <NVIC_EncodePriority+0x30>
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	3b03      	subs	r3, #3
 80036e2:	e000      	b.n	80036e6 <NVIC_EncodePriority+0x32>
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e8:	f04f 32ff 	mov.w	r2, #4294967295
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43da      	mvns	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	401a      	ands	r2, r3
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	fa01 f303 	lsl.w	r3, r1, r3
 8003706:	43d9      	mvns	r1, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800370c:	4313      	orrs	r3, r2
}
 800370e:	4618      	mov	r0, r3
 8003710:	3724      	adds	r7, #36	; 0x24
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr

08003718 <SysTick_Config>:
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3b01      	subs	r3, #1
 8003724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003728:	d301      	bcc.n	800372e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800372a:	2301      	movs	r3, #1
 800372c:	e00f      	b.n	800374e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800372e:	4a0a      	ldr	r2, [pc, #40]	; (8003758 <SysTick_Config+0x40>)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3b01      	subs	r3, #1
 8003734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003736:	210f      	movs	r1, #15
 8003738:	f04f 30ff 	mov.w	r0, #4294967295
 800373c:	f7ff ff90 	bl	8003660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003740:	4b05      	ldr	r3, [pc, #20]	; (8003758 <SysTick_Config+0x40>)
 8003742:	2200      	movs	r2, #0
 8003744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003746:	4b04      	ldr	r3, [pc, #16]	; (8003758 <SysTick_Config+0x40>)
 8003748:	2207      	movs	r2, #7
 800374a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	e000e010 	.word	0xe000e010

0800375c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff ff2d 	bl	80035c4 <__NVIC_SetPriorityGrouping>
}
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003772:	b580      	push	{r7, lr}
 8003774:	b086      	sub	sp, #24
 8003776:	af00      	add	r7, sp, #0
 8003778:	4603      	mov	r3, r0
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
 800377e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003780:	2300      	movs	r3, #0
 8003782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003784:	f7ff ff42 	bl	800360c <__NVIC_GetPriorityGrouping>
 8003788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	68b9      	ldr	r1, [r7, #8]
 800378e:	6978      	ldr	r0, [r7, #20]
 8003790:	f7ff ff90 	bl	80036b4 <NVIC_EncodePriority>
 8003794:	4602      	mov	r2, r0
 8003796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800379a:	4611      	mov	r1, r2
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff ff5f 	bl	8003660 <__NVIC_SetPriority>
}
 80037a2:	bf00      	nop
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b082      	sub	sp, #8
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	4603      	mov	r3, r0
 80037b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff ff35 	bl	8003628 <__NVIC_EnableIRQ>
}
 80037be:	bf00      	nop
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7ff ffa2 	bl	8003718 <SysTick_Config>
 80037d4:	4603      	mov	r3, r0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b082      	sub	sp, #8
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e00e      	b.n	800380e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	795b      	ldrb	r3, [r3, #5]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d105      	bne.n	8003806 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7fe ffa7 	bl	8002754 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003816:	b480      	push	{r7}
 8003818:	b087      	sub	sp, #28
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003822:	2300      	movs	r3, #0
 8003824:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2202      	movs	r2, #2
 800382a:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0201 	orr.w	r2, r2, #1
 800383a:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	e00a      	b.n	8003858 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	441a      	add	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	3301      	adds	r3, #1
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	429a      	cmp	r2, r3
 800385e:	d3f0      	bcc.n	8003842 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2201      	movs	r2, #1
 800386c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800386e:	693b      	ldr	r3, [r7, #16]
}
 8003870:	4618      	mov	r0, r3
 8003872:	371c      	adds	r7, #28
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr
	...

0800387c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800387c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003892:	2300      	movs	r3, #0
 8003894:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003896:	4b2f      	ldr	r3, [pc, #188]	; (8003954 <HAL_FLASH_Program+0xd8>)
 8003898:	7e1b      	ldrb	r3, [r3, #24]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_FLASH_Program+0x26>
 800389e:	2302      	movs	r3, #2
 80038a0:	e054      	b.n	800394c <HAL_FLASH_Program+0xd0>
 80038a2:	4b2c      	ldr	r3, [pc, #176]	; (8003954 <HAL_FLASH_Program+0xd8>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80038a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80038ac:	f000 f8a8 	bl	8003a00 <FLASH_WaitForLastOperation>
 80038b0:	4603      	mov	r3, r0
 80038b2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80038b4:	7dfb      	ldrb	r3, [r7, #23]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d144      	bne.n	8003944 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d102      	bne.n	80038c6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80038c0:	2301      	movs	r3, #1
 80038c2:	757b      	strb	r3, [r7, #21]
 80038c4:	e007      	b.n	80038d6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d102      	bne.n	80038d2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80038cc:	2302      	movs	r3, #2
 80038ce:	757b      	strb	r3, [r7, #21]
 80038d0:	e001      	b.n	80038d6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80038d2:	2304      	movs	r3, #4
 80038d4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80038d6:	2300      	movs	r3, #0
 80038d8:	75bb      	strb	r3, [r7, #22]
 80038da:	e02d      	b.n	8003938 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80038dc:	7dbb      	ldrb	r3, [r7, #22]
 80038de:	005a      	lsls	r2, r3, #1
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	eb02 0c03 	add.w	ip, r2, r3
 80038e6:	7dbb      	ldrb	r3, [r7, #22]
 80038e8:	0119      	lsls	r1, r3, #4
 80038ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038ee:	f1c1 0620 	rsb	r6, r1, #32
 80038f2:	f1a1 0020 	sub.w	r0, r1, #32
 80038f6:	fa22 f401 	lsr.w	r4, r2, r1
 80038fa:	fa03 f606 	lsl.w	r6, r3, r6
 80038fe:	4334      	orrs	r4, r6
 8003900:	fa23 f000 	lsr.w	r0, r3, r0
 8003904:	4304      	orrs	r4, r0
 8003906:	fa23 f501 	lsr.w	r5, r3, r1
 800390a:	b2a3      	uxth	r3, r4
 800390c:	4619      	mov	r1, r3
 800390e:	4660      	mov	r0, ip
 8003910:	f000 f85a 	bl	80039c8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003914:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003918:	f000 f872 	bl	8003a00 <FLASH_WaitForLastOperation>
 800391c:	4603      	mov	r3, r0
 800391e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003920:	4b0d      	ldr	r3, [pc, #52]	; (8003958 <HAL_FLASH_Program+0xdc>)
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	4a0c      	ldr	r2, [pc, #48]	; (8003958 <HAL_FLASH_Program+0xdc>)
 8003926:	f023 0301 	bic.w	r3, r3, #1
 800392a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800392c:	7dfb      	ldrb	r3, [r7, #23]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d107      	bne.n	8003942 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003932:	7dbb      	ldrb	r3, [r7, #22]
 8003934:	3301      	adds	r3, #1
 8003936:	75bb      	strb	r3, [r7, #22]
 8003938:	7dba      	ldrb	r2, [r7, #22]
 800393a:	7d7b      	ldrb	r3, [r7, #21]
 800393c:	429a      	cmp	r2, r3
 800393e:	d3cd      	bcc.n	80038dc <HAL_FLASH_Program+0x60>
 8003940:	e000      	b.n	8003944 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003942:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003944:	4b03      	ldr	r3, [pc, #12]	; (8003954 <HAL_FLASH_Program+0xd8>)
 8003946:	2200      	movs	r2, #0
 8003948:	761a      	strb	r2, [r3, #24]

  return status;
 800394a:	7dfb      	ldrb	r3, [r7, #23]
}
 800394c:	4618      	mov	r0, r3
 800394e:	371c      	adds	r7, #28
 8003950:	46bd      	mov	sp, r7
 8003952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003954:	200009d8 	.word	0x200009d8
 8003958:	40022000 	.word	0x40022000

0800395c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003966:	4b0d      	ldr	r3, [pc, #52]	; (800399c <HAL_FLASH_Unlock+0x40>)
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00d      	beq.n	800398e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003972:	4b0a      	ldr	r3, [pc, #40]	; (800399c <HAL_FLASH_Unlock+0x40>)
 8003974:	4a0a      	ldr	r2, [pc, #40]	; (80039a0 <HAL_FLASH_Unlock+0x44>)
 8003976:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003978:	4b08      	ldr	r3, [pc, #32]	; (800399c <HAL_FLASH_Unlock+0x40>)
 800397a:	4a0a      	ldr	r2, [pc, #40]	; (80039a4 <HAL_FLASH_Unlock+0x48>)
 800397c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800397e:	4b07      	ldr	r3, [pc, #28]	; (800399c <HAL_FLASH_Unlock+0x40>)
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800398e:	79fb      	ldrb	r3, [r7, #7]
}
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	40022000 	.word	0x40022000
 80039a0:	45670123 	.word	0x45670123
 80039a4:	cdef89ab 	.word	0xcdef89ab

080039a8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <HAL_FLASH_Lock+0x1c>)
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	4a04      	ldr	r2, [pc, #16]	; (80039c4 <HAL_FLASH_Lock+0x1c>)
 80039b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039b6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	40022000 	.word	0x40022000

080039c8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80039d4:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <FLASH_Program_HalfWord+0x30>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80039da:	4b08      	ldr	r3, [pc, #32]	; (80039fc <FLASH_Program_HalfWord+0x34>)
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	4a07      	ldr	r2, [pc, #28]	; (80039fc <FLASH_Program_HalfWord+0x34>)
 80039e0:	f043 0301 	orr.w	r3, r3, #1
 80039e4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	887a      	ldrh	r2, [r7, #2]
 80039ea:	801a      	strh	r2, [r3, #0]
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	200009d8 	.word	0x200009d8
 80039fc:	40022000 	.word	0x40022000

08003a00 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003a08:	f7ff f91e 	bl	8002c48 <HAL_GetTick>
 8003a0c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003a0e:	e010      	b.n	8003a32 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a16:	d00c      	beq.n	8003a32 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d007      	beq.n	8003a2e <FLASH_WaitForLastOperation+0x2e>
 8003a1e:	f7ff f913 	bl	8002c48 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d201      	bcs.n	8003a32 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e025      	b.n	8003a7e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003a32:	4b15      	ldr	r3, [pc, #84]	; (8003a88 <FLASH_WaitForLastOperation+0x88>)
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1e8      	bne.n	8003a10 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003a3e:	4b12      	ldr	r3, [pc, #72]	; (8003a88 <FLASH_WaitForLastOperation+0x88>)
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003a4a:	4b0f      	ldr	r3, [pc, #60]	; (8003a88 <FLASH_WaitForLastOperation+0x88>)
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003a50:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <FLASH_WaitForLastOperation+0x88>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f003 0310 	and.w	r3, r3, #16
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10b      	bne.n	8003a74 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003a5c:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <FLASH_WaitForLastOperation+0x88>)
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d105      	bne.n	8003a74 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003a68:	4b07      	ldr	r3, [pc, #28]	; (8003a88 <FLASH_WaitForLastOperation+0x88>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003a74:	f000 f80a 	bl	8003a8c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e000      	b.n	8003a7e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40022000 	.word	0x40022000

08003a8c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003a96:	4b23      	ldr	r3, [pc, #140]	; (8003b24 <FLASH_SetErrorCode+0x98>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f003 0310 	and.w	r3, r3, #16
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d009      	beq.n	8003ab6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003aa2:	4b21      	ldr	r3, [pc, #132]	; (8003b28 <FLASH_SetErrorCode+0x9c>)
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	f043 0302 	orr.w	r3, r3, #2
 8003aaa:	4a1f      	ldr	r2, [pc, #124]	; (8003b28 <FLASH_SetErrorCode+0x9c>)
 8003aac:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f043 0310 	orr.w	r3, r3, #16
 8003ab4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003ab6:	4b1b      	ldr	r3, [pc, #108]	; (8003b24 <FLASH_SetErrorCode+0x98>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d009      	beq.n	8003ad6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003ac2:	4b19      	ldr	r3, [pc, #100]	; (8003b28 <FLASH_SetErrorCode+0x9c>)
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	4a17      	ldr	r2, [pc, #92]	; (8003b28 <FLASH_SetErrorCode+0x9c>)
 8003acc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f043 0304 	orr.w	r3, r3, #4
 8003ad4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003ad6:	4b13      	ldr	r3, [pc, #76]	; (8003b24 <FLASH_SetErrorCode+0x98>)
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00b      	beq.n	8003afa <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003ae2:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <FLASH_SetErrorCode+0x9c>)
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	f043 0304 	orr.w	r3, r3, #4
 8003aea:	4a0f      	ldr	r2, [pc, #60]	; (8003b28 <FLASH_SetErrorCode+0x9c>)
 8003aec:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003aee:	4b0d      	ldr	r3, [pc, #52]	; (8003b24 <FLASH_SetErrorCode+0x98>)
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	4a0c      	ldr	r2, [pc, #48]	; (8003b24 <FLASH_SetErrorCode+0x98>)
 8003af4:	f023 0301 	bic.w	r3, r3, #1
 8003af8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f240 1201 	movw	r2, #257	; 0x101
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d106      	bne.n	8003b12 <FLASH_SetErrorCode+0x86>
 8003b04:	4b07      	ldr	r3, [pc, #28]	; (8003b24 <FLASH_SetErrorCode+0x98>)
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	4a06      	ldr	r2, [pc, #24]	; (8003b24 <FLASH_SetErrorCode+0x98>)
 8003b0a:	f023 0301 	bic.w	r3, r3, #1
 8003b0e:	61d3      	str	r3, [r2, #28]
}  
 8003b10:	e002      	b.n	8003b18 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003b12:	4a04      	ldr	r2, [pc, #16]	; (8003b24 <FLASH_SetErrorCode+0x98>)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	60d3      	str	r3, [r2, #12]
}  
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	40022000 	.word	0x40022000
 8003b28:	200009d8 	.word	0x200009d8

08003b2c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003b3e:	4b2f      	ldr	r3, [pc, #188]	; (8003bfc <HAL_FLASHEx_Erase+0xd0>)
 8003b40:	7e1b      	ldrb	r3, [r3, #24]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <HAL_FLASHEx_Erase+0x1e>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e053      	b.n	8003bf2 <HAL_FLASHEx_Erase+0xc6>
 8003b4a:	4b2c      	ldr	r3, [pc, #176]	; (8003bfc <HAL_FLASHEx_Erase+0xd0>)
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d116      	bne.n	8003b86 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003b58:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b5c:	f7ff ff50 	bl	8003a00 <FLASH_WaitForLastOperation>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d141      	bne.n	8003bea <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003b66:	2001      	movs	r0, #1
 8003b68:	f000 f84c 	bl	8003c04 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b70:	f7ff ff46 	bl	8003a00 <FLASH_WaitForLastOperation>
 8003b74:	4603      	mov	r3, r0
 8003b76:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003b78:	4b21      	ldr	r3, [pc, #132]	; (8003c00 <HAL_FLASHEx_Erase+0xd4>)
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	4a20      	ldr	r2, [pc, #128]	; (8003c00 <HAL_FLASHEx_Erase+0xd4>)
 8003b7e:	f023 0304 	bic.w	r3, r3, #4
 8003b82:	6113      	str	r3, [r2, #16]
 8003b84:	e031      	b.n	8003bea <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003b86:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b8a:	f7ff ff39 	bl	8003a00 <FLASH_WaitForLastOperation>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d12a      	bne.n	8003bea <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	f04f 32ff 	mov.w	r2, #4294967295
 8003b9a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	e019      	b.n	8003bd8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003ba4:	68b8      	ldr	r0, [r7, #8]
 8003ba6:	f000 f849 	bl	8003c3c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003baa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bae:	f7ff ff27 	bl	8003a00 <FLASH_WaitForLastOperation>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003bb6:	4b12      	ldr	r3, [pc, #72]	; (8003c00 <HAL_FLASHEx_Erase+0xd4>)
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	4a11      	ldr	r2, [pc, #68]	; (8003c00 <HAL_FLASHEx_Erase+0xd4>)
 8003bbc:	f023 0302 	bic.w	r3, r3, #2
 8003bc0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003bc2:	7bfb      	ldrb	r3, [r7, #15]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	601a      	str	r2, [r3, #0]
            break;
 8003bce:	e00c      	b.n	8003bea <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bd6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	029a      	lsls	r2, r3, #10
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d3dc      	bcc.n	8003ba4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003bea:	4b04      	ldr	r3, [pc, #16]	; (8003bfc <HAL_FLASHEx_Erase+0xd0>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	761a      	strb	r2, [r3, #24]

  return status;
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	200009d8 	.word	0x200009d8
 8003c00:	40022000 	.word	0x40022000

08003c04 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c0c:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <FLASH_MassErase+0x30>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003c12:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <FLASH_MassErase+0x34>)
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	4a08      	ldr	r2, [pc, #32]	; (8003c38 <FLASH_MassErase+0x34>)
 8003c18:	f043 0304 	orr.w	r3, r3, #4
 8003c1c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003c1e:	4b06      	ldr	r3, [pc, #24]	; (8003c38 <FLASH_MassErase+0x34>)
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	4a05      	ldr	r2, [pc, #20]	; (8003c38 <FLASH_MassErase+0x34>)
 8003c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c28:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr
 8003c34:	200009d8 	.word	0x200009d8
 8003c38:	40022000 	.word	0x40022000

08003c3c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c44:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <FLASH_PageErase+0x38>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003c4a:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <FLASH_PageErase+0x3c>)
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	4a0a      	ldr	r2, [pc, #40]	; (8003c78 <FLASH_PageErase+0x3c>)
 8003c50:	f043 0302 	orr.w	r3, r3, #2
 8003c54:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003c56:	4a08      	ldr	r2, [pc, #32]	; (8003c78 <FLASH_PageErase+0x3c>)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003c5c:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <FLASH_PageErase+0x3c>)
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	4a05      	ldr	r2, [pc, #20]	; (8003c78 <FLASH_PageErase+0x3c>)
 8003c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c66:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bc80      	pop	{r7}
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	200009d8 	.word	0x200009d8
 8003c78:	40022000 	.word	0x40022000

08003c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b08b      	sub	sp, #44	; 0x2c
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c86:	2300      	movs	r3, #0
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c8e:	e169      	b.n	8003f64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c90:	2201      	movs	r2, #1
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69fa      	ldr	r2, [r7, #28]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	f040 8158 	bne.w	8003f5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	4a9a      	ldr	r2, [pc, #616]	; (8003f1c <HAL_GPIO_Init+0x2a0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d05e      	beq.n	8003d76 <HAL_GPIO_Init+0xfa>
 8003cb8:	4a98      	ldr	r2, [pc, #608]	; (8003f1c <HAL_GPIO_Init+0x2a0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d875      	bhi.n	8003daa <HAL_GPIO_Init+0x12e>
 8003cbe:	4a98      	ldr	r2, [pc, #608]	; (8003f20 <HAL_GPIO_Init+0x2a4>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d058      	beq.n	8003d76 <HAL_GPIO_Init+0xfa>
 8003cc4:	4a96      	ldr	r2, [pc, #600]	; (8003f20 <HAL_GPIO_Init+0x2a4>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d86f      	bhi.n	8003daa <HAL_GPIO_Init+0x12e>
 8003cca:	4a96      	ldr	r2, [pc, #600]	; (8003f24 <HAL_GPIO_Init+0x2a8>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d052      	beq.n	8003d76 <HAL_GPIO_Init+0xfa>
 8003cd0:	4a94      	ldr	r2, [pc, #592]	; (8003f24 <HAL_GPIO_Init+0x2a8>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d869      	bhi.n	8003daa <HAL_GPIO_Init+0x12e>
 8003cd6:	4a94      	ldr	r2, [pc, #592]	; (8003f28 <HAL_GPIO_Init+0x2ac>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d04c      	beq.n	8003d76 <HAL_GPIO_Init+0xfa>
 8003cdc:	4a92      	ldr	r2, [pc, #584]	; (8003f28 <HAL_GPIO_Init+0x2ac>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d863      	bhi.n	8003daa <HAL_GPIO_Init+0x12e>
 8003ce2:	4a92      	ldr	r2, [pc, #584]	; (8003f2c <HAL_GPIO_Init+0x2b0>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d046      	beq.n	8003d76 <HAL_GPIO_Init+0xfa>
 8003ce8:	4a90      	ldr	r2, [pc, #576]	; (8003f2c <HAL_GPIO_Init+0x2b0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d85d      	bhi.n	8003daa <HAL_GPIO_Init+0x12e>
 8003cee:	2b12      	cmp	r3, #18
 8003cf0:	d82a      	bhi.n	8003d48 <HAL_GPIO_Init+0xcc>
 8003cf2:	2b12      	cmp	r3, #18
 8003cf4:	d859      	bhi.n	8003daa <HAL_GPIO_Init+0x12e>
 8003cf6:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <HAL_GPIO_Init+0x80>)
 8003cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfc:	08003d77 	.word	0x08003d77
 8003d00:	08003d51 	.word	0x08003d51
 8003d04:	08003d63 	.word	0x08003d63
 8003d08:	08003da5 	.word	0x08003da5
 8003d0c:	08003dab 	.word	0x08003dab
 8003d10:	08003dab 	.word	0x08003dab
 8003d14:	08003dab 	.word	0x08003dab
 8003d18:	08003dab 	.word	0x08003dab
 8003d1c:	08003dab 	.word	0x08003dab
 8003d20:	08003dab 	.word	0x08003dab
 8003d24:	08003dab 	.word	0x08003dab
 8003d28:	08003dab 	.word	0x08003dab
 8003d2c:	08003dab 	.word	0x08003dab
 8003d30:	08003dab 	.word	0x08003dab
 8003d34:	08003dab 	.word	0x08003dab
 8003d38:	08003dab 	.word	0x08003dab
 8003d3c:	08003dab 	.word	0x08003dab
 8003d40:	08003d59 	.word	0x08003d59
 8003d44:	08003d6d 	.word	0x08003d6d
 8003d48:	4a79      	ldr	r2, [pc, #484]	; (8003f30 <HAL_GPIO_Init+0x2b4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d013      	beq.n	8003d76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d4e:	e02c      	b.n	8003daa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	623b      	str	r3, [r7, #32]
          break;
 8003d56:	e029      	b.n	8003dac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	623b      	str	r3, [r7, #32]
          break;
 8003d60:	e024      	b.n	8003dac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	3308      	adds	r3, #8
 8003d68:	623b      	str	r3, [r7, #32]
          break;
 8003d6a:	e01f      	b.n	8003dac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	330c      	adds	r3, #12
 8003d72:	623b      	str	r3, [r7, #32]
          break;
 8003d74:	e01a      	b.n	8003dac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d102      	bne.n	8003d84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d7e:	2304      	movs	r3, #4
 8003d80:	623b      	str	r3, [r7, #32]
          break;
 8003d82:	e013      	b.n	8003dac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d105      	bne.n	8003d98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d8c:	2308      	movs	r3, #8
 8003d8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	69fa      	ldr	r2, [r7, #28]
 8003d94:	611a      	str	r2, [r3, #16]
          break;
 8003d96:	e009      	b.n	8003dac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d98:	2308      	movs	r3, #8
 8003d9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	69fa      	ldr	r2, [r7, #28]
 8003da0:	615a      	str	r2, [r3, #20]
          break;
 8003da2:	e003      	b.n	8003dac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003da4:	2300      	movs	r3, #0
 8003da6:	623b      	str	r3, [r7, #32]
          break;
 8003da8:	e000      	b.n	8003dac <HAL_GPIO_Init+0x130>
          break;
 8003daa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	2bff      	cmp	r3, #255	; 0xff
 8003db0:	d801      	bhi.n	8003db6 <HAL_GPIO_Init+0x13a>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	e001      	b.n	8003dba <HAL_GPIO_Init+0x13e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3304      	adds	r3, #4
 8003dba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	2bff      	cmp	r3, #255	; 0xff
 8003dc0:	d802      	bhi.n	8003dc8 <HAL_GPIO_Init+0x14c>
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	e002      	b.n	8003dce <HAL_GPIO_Init+0x152>
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	3b08      	subs	r3, #8
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	210f      	movs	r1, #15
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	401a      	ands	r2, r3
 8003de0:	6a39      	ldr	r1, [r7, #32]
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	fa01 f303 	lsl.w	r3, r1, r3
 8003de8:	431a      	orrs	r2, r3
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 80b1 	beq.w	8003f5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003dfc:	4b4d      	ldr	r3, [pc, #308]	; (8003f34 <HAL_GPIO_Init+0x2b8>)
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	4a4c      	ldr	r2, [pc, #304]	; (8003f34 <HAL_GPIO_Init+0x2b8>)
 8003e02:	f043 0301 	orr.w	r3, r3, #1
 8003e06:	6193      	str	r3, [r2, #24]
 8003e08:	4b4a      	ldr	r3, [pc, #296]	; (8003f34 <HAL_GPIO_Init+0x2b8>)
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	60bb      	str	r3, [r7, #8]
 8003e12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e14:	4a48      	ldr	r2, [pc, #288]	; (8003f38 <HAL_GPIO_Init+0x2bc>)
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	089b      	lsrs	r3, r3, #2
 8003e1a:	3302      	adds	r3, #2
 8003e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	f003 0303 	and.w	r3, r3, #3
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	220f      	movs	r2, #15
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	43db      	mvns	r3, r3
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4013      	ands	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a40      	ldr	r2, [pc, #256]	; (8003f3c <HAL_GPIO_Init+0x2c0>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d013      	beq.n	8003e68 <HAL_GPIO_Init+0x1ec>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a3f      	ldr	r2, [pc, #252]	; (8003f40 <HAL_GPIO_Init+0x2c4>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d00d      	beq.n	8003e64 <HAL_GPIO_Init+0x1e8>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a3e      	ldr	r2, [pc, #248]	; (8003f44 <HAL_GPIO_Init+0x2c8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d007      	beq.n	8003e60 <HAL_GPIO_Init+0x1e4>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a3d      	ldr	r2, [pc, #244]	; (8003f48 <HAL_GPIO_Init+0x2cc>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d101      	bne.n	8003e5c <HAL_GPIO_Init+0x1e0>
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e006      	b.n	8003e6a <HAL_GPIO_Init+0x1ee>
 8003e5c:	2304      	movs	r3, #4
 8003e5e:	e004      	b.n	8003e6a <HAL_GPIO_Init+0x1ee>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e002      	b.n	8003e6a <HAL_GPIO_Init+0x1ee>
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <HAL_GPIO_Init+0x1ee>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6c:	f002 0203 	and.w	r2, r2, #3
 8003e70:	0092      	lsls	r2, r2, #2
 8003e72:	4093      	lsls	r3, r2
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e7a:	492f      	ldr	r1, [pc, #188]	; (8003f38 <HAL_GPIO_Init+0x2bc>)
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	089b      	lsrs	r3, r3, #2
 8003e80:	3302      	adds	r3, #2
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d006      	beq.n	8003ea2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e94:	4b2d      	ldr	r3, [pc, #180]	; (8003f4c <HAL_GPIO_Init+0x2d0>)
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	492c      	ldr	r1, [pc, #176]	; (8003f4c <HAL_GPIO_Init+0x2d0>)
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	600b      	str	r3, [r1, #0]
 8003ea0:	e006      	b.n	8003eb0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ea2:	4b2a      	ldr	r3, [pc, #168]	; (8003f4c <HAL_GPIO_Init+0x2d0>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	4928      	ldr	r1, [pc, #160]	; (8003f4c <HAL_GPIO_Init+0x2d0>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d006      	beq.n	8003eca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003ebc:	4b23      	ldr	r3, [pc, #140]	; (8003f4c <HAL_GPIO_Init+0x2d0>)
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	4922      	ldr	r1, [pc, #136]	; (8003f4c <HAL_GPIO_Init+0x2d0>)
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	604b      	str	r3, [r1, #4]
 8003ec8:	e006      	b.n	8003ed8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003eca:	4b20      	ldr	r3, [pc, #128]	; (8003f4c <HAL_GPIO_Init+0x2d0>)
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	491e      	ldr	r1, [pc, #120]	; (8003f4c <HAL_GPIO_Init+0x2d0>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d006      	beq.n	8003ef2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ee4:	4b19      	ldr	r3, [pc, #100]	; (8003f4c <HAL_GPIO_Init+0x2d0>)
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	4918      	ldr	r1, [pc, #96]	; (8003f4c <HAL_GPIO_Init+0x2d0>)
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	608b      	str	r3, [r1, #8]
 8003ef0:	e006      	b.n	8003f00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ef2:	4b16      	ldr	r3, [pc, #88]	; (8003f4c <HAL_GPIO_Init+0x2d0>)
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	4914      	ldr	r1, [pc, #80]	; (8003f4c <HAL_GPIO_Init+0x2d0>)
 8003efc:	4013      	ands	r3, r2
 8003efe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d021      	beq.n	8003f50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f0c:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <HAL_GPIO_Init+0x2d0>)
 8003f0e:	68da      	ldr	r2, [r3, #12]
 8003f10:	490e      	ldr	r1, [pc, #56]	; (8003f4c <HAL_GPIO_Init+0x2d0>)
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60cb      	str	r3, [r1, #12]
 8003f18:	e021      	b.n	8003f5e <HAL_GPIO_Init+0x2e2>
 8003f1a:	bf00      	nop
 8003f1c:	10320000 	.word	0x10320000
 8003f20:	10310000 	.word	0x10310000
 8003f24:	10220000 	.word	0x10220000
 8003f28:	10210000 	.word	0x10210000
 8003f2c:	10120000 	.word	0x10120000
 8003f30:	10110000 	.word	0x10110000
 8003f34:	40021000 	.word	0x40021000
 8003f38:	40010000 	.word	0x40010000
 8003f3c:	40010800 	.word	0x40010800
 8003f40:	40010c00 	.word	0x40010c00
 8003f44:	40011000 	.word	0x40011000
 8003f48:	40011400 	.word	0x40011400
 8003f4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f50:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <HAL_GPIO_Init+0x304>)
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	43db      	mvns	r3, r3
 8003f58:	4909      	ldr	r1, [pc, #36]	; (8003f80 <HAL_GPIO_Init+0x304>)
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	3301      	adds	r3, #1
 8003f62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f47f ae8e 	bne.w	8003c90 <HAL_GPIO_Init+0x14>
  }
}
 8003f74:	bf00      	nop
 8003f76:	bf00      	nop
 8003f78:	372c      	adds	r7, #44	; 0x2c
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr
 8003f80:	40010400 	.word	0x40010400

08003f84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	887b      	ldrh	r3, [r7, #2]
 8003f96:	4013      	ands	r3, r2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	73fb      	strb	r3, [r7, #15]
 8003fa0:	e001      	b.n	8003fa6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr

08003fb2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	807b      	strh	r3, [r7, #2]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fc2:	787b      	ldrb	r3, [r7, #1]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fc8:	887a      	ldrh	r2, [r7, #2]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003fce:	e003      	b.n	8003fd8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003fd0:	887b      	ldrh	r3, [r7, #2]
 8003fd2:	041a      	lsls	r2, r3, #16
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	611a      	str	r2, [r3, #16]
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bc80      	pop	{r7}
 8003fe0:	4770      	bx	lr

08003fe2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003fe2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fe4:	b08b      	sub	sp, #44	; 0x2c
 8003fe6:	af06      	add	r7, sp, #24
 8003fe8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0fd      	b.n	80041f0 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d106      	bne.n	800400e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f006 fed9 	bl	800adc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2203      	movs	r2, #3
 8004012:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f003 f8dc 	bl	80071d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	603b      	str	r3, [r7, #0]
 8004026:	687e      	ldr	r6, [r7, #4]
 8004028:	466d      	mov	r5, sp
 800402a:	f106 0410 	add.w	r4, r6, #16
 800402e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004030:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	602b      	str	r3, [r5, #0]
 8004036:	1d33      	adds	r3, r6, #4
 8004038:	cb0e      	ldmia	r3, {r1, r2, r3}
 800403a:	6838      	ldr	r0, [r7, #0]
 800403c:	f003 f8a6 	bl	800718c <USB_CoreInit>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d005      	beq.n	8004052 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2202      	movs	r2, #2
 800404a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e0ce      	b.n	80041f0 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2100      	movs	r1, #0
 8004058:	4618      	mov	r0, r3
 800405a:	f003 f8d7 	bl	800720c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800405e:	2300      	movs	r3, #0
 8004060:	73fb      	strb	r3, [r7, #15]
 8004062:	e04c      	b.n	80040fe <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	4613      	mov	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	440b      	add	r3, r1
 8004074:	3301      	adds	r3, #1
 8004076:	2201      	movs	r2, #1
 8004078:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800407a:	7bfb      	ldrb	r3, [r7, #15]
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	440b      	add	r3, r1
 800408a:	7bfa      	ldrb	r2, [r7, #15]
 800408c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800408e:	7bfa      	ldrb	r2, [r7, #15]
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	b298      	uxth	r0, r3
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	4613      	mov	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	440b      	add	r3, r1
 80040a0:	3336      	adds	r3, #54	; 0x36
 80040a2:	4602      	mov	r2, r0
 80040a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	4613      	mov	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	440b      	add	r3, r1
 80040b6:	3303      	adds	r3, #3
 80040b8:	2200      	movs	r2, #0
 80040ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80040bc:	7bfa      	ldrb	r2, [r7, #15]
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	4613      	mov	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	440b      	add	r3, r1
 80040ca:	3338      	adds	r3, #56	; 0x38
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80040d0:	7bfa      	ldrb	r2, [r7, #15]
 80040d2:	6879      	ldr	r1, [r7, #4]
 80040d4:	4613      	mov	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	440b      	add	r3, r1
 80040de:	333c      	adds	r3, #60	; 0x3c
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80040e4:	7bfa      	ldrb	r2, [r7, #15]
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	4613      	mov	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	440b      	add	r3, r1
 80040f2:	3340      	adds	r3, #64	; 0x40
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
 80040fa:	3301      	adds	r3, #1
 80040fc:	73fb      	strb	r3, [r7, #15]
 80040fe:	7bfa      	ldrb	r2, [r7, #15]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	429a      	cmp	r2, r3
 8004106:	d3ad      	bcc.n	8004064 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004108:	2300      	movs	r3, #0
 800410a:	73fb      	strb	r3, [r7, #15]
 800410c:	e044      	b.n	8004198 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800410e:	7bfa      	ldrb	r2, [r7, #15]
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	4613      	mov	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	440b      	add	r3, r1
 800411c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004120:	2200      	movs	r2, #0
 8004122:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004124:	7bfa      	ldrb	r2, [r7, #15]
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	4613      	mov	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	440b      	add	r3, r1
 8004132:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004136:	7bfa      	ldrb	r2, [r7, #15]
 8004138:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800413a:	7bfa      	ldrb	r2, [r7, #15]
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	4613      	mov	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	440b      	add	r3, r1
 8004148:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800414c:	2200      	movs	r2, #0
 800414e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004150:	7bfa      	ldrb	r2, [r7, #15]
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	440b      	add	r3, r1
 800415e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004166:	7bfa      	ldrb	r2, [r7, #15]
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	440b      	add	r3, r1
 8004174:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800417c:	7bfa      	ldrb	r2, [r7, #15]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	440b      	add	r3, r1
 800418a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004192:	7bfb      	ldrb	r3, [r7, #15]
 8004194:	3301      	adds	r3, #1
 8004196:	73fb      	strb	r3, [r7, #15]
 8004198:	7bfa      	ldrb	r2, [r7, #15]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d3b5      	bcc.n	800410e <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	603b      	str	r3, [r7, #0]
 80041a8:	687e      	ldr	r6, [r7, #4]
 80041aa:	466d      	mov	r5, sp
 80041ac:	f106 0410 	add.w	r4, r6, #16
 80041b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041b4:	6823      	ldr	r3, [r4, #0]
 80041b6:	602b      	str	r3, [r5, #0]
 80041b8:	1d33      	adds	r3, r6, #4
 80041ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041bc:	6838      	ldr	r0, [r7, #0]
 80041be:	f003 f831 	bl	8007224 <USB_DevInit>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d005      	beq.n	80041d4 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e00d      	b.n	80041f0 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f004 ffcb 	bl	8009184 <USB_DevDisconnect>

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004206:	2b01      	cmp	r3, #1
 8004208:	d101      	bne.n	800420e <HAL_PCD_Start+0x16>
 800420a:	2302      	movs	r3, #2
 800420c:	e016      	b.n	800423c <HAL_PCD_Start+0x44>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f002 ffc6 	bl	80071ac <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004220:	2101      	movs	r1, #1
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f007 f83f 	bl	800b2a6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4618      	mov	r0, r3
 800422e:	f004 ff9f 	bl	8009170 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f004 ffa1 	bl	8009198 <USB_ReadInterrupts>
 8004256:	4603      	mov	r3, r0
 8004258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800425c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004260:	d102      	bne.n	8004268 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fb61 	bl	800492a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f004 ff93 	bl	8009198 <USB_ReadInterrupts>
 8004272:	4603      	mov	r3, r0
 8004274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800427c:	d112      	bne.n	80042a4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004286:	b29a      	uxth	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004290:	b292      	uxth	r2, r2
 8004292:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f006 fe0d 	bl	800aeb6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800429c:	2100      	movs	r1, #0
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f925 	bl	80044ee <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f004 ff75 	bl	8009198 <USB_ReadInterrupts>
 80042ae:	4603      	mov	r3, r0
 80042b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042b8:	d10b      	bne.n	80042d2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042cc:	b292      	uxth	r2, r2
 80042ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f004 ff5e 	bl	8009198 <USB_ReadInterrupts>
 80042dc:	4603      	mov	r3, r0
 80042de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042e6:	d10b      	bne.n	8004300 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042fa:	b292      	uxth	r2, r2
 80042fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f004 ff47 	bl	8009198 <USB_ReadInterrupts>
 800430a:	4603      	mov	r3, r0
 800430c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004314:	d126      	bne.n	8004364 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800431e:	b29a      	uxth	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0204 	bic.w	r2, r2, #4
 8004328:	b292      	uxth	r2, r2
 800432a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004336:	b29a      	uxth	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0208 	bic.w	r2, r2, #8
 8004340:	b292      	uxth	r2, r2
 8004342:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f006 fdee 	bl	800af28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004354:	b29a      	uxth	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800435e:	b292      	uxth	r2, r2
 8004360:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4618      	mov	r0, r3
 800436a:	f004 ff15 	bl	8009198 <USB_ReadInterrupts>
 800436e:	4603      	mov	r3, r0
 8004370:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004378:	f040 8084 	bne.w	8004484 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800437c:	2300      	movs	r3, #0
 800437e:	77fb      	strb	r3, [r7, #31]
 8004380:	e011      	b.n	80043a6 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	461a      	mov	r2, r3
 8004388:	7ffb      	ldrb	r3, [r7, #31]
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	441a      	add	r2, r3
 800438e:	7ffb      	ldrb	r3, [r7, #31]
 8004390:	8812      	ldrh	r2, [r2, #0]
 8004392:	b292      	uxth	r2, r2
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	f107 0120 	add.w	r1, r7, #32
 800439a:	440b      	add	r3, r1
 800439c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80043a0:	7ffb      	ldrb	r3, [r7, #31]
 80043a2:	3301      	adds	r3, #1
 80043a4:	77fb      	strb	r3, [r7, #31]
 80043a6:	7ffb      	ldrb	r3, [r7, #31]
 80043a8:	2b07      	cmp	r3, #7
 80043aa:	d9ea      	bls.n	8004382 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0201 	orr.w	r2, r2, #1
 80043be:	b292      	uxth	r2, r2
 80043c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0201 	bic.w	r2, r2, #1
 80043d6:	b292      	uxth	r2, r2
 80043d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80043dc:	bf00      	nop
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0f6      	beq.n	80043de <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004402:	b292      	uxth	r2, r2
 8004404:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004408:	2300      	movs	r3, #0
 800440a:	77fb      	strb	r3, [r7, #31]
 800440c:	e010      	b.n	8004430 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800440e:	7ffb      	ldrb	r3, [r7, #31]
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	4611      	mov	r1, r2
 8004416:	7ffa      	ldrb	r2, [r7, #31]
 8004418:	0092      	lsls	r2, r2, #2
 800441a:	440a      	add	r2, r1
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	f107 0120 	add.w	r1, r7, #32
 8004422:	440b      	add	r3, r1
 8004424:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004428:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800442a:	7ffb      	ldrb	r3, [r7, #31]
 800442c:	3301      	adds	r3, #1
 800442e:	77fb      	strb	r3, [r7, #31]
 8004430:	7ffb      	ldrb	r3, [r7, #31]
 8004432:	2b07      	cmp	r3, #7
 8004434:	d9eb      	bls.n	800440e <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800443e:	b29a      	uxth	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f042 0208 	orr.w	r2, r2, #8
 8004448:	b292      	uxth	r2, r2
 800444a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004456:	b29a      	uxth	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004460:	b292      	uxth	r2, r2
 8004462:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800446e:	b29a      	uxth	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f042 0204 	orr.w	r2, r2, #4
 8004478:	b292      	uxth	r2, r2
 800447a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f006 fd38 	bl	800aef4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4618      	mov	r0, r3
 800448a:	f004 fe85 	bl	8009198 <USB_ReadInterrupts>
 800448e:	4603      	mov	r3, r0
 8004490:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004498:	d10e      	bne.n	80044b8 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80044ac:	b292      	uxth	r2, r2
 80044ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f006 fcf1 	bl	800ae9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	f004 fe6b 	bl	8009198 <USB_ReadInterrupts>
 80044c2:	4603      	mov	r3, r0
 80044c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044cc:	d10b      	bne.n	80044e6 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044e0:	b292      	uxth	r2, r2
 80044e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80044e6:	bf00      	nop
 80044e8:	3720      	adds	r7, #32
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b082      	sub	sp, #8
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
 80044f6:	460b      	mov	r3, r1
 80044f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_PCD_SetAddress+0x1a>
 8004504:	2302      	movs	r3, #2
 8004506:	e013      	b.n	8004530 <HAL_PCD_SetAddress+0x42>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	78fa      	ldrb	r2, [r7, #3]
 8004514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	78fa      	ldrb	r2, [r7, #3]
 800451e:	4611      	mov	r1, r2
 8004520:	4618      	mov	r0, r3
 8004522:	f004 fe12 	bl	800914a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	4608      	mov	r0, r1
 8004542:	4611      	mov	r1, r2
 8004544:	461a      	mov	r2, r3
 8004546:	4603      	mov	r3, r0
 8004548:	70fb      	strb	r3, [r7, #3]
 800454a:	460b      	mov	r3, r1
 800454c:	803b      	strh	r3, [r7, #0]
 800454e:	4613      	mov	r3, r2
 8004550:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004556:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800455a:	2b00      	cmp	r3, #0
 800455c:	da0e      	bge.n	800457c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800455e:	78fb      	ldrb	r3, [r7, #3]
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	4613      	mov	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	4413      	add	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2201      	movs	r2, #1
 8004578:	705a      	strb	r2, [r3, #1]
 800457a:	e00e      	b.n	800459a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800457c:	78fb      	ldrb	r3, [r7, #3]
 800457e:	f003 0207 	and.w	r2, r3, #7
 8004582:	4613      	mov	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	4413      	add	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800459a:	78fb      	ldrb	r3, [r7, #3]
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80045a6:	883a      	ldrh	r2, [r7, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	78ba      	ldrb	r2, [r7, #2]
 80045b0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	785b      	ldrb	r3, [r3, #1]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d004      	beq.n	80045c4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80045c4:	78bb      	ldrb	r3, [r7, #2]
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d102      	bne.n	80045d0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d101      	bne.n	80045de <HAL_PCD_EP_Open+0xa6>
 80045da:	2302      	movs	r3, #2
 80045dc:	e00e      	b.n	80045fc <HAL_PCD_EP_Open+0xc4>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68f9      	ldr	r1, [r7, #12]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f002 fe39 	bl	8007264 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80045fa:	7afb      	ldrb	r3, [r7, #11]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	460b      	mov	r3, r1
 800460e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004610:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004614:	2b00      	cmp	r3, #0
 8004616:	da0e      	bge.n	8004636 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004618:	78fb      	ldrb	r3, [r7, #3]
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	4413      	add	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2201      	movs	r2, #1
 8004632:	705a      	strb	r2, [r3, #1]
 8004634:	e00e      	b.n	8004654 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004636:	78fb      	ldrb	r3, [r7, #3]
 8004638:	f003 0207 	and.w	r2, r3, #7
 800463c:	4613      	mov	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	4413      	add	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004654:	78fb      	ldrb	r3, [r7, #3]
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	b2da      	uxtb	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <HAL_PCD_EP_Close+0x6a>
 800466a:	2302      	movs	r3, #2
 800466c:	e00e      	b.n	800468c <HAL_PCD_EP_Close+0x88>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68f9      	ldr	r1, [r7, #12]
 800467c:	4618      	mov	r0, r3
 800467e:	f003 f95b 	bl	8007938 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	607a      	str	r2, [r7, #4]
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	460b      	mov	r3, r1
 80046a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046a4:	7afb      	ldrb	r3, [r7, #11]
 80046a6:	f003 0207 	and.w	r2, r3, #7
 80046aa:	4613      	mov	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	4413      	add	r3, r2
 80046ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	2200      	movs	r2, #0
 80046cc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2200      	movs	r2, #0
 80046d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046d4:	7afb      	ldrb	r3, [r7, #11]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80046e0:	7afb      	ldrb	r3, [r7, #11]
 80046e2:	f003 0307 	and.w	r3, r3, #7
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d106      	bne.n	80046f8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6979      	ldr	r1, [r7, #20]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f003 fb0d 	bl	8007d10 <USB_EPStartXfer>
 80046f6:	e005      	b.n	8004704 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6979      	ldr	r1, [r7, #20]
 80046fe:	4618      	mov	r0, r3
 8004700:	f003 fb06 	bl	8007d10 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	460b      	mov	r3, r1
 8004718:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800471a:	78fb      	ldrb	r3, [r7, #3]
 800471c:	f003 0207 	and.w	r2, r3, #7
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	4613      	mov	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	440b      	add	r3, r1
 800472c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004730:	681b      	ldr	r3, [r3, #0]
}
 8004732:	4618      	mov	r0, r3
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr

0800473c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	607a      	str	r2, [r7, #4]
 8004746:	603b      	str	r3, [r7, #0]
 8004748:	460b      	mov	r3, r1
 800474a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800474c:	7afb      	ldrb	r3, [r7, #11]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	4613      	mov	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	4413      	add	r3, r2
 8004760:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	2200      	movs	r2, #0
 8004780:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2201      	movs	r2, #1
 8004786:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004788:	7afb      	ldrb	r3, [r7, #11]
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	b2da      	uxtb	r2, r3
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004794:	7afb      	ldrb	r3, [r7, #11]
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6979      	ldr	r1, [r7, #20]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f003 fab3 	bl	8007d10 <USB_EPStartXfer>
 80047aa:	e005      	b.n	80047b8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6979      	ldr	r1, [r7, #20]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f003 faac 	bl	8007d10 <USB_EPStartXfer>
  }

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b084      	sub	sp, #16
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	460b      	mov	r3, r1
 80047cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80047ce:	78fb      	ldrb	r3, [r7, #3]
 80047d0:	f003 0207 	and.w	r2, r3, #7
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d901      	bls.n	80047e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e04c      	b.n	800487a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80047e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	da0e      	bge.n	8004806 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	f003 0307 	and.w	r3, r3, #7
 80047ee:	1c5a      	adds	r2, r3, #1
 80047f0:	4613      	mov	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	4413      	add	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2201      	movs	r2, #1
 8004802:	705a      	strb	r2, [r3, #1]
 8004804:	e00c      	b.n	8004820 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004806:	78fa      	ldrb	r2, [r7, #3]
 8004808:	4613      	mov	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	4413      	add	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2201      	movs	r2, #1
 8004824:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004826:	78fb      	ldrb	r3, [r7, #3]
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	b2da      	uxtb	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_PCD_EP_SetStall+0x7e>
 800483c:	2302      	movs	r3, #2
 800483e:	e01c      	b.n	800487a <HAL_PCD_EP_SetStall+0xb8>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68f9      	ldr	r1, [r7, #12]
 800484e:	4618      	mov	r0, r3
 8004850:	f004 fb7e 	bl	8008f50 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004854:	78fb      	ldrb	r3, [r7, #3]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	2b00      	cmp	r3, #0
 800485c:	d108      	bne.n	8004870 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004868:	4619      	mov	r1, r3
 800486a:	4610      	mov	r0, r2
 800486c:	f004 fca3 	bl	80091b6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b084      	sub	sp, #16
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	460b      	mov	r3, r1
 800488c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800488e:	78fb      	ldrb	r3, [r7, #3]
 8004890:	f003 020f 	and.w	r2, r3, #15
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	429a      	cmp	r2, r3
 800489a:	d901      	bls.n	80048a0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e040      	b.n	8004922 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	da0e      	bge.n	80048c6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048a8:	78fb      	ldrb	r3, [r7, #3]
 80048aa:	f003 0307 	and.w	r3, r3, #7
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	4613      	mov	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	4413      	add	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2201      	movs	r2, #1
 80048c2:	705a      	strb	r2, [r3, #1]
 80048c4:	e00e      	b.n	80048e4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048c6:	78fb      	ldrb	r3, [r7, #3]
 80048c8:	f003 0207 	and.w	r2, r3, #7
 80048cc:	4613      	mov	r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	4413      	add	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048ea:	78fb      	ldrb	r3, [r7, #3]
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d101      	bne.n	8004904 <HAL_PCD_EP_ClrStall+0x82>
 8004900:	2302      	movs	r3, #2
 8004902:	e00e      	b.n	8004922 <HAL_PCD_EP_ClrStall+0xa0>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68f9      	ldr	r1, [r7, #12]
 8004912:	4618      	mov	r0, r3
 8004914:	f004 fb6c 	bl	8008ff0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b08e      	sub	sp, #56	; 0x38
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004932:	e2df      	b.n	8004ef4 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800493c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800493e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004940:	b2db      	uxtb	r3, r3
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800494a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800494e:	2b00      	cmp	r3, #0
 8004950:	f040 8158 	bne.w	8004c04 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004954:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004956:	f003 0310 	and.w	r3, r3, #16
 800495a:	2b00      	cmp	r3, #0
 800495c:	d152      	bne.n	8004a04 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	b29b      	uxth	r3, r3
 8004966:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800496a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496e:	81fb      	strh	r3, [r7, #14]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	89fb      	ldrh	r3, [r7, #14]
 8004976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800497a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800497e:	b29b      	uxth	r3, r3
 8004980:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	3328      	adds	r3, #40	; 0x28
 8004986:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004990:	b29b      	uxth	r3, r3
 8004992:	461a      	mov	r2, r3
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	4413      	add	r3, r2
 800499c:	3302      	adds	r3, #2
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	695a      	ldr	r2, [r3, #20]
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	441a      	add	r2, r3
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80049c2:	2100      	movs	r1, #0
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f006 fa4e 	bl	800ae66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 828e 	beq.w	8004ef4 <PCD_EP_ISR_Handler+0x5ca>
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f040 8289 	bne.w	8004ef4 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	b292      	uxth	r2, r2
 80049f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004a02:	e277      	b.n	8004ef4 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004a14:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d034      	beq.n	8004a88 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	461a      	mov	r2, r3
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	4413      	add	r3, r2
 8004a32:	3306      	adds	r3, #6
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6812      	ldr	r2, [r2, #0]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6818      	ldr	r0, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	f004 fbfa 	bl	8009256 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	881b      	ldrh	r3, [r3, #0]
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004a6e:	4013      	ands	r3, r2
 8004a70:	823b      	strh	r3, [r7, #16]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	8a3a      	ldrh	r2, [r7, #16]
 8004a78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a7c:	b292      	uxth	r2, r2
 8004a7e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f006 f9c3 	bl	800ae0c <HAL_PCD_SetupStageCallback>
 8004a86:	e235      	b.n	8004ef4 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004a88:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f280 8231 	bge.w	8004ef4 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	881b      	ldrh	r3, [r3, #0]
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	83bb      	strh	r3, [r7, #28]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	8bba      	ldrh	r2, [r7, #28]
 8004aa8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004aac:	b292      	uxth	r2, r2
 8004aae:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	461a      	mov	r2, r3
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3306      	adds	r3, #6
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6812      	ldr	r2, [r2, #0]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	69db      	ldr	r3, [r3, #28]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d019      	beq.n	8004b18 <PCD_EP_ISR_Handler+0x1ee>
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d015      	beq.n	8004b18 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6818      	ldr	r0, [r3, #0]
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	6959      	ldr	r1, [r3, #20]
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	f004 fbaa 	bl	8009256 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	695a      	ldr	r2, [r3, #20]
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	441a      	add	r2, r3
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004b10:	2100      	movs	r1, #0
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f006 f98c 	bl	800ae30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	61bb      	str	r3, [r7, #24]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	461a      	mov	r2, r3
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	61bb      	str	r3, [r7, #24]
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d112      	bne.n	8004b66 <PCD_EP_ISR_Handler+0x23c>
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	801a      	strh	r2, [r3, #0]
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	801a      	strh	r2, [r3, #0]
 8004b64:	e02f      	b.n	8004bc6 <PCD_EP_ISR_Handler+0x29c>
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	2b3e      	cmp	r3, #62	; 0x3e
 8004b6c:	d813      	bhi.n	8004b96 <PCD_EP_ISR_Handler+0x26c>
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	085b      	lsrs	r3, r3, #1
 8004b74:	633b      	str	r3, [r7, #48]	; 0x30
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <PCD_EP_ISR_Handler+0x25e>
 8004b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b84:	3301      	adds	r3, #1
 8004b86:	633b      	str	r3, [r7, #48]	; 0x30
 8004b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	029b      	lsls	r3, r3, #10
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	801a      	strh	r2, [r3, #0]
 8004b94:	e017      	b.n	8004bc6 <PCD_EP_ISR_Handler+0x29c>
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	095b      	lsrs	r3, r3, #5
 8004b9c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f003 031f 	and.w	r3, r3, #31
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d102      	bne.n	8004bb0 <PCD_EP_ISR_Handler+0x286>
 8004baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bac:	3b01      	subs	r3, #1
 8004bae:	633b      	str	r3, [r7, #48]	; 0x30
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	029b      	lsls	r3, r3, #10
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd6:	827b      	strh	r3, [r7, #18]
 8004bd8:	8a7b      	ldrh	r3, [r7, #18]
 8004bda:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004bde:	827b      	strh	r3, [r7, #18]
 8004be0:	8a7b      	ldrh	r3, [r7, #18]
 8004be2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004be6:	827b      	strh	r3, [r7, #18]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	8a7b      	ldrh	r3, [r7, #18]
 8004bee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	8013      	strh	r3, [r2, #0]
 8004c02:	e177      	b.n	8004ef4 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004c16:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f280 80ea 	bge.w	8004df4 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	461a      	mov	r2, r3
 8004c26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	881b      	ldrh	r3, [r3, #0]
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004c36:	4013      	ands	r3, r2
 8004c38:	853b      	strh	r3, [r7, #40]	; 0x28
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4413      	add	r3, r2
 8004c48:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004c4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c4e:	b292      	uxth	r2, r2
 8004c50:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004c52:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004c56:	4613      	mov	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4413      	add	r3, r2
 8004c5c:	00db      	lsls	r3, r3, #3
 8004c5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	4413      	add	r3, r2
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	7b1b      	ldrb	r3, [r3, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d122      	bne.n	8004cb6 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	4413      	add	r3, r2
 8004c84:	3306      	adds	r3, #6
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6812      	ldr	r2, [r2, #0]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c98:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004c9a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 8087 	beq.w	8004db0 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	6959      	ldr	r1, [r3, #20]
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	88da      	ldrh	r2, [r3, #6]
 8004cae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004cb0:	f004 fad1 	bl	8009256 <USB_ReadPMA>
 8004cb4:	e07c      	b.n	8004db0 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	78db      	ldrb	r3, [r3, #3]
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d108      	bne.n	8004cd0 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004cbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f923 	bl	8004f10 <HAL_PCD_EP_DB_Receive>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004cce:	e06f      	b.n	8004db0 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cea:	847b      	strh	r3, [r7, #34]	; 0x22
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	441a      	add	r2, r3
 8004cfa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004cfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	461a      	mov	r2, r3
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d021      	beq.n	8004d6e <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	461a      	mov	r2, r3
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	4413      	add	r3, r2
 8004d3e:	3302      	adds	r3, #2
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	6812      	ldr	r2, [r2, #0]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d4c:	881b      	ldrh	r3, [r3, #0]
 8004d4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d52:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004d54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d02a      	beq.n	8004db0 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6818      	ldr	r0, [r3, #0]
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	6959      	ldr	r1, [r3, #20]
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	891a      	ldrh	r2, [r3, #8]
 8004d66:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d68:	f004 fa75 	bl	8009256 <USB_ReadPMA>
 8004d6c:	e020      	b.n	8004db0 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	461a      	mov	r2, r3
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	00db      	lsls	r3, r3, #3
 8004d80:	4413      	add	r3, r2
 8004d82:	3306      	adds	r3, #6
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	6812      	ldr	r2, [r2, #0]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d96:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004d98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d008      	beq.n	8004db0 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6818      	ldr	r0, [r3, #0]
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	6959      	ldr	r1, [r3, #20]
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	895a      	ldrh	r2, [r3, #10]
 8004daa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004dac:	f004 fa53 	bl	8009256 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	69da      	ldr	r2, [r3, #28]
 8004db4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004db6:	441a      	add	r2, r3
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	695a      	ldr	r2, [r3, #20]
 8004dc0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004dc2:	441a      	add	r2, r3
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d004      	beq.n	8004dda <PCD_EP_ISR_Handler+0x4b0>
 8004dd0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d206      	bcs.n	8004de8 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	4619      	mov	r1, r3
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f006 f825 	bl	800ae30 <HAL_PCD_DataOutStageCallback>
 8004de6:	e005      	b.n	8004df4 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dee:	4618      	mov	r0, r3
 8004df0:	f002 ff8e 	bl	8007d10 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004df4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d07a      	beq.n	8004ef4 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8004dfe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	4613      	mov	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	4413      	add	r3, r2
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2c:	843b      	strh	r3, [r7, #32]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	441a      	add	r2, r3
 8004e3c:	8c3b      	ldrh	r3, [r7, #32]
 8004e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	78db      	ldrb	r3, [r3, #3]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d108      	bne.n	8004e64 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d146      	bne.n	8004ee8 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004e5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d141      	bne.n	8004ee8 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	461a      	mov	r2, r3
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	4413      	add	r3, r2
 8004e78:	3302      	adds	r3, #2
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6812      	ldr	r2, [r2, #0]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e8c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	699a      	ldr	r2, [r3, #24]
 8004e92:	8bfb      	ldrh	r3, [r7, #30]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d906      	bls.n	8004ea6 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	699a      	ldr	r2, [r3, #24]
 8004e9c:	8bfb      	ldrh	r3, [r7, #30]
 8004e9e:	1ad2      	subs	r2, r2, r3
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	619a      	str	r2, [r3, #24]
 8004ea4:	e002      	b.n	8004eac <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d106      	bne.n	8004ec2 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	4619      	mov	r1, r3
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f005 ffd3 	bl	800ae66 <HAL_PCD_DataInStageCallback>
 8004ec0:	e018      	b.n	8004ef4 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	695a      	ldr	r2, [r3, #20]
 8004ec6:	8bfb      	ldrh	r3, [r7, #30]
 8004ec8:	441a      	add	r2, r3
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	69da      	ldr	r2, [r3, #28]
 8004ed2:	8bfb      	ldrh	r3, [r7, #30]
 8004ed4:	441a      	add	r2, r3
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f002 ff15 	bl	8007d10 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004ee6:	e005      	b.n	8004ef4 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004ee8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004eea:	461a      	mov	r2, r3
 8004eec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f91b 	bl	800512a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	b21b      	sxth	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f6ff ad17 	blt.w	8004934 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3738      	adds	r7, #56	; 0x38
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b088      	sub	sp, #32
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004f1e:	88fb      	ldrh	r3, [r7, #6]
 8004f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d07e      	beq.n	8005026 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	461a      	mov	r2, r3
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	4413      	add	r3, r2
 8004f3c:	3302      	adds	r3, #2
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	6812      	ldr	r2, [r2, #0]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f50:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	8b7b      	ldrh	r3, [r7, #26]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d306      	bcc.n	8004f6a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	699a      	ldr	r2, [r3, #24]
 8004f60:	8b7b      	ldrh	r3, [r7, #26]
 8004f62:	1ad2      	subs	r2, r2, r3
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	619a      	str	r2, [r3, #24]
 8004f68:	e002      	b.n	8004f70 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d123      	bne.n	8004fc0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f92:	833b      	strh	r3, [r7, #24]
 8004f94:	8b3b      	ldrh	r3, [r7, #24]
 8004f96:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f9a:	833b      	strh	r3, [r7, #24]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	441a      	add	r2, r3
 8004faa:	8b3b      	ldrh	r3, [r7, #24]
 8004fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004fc0:	88fb      	ldrh	r3, [r7, #6]
 8004fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d01f      	beq.n	800500a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe4:	82fb      	strh	r3, [r7, #22]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	441a      	add	r2, r3
 8004ff4:	8afb      	ldrh	r3, [r7, #22]
 8004ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005002:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005006:	b29b      	uxth	r3, r3
 8005008:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800500a:	8b7b      	ldrh	r3, [r7, #26]
 800500c:	2b00      	cmp	r3, #0
 800500e:	f000 8087 	beq.w	8005120 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6818      	ldr	r0, [r3, #0]
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	6959      	ldr	r1, [r3, #20]
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	891a      	ldrh	r2, [r3, #8]
 800501e:	8b7b      	ldrh	r3, [r7, #26]
 8005020:	f004 f919 	bl	8009256 <USB_ReadPMA>
 8005024:	e07c      	b.n	8005120 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800502e:	b29b      	uxth	r3, r3
 8005030:	461a      	mov	r2, r3
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	4413      	add	r3, r2
 800503a:	3306      	adds	r3, #6
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	6812      	ldr	r2, [r2, #0]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800504e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	699a      	ldr	r2, [r3, #24]
 8005054:	8b7b      	ldrh	r3, [r7, #26]
 8005056:	429a      	cmp	r2, r3
 8005058:	d306      	bcc.n	8005068 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	699a      	ldr	r2, [r3, #24]
 800505e:	8b7b      	ldrh	r3, [r7, #26]
 8005060:	1ad2      	subs	r2, r2, r3
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	619a      	str	r2, [r3, #24]
 8005066:	e002      	b.n	800506e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2200      	movs	r2, #0
 800506c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d123      	bne.n	80050be <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	461a      	mov	r2, r3
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	b29b      	uxth	r3, r3
 8005088:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800508c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005090:	83fb      	strh	r3, [r7, #30]
 8005092:	8bfb      	ldrh	r3, [r7, #30]
 8005094:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005098:	83fb      	strh	r3, [r7, #30]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	461a      	mov	r2, r3
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	441a      	add	r2, r3
 80050a8:	8bfb      	ldrh	r3, [r7, #30]
 80050aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80050be:	88fb      	ldrh	r3, [r7, #6]
 80050c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d11f      	bne.n	8005108 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	461a      	mov	r2, r3
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	b29b      	uxth	r3, r3
 80050da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e2:	83bb      	strh	r3, [r7, #28]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	461a      	mov	r2, r3
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	441a      	add	r2, r3
 80050f2:	8bbb      	ldrh	r3, [r7, #28]
 80050f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005100:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005104:	b29b      	uxth	r3, r3
 8005106:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005108:	8b7b      	ldrh	r3, [r7, #26]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d008      	beq.n	8005120 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6818      	ldr	r0, [r3, #0]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	6959      	ldr	r1, [r3, #20]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	895a      	ldrh	r2, [r3, #10]
 800511a:	8b7b      	ldrh	r3, [r7, #26]
 800511c:	f004 f89b 	bl	8009256 <USB_ReadPMA>
    }
  }

  return count;
 8005120:	8b7b      	ldrh	r3, [r7, #26]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3720      	adds	r7, #32
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b094      	sub	sp, #80	; 0x50
 800512e:	af00      	add	r7, sp, #0
 8005130:	60f8      	str	r0, [r7, #12]
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	4613      	mov	r3, r2
 8005136:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005138:	88fb      	ldrh	r3, [r7, #6]
 800513a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 8138 	beq.w	80053b4 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800514c:	b29b      	uxth	r3, r3
 800514e:	461a      	mov	r2, r3
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	00db      	lsls	r3, r3, #3
 8005156:	4413      	add	r3, r2
 8005158:	3302      	adds	r3, #2
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	6812      	ldr	r2, [r2, #0]
 8005160:	4413      	add	r3, r2
 8005162:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800516c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	699a      	ldr	r2, [r3, #24]
 8005174:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005178:	429a      	cmp	r2, r3
 800517a:	d907      	bls.n	800518c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	699a      	ldr	r2, [r3, #24]
 8005180:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005184:	1ad2      	subs	r2, r2, r3
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	619a      	str	r2, [r3, #24]
 800518a:	e002      	b.n	8005192 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2200      	movs	r2, #0
 8005190:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d12c      	bne.n	80051f4 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	4619      	mov	r1, r3
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f005 fe60 	bl	800ae66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80051a6:	88fb      	ldrh	r3, [r7, #6]
 80051a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 823a 	beq.w	8005626 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	461a      	mov	r2, r3
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051cc:	82fb      	strh	r3, [r7, #22]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	461a      	mov	r2, r3
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	441a      	add	r2, r3
 80051dc:	8afb      	ldrh	r3, [r7, #22]
 80051de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	8013      	strh	r3, [r2, #0]
 80051f2:	e218      	b.n	8005626 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80051f4:	88fb      	ldrh	r3, [r7, #6]
 80051f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d01f      	beq.n	800523e <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4413      	add	r3, r2
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	b29b      	uxth	r3, r3
 8005210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005218:	857b      	strh	r3, [r7, #42]	; 0x2a
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	461a      	mov	r2, r3
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	441a      	add	r2, r3
 8005228:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800522a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800522e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005232:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800523a:	b29b      	uxth	r3, r3
 800523c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005244:	2b01      	cmp	r3, #1
 8005246:	f040 81ee 	bne.w	8005626 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	695a      	ldr	r2, [r3, #20]
 800524e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005252:	441a      	add	r2, r3
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	69da      	ldr	r2, [r3, #28]
 800525c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005260:	441a      	add	r2, r3
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	6a1a      	ldr	r2, [r3, #32]
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	429a      	cmp	r2, r3
 8005270:	d309      	bcc.n	8005286 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	6a1a      	ldr	r2, [r3, #32]
 800527c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800527e:	1ad2      	subs	r2, r2, r3
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	621a      	str	r2, [r3, #32]
 8005284:	e015      	b.n	80052b2 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d107      	bne.n	800529e <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 800528e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005292:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800529c:	e009      	b.n	80052b2 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2200      	movs	r2, #0
 80052b0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	785b      	ldrb	r3, [r3, #1]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d155      	bne.n	8005366 <HAL_PCD_EP_DB_Transmit+0x23c>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	61fb      	str	r3, [r7, #28]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	461a      	mov	r2, r3
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	4413      	add	r3, r2
 80052d0:	61fb      	str	r3, [r7, #28]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	011a      	lsls	r2, r3, #4
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	4413      	add	r3, r2
 80052dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052e0:	61bb      	str	r3, [r7, #24]
 80052e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d112      	bne.n	800530e <HAL_PCD_EP_DB_Transmit+0x1e4>
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	801a      	strh	r2, [r3, #0]
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005302:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005306:	b29a      	uxth	r2, r3
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	801a      	strh	r2, [r3, #0]
 800530c:	e047      	b.n	800539e <HAL_PCD_EP_DB_Transmit+0x274>
 800530e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005310:	2b3e      	cmp	r3, #62	; 0x3e
 8005312:	d811      	bhi.n	8005338 <HAL_PCD_EP_DB_Transmit+0x20e>
 8005314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005316:	085b      	lsrs	r3, r3, #1
 8005318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800531a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b00      	cmp	r3, #0
 8005322:	d002      	beq.n	800532a <HAL_PCD_EP_DB_Transmit+0x200>
 8005324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005326:	3301      	adds	r3, #1
 8005328:	62fb      	str	r3, [r7, #44]	; 0x2c
 800532a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532c:	b29b      	uxth	r3, r3
 800532e:	029b      	lsls	r3, r3, #10
 8005330:	b29a      	uxth	r2, r3
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	801a      	strh	r2, [r3, #0]
 8005336:	e032      	b.n	800539e <HAL_PCD_EP_DB_Transmit+0x274>
 8005338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800533a:	095b      	lsrs	r3, r3, #5
 800533c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800533e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005340:	f003 031f 	and.w	r3, r3, #31
 8005344:	2b00      	cmp	r3, #0
 8005346:	d102      	bne.n	800534e <HAL_PCD_EP_DB_Transmit+0x224>
 8005348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534a:	3b01      	subs	r3, #1
 800534c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800534e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005350:	b29b      	uxth	r3, r3
 8005352:	029b      	lsls	r3, r3, #10
 8005354:	b29b      	uxth	r3, r3
 8005356:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800535a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800535e:	b29a      	uxth	r2, r3
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	801a      	strh	r2, [r3, #0]
 8005364:	e01b      	b.n	800539e <HAL_PCD_EP_DB_Transmit+0x274>
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	785b      	ldrb	r3, [r3, #1]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d117      	bne.n	800539e <HAL_PCD_EP_DB_Transmit+0x274>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	627b      	str	r3, [r7, #36]	; 0x24
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800537c:	b29b      	uxth	r3, r3
 800537e:	461a      	mov	r2, r3
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	4413      	add	r3, r2
 8005384:	627b      	str	r3, [r7, #36]	; 0x24
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	011a      	lsls	r2, r3, #4
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	4413      	add	r3, r2
 8005390:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005394:	623b      	str	r3, [r7, #32]
 8005396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005398:	b29a      	uxth	r2, r3
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6818      	ldr	r0, [r3, #0]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	6959      	ldr	r1, [r3, #20]
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	891a      	ldrh	r2, [r3, #8]
 80053aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	f003 ff0d 	bl	80091cc <USB_WritePMA>
 80053b2:	e138      	b.n	8005626 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053bc:	b29b      	uxth	r3, r3
 80053be:	461a      	mov	r2, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	00db      	lsls	r3, r3, #3
 80053c6:	4413      	add	r3, r2
 80053c8:	3306      	adds	r3, #6
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	6812      	ldr	r2, [r2, #0]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053d6:	881b      	ldrh	r3, [r3, #0]
 80053d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053dc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	699a      	ldr	r2, [r3, #24]
 80053e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d307      	bcc.n	80053fc <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	699a      	ldr	r2, [r3, #24]
 80053f0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80053f4:	1ad2      	subs	r2, r2, r3
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	619a      	str	r2, [r3, #24]
 80053fa:	e002      	b.n	8005402 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2200      	movs	r2, #0
 8005400:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d12e      	bne.n	8005468 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	4619      	mov	r1, r3
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f005 fd28 	bl	800ae66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005416:	88fb      	ldrh	r3, [r7, #6]
 8005418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800541c:	2b00      	cmp	r3, #0
 800541e:	f040 8102 	bne.w	8005626 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	461a      	mov	r2, r3
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	b29b      	uxth	r3, r3
 8005434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	441a      	add	r2, r3
 800544e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800545a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800545e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005462:	b29b      	uxth	r3, r3
 8005464:	8013      	strh	r3, [r2, #0]
 8005466:	e0de      	b.n	8005626 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005468:	88fb      	ldrh	r3, [r7, #6]
 800546a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d11f      	bne.n	80054b2 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	461a      	mov	r2, r3
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	b29b      	uxth	r3, r3
 8005484:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548c:	867b      	strh	r3, [r7, #50]	; 0x32
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	461a      	mov	r2, r3
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	441a      	add	r2, r3
 800549c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800549e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	f040 80b4 	bne.w	8005626 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	695a      	ldr	r2, [r3, #20]
 80054c2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80054c6:	441a      	add	r2, r3
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	69da      	ldr	r2, [r3, #28]
 80054d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80054d4:	441a      	add	r2, r3
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	6a1a      	ldr	r2, [r3, #32]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d309      	bcc.n	80054fa <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	6a1a      	ldr	r2, [r3, #32]
 80054f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054f2:	1ad2      	subs	r2, r2, r3
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	621a      	str	r2, [r3, #32]
 80054f8:	e015      	b.n	8005526 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d107      	bne.n	8005512 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8005502:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005506:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005510:	e009      	b.n	8005526 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2200      	movs	r2, #0
 800551c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	643b      	str	r3, [r7, #64]	; 0x40
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	785b      	ldrb	r3, [r3, #1]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d155      	bne.n	80055e0 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	63bb      	str	r3, [r7, #56]	; 0x38
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005542:	b29b      	uxth	r3, r3
 8005544:	461a      	mov	r2, r3
 8005546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005548:	4413      	add	r3, r2
 800554a:	63bb      	str	r3, [r7, #56]	; 0x38
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	011a      	lsls	r2, r3, #4
 8005552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005554:	4413      	add	r3, r2
 8005556:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800555a:	637b      	str	r3, [r7, #52]	; 0x34
 800555c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800555e:	2b00      	cmp	r3, #0
 8005560:	d112      	bne.n	8005588 <HAL_PCD_EP_DB_Transmit+0x45e>
 8005562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005564:	881b      	ldrh	r3, [r3, #0]
 8005566:	b29b      	uxth	r3, r3
 8005568:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800556c:	b29a      	uxth	r2, r3
 800556e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005570:	801a      	strh	r2, [r3, #0]
 8005572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	b29b      	uxth	r3, r3
 8005578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800557c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005580:	b29a      	uxth	r2, r3
 8005582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005584:	801a      	strh	r2, [r3, #0]
 8005586:	e044      	b.n	8005612 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8005588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800558a:	2b3e      	cmp	r3, #62	; 0x3e
 800558c:	d811      	bhi.n	80055b2 <HAL_PCD_EP_DB_Transmit+0x488>
 800558e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005590:	085b      	lsrs	r3, r3, #1
 8005592:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <HAL_PCD_EP_DB_Transmit+0x47a>
 800559e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055a0:	3301      	adds	r3, #1
 80055a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	029b      	lsls	r3, r3, #10
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ae:	801a      	strh	r2, [r3, #0]
 80055b0:	e02f      	b.n	8005612 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80055b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055b4:	095b      	lsrs	r3, r3, #5
 80055b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ba:	f003 031f 	and.w	r3, r3, #31
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d102      	bne.n	80055c8 <HAL_PCD_EP_DB_Transmit+0x49e>
 80055c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c4:	3b01      	subs	r3, #1
 80055c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	029b      	lsls	r3, r3, #10
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055d8:	b29a      	uxth	r2, r3
 80055da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055dc:	801a      	strh	r2, [r3, #0]
 80055de:	e018      	b.n	8005612 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	785b      	ldrb	r3, [r3, #1]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d114      	bne.n	8005612 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	461a      	mov	r2, r3
 80055f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055f6:	4413      	add	r3, r2
 80055f8:	643b      	str	r3, [r7, #64]	; 0x40
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	011a      	lsls	r2, r3, #4
 8005600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005602:	4413      	add	r3, r2
 8005604:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800560a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800560c:	b29a      	uxth	r2, r3
 800560e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005610:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6818      	ldr	r0, [r3, #0]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	6959      	ldr	r1, [r3, #20]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	895a      	ldrh	r2, [r3, #10]
 800561e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005620:	b29b      	uxth	r3, r3
 8005622:	f003 fdd3 	bl	80091cc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	461a      	mov	r2, r3
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	b29b      	uxth	r3, r3
 8005638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800563c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005640:	82bb      	strh	r3, [r7, #20]
 8005642:	8abb      	ldrh	r3, [r7, #20]
 8005644:	f083 0310 	eor.w	r3, r3, #16
 8005648:	82bb      	strh	r3, [r7, #20]
 800564a:	8abb      	ldrh	r3, [r7, #20]
 800564c:	f083 0320 	eor.w	r3, r3, #32
 8005650:	82bb      	strh	r3, [r7, #20]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	461a      	mov	r2, r3
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	441a      	add	r2, r3
 8005660:	8abb      	ldrh	r3, [r7, #20]
 8005662:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005666:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800566a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800566e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005672:	b29b      	uxth	r3, r3
 8005674:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3750      	adds	r7, #80	; 0x50
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	607b      	str	r3, [r7, #4]
 800568a:	460b      	mov	r3, r1
 800568c:	817b      	strh	r3, [r7, #10]
 800568e:	4613      	mov	r3, r2
 8005690:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005692:	897b      	ldrh	r3, [r7, #10]
 8005694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00b      	beq.n	80056b6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800569e:	897b      	ldrh	r3, [r7, #10]
 80056a0:	f003 0307 	and.w	r3, r3, #7
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	4613      	mov	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	00db      	lsls	r3, r3, #3
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	4413      	add	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]
 80056b4:	e009      	b.n	80056ca <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80056b6:	897a      	ldrh	r2, [r7, #10]
 80056b8:	4613      	mov	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80056ca:	893b      	ldrh	r3, [r7, #8]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d107      	bne.n	80056e0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2200      	movs	r2, #0
 80056d4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	b29a      	uxth	r2, r3
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	80da      	strh	r2, [r3, #6]
 80056de:	e00b      	b.n	80056f8 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2201      	movs	r2, #1
 80056e4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	0c1b      	lsrs	r3, r3, #16
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	371c      	adds	r7, #28
 80056fe:	46bd      	mov	sp, r7
 8005700:	bc80      	pop	{r7}
 8005702:	4770      	bx	lr

08005704 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e26c      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	f000 8087 	beq.w	8005832 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005724:	4b92      	ldr	r3, [pc, #584]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f003 030c 	and.w	r3, r3, #12
 800572c:	2b04      	cmp	r3, #4
 800572e:	d00c      	beq.n	800574a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005730:	4b8f      	ldr	r3, [pc, #572]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f003 030c 	and.w	r3, r3, #12
 8005738:	2b08      	cmp	r3, #8
 800573a:	d112      	bne.n	8005762 <HAL_RCC_OscConfig+0x5e>
 800573c:	4b8c      	ldr	r3, [pc, #560]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005748:	d10b      	bne.n	8005762 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800574a:	4b89      	ldr	r3, [pc, #548]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d06c      	beq.n	8005830 <HAL_RCC_OscConfig+0x12c>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d168      	bne.n	8005830 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e246      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800576a:	d106      	bne.n	800577a <HAL_RCC_OscConfig+0x76>
 800576c:	4b80      	ldr	r3, [pc, #512]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a7f      	ldr	r2, [pc, #508]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 8005772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005776:	6013      	str	r3, [r2, #0]
 8005778:	e02e      	b.n	80057d8 <HAL_RCC_OscConfig+0xd4>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10c      	bne.n	800579c <HAL_RCC_OscConfig+0x98>
 8005782:	4b7b      	ldr	r3, [pc, #492]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a7a      	ldr	r2, [pc, #488]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 8005788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	4b78      	ldr	r3, [pc, #480]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a77      	ldr	r2, [pc, #476]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 8005794:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	e01d      	b.n	80057d8 <HAL_RCC_OscConfig+0xd4>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057a4:	d10c      	bne.n	80057c0 <HAL_RCC_OscConfig+0xbc>
 80057a6:	4b72      	ldr	r3, [pc, #456]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a71      	ldr	r2, [pc, #452]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 80057ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	4b6f      	ldr	r3, [pc, #444]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a6e      	ldr	r2, [pc, #440]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 80057b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	e00b      	b.n	80057d8 <HAL_RCC_OscConfig+0xd4>
 80057c0:	4b6b      	ldr	r3, [pc, #428]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a6a      	ldr	r2, [pc, #424]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 80057c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ca:	6013      	str	r3, [r2, #0]
 80057cc:	4b68      	ldr	r3, [pc, #416]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a67      	ldr	r2, [pc, #412]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 80057d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d013      	beq.n	8005808 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e0:	f7fd fa32 	bl	8002c48 <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057e8:	f7fd fa2e 	bl	8002c48 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b64      	cmp	r3, #100	; 0x64
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e1fa      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057fa:	4b5d      	ldr	r3, [pc, #372]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0f0      	beq.n	80057e8 <HAL_RCC_OscConfig+0xe4>
 8005806:	e014      	b.n	8005832 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005808:	f7fd fa1e 	bl	8002c48 <HAL_GetTick>
 800580c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800580e:	e008      	b.n	8005822 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005810:	f7fd fa1a 	bl	8002c48 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b64      	cmp	r3, #100	; 0x64
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e1e6      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005822:	4b53      	ldr	r3, [pc, #332]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1f0      	bne.n	8005810 <HAL_RCC_OscConfig+0x10c>
 800582e:	e000      	b.n	8005832 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d063      	beq.n	8005906 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800583e:	4b4c      	ldr	r3, [pc, #304]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f003 030c 	and.w	r3, r3, #12
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00b      	beq.n	8005862 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800584a:	4b49      	ldr	r3, [pc, #292]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f003 030c 	and.w	r3, r3, #12
 8005852:	2b08      	cmp	r3, #8
 8005854:	d11c      	bne.n	8005890 <HAL_RCC_OscConfig+0x18c>
 8005856:	4b46      	ldr	r3, [pc, #280]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d116      	bne.n	8005890 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005862:	4b43      	ldr	r3, [pc, #268]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d005      	beq.n	800587a <HAL_RCC_OscConfig+0x176>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d001      	beq.n	800587a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e1ba      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800587a:	4b3d      	ldr	r3, [pc, #244]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	4939      	ldr	r1, [pc, #228]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 800588a:	4313      	orrs	r3, r2
 800588c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800588e:	e03a      	b.n	8005906 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d020      	beq.n	80058da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005898:	4b36      	ldr	r3, [pc, #216]	; (8005974 <HAL_RCC_OscConfig+0x270>)
 800589a:	2201      	movs	r2, #1
 800589c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800589e:	f7fd f9d3 	bl	8002c48 <HAL_GetTick>
 80058a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058a4:	e008      	b.n	80058b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058a6:	f7fd f9cf 	bl	8002c48 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d901      	bls.n	80058b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e19b      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058b8:	4b2d      	ldr	r3, [pc, #180]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0f0      	beq.n	80058a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058c4:	4b2a      	ldr	r3, [pc, #168]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	00db      	lsls	r3, r3, #3
 80058d2:	4927      	ldr	r1, [pc, #156]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	600b      	str	r3, [r1, #0]
 80058d8:	e015      	b.n	8005906 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058da:	4b26      	ldr	r3, [pc, #152]	; (8005974 <HAL_RCC_OscConfig+0x270>)
 80058dc:	2200      	movs	r2, #0
 80058de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e0:	f7fd f9b2 	bl	8002c48 <HAL_GetTick>
 80058e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058e6:	e008      	b.n	80058fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058e8:	f7fd f9ae 	bl	8002c48 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e17a      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058fa:	4b1d      	ldr	r3, [pc, #116]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1f0      	bne.n	80058e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0308 	and.w	r3, r3, #8
 800590e:	2b00      	cmp	r3, #0
 8005910:	d03a      	beq.n	8005988 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d019      	beq.n	800594e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800591a:	4b17      	ldr	r3, [pc, #92]	; (8005978 <HAL_RCC_OscConfig+0x274>)
 800591c:	2201      	movs	r2, #1
 800591e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005920:	f7fd f992 	bl	8002c48 <HAL_GetTick>
 8005924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005926:	e008      	b.n	800593a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005928:	f7fd f98e 	bl	8002c48 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e15a      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800593a:	4b0d      	ldr	r3, [pc, #52]	; (8005970 <HAL_RCC_OscConfig+0x26c>)
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0f0      	beq.n	8005928 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005946:	2001      	movs	r0, #1
 8005948:	f000 fac4 	bl	8005ed4 <RCC_Delay>
 800594c:	e01c      	b.n	8005988 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800594e:	4b0a      	ldr	r3, [pc, #40]	; (8005978 <HAL_RCC_OscConfig+0x274>)
 8005950:	2200      	movs	r2, #0
 8005952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005954:	f7fd f978 	bl	8002c48 <HAL_GetTick>
 8005958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800595a:	e00f      	b.n	800597c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800595c:	f7fd f974 	bl	8002c48 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b02      	cmp	r3, #2
 8005968:	d908      	bls.n	800597c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e140      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4ec>
 800596e:	bf00      	nop
 8005970:	40021000 	.word	0x40021000
 8005974:	42420000 	.word	0x42420000
 8005978:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800597c:	4b9e      	ldr	r3, [pc, #632]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 800597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1e9      	bne.n	800595c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0304 	and.w	r3, r3, #4
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 80a6 	beq.w	8005ae2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005996:	2300      	movs	r3, #0
 8005998:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800599a:	4b97      	ldr	r3, [pc, #604]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10d      	bne.n	80059c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059a6:	4b94      	ldr	r3, [pc, #592]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	4a93      	ldr	r2, [pc, #588]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 80059ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059b0:	61d3      	str	r3, [r2, #28]
 80059b2:	4b91      	ldr	r3, [pc, #580]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ba:	60bb      	str	r3, [r7, #8]
 80059bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059be:	2301      	movs	r3, #1
 80059c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059c2:	4b8e      	ldr	r3, [pc, #568]	; (8005bfc <HAL_RCC_OscConfig+0x4f8>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d118      	bne.n	8005a00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059ce:	4b8b      	ldr	r3, [pc, #556]	; (8005bfc <HAL_RCC_OscConfig+0x4f8>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a8a      	ldr	r2, [pc, #552]	; (8005bfc <HAL_RCC_OscConfig+0x4f8>)
 80059d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059da:	f7fd f935 	bl	8002c48 <HAL_GetTick>
 80059de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059e0:	e008      	b.n	80059f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059e2:	f7fd f931 	bl	8002c48 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	2b64      	cmp	r3, #100	; 0x64
 80059ee:	d901      	bls.n	80059f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e0fd      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059f4:	4b81      	ldr	r3, [pc, #516]	; (8005bfc <HAL_RCC_OscConfig+0x4f8>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d0f0      	beq.n	80059e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d106      	bne.n	8005a16 <HAL_RCC_OscConfig+0x312>
 8005a08:	4b7b      	ldr	r3, [pc, #492]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	4a7a      	ldr	r2, [pc, #488]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 8005a0e:	f043 0301 	orr.w	r3, r3, #1
 8005a12:	6213      	str	r3, [r2, #32]
 8005a14:	e02d      	b.n	8005a72 <HAL_RCC_OscConfig+0x36e>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10c      	bne.n	8005a38 <HAL_RCC_OscConfig+0x334>
 8005a1e:	4b76      	ldr	r3, [pc, #472]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	4a75      	ldr	r2, [pc, #468]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 8005a24:	f023 0301 	bic.w	r3, r3, #1
 8005a28:	6213      	str	r3, [r2, #32]
 8005a2a:	4b73      	ldr	r3, [pc, #460]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	4a72      	ldr	r2, [pc, #456]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 8005a30:	f023 0304 	bic.w	r3, r3, #4
 8005a34:	6213      	str	r3, [r2, #32]
 8005a36:	e01c      	b.n	8005a72 <HAL_RCC_OscConfig+0x36e>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	2b05      	cmp	r3, #5
 8005a3e:	d10c      	bne.n	8005a5a <HAL_RCC_OscConfig+0x356>
 8005a40:	4b6d      	ldr	r3, [pc, #436]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	4a6c      	ldr	r2, [pc, #432]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 8005a46:	f043 0304 	orr.w	r3, r3, #4
 8005a4a:	6213      	str	r3, [r2, #32]
 8005a4c:	4b6a      	ldr	r3, [pc, #424]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	4a69      	ldr	r2, [pc, #420]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 8005a52:	f043 0301 	orr.w	r3, r3, #1
 8005a56:	6213      	str	r3, [r2, #32]
 8005a58:	e00b      	b.n	8005a72 <HAL_RCC_OscConfig+0x36e>
 8005a5a:	4b67      	ldr	r3, [pc, #412]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	4a66      	ldr	r2, [pc, #408]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 8005a60:	f023 0301 	bic.w	r3, r3, #1
 8005a64:	6213      	str	r3, [r2, #32]
 8005a66:	4b64      	ldr	r3, [pc, #400]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	4a63      	ldr	r2, [pc, #396]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 8005a6c:	f023 0304 	bic.w	r3, r3, #4
 8005a70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d015      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a7a:	f7fd f8e5 	bl	8002c48 <HAL_GetTick>
 8005a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a80:	e00a      	b.n	8005a98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a82:	f7fd f8e1 	bl	8002c48 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d901      	bls.n	8005a98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e0ab      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a98:	4b57      	ldr	r3, [pc, #348]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d0ee      	beq.n	8005a82 <HAL_RCC_OscConfig+0x37e>
 8005aa4:	e014      	b.n	8005ad0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005aa6:	f7fd f8cf 	bl	8002c48 <HAL_GetTick>
 8005aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aac:	e00a      	b.n	8005ac4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aae:	f7fd f8cb 	bl	8002c48 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d901      	bls.n	8005ac4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e095      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ac4:	4b4c      	ldr	r3, [pc, #304]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1ee      	bne.n	8005aae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ad0:	7dfb      	ldrb	r3, [r7, #23]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d105      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ad6:	4b48      	ldr	r3, [pc, #288]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	4a47      	ldr	r2, [pc, #284]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 8005adc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ae0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f000 8081 	beq.w	8005bee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005aec:	4b42      	ldr	r3, [pc, #264]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f003 030c 	and.w	r3, r3, #12
 8005af4:	2b08      	cmp	r3, #8
 8005af6:	d061      	beq.n	8005bbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	69db      	ldr	r3, [r3, #28]
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d146      	bne.n	8005b8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b00:	4b3f      	ldr	r3, [pc, #252]	; (8005c00 <HAL_RCC_OscConfig+0x4fc>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b06:	f7fd f89f 	bl	8002c48 <HAL_GetTick>
 8005b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b0c:	e008      	b.n	8005b20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b0e:	f7fd f89b 	bl	8002c48 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d901      	bls.n	8005b20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e067      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b20:	4b35      	ldr	r3, [pc, #212]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1f0      	bne.n	8005b0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b34:	d108      	bne.n	8005b48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005b36:	4b30      	ldr	r3, [pc, #192]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	492d      	ldr	r1, [pc, #180]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b48:	4b2b      	ldr	r3, [pc, #172]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a19      	ldr	r1, [r3, #32]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	430b      	orrs	r3, r1
 8005b5a:	4927      	ldr	r1, [pc, #156]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b60:	4b27      	ldr	r3, [pc, #156]	; (8005c00 <HAL_RCC_OscConfig+0x4fc>)
 8005b62:	2201      	movs	r2, #1
 8005b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b66:	f7fd f86f 	bl	8002c48 <HAL_GetTick>
 8005b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b6c:	e008      	b.n	8005b80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b6e:	f7fd f86b 	bl	8002c48 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d901      	bls.n	8005b80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e037      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b80:	4b1d      	ldr	r3, [pc, #116]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0f0      	beq.n	8005b6e <HAL_RCC_OscConfig+0x46a>
 8005b8c:	e02f      	b.n	8005bee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b8e:	4b1c      	ldr	r3, [pc, #112]	; (8005c00 <HAL_RCC_OscConfig+0x4fc>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b94:	f7fd f858 	bl	8002c48 <HAL_GetTick>
 8005b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b9c:	f7fd f854 	bl	8002c48 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e020      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bae:	4b12      	ldr	r3, [pc, #72]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1f0      	bne.n	8005b9c <HAL_RCC_OscConfig+0x498>
 8005bba:	e018      	b.n	8005bee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d101      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e013      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005bc8:	4b0b      	ldr	r3, [pc, #44]	; (8005bf8 <HAL_RCC_OscConfig+0x4f4>)
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d106      	bne.n	8005bea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d001      	beq.n	8005bee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e000      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3718      	adds	r7, #24
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	40021000 	.word	0x40021000
 8005bfc:	40007000 	.word	0x40007000
 8005c00:	42420060 	.word	0x42420060

08005c04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e0d0      	b.n	8005dba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c18:	4b6a      	ldr	r3, [pc, #424]	; (8005dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d910      	bls.n	8005c48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c26:	4b67      	ldr	r3, [pc, #412]	; (8005dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f023 0207 	bic.w	r2, r3, #7
 8005c2e:	4965      	ldr	r1, [pc, #404]	; (8005dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c36:	4b63      	ldr	r3, [pc, #396]	; (8005dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0307 	and.w	r3, r3, #7
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d001      	beq.n	8005c48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e0b8      	b.n	8005dba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d020      	beq.n	8005c96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0304 	and.w	r3, r3, #4
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d005      	beq.n	8005c6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c60:	4b59      	ldr	r3, [pc, #356]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	4a58      	ldr	r2, [pc, #352]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0308 	and.w	r3, r3, #8
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d005      	beq.n	8005c84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c78:	4b53      	ldr	r3, [pc, #332]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	4a52      	ldr	r2, [pc, #328]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005c82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c84:	4b50      	ldr	r3, [pc, #320]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	494d      	ldr	r1, [pc, #308]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d040      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d107      	bne.n	8005cba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005caa:	4b47      	ldr	r3, [pc, #284]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d115      	bne.n	8005ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e07f      	b.n	8005dba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d107      	bne.n	8005cd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cc2:	4b41      	ldr	r3, [pc, #260]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d109      	bne.n	8005ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e073      	b.n	8005dba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cd2:	4b3d      	ldr	r3, [pc, #244]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e06b      	b.n	8005dba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ce2:	4b39      	ldr	r3, [pc, #228]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f023 0203 	bic.w	r2, r3, #3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	4936      	ldr	r1, [pc, #216]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cf4:	f7fc ffa8 	bl	8002c48 <HAL_GetTick>
 8005cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cfa:	e00a      	b.n	8005d12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cfc:	f7fc ffa4 	bl	8002c48 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e053      	b.n	8005dba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d12:	4b2d      	ldr	r3, [pc, #180]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f003 020c 	and.w	r2, r3, #12
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d1eb      	bne.n	8005cfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d24:	4b27      	ldr	r3, [pc, #156]	; (8005dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d210      	bcs.n	8005d54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d32:	4b24      	ldr	r3, [pc, #144]	; (8005dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f023 0207 	bic.w	r2, r3, #7
 8005d3a:	4922      	ldr	r1, [pc, #136]	; (8005dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d42:	4b20      	ldr	r3, [pc, #128]	; (8005dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0307 	and.w	r3, r3, #7
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d001      	beq.n	8005d54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e032      	b.n	8005dba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0304 	and.w	r3, r3, #4
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d008      	beq.n	8005d72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d60:	4b19      	ldr	r3, [pc, #100]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	4916      	ldr	r1, [pc, #88]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0308 	and.w	r3, r3, #8
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d009      	beq.n	8005d92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d7e:	4b12      	ldr	r3, [pc, #72]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	00db      	lsls	r3, r3, #3
 8005d8c:	490e      	ldr	r1, [pc, #56]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d92:	f000 f821 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 8005d96:	4602      	mov	r2, r0
 8005d98:	4b0b      	ldr	r3, [pc, #44]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	091b      	lsrs	r3, r3, #4
 8005d9e:	f003 030f 	and.w	r3, r3, #15
 8005da2:	490a      	ldr	r1, [pc, #40]	; (8005dcc <HAL_RCC_ClockConfig+0x1c8>)
 8005da4:	5ccb      	ldrb	r3, [r1, r3]
 8005da6:	fa22 f303 	lsr.w	r3, r2, r3
 8005daa:	4a09      	ldr	r2, [pc, #36]	; (8005dd0 <HAL_RCC_ClockConfig+0x1cc>)
 8005dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005dae:	4b09      	ldr	r3, [pc, #36]	; (8005dd4 <HAL_RCC_ClockConfig+0x1d0>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fc ff06 	bl	8002bc4 <HAL_InitTick>

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	40022000 	.word	0x40022000
 8005dc8:	40021000 	.word	0x40021000
 8005dcc:	0800c8b8 	.word	0x0800c8b8
 8005dd0:	20000010 	.word	0x20000010
 8005dd4:	20000014 	.word	0x20000014

08005dd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dd8:	b490      	push	{r4, r7}
 8005dda:	b08a      	sub	sp, #40	; 0x28
 8005ddc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005dde:	4b2a      	ldr	r3, [pc, #168]	; (8005e88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005de0:	1d3c      	adds	r4, r7, #4
 8005de2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005de4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005de8:	f240 2301 	movw	r3, #513	; 0x201
 8005dec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	61fb      	str	r3, [r7, #28]
 8005df2:	2300      	movs	r3, #0
 8005df4:	61bb      	str	r3, [r7, #24]
 8005df6:	2300      	movs	r3, #0
 8005df8:	627b      	str	r3, [r7, #36]	; 0x24
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005e02:	4b22      	ldr	r3, [pc, #136]	; (8005e8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	f003 030c 	and.w	r3, r3, #12
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d002      	beq.n	8005e18 <HAL_RCC_GetSysClockFreq+0x40>
 8005e12:	2b08      	cmp	r3, #8
 8005e14:	d003      	beq.n	8005e1e <HAL_RCC_GetSysClockFreq+0x46>
 8005e16:	e02d      	b.n	8005e74 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e18:	4b1d      	ldr	r3, [pc, #116]	; (8005e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e1a:	623b      	str	r3, [r7, #32]
      break;
 8005e1c:	e02d      	b.n	8005e7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	0c9b      	lsrs	r3, r3, #18
 8005e22:	f003 030f 	and.w	r3, r3, #15
 8005e26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005e30:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d013      	beq.n	8005e64 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e3c:	4b13      	ldr	r3, [pc, #76]	; (8005e8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	0c5b      	lsrs	r3, r3, #17
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005e50:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	4a0e      	ldr	r2, [pc, #56]	; (8005e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e56:	fb02 f203 	mul.w	r2, r2, r3
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e60:	627b      	str	r3, [r7, #36]	; 0x24
 8005e62:	e004      	b.n	8005e6e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	4a0b      	ldr	r2, [pc, #44]	; (8005e94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e68:	fb02 f303 	mul.w	r3, r2, r3
 8005e6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	623b      	str	r3, [r7, #32]
      break;
 8005e72:	e002      	b.n	8005e7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e74:	4b06      	ldr	r3, [pc, #24]	; (8005e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e76:	623b      	str	r3, [r7, #32]
      break;
 8005e78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3728      	adds	r7, #40	; 0x28
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bc90      	pop	{r4, r7}
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	0800c850 	.word	0x0800c850
 8005e8c:	40021000 	.word	0x40021000
 8005e90:	007a1200 	.word	0x007a1200
 8005e94:	003d0900 	.word	0x003d0900

08005e98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e9c:	4b02      	ldr	r3, [pc, #8]	; (8005ea8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bc80      	pop	{r7}
 8005ea6:	4770      	bx	lr
 8005ea8:	20000010 	.word	0x20000010

08005eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005eb0:	f7ff fff2 	bl	8005e98 <HAL_RCC_GetHCLKFreq>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	4b05      	ldr	r3, [pc, #20]	; (8005ecc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	0adb      	lsrs	r3, r3, #11
 8005ebc:	f003 0307 	and.w	r3, r3, #7
 8005ec0:	4903      	ldr	r1, [pc, #12]	; (8005ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ec2:	5ccb      	ldrb	r3, [r1, r3]
 8005ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	40021000 	.word	0x40021000
 8005ed0:	0800c8c8 	.word	0x0800c8c8

08005ed4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005edc:	4b0a      	ldr	r3, [pc, #40]	; (8005f08 <RCC_Delay+0x34>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a0a      	ldr	r2, [pc, #40]	; (8005f0c <RCC_Delay+0x38>)
 8005ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee6:	0a5b      	lsrs	r3, r3, #9
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	fb02 f303 	mul.w	r3, r2, r3
 8005eee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ef0:	bf00      	nop
  }
  while (Delay --);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	1e5a      	subs	r2, r3, #1
 8005ef6:	60fa      	str	r2, [r7, #12]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1f9      	bne.n	8005ef0 <RCC_Delay+0x1c>
}
 8005efc:	bf00      	nop
 8005efe:	bf00      	nop
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bc80      	pop	{r7}
 8005f06:	4770      	bx	lr
 8005f08:	20000010 	.word	0x20000010
 8005f0c:	10624dd3 	.word	0x10624dd3

08005f10 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	613b      	str	r3, [r7, #16]
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0301 	and.w	r3, r3, #1
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d07d      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f30:	4b4f      	ldr	r3, [pc, #316]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f32:	69db      	ldr	r3, [r3, #28]
 8005f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10d      	bne.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f3c:	4b4c      	ldr	r3, [pc, #304]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f3e:	69db      	ldr	r3, [r3, #28]
 8005f40:	4a4b      	ldr	r2, [pc, #300]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f46:	61d3      	str	r3, [r2, #28]
 8005f48:	4b49      	ldr	r3, [pc, #292]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f50:	60bb      	str	r3, [r7, #8]
 8005f52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f54:	2301      	movs	r3, #1
 8005f56:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f58:	4b46      	ldr	r3, [pc, #280]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d118      	bne.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f64:	4b43      	ldr	r3, [pc, #268]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a42      	ldr	r2, [pc, #264]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f70:	f7fc fe6a 	bl	8002c48 <HAL_GetTick>
 8005f74:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f76:	e008      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f78:	f7fc fe66 	bl	8002c48 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b64      	cmp	r3, #100	; 0x64
 8005f84:	d901      	bls.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e06d      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f8a:	4b3a      	ldr	r3, [pc, #232]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d0f0      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f96:	4b36      	ldr	r3, [pc, #216]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f9e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d02e      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d027      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fb4:	4b2e      	ldr	r3, [pc, #184]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fb6:	6a1b      	ldr	r3, [r3, #32]
 8005fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fbc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fbe:	4b2e      	ldr	r3, [pc, #184]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005fc4:	4b2c      	ldr	r3, [pc, #176]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005fca:	4a29      	ldr	r2, [pc, #164]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d014      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fda:	f7fc fe35 	bl	8002c48 <HAL_GetTick>
 8005fde:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fe0:	e00a      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fe2:	f7fc fe31 	bl	8002c48 <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d901      	bls.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e036      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ff8:	4b1d      	ldr	r3, [pc, #116]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d0ee      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006004:	4b1a      	ldr	r3, [pc, #104]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	4917      	ldr	r1, [pc, #92]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006012:	4313      	orrs	r3, r2
 8006014:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006016:	7dfb      	ldrb	r3, [r7, #23]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d105      	bne.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800601c:	4b14      	ldr	r3, [pc, #80]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800601e:	69db      	ldr	r3, [r3, #28]
 8006020:	4a13      	ldr	r2, [pc, #76]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006026:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b00      	cmp	r3, #0
 8006032:	d008      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006034:	4b0e      	ldr	r3, [pc, #56]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	490b      	ldr	r1, [pc, #44]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006042:	4313      	orrs	r3, r2
 8006044:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0310 	and.w	r3, r3, #16
 800604e:	2b00      	cmp	r3, #0
 8006050:	d008      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006052:	4b07      	ldr	r3, [pc, #28]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	4904      	ldr	r1, [pc, #16]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006060:	4313      	orrs	r3, r2
 8006062:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3718      	adds	r7, #24
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	40021000 	.word	0x40021000
 8006074:	40007000 	.word	0x40007000
 8006078:	42420440 	.word	0x42420440

0800607c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800607c:	b590      	push	{r4, r7, lr}
 800607e:	b08d      	sub	sp, #52	; 0x34
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006084:	4b5a      	ldr	r3, [pc, #360]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006086:	f107 040c 	add.w	r4, r7, #12
 800608a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800608c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006090:	f240 2301 	movw	r3, #513	; 0x201
 8006094:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	627b      	str	r3, [r7, #36]	; 0x24
 800609a:	2300      	movs	r3, #0
 800609c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800609e:	2300      	movs	r3, #0
 80060a0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	61fb      	str	r3, [r7, #28]
 80060a6:	2300      	movs	r3, #0
 80060a8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b10      	cmp	r3, #16
 80060ae:	d00a      	beq.n	80060c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b10      	cmp	r3, #16
 80060b4:	f200 8091 	bhi.w	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d04c      	beq.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d07c      	beq.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80060c4:	e089      	b.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80060c6:	4b4b      	ldr	r3, [pc, #300]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80060cc:	4b49      	ldr	r3, [pc, #292]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 8082 	beq.w	80061de <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	0c9b      	lsrs	r3, r3, #18
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80060e6:	4413      	add	r3, r2
 80060e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80060ec:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d018      	beq.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80060f8:	4b3e      	ldr	r3, [pc, #248]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	0c5b      	lsrs	r3, r3, #17
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006106:	4413      	add	r3, r2
 8006108:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800610c:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00d      	beq.n	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006118:	4a37      	ldr	r2, [pc, #220]	; (80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	fb02 f303 	mul.w	r3, r2, r3
 8006126:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006128:	e004      	b.n	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800612a:	6a3b      	ldr	r3, [r7, #32]
 800612c:	4a33      	ldr	r2, [pc, #204]	; (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800612e:	fb02 f303 	mul.w	r3, r2, r3
 8006132:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006134:	4b2f      	ldr	r3, [pc, #188]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800613c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006140:	d102      	bne.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8006142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006144:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006146:	e04a      	b.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8006148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614a:	005b      	lsls	r3, r3, #1
 800614c:	4a2c      	ldr	r2, [pc, #176]	; (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800614e:	fba2 2303 	umull	r2, r3, r2, r3
 8006152:	085b      	lsrs	r3, r3, #1
 8006154:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006156:	e042      	b.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8006158:	4b26      	ldr	r3, [pc, #152]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800615a:	6a1b      	ldr	r3, [r3, #32]
 800615c:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006168:	d108      	bne.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	f003 0302 	and.w	r3, r3, #2
 8006170:	2b00      	cmp	r3, #0
 8006172:	d003      	beq.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8006174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006178:	62bb      	str	r3, [r7, #40]	; 0x28
 800617a:	e01f      	b.n	80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006186:	d109      	bne.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8006188:	4b1a      	ldr	r3, [pc, #104]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d003      	beq.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8006194:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006198:	62bb      	str	r3, [r7, #40]	; 0x28
 800619a:	e00f      	b.n	80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061a6:	d11c      	bne.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80061a8:	4b12      	ldr	r3, [pc, #72]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d016      	beq.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80061b4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80061b8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80061ba:	e012      	b.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80061bc:	e011      	b.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80061be:	f7ff fe75 	bl	8005eac <HAL_RCC_GetPCLK2Freq>
 80061c2:	4602      	mov	r2, r0
 80061c4:	4b0b      	ldr	r3, [pc, #44]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	0b9b      	lsrs	r3, r3, #14
 80061ca:	f003 0303 	and.w	r3, r3, #3
 80061ce:	3301      	adds	r3, #1
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80061d8:	e004      	b.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80061da:	bf00      	nop
 80061dc:	e002      	b.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80061de:	bf00      	nop
 80061e0:	e000      	b.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80061e2:	bf00      	nop
    }
  }
  return (frequency);
 80061e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3734      	adds	r7, #52	; 0x34
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd90      	pop	{r4, r7, pc}
 80061ee:	bf00      	nop
 80061f0:	0800c860 	.word	0x0800c860
 80061f4:	40021000 	.word	0x40021000
 80061f8:	007a1200 	.word	0x007a1200
 80061fc:	003d0900 	.word	0x003d0900
 8006200:	aaaaaaab 	.word	0xaaaaaaab

08006204 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e076      	b.n	8006304 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	2b00      	cmp	r3, #0
 800621c:	d108      	bne.n	8006230 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006226:	d009      	beq.n	800623c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	61da      	str	r2, [r3, #28]
 800622e:	e005      	b.n	800623c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d106      	bne.n	800625c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7fc fa9a 	bl	8002790 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2202      	movs	r2, #2
 8006260:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006272:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006284:	431a      	orrs	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800628e:	431a      	orrs	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	f003 0302 	and.w	r3, r3, #2
 8006298:	431a      	orrs	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	431a      	orrs	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062ac:	431a      	orrs	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062b6:	431a      	orrs	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c0:	ea42 0103 	orr.w	r1, r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	0c1a      	lsrs	r2, r3, #16
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f002 0204 	and.w	r2, r2, #4
 80062e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	69da      	ldr	r2, [r3, #28]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b088      	sub	sp, #32
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	603b      	str	r3, [r7, #0]
 8006318:	4613      	mov	r3, r2
 800631a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800631c:	2300      	movs	r3, #0
 800631e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006326:	2b01      	cmp	r3, #1
 8006328:	d101      	bne.n	800632e <HAL_SPI_Transmit+0x22>
 800632a:	2302      	movs	r3, #2
 800632c:	e126      	b.n	800657c <HAL_SPI_Transmit+0x270>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006336:	f7fc fc87 	bl	8002c48 <HAL_GetTick>
 800633a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800633c:	88fb      	ldrh	r3, [r7, #6]
 800633e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b01      	cmp	r3, #1
 800634a:	d002      	beq.n	8006352 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800634c:	2302      	movs	r3, #2
 800634e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006350:	e10b      	b.n	800656a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d002      	beq.n	800635e <HAL_SPI_Transmit+0x52>
 8006358:	88fb      	ldrh	r3, [r7, #6]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d102      	bne.n	8006364 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006362:	e102      	b.n	800656a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2203      	movs	r2, #3
 8006368:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	88fa      	ldrh	r2, [r7, #6]
 800637c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	88fa      	ldrh	r2, [r7, #6]
 8006382:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063aa:	d10f      	bne.n	80063cc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d6:	2b40      	cmp	r3, #64	; 0x40
 80063d8:	d007      	beq.n	80063ea <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063f2:	d14b      	bne.n	800648c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d002      	beq.n	8006402 <HAL_SPI_Transmit+0xf6>
 80063fc:	8afb      	ldrh	r3, [r7, #22]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d13e      	bne.n	8006480 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006406:	881a      	ldrh	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006412:	1c9a      	adds	r2, r3, #2
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800641c:	b29b      	uxth	r3, r3
 800641e:	3b01      	subs	r3, #1
 8006420:	b29a      	uxth	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006426:	e02b      	b.n	8006480 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b02      	cmp	r3, #2
 8006434:	d112      	bne.n	800645c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643a:	881a      	ldrh	r2, [r3, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006446:	1c9a      	adds	r2, r3, #2
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006450:	b29b      	uxth	r3, r3
 8006452:	3b01      	subs	r3, #1
 8006454:	b29a      	uxth	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	86da      	strh	r2, [r3, #54]	; 0x36
 800645a:	e011      	b.n	8006480 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800645c:	f7fc fbf4 	bl	8002c48 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	429a      	cmp	r2, r3
 800646a:	d803      	bhi.n	8006474 <HAL_SPI_Transmit+0x168>
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006472:	d102      	bne.n	800647a <HAL_SPI_Transmit+0x16e>
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d102      	bne.n	8006480 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800647e:	e074      	b.n	800656a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006484:	b29b      	uxth	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1ce      	bne.n	8006428 <HAL_SPI_Transmit+0x11c>
 800648a:	e04c      	b.n	8006526 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d002      	beq.n	800649a <HAL_SPI_Transmit+0x18e>
 8006494:	8afb      	ldrh	r3, [r7, #22]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d140      	bne.n	800651c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	330c      	adds	r3, #12
 80064a4:	7812      	ldrb	r2, [r2, #0]
 80064a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ac:	1c5a      	adds	r2, r3, #1
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	3b01      	subs	r3, #1
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80064c0:	e02c      	b.n	800651c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d113      	bne.n	80064f8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	330c      	adds	r3, #12
 80064da:	7812      	ldrb	r2, [r2, #0]
 80064dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e2:	1c5a      	adds	r2, r3, #1
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	3b01      	subs	r3, #1
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80064f6:	e011      	b.n	800651c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064f8:	f7fc fba6 	bl	8002c48 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	429a      	cmp	r2, r3
 8006506:	d803      	bhi.n	8006510 <HAL_SPI_Transmit+0x204>
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650e:	d102      	bne.n	8006516 <HAL_SPI_Transmit+0x20a>
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d102      	bne.n	800651c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	77fb      	strb	r3, [r7, #31]
          goto error;
 800651a:	e026      	b.n	800656a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006520:	b29b      	uxth	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1cd      	bne.n	80064c2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006526:	69ba      	ldr	r2, [r7, #24]
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f000 f8b2 	bl	8006694 <SPI_EndRxTxTransaction>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2220      	movs	r2, #32
 800653a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10a      	bne.n	800655a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006544:	2300      	movs	r3, #0
 8006546:	613b      	str	r3, [r7, #16]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	613b      	str	r3, [r7, #16]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	613b      	str	r3, [r7, #16]
 8006558:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655e:	2b00      	cmp	r3, #0
 8006560:	d002      	beq.n	8006568 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	77fb      	strb	r3, [r7, #31]
 8006566:	e000      	b.n	800656a <HAL_SPI_Transmit+0x25e>
  }

error:
 8006568:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800657a:	7ffb      	ldrb	r3, [r7, #31]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3720      	adds	r7, #32
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b088      	sub	sp, #32
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	603b      	str	r3, [r7, #0]
 8006590:	4613      	mov	r3, r2
 8006592:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006594:	f7fc fb58 	bl	8002c48 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659c:	1a9b      	subs	r3, r3, r2
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	4413      	add	r3, r2
 80065a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065a4:	f7fc fb50 	bl	8002c48 <HAL_GetTick>
 80065a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065aa:	4b39      	ldr	r3, [pc, #228]	; (8006690 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	015b      	lsls	r3, r3, #5
 80065b0:	0d1b      	lsrs	r3, r3, #20
 80065b2:	69fa      	ldr	r2, [r7, #28]
 80065b4:	fb02 f303 	mul.w	r3, r2, r3
 80065b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065ba:	e054      	b.n	8006666 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c2:	d050      	beq.n	8006666 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065c4:	f7fc fb40 	bl	8002c48 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	69fa      	ldr	r2, [r7, #28]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d902      	bls.n	80065da <SPI_WaitFlagStateUntilTimeout+0x56>
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d13d      	bne.n	8006656 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065f2:	d111      	bne.n	8006618 <SPI_WaitFlagStateUntilTimeout+0x94>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065fc:	d004      	beq.n	8006608 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006606:	d107      	bne.n	8006618 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006616:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006620:	d10f      	bne.n	8006642 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006630:	601a      	str	r2, [r3, #0]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006640:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e017      	b.n	8006686 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d101      	bne.n	8006660 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800665c:	2300      	movs	r3, #0
 800665e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	3b01      	subs	r3, #1
 8006664:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689a      	ldr	r2, [r3, #8]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	4013      	ands	r3, r2
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	429a      	cmp	r2, r3
 8006674:	bf0c      	ite	eq
 8006676:	2301      	moveq	r3, #1
 8006678:	2300      	movne	r3, #0
 800667a:	b2db      	uxtb	r3, r3
 800667c:	461a      	mov	r2, r3
 800667e:	79fb      	ldrb	r3, [r7, #7]
 8006680:	429a      	cmp	r2, r3
 8006682:	d19b      	bne.n	80065bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3720      	adds	r7, #32
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20000010 	.word	0x20000010

08006694 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af02      	add	r7, sp, #8
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2200      	movs	r2, #0
 80066a8:	2180      	movs	r1, #128	; 0x80
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f7ff ff6a 	bl	8006584 <SPI_WaitFlagStateUntilTimeout>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d007      	beq.n	80066c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ba:	f043 0220 	orr.w	r2, r3, #32
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e000      	b.n	80066c8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e041      	b.n	8006766 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d106      	bne.n	80066fc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7fc f888 	bl	800280c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2202      	movs	r2, #2
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	3304      	adds	r3, #4
 800670c:	4619      	mov	r1, r3
 800670e:	4610      	mov	r0, r2
 8006710:	f000 fb38 	bl	8006d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
	...

08006770 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d104      	bne.n	800678a <HAL_TIM_IC_Start_IT+0x1a>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006786:	b2db      	uxtb	r3, r3
 8006788:	e013      	b.n	80067b2 <HAL_TIM_IC_Start_IT+0x42>
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b04      	cmp	r3, #4
 800678e:	d104      	bne.n	800679a <HAL_TIM_IC_Start_IT+0x2a>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006796:	b2db      	uxtb	r3, r3
 8006798:	e00b      	b.n	80067b2 <HAL_TIM_IC_Start_IT+0x42>
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2b08      	cmp	r3, #8
 800679e:	d104      	bne.n	80067aa <HAL_TIM_IC_Start_IT+0x3a>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	e003      	b.n	80067b2 <HAL_TIM_IC_Start_IT+0x42>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d104      	bne.n	80067c4 <HAL_TIM_IC_Start_IT+0x54>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	e013      	b.n	80067ec <HAL_TIM_IC_Start_IT+0x7c>
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	2b04      	cmp	r3, #4
 80067c8:	d104      	bne.n	80067d4 <HAL_TIM_IC_Start_IT+0x64>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	e00b      	b.n	80067ec <HAL_TIM_IC_Start_IT+0x7c>
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	2b08      	cmp	r3, #8
 80067d8:	d104      	bne.n	80067e4 <HAL_TIM_IC_Start_IT+0x74>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	e003      	b.n	80067ec <HAL_TIM_IC_Start_IT+0x7c>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d102      	bne.n	80067fa <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80067f4:	7bbb      	ldrb	r3, [r7, #14]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d001      	beq.n	80067fe <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e0b3      	b.n	8006966 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d104      	bne.n	800680e <HAL_TIM_IC_Start_IT+0x9e>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2202      	movs	r2, #2
 8006808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800680c:	e013      	b.n	8006836 <HAL_TIM_IC_Start_IT+0xc6>
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b04      	cmp	r3, #4
 8006812:	d104      	bne.n	800681e <HAL_TIM_IC_Start_IT+0xae>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2202      	movs	r2, #2
 8006818:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800681c:	e00b      	b.n	8006836 <HAL_TIM_IC_Start_IT+0xc6>
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2b08      	cmp	r3, #8
 8006822:	d104      	bne.n	800682e <HAL_TIM_IC_Start_IT+0xbe>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2202      	movs	r2, #2
 8006828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800682c:	e003      	b.n	8006836 <HAL_TIM_IC_Start_IT+0xc6>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2202      	movs	r2, #2
 8006832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d104      	bne.n	8006846 <HAL_TIM_IC_Start_IT+0xd6>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006844:	e013      	b.n	800686e <HAL_TIM_IC_Start_IT+0xfe>
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b04      	cmp	r3, #4
 800684a:	d104      	bne.n	8006856 <HAL_TIM_IC_Start_IT+0xe6>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2202      	movs	r2, #2
 8006850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006854:	e00b      	b.n	800686e <HAL_TIM_IC_Start_IT+0xfe>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b08      	cmp	r3, #8
 800685a:	d104      	bne.n	8006866 <HAL_TIM_IC_Start_IT+0xf6>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2202      	movs	r2, #2
 8006860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006864:	e003      	b.n	800686e <HAL_TIM_IC_Start_IT+0xfe>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2202      	movs	r2, #2
 800686a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b0c      	cmp	r3, #12
 8006872:	d841      	bhi.n	80068f8 <HAL_TIM_IC_Start_IT+0x188>
 8006874:	a201      	add	r2, pc, #4	; (adr r2, 800687c <HAL_TIM_IC_Start_IT+0x10c>)
 8006876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687a:	bf00      	nop
 800687c:	080068b1 	.word	0x080068b1
 8006880:	080068f9 	.word	0x080068f9
 8006884:	080068f9 	.word	0x080068f9
 8006888:	080068f9 	.word	0x080068f9
 800688c:	080068c3 	.word	0x080068c3
 8006890:	080068f9 	.word	0x080068f9
 8006894:	080068f9 	.word	0x080068f9
 8006898:	080068f9 	.word	0x080068f9
 800689c:	080068d5 	.word	0x080068d5
 80068a0:	080068f9 	.word	0x080068f9
 80068a4:	080068f9 	.word	0x080068f9
 80068a8:	080068f9 	.word	0x080068f9
 80068ac:	080068e7 	.word	0x080068e7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68da      	ldr	r2, [r3, #12]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f042 0202 	orr.w	r2, r2, #2
 80068be:	60da      	str	r2, [r3, #12]
      break;
 80068c0:	e01b      	b.n	80068fa <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68da      	ldr	r2, [r3, #12]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f042 0204 	orr.w	r2, r2, #4
 80068d0:	60da      	str	r2, [r3, #12]
      break;
 80068d2:	e012      	b.n	80068fa <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68da      	ldr	r2, [r3, #12]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f042 0208 	orr.w	r2, r2, #8
 80068e2:	60da      	str	r2, [r3, #12]
      break;
 80068e4:	e009      	b.n	80068fa <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68da      	ldr	r2, [r3, #12]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f042 0210 	orr.w	r2, r2, #16
 80068f4:	60da      	str	r2, [r3, #12]
      break;
 80068f6:	e000      	b.n	80068fa <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80068f8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2201      	movs	r2, #1
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	4618      	mov	r0, r3
 8006904:	f000 fbad 	bl	8007062 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a18      	ldr	r2, [pc, #96]	; (8006970 <HAL_TIM_IC_Start_IT+0x200>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d00e      	beq.n	8006930 <HAL_TIM_IC_Start_IT+0x1c0>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800691a:	d009      	beq.n	8006930 <HAL_TIM_IC_Start_IT+0x1c0>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a14      	ldr	r2, [pc, #80]	; (8006974 <HAL_TIM_IC_Start_IT+0x204>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d004      	beq.n	8006930 <HAL_TIM_IC_Start_IT+0x1c0>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a13      	ldr	r2, [pc, #76]	; (8006978 <HAL_TIM_IC_Start_IT+0x208>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d111      	bne.n	8006954 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f003 0307 	and.w	r3, r3, #7
 800693a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2b06      	cmp	r3, #6
 8006940:	d010      	beq.n	8006964 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f042 0201 	orr.w	r2, r2, #1
 8006950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006952:	e007      	b.n	8006964 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f042 0201 	orr.w	r2, r2, #1
 8006962:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	40012c00 	.word	0x40012c00
 8006974:	40000400 	.word	0x40000400
 8006978:	40000800 	.word	0x40000800

0800697c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	2b02      	cmp	r3, #2
 8006990:	d122      	bne.n	80069d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	f003 0302 	and.w	r3, r3, #2
 800699c:	2b02      	cmp	r3, #2
 800699e:	d11b      	bne.n	80069d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f06f 0202 	mvn.w	r2, #2
 80069a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	f003 0303 	and.w	r3, r3, #3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7fa fc3c 	bl	800123c <HAL_TIM_IC_CaptureCallback>
 80069c4:	e005      	b.n	80069d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f9c1 	bl	8006d4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f9c7 	bl	8006d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	f003 0304 	and.w	r3, r3, #4
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	d122      	bne.n	8006a2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f003 0304 	and.w	r3, r3, #4
 80069f0:	2b04      	cmp	r3, #4
 80069f2:	d11b      	bne.n	8006a2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f06f 0204 	mvn.w	r2, #4
 80069fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2202      	movs	r2, #2
 8006a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d003      	beq.n	8006a1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f7fa fc12 	bl	800123c <HAL_TIM_IC_CaptureCallback>
 8006a18:	e005      	b.n	8006a26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f997 	bl	8006d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 f99d 	bl	8006d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	f003 0308 	and.w	r3, r3, #8
 8006a36:	2b08      	cmp	r3, #8
 8006a38:	d122      	bne.n	8006a80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	f003 0308 	and.w	r3, r3, #8
 8006a44:	2b08      	cmp	r3, #8
 8006a46:	d11b      	bne.n	8006a80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f06f 0208 	mvn.w	r2, #8
 8006a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2204      	movs	r2, #4
 8006a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	f003 0303 	and.w	r3, r3, #3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d003      	beq.n	8006a6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7fa fbe8 	bl	800123c <HAL_TIM_IC_CaptureCallback>
 8006a6c:	e005      	b.n	8006a7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f96d 	bl	8006d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 f973 	bl	8006d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	f003 0310 	and.w	r3, r3, #16
 8006a8a:	2b10      	cmp	r3, #16
 8006a8c:	d122      	bne.n	8006ad4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	f003 0310 	and.w	r3, r3, #16
 8006a98:	2b10      	cmp	r3, #16
 8006a9a:	d11b      	bne.n	8006ad4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f06f 0210 	mvn.w	r2, #16
 8006aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2208      	movs	r2, #8
 8006aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	69db      	ldr	r3, [r3, #28]
 8006ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d003      	beq.n	8006ac2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7fa fbbe 	bl	800123c <HAL_TIM_IC_CaptureCallback>
 8006ac0:	e005      	b.n	8006ace <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f943 	bl	8006d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 f949 	bl	8006d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d10e      	bne.n	8006b00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d107      	bne.n	8006b00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f06f 0201 	mvn.w	r2, #1
 8006af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f91e 	bl	8006d3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b0a:	2b80      	cmp	r3, #128	; 0x80
 8006b0c:	d10e      	bne.n	8006b2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b18:	2b80      	cmp	r3, #128	; 0x80
 8006b1a:	d107      	bne.n	8006b2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 fb27 	bl	800717a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b36:	2b40      	cmp	r3, #64	; 0x40
 8006b38:	d10e      	bne.n	8006b58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b44:	2b40      	cmp	r3, #64	; 0x40
 8006b46:	d107      	bne.n	8006b58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f90d 	bl	8006d72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	f003 0320 	and.w	r3, r3, #32
 8006b62:	2b20      	cmp	r3, #32
 8006b64:	d10e      	bne.n	8006b84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	f003 0320 	and.w	r3, r3, #32
 8006b70:	2b20      	cmp	r3, #32
 8006b72:	d107      	bne.n	8006b84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f06f 0220 	mvn.w	r2, #32
 8006b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 faf2 	bl	8007168 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b84:	bf00      	nop
 8006b86:	3708      	adds	r7, #8
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d101      	bne.n	8006ba6 <HAL_TIM_IC_ConfigChannel+0x1a>
 8006ba2:	2302      	movs	r3, #2
 8006ba4:	e082      	b.n	8006cac <HAL_TIM_IC_ConfigChannel+0x120>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d11b      	bne.n	8006bec <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6818      	ldr	r0, [r3, #0]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	6819      	ldr	r1, [r3, #0]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	f000 f940 	bl	8006e48 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	699a      	ldr	r2, [r3, #24]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f022 020c 	bic.w	r2, r2, #12
 8006bd6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6999      	ldr	r1, [r3, #24]
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	689a      	ldr	r2, [r3, #8]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	619a      	str	r2, [r3, #24]
 8006bea:	e05a      	b.n	8006ca2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b04      	cmp	r3, #4
 8006bf0:	d11c      	bne.n	8006c2c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6818      	ldr	r0, [r3, #0]
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	6819      	ldr	r1, [r3, #0]
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	685a      	ldr	r2, [r3, #4]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	f000 f97b 	bl	8006efc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	699a      	ldr	r2, [r3, #24]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006c14:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	6999      	ldr	r1, [r3, #24]
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	021a      	lsls	r2, r3, #8
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	430a      	orrs	r2, r1
 8006c28:	619a      	str	r2, [r3, #24]
 8006c2a:	e03a      	b.n	8006ca2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b08      	cmp	r3, #8
 8006c30:	d11b      	bne.n	8006c6a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6818      	ldr	r0, [r3, #0]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	6819      	ldr	r1, [r3, #0]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	f000 f997 	bl	8006f74 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	69da      	ldr	r2, [r3, #28]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 020c 	bic.w	r2, r2, #12
 8006c54:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	69d9      	ldr	r1, [r3, #28]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	689a      	ldr	r2, [r3, #8]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	430a      	orrs	r2, r1
 8006c66:	61da      	str	r2, [r3, #28]
 8006c68:	e01b      	b.n	8006ca2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6818      	ldr	r0, [r3, #0]
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	6819      	ldr	r1, [r3, #0]
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	685a      	ldr	r2, [r3, #4]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	f000 f9b6 	bl	8006fea <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	69da      	ldr	r2, [r3, #28]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006c8c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	69d9      	ldr	r1, [r3, #28]
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	021a      	lsls	r2, r3, #8
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	60fb      	str	r3, [r7, #12]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	2b0c      	cmp	r3, #12
 8006cc6:	d831      	bhi.n	8006d2c <HAL_TIM_ReadCapturedValue+0x78>
 8006cc8:	a201      	add	r2, pc, #4	; (adr r2, 8006cd0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cce:	bf00      	nop
 8006cd0:	08006d05 	.word	0x08006d05
 8006cd4:	08006d2d 	.word	0x08006d2d
 8006cd8:	08006d2d 	.word	0x08006d2d
 8006cdc:	08006d2d 	.word	0x08006d2d
 8006ce0:	08006d0f 	.word	0x08006d0f
 8006ce4:	08006d2d 	.word	0x08006d2d
 8006ce8:	08006d2d 	.word	0x08006d2d
 8006cec:	08006d2d 	.word	0x08006d2d
 8006cf0:	08006d19 	.word	0x08006d19
 8006cf4:	08006d2d 	.word	0x08006d2d
 8006cf8:	08006d2d 	.word	0x08006d2d
 8006cfc:	08006d2d 	.word	0x08006d2d
 8006d00:	08006d23 	.word	0x08006d23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d0a:	60fb      	str	r3, [r7, #12]

      break;
 8006d0c:	e00f      	b.n	8006d2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d14:	60fb      	str	r3, [r7, #12]

      break;
 8006d16:	e00a      	b.n	8006d2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1e:	60fb      	str	r3, [r7, #12]

      break;
 8006d20:	e005      	b.n	8006d2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d28:	60fb      	str	r3, [r7, #12]

      break;
 8006d2a:	e000      	b.n	8006d2e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006d2c:	bf00      	nop
  }

  return tmpreg;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bc80      	pop	{r7}
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop

08006d3c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bc80      	pop	{r7}
 8006d4c:	4770      	bx	lr

08006d4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b083      	sub	sp, #12
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d56:	bf00      	nop
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bc80      	pop	{r7}
 8006d5e:	4770      	bx	lr

08006d60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bc80      	pop	{r7}
 8006d70:	4770      	bx	lr

08006d72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d7a:	bf00      	nop
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bc80      	pop	{r7}
 8006d82:	4770      	bx	lr

08006d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a29      	ldr	r2, [pc, #164]	; (8006e3c <TIM_Base_SetConfig+0xb8>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d00b      	beq.n	8006db4 <TIM_Base_SetConfig+0x30>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006da2:	d007      	beq.n	8006db4 <TIM_Base_SetConfig+0x30>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a26      	ldr	r2, [pc, #152]	; (8006e40 <TIM_Base_SetConfig+0xbc>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d003      	beq.n	8006db4 <TIM_Base_SetConfig+0x30>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a25      	ldr	r2, [pc, #148]	; (8006e44 <TIM_Base_SetConfig+0xc0>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d108      	bne.n	8006dc6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a1c      	ldr	r2, [pc, #112]	; (8006e3c <TIM_Base_SetConfig+0xb8>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d00b      	beq.n	8006de6 <TIM_Base_SetConfig+0x62>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dd4:	d007      	beq.n	8006de6 <TIM_Base_SetConfig+0x62>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a19      	ldr	r2, [pc, #100]	; (8006e40 <TIM_Base_SetConfig+0xbc>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d003      	beq.n	8006de6 <TIM_Base_SetConfig+0x62>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a18      	ldr	r2, [pc, #96]	; (8006e44 <TIM_Base_SetConfig+0xc0>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d108      	bne.n	8006df8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	689a      	ldr	r2, [r3, #8]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a07      	ldr	r2, [pc, #28]	; (8006e3c <TIM_Base_SetConfig+0xb8>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d103      	bne.n	8006e2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	691a      	ldr	r2, [r3, #16]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	615a      	str	r2, [r3, #20]
}
 8006e32:	bf00      	nop
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bc80      	pop	{r7}
 8006e3a:	4770      	bx	lr
 8006e3c:	40012c00 	.word	0x40012c00
 8006e40:	40000400 	.word	0x40000400
 8006e44:	40000800 	.word	0x40000800

08006e48 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b087      	sub	sp, #28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
 8006e54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	f023 0201 	bic.w	r2, r3, #1
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6a1b      	ldr	r3, [r3, #32]
 8006e6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	4a1f      	ldr	r2, [pc, #124]	; (8006ef0 <TIM_TI1_SetConfig+0xa8>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d00b      	beq.n	8006e8e <TIM_TI1_SetConfig+0x46>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e7c:	d007      	beq.n	8006e8e <TIM_TI1_SetConfig+0x46>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	4a1c      	ldr	r2, [pc, #112]	; (8006ef4 <TIM_TI1_SetConfig+0xac>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d003      	beq.n	8006e8e <TIM_TI1_SetConfig+0x46>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	4a1b      	ldr	r2, [pc, #108]	; (8006ef8 <TIM_TI1_SetConfig+0xb0>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d101      	bne.n	8006e92 <TIM_TI1_SetConfig+0x4a>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e000      	b.n	8006e94 <TIM_TI1_SetConfig+0x4c>
 8006e92:	2300      	movs	r3, #0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d008      	beq.n	8006eaa <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	f023 0303 	bic.w	r3, r3, #3
 8006e9e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	617b      	str	r3, [r7, #20]
 8006ea8:	e003      	b.n	8006eb2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f043 0301 	orr.w	r3, r3, #1
 8006eb0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006eb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	011b      	lsls	r3, r3, #4
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	f023 030a 	bic.w	r3, r3, #10
 8006ecc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f003 030a 	and.w	r3, r3, #10
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	621a      	str	r2, [r3, #32]
}
 8006ee6:	bf00      	nop
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bc80      	pop	{r7}
 8006eee:	4770      	bx	lr
 8006ef0:	40012c00 	.word	0x40012c00
 8006ef4:	40000400 	.word	0x40000400
 8006ef8:	40000800 	.word	0x40000800

08006efc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
 8006f08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	f023 0210 	bic.w	r2, r3, #16
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6a1b      	ldr	r3, [r3, #32]
 8006f20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	021b      	lsls	r3, r3, #8
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	031b      	lsls	r3, r3, #12
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f4e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	011b      	lsls	r3, r3, #4
 8006f54:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	621a      	str	r2, [r3, #32]
}
 8006f6a:	bf00      	nop
 8006f6c:	371c      	adds	r7, #28
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bc80      	pop	{r7}
 8006f72:	4770      	bx	lr

08006f74 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
 8006f80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	69db      	ldr	r3, [r3, #28]
 8006f92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6a1b      	ldr	r3, [r3, #32]
 8006f98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f023 0303 	bic.w	r3, r3, #3
 8006fa0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fb0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	011b      	lsls	r3, r3, #4
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fc4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	021b      	lsls	r3, r3, #8
 8006fca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fce:	693a      	ldr	r2, [r7, #16]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	621a      	str	r2, [r3, #32]
}
 8006fe0:	bf00      	nop
 8006fe2:	371c      	adds	r7, #28
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bc80      	pop	{r7}
 8006fe8:	4770      	bx	lr

08006fea <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006fea:	b480      	push	{r7}
 8006fec:	b087      	sub	sp, #28
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	60f8      	str	r0, [r7, #12]
 8006ff2:	60b9      	str	r1, [r7, #8]
 8006ff4:	607a      	str	r2, [r7, #4]
 8006ff6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	69db      	ldr	r3, [r3, #28]
 8007008:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007016:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	021b      	lsls	r3, r3, #8
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	4313      	orrs	r3, r2
 8007020:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007028:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	031b      	lsls	r3, r3, #12
 800702e:	b29b      	uxth	r3, r3
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	4313      	orrs	r3, r2
 8007034:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800703c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	031b      	lsls	r3, r3, #12
 8007042:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	4313      	orrs	r3, r2
 800704a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	693a      	ldr	r2, [r7, #16]
 8007056:	621a      	str	r2, [r3, #32]
}
 8007058:	bf00      	nop
 800705a:	371c      	adds	r7, #28
 800705c:	46bd      	mov	sp, r7
 800705e:	bc80      	pop	{r7}
 8007060:	4770      	bx	lr

08007062 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007062:	b480      	push	{r7}
 8007064:	b087      	sub	sp, #28
 8007066:	af00      	add	r7, sp, #0
 8007068:	60f8      	str	r0, [r7, #12]
 800706a:	60b9      	str	r1, [r7, #8]
 800706c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	f003 031f 	and.w	r3, r3, #31
 8007074:	2201      	movs	r2, #1
 8007076:	fa02 f303 	lsl.w	r3, r2, r3
 800707a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6a1a      	ldr	r2, [r3, #32]
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	43db      	mvns	r3, r3
 8007084:	401a      	ands	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6a1a      	ldr	r2, [r3, #32]
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	f003 031f 	and.w	r3, r3, #31
 8007094:	6879      	ldr	r1, [r7, #4]
 8007096:	fa01 f303 	lsl.w	r3, r1, r3
 800709a:	431a      	orrs	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	621a      	str	r2, [r3, #32]
}
 80070a0:	bf00      	nop
 80070a2:	371c      	adds	r7, #28
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bc80      	pop	{r7}
 80070a8:	4770      	bx	lr
	...

080070ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d101      	bne.n	80070c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070c0:	2302      	movs	r3, #2
 80070c2:	e046      	b.n	8007152 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2202      	movs	r2, #2
 80070d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a16      	ldr	r2, [pc, #88]	; (800715c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d00e      	beq.n	8007126 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007110:	d009      	beq.n	8007126 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a12      	ldr	r2, [pc, #72]	; (8007160 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d004      	beq.n	8007126 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a10      	ldr	r2, [pc, #64]	; (8007164 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d10c      	bne.n	8007140 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800712c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	4313      	orrs	r3, r2
 8007136:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	bc80      	pop	{r7}
 800715a:	4770      	bx	lr
 800715c:	40012c00 	.word	0x40012c00
 8007160:	40000400 	.word	0x40000400
 8007164:	40000800 	.word	0x40000800

08007168 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	bc80      	pop	{r7}
 8007178:	4770      	bx	lr

0800717a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800717a:	b480      	push	{r7}
 800717c:	b083      	sub	sp, #12
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007182:	bf00      	nop
 8007184:	370c      	adds	r7, #12
 8007186:	46bd      	mov	sp, r7
 8007188:	bc80      	pop	{r7}
 800718a:	4770      	bx	lr

0800718c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800718c:	b084      	sub	sp, #16
 800718e:	b480      	push	{r7}
 8007190:	b083      	sub	sp, #12
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	f107 0014 	add.w	r0, r7, #20
 800719a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bc80      	pop	{r7}
 80071a8:	b004      	add	sp, #16
 80071aa:	4770      	bx	lr

080071ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80071bc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80071c0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3714      	adds	r7, #20
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bc80      	pop	{r7}
 80071d6:	4770      	bx	lr

080071d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80071e0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80071e4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	43db      	mvns	r3, r3
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	4013      	ands	r3, r2
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3714      	adds	r7, #20
 8007206:	46bd      	mov	sp, r7
 8007208:	bc80      	pop	{r7}
 800720a:	4770      	bx	lr

0800720c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	460b      	mov	r3, r1
 8007216:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	bc80      	pop	{r7}
 8007222:	4770      	bx	lr

08007224 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007224:	b084      	sub	sp, #16
 8007226:	b480      	push	{r7}
 8007228:	b083      	sub	sp, #12
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
 800722e:	f107 0014 	add.w	r0, r7, #20
 8007232:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	bc80      	pop	{r7}
 8007260:	b004      	add	sp, #16
 8007262:	4770      	bx	lr

08007264 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007264:	b480      	push	{r7}
 8007266:	b09b      	sub	sp, #108	; 0x6c
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800726e:	2300      	movs	r3, #0
 8007270:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	4413      	add	r3, r2
 800727e:	881b      	ldrh	r3, [r3, #0]
 8007280:	b29b      	uxth	r3, r3
 8007282:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800728a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	78db      	ldrb	r3, [r3, #3]
 8007292:	2b03      	cmp	r3, #3
 8007294:	d81f      	bhi.n	80072d6 <USB_ActivateEndpoint+0x72>
 8007296:	a201      	add	r2, pc, #4	; (adr r2, 800729c <USB_ActivateEndpoint+0x38>)
 8007298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729c:	080072ad 	.word	0x080072ad
 80072a0:	080072c9 	.word	0x080072c9
 80072a4:	080072df 	.word	0x080072df
 80072a8:	080072bb 	.word	0x080072bb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80072ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80072b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80072b4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80072b8:	e012      	b.n	80072e0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80072ba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80072be:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80072c2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80072c6:	e00b      	b.n	80072e0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80072c8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80072cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80072d0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80072d4:	e004      	b.n	80072e0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80072dc:	e000      	b.n	80072e0 <USB_ActivateEndpoint+0x7c>
      break;
 80072de:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	441a      	add	r2, r3
 80072ea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80072ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072fe:	b29b      	uxth	r3, r3
 8007300:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4413      	add	r3, r2
 800730c:	881b      	ldrh	r3, [r3, #0]
 800730e:	b29b      	uxth	r3, r3
 8007310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007318:	b29a      	uxth	r2, r3
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	b29b      	uxth	r3, r3
 8007320:	4313      	orrs	r3, r2
 8007322:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	441a      	add	r2, r3
 8007330:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007334:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007338:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800733c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007344:	b29b      	uxth	r3, r3
 8007346:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	7b1b      	ldrb	r3, [r3, #12]
 800734c:	2b00      	cmp	r3, #0
 800734e:	f040 8149 	bne.w	80075e4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	785b      	ldrb	r3, [r3, #1]
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 8084 	beq.w	8007464 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	617b      	str	r3, [r7, #20]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007366:	b29b      	uxth	r3, r3
 8007368:	461a      	mov	r2, r3
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	4413      	add	r3, r2
 800736e:	617b      	str	r3, [r7, #20]
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	011a      	lsls	r2, r3, #4
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	4413      	add	r3, r2
 800737a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800737e:	613b      	str	r3, [r7, #16]
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	88db      	ldrh	r3, [r3, #6]
 8007384:	085b      	lsrs	r3, r3, #1
 8007386:	b29b      	uxth	r3, r3
 8007388:	005b      	lsls	r3, r3, #1
 800738a:	b29a      	uxth	r2, r3
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4413      	add	r3, r2
 800739a:	881b      	ldrh	r3, [r3, #0]
 800739c:	81fb      	strh	r3, [r7, #14]
 800739e:	89fb      	ldrh	r3, [r7, #14]
 80073a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d01b      	beq.n	80073e0 <USB_ActivateEndpoint+0x17c>
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4413      	add	r3, r2
 80073b2:	881b      	ldrh	r3, [r3, #0]
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073be:	81bb      	strh	r3, [r7, #12]
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	441a      	add	r2, r3
 80073ca:	89bb      	ldrh	r3, [r7, #12]
 80073cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073dc:	b29b      	uxth	r3, r3
 80073de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	78db      	ldrb	r3, [r3, #3]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d020      	beq.n	800742a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4413      	add	r3, r2
 80073f2:	881b      	ldrh	r3, [r3, #0]
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073fe:	813b      	strh	r3, [r7, #8]
 8007400:	893b      	ldrh	r3, [r7, #8]
 8007402:	f083 0320 	eor.w	r3, r3, #32
 8007406:	813b      	strh	r3, [r7, #8]
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	441a      	add	r2, r3
 8007412:	893b      	ldrh	r3, [r7, #8]
 8007414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800741c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007424:	b29b      	uxth	r3, r3
 8007426:	8013      	strh	r3, [r2, #0]
 8007428:	e27f      	b.n	800792a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	b29b      	uxth	r3, r3
 8007438:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800743c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007440:	817b      	strh	r3, [r7, #10]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	441a      	add	r2, r3
 800744c:	897b      	ldrh	r3, [r7, #10]
 800744e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800745a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800745e:	b29b      	uxth	r3, r3
 8007460:	8013      	strh	r3, [r2, #0]
 8007462:	e262      	b.n	800792a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800746e:	b29b      	uxth	r3, r3
 8007470:	461a      	mov	r2, r3
 8007472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007474:	4413      	add	r3, r2
 8007476:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	011a      	lsls	r2, r3, #4
 800747e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007480:	4413      	add	r3, r2
 8007482:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007486:	62bb      	str	r3, [r7, #40]	; 0x28
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	88db      	ldrh	r3, [r3, #6]
 800748c:	085b      	lsrs	r3, r3, #1
 800748e:	b29b      	uxth	r3, r3
 8007490:	005b      	lsls	r3, r3, #1
 8007492:	b29a      	uxth	r2, r3
 8007494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007496:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	627b      	str	r3, [r7, #36]	; 0x24
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	461a      	mov	r2, r3
 80074a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a8:	4413      	add	r3, r2
 80074aa:	627b      	str	r3, [r7, #36]	; 0x24
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	011a      	lsls	r2, r3, #4
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	4413      	add	r3, r2
 80074b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074ba:	623b      	str	r3, [r7, #32]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d112      	bne.n	80074ea <USB_ActivateEndpoint+0x286>
 80074c4:	6a3b      	ldr	r3, [r7, #32]
 80074c6:	881b      	ldrh	r3, [r3, #0]
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	6a3b      	ldr	r3, [r7, #32]
 80074d2:	801a      	strh	r2, [r3, #0]
 80074d4:	6a3b      	ldr	r3, [r7, #32]
 80074d6:	881b      	ldrh	r3, [r3, #0]
 80074d8:	b29b      	uxth	r3, r3
 80074da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	6a3b      	ldr	r3, [r7, #32]
 80074e6:	801a      	strh	r2, [r3, #0]
 80074e8:	e02f      	b.n	800754a <USB_ActivateEndpoint+0x2e6>
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	2b3e      	cmp	r3, #62	; 0x3e
 80074f0:	d813      	bhi.n	800751a <USB_ActivateEndpoint+0x2b6>
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	085b      	lsrs	r3, r3, #1
 80074f8:	663b      	str	r3, [r7, #96]	; 0x60
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	2b00      	cmp	r3, #0
 8007504:	d002      	beq.n	800750c <USB_ActivateEndpoint+0x2a8>
 8007506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007508:	3301      	adds	r3, #1
 800750a:	663b      	str	r3, [r7, #96]	; 0x60
 800750c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800750e:	b29b      	uxth	r3, r3
 8007510:	029b      	lsls	r3, r3, #10
 8007512:	b29a      	uxth	r2, r3
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	801a      	strh	r2, [r3, #0]
 8007518:	e017      	b.n	800754a <USB_ActivateEndpoint+0x2e6>
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	095b      	lsrs	r3, r3, #5
 8007520:	663b      	str	r3, [r7, #96]	; 0x60
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	f003 031f 	and.w	r3, r3, #31
 800752a:	2b00      	cmp	r3, #0
 800752c:	d102      	bne.n	8007534 <USB_ActivateEndpoint+0x2d0>
 800752e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007530:	3b01      	subs	r3, #1
 8007532:	663b      	str	r3, [r7, #96]	; 0x60
 8007534:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007536:	b29b      	uxth	r3, r3
 8007538:	029b      	lsls	r3, r3, #10
 800753a:	b29b      	uxth	r3, r3
 800753c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007544:	b29a      	uxth	r2, r3
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4413      	add	r3, r2
 8007554:	881b      	ldrh	r3, [r3, #0]
 8007556:	83fb      	strh	r3, [r7, #30]
 8007558:	8bfb      	ldrh	r3, [r7, #30]
 800755a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d01b      	beq.n	800759a <USB_ActivateEndpoint+0x336>
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	4413      	add	r3, r2
 800756c:	881b      	ldrh	r3, [r3, #0]
 800756e:	b29b      	uxth	r3, r3
 8007570:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007578:	83bb      	strh	r3, [r7, #28]
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	441a      	add	r2, r3
 8007584:	8bbb      	ldrh	r3, [r7, #28]
 8007586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800758a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800758e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007596:	b29b      	uxth	r3, r3
 8007598:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	4413      	add	r3, r2
 80075a4:	881b      	ldrh	r3, [r3, #0]
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075b0:	837b      	strh	r3, [r7, #26]
 80075b2:	8b7b      	ldrh	r3, [r7, #26]
 80075b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80075b8:	837b      	strh	r3, [r7, #26]
 80075ba:	8b7b      	ldrh	r3, [r7, #26]
 80075bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80075c0:	837b      	strh	r3, [r7, #26]
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	441a      	add	r2, r3
 80075cc:	8b7b      	ldrh	r3, [r7, #26]
 80075ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075de:	b29b      	uxth	r3, r3
 80075e0:	8013      	strh	r3, [r2, #0]
 80075e2:	e1a2      	b.n	800792a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075fa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	441a      	add	r2, r3
 8007608:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800760c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007610:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007614:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800761c:	b29b      	uxth	r3, r3
 800761e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	65bb      	str	r3, [r7, #88]	; 0x58
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800762a:	b29b      	uxth	r3, r3
 800762c:	461a      	mov	r2, r3
 800762e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007630:	4413      	add	r3, r2
 8007632:	65bb      	str	r3, [r7, #88]	; 0x58
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	011a      	lsls	r2, r3, #4
 800763a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800763c:	4413      	add	r3, r2
 800763e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007642:	657b      	str	r3, [r7, #84]	; 0x54
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	891b      	ldrh	r3, [r3, #8]
 8007648:	085b      	lsrs	r3, r3, #1
 800764a:	b29b      	uxth	r3, r3
 800764c:	005b      	lsls	r3, r3, #1
 800764e:	b29a      	uxth	r2, r3
 8007650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007652:	801a      	strh	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	653b      	str	r3, [r7, #80]	; 0x50
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800765e:	b29b      	uxth	r3, r3
 8007660:	461a      	mov	r2, r3
 8007662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007664:	4413      	add	r3, r2
 8007666:	653b      	str	r3, [r7, #80]	; 0x50
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	011a      	lsls	r2, r3, #4
 800766e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007670:	4413      	add	r3, r2
 8007672:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	895b      	ldrh	r3, [r3, #10]
 800767c:	085b      	lsrs	r3, r3, #1
 800767e:	b29b      	uxth	r3, r3
 8007680:	005b      	lsls	r3, r3, #1
 8007682:	b29a      	uxth	r2, r3
 8007684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007686:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	785b      	ldrb	r3, [r3, #1]
 800768c:	2b00      	cmp	r3, #0
 800768e:	f040 8091 	bne.w	80077b4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4413      	add	r3, r2
 800769c:	881b      	ldrh	r3, [r3, #0]
 800769e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80076a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80076a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d01b      	beq.n	80076e2 <USB_ActivateEndpoint+0x47e>
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	881b      	ldrh	r3, [r3, #0]
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076c0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	441a      	add	r2, r3
 80076cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80076ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076de:	b29b      	uxth	r3, r3
 80076e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	4413      	add	r3, r2
 80076ec:	881b      	ldrh	r3, [r3, #0]
 80076ee:	873b      	strh	r3, [r7, #56]	; 0x38
 80076f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80076f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d01b      	beq.n	8007732 <USB_ActivateEndpoint+0x4ce>
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4413      	add	r3, r2
 8007704:	881b      	ldrh	r3, [r3, #0]
 8007706:	b29b      	uxth	r3, r3
 8007708:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800770c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007710:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	441a      	add	r2, r3
 800771c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800771e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007722:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800772a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800772e:	b29b      	uxth	r3, r3
 8007730:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4413      	add	r3, r2
 800773c:	881b      	ldrh	r3, [r3, #0]
 800773e:	b29b      	uxth	r3, r3
 8007740:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007748:	86bb      	strh	r3, [r7, #52]	; 0x34
 800774a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800774c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007750:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007752:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007754:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007758:	86bb      	strh	r3, [r7, #52]	; 0x34
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	441a      	add	r2, r3
 8007764:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800776a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800776e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007776:	b29b      	uxth	r3, r3
 8007778:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4413      	add	r3, r2
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	b29b      	uxth	r3, r3
 8007788:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800778c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007790:	867b      	strh	r3, [r7, #50]	; 0x32
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	441a      	add	r2, r3
 800779c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800779e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	8013      	strh	r3, [r2, #0]
 80077b2:	e0ba      	b.n	800792a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4413      	add	r3, r2
 80077be:	881b      	ldrh	r3, [r3, #0]
 80077c0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80077c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80077c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d01d      	beq.n	800780c <USB_ActivateEndpoint+0x5a8>
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	881b      	ldrh	r3, [r3, #0]
 80077dc:	b29b      	uxth	r3, r3
 80077de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077e6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	441a      	add	r2, r3
 80077f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80077f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007800:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007808:	b29b      	uxth	r3, r3
 800780a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4413      	add	r3, r2
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800781c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007824:	2b00      	cmp	r3, #0
 8007826:	d01d      	beq.n	8007864 <USB_ActivateEndpoint+0x600>
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4413      	add	r3, r2
 8007832:	881b      	ldrh	r3, [r3, #0]
 8007834:	b29b      	uxth	r3, r3
 8007836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800783a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800783e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	441a      	add	r2, r3
 800784c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007850:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007854:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800785c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007860:	b29b      	uxth	r3, r3
 8007862:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	78db      	ldrb	r3, [r3, #3]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d024      	beq.n	80078b6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	4413      	add	r3, r2
 8007876:	881b      	ldrh	r3, [r3, #0]
 8007878:	b29b      	uxth	r3, r3
 800787a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800787e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007882:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007886:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800788a:	f083 0320 	eor.w	r3, r3, #32
 800788e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	441a      	add	r2, r3
 800789c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80078a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	8013      	strh	r3, [r2, #0]
 80078b4:	e01d      	b.n	80078f2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4413      	add	r3, r2
 80078c0:	881b      	ldrh	r3, [r3, #0]
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	441a      	add	r2, r3
 80078da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80078de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	881b      	ldrh	r3, [r3, #0]
 80078fe:	b29b      	uxth	r3, r3
 8007900:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007908:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	441a      	add	r2, r3
 8007914:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800791a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800791e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007926:	b29b      	uxth	r3, r3
 8007928:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800792a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800792e:	4618      	mov	r0, r3
 8007930:	376c      	adds	r7, #108	; 0x6c
 8007932:	46bd      	mov	sp, r7
 8007934:	bc80      	pop	{r7}
 8007936:	4770      	bx	lr

08007938 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007938:	b480      	push	{r7}
 800793a:	b08d      	sub	sp, #52	; 0x34
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	7b1b      	ldrb	r3, [r3, #12]
 8007946:	2b00      	cmp	r3, #0
 8007948:	f040 808e 	bne.w	8007a68 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	785b      	ldrb	r3, [r3, #1]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d044      	beq.n	80079de <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4413      	add	r3, r2
 800795e:	881b      	ldrh	r3, [r3, #0]
 8007960:	81bb      	strh	r3, [r7, #12]
 8007962:	89bb      	ldrh	r3, [r7, #12]
 8007964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007968:	2b00      	cmp	r3, #0
 800796a:	d01b      	beq.n	80079a4 <USB_DeactivateEndpoint+0x6c>
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	4413      	add	r3, r2
 8007976:	881b      	ldrh	r3, [r3, #0]
 8007978:	b29b      	uxth	r3, r3
 800797a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800797e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007982:	817b      	strh	r3, [r7, #10]
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	441a      	add	r2, r3
 800798e:	897b      	ldrh	r3, [r7, #10]
 8007990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800799c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	881b      	ldrh	r3, [r3, #0]
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079ba:	813b      	strh	r3, [r7, #8]
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	441a      	add	r2, r3
 80079c6:	893b      	ldrh	r3, [r7, #8]
 80079c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d8:	b29b      	uxth	r3, r3
 80079da:	8013      	strh	r3, [r2, #0]
 80079dc:	e192      	b.n	8007d04 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4413      	add	r3, r2
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	827b      	strh	r3, [r7, #18]
 80079ec:	8a7b      	ldrh	r3, [r7, #18]
 80079ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d01b      	beq.n	8007a2e <USB_DeactivateEndpoint+0xf6>
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	881b      	ldrh	r3, [r3, #0]
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a0c:	823b      	strh	r3, [r7, #16]
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	441a      	add	r2, r3
 8007a18:	8a3b      	ldrh	r3, [r7, #16]
 8007a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	4413      	add	r3, r2
 8007a38:	881b      	ldrh	r3, [r3, #0]
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a44:	81fb      	strh	r3, [r7, #14]
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	441a      	add	r2, r3
 8007a50:	89fb      	ldrh	r3, [r7, #14]
 8007a52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	8013      	strh	r3, [r2, #0]
 8007a66:	e14d      	b.n	8007d04 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	785b      	ldrb	r3, [r3, #1]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f040 80a5 	bne.w	8007bbc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	4413      	add	r3, r2
 8007a7c:	881b      	ldrh	r3, [r3, #0]
 8007a7e:	843b      	strh	r3, [r7, #32]
 8007a80:	8c3b      	ldrh	r3, [r7, #32]
 8007a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d01b      	beq.n	8007ac2 <USB_DeactivateEndpoint+0x18a>
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4413      	add	r3, r2
 8007a94:	881b      	ldrh	r3, [r3, #0]
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aa0:	83fb      	strh	r3, [r7, #30]
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	441a      	add	r2, r3
 8007aac:	8bfb      	ldrh	r3, [r7, #30]
 8007aae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ab2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ab6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	4413      	add	r3, r2
 8007acc:	881b      	ldrh	r3, [r3, #0]
 8007ace:	83bb      	strh	r3, [r7, #28]
 8007ad0:	8bbb      	ldrh	r3, [r7, #28]
 8007ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d01b      	beq.n	8007b12 <USB_DeactivateEndpoint+0x1da>
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4413      	add	r3, r2
 8007ae4:	881b      	ldrh	r3, [r3, #0]
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007af0:	837b      	strh	r3, [r7, #26]
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	441a      	add	r2, r3
 8007afc:	8b7b      	ldrh	r3, [r7, #26]
 8007afe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	4413      	add	r3, r2
 8007b1c:	881b      	ldrh	r3, [r3, #0]
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b28:	833b      	strh	r3, [r7, #24]
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	441a      	add	r2, r3
 8007b34:	8b3b      	ldrh	r3, [r7, #24]
 8007b36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4413      	add	r3, r2
 8007b54:	881b      	ldrh	r3, [r3, #0]
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b60:	82fb      	strh	r3, [r7, #22]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	441a      	add	r2, r3
 8007b6c:	8afb      	ldrh	r3, [r7, #22]
 8007b6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	4413      	add	r3, r2
 8007b8c:	881b      	ldrh	r3, [r3, #0]
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b98:	82bb      	strh	r3, [r7, #20]
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	441a      	add	r2, r3
 8007ba4:	8abb      	ldrh	r3, [r7, #20]
 8007ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	8013      	strh	r3, [r2, #0]
 8007bba:	e0a3      	b.n	8007d04 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	881b      	ldrh	r3, [r3, #0]
 8007bc8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007bca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d01b      	beq.n	8007c0c <USB_DeactivateEndpoint+0x2d4>
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4413      	add	r3, r2
 8007bde:	881b      	ldrh	r3, [r3, #0]
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	441a      	add	r2, r3
 8007bf6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007bf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	881b      	ldrh	r3, [r3, #0]
 8007c18:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007c1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d01b      	beq.n	8007c5c <USB_DeactivateEndpoint+0x324>
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	4413      	add	r3, r2
 8007c2e:	881b      	ldrh	r3, [r3, #0]
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c3a:	853b      	strh	r3, [r7, #40]	; 0x28
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	441a      	add	r2, r3
 8007c46:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007c48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	881b      	ldrh	r3, [r3, #0]
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c72:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	441a      	add	r2, r3
 8007c7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4413      	add	r3, r2
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007caa:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	441a      	add	r2, r3
 8007cb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007cb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	881b      	ldrh	r3, [r3, #0]
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ce2:	847b      	strh	r3, [r7, #34]	; 0x22
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	441a      	add	r2, r3
 8007cee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3734      	adds	r7, #52	; 0x34
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bc80      	pop	{r7}
 8007d0e:	4770      	bx	lr

08007d10 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b0c4      	sub	sp, #272	; 0x110
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	1d3b      	adds	r3, r7, #4
 8007d18:	6018      	str	r0, [r3, #0]
 8007d1a:	463b      	mov	r3, r7
 8007d1c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d1e:	463b      	mov	r3, r7
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	785b      	ldrb	r3, [r3, #1]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	f040 8557 	bne.w	80087d8 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007d2a:	463b      	mov	r3, r7
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	699a      	ldr	r2, [r3, #24]
 8007d30:	463b      	mov	r3, r7
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d905      	bls.n	8007d46 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8007d3a:	463b      	mov	r3, r7
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007d44:	e004      	b.n	8007d50 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007d46:	463b      	mov	r3, r7
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	699b      	ldr	r3, [r3, #24]
 8007d4c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007d50:	463b      	mov	r3, r7
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	7b1b      	ldrb	r3, [r3, #12]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d12c      	bne.n	8007db4 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007d5a:	463b      	mov	r3, r7
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	6959      	ldr	r1, [r3, #20]
 8007d60:	463b      	mov	r3, r7
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	88da      	ldrh	r2, [r3, #6]
 8007d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	1d38      	adds	r0, r7, #4
 8007d6e:	6800      	ldr	r0, [r0, #0]
 8007d70:	f001 fa2c 	bl	80091cc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007d74:	1d3b      	adds	r3, r7, #4
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	617b      	str	r3, [r7, #20]
 8007d7a:	1d3b      	adds	r3, r7, #4
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	461a      	mov	r2, r3
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	4413      	add	r3, r2
 8007d8a:	617b      	str	r3, [r7, #20]
 8007d8c:	463b      	mov	r3, r7
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	011a      	lsls	r2, r3, #4
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	4413      	add	r3, r2
 8007d98:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007d9c:	f107 0310 	add.w	r3, r7, #16
 8007da0:	601a      	str	r2, [r3, #0]
 8007da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	f107 0310 	add.w	r3, r7, #16
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	801a      	strh	r2, [r3, #0]
 8007db0:	f000 bcdd 	b.w	800876e <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007db4:	463b      	mov	r3, r7
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	78db      	ldrb	r3, [r3, #3]
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	f040 8347 	bne.w	800844e <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007dc0:	463b      	mov	r3, r7
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6a1a      	ldr	r2, [r3, #32]
 8007dc6:	463b      	mov	r3, r7
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	f240 82eb 	bls.w	80083a8 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007dd2:	1d3b      	adds	r3, r7, #4
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	463b      	mov	r3, r7
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	4413      	add	r3, r2
 8007de0:	881b      	ldrh	r3, [r3, #0]
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dec:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8007df0:	1d3b      	adds	r3, r7, #4
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	463b      	mov	r3, r7
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	441a      	add	r2, r3
 8007dfe:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007e02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e0a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007e16:	463b      	mov	r3, r7
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	6a1a      	ldr	r2, [r3, #32]
 8007e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e20:	1ad2      	subs	r2, r2, r3
 8007e22:	463b      	mov	r3, r7
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007e28:	1d3b      	adds	r3, r7, #4
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	463b      	mov	r3, r7
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4413      	add	r3, r2
 8007e36:	881b      	ldrh	r3, [r3, #0]
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f000 8159 	beq.w	80080f6 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007e44:	1d3b      	adds	r3, r7, #4
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	637b      	str	r3, [r7, #52]	; 0x34
 8007e4a:	463b      	mov	r3, r7
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	785b      	ldrb	r3, [r3, #1]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d164      	bne.n	8007f1e <USB_EPStartXfer+0x20e>
 8007e54:	1d3b      	adds	r3, r7, #4
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e5a:	1d3b      	adds	r3, r7, #4
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	461a      	mov	r2, r3
 8007e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e68:	4413      	add	r3, r2
 8007e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e6c:	463b      	mov	r3, r7
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	011a      	lsls	r2, r3, #4
 8007e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e76:	4413      	add	r3, r2
 8007e78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d112      	bne.n	8007eac <USB_EPStartXfer+0x19c>
 8007e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e88:	881b      	ldrh	r3, [r3, #0]
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e94:	801a      	strh	r2, [r3, #0]
 8007e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e98:	881b      	ldrh	r3, [r3, #0]
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ea0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea8:	801a      	strh	r2, [r3, #0]
 8007eaa:	e054      	b.n	8007f56 <USB_EPStartXfer+0x246>
 8007eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007eb0:	2b3e      	cmp	r3, #62	; 0x3e
 8007eb2:	d817      	bhi.n	8007ee4 <USB_EPStartXfer+0x1d4>
 8007eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007eb8:	085b      	lsrs	r3, r3, #1
 8007eba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d004      	beq.n	8007ed4 <USB_EPStartXfer+0x1c4>
 8007eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ece:	3301      	adds	r3, #1
 8007ed0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	029b      	lsls	r3, r3, #10
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee0:	801a      	strh	r2, [r3, #0]
 8007ee2:	e038      	b.n	8007f56 <USB_EPStartXfer+0x246>
 8007ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ee8:	095b      	lsrs	r3, r3, #5
 8007eea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ef2:	f003 031f 	and.w	r3, r3, #31
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d104      	bne.n	8007f04 <USB_EPStartXfer+0x1f4>
 8007efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007efe:	3b01      	subs	r3, #1
 8007f00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	029b      	lsls	r3, r3, #10
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1a:	801a      	strh	r2, [r3, #0]
 8007f1c:	e01b      	b.n	8007f56 <USB_EPStartXfer+0x246>
 8007f1e:	463b      	mov	r3, r7
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	785b      	ldrb	r3, [r3, #1]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d116      	bne.n	8007f56 <USB_EPStartXfer+0x246>
 8007f28:	1d3b      	adds	r3, r7, #4
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	461a      	mov	r2, r3
 8007f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f36:	4413      	add	r3, r2
 8007f38:	637b      	str	r3, [r7, #52]	; 0x34
 8007f3a:	463b      	mov	r3, r7
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	011a      	lsls	r2, r3, #4
 8007f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f44:	4413      	add	r3, r2
 8007f46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f4a:	633b      	str	r3, [r7, #48]	; 0x30
 8007f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f54:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007f56:	463b      	mov	r3, r7
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	895b      	ldrh	r3, [r3, #10]
 8007f5c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f60:	463b      	mov	r3, r7
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	6959      	ldr	r1, [r3, #20]
 8007f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007f70:	1d38      	adds	r0, r7, #4
 8007f72:	6800      	ldr	r0, [r0, #0]
 8007f74:	f001 f92a 	bl	80091cc <USB_WritePMA>
            ep->xfer_buff += len;
 8007f78:	463b      	mov	r3, r7
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	695a      	ldr	r2, [r3, #20]
 8007f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f82:	441a      	add	r2, r3
 8007f84:	463b      	mov	r3, r7
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007f8a:	463b      	mov	r3, r7
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6a1a      	ldr	r2, [r3, #32]
 8007f90:	463b      	mov	r3, r7
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d909      	bls.n	8007fae <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8007f9a:	463b      	mov	r3, r7
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	6a1a      	ldr	r2, [r3, #32]
 8007fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fa4:	1ad2      	subs	r2, r2, r3
 8007fa6:	463b      	mov	r3, r7
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	621a      	str	r2, [r3, #32]
 8007fac:	e008      	b.n	8007fc0 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8007fae:	463b      	mov	r3, r7
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	6a1b      	ldr	r3, [r3, #32]
 8007fb4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8007fb8:	463b      	mov	r3, r7
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007fc0:	463b      	mov	r3, r7
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	785b      	ldrb	r3, [r3, #1]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d164      	bne.n	8008094 <USB_EPStartXfer+0x384>
 8007fca:	1d3b      	adds	r3, r7, #4
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	61fb      	str	r3, [r7, #28]
 8007fd0:	1d3b      	adds	r3, r7, #4
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	461a      	mov	r2, r3
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	4413      	add	r3, r2
 8007fe0:	61fb      	str	r3, [r7, #28]
 8007fe2:	463b      	mov	r3, r7
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	011a      	lsls	r2, r3, #4
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	4413      	add	r3, r2
 8007fee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ff2:	61bb      	str	r3, [r7, #24]
 8007ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d112      	bne.n	8008022 <USB_EPStartXfer+0x312>
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	881b      	ldrh	r3, [r3, #0]
 8008000:	b29b      	uxth	r3, r3
 8008002:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008006:	b29a      	uxth	r2, r3
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	801a      	strh	r2, [r3, #0]
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	881b      	ldrh	r3, [r3, #0]
 8008010:	b29b      	uxth	r3, r3
 8008012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800801a:	b29a      	uxth	r2, r3
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	801a      	strh	r2, [r3, #0]
 8008020:	e057      	b.n	80080d2 <USB_EPStartXfer+0x3c2>
 8008022:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008026:	2b3e      	cmp	r3, #62	; 0x3e
 8008028:	d817      	bhi.n	800805a <USB_EPStartXfer+0x34a>
 800802a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800802e:	085b      	lsrs	r3, r3, #1
 8008030:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008034:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008038:	f003 0301 	and.w	r3, r3, #1
 800803c:	2b00      	cmp	r3, #0
 800803e:	d004      	beq.n	800804a <USB_EPStartXfer+0x33a>
 8008040:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008044:	3301      	adds	r3, #1
 8008046:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800804a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800804e:	b29b      	uxth	r3, r3
 8008050:	029b      	lsls	r3, r3, #10
 8008052:	b29a      	uxth	r2, r3
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	801a      	strh	r2, [r3, #0]
 8008058:	e03b      	b.n	80080d2 <USB_EPStartXfer+0x3c2>
 800805a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800805e:	095b      	lsrs	r3, r3, #5
 8008060:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008064:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008068:	f003 031f 	and.w	r3, r3, #31
 800806c:	2b00      	cmp	r3, #0
 800806e:	d104      	bne.n	800807a <USB_EPStartXfer+0x36a>
 8008070:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008074:	3b01      	subs	r3, #1
 8008076:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800807a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800807e:	b29b      	uxth	r3, r3
 8008080:	029b      	lsls	r3, r3, #10
 8008082:	b29b      	uxth	r3, r3
 8008084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800808c:	b29a      	uxth	r2, r3
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	801a      	strh	r2, [r3, #0]
 8008092:	e01e      	b.n	80080d2 <USB_EPStartXfer+0x3c2>
 8008094:	463b      	mov	r3, r7
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	785b      	ldrb	r3, [r3, #1]
 800809a:	2b01      	cmp	r3, #1
 800809c:	d119      	bne.n	80080d2 <USB_EPStartXfer+0x3c2>
 800809e:	1d3b      	adds	r3, r7, #4
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	627b      	str	r3, [r7, #36]	; 0x24
 80080a4:	1d3b      	adds	r3, r7, #4
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	461a      	mov	r2, r3
 80080b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b2:	4413      	add	r3, r2
 80080b4:	627b      	str	r3, [r7, #36]	; 0x24
 80080b6:	463b      	mov	r3, r7
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	011a      	lsls	r2, r3, #4
 80080be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c0:	4413      	add	r3, r2
 80080c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80080c6:	623b      	str	r3, [r7, #32]
 80080c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	6a3b      	ldr	r3, [r7, #32]
 80080d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80080d2:	463b      	mov	r3, r7
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	891b      	ldrh	r3, [r3, #8]
 80080d8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080dc:	463b      	mov	r3, r7
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6959      	ldr	r1, [r3, #20]
 80080e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80080ec:	1d38      	adds	r0, r7, #4
 80080ee:	6800      	ldr	r0, [r0, #0]
 80080f0:	f001 f86c 	bl	80091cc <USB_WritePMA>
 80080f4:	e33b      	b.n	800876e <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80080f6:	463b      	mov	r3, r7
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	785b      	ldrb	r3, [r3, #1]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d164      	bne.n	80081ca <USB_EPStartXfer+0x4ba>
 8008100:	1d3b      	adds	r3, r7, #4
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008106:	1d3b      	adds	r3, r7, #4
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800810e:	b29b      	uxth	r3, r3
 8008110:	461a      	mov	r2, r3
 8008112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008114:	4413      	add	r3, r2
 8008116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008118:	463b      	mov	r3, r7
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	011a      	lsls	r2, r3, #4
 8008120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008122:	4413      	add	r3, r2
 8008124:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008128:	64bb      	str	r3, [r7, #72]	; 0x48
 800812a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800812e:	2b00      	cmp	r3, #0
 8008130:	d112      	bne.n	8008158 <USB_EPStartXfer+0x448>
 8008132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008134:	881b      	ldrh	r3, [r3, #0]
 8008136:	b29b      	uxth	r3, r3
 8008138:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800813c:	b29a      	uxth	r2, r3
 800813e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008140:	801a      	strh	r2, [r3, #0]
 8008142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008144:	881b      	ldrh	r3, [r3, #0]
 8008146:	b29b      	uxth	r3, r3
 8008148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800814c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008150:	b29a      	uxth	r2, r3
 8008152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008154:	801a      	strh	r2, [r3, #0]
 8008156:	e057      	b.n	8008208 <USB_EPStartXfer+0x4f8>
 8008158:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800815c:	2b3e      	cmp	r3, #62	; 0x3e
 800815e:	d817      	bhi.n	8008190 <USB_EPStartXfer+0x480>
 8008160:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008164:	085b      	lsrs	r3, r3, #1
 8008166:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800816a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800816e:	f003 0301 	and.w	r3, r3, #1
 8008172:	2b00      	cmp	r3, #0
 8008174:	d004      	beq.n	8008180 <USB_EPStartXfer+0x470>
 8008176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800817a:	3301      	adds	r3, #1
 800817c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008184:	b29b      	uxth	r3, r3
 8008186:	029b      	lsls	r3, r3, #10
 8008188:	b29a      	uxth	r2, r3
 800818a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800818c:	801a      	strh	r2, [r3, #0]
 800818e:	e03b      	b.n	8008208 <USB_EPStartXfer+0x4f8>
 8008190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008194:	095b      	lsrs	r3, r3, #5
 8008196:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800819a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800819e:	f003 031f 	and.w	r3, r3, #31
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d104      	bne.n	80081b0 <USB_EPStartXfer+0x4a0>
 80081a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081aa:	3b01      	subs	r3, #1
 80081ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80081b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	029b      	lsls	r3, r3, #10
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081c6:	801a      	strh	r2, [r3, #0]
 80081c8:	e01e      	b.n	8008208 <USB_EPStartXfer+0x4f8>
 80081ca:	463b      	mov	r3, r7
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	785b      	ldrb	r3, [r3, #1]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d119      	bne.n	8008208 <USB_EPStartXfer+0x4f8>
 80081d4:	1d3b      	adds	r3, r7, #4
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	657b      	str	r3, [r7, #84]	; 0x54
 80081da:	1d3b      	adds	r3, r7, #4
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	461a      	mov	r2, r3
 80081e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081e8:	4413      	add	r3, r2
 80081ea:	657b      	str	r3, [r7, #84]	; 0x54
 80081ec:	463b      	mov	r3, r7
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	011a      	lsls	r2, r3, #4
 80081f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081f6:	4413      	add	r3, r2
 80081f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80081fc:	653b      	str	r3, [r7, #80]	; 0x50
 80081fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008202:	b29a      	uxth	r2, r3
 8008204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008206:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008208:	463b      	mov	r3, r7
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	891b      	ldrh	r3, [r3, #8]
 800820e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008212:	463b      	mov	r3, r7
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	6959      	ldr	r1, [r3, #20]
 8008218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800821c:	b29b      	uxth	r3, r3
 800821e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008222:	1d38      	adds	r0, r7, #4
 8008224:	6800      	ldr	r0, [r0, #0]
 8008226:	f000 ffd1 	bl	80091cc <USB_WritePMA>
            ep->xfer_buff += len;
 800822a:	463b      	mov	r3, r7
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	695a      	ldr	r2, [r3, #20]
 8008230:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008234:	441a      	add	r2, r3
 8008236:	463b      	mov	r3, r7
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800823c:	463b      	mov	r3, r7
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	6a1a      	ldr	r2, [r3, #32]
 8008242:	463b      	mov	r3, r7
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	429a      	cmp	r2, r3
 800824a:	d909      	bls.n	8008260 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 800824c:	463b      	mov	r3, r7
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	6a1a      	ldr	r2, [r3, #32]
 8008252:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008256:	1ad2      	subs	r2, r2, r3
 8008258:	463b      	mov	r3, r7
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	621a      	str	r2, [r3, #32]
 800825e:	e008      	b.n	8008272 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8008260:	463b      	mov	r3, r7
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800826a:	463b      	mov	r3, r7
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2200      	movs	r2, #0
 8008270:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008272:	1d3b      	adds	r3, r7, #4
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	647b      	str	r3, [r7, #68]	; 0x44
 8008278:	463b      	mov	r3, r7
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	785b      	ldrb	r3, [r3, #1]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d164      	bne.n	800834c <USB_EPStartXfer+0x63c>
 8008282:	1d3b      	adds	r3, r7, #4
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008288:	1d3b      	adds	r3, r7, #4
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008290:	b29b      	uxth	r3, r3
 8008292:	461a      	mov	r2, r3
 8008294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008296:	4413      	add	r3, r2
 8008298:	63fb      	str	r3, [r7, #60]	; 0x3c
 800829a:	463b      	mov	r3, r7
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	011a      	lsls	r2, r3, #4
 80082a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082a4:	4413      	add	r3, r2
 80082a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80082aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80082ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d112      	bne.n	80082da <USB_EPStartXfer+0x5ca>
 80082b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b6:	881b      	ldrh	r3, [r3, #0]
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80082be:	b29a      	uxth	r2, r3
 80082c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c2:	801a      	strh	r2, [r3, #0]
 80082c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c6:	881b      	ldrh	r3, [r3, #0]
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d6:	801a      	strh	r2, [r3, #0]
 80082d8:	e054      	b.n	8008384 <USB_EPStartXfer+0x674>
 80082da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082de:	2b3e      	cmp	r3, #62	; 0x3e
 80082e0:	d817      	bhi.n	8008312 <USB_EPStartXfer+0x602>
 80082e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082e6:	085b      	lsrs	r3, r3, #1
 80082e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80082ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082f0:	f003 0301 	and.w	r3, r3, #1
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d004      	beq.n	8008302 <USB_EPStartXfer+0x5f2>
 80082f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80082fc:	3301      	adds	r3, #1
 80082fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008302:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008306:	b29b      	uxth	r3, r3
 8008308:	029b      	lsls	r3, r3, #10
 800830a:	b29a      	uxth	r2, r3
 800830c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830e:	801a      	strh	r2, [r3, #0]
 8008310:	e038      	b.n	8008384 <USB_EPStartXfer+0x674>
 8008312:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008316:	095b      	lsrs	r3, r3, #5
 8008318:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800831c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008320:	f003 031f 	and.w	r3, r3, #31
 8008324:	2b00      	cmp	r3, #0
 8008326:	d104      	bne.n	8008332 <USB_EPStartXfer+0x622>
 8008328:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800832c:	3b01      	subs	r3, #1
 800832e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008332:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008336:	b29b      	uxth	r3, r3
 8008338:	029b      	lsls	r3, r3, #10
 800833a:	b29b      	uxth	r3, r3
 800833c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008344:	b29a      	uxth	r2, r3
 8008346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008348:	801a      	strh	r2, [r3, #0]
 800834a:	e01b      	b.n	8008384 <USB_EPStartXfer+0x674>
 800834c:	463b      	mov	r3, r7
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	785b      	ldrb	r3, [r3, #1]
 8008352:	2b01      	cmp	r3, #1
 8008354:	d116      	bne.n	8008384 <USB_EPStartXfer+0x674>
 8008356:	1d3b      	adds	r3, r7, #4
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800835e:	b29b      	uxth	r3, r3
 8008360:	461a      	mov	r2, r3
 8008362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008364:	4413      	add	r3, r2
 8008366:	647b      	str	r3, [r7, #68]	; 0x44
 8008368:	463b      	mov	r3, r7
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	011a      	lsls	r2, r3, #4
 8008370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008372:	4413      	add	r3, r2
 8008374:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008378:	643b      	str	r3, [r7, #64]	; 0x40
 800837a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800837e:	b29a      	uxth	r2, r3
 8008380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008382:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008384:	463b      	mov	r3, r7
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	895b      	ldrh	r3, [r3, #10]
 800838a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800838e:	463b      	mov	r3, r7
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	6959      	ldr	r1, [r3, #20]
 8008394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008398:	b29b      	uxth	r3, r3
 800839a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800839e:	1d38      	adds	r0, r7, #4
 80083a0:	6800      	ldr	r0, [r0, #0]
 80083a2:	f000 ff13 	bl	80091cc <USB_WritePMA>
 80083a6:	e1e2      	b.n	800876e <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80083a8:	463b      	mov	r3, r7
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6a1b      	ldr	r3, [r3, #32]
 80083ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80083b2:	1d3b      	adds	r3, r7, #4
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	463b      	mov	r3, r7
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	4413      	add	r3, r2
 80083c0:	881b      	ldrh	r3, [r3, #0]
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80083c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083cc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80083d0:	1d3b      	adds	r3, r7, #4
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	463b      	mov	r3, r7
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	441a      	add	r2, r3
 80083de:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80083e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80083f6:	1d3b      	adds	r3, r7, #4
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	663b      	str	r3, [r7, #96]	; 0x60
 80083fc:	1d3b      	adds	r3, r7, #4
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008404:	b29b      	uxth	r3, r3
 8008406:	461a      	mov	r2, r3
 8008408:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800840a:	4413      	add	r3, r2
 800840c:	663b      	str	r3, [r7, #96]	; 0x60
 800840e:	463b      	mov	r3, r7
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	011a      	lsls	r2, r3, #4
 8008416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008418:	4413      	add	r3, r2
 800841a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800841e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008420:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008424:	b29a      	uxth	r2, r3
 8008426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008428:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800842a:	463b      	mov	r3, r7
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	891b      	ldrh	r3, [r3, #8]
 8008430:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008434:	463b      	mov	r3, r7
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	6959      	ldr	r1, [r3, #20]
 800843a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800843e:	b29b      	uxth	r3, r3
 8008440:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008444:	1d38      	adds	r0, r7, #4
 8008446:	6800      	ldr	r0, [r0, #0]
 8008448:	f000 fec0 	bl	80091cc <USB_WritePMA>
 800844c:	e18f      	b.n	800876e <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800844e:	1d3b      	adds	r3, r7, #4
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	463b      	mov	r3, r7
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	4413      	add	r3, r2
 800845c:	881b      	ldrh	r3, [r3, #0]
 800845e:	b29b      	uxth	r3, r3
 8008460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008464:	2b00      	cmp	r3, #0
 8008466:	f000 808f 	beq.w	8008588 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800846a:	1d3b      	adds	r3, r7, #4
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008470:	463b      	mov	r3, r7
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	785b      	ldrb	r3, [r3, #1]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d164      	bne.n	8008544 <USB_EPStartXfer+0x834>
 800847a:	1d3b      	adds	r3, r7, #4
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	673b      	str	r3, [r7, #112]	; 0x70
 8008480:	1d3b      	adds	r3, r7, #4
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008488:	b29b      	uxth	r3, r3
 800848a:	461a      	mov	r2, r3
 800848c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800848e:	4413      	add	r3, r2
 8008490:	673b      	str	r3, [r7, #112]	; 0x70
 8008492:	463b      	mov	r3, r7
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	011a      	lsls	r2, r3, #4
 800849a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800849c:	4413      	add	r3, r2
 800849e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80084a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80084a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d112      	bne.n	80084d2 <USB_EPStartXfer+0x7c2>
 80084ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084ae:	881b      	ldrh	r3, [r3, #0]
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084ba:	801a      	strh	r2, [r3, #0]
 80084bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084be:	881b      	ldrh	r3, [r3, #0]
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084ce:	801a      	strh	r2, [r3, #0]
 80084d0:	e054      	b.n	800857c <USB_EPStartXfer+0x86c>
 80084d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084d6:	2b3e      	cmp	r3, #62	; 0x3e
 80084d8:	d817      	bhi.n	800850a <USB_EPStartXfer+0x7fa>
 80084da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084de:	085b      	lsrs	r3, r3, #1
 80084e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80084e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084e8:	f003 0301 	and.w	r3, r3, #1
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d004      	beq.n	80084fa <USB_EPStartXfer+0x7ea>
 80084f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084f4:	3301      	adds	r3, #1
 80084f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80084fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084fe:	b29b      	uxth	r3, r3
 8008500:	029b      	lsls	r3, r3, #10
 8008502:	b29a      	uxth	r2, r3
 8008504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008506:	801a      	strh	r2, [r3, #0]
 8008508:	e038      	b.n	800857c <USB_EPStartXfer+0x86c>
 800850a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800850e:	095b      	lsrs	r3, r3, #5
 8008510:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008514:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008518:	f003 031f 	and.w	r3, r3, #31
 800851c:	2b00      	cmp	r3, #0
 800851e:	d104      	bne.n	800852a <USB_EPStartXfer+0x81a>
 8008520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008524:	3b01      	subs	r3, #1
 8008526:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800852a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800852e:	b29b      	uxth	r3, r3
 8008530:	029b      	lsls	r3, r3, #10
 8008532:	b29b      	uxth	r3, r3
 8008534:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008538:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800853c:	b29a      	uxth	r2, r3
 800853e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008540:	801a      	strh	r2, [r3, #0]
 8008542:	e01b      	b.n	800857c <USB_EPStartXfer+0x86c>
 8008544:	463b      	mov	r3, r7
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	785b      	ldrb	r3, [r3, #1]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d116      	bne.n	800857c <USB_EPStartXfer+0x86c>
 800854e:	1d3b      	adds	r3, r7, #4
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008556:	b29b      	uxth	r3, r3
 8008558:	461a      	mov	r2, r3
 800855a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800855c:	4413      	add	r3, r2
 800855e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008560:	463b      	mov	r3, r7
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	011a      	lsls	r2, r3, #4
 8008568:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800856a:	4413      	add	r3, r2
 800856c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008570:	677b      	str	r3, [r7, #116]	; 0x74
 8008572:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008576:	b29a      	uxth	r2, r3
 8008578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800857a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800857c:	463b      	mov	r3, r7
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	895b      	ldrh	r3, [r3, #10]
 8008582:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8008586:	e097      	b.n	80086b8 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008588:	463b      	mov	r3, r7
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	785b      	ldrb	r3, [r3, #1]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d168      	bne.n	8008664 <USB_EPStartXfer+0x954>
 8008592:	1d3b      	adds	r3, r7, #4
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800859a:	1d3b      	adds	r3, r7, #4
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	461a      	mov	r2, r3
 80085a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80085aa:	4413      	add	r3, r2
 80085ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085b0:	463b      	mov	r3, r7
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	011a      	lsls	r2, r3, #4
 80085b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80085bc:	4413      	add	r3, r2
 80085be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80085c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80085c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d112      	bne.n	80085f2 <USB_EPStartXfer+0x8e2>
 80085cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80085ce:	881b      	ldrh	r3, [r3, #0]
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80085d6:	b29a      	uxth	r2, r3
 80085d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80085da:	801a      	strh	r2, [r3, #0]
 80085dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80085de:	881b      	ldrh	r3, [r3, #0]
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80085ee:	801a      	strh	r2, [r3, #0]
 80085f0:	e05d      	b.n	80086ae <USB_EPStartXfer+0x99e>
 80085f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085f6:	2b3e      	cmp	r3, #62	; 0x3e
 80085f8:	d817      	bhi.n	800862a <USB_EPStartXfer+0x91a>
 80085fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085fe:	085b      	lsrs	r3, r3, #1
 8008600:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008604:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008608:	f003 0301 	and.w	r3, r3, #1
 800860c:	2b00      	cmp	r3, #0
 800860e:	d004      	beq.n	800861a <USB_EPStartXfer+0x90a>
 8008610:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008614:	3301      	adds	r3, #1
 8008616:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800861a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800861e:	b29b      	uxth	r3, r3
 8008620:	029b      	lsls	r3, r3, #10
 8008622:	b29a      	uxth	r2, r3
 8008624:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008626:	801a      	strh	r2, [r3, #0]
 8008628:	e041      	b.n	80086ae <USB_EPStartXfer+0x99e>
 800862a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800862e:	095b      	lsrs	r3, r3, #5
 8008630:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008634:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008638:	f003 031f 	and.w	r3, r3, #31
 800863c:	2b00      	cmp	r3, #0
 800863e:	d104      	bne.n	800864a <USB_EPStartXfer+0x93a>
 8008640:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008644:	3b01      	subs	r3, #1
 8008646:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800864a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800864e:	b29b      	uxth	r3, r3
 8008650:	029b      	lsls	r3, r3, #10
 8008652:	b29b      	uxth	r3, r3
 8008654:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008658:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800865c:	b29a      	uxth	r2, r3
 800865e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008660:	801a      	strh	r2, [r3, #0]
 8008662:	e024      	b.n	80086ae <USB_EPStartXfer+0x99e>
 8008664:	463b      	mov	r3, r7
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	785b      	ldrb	r3, [r3, #1]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d11f      	bne.n	80086ae <USB_EPStartXfer+0x99e>
 800866e:	1d3b      	adds	r3, r7, #4
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008676:	1d3b      	adds	r3, r7, #4
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800867e:	b29b      	uxth	r3, r3
 8008680:	461a      	mov	r2, r3
 8008682:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008686:	4413      	add	r3, r2
 8008688:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800868c:	463b      	mov	r3, r7
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	011a      	lsls	r2, r3, #4
 8008694:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008698:	4413      	add	r3, r2
 800869a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800869e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80086a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80086ac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80086ae:	463b      	mov	r3, r7
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	891b      	ldrh	r3, [r3, #8]
 80086b4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086b8:	463b      	mov	r3, r7
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	6959      	ldr	r1, [r3, #20]
 80086be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80086c8:	1d38      	adds	r0, r7, #4
 80086ca:	6800      	ldr	r0, [r0, #0]
 80086cc:	f000 fd7e 	bl	80091cc <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80086d0:	463b      	mov	r3, r7
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	785b      	ldrb	r3, [r3, #1]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d122      	bne.n	8008720 <USB_EPStartXfer+0xa10>
 80086da:	1d3b      	adds	r3, r7, #4
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	463b      	mov	r3, r7
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	881b      	ldrh	r3, [r3, #0]
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086f4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80086f8:	1d3b      	adds	r3, r7, #4
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	463b      	mov	r3, r7
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	441a      	add	r2, r3
 8008706:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800870a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800870e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008716:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800871a:	b29b      	uxth	r3, r3
 800871c:	8013      	strh	r3, [r2, #0]
 800871e:	e026      	b.n	800876e <USB_EPStartXfer+0xa5e>
 8008720:	463b      	mov	r3, r7
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	785b      	ldrb	r3, [r3, #1]
 8008726:	2b01      	cmp	r3, #1
 8008728:	d121      	bne.n	800876e <USB_EPStartXfer+0xa5e>
 800872a:	1d3b      	adds	r3, r7, #4
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	463b      	mov	r3, r7
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	4413      	add	r3, r2
 8008738:	881b      	ldrh	r3, [r3, #0]
 800873a:	b29b      	uxth	r3, r3
 800873c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008744:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8008748:	1d3b      	adds	r3, r7, #4
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	463b      	mov	r3, r7
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	441a      	add	r2, r3
 8008756:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800875a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800875e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008762:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800876a:	b29b      	uxth	r3, r3
 800876c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800876e:	1d3b      	adds	r3, r7, #4
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	463b      	mov	r3, r7
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	4413      	add	r3, r2
 800877c:	881b      	ldrh	r3, [r3, #0]
 800877e:	b29b      	uxth	r3, r3
 8008780:	f107 020e 	add.w	r2, r7, #14
 8008784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800878c:	8013      	strh	r3, [r2, #0]
 800878e:	f107 030e 	add.w	r3, r7, #14
 8008792:	f107 020e 	add.w	r2, r7, #14
 8008796:	8812      	ldrh	r2, [r2, #0]
 8008798:	f082 0210 	eor.w	r2, r2, #16
 800879c:	801a      	strh	r2, [r3, #0]
 800879e:	f107 030e 	add.w	r3, r7, #14
 80087a2:	f107 020e 	add.w	r2, r7, #14
 80087a6:	8812      	ldrh	r2, [r2, #0]
 80087a8:	f082 0220 	eor.w	r2, r2, #32
 80087ac:	801a      	strh	r2, [r3, #0]
 80087ae:	1d3b      	adds	r3, r7, #4
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	463b      	mov	r3, r7
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	441a      	add	r2, r3
 80087bc:	f107 030e 	add.w	r3, r7, #14
 80087c0:	881b      	ldrh	r3, [r3, #0]
 80087c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	8013      	strh	r3, [r2, #0]
 80087d6:	e3b5      	b.n	8008f44 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80087d8:	463b      	mov	r3, r7
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	7b1b      	ldrb	r3, [r3, #12]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	f040 8090 	bne.w	8008904 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80087e4:	463b      	mov	r3, r7
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	699a      	ldr	r2, [r3, #24]
 80087ea:	463b      	mov	r3, r7
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d90e      	bls.n	8008812 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80087f4:	463b      	mov	r3, r7
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	691b      	ldr	r3, [r3, #16]
 80087fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80087fe:	463b      	mov	r3, r7
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	699a      	ldr	r2, [r3, #24]
 8008804:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008808:	1ad2      	subs	r2, r2, r3
 800880a:	463b      	mov	r3, r7
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	619a      	str	r2, [r3, #24]
 8008810:	e008      	b.n	8008824 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8008812:	463b      	mov	r3, r7
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 800881c:	463b      	mov	r3, r7
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2200      	movs	r2, #0
 8008822:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008824:	1d3b      	adds	r3, r7, #4
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800882c:	1d3b      	adds	r3, r7, #4
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008834:	b29b      	uxth	r3, r3
 8008836:	461a      	mov	r2, r3
 8008838:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800883c:	4413      	add	r3, r2
 800883e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008842:	463b      	mov	r3, r7
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	011a      	lsls	r2, r3, #4
 800884a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800884e:	4413      	add	r3, r2
 8008850:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008854:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008858:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800885c:	2b00      	cmp	r3, #0
 800885e:	d116      	bne.n	800888e <USB_EPStartXfer+0xb7e>
 8008860:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008864:	881b      	ldrh	r3, [r3, #0]
 8008866:	b29b      	uxth	r3, r3
 8008868:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800886c:	b29a      	uxth	r2, r3
 800886e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008872:	801a      	strh	r2, [r3, #0]
 8008874:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008878:	881b      	ldrh	r3, [r3, #0]
 800887a:	b29b      	uxth	r3, r3
 800887c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008880:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008884:	b29a      	uxth	r2, r3
 8008886:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800888a:	801a      	strh	r2, [r3, #0]
 800888c:	e32c      	b.n	8008ee8 <USB_EPStartXfer+0x11d8>
 800888e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008892:	2b3e      	cmp	r3, #62	; 0x3e
 8008894:	d818      	bhi.n	80088c8 <USB_EPStartXfer+0xbb8>
 8008896:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800889a:	085b      	lsrs	r3, r3, #1
 800889c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80088a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088a4:	f003 0301 	and.w	r3, r3, #1
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d004      	beq.n	80088b6 <USB_EPStartXfer+0xba6>
 80088ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088b0:	3301      	adds	r3, #1
 80088b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80088b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	029b      	lsls	r3, r3, #10
 80088be:	b29a      	uxth	r2, r3
 80088c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088c4:	801a      	strh	r2, [r3, #0]
 80088c6:	e30f      	b.n	8008ee8 <USB_EPStartXfer+0x11d8>
 80088c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088cc:	095b      	lsrs	r3, r3, #5
 80088ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80088d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088d6:	f003 031f 	and.w	r3, r3, #31
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d104      	bne.n	80088e8 <USB_EPStartXfer+0xbd8>
 80088de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088e2:	3b01      	subs	r3, #1
 80088e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80088e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	029b      	lsls	r3, r3, #10
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088fa:	b29a      	uxth	r2, r3
 80088fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008900:	801a      	strh	r2, [r3, #0]
 8008902:	e2f1      	b.n	8008ee8 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008904:	463b      	mov	r3, r7
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	78db      	ldrb	r3, [r3, #3]
 800890a:	2b02      	cmp	r3, #2
 800890c:	f040 818f 	bne.w	8008c2e <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008910:	463b      	mov	r3, r7
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	785b      	ldrb	r3, [r3, #1]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d175      	bne.n	8008a06 <USB_EPStartXfer+0xcf6>
 800891a:	1d3b      	adds	r3, r7, #4
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008922:	1d3b      	adds	r3, r7, #4
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800892a:	b29b      	uxth	r3, r3
 800892c:	461a      	mov	r2, r3
 800892e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008932:	4413      	add	r3, r2
 8008934:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008938:	463b      	mov	r3, r7
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	011a      	lsls	r2, r3, #4
 8008940:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008944:	4413      	add	r3, r2
 8008946:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800894a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800894e:	463b      	mov	r3, r7
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d116      	bne.n	8008986 <USB_EPStartXfer+0xc76>
 8008958:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800895c:	881b      	ldrh	r3, [r3, #0]
 800895e:	b29b      	uxth	r3, r3
 8008960:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008964:	b29a      	uxth	r2, r3
 8008966:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800896a:	801a      	strh	r2, [r3, #0]
 800896c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008970:	881b      	ldrh	r3, [r3, #0]
 8008972:	b29b      	uxth	r3, r3
 8008974:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008978:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800897c:	b29a      	uxth	r2, r3
 800897e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008982:	801a      	strh	r2, [r3, #0]
 8008984:	e065      	b.n	8008a52 <USB_EPStartXfer+0xd42>
 8008986:	463b      	mov	r3, r7
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	691b      	ldr	r3, [r3, #16]
 800898c:	2b3e      	cmp	r3, #62	; 0x3e
 800898e:	d81a      	bhi.n	80089c6 <USB_EPStartXfer+0xcb6>
 8008990:	463b      	mov	r3, r7
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	085b      	lsrs	r3, r3, #1
 8008998:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800899c:	463b      	mov	r3, r7
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	f003 0301 	and.w	r3, r3, #1
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d004      	beq.n	80089b4 <USB_EPStartXfer+0xca4>
 80089aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80089ae:	3301      	adds	r3, #1
 80089b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80089b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	029b      	lsls	r3, r3, #10
 80089bc:	b29a      	uxth	r2, r3
 80089be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089c2:	801a      	strh	r2, [r3, #0]
 80089c4:	e045      	b.n	8008a52 <USB_EPStartXfer+0xd42>
 80089c6:	463b      	mov	r3, r7
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	095b      	lsrs	r3, r3, #5
 80089ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80089d2:	463b      	mov	r3, r7
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	f003 031f 	and.w	r3, r3, #31
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d104      	bne.n	80089ea <USB_EPStartXfer+0xcda>
 80089e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80089e4:	3b01      	subs	r3, #1
 80089e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80089ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	029b      	lsls	r3, r3, #10
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a02:	801a      	strh	r2, [r3, #0]
 8008a04:	e025      	b.n	8008a52 <USB_EPStartXfer+0xd42>
 8008a06:	463b      	mov	r3, r7
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	785b      	ldrb	r3, [r3, #1]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d120      	bne.n	8008a52 <USB_EPStartXfer+0xd42>
 8008a10:	1d3b      	adds	r3, r7, #4
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a18:	1d3b      	adds	r3, r7, #4
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	461a      	mov	r2, r3
 8008a24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a28:	4413      	add	r3, r2
 8008a2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a2e:	463b      	mov	r3, r7
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	011a      	lsls	r2, r3, #4
 8008a36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a3a:	4413      	add	r3, r2
 8008a3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a44:	463b      	mov	r3, r7
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	b29a      	uxth	r2, r3
 8008a4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a50:	801a      	strh	r2, [r3, #0]
 8008a52:	1d3b      	adds	r3, r7, #4
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008a5a:	463b      	mov	r3, r7
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	785b      	ldrb	r3, [r3, #1]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d175      	bne.n	8008b50 <USB_EPStartXfer+0xe40>
 8008a64:	1d3b      	adds	r3, r7, #4
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008a6c:	1d3b      	adds	r3, r7, #4
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	461a      	mov	r2, r3
 8008a78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008a7c:	4413      	add	r3, r2
 8008a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008a82:	463b      	mov	r3, r7
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	011a      	lsls	r2, r3, #4
 8008a8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008a8e:	4413      	add	r3, r2
 8008a90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008a98:	463b      	mov	r3, r7
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d116      	bne.n	8008ad0 <USB_EPStartXfer+0xdc0>
 8008aa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008aa6:	881b      	ldrh	r3, [r3, #0]
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008aae:	b29a      	uxth	r2, r3
 8008ab0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ab4:	801a      	strh	r2, [r3, #0]
 8008ab6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008aba:	881b      	ldrh	r3, [r3, #0]
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ac6:	b29a      	uxth	r2, r3
 8008ac8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008acc:	801a      	strh	r2, [r3, #0]
 8008ace:	e061      	b.n	8008b94 <USB_EPStartXfer+0xe84>
 8008ad0:	463b      	mov	r3, r7
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	2b3e      	cmp	r3, #62	; 0x3e
 8008ad8:	d81a      	bhi.n	8008b10 <USB_EPStartXfer+0xe00>
 8008ada:	463b      	mov	r3, r7
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	085b      	lsrs	r3, r3, #1
 8008ae2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ae6:	463b      	mov	r3, r7
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	f003 0301 	and.w	r3, r3, #1
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d004      	beq.n	8008afe <USB_EPStartXfer+0xdee>
 8008af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008af8:	3301      	adds	r3, #1
 8008afa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	029b      	lsls	r3, r3, #10
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b0c:	801a      	strh	r2, [r3, #0]
 8008b0e:	e041      	b.n	8008b94 <USB_EPStartXfer+0xe84>
 8008b10:	463b      	mov	r3, r7
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	095b      	lsrs	r3, r3, #5
 8008b18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b1c:	463b      	mov	r3, r7
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	f003 031f 	and.w	r3, r3, #31
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d104      	bne.n	8008b34 <USB_EPStartXfer+0xe24>
 8008b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	029b      	lsls	r3, r3, #10
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b46:	b29a      	uxth	r2, r3
 8008b48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b4c:	801a      	strh	r2, [r3, #0]
 8008b4e:	e021      	b.n	8008b94 <USB_EPStartXfer+0xe84>
 8008b50:	463b      	mov	r3, r7
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	785b      	ldrb	r3, [r3, #1]
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d11c      	bne.n	8008b94 <USB_EPStartXfer+0xe84>
 8008b5a:	1d3b      	adds	r3, r7, #4
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	461a      	mov	r2, r3
 8008b66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008b6a:	4413      	add	r3, r2
 8008b6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008b70:	463b      	mov	r3, r7
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	011a      	lsls	r2, r3, #4
 8008b78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008b7c:	4413      	add	r3, r2
 8008b7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008b86:	463b      	mov	r3, r7
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008b92:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008b94:	463b      	mov	r3, r7
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	69db      	ldr	r3, [r3, #28]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	f000 81a4 	beq.w	8008ee8 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008ba0:	1d3b      	adds	r3, r7, #4
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	463b      	mov	r3, r7
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4413      	add	r3, r2
 8008bae:	881b      	ldrh	r3, [r3, #0]
 8008bb0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008bb4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d005      	beq.n	8008bcc <USB_EPStartXfer+0xebc>
 8008bc0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d10d      	bne.n	8008be8 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008bcc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f040 8187 	bne.w	8008ee8 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008bda:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f040 8180 	bne.w	8008ee8 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008be8:	1d3b      	adds	r3, r7, #4
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	463b      	mov	r3, r7
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	4413      	add	r3, r2
 8008bf6:	881b      	ldrh	r3, [r3, #0]
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c02:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8008c06:	1d3b      	adds	r3, r7, #4
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	463b      	mov	r3, r7
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	441a      	add	r2, r3
 8008c14:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8008c18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	8013      	strh	r3, [r2, #0]
 8008c2c:	e15c      	b.n	8008ee8 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008c2e:	463b      	mov	r3, r7
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	78db      	ldrb	r3, [r3, #3]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	f040 8155 	bne.w	8008ee4 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008c3a:	463b      	mov	r3, r7
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	699a      	ldr	r2, [r3, #24]
 8008c40:	463b      	mov	r3, r7
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d90e      	bls.n	8008c68 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8008c4a:	463b      	mov	r3, r7
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8008c54:	463b      	mov	r3, r7
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	699a      	ldr	r2, [r3, #24]
 8008c5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c5e:	1ad2      	subs	r2, r2, r3
 8008c60:	463b      	mov	r3, r7
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	619a      	str	r2, [r3, #24]
 8008c66:	e008      	b.n	8008c7a <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8008c68:	463b      	mov	r3, r7
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	699b      	ldr	r3, [r3, #24]
 8008c6e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8008c72:	463b      	mov	r3, r7
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2200      	movs	r2, #0
 8008c78:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008c7a:	463b      	mov	r3, r7
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	785b      	ldrb	r3, [r3, #1]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d16f      	bne.n	8008d64 <USB_EPStartXfer+0x1054>
 8008c84:	1d3b      	adds	r3, r7, #4
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c8c:	1d3b      	adds	r3, r7, #4
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	461a      	mov	r2, r3
 8008c98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008c9c:	4413      	add	r3, r2
 8008c9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ca2:	463b      	mov	r3, r7
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	011a      	lsls	r2, r3, #4
 8008caa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008cae:	4413      	add	r3, r2
 8008cb0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008cb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d116      	bne.n	8008cee <USB_EPStartXfer+0xfde>
 8008cc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008cc4:	881b      	ldrh	r3, [r3, #0]
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ccc:	b29a      	uxth	r2, r3
 8008cce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008cd2:	801a      	strh	r2, [r3, #0]
 8008cd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008cd8:	881b      	ldrh	r3, [r3, #0]
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ce0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008cea:	801a      	strh	r2, [r3, #0]
 8008cec:	e05f      	b.n	8008dae <USB_EPStartXfer+0x109e>
 8008cee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cf2:	2b3e      	cmp	r3, #62	; 0x3e
 8008cf4:	d818      	bhi.n	8008d28 <USB_EPStartXfer+0x1018>
 8008cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cfa:	085b      	lsrs	r3, r3, #1
 8008cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d04:	f003 0301 	and.w	r3, r3, #1
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d004      	beq.n	8008d16 <USB_EPStartXfer+0x1006>
 8008d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d10:	3301      	adds	r3, #1
 8008d12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	029b      	lsls	r3, r3, #10
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008d24:	801a      	strh	r2, [r3, #0]
 8008d26:	e042      	b.n	8008dae <USB_EPStartXfer+0x109e>
 8008d28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d2c:	095b      	lsrs	r3, r3, #5
 8008d2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d36:	f003 031f 	and.w	r3, r3, #31
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d104      	bne.n	8008d48 <USB_EPStartXfer+0x1038>
 8008d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d42:	3b01      	subs	r3, #1
 8008d44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	029b      	lsls	r3, r3, #10
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d5a:	b29a      	uxth	r2, r3
 8008d5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008d60:	801a      	strh	r2, [r3, #0]
 8008d62:	e024      	b.n	8008dae <USB_EPStartXfer+0x109e>
 8008d64:	463b      	mov	r3, r7
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	785b      	ldrb	r3, [r3, #1]
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d11f      	bne.n	8008dae <USB_EPStartXfer+0x109e>
 8008d6e:	1d3b      	adds	r3, r7, #4
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d76:	1d3b      	adds	r3, r7, #4
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	461a      	mov	r2, r3
 8008d82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d86:	4413      	add	r3, r2
 8008d88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d8c:	463b      	mov	r3, r7
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	011a      	lsls	r2, r3, #4
 8008d94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d98:	4413      	add	r3, r2
 8008d9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008dac:	801a      	strh	r2, [r3, #0]
 8008dae:	1d3b      	adds	r3, r7, #4
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008db6:	463b      	mov	r3, r7
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	785b      	ldrb	r3, [r3, #1]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d16f      	bne.n	8008ea0 <USB_EPStartXfer+0x1190>
 8008dc0:	1d3b      	adds	r3, r7, #4
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008dc8:	1d3b      	adds	r3, r7, #4
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008dd8:	4413      	add	r3, r2
 8008dda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008dde:	463b      	mov	r3, r7
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	011a      	lsls	r2, r3, #4
 8008de6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008dea:	4413      	add	r3, r2
 8008dec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008df0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d116      	bne.n	8008e2a <USB_EPStartXfer+0x111a>
 8008dfc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008e00:	881b      	ldrh	r3, [r3, #0]
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008e0e:	801a      	strh	r2, [r3, #0]
 8008e10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008e14:	881b      	ldrh	r3, [r3, #0]
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e20:	b29a      	uxth	r2, r3
 8008e22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008e26:	801a      	strh	r2, [r3, #0]
 8008e28:	e05e      	b.n	8008ee8 <USB_EPStartXfer+0x11d8>
 8008e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e2e:	2b3e      	cmp	r3, #62	; 0x3e
 8008e30:	d818      	bhi.n	8008e64 <USB_EPStartXfer+0x1154>
 8008e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e36:	085b      	lsrs	r3, r3, #1
 8008e38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e40:	f003 0301 	and.w	r3, r3, #1
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d004      	beq.n	8008e52 <USB_EPStartXfer+0x1142>
 8008e48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	029b      	lsls	r3, r3, #10
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008e60:	801a      	strh	r2, [r3, #0]
 8008e62:	e041      	b.n	8008ee8 <USB_EPStartXfer+0x11d8>
 8008e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e68:	095b      	lsrs	r3, r3, #5
 8008e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008e6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e72:	f003 031f 	and.w	r3, r3, #31
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d104      	bne.n	8008e84 <USB_EPStartXfer+0x1174>
 8008e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008e84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	029b      	lsls	r3, r3, #10
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008e9c:	801a      	strh	r2, [r3, #0]
 8008e9e:	e023      	b.n	8008ee8 <USB_EPStartXfer+0x11d8>
 8008ea0:	463b      	mov	r3, r7
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	785b      	ldrb	r3, [r3, #1]
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d11e      	bne.n	8008ee8 <USB_EPStartXfer+0x11d8>
 8008eaa:	1d3b      	adds	r3, r7, #4
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008eba:	4413      	add	r3, r2
 8008ebc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ec0:	463b      	mov	r3, r7
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	011a      	lsls	r2, r3, #4
 8008ec8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008ecc:	4413      	add	r3, r2
 8008ece:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008ed2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008ee0:	801a      	strh	r2, [r3, #0]
 8008ee2:	e001      	b.n	8008ee8 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e02e      	b.n	8008f46 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ee8:	1d3b      	adds	r3, r7, #4
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	463b      	mov	r3, r7
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4413      	add	r3, r2
 8008ef6:	881b      	ldrh	r3, [r3, #0]
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f02:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008f06:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008f0a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008f0e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008f12:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008f16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008f1a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008f1e:	1d3b      	adds	r3, r7, #4
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	463b      	mov	r3, r7
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	441a      	add	r2, r3
 8008f2c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	785b      	ldrb	r3, [r3, #1]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d020      	beq.n	8008fa4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	4413      	add	r3, r2
 8008f6c:	881b      	ldrh	r3, [r3, #0]
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f78:	81bb      	strh	r3, [r7, #12]
 8008f7a:	89bb      	ldrh	r3, [r7, #12]
 8008f7c:	f083 0310 	eor.w	r3, r3, #16
 8008f80:	81bb      	strh	r3, [r7, #12]
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	441a      	add	r2, r3
 8008f8c:	89bb      	ldrh	r3, [r7, #12]
 8008f8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	8013      	strh	r3, [r2, #0]
 8008fa2:	e01f      	b.n	8008fe4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	4413      	add	r3, r2
 8008fae:	881b      	ldrh	r3, [r3, #0]
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fba:	81fb      	strh	r3, [r7, #14]
 8008fbc:	89fb      	ldrh	r3, [r7, #14]
 8008fbe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008fc2:	81fb      	strh	r3, [r7, #14]
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	441a      	add	r2, r3
 8008fce:	89fb      	ldrh	r3, [r7, #14]
 8008fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3714      	adds	r7, #20
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bc80      	pop	{r7}
 8008fee:	4770      	bx	lr

08008ff0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b087      	sub	sp, #28
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	7b1b      	ldrb	r3, [r3, #12]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	f040 809d 	bne.w	800913e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	785b      	ldrb	r3, [r3, #1]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d04c      	beq.n	80090a6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	4413      	add	r3, r2
 8009016:	881b      	ldrh	r3, [r3, #0]
 8009018:	823b      	strh	r3, [r7, #16]
 800901a:	8a3b      	ldrh	r3, [r7, #16]
 800901c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009020:	2b00      	cmp	r3, #0
 8009022:	d01b      	beq.n	800905c <USB_EPClearStall+0x6c>
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	4413      	add	r3, r2
 800902e:	881b      	ldrh	r3, [r3, #0]
 8009030:	b29b      	uxth	r3, r3
 8009032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800903a:	81fb      	strh	r3, [r7, #14]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	441a      	add	r2, r3
 8009046:	89fb      	ldrh	r3, [r7, #14]
 8009048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800904c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009054:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009058:	b29b      	uxth	r3, r3
 800905a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	78db      	ldrb	r3, [r3, #3]
 8009060:	2b01      	cmp	r3, #1
 8009062:	d06c      	beq.n	800913e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	4413      	add	r3, r2
 800906e:	881b      	ldrh	r3, [r3, #0]
 8009070:	b29b      	uxth	r3, r3
 8009072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800907a:	81bb      	strh	r3, [r7, #12]
 800907c:	89bb      	ldrh	r3, [r7, #12]
 800907e:	f083 0320 	eor.w	r3, r3, #32
 8009082:	81bb      	strh	r3, [r7, #12]
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	441a      	add	r2, r3
 800908e:	89bb      	ldrh	r3, [r7, #12]
 8009090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800909c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	8013      	strh	r3, [r2, #0]
 80090a4:	e04b      	b.n	800913e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	4413      	add	r3, r2
 80090b0:	881b      	ldrh	r3, [r3, #0]
 80090b2:	82fb      	strh	r3, [r7, #22]
 80090b4:	8afb      	ldrh	r3, [r7, #22]
 80090b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d01b      	beq.n	80090f6 <USB_EPClearStall+0x106>
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	4413      	add	r3, r2
 80090c8:	881b      	ldrh	r3, [r3, #0]
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090d4:	82bb      	strh	r3, [r7, #20]
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	441a      	add	r2, r3
 80090e0:	8abb      	ldrh	r3, [r7, #20]
 80090e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80090ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	4413      	add	r3, r2
 8009100:	881b      	ldrh	r3, [r3, #0]
 8009102:	b29b      	uxth	r3, r3
 8009104:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800910c:	827b      	strh	r3, [r7, #18]
 800910e:	8a7b      	ldrh	r3, [r7, #18]
 8009110:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009114:	827b      	strh	r3, [r7, #18]
 8009116:	8a7b      	ldrh	r3, [r7, #18]
 8009118:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800911c:	827b      	strh	r3, [r7, #18]
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	441a      	add	r2, r3
 8009128:	8a7b      	ldrh	r3, [r7, #18]
 800912a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800912e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800913a:	b29b      	uxth	r3, r3
 800913c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	371c      	adds	r7, #28
 8009144:	46bd      	mov	sp, r7
 8009146:	bc80      	pop	{r7}
 8009148:	4770      	bx	lr

0800914a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800914a:	b480      	push	{r7}
 800914c:	b083      	sub	sp, #12
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
 8009152:	460b      	mov	r3, r1
 8009154:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009156:	78fb      	ldrb	r3, [r7, #3]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d103      	bne.n	8009164 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2280      	movs	r2, #128	; 0x80
 8009160:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	370c      	adds	r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	bc80      	pop	{r7}
 800916e:	4770      	bx	lr

08009170 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009178:	2300      	movs	r3, #0
}
 800917a:	4618      	mov	r0, r3
 800917c:	370c      	adds	r7, #12
 800917e:	46bd      	mov	sp, r7
 8009180:	bc80      	pop	{r7}
 8009182:	4770      	bx	lr

08009184 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	370c      	adds	r7, #12
 8009192:	46bd      	mov	sp, r7
 8009194:	bc80      	pop	{r7}
 8009196:	4770      	bx	lr

08009198 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80091aa:	68fb      	ldr	r3, [r7, #12]
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3714      	adds	r7, #20
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bc80      	pop	{r7}
 80091b4:	4770      	bx	lr

080091b6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80091b6:	b480      	push	{r7}
 80091b8:	b083      	sub	sp, #12
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
 80091be:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80091c0:	2300      	movs	r3, #0
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	370c      	adds	r7, #12
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bc80      	pop	{r7}
 80091ca:	4770      	bx	lr

080091cc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b08d      	sub	sp, #52	; 0x34
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	4611      	mov	r1, r2
 80091d8:	461a      	mov	r2, r3
 80091da:	460b      	mov	r3, r1
 80091dc:	80fb      	strh	r3, [r7, #6]
 80091de:	4613      	mov	r3, r2
 80091e0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80091e2:	88bb      	ldrh	r3, [r7, #4]
 80091e4:	3301      	adds	r3, #1
 80091e6:	085b      	lsrs	r3, r3, #1
 80091e8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80091f2:	88fb      	ldrh	r3, [r7, #6]
 80091f4:	005a      	lsls	r2, r3, #1
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	4413      	add	r3, r2
 80091fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091fe:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009200:	6a3b      	ldr	r3, [r7, #32]
 8009202:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009204:	e01e      	b.n	8009244 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800920c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920e:	3301      	adds	r3, #1
 8009210:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	b29b      	uxth	r3, r3
 8009218:	021b      	lsls	r3, r3, #8
 800921a:	b29b      	uxth	r3, r3
 800921c:	461a      	mov	r2, r3
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	4313      	orrs	r3, r2
 8009222:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	b29a      	uxth	r2, r3
 8009228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800922c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922e:	3302      	adds	r3, #2
 8009230:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009234:	3302      	adds	r3, #2
 8009236:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923a:	3301      	adds	r3, #1
 800923c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800923e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009240:	3b01      	subs	r3, #1
 8009242:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1dd      	bne.n	8009206 <USB_WritePMA+0x3a>
  }
}
 800924a:	bf00      	nop
 800924c:	bf00      	nop
 800924e:	3734      	adds	r7, #52	; 0x34
 8009250:	46bd      	mov	sp, r7
 8009252:	bc80      	pop	{r7}
 8009254:	4770      	bx	lr

08009256 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009256:	b480      	push	{r7}
 8009258:	b08b      	sub	sp, #44	; 0x2c
 800925a:	af00      	add	r7, sp, #0
 800925c:	60f8      	str	r0, [r7, #12]
 800925e:	60b9      	str	r1, [r7, #8]
 8009260:	4611      	mov	r1, r2
 8009262:	461a      	mov	r2, r3
 8009264:	460b      	mov	r3, r1
 8009266:	80fb      	strh	r3, [r7, #6]
 8009268:	4613      	mov	r3, r2
 800926a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800926c:	88bb      	ldrh	r3, [r7, #4]
 800926e:	085b      	lsrs	r3, r3, #1
 8009270:	b29b      	uxth	r3, r3
 8009272:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800927c:	88fb      	ldrh	r3, [r7, #6]
 800927e:	005a      	lsls	r2, r3, #1
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	4413      	add	r3, r2
 8009284:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009288:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	627b      	str	r3, [r7, #36]	; 0x24
 800928e:	e01b      	b.n	80092c8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009290:	6a3b      	ldr	r3, [r7, #32]
 8009292:	881b      	ldrh	r3, [r3, #0]
 8009294:	b29b      	uxth	r3, r3
 8009296:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009298:	6a3b      	ldr	r3, [r7, #32]
 800929a:	3302      	adds	r3, #2
 800929c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	3301      	adds	r3, #1
 80092aa:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	0a1b      	lsrs	r3, r3, #8
 80092b0:	b2da      	uxtb	r2, r3
 80092b2:	69fb      	ldr	r3, [r7, #28]
 80092b4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	3301      	adds	r3, #1
 80092ba:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80092bc:	6a3b      	ldr	r3, [r7, #32]
 80092be:	3302      	adds	r3, #2
 80092c0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80092c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c4:	3b01      	subs	r3, #1
 80092c6:	627b      	str	r3, [r7, #36]	; 0x24
 80092c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d1e0      	bne.n	8009290 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80092ce:	88bb      	ldrh	r3, [r7, #4]
 80092d0:	f003 0301 	and.w	r3, r3, #1
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d007      	beq.n	80092ea <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80092da:	6a3b      	ldr	r3, [r7, #32]
 80092dc:	881b      	ldrh	r3, [r3, #0]
 80092de:	b29b      	uxth	r3, r3
 80092e0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	b2da      	uxtb	r2, r3
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	701a      	strb	r2, [r3, #0]
  }
}
 80092ea:	bf00      	nop
 80092ec:	372c      	adds	r7, #44	; 0x2c
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bc80      	pop	{r7}
 80092f2:	4770      	bx	lr

080092f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	460b      	mov	r3, r1
 80092fe:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009300:	2300      	movs	r3, #0
 8009302:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	7c1b      	ldrb	r3, [r3, #16]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d115      	bne.n	8009338 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800930c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009310:	2202      	movs	r2, #2
 8009312:	2181      	movs	r1, #129	; 0x81
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f001 fe8a 	bl	800b02e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2201      	movs	r2, #1
 800931e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009320:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009324:	2202      	movs	r2, #2
 8009326:	2101      	movs	r1, #1
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f001 fe80 	bl	800b02e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2201      	movs	r2, #1
 8009332:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009336:	e012      	b.n	800935e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009338:	2340      	movs	r3, #64	; 0x40
 800933a:	2202      	movs	r2, #2
 800933c:	2181      	movs	r1, #129	; 0x81
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f001 fe75 	bl	800b02e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2201      	movs	r2, #1
 8009348:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800934a:	2340      	movs	r3, #64	; 0x40
 800934c:	2202      	movs	r2, #2
 800934e:	2101      	movs	r1, #1
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f001 fe6c 	bl	800b02e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2201      	movs	r2, #1
 800935a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800935e:	2308      	movs	r3, #8
 8009360:	2203      	movs	r2, #3
 8009362:	2182      	movs	r1, #130	; 0x82
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f001 fe62 	bl	800b02e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2201      	movs	r2, #1
 800936e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009370:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009374:	f001 ff82 	bl	800b27c <USBD_static_malloc>
 8009378:	4602      	mov	r2, r0
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009386:	2b00      	cmp	r3, #0
 8009388:	d102      	bne.n	8009390 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800938a:	2301      	movs	r3, #1
 800938c:	73fb      	strb	r3, [r7, #15]
 800938e:	e026      	b.n	80093de <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009396:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	7c1b      	ldrb	r3, [r3, #16]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d109      	bne.n	80093ce <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093c4:	2101      	movs	r1, #1
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f001 ff22 	bl	800b210 <USBD_LL_PrepareReceive>
 80093cc:	e007      	b.n	80093de <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093d4:	2340      	movs	r3, #64	; 0x40
 80093d6:	2101      	movs	r1, #1
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f001 ff19 	bl	800b210 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80093de:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3710      	adds	r7, #16
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	460b      	mov	r3, r1
 80093f2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80093f4:	2300      	movs	r3, #0
 80093f6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80093f8:	2181      	movs	r1, #129	; 0x81
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f001 fe3d 	bl	800b07a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009406:	2101      	movs	r1, #1
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f001 fe36 	bl	800b07a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009416:	2182      	movs	r1, #130	; 0x82
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f001 fe2e 	bl	800b07a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00e      	beq.n	800944c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800943e:	4618      	mov	r0, r3
 8009440:	f001 ff28 	bl	800b294 <USBD_static_free>
    pdev->pClassData = NULL;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800944c:	7bfb      	ldrb	r3, [r7, #15]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b086      	sub	sp, #24
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009466:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009468:	2300      	movs	r3, #0
 800946a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800946c:	2300      	movs	r3, #0
 800946e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009470:	2300      	movs	r3, #0
 8009472:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800947c:	2b00      	cmp	r3, #0
 800947e:	d039      	beq.n	80094f4 <USBD_CDC_Setup+0x9e>
 8009480:	2b20      	cmp	r3, #32
 8009482:	d17f      	bne.n	8009584 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	88db      	ldrh	r3, [r3, #6]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d029      	beq.n	80094e0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	b25b      	sxtb	r3, r3
 8009492:	2b00      	cmp	r3, #0
 8009494:	da11      	bge.n	80094ba <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	683a      	ldr	r2, [r7, #0]
 80094a0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80094a2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80094a4:	683a      	ldr	r2, [r7, #0]
 80094a6:	88d2      	ldrh	r2, [r2, #6]
 80094a8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80094aa:	6939      	ldr	r1, [r7, #16]
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	88db      	ldrh	r3, [r3, #6]
 80094b0:	461a      	mov	r2, r3
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f001 fa09 	bl	800a8ca <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80094b8:	e06b      	b.n	8009592 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	785a      	ldrb	r2, [r3, #1]
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	88db      	ldrh	r3, [r3, #6]
 80094c8:	b2da      	uxtb	r2, r3
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80094d0:	6939      	ldr	r1, [r7, #16]
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	88db      	ldrh	r3, [r3, #6]
 80094d6:	461a      	mov	r2, r3
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f001 fa24 	bl	800a926 <USBD_CtlPrepareRx>
      break;
 80094de:	e058      	b.n	8009592 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	683a      	ldr	r2, [r7, #0]
 80094ea:	7850      	ldrb	r0, [r2, #1]
 80094ec:	2200      	movs	r2, #0
 80094ee:	6839      	ldr	r1, [r7, #0]
 80094f0:	4798      	blx	r3
      break;
 80094f2:	e04e      	b.n	8009592 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	785b      	ldrb	r3, [r3, #1]
 80094f8:	2b0b      	cmp	r3, #11
 80094fa:	d02e      	beq.n	800955a <USBD_CDC_Setup+0x104>
 80094fc:	2b0b      	cmp	r3, #11
 80094fe:	dc38      	bgt.n	8009572 <USBD_CDC_Setup+0x11c>
 8009500:	2b00      	cmp	r3, #0
 8009502:	d002      	beq.n	800950a <USBD_CDC_Setup+0xb4>
 8009504:	2b0a      	cmp	r3, #10
 8009506:	d014      	beq.n	8009532 <USBD_CDC_Setup+0xdc>
 8009508:	e033      	b.n	8009572 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009510:	2b03      	cmp	r3, #3
 8009512:	d107      	bne.n	8009524 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009514:	f107 030c 	add.w	r3, r7, #12
 8009518:	2202      	movs	r2, #2
 800951a:	4619      	mov	r1, r3
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f001 f9d4 	bl	800a8ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009522:	e02e      	b.n	8009582 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009524:	6839      	ldr	r1, [r7, #0]
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f001 f965 	bl	800a7f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800952c:	2302      	movs	r3, #2
 800952e:	75fb      	strb	r3, [r7, #23]
          break;
 8009530:	e027      	b.n	8009582 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009538:	2b03      	cmp	r3, #3
 800953a:	d107      	bne.n	800954c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800953c:	f107 030f 	add.w	r3, r7, #15
 8009540:	2201      	movs	r2, #1
 8009542:	4619      	mov	r1, r3
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f001 f9c0 	bl	800a8ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800954a:	e01a      	b.n	8009582 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800954c:	6839      	ldr	r1, [r7, #0]
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f001 f951 	bl	800a7f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009554:	2302      	movs	r3, #2
 8009556:	75fb      	strb	r3, [r7, #23]
          break;
 8009558:	e013      	b.n	8009582 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009560:	2b03      	cmp	r3, #3
 8009562:	d00d      	beq.n	8009580 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009564:	6839      	ldr	r1, [r7, #0]
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f001 f945 	bl	800a7f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800956c:	2302      	movs	r3, #2
 800956e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009570:	e006      	b.n	8009580 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009572:	6839      	ldr	r1, [r7, #0]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f001 f93e 	bl	800a7f6 <USBD_CtlError>
          ret = USBD_FAIL;
 800957a:	2302      	movs	r3, #2
 800957c:	75fb      	strb	r3, [r7, #23]
          break;
 800957e:	e000      	b.n	8009582 <USBD_CDC_Setup+0x12c>
          break;
 8009580:	bf00      	nop
      }
      break;
 8009582:	e006      	b.n	8009592 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009584:	6839      	ldr	r1, [r7, #0]
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f001 f935 	bl	800a7f6 <USBD_CtlError>
      ret = USBD_FAIL;
 800958c:	2302      	movs	r3, #2
 800958e:	75fb      	strb	r3, [r7, #23]
      break;
 8009590:	bf00      	nop
  }

  return ret;
 8009592:	7dfb      	ldrb	r3, [r7, #23]
}
 8009594:	4618      	mov	r0, r3
 8009596:	3718      	adds	r7, #24
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	460b      	mov	r3, r1
 80095a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095ae:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095b6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d03a      	beq.n	8009638 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80095c2:	78fa      	ldrb	r2, [r7, #3]
 80095c4:	6879      	ldr	r1, [r7, #4]
 80095c6:	4613      	mov	r3, r2
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	4413      	add	r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	440b      	add	r3, r1
 80095d0:	331c      	adds	r3, #28
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d029      	beq.n	800962c <USBD_CDC_DataIn+0x90>
 80095d8:	78fa      	ldrb	r2, [r7, #3]
 80095da:	6879      	ldr	r1, [r7, #4]
 80095dc:	4613      	mov	r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4413      	add	r3, r2
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	440b      	add	r3, r1
 80095e6:	331c      	adds	r3, #28
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	78f9      	ldrb	r1, [r7, #3]
 80095ec:	68b8      	ldr	r0, [r7, #8]
 80095ee:	460b      	mov	r3, r1
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	440b      	add	r3, r1
 80095f4:	00db      	lsls	r3, r3, #3
 80095f6:	4403      	add	r3, r0
 80095f8:	3338      	adds	r3, #56	; 0x38
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	fbb2 f1f3 	udiv	r1, r2, r3
 8009600:	fb03 f301 	mul.w	r3, r3, r1
 8009604:	1ad3      	subs	r3, r2, r3
 8009606:	2b00      	cmp	r3, #0
 8009608:	d110      	bne.n	800962c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800960a:	78fa      	ldrb	r2, [r7, #3]
 800960c:	6879      	ldr	r1, [r7, #4]
 800960e:	4613      	mov	r3, r2
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	4413      	add	r3, r2
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	440b      	add	r3, r1
 8009618:	331c      	adds	r3, #28
 800961a:	2200      	movs	r2, #0
 800961c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800961e:	78f9      	ldrb	r1, [r7, #3]
 8009620:	2300      	movs	r3, #0
 8009622:	2200      	movs	r2, #0
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f001 fdd0 	bl	800b1ca <USBD_LL_Transmit>
 800962a:	e003      	b.n	8009634 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2200      	movs	r2, #0
 8009630:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009634:	2300      	movs	r3, #0
 8009636:	e000      	b.n	800963a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009638:	2302      	movs	r3, #2
  }
}
 800963a:	4618      	mov	r0, r3
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b084      	sub	sp, #16
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
 800964a:	460b      	mov	r3, r1
 800964c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009654:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009656:	78fb      	ldrb	r3, [r7, #3]
 8009658:	4619      	mov	r1, r3
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f001 fdfb 	bl	800b256 <USBD_LL_GetRxDataSize>
 8009660:	4602      	mov	r2, r0
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00d      	beq.n	800968e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009686:	4611      	mov	r1, r2
 8009688:	4798      	blx	r3

    return USBD_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	e000      	b.n	8009690 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800968e:	2302      	movs	r3, #2
  }
}
 8009690:	4618      	mov	r0, r3
 8009692:	3710      	adds	r7, #16
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096a6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d015      	beq.n	80096de <USBD_CDC_EP0_RxReady+0x46>
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80096b8:	2bff      	cmp	r3, #255	; 0xff
 80096ba:	d010      	beq.n	80096de <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80096ca:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80096d2:	b292      	uxth	r2, r2
 80096d4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	22ff      	movs	r2, #255	; 0xff
 80096da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80096de:	2300      	movs	r3, #0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2243      	movs	r2, #67	; 0x43
 80096f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80096f6:	4b03      	ldr	r3, [pc, #12]	; (8009704 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bc80      	pop	{r7}
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	200000a4 	.word	0x200000a4

08009708 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2243      	movs	r2, #67	; 0x43
 8009714:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009716:	4b03      	ldr	r3, [pc, #12]	; (8009724 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009718:	4618      	mov	r0, r3
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	bc80      	pop	{r7}
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	20000060 	.word	0x20000060

08009728 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2243      	movs	r2, #67	; 0x43
 8009734:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009736:	4b03      	ldr	r3, [pc, #12]	; (8009744 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009738:	4618      	mov	r0, r3
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	bc80      	pop	{r7}
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	200000e8 	.word	0x200000e8

08009748 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	220a      	movs	r2, #10
 8009754:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009756:	4b03      	ldr	r3, [pc, #12]	; (8009764 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009758:	4618      	mov	r0, r3
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	bc80      	pop	{r7}
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop
 8009764:	2000001c 	.word	0x2000001c

08009768 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009768:	b480      	push	{r7}
 800976a:	b085      	sub	sp, #20
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009772:	2302      	movs	r3, #2
 8009774:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d005      	beq.n	8009788 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	683a      	ldr	r2, [r7, #0]
 8009780:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009784:	2300      	movs	r3, #0
 8009786:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009788:	7bfb      	ldrb	r3, [r7, #15]
}
 800978a:	4618      	mov	r0, r3
 800978c:	3714      	adds	r7, #20
 800978e:	46bd      	mov	sp, r7
 8009790:	bc80      	pop	{r7}
 8009792:	4770      	bx	lr

08009794 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009794:	b480      	push	{r7}
 8009796:	b087      	sub	sp, #28
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	4613      	mov	r3, r2
 80097a0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097a8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	68ba      	ldr	r2, [r7, #8]
 80097ae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80097b2:	88fa      	ldrh	r2, [r7, #6]
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	371c      	adds	r7, #28
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bc80      	pop	{r7}
 80097c4:	4770      	bx	lr

080097c6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80097c6:	b480      	push	{r7}
 80097c8:	b085      	sub	sp, #20
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
 80097ce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097d6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	683a      	ldr	r2, [r7, #0]
 80097dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3714      	adds	r7, #20
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bc80      	pop	{r7}
 80097ea:	4770      	bx	lr

080097ec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009802:	2b00      	cmp	r3, #0
 8009804:	d01c      	beq.n	8009840 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800980c:	2b00      	cmp	r3, #0
 800980e:	d115      	bne.n	800983c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2201      	movs	r2, #1
 8009814:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800982e:	b29b      	uxth	r3, r3
 8009830:	2181      	movs	r1, #129	; 0x81
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f001 fcc9 	bl	800b1ca <USBD_LL_Transmit>

      return USBD_OK;
 8009838:	2300      	movs	r3, #0
 800983a:	e002      	b.n	8009842 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800983c:	2301      	movs	r3, #1
 800983e:	e000      	b.n	8009842 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009840:	2302      	movs	r3, #2
  }
}
 8009842:	4618      	mov	r0, r3
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b084      	sub	sp, #16
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009858:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009860:	2b00      	cmp	r3, #0
 8009862:	d017      	beq.n	8009894 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	7c1b      	ldrb	r3, [r3, #16]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d109      	bne.n	8009880 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009872:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009876:	2101      	movs	r1, #1
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f001 fcc9 	bl	800b210 <USBD_LL_PrepareReceive>
 800987e:	e007      	b.n	8009890 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009886:	2340      	movs	r3, #64	; 0x40
 8009888:	2101      	movs	r1, #1
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f001 fcc0 	bl	800b210 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009890:	2300      	movs	r3, #0
 8009892:	e000      	b.n	8009896 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009894:	2302      	movs	r3, #2
  }
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b084      	sub	sp, #16
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	60f8      	str	r0, [r7, #12]
 80098a6:	60b9      	str	r1, [r7, #8]
 80098a8:	4613      	mov	r3, r2
 80098aa:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d101      	bne.n	80098b6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80098b2:	2302      	movs	r3, #2
 80098b4:	e01a      	b.n	80098ec <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d003      	beq.n	80098c8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d003      	beq.n	80098d6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	68ba      	ldr	r2, [r7, #8]
 80098d2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2201      	movs	r2, #1
 80098da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	79fa      	ldrb	r2, [r7, #7]
 80098e2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	f001 fb2d 	bl	800af44 <USBD_LL_Init>

  return USBD_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80098fe:	2300      	movs	r3, #0
 8009900:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d006      	beq.n	8009916 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	683a      	ldr	r2, [r7, #0]
 800990c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	73fb      	strb	r3, [r7, #15]
 8009914:	e001      	b.n	800991a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009916:	2302      	movs	r3, #2
 8009918:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800991a:	7bfb      	ldrb	r3, [r7, #15]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3714      	adds	r7, #20
 8009920:	46bd      	mov	sp, r7
 8009922:	bc80      	pop	{r7}
 8009924:	4770      	bx	lr

08009926 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b082      	sub	sp, #8
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f001 fb62 	bl	800aff8 <USBD_LL_Start>

  return USBD_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3708      	adds	r7, #8
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800993e:	b480      	push	{r7}
 8009940:	b083      	sub	sp, #12
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	bc80      	pop	{r7}
 8009950:	4770      	bx	lr

08009952 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009952:	b580      	push	{r7, lr}
 8009954:	b084      	sub	sp, #16
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
 800995a:	460b      	mov	r3, r1
 800995c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800995e:	2302      	movs	r3, #2
 8009960:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009968:	2b00      	cmp	r3, #0
 800996a:	d00c      	beq.n	8009986 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	78fa      	ldrb	r2, [r7, #3]
 8009976:	4611      	mov	r1, r2
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	4798      	blx	r3
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d101      	bne.n	8009986 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009982:	2300      	movs	r3, #0
 8009984:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009986:	7bfb      	ldrb	r3, [r7, #15]
}
 8009988:	4618      	mov	r0, r3
 800998a:	3710      	adds	r7, #16
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	460b      	mov	r3, r1
 800999a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	78fa      	ldrb	r2, [r7, #3]
 80099a6:	4611      	mov	r1, r2
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	4798      	blx	r3

  return USBD_OK;
 80099ac:	2300      	movs	r3, #0
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3708      	adds	r7, #8
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b082      	sub	sp, #8
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
 80099be:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80099c6:	6839      	ldr	r1, [r7, #0]
 80099c8:	4618      	mov	r0, r3
 80099ca:	f000 fed8 	bl	800a77e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2201      	movs	r2, #1
 80099d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80099dc:	461a      	mov	r2, r3
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80099ea:	f003 031f 	and.w	r3, r3, #31
 80099ee:	2b02      	cmp	r3, #2
 80099f0:	d016      	beq.n	8009a20 <USBD_LL_SetupStage+0x6a>
 80099f2:	2b02      	cmp	r3, #2
 80099f4:	d81c      	bhi.n	8009a30 <USBD_LL_SetupStage+0x7a>
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d002      	beq.n	8009a00 <USBD_LL_SetupStage+0x4a>
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d008      	beq.n	8009a10 <USBD_LL_SetupStage+0x5a>
 80099fe:	e017      	b.n	8009a30 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009a06:	4619      	mov	r1, r3
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 f9cb 	bl	8009da4 <USBD_StdDevReq>
      break;
 8009a0e:	e01a      	b.n	8009a46 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009a16:	4619      	mov	r1, r3
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 fa2d 	bl	8009e78 <USBD_StdItfReq>
      break;
 8009a1e:	e012      	b.n	8009a46 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009a26:	4619      	mov	r1, r3
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 fa6d 	bl	8009f08 <USBD_StdEPReq>
      break;
 8009a2e:	e00a      	b.n	8009a46 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009a36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f001 fb3a 	bl	800b0b8 <USBD_LL_StallEP>
      break;
 8009a44:	bf00      	nop
  }

  return USBD_OK;
 8009a46:	2300      	movs	r3, #0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3708      	adds	r7, #8
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b086      	sub	sp, #24
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	460b      	mov	r3, r1
 8009a5a:	607a      	str	r2, [r7, #4]
 8009a5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009a5e:	7afb      	ldrb	r3, [r7, #11]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d14b      	bne.n	8009afc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009a6a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a72:	2b03      	cmp	r3, #3
 8009a74:	d134      	bne.n	8009ae0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	68da      	ldr	r2, [r3, #12]
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	691b      	ldr	r3, [r3, #16]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d919      	bls.n	8009ab6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	68da      	ldr	r2, [r3, #12]
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	691b      	ldr	r3, [r3, #16]
 8009a8a:	1ad2      	subs	r2, r2, r3
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	68da      	ldr	r2, [r3, #12]
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d203      	bcs.n	8009aa4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	e002      	b.n	8009aaa <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	461a      	mov	r2, r3
 8009aac:	6879      	ldr	r1, [r7, #4]
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f000 ff57 	bl	800a962 <USBD_CtlContinueRx>
 8009ab4:	e038      	b.n	8009b28 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d00a      	beq.n	8009ad8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009ac8:	2b03      	cmp	r3, #3
 8009aca:	d105      	bne.n	8009ad8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ad2:	691b      	ldr	r3, [r3, #16]
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f000 ff54 	bl	800a986 <USBD_CtlSendStatus>
 8009ade:	e023      	b.n	8009b28 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ae6:	2b05      	cmp	r3, #5
 8009ae8:	d11e      	bne.n	8009b28 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009af2:	2100      	movs	r1, #0
 8009af4:	68f8      	ldr	r0, [r7, #12]
 8009af6:	f001 fadf 	bl	800b0b8 <USBD_LL_StallEP>
 8009afa:	e015      	b.n	8009b28 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b02:	699b      	ldr	r3, [r3, #24]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00d      	beq.n	8009b24 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009b0e:	2b03      	cmp	r3, #3
 8009b10:	d108      	bne.n	8009b24 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b18:	699b      	ldr	r3, [r3, #24]
 8009b1a:	7afa      	ldrb	r2, [r7, #11]
 8009b1c:	4611      	mov	r1, r2
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	4798      	blx	r3
 8009b22:	e001      	b.n	8009b28 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009b24:	2302      	movs	r3, #2
 8009b26:	e000      	b.n	8009b2a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3718      	adds	r7, #24
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}

08009b32 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009b32:	b580      	push	{r7, lr}
 8009b34:	b086      	sub	sp, #24
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	60f8      	str	r0, [r7, #12]
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	607a      	str	r2, [r7, #4]
 8009b3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009b40:	7afb      	ldrb	r3, [r7, #11]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d17f      	bne.n	8009c46 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	3314      	adds	r3, #20
 8009b4a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	d15c      	bne.n	8009c10 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	68da      	ldr	r2, [r3, #12]
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d915      	bls.n	8009b8e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	68da      	ldr	r2, [r3, #12]
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	691b      	ldr	r3, [r3, #16]
 8009b6a:	1ad2      	subs	r2, r2, r3
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	461a      	mov	r2, r3
 8009b78:	6879      	ldr	r1, [r7, #4]
 8009b7a:	68f8      	ldr	r0, [r7, #12]
 8009b7c:	f000 fec1 	bl	800a902 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b80:	2300      	movs	r3, #0
 8009b82:	2200      	movs	r2, #0
 8009b84:	2100      	movs	r1, #0
 8009b86:	68f8      	ldr	r0, [r7, #12]
 8009b88:	f001 fb42 	bl	800b210 <USBD_LL_PrepareReceive>
 8009b8c:	e04e      	b.n	8009c2c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	697a      	ldr	r2, [r7, #20]
 8009b94:	6912      	ldr	r2, [r2, #16]
 8009b96:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b9a:	fb02 f201 	mul.w	r2, r2, r1
 8009b9e:	1a9b      	subs	r3, r3, r2
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d11c      	bne.n	8009bde <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	689a      	ldr	r2, [r3, #8]
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d316      	bcc.n	8009bde <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	689a      	ldr	r2, [r3, #8]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d20f      	bcs.n	8009bde <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	f000 fe9d 	bl	800a902 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f001 fb1a 	bl	800b210 <USBD_LL_PrepareReceive>
 8009bdc:	e026      	b.n	8009c2c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00a      	beq.n	8009c00 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009bf0:	2b03      	cmp	r3, #3
 8009bf2:	d105      	bne.n	8009c00 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009c00:	2180      	movs	r1, #128	; 0x80
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f001 fa58 	bl	800b0b8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009c08:	68f8      	ldr	r0, [r7, #12]
 8009c0a:	f000 fecf 	bl	800a9ac <USBD_CtlReceiveStatus>
 8009c0e:	e00d      	b.n	8009c2c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009c16:	2b04      	cmp	r3, #4
 8009c18:	d004      	beq.n	8009c24 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d103      	bne.n	8009c2c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009c24:	2180      	movs	r1, #128	; 0x80
 8009c26:	68f8      	ldr	r0, [r7, #12]
 8009c28:	f001 fa46 	bl	800b0b8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d11d      	bne.n	8009c72 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009c36:	68f8      	ldr	r0, [r7, #12]
 8009c38:	f7ff fe81 	bl	800993e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009c44:	e015      	b.n	8009c72 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c4c:	695b      	ldr	r3, [r3, #20]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00d      	beq.n	8009c6e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009c58:	2b03      	cmp	r3, #3
 8009c5a:	d108      	bne.n	8009c6e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c62:	695b      	ldr	r3, [r3, #20]
 8009c64:	7afa      	ldrb	r2, [r7, #11]
 8009c66:	4611      	mov	r1, r2
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	4798      	blx	r3
 8009c6c:	e001      	b.n	8009c72 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009c6e:	2302      	movs	r3, #2
 8009c70:	e000      	b.n	8009c74 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3718      	adds	r7, #24
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c84:	2340      	movs	r3, #64	; 0x40
 8009c86:	2200      	movs	r2, #0
 8009c88:	2100      	movs	r1, #0
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f001 f9cf 	bl	800b02e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2240      	movs	r2, #64	; 0x40
 8009c9c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ca0:	2340      	movs	r3, #64	; 0x40
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	2180      	movs	r1, #128	; 0x80
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f001 f9c1 	bl	800b02e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2240      	movs	r2, #64	; 0x40
 8009cb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d009      	beq.n	8009cf4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	6852      	ldr	r2, [r2, #4]
 8009cec:	b2d2      	uxtb	r2, r2
 8009cee:	4611      	mov	r1, r2
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	4798      	blx	r3
  }

  return USBD_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3708      	adds	r7, #8
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009cfe:	b480      	push	{r7}
 8009d00:	b083      	sub	sp, #12
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
 8009d06:	460b      	mov	r3, r1
 8009d08:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	78fa      	ldrb	r2, [r7, #3]
 8009d0e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	370c      	adds	r7, #12
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bc80      	pop	{r7}
 8009d1a:	4770      	bx	lr

08009d1c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2204      	movs	r2, #4
 8009d34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	370c      	adds	r7, #12
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bc80      	pop	{r7}
 8009d42:	4770      	bx	lr

08009d44 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d52:	2b04      	cmp	r3, #4
 8009d54:	d105      	bne.n	8009d62 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bc80      	pop	{r7}
 8009d6c:	4770      	bx	lr

08009d6e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b082      	sub	sp, #8
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d7c:	2b03      	cmp	r3, #3
 8009d7e:	d10b      	bne.n	8009d98 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d86:	69db      	ldr	r3, [r3, #28]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d005      	beq.n	8009d98 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d92:	69db      	ldr	r3, [r3, #28]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009d98:	2300      	movs	r3, #0
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3708      	adds	r7, #8
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
	...

08009da4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dae:	2300      	movs	r3, #0
 8009db0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009dba:	2b40      	cmp	r3, #64	; 0x40
 8009dbc:	d005      	beq.n	8009dca <USBD_StdDevReq+0x26>
 8009dbe:	2b40      	cmp	r3, #64	; 0x40
 8009dc0:	d84f      	bhi.n	8009e62 <USBD_StdDevReq+0xbe>
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d009      	beq.n	8009dda <USBD_StdDevReq+0x36>
 8009dc6:	2b20      	cmp	r3, #32
 8009dc8:	d14b      	bne.n	8009e62 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	6839      	ldr	r1, [r7, #0]
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	4798      	blx	r3
      break;
 8009dd8:	e048      	b.n	8009e6c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	785b      	ldrb	r3, [r3, #1]
 8009dde:	2b09      	cmp	r3, #9
 8009de0:	d839      	bhi.n	8009e56 <USBD_StdDevReq+0xb2>
 8009de2:	a201      	add	r2, pc, #4	; (adr r2, 8009de8 <USBD_StdDevReq+0x44>)
 8009de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de8:	08009e39 	.word	0x08009e39
 8009dec:	08009e4d 	.word	0x08009e4d
 8009df0:	08009e57 	.word	0x08009e57
 8009df4:	08009e43 	.word	0x08009e43
 8009df8:	08009e57 	.word	0x08009e57
 8009dfc:	08009e1b 	.word	0x08009e1b
 8009e00:	08009e11 	.word	0x08009e11
 8009e04:	08009e57 	.word	0x08009e57
 8009e08:	08009e2f 	.word	0x08009e2f
 8009e0c:	08009e25 	.word	0x08009e25
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009e10:	6839      	ldr	r1, [r7, #0]
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 f9dc 	bl	800a1d0 <USBD_GetDescriptor>
          break;
 8009e18:	e022      	b.n	8009e60 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009e1a:	6839      	ldr	r1, [r7, #0]
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 fb3f 	bl	800a4a0 <USBD_SetAddress>
          break;
 8009e22:	e01d      	b.n	8009e60 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009e24:	6839      	ldr	r1, [r7, #0]
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 fb7e 	bl	800a528 <USBD_SetConfig>
          break;
 8009e2c:	e018      	b.n	8009e60 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009e2e:	6839      	ldr	r1, [r7, #0]
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 fc07 	bl	800a644 <USBD_GetConfig>
          break;
 8009e36:	e013      	b.n	8009e60 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009e38:	6839      	ldr	r1, [r7, #0]
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 fc37 	bl	800a6ae <USBD_GetStatus>
          break;
 8009e40:	e00e      	b.n	8009e60 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009e42:	6839      	ldr	r1, [r7, #0]
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 fc65 	bl	800a714 <USBD_SetFeature>
          break;
 8009e4a:	e009      	b.n	8009e60 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009e4c:	6839      	ldr	r1, [r7, #0]
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 fc74 	bl	800a73c <USBD_ClrFeature>
          break;
 8009e54:	e004      	b.n	8009e60 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009e56:	6839      	ldr	r1, [r7, #0]
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 fccc 	bl	800a7f6 <USBD_CtlError>
          break;
 8009e5e:	bf00      	nop
      }
      break;
 8009e60:	e004      	b.n	8009e6c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009e62:	6839      	ldr	r1, [r7, #0]
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 fcc6 	bl	800a7f6 <USBD_CtlError>
      break;
 8009e6a:	bf00      	nop
  }

  return ret;
 8009e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3710      	adds	r7, #16
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop

08009e78 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e82:	2300      	movs	r3, #0
 8009e84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e8e:	2b40      	cmp	r3, #64	; 0x40
 8009e90:	d005      	beq.n	8009e9e <USBD_StdItfReq+0x26>
 8009e92:	2b40      	cmp	r3, #64	; 0x40
 8009e94:	d82e      	bhi.n	8009ef4 <USBD_StdItfReq+0x7c>
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d001      	beq.n	8009e9e <USBD_StdItfReq+0x26>
 8009e9a:	2b20      	cmp	r3, #32
 8009e9c:	d12a      	bne.n	8009ef4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d81d      	bhi.n	8009ee6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	889b      	ldrh	r3, [r3, #4]
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d813      	bhi.n	8009edc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	6839      	ldr	r1, [r7, #0]
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	4798      	blx	r3
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	88db      	ldrh	r3, [r3, #6]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d110      	bne.n	8009ef0 <USBD_StdItfReq+0x78>
 8009ece:	7bfb      	ldrb	r3, [r7, #15]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d10d      	bne.n	8009ef0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 fd56 	bl	800a986 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009eda:	e009      	b.n	8009ef0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009edc:	6839      	ldr	r1, [r7, #0]
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 fc89 	bl	800a7f6 <USBD_CtlError>
          break;
 8009ee4:	e004      	b.n	8009ef0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009ee6:	6839      	ldr	r1, [r7, #0]
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 fc84 	bl	800a7f6 <USBD_CtlError>
          break;
 8009eee:	e000      	b.n	8009ef2 <USBD_StdItfReq+0x7a>
          break;
 8009ef0:	bf00      	nop
      }
      break;
 8009ef2:	e004      	b.n	8009efe <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009ef4:	6839      	ldr	r1, [r7, #0]
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 fc7d 	bl	800a7f6 <USBD_CtlError>
      break;
 8009efc:	bf00      	nop
  }

  return USBD_OK;
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f12:	2300      	movs	r3, #0
 8009f14:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	889b      	ldrh	r3, [r3, #4]
 8009f1a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f24:	2b40      	cmp	r3, #64	; 0x40
 8009f26:	d007      	beq.n	8009f38 <USBD_StdEPReq+0x30>
 8009f28:	2b40      	cmp	r3, #64	; 0x40
 8009f2a:	f200 8146 	bhi.w	800a1ba <USBD_StdEPReq+0x2b2>
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d00a      	beq.n	8009f48 <USBD_StdEPReq+0x40>
 8009f32:	2b20      	cmp	r3, #32
 8009f34:	f040 8141 	bne.w	800a1ba <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	6839      	ldr	r1, [r7, #0]
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	4798      	blx	r3
      break;
 8009f46:	e13d      	b.n	800a1c4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f50:	2b20      	cmp	r3, #32
 8009f52:	d10a      	bne.n	8009f6a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	6839      	ldr	r1, [r7, #0]
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	4798      	blx	r3
 8009f62:	4603      	mov	r3, r0
 8009f64:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
 8009f68:	e12d      	b.n	800a1c6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	785b      	ldrb	r3, [r3, #1]
 8009f6e:	2b03      	cmp	r3, #3
 8009f70:	d007      	beq.n	8009f82 <USBD_StdEPReq+0x7a>
 8009f72:	2b03      	cmp	r3, #3
 8009f74:	f300 811b 	bgt.w	800a1ae <USBD_StdEPReq+0x2a6>
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d072      	beq.n	800a062 <USBD_StdEPReq+0x15a>
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d03a      	beq.n	8009ff6 <USBD_StdEPReq+0xee>
 8009f80:	e115      	b.n	800a1ae <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f88:	2b02      	cmp	r3, #2
 8009f8a:	d002      	beq.n	8009f92 <USBD_StdEPReq+0x8a>
 8009f8c:	2b03      	cmp	r3, #3
 8009f8e:	d015      	beq.n	8009fbc <USBD_StdEPReq+0xb4>
 8009f90:	e02b      	b.n	8009fea <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f92:	7bbb      	ldrb	r3, [r7, #14]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d00c      	beq.n	8009fb2 <USBD_StdEPReq+0xaa>
 8009f98:	7bbb      	ldrb	r3, [r7, #14]
 8009f9a:	2b80      	cmp	r3, #128	; 0x80
 8009f9c:	d009      	beq.n	8009fb2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009f9e:	7bbb      	ldrb	r3, [r7, #14]
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f001 f888 	bl	800b0b8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009fa8:	2180      	movs	r1, #128	; 0x80
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f001 f884 	bl	800b0b8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009fb0:	e020      	b.n	8009ff4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009fb2:	6839      	ldr	r1, [r7, #0]
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 fc1e 	bl	800a7f6 <USBD_CtlError>
              break;
 8009fba:	e01b      	b.n	8009ff4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	885b      	ldrh	r3, [r3, #2]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d10e      	bne.n	8009fe2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009fc4:	7bbb      	ldrb	r3, [r7, #14]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d00b      	beq.n	8009fe2 <USBD_StdEPReq+0xda>
 8009fca:	7bbb      	ldrb	r3, [r7, #14]
 8009fcc:	2b80      	cmp	r3, #128	; 0x80
 8009fce:	d008      	beq.n	8009fe2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	88db      	ldrh	r3, [r3, #6]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d104      	bne.n	8009fe2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009fd8:	7bbb      	ldrb	r3, [r7, #14]
 8009fda:	4619      	mov	r1, r3
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f001 f86b 	bl	800b0b8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 fccf 	bl	800a986 <USBD_CtlSendStatus>

              break;
 8009fe8:	e004      	b.n	8009ff4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009fea:	6839      	ldr	r1, [r7, #0]
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 fc02 	bl	800a7f6 <USBD_CtlError>
              break;
 8009ff2:	bf00      	nop
          }
          break;
 8009ff4:	e0e0      	b.n	800a1b8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ffc:	2b02      	cmp	r3, #2
 8009ffe:	d002      	beq.n	800a006 <USBD_StdEPReq+0xfe>
 800a000:	2b03      	cmp	r3, #3
 800a002:	d015      	beq.n	800a030 <USBD_StdEPReq+0x128>
 800a004:	e026      	b.n	800a054 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a006:	7bbb      	ldrb	r3, [r7, #14]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d00c      	beq.n	800a026 <USBD_StdEPReq+0x11e>
 800a00c:	7bbb      	ldrb	r3, [r7, #14]
 800a00e:	2b80      	cmp	r3, #128	; 0x80
 800a010:	d009      	beq.n	800a026 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a012:	7bbb      	ldrb	r3, [r7, #14]
 800a014:	4619      	mov	r1, r3
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f001 f84e 	bl	800b0b8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a01c:	2180      	movs	r1, #128	; 0x80
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f001 f84a 	bl	800b0b8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a024:	e01c      	b.n	800a060 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a026:	6839      	ldr	r1, [r7, #0]
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 fbe4 	bl	800a7f6 <USBD_CtlError>
              break;
 800a02e:	e017      	b.n	800a060 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	885b      	ldrh	r3, [r3, #2]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d112      	bne.n	800a05e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a038:	7bbb      	ldrb	r3, [r7, #14]
 800a03a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d004      	beq.n	800a04c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a042:	7bbb      	ldrb	r3, [r7, #14]
 800a044:	4619      	mov	r1, r3
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f001 f855 	bl	800b0f6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 fc9a 	bl	800a986 <USBD_CtlSendStatus>
              }
              break;
 800a052:	e004      	b.n	800a05e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a054:	6839      	ldr	r1, [r7, #0]
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 fbcd 	bl	800a7f6 <USBD_CtlError>
              break;
 800a05c:	e000      	b.n	800a060 <USBD_StdEPReq+0x158>
              break;
 800a05e:	bf00      	nop
          }
          break;
 800a060:	e0aa      	b.n	800a1b8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a068:	2b02      	cmp	r3, #2
 800a06a:	d002      	beq.n	800a072 <USBD_StdEPReq+0x16a>
 800a06c:	2b03      	cmp	r3, #3
 800a06e:	d032      	beq.n	800a0d6 <USBD_StdEPReq+0x1ce>
 800a070:	e097      	b.n	800a1a2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a072:	7bbb      	ldrb	r3, [r7, #14]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d007      	beq.n	800a088 <USBD_StdEPReq+0x180>
 800a078:	7bbb      	ldrb	r3, [r7, #14]
 800a07a:	2b80      	cmp	r3, #128	; 0x80
 800a07c:	d004      	beq.n	800a088 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a07e:	6839      	ldr	r1, [r7, #0]
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 fbb8 	bl	800a7f6 <USBD_CtlError>
                break;
 800a086:	e091      	b.n	800a1ac <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a088:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	da0b      	bge.n	800a0a8 <USBD_StdEPReq+0x1a0>
 800a090:	7bbb      	ldrb	r3, [r7, #14]
 800a092:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a096:	4613      	mov	r3, r2
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	4413      	add	r3, r2
 800a09c:	009b      	lsls	r3, r3, #2
 800a09e:	3310      	adds	r3, #16
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	3304      	adds	r3, #4
 800a0a6:	e00b      	b.n	800a0c0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a0a8:	7bbb      	ldrb	r3, [r7, #14]
 800a0aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	4413      	add	r3, r2
 800a0b4:	009b      	lsls	r3, r3, #2
 800a0b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	4413      	add	r3, r2
 800a0be:	3304      	adds	r3, #4
 800a0c0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	2202      	movs	r2, #2
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 fbfb 	bl	800a8ca <USBD_CtlSendData>
              break;
 800a0d4:	e06a      	b.n	800a1ac <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a0d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	da11      	bge.n	800a102 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a0de:	7bbb      	ldrb	r3, [r7, #14]
 800a0e0:	f003 020f 	and.w	r2, r3, #15
 800a0e4:	6879      	ldr	r1, [r7, #4]
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	4413      	add	r3, r2
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	440b      	add	r3, r1
 800a0f0:	3318      	adds	r3, #24
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d117      	bne.n	800a128 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a0f8:	6839      	ldr	r1, [r7, #0]
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 fb7b 	bl	800a7f6 <USBD_CtlError>
                  break;
 800a100:	e054      	b.n	800a1ac <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a102:	7bbb      	ldrb	r3, [r7, #14]
 800a104:	f003 020f 	and.w	r2, r3, #15
 800a108:	6879      	ldr	r1, [r7, #4]
 800a10a:	4613      	mov	r3, r2
 800a10c:	009b      	lsls	r3, r3, #2
 800a10e:	4413      	add	r3, r2
 800a110:	009b      	lsls	r3, r3, #2
 800a112:	440b      	add	r3, r1
 800a114:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d104      	bne.n	800a128 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a11e:	6839      	ldr	r1, [r7, #0]
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 fb68 	bl	800a7f6 <USBD_CtlError>
                  break;
 800a126:	e041      	b.n	800a1ac <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a128:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	da0b      	bge.n	800a148 <USBD_StdEPReq+0x240>
 800a130:	7bbb      	ldrb	r3, [r7, #14]
 800a132:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a136:	4613      	mov	r3, r2
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	4413      	add	r3, r2
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	3310      	adds	r3, #16
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	4413      	add	r3, r2
 800a144:	3304      	adds	r3, #4
 800a146:	e00b      	b.n	800a160 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a148:	7bbb      	ldrb	r3, [r7, #14]
 800a14a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a14e:	4613      	mov	r3, r2
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	4413      	add	r3, r2
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	4413      	add	r3, r2
 800a15e:	3304      	adds	r3, #4
 800a160:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a162:	7bbb      	ldrb	r3, [r7, #14]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d002      	beq.n	800a16e <USBD_StdEPReq+0x266>
 800a168:	7bbb      	ldrb	r3, [r7, #14]
 800a16a:	2b80      	cmp	r3, #128	; 0x80
 800a16c:	d103      	bne.n	800a176 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	2200      	movs	r2, #0
 800a172:	601a      	str	r2, [r3, #0]
 800a174:	e00e      	b.n	800a194 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a176:	7bbb      	ldrb	r3, [r7, #14]
 800a178:	4619      	mov	r1, r3
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 ffda 	bl	800b134 <USBD_LL_IsStallEP>
 800a180:	4603      	mov	r3, r0
 800a182:	2b00      	cmp	r3, #0
 800a184:	d003      	beq.n	800a18e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	2201      	movs	r2, #1
 800a18a:	601a      	str	r2, [r3, #0]
 800a18c:	e002      	b.n	800a194 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	2200      	movs	r2, #0
 800a192:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	2202      	movs	r2, #2
 800a198:	4619      	mov	r1, r3
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 fb95 	bl	800a8ca <USBD_CtlSendData>
              break;
 800a1a0:	e004      	b.n	800a1ac <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a1a2:	6839      	ldr	r1, [r7, #0]
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 fb26 	bl	800a7f6 <USBD_CtlError>
              break;
 800a1aa:	bf00      	nop
          }
          break;
 800a1ac:	e004      	b.n	800a1b8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a1ae:	6839      	ldr	r1, [r7, #0]
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 fb20 	bl	800a7f6 <USBD_CtlError>
          break;
 800a1b6:	bf00      	nop
      }
      break;
 800a1b8:	e004      	b.n	800a1c4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a1ba:	6839      	ldr	r1, [r7, #0]
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 fb1a 	bl	800a7f6 <USBD_CtlError>
      break;
 800a1c2:	bf00      	nop
  }

  return ret;
 800a1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
	...

0800a1d0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	885b      	ldrh	r3, [r3, #2]
 800a1ea:	0a1b      	lsrs	r3, r3, #8
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	2b06      	cmp	r3, #6
 800a1f2:	f200 8128 	bhi.w	800a446 <USBD_GetDescriptor+0x276>
 800a1f6:	a201      	add	r2, pc, #4	; (adr r2, 800a1fc <USBD_GetDescriptor+0x2c>)
 800a1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1fc:	0800a219 	.word	0x0800a219
 800a200:	0800a231 	.word	0x0800a231
 800a204:	0800a271 	.word	0x0800a271
 800a208:	0800a447 	.word	0x0800a447
 800a20c:	0800a447 	.word	0x0800a447
 800a210:	0800a3e7 	.word	0x0800a3e7
 800a214:	0800a413 	.word	0x0800a413
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	7c12      	ldrb	r2, [r2, #16]
 800a224:	f107 0108 	add.w	r1, r7, #8
 800a228:	4610      	mov	r0, r2
 800a22a:	4798      	blx	r3
 800a22c:	60f8      	str	r0, [r7, #12]
      break;
 800a22e:	e112      	b.n	800a456 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	7c1b      	ldrb	r3, [r3, #16]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d10d      	bne.n	800a254 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a23e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a240:	f107 0208 	add.w	r2, r7, #8
 800a244:	4610      	mov	r0, r2
 800a246:	4798      	blx	r3
 800a248:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	3301      	adds	r3, #1
 800a24e:	2202      	movs	r2, #2
 800a250:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a252:	e100      	b.n	800a456 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a25c:	f107 0208 	add.w	r2, r7, #8
 800a260:	4610      	mov	r0, r2
 800a262:	4798      	blx	r3
 800a264:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	3301      	adds	r3, #1
 800a26a:	2202      	movs	r2, #2
 800a26c:	701a      	strb	r2, [r3, #0]
      break;
 800a26e:	e0f2      	b.n	800a456 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	885b      	ldrh	r3, [r3, #2]
 800a274:	b2db      	uxtb	r3, r3
 800a276:	2b05      	cmp	r3, #5
 800a278:	f200 80ac 	bhi.w	800a3d4 <USBD_GetDescriptor+0x204>
 800a27c:	a201      	add	r2, pc, #4	; (adr r2, 800a284 <USBD_GetDescriptor+0xb4>)
 800a27e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a282:	bf00      	nop
 800a284:	0800a29d 	.word	0x0800a29d
 800a288:	0800a2d1 	.word	0x0800a2d1
 800a28c:	0800a305 	.word	0x0800a305
 800a290:	0800a339 	.word	0x0800a339
 800a294:	0800a36d 	.word	0x0800a36d
 800a298:	0800a3a1 	.word	0x0800a3a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d00b      	beq.n	800a2c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	7c12      	ldrb	r2, [r2, #16]
 800a2b4:	f107 0108 	add.w	r1, r7, #8
 800a2b8:	4610      	mov	r0, r2
 800a2ba:	4798      	blx	r3
 800a2bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2be:	e091      	b.n	800a3e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2c0:	6839      	ldr	r1, [r7, #0]
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f000 fa97 	bl	800a7f6 <USBD_CtlError>
            err++;
 800a2c8:	7afb      	ldrb	r3, [r7, #11]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	72fb      	strb	r3, [r7, #11]
          break;
 800a2ce:	e089      	b.n	800a3e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d00b      	beq.n	800a2f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	7c12      	ldrb	r2, [r2, #16]
 800a2e8:	f107 0108 	add.w	r1, r7, #8
 800a2ec:	4610      	mov	r0, r2
 800a2ee:	4798      	blx	r3
 800a2f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2f2:	e077      	b.n	800a3e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2f4:	6839      	ldr	r1, [r7, #0]
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 fa7d 	bl	800a7f6 <USBD_CtlError>
            err++;
 800a2fc:	7afb      	ldrb	r3, [r7, #11]
 800a2fe:	3301      	adds	r3, #1
 800a300:	72fb      	strb	r3, [r7, #11]
          break;
 800a302:	e06f      	b.n	800a3e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a30a:	68db      	ldr	r3, [r3, #12]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d00b      	beq.n	800a328 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a316:	68db      	ldr	r3, [r3, #12]
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	7c12      	ldrb	r2, [r2, #16]
 800a31c:	f107 0108 	add.w	r1, r7, #8
 800a320:	4610      	mov	r0, r2
 800a322:	4798      	blx	r3
 800a324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a326:	e05d      	b.n	800a3e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a328:	6839      	ldr	r1, [r7, #0]
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 fa63 	bl	800a7f6 <USBD_CtlError>
            err++;
 800a330:	7afb      	ldrb	r3, [r7, #11]
 800a332:	3301      	adds	r3, #1
 800a334:	72fb      	strb	r3, [r7, #11]
          break;
 800a336:	e055      	b.n	800a3e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a33e:	691b      	ldr	r3, [r3, #16]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d00b      	beq.n	800a35c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a34a:	691b      	ldr	r3, [r3, #16]
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	7c12      	ldrb	r2, [r2, #16]
 800a350:	f107 0108 	add.w	r1, r7, #8
 800a354:	4610      	mov	r0, r2
 800a356:	4798      	blx	r3
 800a358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a35a:	e043      	b.n	800a3e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a35c:	6839      	ldr	r1, [r7, #0]
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 fa49 	bl	800a7f6 <USBD_CtlError>
            err++;
 800a364:	7afb      	ldrb	r3, [r7, #11]
 800a366:	3301      	adds	r3, #1
 800a368:	72fb      	strb	r3, [r7, #11]
          break;
 800a36a:	e03b      	b.n	800a3e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a372:	695b      	ldr	r3, [r3, #20]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00b      	beq.n	800a390 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a37e:	695b      	ldr	r3, [r3, #20]
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	7c12      	ldrb	r2, [r2, #16]
 800a384:	f107 0108 	add.w	r1, r7, #8
 800a388:	4610      	mov	r0, r2
 800a38a:	4798      	blx	r3
 800a38c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a38e:	e029      	b.n	800a3e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a390:	6839      	ldr	r1, [r7, #0]
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f000 fa2f 	bl	800a7f6 <USBD_CtlError>
            err++;
 800a398:	7afb      	ldrb	r3, [r7, #11]
 800a39a:	3301      	adds	r3, #1
 800a39c:	72fb      	strb	r3, [r7, #11]
          break;
 800a39e:	e021      	b.n	800a3e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a3a6:	699b      	ldr	r3, [r3, #24]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d00b      	beq.n	800a3c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a3b2:	699b      	ldr	r3, [r3, #24]
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	7c12      	ldrb	r2, [r2, #16]
 800a3b8:	f107 0108 	add.w	r1, r7, #8
 800a3bc:	4610      	mov	r0, r2
 800a3be:	4798      	blx	r3
 800a3c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3c2:	e00f      	b.n	800a3e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a3c4:	6839      	ldr	r1, [r7, #0]
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 fa15 	bl	800a7f6 <USBD_CtlError>
            err++;
 800a3cc:	7afb      	ldrb	r3, [r7, #11]
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	72fb      	strb	r3, [r7, #11]
          break;
 800a3d2:	e007      	b.n	800a3e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a3d4:	6839      	ldr	r1, [r7, #0]
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 fa0d 	bl	800a7f6 <USBD_CtlError>
          err++;
 800a3dc:	7afb      	ldrb	r3, [r7, #11]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a3e2:	e038      	b.n	800a456 <USBD_GetDescriptor+0x286>
 800a3e4:	e037      	b.n	800a456 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	7c1b      	ldrb	r3, [r3, #16]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d109      	bne.n	800a402 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3f6:	f107 0208 	add.w	r2, r7, #8
 800a3fa:	4610      	mov	r0, r2
 800a3fc:	4798      	blx	r3
 800a3fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a400:	e029      	b.n	800a456 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a402:	6839      	ldr	r1, [r7, #0]
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 f9f6 	bl	800a7f6 <USBD_CtlError>
        err++;
 800a40a:	7afb      	ldrb	r3, [r7, #11]
 800a40c:	3301      	adds	r3, #1
 800a40e:	72fb      	strb	r3, [r7, #11]
      break;
 800a410:	e021      	b.n	800a456 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	7c1b      	ldrb	r3, [r3, #16]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d10d      	bne.n	800a436 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a422:	f107 0208 	add.w	r2, r7, #8
 800a426:	4610      	mov	r0, r2
 800a428:	4798      	blx	r3
 800a42a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	3301      	adds	r3, #1
 800a430:	2207      	movs	r2, #7
 800a432:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a434:	e00f      	b.n	800a456 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a436:	6839      	ldr	r1, [r7, #0]
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 f9dc 	bl	800a7f6 <USBD_CtlError>
        err++;
 800a43e:	7afb      	ldrb	r3, [r7, #11]
 800a440:	3301      	adds	r3, #1
 800a442:	72fb      	strb	r3, [r7, #11]
      break;
 800a444:	e007      	b.n	800a456 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a446:	6839      	ldr	r1, [r7, #0]
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 f9d4 	bl	800a7f6 <USBD_CtlError>
      err++;
 800a44e:	7afb      	ldrb	r3, [r7, #11]
 800a450:	3301      	adds	r3, #1
 800a452:	72fb      	strb	r3, [r7, #11]
      break;
 800a454:	bf00      	nop
  }

  if (err != 0U)
 800a456:	7afb      	ldrb	r3, [r7, #11]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d11c      	bne.n	800a496 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a45c:	893b      	ldrh	r3, [r7, #8]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d011      	beq.n	800a486 <USBD_GetDescriptor+0x2b6>
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	88db      	ldrh	r3, [r3, #6]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00d      	beq.n	800a486 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	88da      	ldrh	r2, [r3, #6]
 800a46e:	893b      	ldrh	r3, [r7, #8]
 800a470:	4293      	cmp	r3, r2
 800a472:	bf28      	it	cs
 800a474:	4613      	movcs	r3, r2
 800a476:	b29b      	uxth	r3, r3
 800a478:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a47a:	893b      	ldrh	r3, [r7, #8]
 800a47c:	461a      	mov	r2, r3
 800a47e:	68f9      	ldr	r1, [r7, #12]
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 fa22 	bl	800a8ca <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	88db      	ldrh	r3, [r3, #6]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d104      	bne.n	800a498 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 fa79 	bl	800a986 <USBD_CtlSendStatus>
 800a494:	e000      	b.n	800a498 <USBD_GetDescriptor+0x2c8>
    return;
 800a496:	bf00      	nop
    }
  }
}
 800a498:	3710      	adds	r7, #16
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop

0800a4a0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	889b      	ldrh	r3, [r3, #4]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d130      	bne.n	800a514 <USBD_SetAddress+0x74>
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	88db      	ldrh	r3, [r3, #6]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d12c      	bne.n	800a514 <USBD_SetAddress+0x74>
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	885b      	ldrh	r3, [r3, #2]
 800a4be:	2b7f      	cmp	r3, #127	; 0x7f
 800a4c0:	d828      	bhi.n	800a514 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	885b      	ldrh	r3, [r3, #2]
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4d4:	2b03      	cmp	r3, #3
 800a4d6:	d104      	bne.n	800a4e2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a4d8:	6839      	ldr	r1, [r7, #0]
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 f98b 	bl	800a7f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4e0:	e01d      	b.n	800a51e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	7bfa      	ldrb	r2, [r7, #15]
 800a4e6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a4ea:	7bfb      	ldrb	r3, [r7, #15]
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 fe4c 	bl	800b18c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 fa46 	bl	800a986 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a4fa:	7bfb      	ldrb	r3, [r7, #15]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d004      	beq.n	800a50a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2202      	movs	r2, #2
 800a504:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a508:	e009      	b.n	800a51e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2201      	movs	r2, #1
 800a50e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a512:	e004      	b.n	800a51e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a514:	6839      	ldr	r1, [r7, #0]
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 f96d 	bl	800a7f6 <USBD_CtlError>
  }
}
 800a51c:	bf00      	nop
 800a51e:	bf00      	nop
 800a520:	3710      	adds	r7, #16
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
	...

0800a528 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	885b      	ldrh	r3, [r3, #2]
 800a536:	b2da      	uxtb	r2, r3
 800a538:	4b41      	ldr	r3, [pc, #260]	; (800a640 <USBD_SetConfig+0x118>)
 800a53a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a53c:	4b40      	ldr	r3, [pc, #256]	; (800a640 <USBD_SetConfig+0x118>)
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d904      	bls.n	800a54e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a544:	6839      	ldr	r1, [r7, #0]
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 f955 	bl	800a7f6 <USBD_CtlError>
 800a54c:	e075      	b.n	800a63a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a554:	2b02      	cmp	r3, #2
 800a556:	d002      	beq.n	800a55e <USBD_SetConfig+0x36>
 800a558:	2b03      	cmp	r3, #3
 800a55a:	d023      	beq.n	800a5a4 <USBD_SetConfig+0x7c>
 800a55c:	e062      	b.n	800a624 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a55e:	4b38      	ldr	r3, [pc, #224]	; (800a640 <USBD_SetConfig+0x118>)
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d01a      	beq.n	800a59c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a566:	4b36      	ldr	r3, [pc, #216]	; (800a640 <USBD_SetConfig+0x118>)
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	461a      	mov	r2, r3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2203      	movs	r2, #3
 800a574:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a578:	4b31      	ldr	r3, [pc, #196]	; (800a640 <USBD_SetConfig+0x118>)
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	4619      	mov	r1, r3
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f7ff f9e7 	bl	8009952 <USBD_SetClassConfig>
 800a584:	4603      	mov	r3, r0
 800a586:	2b02      	cmp	r3, #2
 800a588:	d104      	bne.n	800a594 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a58a:	6839      	ldr	r1, [r7, #0]
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f000 f932 	bl	800a7f6 <USBD_CtlError>
            return;
 800a592:	e052      	b.n	800a63a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 f9f6 	bl	800a986 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a59a:	e04e      	b.n	800a63a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 f9f2 	bl	800a986 <USBD_CtlSendStatus>
        break;
 800a5a2:	e04a      	b.n	800a63a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a5a4:	4b26      	ldr	r3, [pc, #152]	; (800a640 <USBD_SetConfig+0x118>)
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d112      	bne.n	800a5d2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2202      	movs	r2, #2
 800a5b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a5b4:	4b22      	ldr	r3, [pc, #136]	; (800a640 <USBD_SetConfig+0x118>)
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a5be:	4b20      	ldr	r3, [pc, #128]	; (800a640 <USBD_SetConfig+0x118>)
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f7ff f9e3 	bl	8009990 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 f9db 	bl	800a986 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a5d0:	e033      	b.n	800a63a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a5d2:	4b1b      	ldr	r3, [pc, #108]	; (800a640 <USBD_SetConfig+0x118>)
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d01d      	beq.n	800a61c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f7ff f9d1 	bl	8009990 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a5ee:	4b14      	ldr	r3, [pc, #80]	; (800a640 <USBD_SetConfig+0x118>)
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a5f8:	4b11      	ldr	r3, [pc, #68]	; (800a640 <USBD_SetConfig+0x118>)
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f7ff f9a7 	bl	8009952 <USBD_SetClassConfig>
 800a604:	4603      	mov	r3, r0
 800a606:	2b02      	cmp	r3, #2
 800a608:	d104      	bne.n	800a614 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a60a:	6839      	ldr	r1, [r7, #0]
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 f8f2 	bl	800a7f6 <USBD_CtlError>
            return;
 800a612:	e012      	b.n	800a63a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 f9b6 	bl	800a986 <USBD_CtlSendStatus>
        break;
 800a61a:	e00e      	b.n	800a63a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 f9b2 	bl	800a986 <USBD_CtlSendStatus>
        break;
 800a622:	e00a      	b.n	800a63a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a624:	6839      	ldr	r1, [r7, #0]
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 f8e5 	bl	800a7f6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a62c:	4b04      	ldr	r3, [pc, #16]	; (800a640 <USBD_SetConfig+0x118>)
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	4619      	mov	r1, r3
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f7ff f9ac 	bl	8009990 <USBD_ClrClassConfig>
        break;
 800a638:	bf00      	nop
    }
  }
}
 800a63a:	3708      	adds	r7, #8
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}
 800a640:	20000288 	.word	0x20000288

0800a644 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	88db      	ldrh	r3, [r3, #6]
 800a652:	2b01      	cmp	r3, #1
 800a654:	d004      	beq.n	800a660 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a656:	6839      	ldr	r1, [r7, #0]
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 f8cc 	bl	800a7f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a65e:	e022      	b.n	800a6a6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a666:	2b02      	cmp	r3, #2
 800a668:	dc02      	bgt.n	800a670 <USBD_GetConfig+0x2c>
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	dc03      	bgt.n	800a676 <USBD_GetConfig+0x32>
 800a66e:	e015      	b.n	800a69c <USBD_GetConfig+0x58>
 800a670:	2b03      	cmp	r3, #3
 800a672:	d00b      	beq.n	800a68c <USBD_GetConfig+0x48>
 800a674:	e012      	b.n	800a69c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	3308      	adds	r3, #8
 800a680:	2201      	movs	r2, #1
 800a682:	4619      	mov	r1, r3
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 f920 	bl	800a8ca <USBD_CtlSendData>
        break;
 800a68a:	e00c      	b.n	800a6a6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	3304      	adds	r3, #4
 800a690:	2201      	movs	r2, #1
 800a692:	4619      	mov	r1, r3
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 f918 	bl	800a8ca <USBD_CtlSendData>
        break;
 800a69a:	e004      	b.n	800a6a6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a69c:	6839      	ldr	r1, [r7, #0]
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 f8a9 	bl	800a7f6 <USBD_CtlError>
        break;
 800a6a4:	bf00      	nop
}
 800a6a6:	bf00      	nop
 800a6a8:	3708      	adds	r7, #8
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b082      	sub	sp, #8
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
 800a6b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6be:	3b01      	subs	r3, #1
 800a6c0:	2b02      	cmp	r3, #2
 800a6c2:	d81e      	bhi.n	800a702 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	88db      	ldrh	r3, [r3, #6]
 800a6c8:	2b02      	cmp	r3, #2
 800a6ca:	d004      	beq.n	800a6d6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a6cc:	6839      	ldr	r1, [r7, #0]
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 f891 	bl	800a7f6 <USBD_CtlError>
        break;
 800a6d4:	e01a      	b.n	800a70c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2201      	movs	r2, #1
 800a6da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d005      	beq.n	800a6f2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	f043 0202 	orr.w	r2, r3, #2
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	330c      	adds	r3, #12
 800a6f6:	2202      	movs	r2, #2
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 f8e5 	bl	800a8ca <USBD_CtlSendData>
      break;
 800a700:	e004      	b.n	800a70c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a702:	6839      	ldr	r1, [r7, #0]
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 f876 	bl	800a7f6 <USBD_CtlError>
      break;
 800a70a:	bf00      	nop
  }
}
 800a70c:	bf00      	nop
 800a70e:	3708      	adds	r7, #8
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	885b      	ldrh	r3, [r3, #2]
 800a722:	2b01      	cmp	r3, #1
 800a724:	d106      	bne.n	800a734 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2201      	movs	r2, #1
 800a72a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 f929 	bl	800a986 <USBD_CtlSendStatus>
  }
}
 800a734:	bf00      	nop
 800a736:	3708      	adds	r7, #8
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b082      	sub	sp, #8
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a74c:	3b01      	subs	r3, #1
 800a74e:	2b02      	cmp	r3, #2
 800a750:	d80b      	bhi.n	800a76a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	885b      	ldrh	r3, [r3, #2]
 800a756:	2b01      	cmp	r3, #1
 800a758:	d10c      	bne.n	800a774 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2200      	movs	r2, #0
 800a75e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 f90f 	bl	800a986 <USBD_CtlSendStatus>
      }
      break;
 800a768:	e004      	b.n	800a774 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a76a:	6839      	ldr	r1, [r7, #0]
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 f842 	bl	800a7f6 <USBD_CtlError>
      break;
 800a772:	e000      	b.n	800a776 <USBD_ClrFeature+0x3a>
      break;
 800a774:	bf00      	nop
  }
}
 800a776:	bf00      	nop
 800a778:	3708      	adds	r7, #8
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a77e:	b480      	push	{r7}
 800a780:	b083      	sub	sp, #12
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
 800a786:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	781a      	ldrb	r2, [r3, #0]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	785a      	ldrb	r2, [r3, #1]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	3302      	adds	r3, #2
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	b29a      	uxth	r2, r3
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	3303      	adds	r3, #3
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	021b      	lsls	r3, r3, #8
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	4413      	add	r3, r2
 800a7ae:	b29a      	uxth	r2, r3
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	3304      	adds	r3, #4
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	b29a      	uxth	r2, r3
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	3305      	adds	r3, #5
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	021b      	lsls	r3, r3, #8
 800a7c6:	b29b      	uxth	r3, r3
 800a7c8:	4413      	add	r3, r2
 800a7ca:	b29a      	uxth	r2, r3
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	3306      	adds	r3, #6
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	b29a      	uxth	r2, r3
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	3307      	adds	r3, #7
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	021b      	lsls	r3, r3, #8
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	4413      	add	r3, r2
 800a7e6:	b29a      	uxth	r2, r3
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	80da      	strh	r2, [r3, #6]

}
 800a7ec:	bf00      	nop
 800a7ee:	370c      	adds	r7, #12
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bc80      	pop	{r7}
 800a7f4:	4770      	bx	lr

0800a7f6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b082      	sub	sp, #8
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
 800a7fe:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a800:	2180      	movs	r1, #128	; 0x80
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 fc58 	bl	800b0b8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a808:	2100      	movs	r1, #0
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 fc54 	bl	800b0b8 <USBD_LL_StallEP>
}
 800a810:	bf00      	nop
 800a812:	3708      	adds	r7, #8
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b086      	sub	sp, #24
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	60b9      	str	r1, [r7, #8]
 800a822:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a824:	2300      	movs	r3, #0
 800a826:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d032      	beq.n	800a894 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a82e:	68f8      	ldr	r0, [r7, #12]
 800a830:	f000 f834 	bl	800a89c <USBD_GetLen>
 800a834:	4603      	mov	r3, r0
 800a836:	3301      	adds	r3, #1
 800a838:	b29b      	uxth	r3, r3
 800a83a:	005b      	lsls	r3, r3, #1
 800a83c:	b29a      	uxth	r2, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a842:	7dfb      	ldrb	r3, [r7, #23]
 800a844:	1c5a      	adds	r2, r3, #1
 800a846:	75fa      	strb	r2, [r7, #23]
 800a848:	461a      	mov	r2, r3
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	4413      	add	r3, r2
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	7812      	ldrb	r2, [r2, #0]
 800a852:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a854:	7dfb      	ldrb	r3, [r7, #23]
 800a856:	1c5a      	adds	r2, r3, #1
 800a858:	75fa      	strb	r2, [r7, #23]
 800a85a:	461a      	mov	r2, r3
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	4413      	add	r3, r2
 800a860:	2203      	movs	r2, #3
 800a862:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a864:	e012      	b.n	800a88c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	1c5a      	adds	r2, r3, #1
 800a86a:	60fa      	str	r2, [r7, #12]
 800a86c:	7dfa      	ldrb	r2, [r7, #23]
 800a86e:	1c51      	adds	r1, r2, #1
 800a870:	75f9      	strb	r1, [r7, #23]
 800a872:	4611      	mov	r1, r2
 800a874:	68ba      	ldr	r2, [r7, #8]
 800a876:	440a      	add	r2, r1
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a87c:	7dfb      	ldrb	r3, [r7, #23]
 800a87e:	1c5a      	adds	r2, r3, #1
 800a880:	75fa      	strb	r2, [r7, #23]
 800a882:	461a      	mov	r2, r3
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	4413      	add	r3, r2
 800a888:	2200      	movs	r2, #0
 800a88a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d1e8      	bne.n	800a866 <USBD_GetString+0x4e>
    }
  }
}
 800a894:	bf00      	nop
 800a896:	3718      	adds	r7, #24
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b085      	sub	sp, #20
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a8a8:	e005      	b.n	800a8b6 <USBD_GetLen+0x1a>
  {
    len++;
 800a8aa:	7bfb      	ldrb	r3, [r7, #15]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d1f5      	bne.n	800a8aa <USBD_GetLen+0xe>
  }

  return len;
 800a8be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3714      	adds	r7, #20
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bc80      	pop	{r7}
 800a8c8:	4770      	bx	lr

0800a8ca <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b084      	sub	sp, #16
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	60f8      	str	r0, [r7, #12]
 800a8d2:	60b9      	str	r1, [r7, #8]
 800a8d4:	4613      	mov	r3, r2
 800a8d6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2202      	movs	r2, #2
 800a8dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a8e0:	88fa      	ldrh	r2, [r7, #6]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a8e6:	88fa      	ldrh	r2, [r7, #6]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8ec:	88fb      	ldrh	r3, [r7, #6]
 800a8ee:	68ba      	ldr	r2, [r7, #8]
 800a8f0:	2100      	movs	r1, #0
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	f000 fc69 	bl	800b1ca <USBD_LL_Transmit>

  return USBD_OK;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b084      	sub	sp, #16
 800a906:	af00      	add	r7, sp, #0
 800a908:	60f8      	str	r0, [r7, #12]
 800a90a:	60b9      	str	r1, [r7, #8]
 800a90c:	4613      	mov	r3, r2
 800a90e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a910:	88fb      	ldrh	r3, [r7, #6]
 800a912:	68ba      	ldr	r2, [r7, #8]
 800a914:	2100      	movs	r1, #0
 800a916:	68f8      	ldr	r0, [r7, #12]
 800a918:	f000 fc57 	bl	800b1ca <USBD_LL_Transmit>

  return USBD_OK;
 800a91c:	2300      	movs	r3, #0
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3710      	adds	r7, #16
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}

0800a926 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a926:	b580      	push	{r7, lr}
 800a928:	b084      	sub	sp, #16
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	60f8      	str	r0, [r7, #12]
 800a92e:	60b9      	str	r1, [r7, #8]
 800a930:	4613      	mov	r3, r2
 800a932:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2203      	movs	r2, #3
 800a938:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a93c:	88fa      	ldrh	r2, [r7, #6]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a944:	88fa      	ldrh	r2, [r7, #6]
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a94c:	88fb      	ldrh	r3, [r7, #6]
 800a94e:	68ba      	ldr	r2, [r7, #8]
 800a950:	2100      	movs	r1, #0
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	f000 fc5c 	bl	800b210 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a958:	2300      	movs	r3, #0
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3710      	adds	r7, #16
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b084      	sub	sp, #16
 800a966:	af00      	add	r7, sp, #0
 800a968:	60f8      	str	r0, [r7, #12]
 800a96a:	60b9      	str	r1, [r7, #8]
 800a96c:	4613      	mov	r3, r2
 800a96e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a970:	88fb      	ldrh	r3, [r7, #6]
 800a972:	68ba      	ldr	r2, [r7, #8]
 800a974:	2100      	movs	r1, #0
 800a976:	68f8      	ldr	r0, [r7, #12]
 800a978:	f000 fc4a 	bl	800b210 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a97c:	2300      	movs	r3, #0
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3710      	adds	r7, #16
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a986:	b580      	push	{r7, lr}
 800a988:	b082      	sub	sp, #8
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2204      	movs	r2, #4
 800a992:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a996:	2300      	movs	r3, #0
 800a998:	2200      	movs	r2, #0
 800a99a:	2100      	movs	r1, #0
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 fc14 	bl	800b1ca <USBD_LL_Transmit>

  return USBD_OK;
 800a9a2:	2300      	movs	r3, #0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3708      	adds	r7, #8
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2205      	movs	r2, #5
 800a9b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9bc:	2300      	movs	r3, #0
 800a9be:	2200      	movs	r2, #0
 800a9c0:	2100      	movs	r1, #0
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 fc24 	bl	800b210 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a9c8:	2300      	movs	r3, #0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3708      	adds	r7, #8
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
	...

0800a9d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a9d8:	2200      	movs	r2, #0
 800a9da:	4912      	ldr	r1, [pc, #72]	; (800aa24 <MX_USB_DEVICE_Init+0x50>)
 800a9dc:	4812      	ldr	r0, [pc, #72]	; (800aa28 <MX_USB_DEVICE_Init+0x54>)
 800a9de:	f7fe ff5e 	bl	800989e <USBD_Init>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d001      	beq.n	800a9ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a9e8:	f7f7 fe38 	bl	800265c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a9ec:	490f      	ldr	r1, [pc, #60]	; (800aa2c <MX_USB_DEVICE_Init+0x58>)
 800a9ee:	480e      	ldr	r0, [pc, #56]	; (800aa28 <MX_USB_DEVICE_Init+0x54>)
 800a9f0:	f7fe ff80 	bl	80098f4 <USBD_RegisterClass>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d001      	beq.n	800a9fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a9fa:	f7f7 fe2f 	bl	800265c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a9fe:	490c      	ldr	r1, [pc, #48]	; (800aa30 <MX_USB_DEVICE_Init+0x5c>)
 800aa00:	4809      	ldr	r0, [pc, #36]	; (800aa28 <MX_USB_DEVICE_Init+0x54>)
 800aa02:	f7fe feb1 	bl	8009768 <USBD_CDC_RegisterInterface>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d001      	beq.n	800aa10 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800aa0c:	f7f7 fe26 	bl	800265c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800aa10:	4805      	ldr	r0, [pc, #20]	; (800aa28 <MX_USB_DEVICE_Init+0x54>)
 800aa12:	f7fe ff88 	bl	8009926 <USBD_Start>
 800aa16:	4603      	mov	r3, r0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d001      	beq.n	800aa20 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800aa1c:	f7f7 fe1e 	bl	800265c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800aa20:	bf00      	nop
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	2000013c 	.word	0x2000013c
 800aa28:	200009f8 	.word	0x200009f8
 800aa2c:	20000028 	.word	0x20000028
 800aa30:	2000012c 	.word	0x2000012c

0800aa34 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aa38:	2200      	movs	r2, #0
 800aa3a:	4905      	ldr	r1, [pc, #20]	; (800aa50 <CDC_Init_FS+0x1c>)
 800aa3c:	4805      	ldr	r0, [pc, #20]	; (800aa54 <CDC_Init_FS+0x20>)
 800aa3e:	f7fe fea9 	bl	8009794 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aa42:	4905      	ldr	r1, [pc, #20]	; (800aa58 <CDC_Init_FS+0x24>)
 800aa44:	4803      	ldr	r0, [pc, #12]	; (800aa54 <CDC_Init_FS+0x20>)
 800aa46:	f7fe febe 	bl	80097c6 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800aa4a:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	20000ebc 	.word	0x20000ebc
 800aa54:	200009f8 	.word	0x200009f8
 800aa58:	20000cbc 	.word	0x20000cbc

0800aa5c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 800aa60:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bc80      	pop	{r7}
 800aa68:	4770      	bx	lr
	...

0800aa6c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	4603      	mov	r3, r0
 800aa74:	6039      	str	r1, [r7, #0]
 800aa76:	71fb      	strb	r3, [r7, #7]
 800aa78:	4613      	mov	r3, r2
 800aa7a:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch (cmd)
 800aa7c:	79fb      	ldrb	r3, [r7, #7]
 800aa7e:	2b23      	cmp	r3, #35	; 0x23
 800aa80:	d84a      	bhi.n	800ab18 <CDC_Control_FS+0xac>
 800aa82:	a201      	add	r2, pc, #4	; (adr r2, 800aa88 <CDC_Control_FS+0x1c>)
 800aa84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa88:	0800ab19 	.word	0x0800ab19
 800aa8c:	0800ab19 	.word	0x0800ab19
 800aa90:	0800ab19 	.word	0x0800ab19
 800aa94:	0800ab19 	.word	0x0800ab19
 800aa98:	0800ab19 	.word	0x0800ab19
 800aa9c:	0800ab19 	.word	0x0800ab19
 800aaa0:	0800ab19 	.word	0x0800ab19
 800aaa4:	0800ab19 	.word	0x0800ab19
 800aaa8:	0800ab19 	.word	0x0800ab19
 800aaac:	0800ab19 	.word	0x0800ab19
 800aab0:	0800ab19 	.word	0x0800ab19
 800aab4:	0800ab19 	.word	0x0800ab19
 800aab8:	0800ab19 	.word	0x0800ab19
 800aabc:	0800ab19 	.word	0x0800ab19
 800aac0:	0800ab19 	.word	0x0800ab19
 800aac4:	0800ab19 	.word	0x0800ab19
 800aac8:	0800ab19 	.word	0x0800ab19
 800aacc:	0800ab19 	.word	0x0800ab19
 800aad0:	0800ab19 	.word	0x0800ab19
 800aad4:	0800ab19 	.word	0x0800ab19
 800aad8:	0800ab19 	.word	0x0800ab19
 800aadc:	0800ab19 	.word	0x0800ab19
 800aae0:	0800ab19 	.word	0x0800ab19
 800aae4:	0800ab19 	.word	0x0800ab19
 800aae8:	0800ab19 	.word	0x0800ab19
 800aaec:	0800ab19 	.word	0x0800ab19
 800aaf0:	0800ab19 	.word	0x0800ab19
 800aaf4:	0800ab19 	.word	0x0800ab19
 800aaf8:	0800ab19 	.word	0x0800ab19
 800aafc:	0800ab19 	.word	0x0800ab19
 800ab00:	0800ab19 	.word	0x0800ab19
 800ab04:	0800ab19 	.word	0x0800ab19
 800ab08:	0800ab19 	.word	0x0800ab19
 800ab0c:	0800ab19 	.word	0x0800ab19
 800ab10:	0800ab19 	.word	0x0800ab19
 800ab14:	0800ab19 	.word	0x0800ab19
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800ab18:	bf00      	nop
	}

	return (USBD_OK);
 800ab1a:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	370c      	adds	r7, #12
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bc80      	pop	{r7}
 800ab24:	4770      	bx	lr
 800ab26:	bf00      	nop

0800ab28 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b082      	sub	sp, #8
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ab32:	6879      	ldr	r1, [r7, #4]
 800ab34:	4807      	ldr	r0, [pc, #28]	; (800ab54 <CDC_Receive_FS+0x2c>)
 800ab36:	f7fe fe46 	bl	80097c6 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ab3a:	4806      	ldr	r0, [pc, #24]	; (800ab54 <CDC_Receive_FS+0x2c>)
 800ab3c:	f7fe fe85 	bl	800984a <USBD_CDC_ReceivePacket>

	runCommands(Buf, Len);
 800ab40:	6839      	ldr	r1, [r7, #0]
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f7f6 fc0a 	bl	800135c <runCommands>
	return (USBD_OK);
 800ab48:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3708      	adds	r7, #8
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	200009f8 	.word	0x200009f8

0800ab58 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	460b      	mov	r3, r1
 800ab62:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 800ab64:	2300      	movs	r3, #0
 800ab66:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800ab68:	4b0d      	ldr	r3, [pc, #52]	; (800aba0 <CDC_Transmit_FS+0x48>)
 800ab6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab6e:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0)
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d001      	beq.n	800ab7e <CDC_Transmit_FS+0x26>
	{
		return USBD_BUSY;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	e00b      	b.n	800ab96 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ab7e:	887b      	ldrh	r3, [r7, #2]
 800ab80:	461a      	mov	r2, r3
 800ab82:	6879      	ldr	r1, [r7, #4]
 800ab84:	4806      	ldr	r0, [pc, #24]	; (800aba0 <CDC_Transmit_FS+0x48>)
 800ab86:	f7fe fe05 	bl	8009794 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ab8a:	4805      	ldr	r0, [pc, #20]	; (800aba0 <CDC_Transmit_FS+0x48>)
 800ab8c:	f7fe fe2e 	bl	80097ec <USBD_CDC_TransmitPacket>
 800ab90:	4603      	mov	r3, r0
 800ab92:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 800ab94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3710      	adds	r7, #16
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	200009f8 	.word	0x200009f8

0800aba4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	4603      	mov	r3, r0
 800abac:	6039      	str	r1, [r7, #0]
 800abae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	2212      	movs	r2, #18
 800abb4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800abb6:	4b03      	ldr	r3, [pc, #12]	; (800abc4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800abb8:	4618      	mov	r0, r3
 800abba:	370c      	adds	r7, #12
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bc80      	pop	{r7}
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	20000158 	.word	0x20000158

0800abc8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	4603      	mov	r3, r0
 800abd0:	6039      	str	r1, [r7, #0]
 800abd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	2204      	movs	r2, #4
 800abd8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800abda:	4b03      	ldr	r3, [pc, #12]	; (800abe8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800abdc:	4618      	mov	r0, r3
 800abde:	370c      	adds	r7, #12
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bc80      	pop	{r7}
 800abe4:	4770      	bx	lr
 800abe6:	bf00      	nop
 800abe8:	2000016c 	.word	0x2000016c

0800abec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b082      	sub	sp, #8
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	4603      	mov	r3, r0
 800abf4:	6039      	str	r1, [r7, #0]
 800abf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800abf8:	79fb      	ldrb	r3, [r7, #7]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d105      	bne.n	800ac0a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800abfe:	683a      	ldr	r2, [r7, #0]
 800ac00:	4907      	ldr	r1, [pc, #28]	; (800ac20 <USBD_FS_ProductStrDescriptor+0x34>)
 800ac02:	4808      	ldr	r0, [pc, #32]	; (800ac24 <USBD_FS_ProductStrDescriptor+0x38>)
 800ac04:	f7ff fe08 	bl	800a818 <USBD_GetString>
 800ac08:	e004      	b.n	800ac14 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ac0a:	683a      	ldr	r2, [r7, #0]
 800ac0c:	4904      	ldr	r1, [pc, #16]	; (800ac20 <USBD_FS_ProductStrDescriptor+0x34>)
 800ac0e:	4805      	ldr	r0, [pc, #20]	; (800ac24 <USBD_FS_ProductStrDescriptor+0x38>)
 800ac10:	f7ff fe02 	bl	800a818 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac14:	4b02      	ldr	r3, [pc, #8]	; (800ac20 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3708      	adds	r7, #8
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	200010bc 	.word	0x200010bc
 800ac24:	0800c870 	.word	0x0800c870

0800ac28 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	4603      	mov	r3, r0
 800ac30:	6039      	str	r1, [r7, #0]
 800ac32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ac34:	683a      	ldr	r2, [r7, #0]
 800ac36:	4904      	ldr	r1, [pc, #16]	; (800ac48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ac38:	4804      	ldr	r0, [pc, #16]	; (800ac4c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ac3a:	f7ff fded 	bl	800a818 <USBD_GetString>
  return USBD_StrDesc;
 800ac3e:	4b02      	ldr	r3, [pc, #8]	; (800ac48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3708      	adds	r7, #8
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}
 800ac48:	200010bc 	.word	0x200010bc
 800ac4c:	0800c888 	.word	0x0800c888

0800ac50 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	4603      	mov	r3, r0
 800ac58:	6039      	str	r1, [r7, #0]
 800ac5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	221a      	movs	r2, #26
 800ac60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ac62:	f000 f843 	bl	800acec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ac66:	4b02      	ldr	r3, [pc, #8]	; (800ac70 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3708      	adds	r7, #8
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	20000170 	.word	0x20000170

0800ac74 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	6039      	str	r1, [r7, #0]
 800ac7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ac80:	79fb      	ldrb	r3, [r7, #7]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d105      	bne.n	800ac92 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ac86:	683a      	ldr	r2, [r7, #0]
 800ac88:	4907      	ldr	r1, [pc, #28]	; (800aca8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ac8a:	4808      	ldr	r0, [pc, #32]	; (800acac <USBD_FS_ConfigStrDescriptor+0x38>)
 800ac8c:	f7ff fdc4 	bl	800a818 <USBD_GetString>
 800ac90:	e004      	b.n	800ac9c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ac92:	683a      	ldr	r2, [r7, #0]
 800ac94:	4904      	ldr	r1, [pc, #16]	; (800aca8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ac96:	4805      	ldr	r0, [pc, #20]	; (800acac <USBD_FS_ConfigStrDescriptor+0x38>)
 800ac98:	f7ff fdbe 	bl	800a818 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac9c:	4b02      	ldr	r3, [pc, #8]	; (800aca8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3708      	adds	r7, #8
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	200010bc 	.word	0x200010bc
 800acac:	0800c89c 	.word	0x0800c89c

0800acb0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	4603      	mov	r3, r0
 800acb8:	6039      	str	r1, [r7, #0]
 800acba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800acbc:	79fb      	ldrb	r3, [r7, #7]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d105      	bne.n	800acce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800acc2:	683a      	ldr	r2, [r7, #0]
 800acc4:	4907      	ldr	r1, [pc, #28]	; (800ace4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800acc6:	4808      	ldr	r0, [pc, #32]	; (800ace8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800acc8:	f7ff fda6 	bl	800a818 <USBD_GetString>
 800accc:	e004      	b.n	800acd8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800acce:	683a      	ldr	r2, [r7, #0]
 800acd0:	4904      	ldr	r1, [pc, #16]	; (800ace4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800acd2:	4805      	ldr	r0, [pc, #20]	; (800ace8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800acd4:	f7ff fda0 	bl	800a818 <USBD_GetString>
  }
  return USBD_StrDesc;
 800acd8:	4b02      	ldr	r3, [pc, #8]	; (800ace4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3708      	adds	r7, #8
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop
 800ace4:	200010bc 	.word	0x200010bc
 800ace8:	0800c8a8 	.word	0x0800c8a8

0800acec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800acf2:	4b0f      	ldr	r3, [pc, #60]	; (800ad30 <Get_SerialNum+0x44>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800acf8:	4b0e      	ldr	r3, [pc, #56]	; (800ad34 <Get_SerialNum+0x48>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800acfe:	4b0e      	ldr	r3, [pc, #56]	; (800ad38 <Get_SerialNum+0x4c>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ad04:	68fa      	ldr	r2, [r7, #12]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	4413      	add	r3, r2
 800ad0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d009      	beq.n	800ad26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ad12:	2208      	movs	r2, #8
 800ad14:	4909      	ldr	r1, [pc, #36]	; (800ad3c <Get_SerialNum+0x50>)
 800ad16:	68f8      	ldr	r0, [r7, #12]
 800ad18:	f000 f814 	bl	800ad44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ad1c:	2204      	movs	r2, #4
 800ad1e:	4908      	ldr	r1, [pc, #32]	; (800ad40 <Get_SerialNum+0x54>)
 800ad20:	68b8      	ldr	r0, [r7, #8]
 800ad22:	f000 f80f 	bl	800ad44 <IntToUnicode>
  }
}
 800ad26:	bf00      	nop
 800ad28:	3710      	adds	r7, #16
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	1ffff7e8 	.word	0x1ffff7e8
 800ad34:	1ffff7ec 	.word	0x1ffff7ec
 800ad38:	1ffff7f0 	.word	0x1ffff7f0
 800ad3c:	20000172 	.word	0x20000172
 800ad40:	20000182 	.word	0x20000182

0800ad44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b087      	sub	sp, #28
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	60b9      	str	r1, [r7, #8]
 800ad4e:	4613      	mov	r3, r2
 800ad50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ad52:	2300      	movs	r3, #0
 800ad54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ad56:	2300      	movs	r3, #0
 800ad58:	75fb      	strb	r3, [r7, #23]
 800ad5a:	e027      	b.n	800adac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	0f1b      	lsrs	r3, r3, #28
 800ad60:	2b09      	cmp	r3, #9
 800ad62:	d80b      	bhi.n	800ad7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	0f1b      	lsrs	r3, r3, #28
 800ad68:	b2da      	uxtb	r2, r3
 800ad6a:	7dfb      	ldrb	r3, [r7, #23]
 800ad6c:	005b      	lsls	r3, r3, #1
 800ad6e:	4619      	mov	r1, r3
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	440b      	add	r3, r1
 800ad74:	3230      	adds	r2, #48	; 0x30
 800ad76:	b2d2      	uxtb	r2, r2
 800ad78:	701a      	strb	r2, [r3, #0]
 800ad7a:	e00a      	b.n	800ad92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	0f1b      	lsrs	r3, r3, #28
 800ad80:	b2da      	uxtb	r2, r3
 800ad82:	7dfb      	ldrb	r3, [r7, #23]
 800ad84:	005b      	lsls	r3, r3, #1
 800ad86:	4619      	mov	r1, r3
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	440b      	add	r3, r1
 800ad8c:	3237      	adds	r2, #55	; 0x37
 800ad8e:	b2d2      	uxtb	r2, r2
 800ad90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	011b      	lsls	r3, r3, #4
 800ad96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ad98:	7dfb      	ldrb	r3, [r7, #23]
 800ad9a:	005b      	lsls	r3, r3, #1
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	68ba      	ldr	r2, [r7, #8]
 800ada0:	4413      	add	r3, r2
 800ada2:	2200      	movs	r2, #0
 800ada4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ada6:	7dfb      	ldrb	r3, [r7, #23]
 800ada8:	3301      	adds	r3, #1
 800adaa:	75fb      	strb	r3, [r7, #23]
 800adac:	7dfa      	ldrb	r2, [r7, #23]
 800adae:	79fb      	ldrb	r3, [r7, #7]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d3d3      	bcc.n	800ad5c <IntToUnicode+0x18>
  }
}
 800adb4:	bf00      	nop
 800adb6:	bf00      	nop
 800adb8:	371c      	adds	r7, #28
 800adba:	46bd      	mov	sp, r7
 800adbc:	bc80      	pop	{r7}
 800adbe:	4770      	bx	lr

0800adc0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b084      	sub	sp, #16
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a0d      	ldr	r2, [pc, #52]	; (800ae04 <HAL_PCD_MspInit+0x44>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d113      	bne.n	800adfa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800add2:	4b0d      	ldr	r3, [pc, #52]	; (800ae08 <HAL_PCD_MspInit+0x48>)
 800add4:	69db      	ldr	r3, [r3, #28]
 800add6:	4a0c      	ldr	r2, [pc, #48]	; (800ae08 <HAL_PCD_MspInit+0x48>)
 800add8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800addc:	61d3      	str	r3, [r2, #28]
 800adde:	4b0a      	ldr	r3, [pc, #40]	; (800ae08 <HAL_PCD_MspInit+0x48>)
 800ade0:	69db      	ldr	r3, [r3, #28]
 800ade2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ade6:	60fb      	str	r3, [r7, #12]
 800ade8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800adea:	2200      	movs	r2, #0
 800adec:	2100      	movs	r1, #0
 800adee:	2014      	movs	r0, #20
 800adf0:	f7f8 fcbf 	bl	8003772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800adf4:	2014      	movs	r0, #20
 800adf6:	f7f8 fcd8 	bl	80037aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800adfa:	bf00      	nop
 800adfc:	3710      	adds	r7, #16
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	40005c00 	.word	0x40005c00
 800ae08:	40021000 	.word	0x40021000

0800ae0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b082      	sub	sp, #8
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ae20:	4619      	mov	r1, r3
 800ae22:	4610      	mov	r0, r2
 800ae24:	f7fe fdc7 	bl	80099b6 <USBD_LL_SetupStage>
}
 800ae28:	bf00      	nop
 800ae2a:	3708      	adds	r7, #8
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	460b      	mov	r3, r1
 800ae3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ae42:	78fa      	ldrb	r2, [r7, #3]
 800ae44:	6879      	ldr	r1, [r7, #4]
 800ae46:	4613      	mov	r3, r2
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	4413      	add	r3, r2
 800ae4c:	00db      	lsls	r3, r3, #3
 800ae4e:	440b      	add	r3, r1
 800ae50:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	78fb      	ldrb	r3, [r7, #3]
 800ae58:	4619      	mov	r1, r3
 800ae5a:	f7fe fdf9 	bl	8009a50 <USBD_LL_DataOutStage>
}
 800ae5e:	bf00      	nop
 800ae60:	3708      	adds	r7, #8
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b082      	sub	sp, #8
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
 800ae6e:	460b      	mov	r3, r1
 800ae70:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ae78:	78fa      	ldrb	r2, [r7, #3]
 800ae7a:	6879      	ldr	r1, [r7, #4]
 800ae7c:	4613      	mov	r3, r2
 800ae7e:	009b      	lsls	r3, r3, #2
 800ae80:	4413      	add	r3, r2
 800ae82:	00db      	lsls	r3, r3, #3
 800ae84:	440b      	add	r3, r1
 800ae86:	333c      	adds	r3, #60	; 0x3c
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	78fb      	ldrb	r3, [r7, #3]
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	f7fe fe50 	bl	8009b32 <USBD_LL_DataInStage>
}
 800ae92:	bf00      	nop
 800ae94:	3708      	adds	r7, #8
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae9a:	b580      	push	{r7, lr}
 800ae9c:	b082      	sub	sp, #8
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f7fe ff60 	bl	8009d6e <USBD_LL_SOF>
}
 800aeae:	bf00      	nop
 800aeb0:	3708      	adds	r7, #8
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b084      	sub	sp, #16
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aebe:	2301      	movs	r3, #1
 800aec0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	2b02      	cmp	r3, #2
 800aec8:	d001      	beq.n	800aece <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aeca:	f7f7 fbc7 	bl	800265c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aed4:	7bfa      	ldrb	r2, [r7, #15]
 800aed6:	4611      	mov	r1, r2
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7fe ff10 	bl	8009cfe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aee4:	4618      	mov	r0, r3
 800aee6:	f7fe fec9 	bl	8009c7c <USBD_LL_Reset>
}
 800aeea:	bf00      	nop
 800aeec:	3710      	adds	r7, #16
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
	...

0800aef4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800af02:	4618      	mov	r0, r3
 800af04:	f7fe ff0a 	bl	8009d1c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	699b      	ldr	r3, [r3, #24]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d005      	beq.n	800af1c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af10:	4b04      	ldr	r3, [pc, #16]	; (800af24 <HAL_PCD_SuspendCallback+0x30>)
 800af12:	691b      	ldr	r3, [r3, #16]
 800af14:	4a03      	ldr	r2, [pc, #12]	; (800af24 <HAL_PCD_SuspendCallback+0x30>)
 800af16:	f043 0306 	orr.w	r3, r3, #6
 800af1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800af1c:	bf00      	nop
 800af1e:	3708      	adds	r7, #8
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}
 800af24:	e000ed00 	.word	0xe000ed00

0800af28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800af36:	4618      	mov	r0, r3
 800af38:	f7fe ff04 	bl	8009d44 <USBD_LL_Resume>
}
 800af3c:	bf00      	nop
 800af3e:	3708      	adds	r7, #8
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800af4c:	4a28      	ldr	r2, [pc, #160]	; (800aff0 <USBD_LL_Init+0xac>)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	4a26      	ldr	r2, [pc, #152]	; (800aff0 <USBD_LL_Init+0xac>)
 800af58:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800af5c:	4b24      	ldr	r3, [pc, #144]	; (800aff0 <USBD_LL_Init+0xac>)
 800af5e:	4a25      	ldr	r2, [pc, #148]	; (800aff4 <USBD_LL_Init+0xb0>)
 800af60:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800af62:	4b23      	ldr	r3, [pc, #140]	; (800aff0 <USBD_LL_Init+0xac>)
 800af64:	2208      	movs	r2, #8
 800af66:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800af68:	4b21      	ldr	r3, [pc, #132]	; (800aff0 <USBD_LL_Init+0xac>)
 800af6a:	2202      	movs	r2, #2
 800af6c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800af6e:	4b20      	ldr	r3, [pc, #128]	; (800aff0 <USBD_LL_Init+0xac>)
 800af70:	2200      	movs	r2, #0
 800af72:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800af74:	4b1e      	ldr	r3, [pc, #120]	; (800aff0 <USBD_LL_Init+0xac>)
 800af76:	2200      	movs	r2, #0
 800af78:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800af7a:	4b1d      	ldr	r3, [pc, #116]	; (800aff0 <USBD_LL_Init+0xac>)
 800af7c:	2200      	movs	r2, #0
 800af7e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800af80:	481b      	ldr	r0, [pc, #108]	; (800aff0 <USBD_LL_Init+0xac>)
 800af82:	f7f9 f82e 	bl	8003fe2 <HAL_PCD_Init>
 800af86:	4603      	mov	r3, r0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d001      	beq.n	800af90 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800af8c:	f7f7 fb66 	bl	800265c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800af96:	2318      	movs	r3, #24
 800af98:	2200      	movs	r2, #0
 800af9a:	2100      	movs	r1, #0
 800af9c:	f7fa fb70 	bl	8005680 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800afa6:	2358      	movs	r3, #88	; 0x58
 800afa8:	2200      	movs	r2, #0
 800afaa:	2180      	movs	r1, #128	; 0x80
 800afac:	f7fa fb68 	bl	8005680 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800afb6:	23c0      	movs	r3, #192	; 0xc0
 800afb8:	2200      	movs	r2, #0
 800afba:	2181      	movs	r1, #129	; 0x81
 800afbc:	f7fa fb60 	bl	8005680 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800afc6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800afca:	2200      	movs	r2, #0
 800afcc:	2101      	movs	r1, #1
 800afce:	f7fa fb57 	bl	8005680 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800afd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afdc:	2200      	movs	r2, #0
 800afde:	2182      	movs	r1, #130	; 0x82
 800afe0:	f7fa fb4e 	bl	8005680 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800afe4:	2300      	movs	r3, #0
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3708      	adds	r7, #8
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	200012bc 	.word	0x200012bc
 800aff4:	40005c00 	.word	0x40005c00

0800aff8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b000:	2300      	movs	r3, #0
 800b002:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b004:	2300      	movs	r3, #0
 800b006:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b00e:	4618      	mov	r0, r3
 800b010:	f7f9 f8f2 	bl	80041f8 <HAL_PCD_Start>
 800b014:	4603      	mov	r3, r0
 800b016:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b018:	7bfb      	ldrb	r3, [r7, #15]
 800b01a:	4618      	mov	r0, r3
 800b01c:	f000 f94e 	bl	800b2bc <USBD_Get_USB_Status>
 800b020:	4603      	mov	r3, r0
 800b022:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b024:	7bbb      	ldrb	r3, [r7, #14]
}
 800b026:	4618      	mov	r0, r3
 800b028:	3710      	adds	r7, #16
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b084      	sub	sp, #16
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
 800b036:	4608      	mov	r0, r1
 800b038:	4611      	mov	r1, r2
 800b03a:	461a      	mov	r2, r3
 800b03c:	4603      	mov	r3, r0
 800b03e:	70fb      	strb	r3, [r7, #3]
 800b040:	460b      	mov	r3, r1
 800b042:	70bb      	strb	r3, [r7, #2]
 800b044:	4613      	mov	r3, r2
 800b046:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b048:	2300      	movs	r3, #0
 800b04a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b04c:	2300      	movs	r3, #0
 800b04e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b056:	78bb      	ldrb	r3, [r7, #2]
 800b058:	883a      	ldrh	r2, [r7, #0]
 800b05a:	78f9      	ldrb	r1, [r7, #3]
 800b05c:	f7f9 fa6c 	bl	8004538 <HAL_PCD_EP_Open>
 800b060:	4603      	mov	r3, r0
 800b062:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b064:	7bfb      	ldrb	r3, [r7, #15]
 800b066:	4618      	mov	r0, r3
 800b068:	f000 f928 	bl	800b2bc <USBD_Get_USB_Status>
 800b06c:	4603      	mov	r3, r0
 800b06e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b070:	7bbb      	ldrb	r3, [r7, #14]
}
 800b072:	4618      	mov	r0, r3
 800b074:	3710      	adds	r7, #16
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}

0800b07a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b07a:	b580      	push	{r7, lr}
 800b07c:	b084      	sub	sp, #16
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
 800b082:	460b      	mov	r3, r1
 800b084:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b086:	2300      	movs	r3, #0
 800b088:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b08a:	2300      	movs	r3, #0
 800b08c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b094:	78fa      	ldrb	r2, [r7, #3]
 800b096:	4611      	mov	r1, r2
 800b098:	4618      	mov	r0, r3
 800b09a:	f7f9 fab3 	bl	8004604 <HAL_PCD_EP_Close>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0a2:	7bfb      	ldrb	r3, [r7, #15]
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f000 f909 	bl	800b2bc <USBD_Get_USB_Status>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3710      	adds	r7, #16
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b0d2:	78fa      	ldrb	r2, [r7, #3]
 800b0d4:	4611      	mov	r1, r2
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7f9 fb73 	bl	80047c2 <HAL_PCD_EP_SetStall>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0e0:	7bfb      	ldrb	r3, [r7, #15]
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f000 f8ea 	bl	800b2bc <USBD_Get_USB_Status>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3710      	adds	r7, #16
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b084      	sub	sp, #16
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	460b      	mov	r3, r1
 800b100:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b102:	2300      	movs	r3, #0
 800b104:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b106:	2300      	movs	r3, #0
 800b108:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b110:	78fa      	ldrb	r2, [r7, #3]
 800b112:	4611      	mov	r1, r2
 800b114:	4618      	mov	r0, r3
 800b116:	f7f9 fbb4 	bl	8004882 <HAL_PCD_EP_ClrStall>
 800b11a:	4603      	mov	r3, r0
 800b11c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b11e:	7bfb      	ldrb	r3, [r7, #15]
 800b120:	4618      	mov	r0, r3
 800b122:	f000 f8cb 	bl	800b2bc <USBD_Get_USB_Status>
 800b126:	4603      	mov	r3, r0
 800b128:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b12a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3710      	adds	r7, #16
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b134:	b480      	push	{r7}
 800b136:	b085      	sub	sp, #20
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	460b      	mov	r3, r1
 800b13e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b146:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b148:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	da0c      	bge.n	800b16a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b150:	78fb      	ldrb	r3, [r7, #3]
 800b152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b156:	68f9      	ldr	r1, [r7, #12]
 800b158:	1c5a      	adds	r2, r3, #1
 800b15a:	4613      	mov	r3, r2
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	4413      	add	r3, r2
 800b160:	00db      	lsls	r3, r3, #3
 800b162:	440b      	add	r3, r1
 800b164:	3302      	adds	r3, #2
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	e00b      	b.n	800b182 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b16a:	78fb      	ldrb	r3, [r7, #3]
 800b16c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b170:	68f9      	ldr	r1, [r7, #12]
 800b172:	4613      	mov	r3, r2
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	4413      	add	r3, r2
 800b178:	00db      	lsls	r3, r3, #3
 800b17a:	440b      	add	r3, r1
 800b17c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b180:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b182:	4618      	mov	r0, r3
 800b184:	3714      	adds	r7, #20
 800b186:	46bd      	mov	sp, r7
 800b188:	bc80      	pop	{r7}
 800b18a:	4770      	bx	lr

0800b18c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	460b      	mov	r3, r1
 800b196:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b198:	2300      	movs	r3, #0
 800b19a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b19c:	2300      	movs	r3, #0
 800b19e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b1a6:	78fa      	ldrb	r2, [r7, #3]
 800b1a8:	4611      	mov	r1, r2
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7f9 f99f 	bl	80044ee <HAL_PCD_SetAddress>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1b4:	7bfb      	ldrb	r3, [r7, #15]
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f000 f880 	bl	800b2bc <USBD_Get_USB_Status>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}

0800b1ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b1ca:	b580      	push	{r7, lr}
 800b1cc:	b086      	sub	sp, #24
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	60f8      	str	r0, [r7, #12]
 800b1d2:	607a      	str	r2, [r7, #4]
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	460b      	mov	r3, r1
 800b1d8:	72fb      	strb	r3, [r7, #11]
 800b1da:	4613      	mov	r3, r2
 800b1dc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b1ec:	893b      	ldrh	r3, [r7, #8]
 800b1ee:	7af9      	ldrb	r1, [r7, #11]
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	f7f9 faa3 	bl	800473c <HAL_PCD_EP_Transmit>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1fa:	7dfb      	ldrb	r3, [r7, #23]
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f000 f85d 	bl	800b2bc <USBD_Get_USB_Status>
 800b202:	4603      	mov	r3, r0
 800b204:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b206:	7dbb      	ldrb	r3, [r7, #22]
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3718      	adds	r7, #24
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b086      	sub	sp, #24
 800b214:	af00      	add	r7, sp, #0
 800b216:	60f8      	str	r0, [r7, #12]
 800b218:	607a      	str	r2, [r7, #4]
 800b21a:	461a      	mov	r2, r3
 800b21c:	460b      	mov	r3, r1
 800b21e:	72fb      	strb	r3, [r7, #11]
 800b220:	4613      	mov	r3, r2
 800b222:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b224:	2300      	movs	r3, #0
 800b226:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b228:	2300      	movs	r3, #0
 800b22a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b232:	893b      	ldrh	r3, [r7, #8]
 800b234:	7af9      	ldrb	r1, [r7, #11]
 800b236:	687a      	ldr	r2, [r7, #4]
 800b238:	f7f9 fa2c 	bl	8004694 <HAL_PCD_EP_Receive>
 800b23c:	4603      	mov	r3, r0
 800b23e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b240:	7dfb      	ldrb	r3, [r7, #23]
 800b242:	4618      	mov	r0, r3
 800b244:	f000 f83a 	bl	800b2bc <USBD_Get_USB_Status>
 800b248:	4603      	mov	r3, r0
 800b24a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b24c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3718      	adds	r7, #24
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}

0800b256 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b256:	b580      	push	{r7, lr}
 800b258:	b082      	sub	sp, #8
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	6078      	str	r0, [r7, #4]
 800b25e:	460b      	mov	r3, r1
 800b260:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b268:	78fa      	ldrb	r2, [r7, #3]
 800b26a:	4611      	mov	r1, r2
 800b26c:	4618      	mov	r0, r3
 800b26e:	f7f9 fa4e 	bl	800470e <HAL_PCD_EP_GetRxCount>
 800b272:	4603      	mov	r3, r0
}
 800b274:	4618      	mov	r0, r3
 800b276:	3708      	adds	r7, #8
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b083      	sub	sp, #12
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b284:	4b02      	ldr	r3, [pc, #8]	; (800b290 <USBD_static_malloc+0x14>)
}
 800b286:	4618      	mov	r0, r3
 800b288:	370c      	adds	r7, #12
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bc80      	pop	{r7}
 800b28e:	4770      	bx	lr
 800b290:	2000028c 	.word	0x2000028c

0800b294 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]

}
 800b29c:	bf00      	nop
 800b29e:	370c      	adds	r7, #12
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bc80      	pop	{r7}
 800b2a4:	4770      	bx	lr

0800b2a6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2a6:	b480      	push	{r7}
 800b2a8:	b083      	sub	sp, #12
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b2b2:	bf00      	nop
 800b2b4:	370c      	adds	r7, #12
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bc80      	pop	{r7}
 800b2ba:	4770      	bx	lr

0800b2bc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b085      	sub	sp, #20
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b2ca:	79fb      	ldrb	r3, [r7, #7]
 800b2cc:	2b03      	cmp	r3, #3
 800b2ce:	d817      	bhi.n	800b300 <USBD_Get_USB_Status+0x44>
 800b2d0:	a201      	add	r2, pc, #4	; (adr r2, 800b2d8 <USBD_Get_USB_Status+0x1c>)
 800b2d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2d6:	bf00      	nop
 800b2d8:	0800b2e9 	.word	0x0800b2e9
 800b2dc:	0800b2ef 	.word	0x0800b2ef
 800b2e0:	0800b2f5 	.word	0x0800b2f5
 800b2e4:	0800b2fb 	.word	0x0800b2fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	73fb      	strb	r3, [r7, #15]
    break;
 800b2ec:	e00b      	b.n	800b306 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b2ee:	2302      	movs	r3, #2
 800b2f0:	73fb      	strb	r3, [r7, #15]
    break;
 800b2f2:	e008      	b.n	800b306 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	73fb      	strb	r3, [r7, #15]
    break;
 800b2f8:	e005      	b.n	800b306 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b2fa:	2302      	movs	r3, #2
 800b2fc:	73fb      	strb	r3, [r7, #15]
    break;
 800b2fe:	e002      	b.n	800b306 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b300:	2302      	movs	r3, #2
 800b302:	73fb      	strb	r3, [r7, #15]
    break;
 800b304:	bf00      	nop
  }
  return usb_status;
 800b306:	7bfb      	ldrb	r3, [r7, #15]
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3714      	adds	r7, #20
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bc80      	pop	{r7}
 800b310:	4770      	bx	lr
 800b312:	bf00      	nop

0800b314 <__errno>:
 800b314:	4b01      	ldr	r3, [pc, #4]	; (800b31c <__errno+0x8>)
 800b316:	6818      	ldr	r0, [r3, #0]
 800b318:	4770      	bx	lr
 800b31a:	bf00      	nop
 800b31c:	2000018c 	.word	0x2000018c

0800b320 <__libc_init_array>:
 800b320:	b570      	push	{r4, r5, r6, lr}
 800b322:	2600      	movs	r6, #0
 800b324:	4d0c      	ldr	r5, [pc, #48]	; (800b358 <__libc_init_array+0x38>)
 800b326:	4c0d      	ldr	r4, [pc, #52]	; (800b35c <__libc_init_array+0x3c>)
 800b328:	1b64      	subs	r4, r4, r5
 800b32a:	10a4      	asrs	r4, r4, #2
 800b32c:	42a6      	cmp	r6, r4
 800b32e:	d109      	bne.n	800b344 <__libc_init_array+0x24>
 800b330:	f001 fa32 	bl	800c798 <_init>
 800b334:	2600      	movs	r6, #0
 800b336:	4d0a      	ldr	r5, [pc, #40]	; (800b360 <__libc_init_array+0x40>)
 800b338:	4c0a      	ldr	r4, [pc, #40]	; (800b364 <__libc_init_array+0x44>)
 800b33a:	1b64      	subs	r4, r4, r5
 800b33c:	10a4      	asrs	r4, r4, #2
 800b33e:	42a6      	cmp	r6, r4
 800b340:	d105      	bne.n	800b34e <__libc_init_array+0x2e>
 800b342:	bd70      	pop	{r4, r5, r6, pc}
 800b344:	f855 3b04 	ldr.w	r3, [r5], #4
 800b348:	4798      	blx	r3
 800b34a:	3601      	adds	r6, #1
 800b34c:	e7ee      	b.n	800b32c <__libc_init_array+0xc>
 800b34e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b352:	4798      	blx	r3
 800b354:	3601      	adds	r6, #1
 800b356:	e7f2      	b.n	800b33e <__libc_init_array+0x1e>
 800b358:	0800c990 	.word	0x0800c990
 800b35c:	0800c990 	.word	0x0800c990
 800b360:	0800c990 	.word	0x0800c990
 800b364:	0800c994 	.word	0x0800c994

0800b368 <__itoa>:
 800b368:	1e93      	subs	r3, r2, #2
 800b36a:	2b22      	cmp	r3, #34	; 0x22
 800b36c:	b510      	push	{r4, lr}
 800b36e:	460c      	mov	r4, r1
 800b370:	d904      	bls.n	800b37c <__itoa+0x14>
 800b372:	2300      	movs	r3, #0
 800b374:	461c      	mov	r4, r3
 800b376:	700b      	strb	r3, [r1, #0]
 800b378:	4620      	mov	r0, r4
 800b37a:	bd10      	pop	{r4, pc}
 800b37c:	2a0a      	cmp	r2, #10
 800b37e:	d109      	bne.n	800b394 <__itoa+0x2c>
 800b380:	2800      	cmp	r0, #0
 800b382:	da07      	bge.n	800b394 <__itoa+0x2c>
 800b384:	232d      	movs	r3, #45	; 0x2d
 800b386:	700b      	strb	r3, [r1, #0]
 800b388:	2101      	movs	r1, #1
 800b38a:	4240      	negs	r0, r0
 800b38c:	4421      	add	r1, r4
 800b38e:	f000 f853 	bl	800b438 <__utoa>
 800b392:	e7f1      	b.n	800b378 <__itoa+0x10>
 800b394:	2100      	movs	r1, #0
 800b396:	e7f9      	b.n	800b38c <__itoa+0x24>

0800b398 <itoa>:
 800b398:	f7ff bfe6 	b.w	800b368 <__itoa>

0800b39c <memcpy>:
 800b39c:	440a      	add	r2, r1
 800b39e:	4291      	cmp	r1, r2
 800b3a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3a4:	d100      	bne.n	800b3a8 <memcpy+0xc>
 800b3a6:	4770      	bx	lr
 800b3a8:	b510      	push	{r4, lr}
 800b3aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3ae:	4291      	cmp	r1, r2
 800b3b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3b4:	d1f9      	bne.n	800b3aa <memcpy+0xe>
 800b3b6:	bd10      	pop	{r4, pc}

0800b3b8 <memset>:
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	4402      	add	r2, r0
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d100      	bne.n	800b3c2 <memset+0xa>
 800b3c0:	4770      	bx	lr
 800b3c2:	f803 1b01 	strb.w	r1, [r3], #1
 800b3c6:	e7f9      	b.n	800b3bc <memset+0x4>

0800b3c8 <iprintf>:
 800b3c8:	b40f      	push	{r0, r1, r2, r3}
 800b3ca:	4b0a      	ldr	r3, [pc, #40]	; (800b3f4 <iprintf+0x2c>)
 800b3cc:	b513      	push	{r0, r1, r4, lr}
 800b3ce:	681c      	ldr	r4, [r3, #0]
 800b3d0:	b124      	cbz	r4, 800b3dc <iprintf+0x14>
 800b3d2:	69a3      	ldr	r3, [r4, #24]
 800b3d4:	b913      	cbnz	r3, 800b3dc <iprintf+0x14>
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f000 f8c8 	bl	800b56c <__sinit>
 800b3dc:	ab05      	add	r3, sp, #20
 800b3de:	4620      	mov	r0, r4
 800b3e0:	9a04      	ldr	r2, [sp, #16]
 800b3e2:	68a1      	ldr	r1, [r4, #8]
 800b3e4:	9301      	str	r3, [sp, #4]
 800b3e6:	f000 fb3f 	bl	800ba68 <_vfiprintf_r>
 800b3ea:	b002      	add	sp, #8
 800b3ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3f0:	b004      	add	sp, #16
 800b3f2:	4770      	bx	lr
 800b3f4:	2000018c 	.word	0x2000018c

0800b3f8 <siprintf>:
 800b3f8:	b40e      	push	{r1, r2, r3}
 800b3fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b3fe:	b500      	push	{lr}
 800b400:	b09c      	sub	sp, #112	; 0x70
 800b402:	ab1d      	add	r3, sp, #116	; 0x74
 800b404:	9002      	str	r0, [sp, #8]
 800b406:	9006      	str	r0, [sp, #24]
 800b408:	9107      	str	r1, [sp, #28]
 800b40a:	9104      	str	r1, [sp, #16]
 800b40c:	4808      	ldr	r0, [pc, #32]	; (800b430 <siprintf+0x38>)
 800b40e:	4909      	ldr	r1, [pc, #36]	; (800b434 <siprintf+0x3c>)
 800b410:	f853 2b04 	ldr.w	r2, [r3], #4
 800b414:	9105      	str	r1, [sp, #20]
 800b416:	6800      	ldr	r0, [r0, #0]
 800b418:	a902      	add	r1, sp, #8
 800b41a:	9301      	str	r3, [sp, #4]
 800b41c:	f000 f9fc 	bl	800b818 <_svfiprintf_r>
 800b420:	2200      	movs	r2, #0
 800b422:	9b02      	ldr	r3, [sp, #8]
 800b424:	701a      	strb	r2, [r3, #0]
 800b426:	b01c      	add	sp, #112	; 0x70
 800b428:	f85d eb04 	ldr.w	lr, [sp], #4
 800b42c:	b003      	add	sp, #12
 800b42e:	4770      	bx	lr
 800b430:	2000018c 	.word	0x2000018c
 800b434:	ffff0208 	.word	0xffff0208

0800b438 <__utoa>:
 800b438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b43a:	b08b      	sub	sp, #44	; 0x2c
 800b43c:	4605      	mov	r5, r0
 800b43e:	460b      	mov	r3, r1
 800b440:	466e      	mov	r6, sp
 800b442:	4c1d      	ldr	r4, [pc, #116]	; (800b4b8 <__utoa+0x80>)
 800b444:	f104 0c20 	add.w	ip, r4, #32
 800b448:	4637      	mov	r7, r6
 800b44a:	6820      	ldr	r0, [r4, #0]
 800b44c:	6861      	ldr	r1, [r4, #4]
 800b44e:	3408      	adds	r4, #8
 800b450:	c703      	stmia	r7!, {r0, r1}
 800b452:	4564      	cmp	r4, ip
 800b454:	463e      	mov	r6, r7
 800b456:	d1f7      	bne.n	800b448 <__utoa+0x10>
 800b458:	7921      	ldrb	r1, [r4, #4]
 800b45a:	6820      	ldr	r0, [r4, #0]
 800b45c:	7139      	strb	r1, [r7, #4]
 800b45e:	1e91      	subs	r1, r2, #2
 800b460:	2922      	cmp	r1, #34	; 0x22
 800b462:	6038      	str	r0, [r7, #0]
 800b464:	f04f 0100 	mov.w	r1, #0
 800b468:	d904      	bls.n	800b474 <__utoa+0x3c>
 800b46a:	7019      	strb	r1, [r3, #0]
 800b46c:	460b      	mov	r3, r1
 800b46e:	4618      	mov	r0, r3
 800b470:	b00b      	add	sp, #44	; 0x2c
 800b472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b474:	1e58      	subs	r0, r3, #1
 800b476:	4684      	mov	ip, r0
 800b478:	fbb5 f7f2 	udiv	r7, r5, r2
 800b47c:	fb02 5617 	mls	r6, r2, r7, r5
 800b480:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800b484:	4476      	add	r6, lr
 800b486:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800b48a:	460c      	mov	r4, r1
 800b48c:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800b490:	462e      	mov	r6, r5
 800b492:	42b2      	cmp	r2, r6
 800b494:	463d      	mov	r5, r7
 800b496:	f101 0101 	add.w	r1, r1, #1
 800b49a:	d9ed      	bls.n	800b478 <__utoa+0x40>
 800b49c:	2200      	movs	r2, #0
 800b49e:	545a      	strb	r2, [r3, r1]
 800b4a0:	1919      	adds	r1, r3, r4
 800b4a2:	1aa5      	subs	r5, r4, r2
 800b4a4:	42aa      	cmp	r2, r5
 800b4a6:	dae2      	bge.n	800b46e <__utoa+0x36>
 800b4a8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b4ac:	780e      	ldrb	r6, [r1, #0]
 800b4ae:	3201      	adds	r2, #1
 800b4b0:	7006      	strb	r6, [r0, #0]
 800b4b2:	f801 5901 	strb.w	r5, [r1], #-1
 800b4b6:	e7f4      	b.n	800b4a2 <__utoa+0x6a>
 800b4b8:	0800c8d4 	.word	0x0800c8d4

0800b4bc <std>:
 800b4bc:	2300      	movs	r3, #0
 800b4be:	b510      	push	{r4, lr}
 800b4c0:	4604      	mov	r4, r0
 800b4c2:	e9c0 3300 	strd	r3, r3, [r0]
 800b4c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b4ca:	6083      	str	r3, [r0, #8]
 800b4cc:	8181      	strh	r1, [r0, #12]
 800b4ce:	6643      	str	r3, [r0, #100]	; 0x64
 800b4d0:	81c2      	strh	r2, [r0, #14]
 800b4d2:	6183      	str	r3, [r0, #24]
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	2208      	movs	r2, #8
 800b4d8:	305c      	adds	r0, #92	; 0x5c
 800b4da:	f7ff ff6d 	bl	800b3b8 <memset>
 800b4de:	4b05      	ldr	r3, [pc, #20]	; (800b4f4 <std+0x38>)
 800b4e0:	6224      	str	r4, [r4, #32]
 800b4e2:	6263      	str	r3, [r4, #36]	; 0x24
 800b4e4:	4b04      	ldr	r3, [pc, #16]	; (800b4f8 <std+0x3c>)
 800b4e6:	62a3      	str	r3, [r4, #40]	; 0x28
 800b4e8:	4b04      	ldr	r3, [pc, #16]	; (800b4fc <std+0x40>)
 800b4ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b4ec:	4b04      	ldr	r3, [pc, #16]	; (800b500 <std+0x44>)
 800b4ee:	6323      	str	r3, [r4, #48]	; 0x30
 800b4f0:	bd10      	pop	{r4, pc}
 800b4f2:	bf00      	nop
 800b4f4:	0800c015 	.word	0x0800c015
 800b4f8:	0800c037 	.word	0x0800c037
 800b4fc:	0800c06f 	.word	0x0800c06f
 800b500:	0800c093 	.word	0x0800c093

0800b504 <_cleanup_r>:
 800b504:	4901      	ldr	r1, [pc, #4]	; (800b50c <_cleanup_r+0x8>)
 800b506:	f000 b8af 	b.w	800b668 <_fwalk_reent>
 800b50a:	bf00      	nop
 800b50c:	0800c36d 	.word	0x0800c36d

0800b510 <__sfmoreglue>:
 800b510:	b570      	push	{r4, r5, r6, lr}
 800b512:	2568      	movs	r5, #104	; 0x68
 800b514:	1e4a      	subs	r2, r1, #1
 800b516:	4355      	muls	r5, r2
 800b518:	460e      	mov	r6, r1
 800b51a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b51e:	f000 f8c5 	bl	800b6ac <_malloc_r>
 800b522:	4604      	mov	r4, r0
 800b524:	b140      	cbz	r0, 800b538 <__sfmoreglue+0x28>
 800b526:	2100      	movs	r1, #0
 800b528:	e9c0 1600 	strd	r1, r6, [r0]
 800b52c:	300c      	adds	r0, #12
 800b52e:	60a0      	str	r0, [r4, #8]
 800b530:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b534:	f7ff ff40 	bl	800b3b8 <memset>
 800b538:	4620      	mov	r0, r4
 800b53a:	bd70      	pop	{r4, r5, r6, pc}

0800b53c <__sfp_lock_acquire>:
 800b53c:	4801      	ldr	r0, [pc, #4]	; (800b544 <__sfp_lock_acquire+0x8>)
 800b53e:	f000 b8b3 	b.w	800b6a8 <__retarget_lock_acquire_recursive>
 800b542:	bf00      	nop
 800b544:	200015b0 	.word	0x200015b0

0800b548 <__sfp_lock_release>:
 800b548:	4801      	ldr	r0, [pc, #4]	; (800b550 <__sfp_lock_release+0x8>)
 800b54a:	f000 b8ae 	b.w	800b6aa <__retarget_lock_release_recursive>
 800b54e:	bf00      	nop
 800b550:	200015b0 	.word	0x200015b0

0800b554 <__sinit_lock_acquire>:
 800b554:	4801      	ldr	r0, [pc, #4]	; (800b55c <__sinit_lock_acquire+0x8>)
 800b556:	f000 b8a7 	b.w	800b6a8 <__retarget_lock_acquire_recursive>
 800b55a:	bf00      	nop
 800b55c:	200015ab 	.word	0x200015ab

0800b560 <__sinit_lock_release>:
 800b560:	4801      	ldr	r0, [pc, #4]	; (800b568 <__sinit_lock_release+0x8>)
 800b562:	f000 b8a2 	b.w	800b6aa <__retarget_lock_release_recursive>
 800b566:	bf00      	nop
 800b568:	200015ab 	.word	0x200015ab

0800b56c <__sinit>:
 800b56c:	b510      	push	{r4, lr}
 800b56e:	4604      	mov	r4, r0
 800b570:	f7ff fff0 	bl	800b554 <__sinit_lock_acquire>
 800b574:	69a3      	ldr	r3, [r4, #24]
 800b576:	b11b      	cbz	r3, 800b580 <__sinit+0x14>
 800b578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b57c:	f7ff bff0 	b.w	800b560 <__sinit_lock_release>
 800b580:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b584:	6523      	str	r3, [r4, #80]	; 0x50
 800b586:	4b13      	ldr	r3, [pc, #76]	; (800b5d4 <__sinit+0x68>)
 800b588:	4a13      	ldr	r2, [pc, #76]	; (800b5d8 <__sinit+0x6c>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b58e:	42a3      	cmp	r3, r4
 800b590:	bf08      	it	eq
 800b592:	2301      	moveq	r3, #1
 800b594:	4620      	mov	r0, r4
 800b596:	bf08      	it	eq
 800b598:	61a3      	streq	r3, [r4, #24]
 800b59a:	f000 f81f 	bl	800b5dc <__sfp>
 800b59e:	6060      	str	r0, [r4, #4]
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	f000 f81b 	bl	800b5dc <__sfp>
 800b5a6:	60a0      	str	r0, [r4, #8]
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f000 f817 	bl	800b5dc <__sfp>
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	2104      	movs	r1, #4
 800b5b2:	60e0      	str	r0, [r4, #12]
 800b5b4:	6860      	ldr	r0, [r4, #4]
 800b5b6:	f7ff ff81 	bl	800b4bc <std>
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	2109      	movs	r1, #9
 800b5be:	68a0      	ldr	r0, [r4, #8]
 800b5c0:	f7ff ff7c 	bl	800b4bc <std>
 800b5c4:	2202      	movs	r2, #2
 800b5c6:	2112      	movs	r1, #18
 800b5c8:	68e0      	ldr	r0, [r4, #12]
 800b5ca:	f7ff ff77 	bl	800b4bc <std>
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	61a3      	str	r3, [r4, #24]
 800b5d2:	e7d1      	b.n	800b578 <__sinit+0xc>
 800b5d4:	0800c8d0 	.word	0x0800c8d0
 800b5d8:	0800b505 	.word	0x0800b505

0800b5dc <__sfp>:
 800b5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5de:	4607      	mov	r7, r0
 800b5e0:	f7ff ffac 	bl	800b53c <__sfp_lock_acquire>
 800b5e4:	4b1e      	ldr	r3, [pc, #120]	; (800b660 <__sfp+0x84>)
 800b5e6:	681e      	ldr	r6, [r3, #0]
 800b5e8:	69b3      	ldr	r3, [r6, #24]
 800b5ea:	b913      	cbnz	r3, 800b5f2 <__sfp+0x16>
 800b5ec:	4630      	mov	r0, r6
 800b5ee:	f7ff ffbd 	bl	800b56c <__sinit>
 800b5f2:	3648      	adds	r6, #72	; 0x48
 800b5f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b5f8:	3b01      	subs	r3, #1
 800b5fa:	d503      	bpl.n	800b604 <__sfp+0x28>
 800b5fc:	6833      	ldr	r3, [r6, #0]
 800b5fe:	b30b      	cbz	r3, 800b644 <__sfp+0x68>
 800b600:	6836      	ldr	r6, [r6, #0]
 800b602:	e7f7      	b.n	800b5f4 <__sfp+0x18>
 800b604:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b608:	b9d5      	cbnz	r5, 800b640 <__sfp+0x64>
 800b60a:	4b16      	ldr	r3, [pc, #88]	; (800b664 <__sfp+0x88>)
 800b60c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b610:	60e3      	str	r3, [r4, #12]
 800b612:	6665      	str	r5, [r4, #100]	; 0x64
 800b614:	f000 f847 	bl	800b6a6 <__retarget_lock_init_recursive>
 800b618:	f7ff ff96 	bl	800b548 <__sfp_lock_release>
 800b61c:	2208      	movs	r2, #8
 800b61e:	4629      	mov	r1, r5
 800b620:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b624:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b628:	6025      	str	r5, [r4, #0]
 800b62a:	61a5      	str	r5, [r4, #24]
 800b62c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b630:	f7ff fec2 	bl	800b3b8 <memset>
 800b634:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b638:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b63c:	4620      	mov	r0, r4
 800b63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b640:	3468      	adds	r4, #104	; 0x68
 800b642:	e7d9      	b.n	800b5f8 <__sfp+0x1c>
 800b644:	2104      	movs	r1, #4
 800b646:	4638      	mov	r0, r7
 800b648:	f7ff ff62 	bl	800b510 <__sfmoreglue>
 800b64c:	4604      	mov	r4, r0
 800b64e:	6030      	str	r0, [r6, #0]
 800b650:	2800      	cmp	r0, #0
 800b652:	d1d5      	bne.n	800b600 <__sfp+0x24>
 800b654:	f7ff ff78 	bl	800b548 <__sfp_lock_release>
 800b658:	230c      	movs	r3, #12
 800b65a:	603b      	str	r3, [r7, #0]
 800b65c:	e7ee      	b.n	800b63c <__sfp+0x60>
 800b65e:	bf00      	nop
 800b660:	0800c8d0 	.word	0x0800c8d0
 800b664:	ffff0001 	.word	0xffff0001

0800b668 <_fwalk_reent>:
 800b668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b66c:	4606      	mov	r6, r0
 800b66e:	4688      	mov	r8, r1
 800b670:	2700      	movs	r7, #0
 800b672:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b676:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b67a:	f1b9 0901 	subs.w	r9, r9, #1
 800b67e:	d505      	bpl.n	800b68c <_fwalk_reent+0x24>
 800b680:	6824      	ldr	r4, [r4, #0]
 800b682:	2c00      	cmp	r4, #0
 800b684:	d1f7      	bne.n	800b676 <_fwalk_reent+0xe>
 800b686:	4638      	mov	r0, r7
 800b688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b68c:	89ab      	ldrh	r3, [r5, #12]
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d907      	bls.n	800b6a2 <_fwalk_reent+0x3a>
 800b692:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b696:	3301      	adds	r3, #1
 800b698:	d003      	beq.n	800b6a2 <_fwalk_reent+0x3a>
 800b69a:	4629      	mov	r1, r5
 800b69c:	4630      	mov	r0, r6
 800b69e:	47c0      	blx	r8
 800b6a0:	4307      	orrs	r7, r0
 800b6a2:	3568      	adds	r5, #104	; 0x68
 800b6a4:	e7e9      	b.n	800b67a <_fwalk_reent+0x12>

0800b6a6 <__retarget_lock_init_recursive>:
 800b6a6:	4770      	bx	lr

0800b6a8 <__retarget_lock_acquire_recursive>:
 800b6a8:	4770      	bx	lr

0800b6aa <__retarget_lock_release_recursive>:
 800b6aa:	4770      	bx	lr

0800b6ac <_malloc_r>:
 800b6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ae:	1ccd      	adds	r5, r1, #3
 800b6b0:	f025 0503 	bic.w	r5, r5, #3
 800b6b4:	3508      	adds	r5, #8
 800b6b6:	2d0c      	cmp	r5, #12
 800b6b8:	bf38      	it	cc
 800b6ba:	250c      	movcc	r5, #12
 800b6bc:	2d00      	cmp	r5, #0
 800b6be:	4606      	mov	r6, r0
 800b6c0:	db01      	blt.n	800b6c6 <_malloc_r+0x1a>
 800b6c2:	42a9      	cmp	r1, r5
 800b6c4:	d903      	bls.n	800b6ce <_malloc_r+0x22>
 800b6c6:	230c      	movs	r3, #12
 800b6c8:	6033      	str	r3, [r6, #0]
 800b6ca:	2000      	movs	r0, #0
 800b6cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6ce:	f000 ff27 	bl	800c520 <__malloc_lock>
 800b6d2:	4921      	ldr	r1, [pc, #132]	; (800b758 <_malloc_r+0xac>)
 800b6d4:	680a      	ldr	r2, [r1, #0]
 800b6d6:	4614      	mov	r4, r2
 800b6d8:	b99c      	cbnz	r4, 800b702 <_malloc_r+0x56>
 800b6da:	4f20      	ldr	r7, [pc, #128]	; (800b75c <_malloc_r+0xb0>)
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	b923      	cbnz	r3, 800b6ea <_malloc_r+0x3e>
 800b6e0:	4621      	mov	r1, r4
 800b6e2:	4630      	mov	r0, r6
 800b6e4:	f000 fc86 	bl	800bff4 <_sbrk_r>
 800b6e8:	6038      	str	r0, [r7, #0]
 800b6ea:	4629      	mov	r1, r5
 800b6ec:	4630      	mov	r0, r6
 800b6ee:	f000 fc81 	bl	800bff4 <_sbrk_r>
 800b6f2:	1c43      	adds	r3, r0, #1
 800b6f4:	d123      	bne.n	800b73e <_malloc_r+0x92>
 800b6f6:	230c      	movs	r3, #12
 800b6f8:	4630      	mov	r0, r6
 800b6fa:	6033      	str	r3, [r6, #0]
 800b6fc:	f000 ff16 	bl	800c52c <__malloc_unlock>
 800b700:	e7e3      	b.n	800b6ca <_malloc_r+0x1e>
 800b702:	6823      	ldr	r3, [r4, #0]
 800b704:	1b5b      	subs	r3, r3, r5
 800b706:	d417      	bmi.n	800b738 <_malloc_r+0x8c>
 800b708:	2b0b      	cmp	r3, #11
 800b70a:	d903      	bls.n	800b714 <_malloc_r+0x68>
 800b70c:	6023      	str	r3, [r4, #0]
 800b70e:	441c      	add	r4, r3
 800b710:	6025      	str	r5, [r4, #0]
 800b712:	e004      	b.n	800b71e <_malloc_r+0x72>
 800b714:	6863      	ldr	r3, [r4, #4]
 800b716:	42a2      	cmp	r2, r4
 800b718:	bf0c      	ite	eq
 800b71a:	600b      	streq	r3, [r1, #0]
 800b71c:	6053      	strne	r3, [r2, #4]
 800b71e:	4630      	mov	r0, r6
 800b720:	f000 ff04 	bl	800c52c <__malloc_unlock>
 800b724:	f104 000b 	add.w	r0, r4, #11
 800b728:	1d23      	adds	r3, r4, #4
 800b72a:	f020 0007 	bic.w	r0, r0, #7
 800b72e:	1ac2      	subs	r2, r0, r3
 800b730:	d0cc      	beq.n	800b6cc <_malloc_r+0x20>
 800b732:	1a1b      	subs	r3, r3, r0
 800b734:	50a3      	str	r3, [r4, r2]
 800b736:	e7c9      	b.n	800b6cc <_malloc_r+0x20>
 800b738:	4622      	mov	r2, r4
 800b73a:	6864      	ldr	r4, [r4, #4]
 800b73c:	e7cc      	b.n	800b6d8 <_malloc_r+0x2c>
 800b73e:	1cc4      	adds	r4, r0, #3
 800b740:	f024 0403 	bic.w	r4, r4, #3
 800b744:	42a0      	cmp	r0, r4
 800b746:	d0e3      	beq.n	800b710 <_malloc_r+0x64>
 800b748:	1a21      	subs	r1, r4, r0
 800b74a:	4630      	mov	r0, r6
 800b74c:	f000 fc52 	bl	800bff4 <_sbrk_r>
 800b750:	3001      	adds	r0, #1
 800b752:	d1dd      	bne.n	800b710 <_malloc_r+0x64>
 800b754:	e7cf      	b.n	800b6f6 <_malloc_r+0x4a>
 800b756:	bf00      	nop
 800b758:	200004ac 	.word	0x200004ac
 800b75c:	200004b0 	.word	0x200004b0

0800b760 <__ssputs_r>:
 800b760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b764:	688e      	ldr	r6, [r1, #8]
 800b766:	4682      	mov	sl, r0
 800b768:	429e      	cmp	r6, r3
 800b76a:	460c      	mov	r4, r1
 800b76c:	4690      	mov	r8, r2
 800b76e:	461f      	mov	r7, r3
 800b770:	d838      	bhi.n	800b7e4 <__ssputs_r+0x84>
 800b772:	898a      	ldrh	r2, [r1, #12]
 800b774:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b778:	d032      	beq.n	800b7e0 <__ssputs_r+0x80>
 800b77a:	6825      	ldr	r5, [r4, #0]
 800b77c:	6909      	ldr	r1, [r1, #16]
 800b77e:	3301      	adds	r3, #1
 800b780:	eba5 0901 	sub.w	r9, r5, r1
 800b784:	6965      	ldr	r5, [r4, #20]
 800b786:	444b      	add	r3, r9
 800b788:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b78c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b790:	106d      	asrs	r5, r5, #1
 800b792:	429d      	cmp	r5, r3
 800b794:	bf38      	it	cc
 800b796:	461d      	movcc	r5, r3
 800b798:	0553      	lsls	r3, r2, #21
 800b79a:	d531      	bpl.n	800b800 <__ssputs_r+0xa0>
 800b79c:	4629      	mov	r1, r5
 800b79e:	f7ff ff85 	bl	800b6ac <_malloc_r>
 800b7a2:	4606      	mov	r6, r0
 800b7a4:	b950      	cbnz	r0, 800b7bc <__ssputs_r+0x5c>
 800b7a6:	230c      	movs	r3, #12
 800b7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ac:	f8ca 3000 	str.w	r3, [sl]
 800b7b0:	89a3      	ldrh	r3, [r4, #12]
 800b7b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7b6:	81a3      	strh	r3, [r4, #12]
 800b7b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7bc:	464a      	mov	r2, r9
 800b7be:	6921      	ldr	r1, [r4, #16]
 800b7c0:	f7ff fdec 	bl	800b39c <memcpy>
 800b7c4:	89a3      	ldrh	r3, [r4, #12]
 800b7c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b7ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7ce:	81a3      	strh	r3, [r4, #12]
 800b7d0:	6126      	str	r6, [r4, #16]
 800b7d2:	444e      	add	r6, r9
 800b7d4:	6026      	str	r6, [r4, #0]
 800b7d6:	463e      	mov	r6, r7
 800b7d8:	6165      	str	r5, [r4, #20]
 800b7da:	eba5 0509 	sub.w	r5, r5, r9
 800b7de:	60a5      	str	r5, [r4, #8]
 800b7e0:	42be      	cmp	r6, r7
 800b7e2:	d900      	bls.n	800b7e6 <__ssputs_r+0x86>
 800b7e4:	463e      	mov	r6, r7
 800b7e6:	4632      	mov	r2, r6
 800b7e8:	4641      	mov	r1, r8
 800b7ea:	6820      	ldr	r0, [r4, #0]
 800b7ec:	f000 fe7e 	bl	800c4ec <memmove>
 800b7f0:	68a3      	ldr	r3, [r4, #8]
 800b7f2:	6822      	ldr	r2, [r4, #0]
 800b7f4:	1b9b      	subs	r3, r3, r6
 800b7f6:	4432      	add	r2, r6
 800b7f8:	2000      	movs	r0, #0
 800b7fa:	60a3      	str	r3, [r4, #8]
 800b7fc:	6022      	str	r2, [r4, #0]
 800b7fe:	e7db      	b.n	800b7b8 <__ssputs_r+0x58>
 800b800:	462a      	mov	r2, r5
 800b802:	f000 fee5 	bl	800c5d0 <_realloc_r>
 800b806:	4606      	mov	r6, r0
 800b808:	2800      	cmp	r0, #0
 800b80a:	d1e1      	bne.n	800b7d0 <__ssputs_r+0x70>
 800b80c:	4650      	mov	r0, sl
 800b80e:	6921      	ldr	r1, [r4, #16]
 800b810:	f000 fe92 	bl	800c538 <_free_r>
 800b814:	e7c7      	b.n	800b7a6 <__ssputs_r+0x46>
	...

0800b818 <_svfiprintf_r>:
 800b818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b81c:	4698      	mov	r8, r3
 800b81e:	898b      	ldrh	r3, [r1, #12]
 800b820:	4607      	mov	r7, r0
 800b822:	061b      	lsls	r3, r3, #24
 800b824:	460d      	mov	r5, r1
 800b826:	4614      	mov	r4, r2
 800b828:	b09d      	sub	sp, #116	; 0x74
 800b82a:	d50e      	bpl.n	800b84a <_svfiprintf_r+0x32>
 800b82c:	690b      	ldr	r3, [r1, #16]
 800b82e:	b963      	cbnz	r3, 800b84a <_svfiprintf_r+0x32>
 800b830:	2140      	movs	r1, #64	; 0x40
 800b832:	f7ff ff3b 	bl	800b6ac <_malloc_r>
 800b836:	6028      	str	r0, [r5, #0]
 800b838:	6128      	str	r0, [r5, #16]
 800b83a:	b920      	cbnz	r0, 800b846 <_svfiprintf_r+0x2e>
 800b83c:	230c      	movs	r3, #12
 800b83e:	603b      	str	r3, [r7, #0]
 800b840:	f04f 30ff 	mov.w	r0, #4294967295
 800b844:	e0d1      	b.n	800b9ea <_svfiprintf_r+0x1d2>
 800b846:	2340      	movs	r3, #64	; 0x40
 800b848:	616b      	str	r3, [r5, #20]
 800b84a:	2300      	movs	r3, #0
 800b84c:	9309      	str	r3, [sp, #36]	; 0x24
 800b84e:	2320      	movs	r3, #32
 800b850:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b854:	2330      	movs	r3, #48	; 0x30
 800b856:	f04f 0901 	mov.w	r9, #1
 800b85a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b85e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ba04 <_svfiprintf_r+0x1ec>
 800b862:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b866:	4623      	mov	r3, r4
 800b868:	469a      	mov	sl, r3
 800b86a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b86e:	b10a      	cbz	r2, 800b874 <_svfiprintf_r+0x5c>
 800b870:	2a25      	cmp	r2, #37	; 0x25
 800b872:	d1f9      	bne.n	800b868 <_svfiprintf_r+0x50>
 800b874:	ebba 0b04 	subs.w	fp, sl, r4
 800b878:	d00b      	beq.n	800b892 <_svfiprintf_r+0x7a>
 800b87a:	465b      	mov	r3, fp
 800b87c:	4622      	mov	r2, r4
 800b87e:	4629      	mov	r1, r5
 800b880:	4638      	mov	r0, r7
 800b882:	f7ff ff6d 	bl	800b760 <__ssputs_r>
 800b886:	3001      	adds	r0, #1
 800b888:	f000 80aa 	beq.w	800b9e0 <_svfiprintf_r+0x1c8>
 800b88c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b88e:	445a      	add	r2, fp
 800b890:	9209      	str	r2, [sp, #36]	; 0x24
 800b892:	f89a 3000 	ldrb.w	r3, [sl]
 800b896:	2b00      	cmp	r3, #0
 800b898:	f000 80a2 	beq.w	800b9e0 <_svfiprintf_r+0x1c8>
 800b89c:	2300      	movs	r3, #0
 800b89e:	f04f 32ff 	mov.w	r2, #4294967295
 800b8a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8a6:	f10a 0a01 	add.w	sl, sl, #1
 800b8aa:	9304      	str	r3, [sp, #16]
 800b8ac:	9307      	str	r3, [sp, #28]
 800b8ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8b2:	931a      	str	r3, [sp, #104]	; 0x68
 800b8b4:	4654      	mov	r4, sl
 800b8b6:	2205      	movs	r2, #5
 800b8b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8bc:	4851      	ldr	r0, [pc, #324]	; (800ba04 <_svfiprintf_r+0x1ec>)
 800b8be:	f000 fe07 	bl	800c4d0 <memchr>
 800b8c2:	9a04      	ldr	r2, [sp, #16]
 800b8c4:	b9d8      	cbnz	r0, 800b8fe <_svfiprintf_r+0xe6>
 800b8c6:	06d0      	lsls	r0, r2, #27
 800b8c8:	bf44      	itt	mi
 800b8ca:	2320      	movmi	r3, #32
 800b8cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8d0:	0711      	lsls	r1, r2, #28
 800b8d2:	bf44      	itt	mi
 800b8d4:	232b      	movmi	r3, #43	; 0x2b
 800b8d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8da:	f89a 3000 	ldrb.w	r3, [sl]
 800b8de:	2b2a      	cmp	r3, #42	; 0x2a
 800b8e0:	d015      	beq.n	800b90e <_svfiprintf_r+0xf6>
 800b8e2:	4654      	mov	r4, sl
 800b8e4:	2000      	movs	r0, #0
 800b8e6:	f04f 0c0a 	mov.w	ip, #10
 800b8ea:	9a07      	ldr	r2, [sp, #28]
 800b8ec:	4621      	mov	r1, r4
 800b8ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8f2:	3b30      	subs	r3, #48	; 0x30
 800b8f4:	2b09      	cmp	r3, #9
 800b8f6:	d94e      	bls.n	800b996 <_svfiprintf_r+0x17e>
 800b8f8:	b1b0      	cbz	r0, 800b928 <_svfiprintf_r+0x110>
 800b8fa:	9207      	str	r2, [sp, #28]
 800b8fc:	e014      	b.n	800b928 <_svfiprintf_r+0x110>
 800b8fe:	eba0 0308 	sub.w	r3, r0, r8
 800b902:	fa09 f303 	lsl.w	r3, r9, r3
 800b906:	4313      	orrs	r3, r2
 800b908:	46a2      	mov	sl, r4
 800b90a:	9304      	str	r3, [sp, #16]
 800b90c:	e7d2      	b.n	800b8b4 <_svfiprintf_r+0x9c>
 800b90e:	9b03      	ldr	r3, [sp, #12]
 800b910:	1d19      	adds	r1, r3, #4
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	9103      	str	r1, [sp, #12]
 800b916:	2b00      	cmp	r3, #0
 800b918:	bfbb      	ittet	lt
 800b91a:	425b      	neglt	r3, r3
 800b91c:	f042 0202 	orrlt.w	r2, r2, #2
 800b920:	9307      	strge	r3, [sp, #28]
 800b922:	9307      	strlt	r3, [sp, #28]
 800b924:	bfb8      	it	lt
 800b926:	9204      	strlt	r2, [sp, #16]
 800b928:	7823      	ldrb	r3, [r4, #0]
 800b92a:	2b2e      	cmp	r3, #46	; 0x2e
 800b92c:	d10c      	bne.n	800b948 <_svfiprintf_r+0x130>
 800b92e:	7863      	ldrb	r3, [r4, #1]
 800b930:	2b2a      	cmp	r3, #42	; 0x2a
 800b932:	d135      	bne.n	800b9a0 <_svfiprintf_r+0x188>
 800b934:	9b03      	ldr	r3, [sp, #12]
 800b936:	3402      	adds	r4, #2
 800b938:	1d1a      	adds	r2, r3, #4
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	9203      	str	r2, [sp, #12]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	bfb8      	it	lt
 800b942:	f04f 33ff 	movlt.w	r3, #4294967295
 800b946:	9305      	str	r3, [sp, #20]
 800b948:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ba14 <_svfiprintf_r+0x1fc>
 800b94c:	2203      	movs	r2, #3
 800b94e:	4650      	mov	r0, sl
 800b950:	7821      	ldrb	r1, [r4, #0]
 800b952:	f000 fdbd 	bl	800c4d0 <memchr>
 800b956:	b140      	cbz	r0, 800b96a <_svfiprintf_r+0x152>
 800b958:	2340      	movs	r3, #64	; 0x40
 800b95a:	eba0 000a 	sub.w	r0, r0, sl
 800b95e:	fa03 f000 	lsl.w	r0, r3, r0
 800b962:	9b04      	ldr	r3, [sp, #16]
 800b964:	3401      	adds	r4, #1
 800b966:	4303      	orrs	r3, r0
 800b968:	9304      	str	r3, [sp, #16]
 800b96a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b96e:	2206      	movs	r2, #6
 800b970:	4825      	ldr	r0, [pc, #148]	; (800ba08 <_svfiprintf_r+0x1f0>)
 800b972:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b976:	f000 fdab 	bl	800c4d0 <memchr>
 800b97a:	2800      	cmp	r0, #0
 800b97c:	d038      	beq.n	800b9f0 <_svfiprintf_r+0x1d8>
 800b97e:	4b23      	ldr	r3, [pc, #140]	; (800ba0c <_svfiprintf_r+0x1f4>)
 800b980:	bb1b      	cbnz	r3, 800b9ca <_svfiprintf_r+0x1b2>
 800b982:	9b03      	ldr	r3, [sp, #12]
 800b984:	3307      	adds	r3, #7
 800b986:	f023 0307 	bic.w	r3, r3, #7
 800b98a:	3308      	adds	r3, #8
 800b98c:	9303      	str	r3, [sp, #12]
 800b98e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b990:	4433      	add	r3, r6
 800b992:	9309      	str	r3, [sp, #36]	; 0x24
 800b994:	e767      	b.n	800b866 <_svfiprintf_r+0x4e>
 800b996:	460c      	mov	r4, r1
 800b998:	2001      	movs	r0, #1
 800b99a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b99e:	e7a5      	b.n	800b8ec <_svfiprintf_r+0xd4>
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	f04f 0c0a 	mov.w	ip, #10
 800b9a6:	4619      	mov	r1, r3
 800b9a8:	3401      	adds	r4, #1
 800b9aa:	9305      	str	r3, [sp, #20]
 800b9ac:	4620      	mov	r0, r4
 800b9ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9b2:	3a30      	subs	r2, #48	; 0x30
 800b9b4:	2a09      	cmp	r2, #9
 800b9b6:	d903      	bls.n	800b9c0 <_svfiprintf_r+0x1a8>
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d0c5      	beq.n	800b948 <_svfiprintf_r+0x130>
 800b9bc:	9105      	str	r1, [sp, #20]
 800b9be:	e7c3      	b.n	800b948 <_svfiprintf_r+0x130>
 800b9c0:	4604      	mov	r4, r0
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9c8:	e7f0      	b.n	800b9ac <_svfiprintf_r+0x194>
 800b9ca:	ab03      	add	r3, sp, #12
 800b9cc:	9300      	str	r3, [sp, #0]
 800b9ce:	462a      	mov	r2, r5
 800b9d0:	4638      	mov	r0, r7
 800b9d2:	4b0f      	ldr	r3, [pc, #60]	; (800ba10 <_svfiprintf_r+0x1f8>)
 800b9d4:	a904      	add	r1, sp, #16
 800b9d6:	f3af 8000 	nop.w
 800b9da:	1c42      	adds	r2, r0, #1
 800b9dc:	4606      	mov	r6, r0
 800b9de:	d1d6      	bne.n	800b98e <_svfiprintf_r+0x176>
 800b9e0:	89ab      	ldrh	r3, [r5, #12]
 800b9e2:	065b      	lsls	r3, r3, #25
 800b9e4:	f53f af2c 	bmi.w	800b840 <_svfiprintf_r+0x28>
 800b9e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9ea:	b01d      	add	sp, #116	; 0x74
 800b9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9f0:	ab03      	add	r3, sp, #12
 800b9f2:	9300      	str	r3, [sp, #0]
 800b9f4:	462a      	mov	r2, r5
 800b9f6:	4638      	mov	r0, r7
 800b9f8:	4b05      	ldr	r3, [pc, #20]	; (800ba10 <_svfiprintf_r+0x1f8>)
 800b9fa:	a904      	add	r1, sp, #16
 800b9fc:	f000 f9d4 	bl	800bda8 <_printf_i>
 800ba00:	e7eb      	b.n	800b9da <_svfiprintf_r+0x1c2>
 800ba02:	bf00      	nop
 800ba04:	0800c95c 	.word	0x0800c95c
 800ba08:	0800c966 	.word	0x0800c966
 800ba0c:	00000000 	.word	0x00000000
 800ba10:	0800b761 	.word	0x0800b761
 800ba14:	0800c962 	.word	0x0800c962

0800ba18 <__sfputc_r>:
 800ba18:	6893      	ldr	r3, [r2, #8]
 800ba1a:	b410      	push	{r4}
 800ba1c:	3b01      	subs	r3, #1
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	6093      	str	r3, [r2, #8]
 800ba22:	da07      	bge.n	800ba34 <__sfputc_r+0x1c>
 800ba24:	6994      	ldr	r4, [r2, #24]
 800ba26:	42a3      	cmp	r3, r4
 800ba28:	db01      	blt.n	800ba2e <__sfputc_r+0x16>
 800ba2a:	290a      	cmp	r1, #10
 800ba2c:	d102      	bne.n	800ba34 <__sfputc_r+0x1c>
 800ba2e:	bc10      	pop	{r4}
 800ba30:	f000 bb34 	b.w	800c09c <__swbuf_r>
 800ba34:	6813      	ldr	r3, [r2, #0]
 800ba36:	1c58      	adds	r0, r3, #1
 800ba38:	6010      	str	r0, [r2, #0]
 800ba3a:	7019      	strb	r1, [r3, #0]
 800ba3c:	4608      	mov	r0, r1
 800ba3e:	bc10      	pop	{r4}
 800ba40:	4770      	bx	lr

0800ba42 <__sfputs_r>:
 800ba42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba44:	4606      	mov	r6, r0
 800ba46:	460f      	mov	r7, r1
 800ba48:	4614      	mov	r4, r2
 800ba4a:	18d5      	adds	r5, r2, r3
 800ba4c:	42ac      	cmp	r4, r5
 800ba4e:	d101      	bne.n	800ba54 <__sfputs_r+0x12>
 800ba50:	2000      	movs	r0, #0
 800ba52:	e007      	b.n	800ba64 <__sfputs_r+0x22>
 800ba54:	463a      	mov	r2, r7
 800ba56:	4630      	mov	r0, r6
 800ba58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba5c:	f7ff ffdc 	bl	800ba18 <__sfputc_r>
 800ba60:	1c43      	adds	r3, r0, #1
 800ba62:	d1f3      	bne.n	800ba4c <__sfputs_r+0xa>
 800ba64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba68 <_vfiprintf_r>:
 800ba68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba6c:	460d      	mov	r5, r1
 800ba6e:	4614      	mov	r4, r2
 800ba70:	4698      	mov	r8, r3
 800ba72:	4606      	mov	r6, r0
 800ba74:	b09d      	sub	sp, #116	; 0x74
 800ba76:	b118      	cbz	r0, 800ba80 <_vfiprintf_r+0x18>
 800ba78:	6983      	ldr	r3, [r0, #24]
 800ba7a:	b90b      	cbnz	r3, 800ba80 <_vfiprintf_r+0x18>
 800ba7c:	f7ff fd76 	bl	800b56c <__sinit>
 800ba80:	4b89      	ldr	r3, [pc, #548]	; (800bca8 <_vfiprintf_r+0x240>)
 800ba82:	429d      	cmp	r5, r3
 800ba84:	d11b      	bne.n	800babe <_vfiprintf_r+0x56>
 800ba86:	6875      	ldr	r5, [r6, #4]
 800ba88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba8a:	07d9      	lsls	r1, r3, #31
 800ba8c:	d405      	bmi.n	800ba9a <_vfiprintf_r+0x32>
 800ba8e:	89ab      	ldrh	r3, [r5, #12]
 800ba90:	059a      	lsls	r2, r3, #22
 800ba92:	d402      	bmi.n	800ba9a <_vfiprintf_r+0x32>
 800ba94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba96:	f7ff fe07 	bl	800b6a8 <__retarget_lock_acquire_recursive>
 800ba9a:	89ab      	ldrh	r3, [r5, #12]
 800ba9c:	071b      	lsls	r3, r3, #28
 800ba9e:	d501      	bpl.n	800baa4 <_vfiprintf_r+0x3c>
 800baa0:	692b      	ldr	r3, [r5, #16]
 800baa2:	b9eb      	cbnz	r3, 800bae0 <_vfiprintf_r+0x78>
 800baa4:	4629      	mov	r1, r5
 800baa6:	4630      	mov	r0, r6
 800baa8:	f000 fb5c 	bl	800c164 <__swsetup_r>
 800baac:	b1c0      	cbz	r0, 800bae0 <_vfiprintf_r+0x78>
 800baae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bab0:	07dc      	lsls	r4, r3, #31
 800bab2:	d50e      	bpl.n	800bad2 <_vfiprintf_r+0x6a>
 800bab4:	f04f 30ff 	mov.w	r0, #4294967295
 800bab8:	b01d      	add	sp, #116	; 0x74
 800baba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800babe:	4b7b      	ldr	r3, [pc, #492]	; (800bcac <_vfiprintf_r+0x244>)
 800bac0:	429d      	cmp	r5, r3
 800bac2:	d101      	bne.n	800bac8 <_vfiprintf_r+0x60>
 800bac4:	68b5      	ldr	r5, [r6, #8]
 800bac6:	e7df      	b.n	800ba88 <_vfiprintf_r+0x20>
 800bac8:	4b79      	ldr	r3, [pc, #484]	; (800bcb0 <_vfiprintf_r+0x248>)
 800baca:	429d      	cmp	r5, r3
 800bacc:	bf08      	it	eq
 800bace:	68f5      	ldreq	r5, [r6, #12]
 800bad0:	e7da      	b.n	800ba88 <_vfiprintf_r+0x20>
 800bad2:	89ab      	ldrh	r3, [r5, #12]
 800bad4:	0598      	lsls	r0, r3, #22
 800bad6:	d4ed      	bmi.n	800bab4 <_vfiprintf_r+0x4c>
 800bad8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bada:	f7ff fde6 	bl	800b6aa <__retarget_lock_release_recursive>
 800bade:	e7e9      	b.n	800bab4 <_vfiprintf_r+0x4c>
 800bae0:	2300      	movs	r3, #0
 800bae2:	9309      	str	r3, [sp, #36]	; 0x24
 800bae4:	2320      	movs	r3, #32
 800bae6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800baea:	2330      	movs	r3, #48	; 0x30
 800baec:	f04f 0901 	mov.w	r9, #1
 800baf0:	f8cd 800c 	str.w	r8, [sp, #12]
 800baf4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800bcb4 <_vfiprintf_r+0x24c>
 800baf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bafc:	4623      	mov	r3, r4
 800bafe:	469a      	mov	sl, r3
 800bb00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb04:	b10a      	cbz	r2, 800bb0a <_vfiprintf_r+0xa2>
 800bb06:	2a25      	cmp	r2, #37	; 0x25
 800bb08:	d1f9      	bne.n	800bafe <_vfiprintf_r+0x96>
 800bb0a:	ebba 0b04 	subs.w	fp, sl, r4
 800bb0e:	d00b      	beq.n	800bb28 <_vfiprintf_r+0xc0>
 800bb10:	465b      	mov	r3, fp
 800bb12:	4622      	mov	r2, r4
 800bb14:	4629      	mov	r1, r5
 800bb16:	4630      	mov	r0, r6
 800bb18:	f7ff ff93 	bl	800ba42 <__sfputs_r>
 800bb1c:	3001      	adds	r0, #1
 800bb1e:	f000 80aa 	beq.w	800bc76 <_vfiprintf_r+0x20e>
 800bb22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb24:	445a      	add	r2, fp
 800bb26:	9209      	str	r2, [sp, #36]	; 0x24
 800bb28:	f89a 3000 	ldrb.w	r3, [sl]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	f000 80a2 	beq.w	800bc76 <_vfiprintf_r+0x20e>
 800bb32:	2300      	movs	r3, #0
 800bb34:	f04f 32ff 	mov.w	r2, #4294967295
 800bb38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb3c:	f10a 0a01 	add.w	sl, sl, #1
 800bb40:	9304      	str	r3, [sp, #16]
 800bb42:	9307      	str	r3, [sp, #28]
 800bb44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb48:	931a      	str	r3, [sp, #104]	; 0x68
 800bb4a:	4654      	mov	r4, sl
 800bb4c:	2205      	movs	r2, #5
 800bb4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb52:	4858      	ldr	r0, [pc, #352]	; (800bcb4 <_vfiprintf_r+0x24c>)
 800bb54:	f000 fcbc 	bl	800c4d0 <memchr>
 800bb58:	9a04      	ldr	r2, [sp, #16]
 800bb5a:	b9d8      	cbnz	r0, 800bb94 <_vfiprintf_r+0x12c>
 800bb5c:	06d1      	lsls	r1, r2, #27
 800bb5e:	bf44      	itt	mi
 800bb60:	2320      	movmi	r3, #32
 800bb62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb66:	0713      	lsls	r3, r2, #28
 800bb68:	bf44      	itt	mi
 800bb6a:	232b      	movmi	r3, #43	; 0x2b
 800bb6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb70:	f89a 3000 	ldrb.w	r3, [sl]
 800bb74:	2b2a      	cmp	r3, #42	; 0x2a
 800bb76:	d015      	beq.n	800bba4 <_vfiprintf_r+0x13c>
 800bb78:	4654      	mov	r4, sl
 800bb7a:	2000      	movs	r0, #0
 800bb7c:	f04f 0c0a 	mov.w	ip, #10
 800bb80:	9a07      	ldr	r2, [sp, #28]
 800bb82:	4621      	mov	r1, r4
 800bb84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb88:	3b30      	subs	r3, #48	; 0x30
 800bb8a:	2b09      	cmp	r3, #9
 800bb8c:	d94e      	bls.n	800bc2c <_vfiprintf_r+0x1c4>
 800bb8e:	b1b0      	cbz	r0, 800bbbe <_vfiprintf_r+0x156>
 800bb90:	9207      	str	r2, [sp, #28]
 800bb92:	e014      	b.n	800bbbe <_vfiprintf_r+0x156>
 800bb94:	eba0 0308 	sub.w	r3, r0, r8
 800bb98:	fa09 f303 	lsl.w	r3, r9, r3
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	46a2      	mov	sl, r4
 800bba0:	9304      	str	r3, [sp, #16]
 800bba2:	e7d2      	b.n	800bb4a <_vfiprintf_r+0xe2>
 800bba4:	9b03      	ldr	r3, [sp, #12]
 800bba6:	1d19      	adds	r1, r3, #4
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	9103      	str	r1, [sp, #12]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	bfbb      	ittet	lt
 800bbb0:	425b      	neglt	r3, r3
 800bbb2:	f042 0202 	orrlt.w	r2, r2, #2
 800bbb6:	9307      	strge	r3, [sp, #28]
 800bbb8:	9307      	strlt	r3, [sp, #28]
 800bbba:	bfb8      	it	lt
 800bbbc:	9204      	strlt	r2, [sp, #16]
 800bbbe:	7823      	ldrb	r3, [r4, #0]
 800bbc0:	2b2e      	cmp	r3, #46	; 0x2e
 800bbc2:	d10c      	bne.n	800bbde <_vfiprintf_r+0x176>
 800bbc4:	7863      	ldrb	r3, [r4, #1]
 800bbc6:	2b2a      	cmp	r3, #42	; 0x2a
 800bbc8:	d135      	bne.n	800bc36 <_vfiprintf_r+0x1ce>
 800bbca:	9b03      	ldr	r3, [sp, #12]
 800bbcc:	3402      	adds	r4, #2
 800bbce:	1d1a      	adds	r2, r3, #4
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	9203      	str	r2, [sp, #12]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	bfb8      	it	lt
 800bbd8:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbdc:	9305      	str	r3, [sp, #20]
 800bbde:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bcc4 <_vfiprintf_r+0x25c>
 800bbe2:	2203      	movs	r2, #3
 800bbe4:	4650      	mov	r0, sl
 800bbe6:	7821      	ldrb	r1, [r4, #0]
 800bbe8:	f000 fc72 	bl	800c4d0 <memchr>
 800bbec:	b140      	cbz	r0, 800bc00 <_vfiprintf_r+0x198>
 800bbee:	2340      	movs	r3, #64	; 0x40
 800bbf0:	eba0 000a 	sub.w	r0, r0, sl
 800bbf4:	fa03 f000 	lsl.w	r0, r3, r0
 800bbf8:	9b04      	ldr	r3, [sp, #16]
 800bbfa:	3401      	adds	r4, #1
 800bbfc:	4303      	orrs	r3, r0
 800bbfe:	9304      	str	r3, [sp, #16]
 800bc00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc04:	2206      	movs	r2, #6
 800bc06:	482c      	ldr	r0, [pc, #176]	; (800bcb8 <_vfiprintf_r+0x250>)
 800bc08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc0c:	f000 fc60 	bl	800c4d0 <memchr>
 800bc10:	2800      	cmp	r0, #0
 800bc12:	d03f      	beq.n	800bc94 <_vfiprintf_r+0x22c>
 800bc14:	4b29      	ldr	r3, [pc, #164]	; (800bcbc <_vfiprintf_r+0x254>)
 800bc16:	bb1b      	cbnz	r3, 800bc60 <_vfiprintf_r+0x1f8>
 800bc18:	9b03      	ldr	r3, [sp, #12]
 800bc1a:	3307      	adds	r3, #7
 800bc1c:	f023 0307 	bic.w	r3, r3, #7
 800bc20:	3308      	adds	r3, #8
 800bc22:	9303      	str	r3, [sp, #12]
 800bc24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc26:	443b      	add	r3, r7
 800bc28:	9309      	str	r3, [sp, #36]	; 0x24
 800bc2a:	e767      	b.n	800bafc <_vfiprintf_r+0x94>
 800bc2c:	460c      	mov	r4, r1
 800bc2e:	2001      	movs	r0, #1
 800bc30:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc34:	e7a5      	b.n	800bb82 <_vfiprintf_r+0x11a>
 800bc36:	2300      	movs	r3, #0
 800bc38:	f04f 0c0a 	mov.w	ip, #10
 800bc3c:	4619      	mov	r1, r3
 800bc3e:	3401      	adds	r4, #1
 800bc40:	9305      	str	r3, [sp, #20]
 800bc42:	4620      	mov	r0, r4
 800bc44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc48:	3a30      	subs	r2, #48	; 0x30
 800bc4a:	2a09      	cmp	r2, #9
 800bc4c:	d903      	bls.n	800bc56 <_vfiprintf_r+0x1ee>
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d0c5      	beq.n	800bbde <_vfiprintf_r+0x176>
 800bc52:	9105      	str	r1, [sp, #20]
 800bc54:	e7c3      	b.n	800bbde <_vfiprintf_r+0x176>
 800bc56:	4604      	mov	r4, r0
 800bc58:	2301      	movs	r3, #1
 800bc5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc5e:	e7f0      	b.n	800bc42 <_vfiprintf_r+0x1da>
 800bc60:	ab03      	add	r3, sp, #12
 800bc62:	9300      	str	r3, [sp, #0]
 800bc64:	462a      	mov	r2, r5
 800bc66:	4630      	mov	r0, r6
 800bc68:	4b15      	ldr	r3, [pc, #84]	; (800bcc0 <_vfiprintf_r+0x258>)
 800bc6a:	a904      	add	r1, sp, #16
 800bc6c:	f3af 8000 	nop.w
 800bc70:	4607      	mov	r7, r0
 800bc72:	1c78      	adds	r0, r7, #1
 800bc74:	d1d6      	bne.n	800bc24 <_vfiprintf_r+0x1bc>
 800bc76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc78:	07d9      	lsls	r1, r3, #31
 800bc7a:	d405      	bmi.n	800bc88 <_vfiprintf_r+0x220>
 800bc7c:	89ab      	ldrh	r3, [r5, #12]
 800bc7e:	059a      	lsls	r2, r3, #22
 800bc80:	d402      	bmi.n	800bc88 <_vfiprintf_r+0x220>
 800bc82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc84:	f7ff fd11 	bl	800b6aa <__retarget_lock_release_recursive>
 800bc88:	89ab      	ldrh	r3, [r5, #12]
 800bc8a:	065b      	lsls	r3, r3, #25
 800bc8c:	f53f af12 	bmi.w	800bab4 <_vfiprintf_r+0x4c>
 800bc90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc92:	e711      	b.n	800bab8 <_vfiprintf_r+0x50>
 800bc94:	ab03      	add	r3, sp, #12
 800bc96:	9300      	str	r3, [sp, #0]
 800bc98:	462a      	mov	r2, r5
 800bc9a:	4630      	mov	r0, r6
 800bc9c:	4b08      	ldr	r3, [pc, #32]	; (800bcc0 <_vfiprintf_r+0x258>)
 800bc9e:	a904      	add	r1, sp, #16
 800bca0:	f000 f882 	bl	800bda8 <_printf_i>
 800bca4:	e7e4      	b.n	800bc70 <_vfiprintf_r+0x208>
 800bca6:	bf00      	nop
 800bca8:	0800c91c 	.word	0x0800c91c
 800bcac:	0800c93c 	.word	0x0800c93c
 800bcb0:	0800c8fc 	.word	0x0800c8fc
 800bcb4:	0800c95c 	.word	0x0800c95c
 800bcb8:	0800c966 	.word	0x0800c966
 800bcbc:	00000000 	.word	0x00000000
 800bcc0:	0800ba43 	.word	0x0800ba43
 800bcc4:	0800c962 	.word	0x0800c962

0800bcc8 <_printf_common>:
 800bcc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bccc:	4616      	mov	r6, r2
 800bcce:	4699      	mov	r9, r3
 800bcd0:	688a      	ldr	r2, [r1, #8]
 800bcd2:	690b      	ldr	r3, [r1, #16]
 800bcd4:	4607      	mov	r7, r0
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	bfb8      	it	lt
 800bcda:	4613      	movlt	r3, r2
 800bcdc:	6033      	str	r3, [r6, #0]
 800bcde:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bce2:	460c      	mov	r4, r1
 800bce4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bce8:	b10a      	cbz	r2, 800bcee <_printf_common+0x26>
 800bcea:	3301      	adds	r3, #1
 800bcec:	6033      	str	r3, [r6, #0]
 800bcee:	6823      	ldr	r3, [r4, #0]
 800bcf0:	0699      	lsls	r1, r3, #26
 800bcf2:	bf42      	ittt	mi
 800bcf4:	6833      	ldrmi	r3, [r6, #0]
 800bcf6:	3302      	addmi	r3, #2
 800bcf8:	6033      	strmi	r3, [r6, #0]
 800bcfa:	6825      	ldr	r5, [r4, #0]
 800bcfc:	f015 0506 	ands.w	r5, r5, #6
 800bd00:	d106      	bne.n	800bd10 <_printf_common+0x48>
 800bd02:	f104 0a19 	add.w	sl, r4, #25
 800bd06:	68e3      	ldr	r3, [r4, #12]
 800bd08:	6832      	ldr	r2, [r6, #0]
 800bd0a:	1a9b      	subs	r3, r3, r2
 800bd0c:	42ab      	cmp	r3, r5
 800bd0e:	dc28      	bgt.n	800bd62 <_printf_common+0x9a>
 800bd10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd14:	1e13      	subs	r3, r2, #0
 800bd16:	6822      	ldr	r2, [r4, #0]
 800bd18:	bf18      	it	ne
 800bd1a:	2301      	movne	r3, #1
 800bd1c:	0692      	lsls	r2, r2, #26
 800bd1e:	d42d      	bmi.n	800bd7c <_printf_common+0xb4>
 800bd20:	4649      	mov	r1, r9
 800bd22:	4638      	mov	r0, r7
 800bd24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd28:	47c0      	blx	r8
 800bd2a:	3001      	adds	r0, #1
 800bd2c:	d020      	beq.n	800bd70 <_printf_common+0xa8>
 800bd2e:	6823      	ldr	r3, [r4, #0]
 800bd30:	68e5      	ldr	r5, [r4, #12]
 800bd32:	f003 0306 	and.w	r3, r3, #6
 800bd36:	2b04      	cmp	r3, #4
 800bd38:	bf18      	it	ne
 800bd3a:	2500      	movne	r5, #0
 800bd3c:	6832      	ldr	r2, [r6, #0]
 800bd3e:	f04f 0600 	mov.w	r6, #0
 800bd42:	68a3      	ldr	r3, [r4, #8]
 800bd44:	bf08      	it	eq
 800bd46:	1aad      	subeq	r5, r5, r2
 800bd48:	6922      	ldr	r2, [r4, #16]
 800bd4a:	bf08      	it	eq
 800bd4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd50:	4293      	cmp	r3, r2
 800bd52:	bfc4      	itt	gt
 800bd54:	1a9b      	subgt	r3, r3, r2
 800bd56:	18ed      	addgt	r5, r5, r3
 800bd58:	341a      	adds	r4, #26
 800bd5a:	42b5      	cmp	r5, r6
 800bd5c:	d11a      	bne.n	800bd94 <_printf_common+0xcc>
 800bd5e:	2000      	movs	r0, #0
 800bd60:	e008      	b.n	800bd74 <_printf_common+0xac>
 800bd62:	2301      	movs	r3, #1
 800bd64:	4652      	mov	r2, sl
 800bd66:	4649      	mov	r1, r9
 800bd68:	4638      	mov	r0, r7
 800bd6a:	47c0      	blx	r8
 800bd6c:	3001      	adds	r0, #1
 800bd6e:	d103      	bne.n	800bd78 <_printf_common+0xb0>
 800bd70:	f04f 30ff 	mov.w	r0, #4294967295
 800bd74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd78:	3501      	adds	r5, #1
 800bd7a:	e7c4      	b.n	800bd06 <_printf_common+0x3e>
 800bd7c:	2030      	movs	r0, #48	; 0x30
 800bd7e:	18e1      	adds	r1, r4, r3
 800bd80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd84:	1c5a      	adds	r2, r3, #1
 800bd86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd8a:	4422      	add	r2, r4
 800bd8c:	3302      	adds	r3, #2
 800bd8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd92:	e7c5      	b.n	800bd20 <_printf_common+0x58>
 800bd94:	2301      	movs	r3, #1
 800bd96:	4622      	mov	r2, r4
 800bd98:	4649      	mov	r1, r9
 800bd9a:	4638      	mov	r0, r7
 800bd9c:	47c0      	blx	r8
 800bd9e:	3001      	adds	r0, #1
 800bda0:	d0e6      	beq.n	800bd70 <_printf_common+0xa8>
 800bda2:	3601      	adds	r6, #1
 800bda4:	e7d9      	b.n	800bd5a <_printf_common+0x92>
	...

0800bda8 <_printf_i>:
 800bda8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bdac:	460c      	mov	r4, r1
 800bdae:	7e27      	ldrb	r7, [r4, #24]
 800bdb0:	4691      	mov	r9, r2
 800bdb2:	2f78      	cmp	r7, #120	; 0x78
 800bdb4:	4680      	mov	r8, r0
 800bdb6:	469a      	mov	sl, r3
 800bdb8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bdba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bdbe:	d807      	bhi.n	800bdd0 <_printf_i+0x28>
 800bdc0:	2f62      	cmp	r7, #98	; 0x62
 800bdc2:	d80a      	bhi.n	800bdda <_printf_i+0x32>
 800bdc4:	2f00      	cmp	r7, #0
 800bdc6:	f000 80d9 	beq.w	800bf7c <_printf_i+0x1d4>
 800bdca:	2f58      	cmp	r7, #88	; 0x58
 800bdcc:	f000 80a4 	beq.w	800bf18 <_printf_i+0x170>
 800bdd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bdd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bdd8:	e03a      	b.n	800be50 <_printf_i+0xa8>
 800bdda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bdde:	2b15      	cmp	r3, #21
 800bde0:	d8f6      	bhi.n	800bdd0 <_printf_i+0x28>
 800bde2:	a001      	add	r0, pc, #4	; (adr r0, 800bde8 <_printf_i+0x40>)
 800bde4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bde8:	0800be41 	.word	0x0800be41
 800bdec:	0800be55 	.word	0x0800be55
 800bdf0:	0800bdd1 	.word	0x0800bdd1
 800bdf4:	0800bdd1 	.word	0x0800bdd1
 800bdf8:	0800bdd1 	.word	0x0800bdd1
 800bdfc:	0800bdd1 	.word	0x0800bdd1
 800be00:	0800be55 	.word	0x0800be55
 800be04:	0800bdd1 	.word	0x0800bdd1
 800be08:	0800bdd1 	.word	0x0800bdd1
 800be0c:	0800bdd1 	.word	0x0800bdd1
 800be10:	0800bdd1 	.word	0x0800bdd1
 800be14:	0800bf63 	.word	0x0800bf63
 800be18:	0800be85 	.word	0x0800be85
 800be1c:	0800bf45 	.word	0x0800bf45
 800be20:	0800bdd1 	.word	0x0800bdd1
 800be24:	0800bdd1 	.word	0x0800bdd1
 800be28:	0800bf85 	.word	0x0800bf85
 800be2c:	0800bdd1 	.word	0x0800bdd1
 800be30:	0800be85 	.word	0x0800be85
 800be34:	0800bdd1 	.word	0x0800bdd1
 800be38:	0800bdd1 	.word	0x0800bdd1
 800be3c:	0800bf4d 	.word	0x0800bf4d
 800be40:	680b      	ldr	r3, [r1, #0]
 800be42:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800be46:	1d1a      	adds	r2, r3, #4
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	600a      	str	r2, [r1, #0]
 800be4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be50:	2301      	movs	r3, #1
 800be52:	e0a4      	b.n	800bf9e <_printf_i+0x1f6>
 800be54:	6825      	ldr	r5, [r4, #0]
 800be56:	6808      	ldr	r0, [r1, #0]
 800be58:	062e      	lsls	r6, r5, #24
 800be5a:	f100 0304 	add.w	r3, r0, #4
 800be5e:	d50a      	bpl.n	800be76 <_printf_i+0xce>
 800be60:	6805      	ldr	r5, [r0, #0]
 800be62:	600b      	str	r3, [r1, #0]
 800be64:	2d00      	cmp	r5, #0
 800be66:	da03      	bge.n	800be70 <_printf_i+0xc8>
 800be68:	232d      	movs	r3, #45	; 0x2d
 800be6a:	426d      	negs	r5, r5
 800be6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be70:	230a      	movs	r3, #10
 800be72:	485e      	ldr	r0, [pc, #376]	; (800bfec <_printf_i+0x244>)
 800be74:	e019      	b.n	800beaa <_printf_i+0x102>
 800be76:	f015 0f40 	tst.w	r5, #64	; 0x40
 800be7a:	6805      	ldr	r5, [r0, #0]
 800be7c:	600b      	str	r3, [r1, #0]
 800be7e:	bf18      	it	ne
 800be80:	b22d      	sxthne	r5, r5
 800be82:	e7ef      	b.n	800be64 <_printf_i+0xbc>
 800be84:	680b      	ldr	r3, [r1, #0]
 800be86:	6825      	ldr	r5, [r4, #0]
 800be88:	1d18      	adds	r0, r3, #4
 800be8a:	6008      	str	r0, [r1, #0]
 800be8c:	0628      	lsls	r0, r5, #24
 800be8e:	d501      	bpl.n	800be94 <_printf_i+0xec>
 800be90:	681d      	ldr	r5, [r3, #0]
 800be92:	e002      	b.n	800be9a <_printf_i+0xf2>
 800be94:	0669      	lsls	r1, r5, #25
 800be96:	d5fb      	bpl.n	800be90 <_printf_i+0xe8>
 800be98:	881d      	ldrh	r5, [r3, #0]
 800be9a:	2f6f      	cmp	r7, #111	; 0x6f
 800be9c:	bf0c      	ite	eq
 800be9e:	2308      	moveq	r3, #8
 800bea0:	230a      	movne	r3, #10
 800bea2:	4852      	ldr	r0, [pc, #328]	; (800bfec <_printf_i+0x244>)
 800bea4:	2100      	movs	r1, #0
 800bea6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800beaa:	6866      	ldr	r6, [r4, #4]
 800beac:	2e00      	cmp	r6, #0
 800beae:	bfa8      	it	ge
 800beb0:	6821      	ldrge	r1, [r4, #0]
 800beb2:	60a6      	str	r6, [r4, #8]
 800beb4:	bfa4      	itt	ge
 800beb6:	f021 0104 	bicge.w	r1, r1, #4
 800beba:	6021      	strge	r1, [r4, #0]
 800bebc:	b90d      	cbnz	r5, 800bec2 <_printf_i+0x11a>
 800bebe:	2e00      	cmp	r6, #0
 800bec0:	d04d      	beq.n	800bf5e <_printf_i+0x1b6>
 800bec2:	4616      	mov	r6, r2
 800bec4:	fbb5 f1f3 	udiv	r1, r5, r3
 800bec8:	fb03 5711 	mls	r7, r3, r1, r5
 800becc:	5dc7      	ldrb	r7, [r0, r7]
 800bece:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bed2:	462f      	mov	r7, r5
 800bed4:	42bb      	cmp	r3, r7
 800bed6:	460d      	mov	r5, r1
 800bed8:	d9f4      	bls.n	800bec4 <_printf_i+0x11c>
 800beda:	2b08      	cmp	r3, #8
 800bedc:	d10b      	bne.n	800bef6 <_printf_i+0x14e>
 800bede:	6823      	ldr	r3, [r4, #0]
 800bee0:	07df      	lsls	r7, r3, #31
 800bee2:	d508      	bpl.n	800bef6 <_printf_i+0x14e>
 800bee4:	6923      	ldr	r3, [r4, #16]
 800bee6:	6861      	ldr	r1, [r4, #4]
 800bee8:	4299      	cmp	r1, r3
 800beea:	bfde      	ittt	le
 800beec:	2330      	movle	r3, #48	; 0x30
 800beee:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bef2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bef6:	1b92      	subs	r2, r2, r6
 800bef8:	6122      	str	r2, [r4, #16]
 800befa:	464b      	mov	r3, r9
 800befc:	4621      	mov	r1, r4
 800befe:	4640      	mov	r0, r8
 800bf00:	f8cd a000 	str.w	sl, [sp]
 800bf04:	aa03      	add	r2, sp, #12
 800bf06:	f7ff fedf 	bl	800bcc8 <_printf_common>
 800bf0a:	3001      	adds	r0, #1
 800bf0c:	d14c      	bne.n	800bfa8 <_printf_i+0x200>
 800bf0e:	f04f 30ff 	mov.w	r0, #4294967295
 800bf12:	b004      	add	sp, #16
 800bf14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf18:	4834      	ldr	r0, [pc, #208]	; (800bfec <_printf_i+0x244>)
 800bf1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bf1e:	680e      	ldr	r6, [r1, #0]
 800bf20:	6823      	ldr	r3, [r4, #0]
 800bf22:	f856 5b04 	ldr.w	r5, [r6], #4
 800bf26:	061f      	lsls	r7, r3, #24
 800bf28:	600e      	str	r6, [r1, #0]
 800bf2a:	d514      	bpl.n	800bf56 <_printf_i+0x1ae>
 800bf2c:	07d9      	lsls	r1, r3, #31
 800bf2e:	bf44      	itt	mi
 800bf30:	f043 0320 	orrmi.w	r3, r3, #32
 800bf34:	6023      	strmi	r3, [r4, #0]
 800bf36:	b91d      	cbnz	r5, 800bf40 <_printf_i+0x198>
 800bf38:	6823      	ldr	r3, [r4, #0]
 800bf3a:	f023 0320 	bic.w	r3, r3, #32
 800bf3e:	6023      	str	r3, [r4, #0]
 800bf40:	2310      	movs	r3, #16
 800bf42:	e7af      	b.n	800bea4 <_printf_i+0xfc>
 800bf44:	6823      	ldr	r3, [r4, #0]
 800bf46:	f043 0320 	orr.w	r3, r3, #32
 800bf4a:	6023      	str	r3, [r4, #0]
 800bf4c:	2378      	movs	r3, #120	; 0x78
 800bf4e:	4828      	ldr	r0, [pc, #160]	; (800bff0 <_printf_i+0x248>)
 800bf50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bf54:	e7e3      	b.n	800bf1e <_printf_i+0x176>
 800bf56:	065e      	lsls	r6, r3, #25
 800bf58:	bf48      	it	mi
 800bf5a:	b2ad      	uxthmi	r5, r5
 800bf5c:	e7e6      	b.n	800bf2c <_printf_i+0x184>
 800bf5e:	4616      	mov	r6, r2
 800bf60:	e7bb      	b.n	800beda <_printf_i+0x132>
 800bf62:	680b      	ldr	r3, [r1, #0]
 800bf64:	6826      	ldr	r6, [r4, #0]
 800bf66:	1d1d      	adds	r5, r3, #4
 800bf68:	6960      	ldr	r0, [r4, #20]
 800bf6a:	600d      	str	r5, [r1, #0]
 800bf6c:	0635      	lsls	r5, r6, #24
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	d501      	bpl.n	800bf76 <_printf_i+0x1ce>
 800bf72:	6018      	str	r0, [r3, #0]
 800bf74:	e002      	b.n	800bf7c <_printf_i+0x1d4>
 800bf76:	0671      	lsls	r1, r6, #25
 800bf78:	d5fb      	bpl.n	800bf72 <_printf_i+0x1ca>
 800bf7a:	8018      	strh	r0, [r3, #0]
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	4616      	mov	r6, r2
 800bf80:	6123      	str	r3, [r4, #16]
 800bf82:	e7ba      	b.n	800befa <_printf_i+0x152>
 800bf84:	680b      	ldr	r3, [r1, #0]
 800bf86:	1d1a      	adds	r2, r3, #4
 800bf88:	600a      	str	r2, [r1, #0]
 800bf8a:	681e      	ldr	r6, [r3, #0]
 800bf8c:	2100      	movs	r1, #0
 800bf8e:	4630      	mov	r0, r6
 800bf90:	6862      	ldr	r2, [r4, #4]
 800bf92:	f000 fa9d 	bl	800c4d0 <memchr>
 800bf96:	b108      	cbz	r0, 800bf9c <_printf_i+0x1f4>
 800bf98:	1b80      	subs	r0, r0, r6
 800bf9a:	6060      	str	r0, [r4, #4]
 800bf9c:	6863      	ldr	r3, [r4, #4]
 800bf9e:	6123      	str	r3, [r4, #16]
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfa6:	e7a8      	b.n	800befa <_printf_i+0x152>
 800bfa8:	4632      	mov	r2, r6
 800bfaa:	4649      	mov	r1, r9
 800bfac:	4640      	mov	r0, r8
 800bfae:	6923      	ldr	r3, [r4, #16]
 800bfb0:	47d0      	blx	sl
 800bfb2:	3001      	adds	r0, #1
 800bfb4:	d0ab      	beq.n	800bf0e <_printf_i+0x166>
 800bfb6:	6823      	ldr	r3, [r4, #0]
 800bfb8:	079b      	lsls	r3, r3, #30
 800bfba:	d413      	bmi.n	800bfe4 <_printf_i+0x23c>
 800bfbc:	68e0      	ldr	r0, [r4, #12]
 800bfbe:	9b03      	ldr	r3, [sp, #12]
 800bfc0:	4298      	cmp	r0, r3
 800bfc2:	bfb8      	it	lt
 800bfc4:	4618      	movlt	r0, r3
 800bfc6:	e7a4      	b.n	800bf12 <_printf_i+0x16a>
 800bfc8:	2301      	movs	r3, #1
 800bfca:	4632      	mov	r2, r6
 800bfcc:	4649      	mov	r1, r9
 800bfce:	4640      	mov	r0, r8
 800bfd0:	47d0      	blx	sl
 800bfd2:	3001      	adds	r0, #1
 800bfd4:	d09b      	beq.n	800bf0e <_printf_i+0x166>
 800bfd6:	3501      	adds	r5, #1
 800bfd8:	68e3      	ldr	r3, [r4, #12]
 800bfda:	9903      	ldr	r1, [sp, #12]
 800bfdc:	1a5b      	subs	r3, r3, r1
 800bfde:	42ab      	cmp	r3, r5
 800bfe0:	dcf2      	bgt.n	800bfc8 <_printf_i+0x220>
 800bfe2:	e7eb      	b.n	800bfbc <_printf_i+0x214>
 800bfe4:	2500      	movs	r5, #0
 800bfe6:	f104 0619 	add.w	r6, r4, #25
 800bfea:	e7f5      	b.n	800bfd8 <_printf_i+0x230>
 800bfec:	0800c96d 	.word	0x0800c96d
 800bff0:	0800c97e 	.word	0x0800c97e

0800bff4 <_sbrk_r>:
 800bff4:	b538      	push	{r3, r4, r5, lr}
 800bff6:	2300      	movs	r3, #0
 800bff8:	4d05      	ldr	r5, [pc, #20]	; (800c010 <_sbrk_r+0x1c>)
 800bffa:	4604      	mov	r4, r0
 800bffc:	4608      	mov	r0, r1
 800bffe:	602b      	str	r3, [r5, #0]
 800c000:	f7f6 fd44 	bl	8002a8c <_sbrk>
 800c004:	1c43      	adds	r3, r0, #1
 800c006:	d102      	bne.n	800c00e <_sbrk_r+0x1a>
 800c008:	682b      	ldr	r3, [r5, #0]
 800c00a:	b103      	cbz	r3, 800c00e <_sbrk_r+0x1a>
 800c00c:	6023      	str	r3, [r4, #0]
 800c00e:	bd38      	pop	{r3, r4, r5, pc}
 800c010:	200015b4 	.word	0x200015b4

0800c014 <__sread>:
 800c014:	b510      	push	{r4, lr}
 800c016:	460c      	mov	r4, r1
 800c018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c01c:	f000 fafe 	bl	800c61c <_read_r>
 800c020:	2800      	cmp	r0, #0
 800c022:	bfab      	itete	ge
 800c024:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c026:	89a3      	ldrhlt	r3, [r4, #12]
 800c028:	181b      	addge	r3, r3, r0
 800c02a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c02e:	bfac      	ite	ge
 800c030:	6563      	strge	r3, [r4, #84]	; 0x54
 800c032:	81a3      	strhlt	r3, [r4, #12]
 800c034:	bd10      	pop	{r4, pc}

0800c036 <__swrite>:
 800c036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c03a:	461f      	mov	r7, r3
 800c03c:	898b      	ldrh	r3, [r1, #12]
 800c03e:	4605      	mov	r5, r0
 800c040:	05db      	lsls	r3, r3, #23
 800c042:	460c      	mov	r4, r1
 800c044:	4616      	mov	r6, r2
 800c046:	d505      	bpl.n	800c054 <__swrite+0x1e>
 800c048:	2302      	movs	r3, #2
 800c04a:	2200      	movs	r2, #0
 800c04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c050:	f000 f9c8 	bl	800c3e4 <_lseek_r>
 800c054:	89a3      	ldrh	r3, [r4, #12]
 800c056:	4632      	mov	r2, r6
 800c058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c05c:	81a3      	strh	r3, [r4, #12]
 800c05e:	4628      	mov	r0, r5
 800c060:	463b      	mov	r3, r7
 800c062:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c06a:	f000 b869 	b.w	800c140 <_write_r>

0800c06e <__sseek>:
 800c06e:	b510      	push	{r4, lr}
 800c070:	460c      	mov	r4, r1
 800c072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c076:	f000 f9b5 	bl	800c3e4 <_lseek_r>
 800c07a:	1c43      	adds	r3, r0, #1
 800c07c:	89a3      	ldrh	r3, [r4, #12]
 800c07e:	bf15      	itete	ne
 800c080:	6560      	strne	r0, [r4, #84]	; 0x54
 800c082:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c086:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c08a:	81a3      	strheq	r3, [r4, #12]
 800c08c:	bf18      	it	ne
 800c08e:	81a3      	strhne	r3, [r4, #12]
 800c090:	bd10      	pop	{r4, pc}

0800c092 <__sclose>:
 800c092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c096:	f000 b8d3 	b.w	800c240 <_close_r>
	...

0800c09c <__swbuf_r>:
 800c09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c09e:	460e      	mov	r6, r1
 800c0a0:	4614      	mov	r4, r2
 800c0a2:	4605      	mov	r5, r0
 800c0a4:	b118      	cbz	r0, 800c0ae <__swbuf_r+0x12>
 800c0a6:	6983      	ldr	r3, [r0, #24]
 800c0a8:	b90b      	cbnz	r3, 800c0ae <__swbuf_r+0x12>
 800c0aa:	f7ff fa5f 	bl	800b56c <__sinit>
 800c0ae:	4b21      	ldr	r3, [pc, #132]	; (800c134 <__swbuf_r+0x98>)
 800c0b0:	429c      	cmp	r4, r3
 800c0b2:	d12b      	bne.n	800c10c <__swbuf_r+0x70>
 800c0b4:	686c      	ldr	r4, [r5, #4]
 800c0b6:	69a3      	ldr	r3, [r4, #24]
 800c0b8:	60a3      	str	r3, [r4, #8]
 800c0ba:	89a3      	ldrh	r3, [r4, #12]
 800c0bc:	071a      	lsls	r2, r3, #28
 800c0be:	d52f      	bpl.n	800c120 <__swbuf_r+0x84>
 800c0c0:	6923      	ldr	r3, [r4, #16]
 800c0c2:	b36b      	cbz	r3, 800c120 <__swbuf_r+0x84>
 800c0c4:	6923      	ldr	r3, [r4, #16]
 800c0c6:	6820      	ldr	r0, [r4, #0]
 800c0c8:	b2f6      	uxtb	r6, r6
 800c0ca:	1ac0      	subs	r0, r0, r3
 800c0cc:	6963      	ldr	r3, [r4, #20]
 800c0ce:	4637      	mov	r7, r6
 800c0d0:	4283      	cmp	r3, r0
 800c0d2:	dc04      	bgt.n	800c0de <__swbuf_r+0x42>
 800c0d4:	4621      	mov	r1, r4
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	f000 f948 	bl	800c36c <_fflush_r>
 800c0dc:	bb30      	cbnz	r0, 800c12c <__swbuf_r+0x90>
 800c0de:	68a3      	ldr	r3, [r4, #8]
 800c0e0:	3001      	adds	r0, #1
 800c0e2:	3b01      	subs	r3, #1
 800c0e4:	60a3      	str	r3, [r4, #8]
 800c0e6:	6823      	ldr	r3, [r4, #0]
 800c0e8:	1c5a      	adds	r2, r3, #1
 800c0ea:	6022      	str	r2, [r4, #0]
 800c0ec:	701e      	strb	r6, [r3, #0]
 800c0ee:	6963      	ldr	r3, [r4, #20]
 800c0f0:	4283      	cmp	r3, r0
 800c0f2:	d004      	beq.n	800c0fe <__swbuf_r+0x62>
 800c0f4:	89a3      	ldrh	r3, [r4, #12]
 800c0f6:	07db      	lsls	r3, r3, #31
 800c0f8:	d506      	bpl.n	800c108 <__swbuf_r+0x6c>
 800c0fa:	2e0a      	cmp	r6, #10
 800c0fc:	d104      	bne.n	800c108 <__swbuf_r+0x6c>
 800c0fe:	4621      	mov	r1, r4
 800c100:	4628      	mov	r0, r5
 800c102:	f000 f933 	bl	800c36c <_fflush_r>
 800c106:	b988      	cbnz	r0, 800c12c <__swbuf_r+0x90>
 800c108:	4638      	mov	r0, r7
 800c10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c10c:	4b0a      	ldr	r3, [pc, #40]	; (800c138 <__swbuf_r+0x9c>)
 800c10e:	429c      	cmp	r4, r3
 800c110:	d101      	bne.n	800c116 <__swbuf_r+0x7a>
 800c112:	68ac      	ldr	r4, [r5, #8]
 800c114:	e7cf      	b.n	800c0b6 <__swbuf_r+0x1a>
 800c116:	4b09      	ldr	r3, [pc, #36]	; (800c13c <__swbuf_r+0xa0>)
 800c118:	429c      	cmp	r4, r3
 800c11a:	bf08      	it	eq
 800c11c:	68ec      	ldreq	r4, [r5, #12]
 800c11e:	e7ca      	b.n	800c0b6 <__swbuf_r+0x1a>
 800c120:	4621      	mov	r1, r4
 800c122:	4628      	mov	r0, r5
 800c124:	f000 f81e 	bl	800c164 <__swsetup_r>
 800c128:	2800      	cmp	r0, #0
 800c12a:	d0cb      	beq.n	800c0c4 <__swbuf_r+0x28>
 800c12c:	f04f 37ff 	mov.w	r7, #4294967295
 800c130:	e7ea      	b.n	800c108 <__swbuf_r+0x6c>
 800c132:	bf00      	nop
 800c134:	0800c91c 	.word	0x0800c91c
 800c138:	0800c93c 	.word	0x0800c93c
 800c13c:	0800c8fc 	.word	0x0800c8fc

0800c140 <_write_r>:
 800c140:	b538      	push	{r3, r4, r5, lr}
 800c142:	4604      	mov	r4, r0
 800c144:	4608      	mov	r0, r1
 800c146:	4611      	mov	r1, r2
 800c148:	2200      	movs	r2, #0
 800c14a:	4d05      	ldr	r5, [pc, #20]	; (800c160 <_write_r+0x20>)
 800c14c:	602a      	str	r2, [r5, #0]
 800c14e:	461a      	mov	r2, r3
 800c150:	f7f4 fece 	bl	8000ef0 <_write>
 800c154:	1c43      	adds	r3, r0, #1
 800c156:	d102      	bne.n	800c15e <_write_r+0x1e>
 800c158:	682b      	ldr	r3, [r5, #0]
 800c15a:	b103      	cbz	r3, 800c15e <_write_r+0x1e>
 800c15c:	6023      	str	r3, [r4, #0]
 800c15e:	bd38      	pop	{r3, r4, r5, pc}
 800c160:	200015b4 	.word	0x200015b4

0800c164 <__swsetup_r>:
 800c164:	4b32      	ldr	r3, [pc, #200]	; (800c230 <__swsetup_r+0xcc>)
 800c166:	b570      	push	{r4, r5, r6, lr}
 800c168:	681d      	ldr	r5, [r3, #0]
 800c16a:	4606      	mov	r6, r0
 800c16c:	460c      	mov	r4, r1
 800c16e:	b125      	cbz	r5, 800c17a <__swsetup_r+0x16>
 800c170:	69ab      	ldr	r3, [r5, #24]
 800c172:	b913      	cbnz	r3, 800c17a <__swsetup_r+0x16>
 800c174:	4628      	mov	r0, r5
 800c176:	f7ff f9f9 	bl	800b56c <__sinit>
 800c17a:	4b2e      	ldr	r3, [pc, #184]	; (800c234 <__swsetup_r+0xd0>)
 800c17c:	429c      	cmp	r4, r3
 800c17e:	d10f      	bne.n	800c1a0 <__swsetup_r+0x3c>
 800c180:	686c      	ldr	r4, [r5, #4]
 800c182:	89a3      	ldrh	r3, [r4, #12]
 800c184:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c188:	0719      	lsls	r1, r3, #28
 800c18a:	d42c      	bmi.n	800c1e6 <__swsetup_r+0x82>
 800c18c:	06dd      	lsls	r5, r3, #27
 800c18e:	d411      	bmi.n	800c1b4 <__swsetup_r+0x50>
 800c190:	2309      	movs	r3, #9
 800c192:	6033      	str	r3, [r6, #0]
 800c194:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c198:	f04f 30ff 	mov.w	r0, #4294967295
 800c19c:	81a3      	strh	r3, [r4, #12]
 800c19e:	e03e      	b.n	800c21e <__swsetup_r+0xba>
 800c1a0:	4b25      	ldr	r3, [pc, #148]	; (800c238 <__swsetup_r+0xd4>)
 800c1a2:	429c      	cmp	r4, r3
 800c1a4:	d101      	bne.n	800c1aa <__swsetup_r+0x46>
 800c1a6:	68ac      	ldr	r4, [r5, #8]
 800c1a8:	e7eb      	b.n	800c182 <__swsetup_r+0x1e>
 800c1aa:	4b24      	ldr	r3, [pc, #144]	; (800c23c <__swsetup_r+0xd8>)
 800c1ac:	429c      	cmp	r4, r3
 800c1ae:	bf08      	it	eq
 800c1b0:	68ec      	ldreq	r4, [r5, #12]
 800c1b2:	e7e6      	b.n	800c182 <__swsetup_r+0x1e>
 800c1b4:	0758      	lsls	r0, r3, #29
 800c1b6:	d512      	bpl.n	800c1de <__swsetup_r+0x7a>
 800c1b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1ba:	b141      	cbz	r1, 800c1ce <__swsetup_r+0x6a>
 800c1bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1c0:	4299      	cmp	r1, r3
 800c1c2:	d002      	beq.n	800c1ca <__swsetup_r+0x66>
 800c1c4:	4630      	mov	r0, r6
 800c1c6:	f000 f9b7 	bl	800c538 <_free_r>
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	6363      	str	r3, [r4, #52]	; 0x34
 800c1ce:	89a3      	ldrh	r3, [r4, #12]
 800c1d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c1d4:	81a3      	strh	r3, [r4, #12]
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	6063      	str	r3, [r4, #4]
 800c1da:	6923      	ldr	r3, [r4, #16]
 800c1dc:	6023      	str	r3, [r4, #0]
 800c1de:	89a3      	ldrh	r3, [r4, #12]
 800c1e0:	f043 0308 	orr.w	r3, r3, #8
 800c1e4:	81a3      	strh	r3, [r4, #12]
 800c1e6:	6923      	ldr	r3, [r4, #16]
 800c1e8:	b94b      	cbnz	r3, 800c1fe <__swsetup_r+0x9a>
 800c1ea:	89a3      	ldrh	r3, [r4, #12]
 800c1ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c1f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1f4:	d003      	beq.n	800c1fe <__swsetup_r+0x9a>
 800c1f6:	4621      	mov	r1, r4
 800c1f8:	4630      	mov	r0, r6
 800c1fa:	f000 f929 	bl	800c450 <__smakebuf_r>
 800c1fe:	89a0      	ldrh	r0, [r4, #12]
 800c200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c204:	f010 0301 	ands.w	r3, r0, #1
 800c208:	d00a      	beq.n	800c220 <__swsetup_r+0xbc>
 800c20a:	2300      	movs	r3, #0
 800c20c:	60a3      	str	r3, [r4, #8]
 800c20e:	6963      	ldr	r3, [r4, #20]
 800c210:	425b      	negs	r3, r3
 800c212:	61a3      	str	r3, [r4, #24]
 800c214:	6923      	ldr	r3, [r4, #16]
 800c216:	b943      	cbnz	r3, 800c22a <__swsetup_r+0xc6>
 800c218:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c21c:	d1ba      	bne.n	800c194 <__swsetup_r+0x30>
 800c21e:	bd70      	pop	{r4, r5, r6, pc}
 800c220:	0781      	lsls	r1, r0, #30
 800c222:	bf58      	it	pl
 800c224:	6963      	ldrpl	r3, [r4, #20]
 800c226:	60a3      	str	r3, [r4, #8]
 800c228:	e7f4      	b.n	800c214 <__swsetup_r+0xb0>
 800c22a:	2000      	movs	r0, #0
 800c22c:	e7f7      	b.n	800c21e <__swsetup_r+0xba>
 800c22e:	bf00      	nop
 800c230:	2000018c 	.word	0x2000018c
 800c234:	0800c91c 	.word	0x0800c91c
 800c238:	0800c93c 	.word	0x0800c93c
 800c23c:	0800c8fc 	.word	0x0800c8fc

0800c240 <_close_r>:
 800c240:	b538      	push	{r3, r4, r5, lr}
 800c242:	2300      	movs	r3, #0
 800c244:	4d05      	ldr	r5, [pc, #20]	; (800c25c <_close_r+0x1c>)
 800c246:	4604      	mov	r4, r0
 800c248:	4608      	mov	r0, r1
 800c24a:	602b      	str	r3, [r5, #0]
 800c24c:	f7f6 fbed 	bl	8002a2a <_close>
 800c250:	1c43      	adds	r3, r0, #1
 800c252:	d102      	bne.n	800c25a <_close_r+0x1a>
 800c254:	682b      	ldr	r3, [r5, #0]
 800c256:	b103      	cbz	r3, 800c25a <_close_r+0x1a>
 800c258:	6023      	str	r3, [r4, #0]
 800c25a:	bd38      	pop	{r3, r4, r5, pc}
 800c25c:	200015b4 	.word	0x200015b4

0800c260 <__sflush_r>:
 800c260:	898a      	ldrh	r2, [r1, #12]
 800c262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c266:	4605      	mov	r5, r0
 800c268:	0710      	lsls	r0, r2, #28
 800c26a:	460c      	mov	r4, r1
 800c26c:	d458      	bmi.n	800c320 <__sflush_r+0xc0>
 800c26e:	684b      	ldr	r3, [r1, #4]
 800c270:	2b00      	cmp	r3, #0
 800c272:	dc05      	bgt.n	800c280 <__sflush_r+0x20>
 800c274:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c276:	2b00      	cmp	r3, #0
 800c278:	dc02      	bgt.n	800c280 <__sflush_r+0x20>
 800c27a:	2000      	movs	r0, #0
 800c27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c282:	2e00      	cmp	r6, #0
 800c284:	d0f9      	beq.n	800c27a <__sflush_r+0x1a>
 800c286:	2300      	movs	r3, #0
 800c288:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c28c:	682f      	ldr	r7, [r5, #0]
 800c28e:	602b      	str	r3, [r5, #0]
 800c290:	d032      	beq.n	800c2f8 <__sflush_r+0x98>
 800c292:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c294:	89a3      	ldrh	r3, [r4, #12]
 800c296:	075a      	lsls	r2, r3, #29
 800c298:	d505      	bpl.n	800c2a6 <__sflush_r+0x46>
 800c29a:	6863      	ldr	r3, [r4, #4]
 800c29c:	1ac0      	subs	r0, r0, r3
 800c29e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c2a0:	b10b      	cbz	r3, 800c2a6 <__sflush_r+0x46>
 800c2a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c2a4:	1ac0      	subs	r0, r0, r3
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2ac:	4628      	mov	r0, r5
 800c2ae:	6a21      	ldr	r1, [r4, #32]
 800c2b0:	47b0      	blx	r6
 800c2b2:	1c43      	adds	r3, r0, #1
 800c2b4:	89a3      	ldrh	r3, [r4, #12]
 800c2b6:	d106      	bne.n	800c2c6 <__sflush_r+0x66>
 800c2b8:	6829      	ldr	r1, [r5, #0]
 800c2ba:	291d      	cmp	r1, #29
 800c2bc:	d82c      	bhi.n	800c318 <__sflush_r+0xb8>
 800c2be:	4a2a      	ldr	r2, [pc, #168]	; (800c368 <__sflush_r+0x108>)
 800c2c0:	40ca      	lsrs	r2, r1
 800c2c2:	07d6      	lsls	r6, r2, #31
 800c2c4:	d528      	bpl.n	800c318 <__sflush_r+0xb8>
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	6062      	str	r2, [r4, #4]
 800c2ca:	6922      	ldr	r2, [r4, #16]
 800c2cc:	04d9      	lsls	r1, r3, #19
 800c2ce:	6022      	str	r2, [r4, #0]
 800c2d0:	d504      	bpl.n	800c2dc <__sflush_r+0x7c>
 800c2d2:	1c42      	adds	r2, r0, #1
 800c2d4:	d101      	bne.n	800c2da <__sflush_r+0x7a>
 800c2d6:	682b      	ldr	r3, [r5, #0]
 800c2d8:	b903      	cbnz	r3, 800c2dc <__sflush_r+0x7c>
 800c2da:	6560      	str	r0, [r4, #84]	; 0x54
 800c2dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2de:	602f      	str	r7, [r5, #0]
 800c2e0:	2900      	cmp	r1, #0
 800c2e2:	d0ca      	beq.n	800c27a <__sflush_r+0x1a>
 800c2e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2e8:	4299      	cmp	r1, r3
 800c2ea:	d002      	beq.n	800c2f2 <__sflush_r+0x92>
 800c2ec:	4628      	mov	r0, r5
 800c2ee:	f000 f923 	bl	800c538 <_free_r>
 800c2f2:	2000      	movs	r0, #0
 800c2f4:	6360      	str	r0, [r4, #52]	; 0x34
 800c2f6:	e7c1      	b.n	800c27c <__sflush_r+0x1c>
 800c2f8:	6a21      	ldr	r1, [r4, #32]
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	4628      	mov	r0, r5
 800c2fe:	47b0      	blx	r6
 800c300:	1c41      	adds	r1, r0, #1
 800c302:	d1c7      	bne.n	800c294 <__sflush_r+0x34>
 800c304:	682b      	ldr	r3, [r5, #0]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d0c4      	beq.n	800c294 <__sflush_r+0x34>
 800c30a:	2b1d      	cmp	r3, #29
 800c30c:	d001      	beq.n	800c312 <__sflush_r+0xb2>
 800c30e:	2b16      	cmp	r3, #22
 800c310:	d101      	bne.n	800c316 <__sflush_r+0xb6>
 800c312:	602f      	str	r7, [r5, #0]
 800c314:	e7b1      	b.n	800c27a <__sflush_r+0x1a>
 800c316:	89a3      	ldrh	r3, [r4, #12]
 800c318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c31c:	81a3      	strh	r3, [r4, #12]
 800c31e:	e7ad      	b.n	800c27c <__sflush_r+0x1c>
 800c320:	690f      	ldr	r7, [r1, #16]
 800c322:	2f00      	cmp	r7, #0
 800c324:	d0a9      	beq.n	800c27a <__sflush_r+0x1a>
 800c326:	0793      	lsls	r3, r2, #30
 800c328:	bf18      	it	ne
 800c32a:	2300      	movne	r3, #0
 800c32c:	680e      	ldr	r6, [r1, #0]
 800c32e:	bf08      	it	eq
 800c330:	694b      	ldreq	r3, [r1, #20]
 800c332:	eba6 0807 	sub.w	r8, r6, r7
 800c336:	600f      	str	r7, [r1, #0]
 800c338:	608b      	str	r3, [r1, #8]
 800c33a:	f1b8 0f00 	cmp.w	r8, #0
 800c33e:	dd9c      	ble.n	800c27a <__sflush_r+0x1a>
 800c340:	4643      	mov	r3, r8
 800c342:	463a      	mov	r2, r7
 800c344:	4628      	mov	r0, r5
 800c346:	6a21      	ldr	r1, [r4, #32]
 800c348:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c34a:	47b0      	blx	r6
 800c34c:	2800      	cmp	r0, #0
 800c34e:	dc06      	bgt.n	800c35e <__sflush_r+0xfe>
 800c350:	89a3      	ldrh	r3, [r4, #12]
 800c352:	f04f 30ff 	mov.w	r0, #4294967295
 800c356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c35a:	81a3      	strh	r3, [r4, #12]
 800c35c:	e78e      	b.n	800c27c <__sflush_r+0x1c>
 800c35e:	4407      	add	r7, r0
 800c360:	eba8 0800 	sub.w	r8, r8, r0
 800c364:	e7e9      	b.n	800c33a <__sflush_r+0xda>
 800c366:	bf00      	nop
 800c368:	20400001 	.word	0x20400001

0800c36c <_fflush_r>:
 800c36c:	b538      	push	{r3, r4, r5, lr}
 800c36e:	690b      	ldr	r3, [r1, #16]
 800c370:	4605      	mov	r5, r0
 800c372:	460c      	mov	r4, r1
 800c374:	b913      	cbnz	r3, 800c37c <_fflush_r+0x10>
 800c376:	2500      	movs	r5, #0
 800c378:	4628      	mov	r0, r5
 800c37a:	bd38      	pop	{r3, r4, r5, pc}
 800c37c:	b118      	cbz	r0, 800c386 <_fflush_r+0x1a>
 800c37e:	6983      	ldr	r3, [r0, #24]
 800c380:	b90b      	cbnz	r3, 800c386 <_fflush_r+0x1a>
 800c382:	f7ff f8f3 	bl	800b56c <__sinit>
 800c386:	4b14      	ldr	r3, [pc, #80]	; (800c3d8 <_fflush_r+0x6c>)
 800c388:	429c      	cmp	r4, r3
 800c38a:	d11b      	bne.n	800c3c4 <_fflush_r+0x58>
 800c38c:	686c      	ldr	r4, [r5, #4]
 800c38e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d0ef      	beq.n	800c376 <_fflush_r+0xa>
 800c396:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c398:	07d0      	lsls	r0, r2, #31
 800c39a:	d404      	bmi.n	800c3a6 <_fflush_r+0x3a>
 800c39c:	0599      	lsls	r1, r3, #22
 800c39e:	d402      	bmi.n	800c3a6 <_fflush_r+0x3a>
 800c3a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3a2:	f7ff f981 	bl	800b6a8 <__retarget_lock_acquire_recursive>
 800c3a6:	4628      	mov	r0, r5
 800c3a8:	4621      	mov	r1, r4
 800c3aa:	f7ff ff59 	bl	800c260 <__sflush_r>
 800c3ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3b0:	4605      	mov	r5, r0
 800c3b2:	07da      	lsls	r2, r3, #31
 800c3b4:	d4e0      	bmi.n	800c378 <_fflush_r+0xc>
 800c3b6:	89a3      	ldrh	r3, [r4, #12]
 800c3b8:	059b      	lsls	r3, r3, #22
 800c3ba:	d4dd      	bmi.n	800c378 <_fflush_r+0xc>
 800c3bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3be:	f7ff f974 	bl	800b6aa <__retarget_lock_release_recursive>
 800c3c2:	e7d9      	b.n	800c378 <_fflush_r+0xc>
 800c3c4:	4b05      	ldr	r3, [pc, #20]	; (800c3dc <_fflush_r+0x70>)
 800c3c6:	429c      	cmp	r4, r3
 800c3c8:	d101      	bne.n	800c3ce <_fflush_r+0x62>
 800c3ca:	68ac      	ldr	r4, [r5, #8]
 800c3cc:	e7df      	b.n	800c38e <_fflush_r+0x22>
 800c3ce:	4b04      	ldr	r3, [pc, #16]	; (800c3e0 <_fflush_r+0x74>)
 800c3d0:	429c      	cmp	r4, r3
 800c3d2:	bf08      	it	eq
 800c3d4:	68ec      	ldreq	r4, [r5, #12]
 800c3d6:	e7da      	b.n	800c38e <_fflush_r+0x22>
 800c3d8:	0800c91c 	.word	0x0800c91c
 800c3dc:	0800c93c 	.word	0x0800c93c
 800c3e0:	0800c8fc 	.word	0x0800c8fc

0800c3e4 <_lseek_r>:
 800c3e4:	b538      	push	{r3, r4, r5, lr}
 800c3e6:	4604      	mov	r4, r0
 800c3e8:	4608      	mov	r0, r1
 800c3ea:	4611      	mov	r1, r2
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	4d05      	ldr	r5, [pc, #20]	; (800c404 <_lseek_r+0x20>)
 800c3f0:	602a      	str	r2, [r5, #0]
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	f7f6 fb3d 	bl	8002a72 <_lseek>
 800c3f8:	1c43      	adds	r3, r0, #1
 800c3fa:	d102      	bne.n	800c402 <_lseek_r+0x1e>
 800c3fc:	682b      	ldr	r3, [r5, #0]
 800c3fe:	b103      	cbz	r3, 800c402 <_lseek_r+0x1e>
 800c400:	6023      	str	r3, [r4, #0]
 800c402:	bd38      	pop	{r3, r4, r5, pc}
 800c404:	200015b4 	.word	0x200015b4

0800c408 <__swhatbuf_r>:
 800c408:	b570      	push	{r4, r5, r6, lr}
 800c40a:	460e      	mov	r6, r1
 800c40c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c410:	4614      	mov	r4, r2
 800c412:	2900      	cmp	r1, #0
 800c414:	461d      	mov	r5, r3
 800c416:	b096      	sub	sp, #88	; 0x58
 800c418:	da07      	bge.n	800c42a <__swhatbuf_r+0x22>
 800c41a:	2300      	movs	r3, #0
 800c41c:	602b      	str	r3, [r5, #0]
 800c41e:	89b3      	ldrh	r3, [r6, #12]
 800c420:	061a      	lsls	r2, r3, #24
 800c422:	d410      	bmi.n	800c446 <__swhatbuf_r+0x3e>
 800c424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c428:	e00e      	b.n	800c448 <__swhatbuf_r+0x40>
 800c42a:	466a      	mov	r2, sp
 800c42c:	f000 f908 	bl	800c640 <_fstat_r>
 800c430:	2800      	cmp	r0, #0
 800c432:	dbf2      	blt.n	800c41a <__swhatbuf_r+0x12>
 800c434:	9a01      	ldr	r2, [sp, #4]
 800c436:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c43a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c43e:	425a      	negs	r2, r3
 800c440:	415a      	adcs	r2, r3
 800c442:	602a      	str	r2, [r5, #0]
 800c444:	e7ee      	b.n	800c424 <__swhatbuf_r+0x1c>
 800c446:	2340      	movs	r3, #64	; 0x40
 800c448:	2000      	movs	r0, #0
 800c44a:	6023      	str	r3, [r4, #0]
 800c44c:	b016      	add	sp, #88	; 0x58
 800c44e:	bd70      	pop	{r4, r5, r6, pc}

0800c450 <__smakebuf_r>:
 800c450:	898b      	ldrh	r3, [r1, #12]
 800c452:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c454:	079d      	lsls	r5, r3, #30
 800c456:	4606      	mov	r6, r0
 800c458:	460c      	mov	r4, r1
 800c45a:	d507      	bpl.n	800c46c <__smakebuf_r+0x1c>
 800c45c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c460:	6023      	str	r3, [r4, #0]
 800c462:	6123      	str	r3, [r4, #16]
 800c464:	2301      	movs	r3, #1
 800c466:	6163      	str	r3, [r4, #20]
 800c468:	b002      	add	sp, #8
 800c46a:	bd70      	pop	{r4, r5, r6, pc}
 800c46c:	466a      	mov	r2, sp
 800c46e:	ab01      	add	r3, sp, #4
 800c470:	f7ff ffca 	bl	800c408 <__swhatbuf_r>
 800c474:	9900      	ldr	r1, [sp, #0]
 800c476:	4605      	mov	r5, r0
 800c478:	4630      	mov	r0, r6
 800c47a:	f7ff f917 	bl	800b6ac <_malloc_r>
 800c47e:	b948      	cbnz	r0, 800c494 <__smakebuf_r+0x44>
 800c480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c484:	059a      	lsls	r2, r3, #22
 800c486:	d4ef      	bmi.n	800c468 <__smakebuf_r+0x18>
 800c488:	f023 0303 	bic.w	r3, r3, #3
 800c48c:	f043 0302 	orr.w	r3, r3, #2
 800c490:	81a3      	strh	r3, [r4, #12]
 800c492:	e7e3      	b.n	800c45c <__smakebuf_r+0xc>
 800c494:	4b0d      	ldr	r3, [pc, #52]	; (800c4cc <__smakebuf_r+0x7c>)
 800c496:	62b3      	str	r3, [r6, #40]	; 0x28
 800c498:	89a3      	ldrh	r3, [r4, #12]
 800c49a:	6020      	str	r0, [r4, #0]
 800c49c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4a0:	81a3      	strh	r3, [r4, #12]
 800c4a2:	9b00      	ldr	r3, [sp, #0]
 800c4a4:	6120      	str	r0, [r4, #16]
 800c4a6:	6163      	str	r3, [r4, #20]
 800c4a8:	9b01      	ldr	r3, [sp, #4]
 800c4aa:	b15b      	cbz	r3, 800c4c4 <__smakebuf_r+0x74>
 800c4ac:	4630      	mov	r0, r6
 800c4ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4b2:	f000 f8d7 	bl	800c664 <_isatty_r>
 800c4b6:	b128      	cbz	r0, 800c4c4 <__smakebuf_r+0x74>
 800c4b8:	89a3      	ldrh	r3, [r4, #12]
 800c4ba:	f023 0303 	bic.w	r3, r3, #3
 800c4be:	f043 0301 	orr.w	r3, r3, #1
 800c4c2:	81a3      	strh	r3, [r4, #12]
 800c4c4:	89a0      	ldrh	r0, [r4, #12]
 800c4c6:	4305      	orrs	r5, r0
 800c4c8:	81a5      	strh	r5, [r4, #12]
 800c4ca:	e7cd      	b.n	800c468 <__smakebuf_r+0x18>
 800c4cc:	0800b505 	.word	0x0800b505

0800c4d0 <memchr>:
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	b510      	push	{r4, lr}
 800c4d4:	b2c9      	uxtb	r1, r1
 800c4d6:	4402      	add	r2, r0
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	4618      	mov	r0, r3
 800c4dc:	d101      	bne.n	800c4e2 <memchr+0x12>
 800c4de:	2000      	movs	r0, #0
 800c4e0:	e003      	b.n	800c4ea <memchr+0x1a>
 800c4e2:	7804      	ldrb	r4, [r0, #0]
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	428c      	cmp	r4, r1
 800c4e8:	d1f6      	bne.n	800c4d8 <memchr+0x8>
 800c4ea:	bd10      	pop	{r4, pc}

0800c4ec <memmove>:
 800c4ec:	4288      	cmp	r0, r1
 800c4ee:	b510      	push	{r4, lr}
 800c4f0:	eb01 0402 	add.w	r4, r1, r2
 800c4f4:	d902      	bls.n	800c4fc <memmove+0x10>
 800c4f6:	4284      	cmp	r4, r0
 800c4f8:	4623      	mov	r3, r4
 800c4fa:	d807      	bhi.n	800c50c <memmove+0x20>
 800c4fc:	1e43      	subs	r3, r0, #1
 800c4fe:	42a1      	cmp	r1, r4
 800c500:	d008      	beq.n	800c514 <memmove+0x28>
 800c502:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c506:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c50a:	e7f8      	b.n	800c4fe <memmove+0x12>
 800c50c:	4601      	mov	r1, r0
 800c50e:	4402      	add	r2, r0
 800c510:	428a      	cmp	r2, r1
 800c512:	d100      	bne.n	800c516 <memmove+0x2a>
 800c514:	bd10      	pop	{r4, pc}
 800c516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c51a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c51e:	e7f7      	b.n	800c510 <memmove+0x24>

0800c520 <__malloc_lock>:
 800c520:	4801      	ldr	r0, [pc, #4]	; (800c528 <__malloc_lock+0x8>)
 800c522:	f7ff b8c1 	b.w	800b6a8 <__retarget_lock_acquire_recursive>
 800c526:	bf00      	nop
 800c528:	200015ac 	.word	0x200015ac

0800c52c <__malloc_unlock>:
 800c52c:	4801      	ldr	r0, [pc, #4]	; (800c534 <__malloc_unlock+0x8>)
 800c52e:	f7ff b8bc 	b.w	800b6aa <__retarget_lock_release_recursive>
 800c532:	bf00      	nop
 800c534:	200015ac 	.word	0x200015ac

0800c538 <_free_r>:
 800c538:	b538      	push	{r3, r4, r5, lr}
 800c53a:	4605      	mov	r5, r0
 800c53c:	2900      	cmp	r1, #0
 800c53e:	d043      	beq.n	800c5c8 <_free_r+0x90>
 800c540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c544:	1f0c      	subs	r4, r1, #4
 800c546:	2b00      	cmp	r3, #0
 800c548:	bfb8      	it	lt
 800c54a:	18e4      	addlt	r4, r4, r3
 800c54c:	f7ff ffe8 	bl	800c520 <__malloc_lock>
 800c550:	4a1e      	ldr	r2, [pc, #120]	; (800c5cc <_free_r+0x94>)
 800c552:	6813      	ldr	r3, [r2, #0]
 800c554:	4610      	mov	r0, r2
 800c556:	b933      	cbnz	r3, 800c566 <_free_r+0x2e>
 800c558:	6063      	str	r3, [r4, #4]
 800c55a:	6014      	str	r4, [r2, #0]
 800c55c:	4628      	mov	r0, r5
 800c55e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c562:	f7ff bfe3 	b.w	800c52c <__malloc_unlock>
 800c566:	42a3      	cmp	r3, r4
 800c568:	d90a      	bls.n	800c580 <_free_r+0x48>
 800c56a:	6821      	ldr	r1, [r4, #0]
 800c56c:	1862      	adds	r2, r4, r1
 800c56e:	4293      	cmp	r3, r2
 800c570:	bf01      	itttt	eq
 800c572:	681a      	ldreq	r2, [r3, #0]
 800c574:	685b      	ldreq	r3, [r3, #4]
 800c576:	1852      	addeq	r2, r2, r1
 800c578:	6022      	streq	r2, [r4, #0]
 800c57a:	6063      	str	r3, [r4, #4]
 800c57c:	6004      	str	r4, [r0, #0]
 800c57e:	e7ed      	b.n	800c55c <_free_r+0x24>
 800c580:	461a      	mov	r2, r3
 800c582:	685b      	ldr	r3, [r3, #4]
 800c584:	b10b      	cbz	r3, 800c58a <_free_r+0x52>
 800c586:	42a3      	cmp	r3, r4
 800c588:	d9fa      	bls.n	800c580 <_free_r+0x48>
 800c58a:	6811      	ldr	r1, [r2, #0]
 800c58c:	1850      	adds	r0, r2, r1
 800c58e:	42a0      	cmp	r0, r4
 800c590:	d10b      	bne.n	800c5aa <_free_r+0x72>
 800c592:	6820      	ldr	r0, [r4, #0]
 800c594:	4401      	add	r1, r0
 800c596:	1850      	adds	r0, r2, r1
 800c598:	4283      	cmp	r3, r0
 800c59a:	6011      	str	r1, [r2, #0]
 800c59c:	d1de      	bne.n	800c55c <_free_r+0x24>
 800c59e:	6818      	ldr	r0, [r3, #0]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	4401      	add	r1, r0
 800c5a4:	6011      	str	r1, [r2, #0]
 800c5a6:	6053      	str	r3, [r2, #4]
 800c5a8:	e7d8      	b.n	800c55c <_free_r+0x24>
 800c5aa:	d902      	bls.n	800c5b2 <_free_r+0x7a>
 800c5ac:	230c      	movs	r3, #12
 800c5ae:	602b      	str	r3, [r5, #0]
 800c5b0:	e7d4      	b.n	800c55c <_free_r+0x24>
 800c5b2:	6820      	ldr	r0, [r4, #0]
 800c5b4:	1821      	adds	r1, r4, r0
 800c5b6:	428b      	cmp	r3, r1
 800c5b8:	bf01      	itttt	eq
 800c5ba:	6819      	ldreq	r1, [r3, #0]
 800c5bc:	685b      	ldreq	r3, [r3, #4]
 800c5be:	1809      	addeq	r1, r1, r0
 800c5c0:	6021      	streq	r1, [r4, #0]
 800c5c2:	6063      	str	r3, [r4, #4]
 800c5c4:	6054      	str	r4, [r2, #4]
 800c5c6:	e7c9      	b.n	800c55c <_free_r+0x24>
 800c5c8:	bd38      	pop	{r3, r4, r5, pc}
 800c5ca:	bf00      	nop
 800c5cc:	200004ac 	.word	0x200004ac

0800c5d0 <_realloc_r>:
 800c5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5d2:	4607      	mov	r7, r0
 800c5d4:	4614      	mov	r4, r2
 800c5d6:	460e      	mov	r6, r1
 800c5d8:	b921      	cbnz	r1, 800c5e4 <_realloc_r+0x14>
 800c5da:	4611      	mov	r1, r2
 800c5dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c5e0:	f7ff b864 	b.w	800b6ac <_malloc_r>
 800c5e4:	b922      	cbnz	r2, 800c5f0 <_realloc_r+0x20>
 800c5e6:	f7ff ffa7 	bl	800c538 <_free_r>
 800c5ea:	4625      	mov	r5, r4
 800c5ec:	4628      	mov	r0, r5
 800c5ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5f0:	f000 f848 	bl	800c684 <_malloc_usable_size_r>
 800c5f4:	42a0      	cmp	r0, r4
 800c5f6:	d20f      	bcs.n	800c618 <_realloc_r+0x48>
 800c5f8:	4621      	mov	r1, r4
 800c5fa:	4638      	mov	r0, r7
 800c5fc:	f7ff f856 	bl	800b6ac <_malloc_r>
 800c600:	4605      	mov	r5, r0
 800c602:	2800      	cmp	r0, #0
 800c604:	d0f2      	beq.n	800c5ec <_realloc_r+0x1c>
 800c606:	4631      	mov	r1, r6
 800c608:	4622      	mov	r2, r4
 800c60a:	f7fe fec7 	bl	800b39c <memcpy>
 800c60e:	4631      	mov	r1, r6
 800c610:	4638      	mov	r0, r7
 800c612:	f7ff ff91 	bl	800c538 <_free_r>
 800c616:	e7e9      	b.n	800c5ec <_realloc_r+0x1c>
 800c618:	4635      	mov	r5, r6
 800c61a:	e7e7      	b.n	800c5ec <_realloc_r+0x1c>

0800c61c <_read_r>:
 800c61c:	b538      	push	{r3, r4, r5, lr}
 800c61e:	4604      	mov	r4, r0
 800c620:	4608      	mov	r0, r1
 800c622:	4611      	mov	r1, r2
 800c624:	2200      	movs	r2, #0
 800c626:	4d05      	ldr	r5, [pc, #20]	; (800c63c <_read_r+0x20>)
 800c628:	602a      	str	r2, [r5, #0]
 800c62a:	461a      	mov	r2, r3
 800c62c:	f7f6 f9e0 	bl	80029f0 <_read>
 800c630:	1c43      	adds	r3, r0, #1
 800c632:	d102      	bne.n	800c63a <_read_r+0x1e>
 800c634:	682b      	ldr	r3, [r5, #0]
 800c636:	b103      	cbz	r3, 800c63a <_read_r+0x1e>
 800c638:	6023      	str	r3, [r4, #0]
 800c63a:	bd38      	pop	{r3, r4, r5, pc}
 800c63c:	200015b4 	.word	0x200015b4

0800c640 <_fstat_r>:
 800c640:	b538      	push	{r3, r4, r5, lr}
 800c642:	2300      	movs	r3, #0
 800c644:	4d06      	ldr	r5, [pc, #24]	; (800c660 <_fstat_r+0x20>)
 800c646:	4604      	mov	r4, r0
 800c648:	4608      	mov	r0, r1
 800c64a:	4611      	mov	r1, r2
 800c64c:	602b      	str	r3, [r5, #0]
 800c64e:	f7f6 f9f7 	bl	8002a40 <_fstat>
 800c652:	1c43      	adds	r3, r0, #1
 800c654:	d102      	bne.n	800c65c <_fstat_r+0x1c>
 800c656:	682b      	ldr	r3, [r5, #0]
 800c658:	b103      	cbz	r3, 800c65c <_fstat_r+0x1c>
 800c65a:	6023      	str	r3, [r4, #0]
 800c65c:	bd38      	pop	{r3, r4, r5, pc}
 800c65e:	bf00      	nop
 800c660:	200015b4 	.word	0x200015b4

0800c664 <_isatty_r>:
 800c664:	b538      	push	{r3, r4, r5, lr}
 800c666:	2300      	movs	r3, #0
 800c668:	4d05      	ldr	r5, [pc, #20]	; (800c680 <_isatty_r+0x1c>)
 800c66a:	4604      	mov	r4, r0
 800c66c:	4608      	mov	r0, r1
 800c66e:	602b      	str	r3, [r5, #0]
 800c670:	f7f6 f9f5 	bl	8002a5e <_isatty>
 800c674:	1c43      	adds	r3, r0, #1
 800c676:	d102      	bne.n	800c67e <_isatty_r+0x1a>
 800c678:	682b      	ldr	r3, [r5, #0]
 800c67a:	b103      	cbz	r3, 800c67e <_isatty_r+0x1a>
 800c67c:	6023      	str	r3, [r4, #0]
 800c67e:	bd38      	pop	{r3, r4, r5, pc}
 800c680:	200015b4 	.word	0x200015b4

0800c684 <_malloc_usable_size_r>:
 800c684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c688:	1f18      	subs	r0, r3, #4
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	bfbc      	itt	lt
 800c68e:	580b      	ldrlt	r3, [r1, r0]
 800c690:	18c0      	addlt	r0, r0, r3
 800c692:	4770      	bx	lr
 800c694:	0000      	movs	r0, r0
	...

0800c698 <floor>:
 800c698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c69c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800c6a0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800c6a4:	2e13      	cmp	r6, #19
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	4607      	mov	r7, r0
 800c6ac:	460c      	mov	r4, r1
 800c6ae:	4605      	mov	r5, r0
 800c6b0:	dc34      	bgt.n	800c71c <floor+0x84>
 800c6b2:	2e00      	cmp	r6, #0
 800c6b4:	da15      	bge.n	800c6e2 <floor+0x4a>
 800c6b6:	a334      	add	r3, pc, #208	; (adr r3, 800c788 <floor+0xf0>)
 800c6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6bc:	f7f3 fd56 	bl	800016c <__adddf3>
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	f7f3 ff86 	bl	80005d4 <__aeabi_dcmpgt>
 800c6c8:	b140      	cbz	r0, 800c6dc <floor+0x44>
 800c6ca:	2c00      	cmp	r4, #0
 800c6cc:	da59      	bge.n	800c782 <floor+0xea>
 800c6ce:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c6d2:	ea57 0503 	orrs.w	r5, r7, r3
 800c6d6:	d001      	beq.n	800c6dc <floor+0x44>
 800c6d8:	2500      	movs	r5, #0
 800c6da:	4c2d      	ldr	r4, [pc, #180]	; (800c790 <floor+0xf8>)
 800c6dc:	4623      	mov	r3, r4
 800c6de:	462f      	mov	r7, r5
 800c6e0:	e025      	b.n	800c72e <floor+0x96>
 800c6e2:	4a2c      	ldr	r2, [pc, #176]	; (800c794 <floor+0xfc>)
 800c6e4:	fa42 f806 	asr.w	r8, r2, r6
 800c6e8:	ea01 0208 	and.w	r2, r1, r8
 800c6ec:	4302      	orrs	r2, r0
 800c6ee:	d01e      	beq.n	800c72e <floor+0x96>
 800c6f0:	a325      	add	r3, pc, #148	; (adr r3, 800c788 <floor+0xf0>)
 800c6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f6:	f7f3 fd39 	bl	800016c <__adddf3>
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	f7f3 ff69 	bl	80005d4 <__aeabi_dcmpgt>
 800c702:	2800      	cmp	r0, #0
 800c704:	d0ea      	beq.n	800c6dc <floor+0x44>
 800c706:	2c00      	cmp	r4, #0
 800c708:	bfbe      	ittt	lt
 800c70a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c70e:	fa43 f606 	asrlt.w	r6, r3, r6
 800c712:	19a4      	addlt	r4, r4, r6
 800c714:	2500      	movs	r5, #0
 800c716:	ea24 0408 	bic.w	r4, r4, r8
 800c71a:	e7df      	b.n	800c6dc <floor+0x44>
 800c71c:	2e33      	cmp	r6, #51	; 0x33
 800c71e:	dd0a      	ble.n	800c736 <floor+0x9e>
 800c720:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c724:	d103      	bne.n	800c72e <floor+0x96>
 800c726:	f7f3 fd21 	bl	800016c <__adddf3>
 800c72a:	4607      	mov	r7, r0
 800c72c:	460b      	mov	r3, r1
 800c72e:	4638      	mov	r0, r7
 800c730:	4619      	mov	r1, r3
 800c732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c736:	f04f 32ff 	mov.w	r2, #4294967295
 800c73a:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800c73e:	fa22 f808 	lsr.w	r8, r2, r8
 800c742:	ea18 0f00 	tst.w	r8, r0
 800c746:	d0f2      	beq.n	800c72e <floor+0x96>
 800c748:	a30f      	add	r3, pc, #60	; (adr r3, 800c788 <floor+0xf0>)
 800c74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74e:	f7f3 fd0d 	bl	800016c <__adddf3>
 800c752:	2200      	movs	r2, #0
 800c754:	2300      	movs	r3, #0
 800c756:	f7f3 ff3d 	bl	80005d4 <__aeabi_dcmpgt>
 800c75a:	2800      	cmp	r0, #0
 800c75c:	d0be      	beq.n	800c6dc <floor+0x44>
 800c75e:	2c00      	cmp	r4, #0
 800c760:	da02      	bge.n	800c768 <floor+0xd0>
 800c762:	2e14      	cmp	r6, #20
 800c764:	d103      	bne.n	800c76e <floor+0xd6>
 800c766:	3401      	adds	r4, #1
 800c768:	ea25 0508 	bic.w	r5, r5, r8
 800c76c:	e7b6      	b.n	800c6dc <floor+0x44>
 800c76e:	2301      	movs	r3, #1
 800c770:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c774:	fa03 f606 	lsl.w	r6, r3, r6
 800c778:	4435      	add	r5, r6
 800c77a:	42bd      	cmp	r5, r7
 800c77c:	bf38      	it	cc
 800c77e:	18e4      	addcc	r4, r4, r3
 800c780:	e7f2      	b.n	800c768 <floor+0xd0>
 800c782:	2500      	movs	r5, #0
 800c784:	462c      	mov	r4, r5
 800c786:	e7a9      	b.n	800c6dc <floor+0x44>
 800c788:	8800759c 	.word	0x8800759c
 800c78c:	7e37e43c 	.word	0x7e37e43c
 800c790:	bff00000 	.word	0xbff00000
 800c794:	000fffff 	.word	0x000fffff

0800c798 <_init>:
 800c798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c79a:	bf00      	nop
 800c79c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c79e:	bc08      	pop	{r3}
 800c7a0:	469e      	mov	lr, r3
 800c7a2:	4770      	bx	lr

0800c7a4 <_fini>:
 800c7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7a6:	bf00      	nop
 800c7a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7aa:	bc08      	pop	{r3}
 800c7ac:	469e      	mov	lr, r3
 800c7ae:	4770      	bx	lr
