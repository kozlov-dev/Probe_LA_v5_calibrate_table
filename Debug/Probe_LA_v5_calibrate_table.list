
Probe_LA_v5_calibrate_table.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c650  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  0800c760  0800c760  0001c760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c940  0800c940  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c940  0800c940  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c940  0800c940  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c940  0800c940  0001c940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c944  0800c944  0001c944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800c948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c8  200001f0  0800cb38  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200015b8  0800cb38  000215b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fbd1  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a92  00000000  00000000  0003fdea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  00044880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c8  00000000  00000000  00045f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dd24  00000000  00000000  00047418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e363  00000000  00000000  0006513c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097f12  00000000  00000000  0008349f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011b3b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000695c  00000000  00000000  0011b404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c748 	.word	0x0800c748

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800c748 	.word	0x0800c748

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__gedf2>:
 80004d8:	f04f 3cff 	mov.w	ip, #4294967295
 80004dc:	e006      	b.n	80004ec <__cmpdf2+0x4>
 80004de:	bf00      	nop

080004e0 <__ledf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	e002      	b.n	80004ec <__cmpdf2+0x4>
 80004e6:	bf00      	nop

080004e8 <__cmpdf2>:
 80004e8:	f04f 0c01 	mov.w	ip, #1
 80004ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004fc:	bf18      	it	ne
 80004fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000502:	d01b      	beq.n	800053c <__cmpdf2+0x54>
 8000504:	b001      	add	sp, #4
 8000506:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800050a:	bf0c      	ite	eq
 800050c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000510:	ea91 0f03 	teqne	r1, r3
 8000514:	bf02      	ittt	eq
 8000516:	ea90 0f02 	teqeq	r0, r2
 800051a:	2000      	moveq	r0, #0
 800051c:	4770      	bxeq	lr
 800051e:	f110 0f00 	cmn.w	r0, #0
 8000522:	ea91 0f03 	teq	r1, r3
 8000526:	bf58      	it	pl
 8000528:	4299      	cmppl	r1, r3
 800052a:	bf08      	it	eq
 800052c:	4290      	cmpeq	r0, r2
 800052e:	bf2c      	ite	cs
 8000530:	17d8      	asrcs	r0, r3, #31
 8000532:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000536:	f040 0001 	orr.w	r0, r0, #1
 800053a:	4770      	bx	lr
 800053c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d102      	bne.n	800054c <__cmpdf2+0x64>
 8000546:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800054a:	d107      	bne.n	800055c <__cmpdf2+0x74>
 800054c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000550:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000554:	d1d6      	bne.n	8000504 <__cmpdf2+0x1c>
 8000556:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800055a:	d0d3      	beq.n	8000504 <__cmpdf2+0x1c>
 800055c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <__aeabi_cdrcmple>:
 8000564:	4684      	mov	ip, r0
 8000566:	4610      	mov	r0, r2
 8000568:	4662      	mov	r2, ip
 800056a:	468c      	mov	ip, r1
 800056c:	4619      	mov	r1, r3
 800056e:	4663      	mov	r3, ip
 8000570:	e000      	b.n	8000574 <__aeabi_cdcmpeq>
 8000572:	bf00      	nop

08000574 <__aeabi_cdcmpeq>:
 8000574:	b501      	push	{r0, lr}
 8000576:	f7ff ffb7 	bl	80004e8 <__cmpdf2>
 800057a:	2800      	cmp	r0, #0
 800057c:	bf48      	it	mi
 800057e:	f110 0f00 	cmnmi.w	r0, #0
 8000582:	bd01      	pop	{r0, pc}

08000584 <__aeabi_dcmpeq>:
 8000584:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000588:	f7ff fff4 	bl	8000574 <__aeabi_cdcmpeq>
 800058c:	bf0c      	ite	eq
 800058e:	2001      	moveq	r0, #1
 8000590:	2000      	movne	r0, #0
 8000592:	f85d fb08 	ldr.w	pc, [sp], #8
 8000596:	bf00      	nop

08000598 <__aeabi_dcmplt>:
 8000598:	f84d ed08 	str.w	lr, [sp, #-8]!
 800059c:	f7ff ffea 	bl	8000574 <__aeabi_cdcmpeq>
 80005a0:	bf34      	ite	cc
 80005a2:	2001      	movcc	r0, #1
 80005a4:	2000      	movcs	r0, #0
 80005a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005aa:	bf00      	nop

080005ac <__aeabi_dcmple>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff ffe0 	bl	8000574 <__aeabi_cdcmpeq>
 80005b4:	bf94      	ite	ls
 80005b6:	2001      	movls	r0, #1
 80005b8:	2000      	movhi	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmpge>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffce 	bl	8000564 <__aeabi_cdrcmple>
 80005c8:	bf94      	ite	ls
 80005ca:	2001      	movls	r0, #1
 80005cc:	2000      	movhi	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmpgt>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffc4 	bl	8000564 <__aeabi_cdrcmple>
 80005dc:	bf34      	ite	cc
 80005de:	2001      	movcc	r0, #1
 80005e0:	2000      	movcs	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2uiz>:
 80005e8:	004a      	lsls	r2, r1, #1
 80005ea:	d211      	bcs.n	8000610 <__aeabi_d2uiz+0x28>
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d211      	bcs.n	8000616 <__aeabi_d2uiz+0x2e>
 80005f2:	d50d      	bpl.n	8000610 <__aeabi_d2uiz+0x28>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d40e      	bmi.n	800061c <__aeabi_d2uiz+0x34>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	fa23 f002 	lsr.w	r0, r3, r2
 800060e:	4770      	bx	lr
 8000610:	f04f 0000 	mov.w	r0, #0
 8000614:	4770      	bx	lr
 8000616:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800061a:	d102      	bne.n	8000622 <__aeabi_d2uiz+0x3a>
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	4770      	bx	lr
 8000622:	f04f 0000 	mov.w	r0, #0
 8000626:	4770      	bx	lr

08000628 <__aeabi_frsub>:
 8000628:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800062c:	e002      	b.n	8000634 <__addsf3>
 800062e:	bf00      	nop

08000630 <__aeabi_fsub>:
 8000630:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000634 <__addsf3>:
 8000634:	0042      	lsls	r2, r0, #1
 8000636:	bf1f      	itttt	ne
 8000638:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800063c:	ea92 0f03 	teqne	r2, r3
 8000640:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000644:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000648:	d06a      	beq.n	8000720 <__addsf3+0xec>
 800064a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800064e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000652:	bfc1      	itttt	gt
 8000654:	18d2      	addgt	r2, r2, r3
 8000656:	4041      	eorgt	r1, r0
 8000658:	4048      	eorgt	r0, r1
 800065a:	4041      	eorgt	r1, r0
 800065c:	bfb8      	it	lt
 800065e:	425b      	neglt	r3, r3
 8000660:	2b19      	cmp	r3, #25
 8000662:	bf88      	it	hi
 8000664:	4770      	bxhi	lr
 8000666:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800066a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800066e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000672:	bf18      	it	ne
 8000674:	4240      	negne	r0, r0
 8000676:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800067a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800067e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000682:	bf18      	it	ne
 8000684:	4249      	negne	r1, r1
 8000686:	ea92 0f03 	teq	r2, r3
 800068a:	d03f      	beq.n	800070c <__addsf3+0xd8>
 800068c:	f1a2 0201 	sub.w	r2, r2, #1
 8000690:	fa41 fc03 	asr.w	ip, r1, r3
 8000694:	eb10 000c 	adds.w	r0, r0, ip
 8000698:	f1c3 0320 	rsb	r3, r3, #32
 800069c:	fa01 f103 	lsl.w	r1, r1, r3
 80006a0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006a4:	d502      	bpl.n	80006ac <__addsf3+0x78>
 80006a6:	4249      	negs	r1, r1
 80006a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006ac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006b0:	d313      	bcc.n	80006da <__addsf3+0xa6>
 80006b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006b6:	d306      	bcc.n	80006c6 <__addsf3+0x92>
 80006b8:	0840      	lsrs	r0, r0, #1
 80006ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80006be:	f102 0201 	add.w	r2, r2, #1
 80006c2:	2afe      	cmp	r2, #254	; 0xfe
 80006c4:	d251      	bcs.n	800076a <__addsf3+0x136>
 80006c6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80006ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006ce:	bf08      	it	eq
 80006d0:	f020 0001 	biceq.w	r0, r0, #1
 80006d4:	ea40 0003 	orr.w	r0, r0, r3
 80006d8:	4770      	bx	lr
 80006da:	0049      	lsls	r1, r1, #1
 80006dc:	eb40 0000 	adc.w	r0, r0, r0
 80006e0:	3a01      	subs	r2, #1
 80006e2:	bf28      	it	cs
 80006e4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80006e8:	d2ed      	bcs.n	80006c6 <__addsf3+0x92>
 80006ea:	fab0 fc80 	clz	ip, r0
 80006ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80006f2:	ebb2 020c 	subs.w	r2, r2, ip
 80006f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006fa:	bfaa      	itet	ge
 80006fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000700:	4252      	neglt	r2, r2
 8000702:	4318      	orrge	r0, r3
 8000704:	bfbc      	itt	lt
 8000706:	40d0      	lsrlt	r0, r2
 8000708:	4318      	orrlt	r0, r3
 800070a:	4770      	bx	lr
 800070c:	f092 0f00 	teq	r2, #0
 8000710:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000714:	bf06      	itte	eq
 8000716:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800071a:	3201      	addeq	r2, #1
 800071c:	3b01      	subne	r3, #1
 800071e:	e7b5      	b.n	800068c <__addsf3+0x58>
 8000720:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000724:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000728:	bf18      	it	ne
 800072a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800072e:	d021      	beq.n	8000774 <__addsf3+0x140>
 8000730:	ea92 0f03 	teq	r2, r3
 8000734:	d004      	beq.n	8000740 <__addsf3+0x10c>
 8000736:	f092 0f00 	teq	r2, #0
 800073a:	bf08      	it	eq
 800073c:	4608      	moveq	r0, r1
 800073e:	4770      	bx	lr
 8000740:	ea90 0f01 	teq	r0, r1
 8000744:	bf1c      	itt	ne
 8000746:	2000      	movne	r0, #0
 8000748:	4770      	bxne	lr
 800074a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800074e:	d104      	bne.n	800075a <__addsf3+0x126>
 8000750:	0040      	lsls	r0, r0, #1
 8000752:	bf28      	it	cs
 8000754:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000758:	4770      	bx	lr
 800075a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800075e:	bf3c      	itt	cc
 8000760:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000764:	4770      	bxcc	lr
 8000766:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800076a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800076e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000772:	4770      	bx	lr
 8000774:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000778:	bf16      	itet	ne
 800077a:	4608      	movne	r0, r1
 800077c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000780:	4601      	movne	r1, r0
 8000782:	0242      	lsls	r2, r0, #9
 8000784:	bf06      	itte	eq
 8000786:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800078a:	ea90 0f01 	teqeq	r0, r1
 800078e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000792:	4770      	bx	lr

08000794 <__aeabi_ui2f>:
 8000794:	f04f 0300 	mov.w	r3, #0
 8000798:	e004      	b.n	80007a4 <__aeabi_i2f+0x8>
 800079a:	bf00      	nop

0800079c <__aeabi_i2f>:
 800079c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	ea5f 0c00 	movs.w	ip, r0
 80007a8:	bf08      	it	eq
 80007aa:	4770      	bxeq	lr
 80007ac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007b0:	4601      	mov	r1, r0
 80007b2:	f04f 0000 	mov.w	r0, #0
 80007b6:	e01c      	b.n	80007f2 <__aeabi_l2f+0x2a>

080007b8 <__aeabi_ul2f>:
 80007b8:	ea50 0201 	orrs.w	r2, r0, r1
 80007bc:	bf08      	it	eq
 80007be:	4770      	bxeq	lr
 80007c0:	f04f 0300 	mov.w	r3, #0
 80007c4:	e00a      	b.n	80007dc <__aeabi_l2f+0x14>
 80007c6:	bf00      	nop

080007c8 <__aeabi_l2f>:
 80007c8:	ea50 0201 	orrs.w	r2, r0, r1
 80007cc:	bf08      	it	eq
 80007ce:	4770      	bxeq	lr
 80007d0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80007d4:	d502      	bpl.n	80007dc <__aeabi_l2f+0x14>
 80007d6:	4240      	negs	r0, r0
 80007d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007dc:	ea5f 0c01 	movs.w	ip, r1
 80007e0:	bf02      	ittt	eq
 80007e2:	4684      	moveq	ip, r0
 80007e4:	4601      	moveq	r1, r0
 80007e6:	2000      	moveq	r0, #0
 80007e8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80007ec:	bf08      	it	eq
 80007ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007f2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007f6:	fabc f28c 	clz	r2, ip
 80007fa:	3a08      	subs	r2, #8
 80007fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000800:	db10      	blt.n	8000824 <__aeabi_l2f+0x5c>
 8000802:	fa01 fc02 	lsl.w	ip, r1, r2
 8000806:	4463      	add	r3, ip
 8000808:	fa00 fc02 	lsl.w	ip, r0, r2
 800080c:	f1c2 0220 	rsb	r2, r2, #32
 8000810:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000814:	fa20 f202 	lsr.w	r2, r0, r2
 8000818:	eb43 0002 	adc.w	r0, r3, r2
 800081c:	bf08      	it	eq
 800081e:	f020 0001 	biceq.w	r0, r0, #1
 8000822:	4770      	bx	lr
 8000824:	f102 0220 	add.w	r2, r2, #32
 8000828:	fa01 fc02 	lsl.w	ip, r1, r2
 800082c:	f1c2 0220 	rsb	r2, r2, #32
 8000830:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000834:	fa21 f202 	lsr.w	r2, r1, r2
 8000838:	eb43 0002 	adc.w	r0, r3, r2
 800083c:	bf08      	it	eq
 800083e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000842:	4770      	bx	lr

08000844 <__aeabi_fmul>:
 8000844:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000848:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800084c:	bf1e      	ittt	ne
 800084e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000852:	ea92 0f0c 	teqne	r2, ip
 8000856:	ea93 0f0c 	teqne	r3, ip
 800085a:	d06f      	beq.n	800093c <__aeabi_fmul+0xf8>
 800085c:	441a      	add	r2, r3
 800085e:	ea80 0c01 	eor.w	ip, r0, r1
 8000862:	0240      	lsls	r0, r0, #9
 8000864:	bf18      	it	ne
 8000866:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800086a:	d01e      	beq.n	80008aa <__aeabi_fmul+0x66>
 800086c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000870:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000874:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000878:	fba0 3101 	umull	r3, r1, r0, r1
 800087c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000880:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000884:	bf3e      	ittt	cc
 8000886:	0049      	lslcc	r1, r1, #1
 8000888:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800088c:	005b      	lslcc	r3, r3, #1
 800088e:	ea40 0001 	orr.w	r0, r0, r1
 8000892:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000896:	2afd      	cmp	r2, #253	; 0xfd
 8000898:	d81d      	bhi.n	80008d6 <__aeabi_fmul+0x92>
 800089a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800089e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008a2:	bf08      	it	eq
 80008a4:	f020 0001 	biceq.w	r0, r0, #1
 80008a8:	4770      	bx	lr
 80008aa:	f090 0f00 	teq	r0, #0
 80008ae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008b2:	bf08      	it	eq
 80008b4:	0249      	lsleq	r1, r1, #9
 80008b6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008ba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008be:	3a7f      	subs	r2, #127	; 0x7f
 80008c0:	bfc2      	ittt	gt
 80008c2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008c6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008ca:	4770      	bxgt	lr
 80008cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008d0:	f04f 0300 	mov.w	r3, #0
 80008d4:	3a01      	subs	r2, #1
 80008d6:	dc5d      	bgt.n	8000994 <__aeabi_fmul+0x150>
 80008d8:	f112 0f19 	cmn.w	r2, #25
 80008dc:	bfdc      	itt	le
 80008de:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80008e2:	4770      	bxle	lr
 80008e4:	f1c2 0200 	rsb	r2, r2, #0
 80008e8:	0041      	lsls	r1, r0, #1
 80008ea:	fa21 f102 	lsr.w	r1, r1, r2
 80008ee:	f1c2 0220 	rsb	r2, r2, #32
 80008f2:	fa00 fc02 	lsl.w	ip, r0, r2
 80008f6:	ea5f 0031 	movs.w	r0, r1, rrx
 80008fa:	f140 0000 	adc.w	r0, r0, #0
 80008fe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000902:	bf08      	it	eq
 8000904:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000908:	4770      	bx	lr
 800090a:	f092 0f00 	teq	r2, #0
 800090e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000912:	bf02      	ittt	eq
 8000914:	0040      	lsleq	r0, r0, #1
 8000916:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800091a:	3a01      	subeq	r2, #1
 800091c:	d0f9      	beq.n	8000912 <__aeabi_fmul+0xce>
 800091e:	ea40 000c 	orr.w	r0, r0, ip
 8000922:	f093 0f00 	teq	r3, #0
 8000926:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800092a:	bf02      	ittt	eq
 800092c:	0049      	lsleq	r1, r1, #1
 800092e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000932:	3b01      	subeq	r3, #1
 8000934:	d0f9      	beq.n	800092a <__aeabi_fmul+0xe6>
 8000936:	ea41 010c 	orr.w	r1, r1, ip
 800093a:	e78f      	b.n	800085c <__aeabi_fmul+0x18>
 800093c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000940:	ea92 0f0c 	teq	r2, ip
 8000944:	bf18      	it	ne
 8000946:	ea93 0f0c 	teqne	r3, ip
 800094a:	d00a      	beq.n	8000962 <__aeabi_fmul+0x11e>
 800094c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000950:	bf18      	it	ne
 8000952:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000956:	d1d8      	bne.n	800090a <__aeabi_fmul+0xc6>
 8000958:	ea80 0001 	eor.w	r0, r0, r1
 800095c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000960:	4770      	bx	lr
 8000962:	f090 0f00 	teq	r0, #0
 8000966:	bf17      	itett	ne
 8000968:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800096c:	4608      	moveq	r0, r1
 800096e:	f091 0f00 	teqne	r1, #0
 8000972:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000976:	d014      	beq.n	80009a2 <__aeabi_fmul+0x15e>
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	d101      	bne.n	8000982 <__aeabi_fmul+0x13e>
 800097e:	0242      	lsls	r2, r0, #9
 8000980:	d10f      	bne.n	80009a2 <__aeabi_fmul+0x15e>
 8000982:	ea93 0f0c 	teq	r3, ip
 8000986:	d103      	bne.n	8000990 <__aeabi_fmul+0x14c>
 8000988:	024b      	lsls	r3, r1, #9
 800098a:	bf18      	it	ne
 800098c:	4608      	movne	r0, r1
 800098e:	d108      	bne.n	80009a2 <__aeabi_fmul+0x15e>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800099c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a0:	4770      	bx	lr
 80009a2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009aa:	4770      	bx	lr

080009ac <__aeabi_fdiv>:
 80009ac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009b0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009b4:	bf1e      	ittt	ne
 80009b6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009ba:	ea92 0f0c 	teqne	r2, ip
 80009be:	ea93 0f0c 	teqne	r3, ip
 80009c2:	d069      	beq.n	8000a98 <__aeabi_fdiv+0xec>
 80009c4:	eba2 0203 	sub.w	r2, r2, r3
 80009c8:	ea80 0c01 	eor.w	ip, r0, r1
 80009cc:	0249      	lsls	r1, r1, #9
 80009ce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80009d2:	d037      	beq.n	8000a44 <__aeabi_fdiv+0x98>
 80009d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009d8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80009dc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80009e0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009e4:	428b      	cmp	r3, r1
 80009e6:	bf38      	it	cc
 80009e8:	005b      	lslcc	r3, r3, #1
 80009ea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80009ee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80009f2:	428b      	cmp	r3, r1
 80009f4:	bf24      	itt	cs
 80009f6:	1a5b      	subcs	r3, r3, r1
 80009f8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009fc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a00:	bf24      	itt	cs
 8000a02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a0e:	bf24      	itt	cs
 8000a10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a1c:	bf24      	itt	cs
 8000a1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a26:	011b      	lsls	r3, r3, #4
 8000a28:	bf18      	it	ne
 8000a2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a2e:	d1e0      	bne.n	80009f2 <__aeabi_fdiv+0x46>
 8000a30:	2afd      	cmp	r2, #253	; 0xfd
 8000a32:	f63f af50 	bhi.w	80008d6 <__aeabi_fmul+0x92>
 8000a36:	428b      	cmp	r3, r1
 8000a38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a3c:	bf08      	it	eq
 8000a3e:	f020 0001 	biceq.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4c:	327f      	adds	r2, #127	; 0x7f
 8000a4e:	bfc2      	ittt	gt
 8000a50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a58:	4770      	bxgt	lr
 8000a5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5e:	f04f 0300 	mov.w	r3, #0
 8000a62:	3a01      	subs	r2, #1
 8000a64:	e737      	b.n	80008d6 <__aeabi_fmul+0x92>
 8000a66:	f092 0f00 	teq	r2, #0
 8000a6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a6e:	bf02      	ittt	eq
 8000a70:	0040      	lsleq	r0, r0, #1
 8000a72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a76:	3a01      	subeq	r2, #1
 8000a78:	d0f9      	beq.n	8000a6e <__aeabi_fdiv+0xc2>
 8000a7a:	ea40 000c 	orr.w	r0, r0, ip
 8000a7e:	f093 0f00 	teq	r3, #0
 8000a82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a86:	bf02      	ittt	eq
 8000a88:	0049      	lsleq	r1, r1, #1
 8000a8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a8e:	3b01      	subeq	r3, #1
 8000a90:	d0f9      	beq.n	8000a86 <__aeabi_fdiv+0xda>
 8000a92:	ea41 010c 	orr.w	r1, r1, ip
 8000a96:	e795      	b.n	80009c4 <__aeabi_fdiv+0x18>
 8000a98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a9c:	ea92 0f0c 	teq	r2, ip
 8000aa0:	d108      	bne.n	8000ab4 <__aeabi_fdiv+0x108>
 8000aa2:	0242      	lsls	r2, r0, #9
 8000aa4:	f47f af7d 	bne.w	80009a2 <__aeabi_fmul+0x15e>
 8000aa8:	ea93 0f0c 	teq	r3, ip
 8000aac:	f47f af70 	bne.w	8000990 <__aeabi_fmul+0x14c>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	e776      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ab4:	ea93 0f0c 	teq	r3, ip
 8000ab8:	d104      	bne.n	8000ac4 <__aeabi_fdiv+0x118>
 8000aba:	024b      	lsls	r3, r1, #9
 8000abc:	f43f af4c 	beq.w	8000958 <__aeabi_fmul+0x114>
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	e76e      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ac4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ac8:	bf18      	it	ne
 8000aca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ace:	d1ca      	bne.n	8000a66 <__aeabi_fdiv+0xba>
 8000ad0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ad4:	f47f af5c 	bne.w	8000990 <__aeabi_fmul+0x14c>
 8000ad8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000adc:	f47f af3c 	bne.w	8000958 <__aeabi_fmul+0x114>
 8000ae0:	e75f      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ae2:	bf00      	nop

08000ae4 <ToggleLDAC>:
// Подключение заголовочного файла
#include <DAC_AD5322.h>

//--------------------------------------------------------------------------
// Необходим для загрузки значений в ЦАП
void ToggleLDAC() {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2102      	movs	r1, #2
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <ToggleLDAC+0x1c>)
 8000aee:	f003 fa3a 	bl	8003f66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	2102      	movs	r1, #2
 8000af6:	4802      	ldr	r0, [pc, #8]	; (8000b00 <ToggleLDAC+0x1c>)
 8000af8:	f003 fa35 	bl	8003f66 <HAL_GPIO_WritePin>
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40010800 	.word	0x40010800

08000b04 <SendSPI>:
//--------------------------------------------------------------------------
void SendSPI(SPI_HandleTypeDef *pSPI,uint16_t out){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	807b      	strh	r3, [r7, #2]

  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2110      	movs	r1, #16
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <SendSPI+0x34>)
 8000b16:	f003 fa26 	bl	8003f66 <HAL_GPIO_WritePin>

  	// Передача значений в цап
  	//out	= 0b0100000111111111;
  	HAL_SPI_Transmit(pSPI, (uint8_t*)(&out), 1, 1);
 8000b1a:	1cb9      	adds	r1, r7, #2
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	2201      	movs	r2, #1
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f005 fbcd 	bl	80062c0 <HAL_SPI_Transmit>

  	// запепрет передачи CS
  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2110      	movs	r1, #16
 8000b2a:	4803      	ldr	r0, [pc, #12]	; (8000b38 <SendSPI+0x34>)
 8000b2c:	f003 fa1b 	bl	8003f66 <HAL_GPIO_WritePin>

}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40010800 	.word	0x40010800

08000b3c <DAC_AD5322_Ch1>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала А
void DAC_AD5322_Ch1(SPI_HandleTypeDef *pSPI, uint16_t data_ch1) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	807b      	strh	r3, [r7, #2]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000b48:	887b      	ldrh	r3, [r7, #2]
 8000b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b4e:	d302      	bcc.n	8000b56 <DAC_AD5322_Ch1+0x1a>
 8000b50:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000b54:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000b56:	2300      	movs	r3, #0
 8000b58:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000b5e:	2300      	movs	r3, #0
 8000b60:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000b62:	2300      	movs	r3, #0
 8000b64:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000b66:	8afb      	ldrh	r3, [r7, #22]
 8000b68:	03db      	lsls	r3, r3, #15
 8000b6a:	b21a      	sxth	r2, r3
 8000b6c:	8abb      	ldrh	r3, [r7, #20]
 8000b6e:	039b      	lsls	r3, r3, #14
 8000b70:	b21b      	sxth	r3, r3
 8000b72:	4313      	orrs	r3, r2
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	8a7b      	ldrh	r3, [r7, #18]
 8000b78:	035b      	lsls	r3, r3, #13
 8000b7a:	b21b      	sxth	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b21a      	sxth	r2, r3
 8000b80:	8a3b      	ldrh	r3, [r7, #16]
 8000b82:	031b      	lsls	r3, r3, #12
 8000b84:	b21b      	sxth	r3, r3
 8000b86:	4313      	orrs	r3, r2
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000b8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b90:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000b94:	f023 030f 	bic.w	r3, r3, #15
 8000b98:	b21a      	sxth	r2, r3
 8000b9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ba2:	b21b      	sxth	r3, r3
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	b21b      	sxth	r3, r3
 8000ba8:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000baa:	89bb      	ldrh	r3, [r7, #12]
 8000bac:	4619      	mov	r1, r3
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ffa8 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000bb4:	89bb      	ldrh	r3, [r7, #12]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ffa3 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000bbe:	f7ff ff91 	bl	8000ae4 <ToggleLDAC>
}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <DAC_AD5322_Ch2>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала В
void DAC_AD5322_Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch2) {
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	807b      	strh	r3, [r7, #2]

	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 8000bd6:	887b      	ldrh	r3, [r7, #2]
 8000bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bdc:	d302      	bcc.n	8000be4 <DAC_AD5322_Ch2+0x1a>
 8000bde:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000be2:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000be4:	2301      	movs	r3, #1
 8000be6:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000be8:	2301      	movs	r3, #1
 8000bea:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000bec:	2300      	movs	r3, #0
 8000bee:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000bf4:	8afb      	ldrh	r3, [r7, #22]
 8000bf6:	03db      	lsls	r3, r3, #15
 8000bf8:	b21a      	sxth	r2, r3
 8000bfa:	8abb      	ldrh	r3, [r7, #20]
 8000bfc:	039b      	lsls	r3, r3, #14
 8000bfe:	b21b      	sxth	r3, r3
 8000c00:	4313      	orrs	r3, r2
 8000c02:	b21a      	sxth	r2, r3
 8000c04:	8a7b      	ldrh	r3, [r7, #18]
 8000c06:	035b      	lsls	r3, r3, #13
 8000c08:	b21b      	sxth	r3, r3
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	b21a      	sxth	r2, r3
 8000c0e:	8a3b      	ldrh	r3, [r7, #16]
 8000c10:	031b      	lsls	r3, r3, #12
 8000c12:	b21b      	sxth	r3, r3
 8000c14:	4313      	orrs	r3, r2
 8000c16:	b21b      	sxth	r3, r3
 8000c18:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000c1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c1e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000c22:	f023 030f 	bic.w	r3, r3, #15
 8000c26:	b21a      	sxth	r2, r3
 8000c28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000c38:	89bb      	ldrh	r3, [r7, #12]
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ff61 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000c42:	89bb      	ldrh	r3, [r7, #12]
 8000c44:	4619      	mov	r1, r3
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ff5c 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000c4c:	f7ff ff4a 	bl	8000ae4 <ToggleLDAC>
}
 8000c50:	bf00      	nop
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <DAC_AD5322_Ch1Ch2>:
//--------------------------------------------------------------------------
void DAC_AD5322_Ch1Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch1, uint16_t data_ch2) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	807b      	strh	r3, [r7, #2]
 8000c64:	4613      	mov	r3, r2
 8000c66:	803b      	strh	r3, [r7, #0]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000c68:	887b      	ldrh	r3, [r7, #2]
 8000c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c6e:	d302      	bcc.n	8000c76 <DAC_AD5322_Ch1Ch2+0x1e>
 8000c70:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000c74:	807b      	strh	r3, [r7, #2]
	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 8000c76:	883b      	ldrh	r3, [r7, #0]
 8000c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c7c:	d302      	bcc.n	8000c84 <DAC_AD5322_Ch1Ch2+0x2c>
 8000c7e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000c82:	803b      	strh	r3, [r7, #0]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000c84:	2300      	movs	r3, #0
 8000c86:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000c88:	2301      	movs	r3, #1
 8000c8a:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000c90:	2300      	movs	r3, #0
 8000c92:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000c94:	8afb      	ldrh	r3, [r7, #22]
 8000c96:	03db      	lsls	r3, r3, #15
 8000c98:	b21a      	sxth	r2, r3
 8000c9a:	8abb      	ldrh	r3, [r7, #20]
 8000c9c:	039b      	lsls	r3, r3, #14
 8000c9e:	b21b      	sxth	r3, r3
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	b21a      	sxth	r2, r3
 8000ca4:	8a7b      	ldrh	r3, [r7, #18]
 8000ca6:	035b      	lsls	r3, r3, #13
 8000ca8:	b21b      	sxth	r3, r3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b21a      	sxth	r2, r3
 8000cae:	8a3b      	ldrh	r3, [r7, #16]
 8000cb0:	031b      	lsls	r3, r3, #12
 8000cb2:	b21b      	sxth	r3, r3
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	b21b      	sxth	r3, r3
 8000cb8:	81fb      	strh	r3, [r7, #14]
	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000cba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cbe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000cc2:	f023 030f 	bic.w	r3, r3, #15
 8000cc6:	b21a      	sxth	r2, r3
 8000cc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	81bb      	strh	r3, [r7, #12]

  	SendSPI(pSPI,out);
 8000cd8:	89bb      	ldrh	r3, [r7, #12]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ff11 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000ce2:	89bb      	ldrh	r3, [r7, #12]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff ff0c 	bl	8000b04 <SendSPI>
  	//--------------------------------------------------------------------------
  	chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000cec:	2301      	movs	r3, #1
 8000cee:	82fb      	strh	r3, [r7, #22]
  	bufferVref 	= 1;	// bit 14: усилитель VREF?
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	82bb      	strh	r3, [r7, #20]
  	PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	827b      	strh	r3, [r7, #18]
  	PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	823b      	strh	r3, [r7, #16]

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000cfc:	8afb      	ldrh	r3, [r7, #22]
 8000cfe:	03db      	lsls	r3, r3, #15
 8000d00:	b21a      	sxth	r2, r3
 8000d02:	8abb      	ldrh	r3, [r7, #20]
 8000d04:	039b      	lsls	r3, r3, #14
 8000d06:	b21b      	sxth	r3, r3
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	b21a      	sxth	r2, r3
 8000d0c:	8a7b      	ldrh	r3, [r7, #18]
 8000d0e:	035b      	lsls	r3, r3, #13
 8000d10:	b21b      	sxth	r3, r3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	b21a      	sxth	r2, r3
 8000d16:	8a3b      	ldrh	r3, [r7, #16]
 8000d18:	031b      	lsls	r3, r3, #12
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	b21b      	sxth	r3, r3
 8000d20:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000d22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d26:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000d2a:	f023 030f 	bic.w	r3, r3, #15
 8000d2e:	b21a      	sxth	r2, r3
 8000d30:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d38:	b21b      	sxth	r3, r3
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	b21b      	sxth	r3, r3
 8000d3e:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000d40:	89bb      	ldrh	r3, [r7, #12]
 8000d42:	4619      	mov	r1, r3
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff fedd 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000d4a:	89bb      	ldrh	r3, [r7, #12]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff fed8 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000d54:	f7ff fec6 	bl	8000ae4 <ToggleLDAC>
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <volt2dgt>:
// floor()
// Пример: 
// Следующий фрагмент кода выводит на экран «10»:
// printf("%f", floor(10.9));

uint16_t volt2dgt(Table_t *calibTable, int16_t volt){
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	807b      	strh	r3, [r7, #2]

// TODO: Нужно ли учитывать Ктр? volt = volt*Ktr 
float count = (abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/STEP_CALIBRATE;
 8000d6c:	4b3f      	ldr	r3, [pc, #252]	; (8000e6c <volt2dgt+0x10c>)
 8000d6e:	60fb      	str	r3, [r7, #12]
uint16_t y = (floor((count*abs(MIN_VOLT_MODE_12))/(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/abs(MIN_VOLT_MODE_12)*volt+(count*abs(MIN_VOLT_MODE_12))/(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12)))); // искомый индекс в массиве!!! найти минимальное значение от него 26.5-->26 через floor
 8000d70:	493f      	ldr	r1, [pc, #252]	; (8000e70 <volt2dgt+0x110>)
 8000d72:	68f8      	ldr	r0, [r7, #12]
 8000d74:	f7ff fd66 	bl	8000844 <__aeabi_fmul>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	493e      	ldr	r1, [pc, #248]	; (8000e74 <volt2dgt+0x114>)
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fe15 	bl	80009ac <__aeabi_fdiv>
 8000d82:	4603      	mov	r3, r0
 8000d84:	493a      	ldr	r1, [pc, #232]	; (8000e70 <volt2dgt+0x110>)
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fe10 	bl	80009ac <__aeabi_fdiv>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461c      	mov	r4, r3
 8000d90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fd01 	bl	800079c <__aeabi_i2f>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4620      	mov	r0, r4
 8000da0:	f7ff fd50 	bl	8000844 <__aeabi_fmul>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461c      	mov	r4, r3
 8000da8:	4931      	ldr	r1, [pc, #196]	; (8000e70 <volt2dgt+0x110>)
 8000daa:	68f8      	ldr	r0, [r7, #12]
 8000dac:	f7ff fd4a 	bl	8000844 <__aeabi_fmul>
 8000db0:	4603      	mov	r3, r0
 8000db2:	4930      	ldr	r1, [pc, #192]	; (8000e74 <volt2dgt+0x114>)
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fdf9 	bl	80009ac <__aeabi_fdiv>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	f7ff fc38 	bl	8000634 <__addsf3>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fb2e 	bl	8000428 <__aeabi_f2d>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f00b fc38 	bl	800c648 <floor>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4610      	mov	r0, r2
 8000dde:	4619      	mov	r1, r3
 8000de0:	f7ff fc02 	bl	80005e8 <__aeabi_d2uiz>
 8000de4:	4603      	mov	r3, r0
 8000de6:	817b      	strh	r3, [r7, #10]
uint16_t CodeX = (((calibTable->dacValA_m12[y+1+1]-calibTable->dacValA_m12[y])/(((y+1+1) * STEP_CALIBRATE) -abs( MIN_VOLT_MODE_12)-((y+1) * STEP_CALIBRATE) - abs( MIN_VOLT_MODE_12))))*(volt-((y+1) * STEP_CALIBRATE) - abs( MIN_VOLT_MODE_12))+calibTable->dacValA_m12[y+1];
 8000de8:	897b      	ldrh	r3, [r7, #10]
 8000dea:	3302      	adds	r3, #2
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	3304      	adds	r3, #4
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	4413      	add	r3, r2
 8000df4:	889b      	ldrh	r3, [r3, #4]
 8000df6:	4619      	mov	r1, r3
 8000df8:	897b      	ldrh	r3, [r7, #10]
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	4413      	add	r3, r2
 8000e02:	889b      	ldrh	r3, [r3, #4]
 8000e04:	1aca      	subs	r2, r1, r3
 8000e06:	897b      	ldrh	r3, [r7, #10]
 8000e08:	3302      	adds	r3, #2
 8000e0a:	21c8      	movs	r1, #200	; 0xc8
 8000e0c:	fb01 f303 	mul.w	r3, r1, r3
 8000e10:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000e14:	3b08      	subs	r3, #8
 8000e16:	8979      	ldrh	r1, [r7, #10]
 8000e18:	3101      	adds	r1, #1
 8000e1a:	f06f 00c7 	mvn.w	r0, #199	; 0xc7
 8000e1e:	fb00 f101 	mul.w	r1, r0, r1
 8000e22:	440b      	add	r3, r1
 8000e24:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000e28:	3b08      	subs	r3, #8
 8000e2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000e34:	897b      	ldrh	r3, [r7, #10]
 8000e36:	3301      	adds	r3, #1
 8000e38:	f06f 00c7 	mvn.w	r0, #199	; 0xc7
 8000e3c:	fb00 f303 	mul.w	r3, r0, r3
 8000e40:	440b      	add	r3, r1
 8000e42:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000e46:	3b08      	subs	r3, #8
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	fb03 f302 	mul.w	r3, r3, r2
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	897b      	ldrh	r3, [r7, #10]
 8000e52:	3301      	adds	r3, #1
 8000e54:	6879      	ldr	r1, [r7, #4]
 8000e56:	3304      	adds	r3, #4
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	440b      	add	r3, r1
 8000e5c:	889b      	ldrh	r3, [r3, #4]
 8000e5e:	4413      	add	r3, r2
 8000e60:	813b      	strh	r3, [r7, #8]
	return CodeX;
 8000e62:	893b      	ldrh	r3, [r7, #8]





}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd90      	pop	{r4, r7, pc}
 8000e6c:	42aa0000 	.word	0x42aa0000
 8000e70:	459c4000 	.word	0x459c4000
 8000e74:	4684d000 	.word	0x4684d000

08000e78 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e80:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e84:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d013      	beq.n	8000eb8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e90:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e94:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000e98:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d00b      	beq.n	8000eb8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ea0:	e000      	b.n	8000ea4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ea2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ea4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0f9      	beq.n	8000ea2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000eae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000eb8:	687b      	ldr	r3, [r7, #4]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <DWT_Init>:
#define SCB_DEMCR   *(volatile unsigned long *)0xE000EDFC

/******************************************************************************/
/* inline func */
__STATIC_INLINE void DWT_Init(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <DWT_Init+0x24>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <DWT_Init+0x24>)
 8000ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ed2:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <DWT_Init+0x28>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a04      	ldr	r2, [pc, #16]	; (8000eec <DWT_Init+0x28>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr
 8000ee8:	e000edf0 	.word	0xe000edf0
 8000eec:	e0001000 	.word	0xe0001000

08000ef0 <_write>:
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */
//**************************************************************************
#if DEBUG_SWO
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	e009      	b.n	8000f16 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	1c5a      	adds	r2, r3, #1
 8000f06:	60ba      	str	r2, [r7, #8]
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ffb4 	bl	8000e78 <ITM_SendChar>
	for (int i = 0; i < len; i++)
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	3301      	adds	r3, #1
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	dbf1      	blt.n	8000f02 <_write+0x12>
	}
	return len;
 8000f1e:	687b      	ldr	r3, [r7, #4]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <getCRC_table_a_m12>:
//--------------------------------------------------------------------------
FLASH_EraseInitTypeDef EraseInitStruct;		  // структура для очистки флеша
union NVRAM DevNVRAM;
//--------------------------------------------------------------------------
uint32_t getCRC_table_a_m12()
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
	//	uint16_t len_ = sizeof(aqrr)/(sizeof(uint32_t)*2);
	uint32_t crc = HAL_CRC_Calculate(&hcrc, &DevNVRAM.calibration_table.dacValA_m12, sizeof(DevNVRAM.calibration_table.dacValA_m12) / (sizeof(uint32_t) * 2));
 8000f2e:	2216      	movs	r2, #22
 8000f30:	4906      	ldr	r1, [pc, #24]	; (8000f4c <getCRC_table_a_m12+0x24>)
 8000f32:	4807      	ldr	r0, [pc, #28]	; (8000f50 <getCRC_table_a_m12+0x28>)
 8000f34:	f002 fc49 	bl	80037ca <HAL_CRC_Calculate>
 8000f38:	6078      	str	r0, [r7, #4]
	HAL_Delay(1);
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f001 fe68 	bl	8002c10 <HAL_Delay>
	return crc;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200004b0 	.word	0x200004b0
 8000f50:	200008ec 	.word	0x200008ec

08000f54 <SetDacA>:
}
//--------------------------------------------------------------------------

//**************************************************************************
void SetDacA(int16_t da)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	80fb      	strh	r3, [r7, #6]
	VDAC_A = volt2dgt(&(DevNVRAM.calibration_table), da);
 8000f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f62:	4619      	mov	r1, r3
 8000f64:	4808      	ldr	r0, [pc, #32]	; (8000f88 <SetDacA+0x34>)
 8000f66:	f7ff fefb 	bl	8000d60 <volt2dgt>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <SetDacA+0x38>)
 8000f70:	801a      	strh	r2, [r3, #0]
	DAC_AD5322_Ch1(&hspi1, VDAC_A);
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <SetDacA+0x38>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	4619      	mov	r1, r3
 8000f78:	4805      	ldr	r0, [pc, #20]	; (8000f90 <SetDacA+0x3c>)
 8000f7a:	f7ff fddf 	bl	8000b3c <DAC_AD5322_Ch1>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200004a4 	.word	0x200004a4
 8000f8c:	2000024c 	.word	0x2000024c
 8000f90:	2000097c 	.word	0x2000097c

08000f94 <SetDacB>:
void SetDacB(int16_t db)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	80fb      	strh	r3, [r7, #6]
	VDAC_B = volt2dgt(&(DevNVRAM.calibration_table), db);
 8000f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4808      	ldr	r0, [pc, #32]	; (8000fc8 <SetDacB+0x34>)
 8000fa6:	f7ff fedb 	bl	8000d60 <volt2dgt>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <SetDacB+0x38>)
 8000fb0:	801a      	strh	r2, [r3, #0]
	DAC_AD5322_Ch2(&hspi1, VDAC_B);
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <SetDacB+0x38>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <SetDacB+0x3c>)
 8000fba:	f7ff fe06 	bl	8000bca <DAC_AD5322_Ch2>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200004a4 	.word	0x200004a4
 8000fcc:	2000024e 	.word	0x2000024e
 8000fd0:	2000097c 	.word	0x2000097c

08000fd4 <SetAllDAC>:
void SetAllDAC()
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	DAC_AD5322_Ch1Ch2(&hspi1, VDAC_A, VDAC_B);
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <SetAllDAC+0x18>)
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <SetAllDAC+0x1c>)
 8000fde:	8812      	ldrh	r2, [r2, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <SetAllDAC+0x20>)
 8000fe4:	f7ff fe38 	bl	8000c58 <DAC_AD5322_Ch1Ch2>
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	2000024c 	.word	0x2000024c
 8000ff0:	2000024e 	.word	0x2000024e
 8000ff4:	2000097c 	.word	0x2000097c

08000ff8 <GetDacA>:
uint16_t GetDacA()
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
	return VDAC_A;
 8000ffc:	4b02      	ldr	r3, [pc, #8]	; (8001008 <GetDacA+0x10>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	2000024c 	.word	0x2000024c

0800100c <GetDacB>:
uint16_t GetDacB()
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
	return VDAC_B;
 8001010:	4b02      	ldr	r3, [pc, #8]	; (800101c <GetDacB+0x10>)
 8001012:	881b      	ldrh	r3, [r3, #0]
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	2000024e 	.word	0x2000024e

08001020 <GetBtnRunState>:

uint8_t btn3_long_rd = 0;
uint8_t btn3_short_rd = 0;
//--------------------------------------------------------------------------
uint8_t GetBtnRunState()
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x00)
 8001024:	4b1d      	ldr	r3, [pc, #116]	; (800109c <GetBtnRunState+0x7c>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d10b      	bne.n	8001044 <GetBtnRunState+0x24>
 800102c:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <GetBtnRunState+0x80>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d107      	bne.n	8001044 <GetBtnRunState+0x24>
	{
		btn1_long_rd = 0;
 8001034:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <GetBtnRunState+0x80>)
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <GetBtnRunState+0x7c>)
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8001040:	2300      	movs	r3, #0
 8001042:	e026      	b.n	8001092 <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x01 && btn1_long_rd == 0x00)
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <GetBtnRunState+0x7c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d10b      	bne.n	8001064 <GetBtnRunState+0x44>
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <GetBtnRunState+0x80>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d107      	bne.n	8001064 <GetBtnRunState+0x44>
	{
		btn1_long_rd = 0;
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <GetBtnRunState+0x80>)
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <GetBtnRunState+0x7c>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
		return 0x01;
 8001060:	2301      	movs	r3, #1
 8001062:	e016      	b.n	8001092 <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x01)
 8001064:	4b0d      	ldr	r3, [pc, #52]	; (800109c <GetBtnRunState+0x7c>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d10b      	bne.n	8001084 <GetBtnRunState+0x64>
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <GetBtnRunState+0x80>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d107      	bne.n	8001084 <GetBtnRunState+0x64>
	{
		btn1_long_rd = 0;
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <GetBtnRunState+0x80>)
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <GetBtnRunState+0x7c>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
		return 0x02;
 8001080:	2302      	movs	r3, #2
 8001082:	e006      	b.n	8001092 <GetBtnRunState+0x72>
	}

	btn1_long_rd = 0;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <GetBtnRunState+0x80>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
	btn1_short_rd = 0;
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <GetBtnRunState+0x7c>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]

	//	if (short_state1 == 0x00 && long_state1 == 0x00)	return 0x00;
	//	if (short_state1 == 0x01 && long_state1 == 0x00)	return 0x01;
	//	if (short_state1 == 0x00 && long_state1 == 0x01)	return 0x02;
	return 0x00;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000259 	.word	0x20000259
 80010a0:	20000258 	.word	0x20000258

080010a4 <GetBtnUpState>:
//--------------------------------------------------------------------------
uint8_t GetBtnUpState()
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x00)
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <GetBtnUpState+0x7c>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d10b      	bne.n	80010c8 <GetBtnUpState+0x24>
 80010b0:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <GetBtnUpState+0x80>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d107      	bne.n	80010c8 <GetBtnUpState+0x24>
	{
		btn2_long_rd = 0;
 80010b8:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <GetBtnUpState+0x80>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <GetBtnUpState+0x7c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
		return 0x00;
 80010c4:	2300      	movs	r3, #0
 80010c6:	e026      	b.n	8001116 <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x01 && btn2_long_rd == 0x00)
 80010c8:	4b15      	ldr	r3, [pc, #84]	; (8001120 <GetBtnUpState+0x7c>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d10b      	bne.n	80010e8 <GetBtnUpState+0x44>
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <GetBtnUpState+0x80>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d107      	bne.n	80010e8 <GetBtnUpState+0x44>
	{
		btn2_long_rd = 0;
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <GetBtnUpState+0x80>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <GetBtnUpState+0x7c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
		return 0x01;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e016      	b.n	8001116 <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x01)
 80010e8:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <GetBtnUpState+0x7c>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d10b      	bne.n	8001108 <GetBtnUpState+0x64>
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <GetBtnUpState+0x80>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d107      	bne.n	8001108 <GetBtnUpState+0x64>
	{
		btn2_long_rd = 0;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <GetBtnUpState+0x80>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <GetBtnUpState+0x7c>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
		return 0x02;
 8001104:	2302      	movs	r3, #2
 8001106:	e006      	b.n	8001116 <GetBtnUpState+0x72>
	}

	btn2_long_rd = 0;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <GetBtnUpState+0x80>)
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
	btn2_short_rd = 0;
 800110e:	4b04      	ldr	r3, [pc, #16]	; (8001120 <GetBtnUpState+0x7c>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
	//	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	//	if (short_state2 == 0x00 && long_state2 == 0x00)	return 0x00;
	//	if (short_state2 == 0x01 && long_state2 == 0x00)	return 0x01;
	//	if (short_state2 == 0x00 && long_state2 == 0x01)	return 0x02;
	return 0x00;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000261 	.word	0x20000261
 8001124:	20000260 	.word	0x20000260

08001128 <GetBtnDownState>:
//--------------------------------------------------------------------------
uint8_t GetBtnDownState()
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x00)
 800112c:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <GetBtnDownState+0x7c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d10b      	bne.n	800114c <GetBtnDownState+0x24>
 8001134:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <GetBtnDownState+0x80>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d107      	bne.n	800114c <GetBtnDownState+0x24>
	{
		btn3_long_rd = 0;
 800113c:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <GetBtnDownState+0x80>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <GetBtnDownState+0x7c>)
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8001148:	2300      	movs	r3, #0
 800114a:	e026      	b.n	800119a <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x01 && btn3_long_rd == 0x00)
 800114c:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <GetBtnDownState+0x7c>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d10b      	bne.n	800116c <GetBtnDownState+0x44>
 8001154:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <GetBtnDownState+0x80>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d107      	bne.n	800116c <GetBtnDownState+0x44>
	{
		btn3_long_rd = 0;
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <GetBtnDownState+0x80>)
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <GetBtnDownState+0x7c>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
		return 0x01;
 8001168:	2301      	movs	r3, #1
 800116a:	e016      	b.n	800119a <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x01)
 800116c:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <GetBtnDownState+0x7c>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10b      	bne.n	800118c <GetBtnDownState+0x64>
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <GetBtnDownState+0x80>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d107      	bne.n	800118c <GetBtnDownState+0x64>
	{
		btn3_long_rd = 0;
 800117c:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <GetBtnDownState+0x80>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <GetBtnDownState+0x7c>)
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
		return 0x02;
 8001188:	2302      	movs	r3, #2
 800118a:	e006      	b.n	800119a <GetBtnDownState+0x72>
	}

	btn3_long_rd = 0;
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <GetBtnDownState+0x80>)
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
	btn3_short_rd = 0;
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <GetBtnDownState+0x7c>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
	//	if (short_state3 == 0x00 && long_state3 == 0x00)	return 0x00;
	//	if (short_state3 == 0x01 && long_state3 == 0x00)	return 0x01;
	//	if (short_state3 == 0x00 && long_state3 == 0x01)	return 0x02;
	return 0x00;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	20000269 	.word	0x20000269
 80011a8:	20000268 	.word	0x20000268

080011ac <EnableTIM3_PB4>:
// char trans2_str[64] = {
// 	0,
// };
//--------------------------------------------------------------------------
void EnableTIM3_PB4()
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
	timWork = 1;
 80011b0:	4b03      	ldr	r3, [pc, #12]	; (80011c0 <EnableTIM3_PB4+0x14>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	2000026a 	.word	0x2000026a

080011c4 <GetTIM3>:
uint16_t GetTIM3()
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
	return g_vTIM3_PB4;
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <GetTIM3+0x14>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	b29b      	uxth	r3, r3
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	2000026c 	.word	0x2000026c

080011dc <resValTIM3_PB4>:
void resValTIM3_PB4()
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
	g_vTIM3_PB4 = 0;
 80011e0:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <resValTIM3_PB4+0x14>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	801a      	strh	r2, [r3, #0]
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	2000026c 	.word	0x2000026c

080011f4 <EnableTIM4_PB6>:
//--------------------------------------------------------------------------
void EnableTIM4_PB6()
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
	timWork = 0;
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <EnableTIM4_PB6+0x14>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	2000026a 	.word	0x2000026a

0800120c <GetTIM4>:
uint16_t GetTIM4()
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
	return g_vTIM4_PB6;
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <GetTIM4+0x14>)
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	b29b      	uxth	r3, r3
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	2000026e 	.word	0x2000026e

08001224 <resValTIM4_PB6>:
void resValTIM4_PB6()
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
	g_vTIM4_PB6 = 0;
 8001228:	4b03      	ldr	r3, [pc, #12]	; (8001238 <resValTIM4_PB6+0x14>)
 800122a:	2200      	movs	r2, #0
 800122c:	801a      	strh	r2, [r3, #0]
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	2000026e 	.word	0x2000026e

0800123c <HAL_TIM_IC_CaptureCallback>:
//--------------------------------------------------------------------------
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	uint16_t periodTIM3, pulseWidthTIM3, periodTIM4, pulseWidthTIM4;

	if (timWork)
 8001244:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d027      	beq.n	800129e <HAL_TIM_IC_CaptureCallback+0x62>
	{
		if (htim->Instance == TIM3)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a29      	ldr	r2, [pc, #164]	; (80012f8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d149      	bne.n	80012ec <HAL_TIM_IC_CaptureCallback+0xb0>
		{
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	7f1b      	ldrb	r3, [r3, #28]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d145      	bne.n	80012ec <HAL_TIM_IC_CaptureCallback+0xb0>
			{
				periodTIM3 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8001260:	2100      	movs	r1, #0
 8001262:	4826      	ldr	r0, [pc, #152]	; (80012fc <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001264:	f005 fd00 	bl	8006c68 <HAL_TIM_ReadCapturedValue>
 8001268:	4603      	mov	r3, r0
 800126a:	823b      	strh	r3, [r7, #16]
				pulseWidthTIM3 = HAL_TIM_ReadCapturedValue(&htim3,
 800126c:	2104      	movs	r1, #4
 800126e:	4823      	ldr	r0, [pc, #140]	; (80012fc <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001270:	f005 fcfa 	bl	8006c68 <HAL_TIM_ReadCapturedValue>
 8001274:	4603      	mov	r3, r0
 8001276:	81fb      	strh	r3, [r7, #14]
														   TIM_CHANNEL_2);

				TIM3->CNT = 0;
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	; 0x24

				int16_t deltaTIM3 = (int16_t)periodTIM3 - (int16_t)pulseWidthTIM3;
 800127e:	8a3a      	ldrh	r2, [r7, #16]
 8001280:	89fb      	ldrh	r3, [r7, #14]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	b29b      	uxth	r3, r3
 8001286:	81bb      	strh	r3, [r7, #12]
				deltaTIM3 = (deltaTIM3 < 0) ? (-1 * deltaTIM3) : deltaTIM3;
 8001288:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800128c:	2b00      	cmp	r3, #0
 800128e:	bfb8      	it	lt
 8001290:	425b      	neglt	r3, r3
 8001292:	b29b      	uxth	r3, r3
 8001294:	81bb      	strh	r3, [r7, #12]
				g_vTIM3_PB4 = deltaTIM3;
 8001296:	89ba      	ldrh	r2, [r7, #12]
 8001298:	4b19      	ldr	r3, [pc, #100]	; (8001300 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800129a:	801a      	strh	r2, [r3, #0]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
				g_vTIM4_PB6 = deltaTIM4;
			}
		}
	}
}
 800129c:	e026      	b.n	80012ec <HAL_TIM_IC_CaptureCallback+0xb0>
		if (htim->Instance == TIM4)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a18      	ldr	r2, [pc, #96]	; (8001304 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d121      	bne.n	80012ec <HAL_TIM_IC_CaptureCallback+0xb0>
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	7f1b      	ldrb	r3, [r3, #28]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d11d      	bne.n	80012ec <HAL_TIM_IC_CaptureCallback+0xb0>
				periodTIM4 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 80012b0:	2100      	movs	r1, #0
 80012b2:	4815      	ldr	r0, [pc, #84]	; (8001308 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80012b4:	f005 fcd8 	bl	8006c68 <HAL_TIM_ReadCapturedValue>
 80012b8:	4603      	mov	r3, r0
 80012ba:	82fb      	strh	r3, [r7, #22]
				pulseWidthTIM4 = HAL_TIM_ReadCapturedValue(&htim4,
 80012bc:	2104      	movs	r1, #4
 80012be:	4812      	ldr	r0, [pc, #72]	; (8001308 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80012c0:	f005 fcd2 	bl	8006c68 <HAL_TIM_ReadCapturedValue>
 80012c4:	4603      	mov	r3, r0
 80012c6:	82bb      	strh	r3, [r7, #20]
				TIM4->CNT = 0;
 80012c8:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	625a      	str	r2, [r3, #36]	; 0x24
				int16_t deltaTIM4 = (int16_t)periodTIM4 - (int16_t)pulseWidthTIM4;
 80012ce:	8afa      	ldrh	r2, [r7, #22]
 80012d0:	8abb      	ldrh	r3, [r7, #20]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	827b      	strh	r3, [r7, #18]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
 80012d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	bfb8      	it	lt
 80012e0:	425b      	neglt	r3, r3
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	827b      	strh	r3, [r7, #18]
				g_vTIM4_PB6 = deltaTIM4;
 80012e6:	8a7a      	ldrh	r2, [r7, #18]
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_TIM_IC_CaptureCallback+0xd0>)
 80012ea:	801a      	strh	r2, [r3, #0]
}
 80012ec:	bf00      	nop
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	2000026a 	.word	0x2000026a
 80012f8:	40000400 	.word	0x40000400
 80012fc:	200008f4 	.word	0x200008f4
 8001300:	2000026c 	.word	0x2000026c
 8001304:	40000800 	.word	0x40000800
 8001308:	200008a4 	.word	0x200008a4
 800130c:	2000026e 	.word	0x2000026e

08001310 <GetADC>:
//**************************************************************************
#if TEST_ADC
volatile uint16_t g_VADC = 0;

uint16_t GetADC()
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
	return g_VADC;
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <GetADC+0x14>)
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	b29b      	uxth	r3, r3
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000270 	.word	0x20000270

08001328 <HAL_ADC_ConvCpltCallback>:
//--------------------------------------------------------------------------
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a06      	ldr	r2, [pc, #24]	; (8001350 <HAL_ADC_ConvCpltCallback+0x28>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d106      	bne.n	8001348 <HAL_ADC_ConvCpltCallback+0x20>
	{
		g_VADC = HAL_ADC_GetValue(&hadc1); // глобальная переменна g_VADC вычитывается
 800133a:	4806      	ldr	r0, [pc, #24]	; (8001354 <HAL_ADC_ConvCpltCallback+0x2c>)
 800133c:	f001 fe1a 	bl	8002f74 <HAL_ADC_GetValue>
 8001340:	4603      	mov	r3, r0
 8001342:	b29a      	uxth	r2, r3
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <HAL_ADC_ConvCpltCallback+0x30>)
 8001346:	801a      	strh	r2, [r3, #0]
	}
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40012400 	.word	0x40012400
 8001354:	2000094c 	.word	0x2000094c
 8001358:	20000270 	.word	0x20000270

0800135c <writeTableInFlash>:
}
#endif /* USB_RESET */


//**************************************************************************
void writeTableInFlash() {
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0

	uint32_t l_Address = FLASH_TABLE_START_ADDR;
 8001362:	4b30      	ldr	r3, [pc, #192]	; (8001424 <writeTableInFlash+0xc8>)
 8001364:	60fb      	str	r3, [r7, #12]
	uint32_t l_Error = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
	uint32_t l_Index = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
	//Читаем и сравниваем
	while (l_Address < FLASH_TABLE_STOP_ADDR) {
 800136e:	e010      	b.n	8001392 <writeTableInFlash+0x36>
		if (&DevNVRAM.data32[l_Index] != *(volatile uint32_t*) l_Address) {
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4a2c      	ldr	r2, [pc, #176]	; (8001428 <writeTableInFlash+0xcc>)
 8001376:	4413      	add	r3, r2
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	6812      	ldr	r2, [r2, #0]
 800137c:	4293      	cmp	r3, r2
 800137e:	d002      	beq.n	8001386 <writeTableInFlash+0x2a>
			l_Error++;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3301      	adds	r3, #1
 8001384:	607b      	str	r3, [r7, #4]
		}
		l_Index = l_Index + 1;
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	3301      	adds	r3, #1
 800138a:	60bb      	str	r3, [r7, #8]
		l_Address = l_Address + 4;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	3304      	adds	r3, #4
 8001390:	60fb      	str	r3, [r7, #12]
	while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4a25      	ldr	r2, [pc, #148]	; (800142c <writeTableInFlash+0xd0>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d9ea      	bls.n	8001370 <writeTableInFlash+0x14>
	}
	// конфигурация изменилась сохраняем
	printf("Ошибка чтения таблицы :%i", l_Error);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4619      	mov	r1, r3
 800139e:	4824      	ldr	r0, [pc, #144]	; (8001430 <writeTableInFlash+0xd4>)
 80013a0:	f009 ffec 	bl	800b37c <iprintf>
	if (l_Error > 0) {
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d038      	beq.n	800141c <writeTableInFlash+0xc0>
		// конфигурация изменилась сохраняем
		// Готовим к записи в память
		HAL_FLASH_Unlock();
 80013aa:	f002 fab1 	bl	8003910 <HAL_FLASH_Unlock>
		// Очищаем страницу памяти
		HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	4619      	mov	r1, r3
 80013b2:	4820      	ldr	r0, [pc, #128]	; (8001434 <writeTableInFlash+0xd8>)
 80013b4:	f002 fb94 	bl	8003ae0 <HAL_FLASHEx_Erase>
		//Пишем данные в память
		l_Address = FLASH_TABLE_START_ADDR;
 80013b8:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <writeTableInFlash+0xc8>)
 80013ba:	60fb      	str	r3, [r7, #12]
		l_Error = 0x00;
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
		l_Index = 0x00;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60bb      	str	r3, [r7, #8]
		DevNVRAM.sector.NWrite = DevNVRAM.sector.NWrite + 1;
 80013c4:	4b18      	ldr	r3, [pc, #96]	; (8001428 <writeTableInFlash+0xcc>)
 80013c6:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 80013ca:	3301      	adds	r3, #1
 80013cc:	4a16      	ldr	r2, [pc, #88]	; (8001428 <writeTableInFlash+0xcc>)
 80013ce:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
		DevNVRAM.sector.CheckSum = 0; //HAL_CRC_Calculate(&hcrc, &DevNVRAM.calibration_table, (sizeof(DevNVRAM.calibration_table)/4));
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <writeTableInFlash+0xcc>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 80013da:	e019      	b.n	8001410 <writeTableInFlash+0xb4>
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
					&DevNVRAM.data32[l_Index]) != HAL_OK) {
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4a11      	ldr	r2, [pc, #68]	; (8001428 <writeTableInFlash+0xcc>)
 80013e2:	4413      	add	r3, r2
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 80013e4:	461a      	mov	r2, r3
 80013e6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80013ea:	68f9      	ldr	r1, [r7, #12]
 80013ec:	2002      	movs	r0, #2
 80013ee:	f002 fa1f 	bl	8003830 <HAL_FLASH_Program>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d002      	beq.n	80013fe <writeTableInFlash+0xa2>
				l_Error++;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3301      	adds	r3, #1
 80013fc:	607b      	str	r3, [r7, #4]
			}
			l_Address = l_Address + 4;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	3304      	adds	r3, #4
 8001402:	60fb      	str	r3, [r7, #12]
			l_Index = l_Index + 1;
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	3301      	adds	r3, #1
 8001408:	60bb      	str	r3, [r7, #8]
			HAL_Delay(10);
 800140a:	200a      	movs	r0, #10
 800140c:	f001 fc00 	bl	8002c10 <HAL_Delay>
		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4a06      	ldr	r2, [pc, #24]	; (800142c <writeTableInFlash+0xd0>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d9e1      	bls.n	80013dc <writeTableInFlash+0x80>
		}
		HAL_FLASH_Lock();
 8001418:	f002 faa0 	bl	800395c <HAL_FLASH_Lock>
	}
//	HAL_Delay(100);
}
 800141c:	bf00      	nop
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	0801fc00 	.word	0x0801fc00
 8001428:	200004a4 	.word	0x200004a4
 800142c:	0801ffff 	.word	0x0801ffff
 8001430:	0800c760 	.word	0x0800c760
 8001434:	2000093c 	.word	0x2000093c

08001438 <runCommands>:

bool RelayState = 0x00; //TODO: проверить первое состоянеи первоначальное состояние реле 27V
bool changeTableFlag = false;
void runCommands(uint8_t *Buf, uint32_t *Len)

{
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 800143e:	af00      	add	r7, sp, #0
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	6018      	str	r0, [r3, #0]
 8001444:	463b      	mov	r3, r7
 8001446:	6019      	str	r1, [r3, #0]
	if (*Len < 1)
 8001448:	463b      	mov	r3, r7
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 83f4 	beq.w	8001c3c <runCommands+0x804>

	//--------------------------------------------------------------------------

	uint8_t UserTxBufferFS[APP_TX_DATA_SIZE];
	uint16_t tVal16;
	uint8_t cmd = Buf[0];
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	 */

	//--------------------------------------------------------------------------

	
	if (cmd == 0x01)		// Relay:1 - 12V	[0x01 - 0x01]
 800145e:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001462:	2b01      	cmp	r3, #1
 8001464:	d16c      	bne.n	8001540 <runCommands+0x108>
	{
		if (*Len >= 2 && (Buf[1] == 0x01 || Buf[1] == 0x00))
 8001466:	463b      	mov	r3, r7
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d957      	bls.n	8001520 <runCommands+0xe8>
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	3301      	adds	r3, #1
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d005      	beq.n	8001488 <runCommands+0x50>
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	3301      	adds	r3, #1
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d14b      	bne.n	8001520 <runCommands+0xe8>
		{
			if (Buf[1] == 0x01)
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	3301      	adds	r3, #1
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d11f      	bne.n	80014d4 <runCommands+0x9c>
			{
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8001494:	2201      	movs	r2, #1
 8001496:	2104      	movs	r1, #4
 8001498:	48cb      	ldr	r0, [pc, #812]	; (80017c8 <runCommands+0x390>)
 800149a:	f002 fd64 	bl	8003f66 <HAL_GPIO_WritePin>
				RelayState = 0x01;
 800149e:	4bcb      	ldr	r3, [pc, #812]	; (80017cc <runCommands+0x394>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	701a      	strb	r2, [r3, #0]
				printf("RelayState:12V - %d \n", RelayState);
 80014a4:	4bc9      	ldr	r3, [pc, #804]	; (80017cc <runCommands+0x394>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	4619      	mov	r1, r3
 80014aa:	48c9      	ldr	r0, [pc, #804]	; (80017d0 <runCommands+0x398>)
 80014ac:	f009 ff66 	bl	800b37c <iprintf>
				SetAllDAC();
 80014b0:	f7ff fd90 	bl	8000fd4 <SetAllDAC>

				UserTxBufferFS[0] = cmd;
 80014b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b8:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80014bc:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 80014be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c2:	2200      	movs	r2, #0
 80014c4:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 80014c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ca:	2102      	movs	r1, #2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f009 fb1d 	bl	800ab0c <CDC_Transmit_FS>
				return;
 80014d2:	e3b8      	b.n	8001c46 <runCommands+0x80e>
			}
			else if (Buf[1] == 0x00)
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	3301      	adds	r3, #1
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d11f      	bne.n	8001520 <runCommands+0xe8>
			{
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2104      	movs	r1, #4
 80014e4:	48b8      	ldr	r0, [pc, #736]	; (80017c8 <runCommands+0x390>)
 80014e6:	f002 fd3e 	bl	8003f66 <HAL_GPIO_WritePin>
				RelayState = 0x00;
 80014ea:	4bb8      	ldr	r3, [pc, #736]	; (80017cc <runCommands+0x394>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
				printf("RelayState:27V - %d \n", RelayState);
 80014f0:	4bb6      	ldr	r3, [pc, #728]	; (80017cc <runCommands+0x394>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4619      	mov	r1, r3
 80014f6:	48b7      	ldr	r0, [pc, #732]	; (80017d4 <runCommands+0x39c>)
 80014f8:	f009 ff40 	bl	800b37c <iprintf>
				SetAllDAC();
 80014fc:	f7ff fd6a 	bl	8000fd4 <SetAllDAC>

				UserTxBufferFS[0] = cmd;
 8001500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001504:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001508:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 800150a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150e:	2200      	movs	r2, #0
 8001510:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 8001512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001516:	2102      	movs	r1, #2
 8001518:	4618      	mov	r0, r3
 800151a:	f009 faf7 	bl	800ab0c <CDC_Transmit_FS>
				return;
 800151e:	e392      	b.n	8001c46 <runCommands+0x80e>
			}
		}

		UserTxBufferFS[0] = cmd;
 8001520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001524:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001528:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 800152a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152e:	2201      	movs	r2, #1
 8001530:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8001532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001536:	2102      	movs	r1, #2
 8001538:	4618      	mov	r0, r3
 800153a:	f009 fae7 	bl	800ab0c <CDC_Transmit_FS>
		return;
 800153e:	e382      	b.n	8001c46 <runCommands+0x80e>

		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x02)	// DA:4095
 8001540:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001544:	2b02      	cmp	r3, #2
 8001546:	d13e      	bne.n	80015c6 <runCommands+0x18e>
	{
		if (*Len >= 3)
 8001548:	463b      	mov	r3, r7
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d929      	bls.n	80015a6 <runCommands+0x16e>
		{
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 8001552:	f7ff fe43 	bl	80011dc <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 8001556:	f7ff fe65 	bl	8001224 <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	3301      	adds	r3, #1
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	b29a      	uxth	r2, r3
 8001564:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001568:	801a      	strh	r2, [r3, #0]
			SetDacA(tVal16);
 800156a:	f107 0322 	add.w	r3, r7, #34	; 0x22
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	b21b      	sxth	r3, r3
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fcee 	bl	8000f54 <SetDacA>
			//			SetDacA(tVal16);

			printf("DacA: %d\n", tVal16);
 8001578:	f107 0322 	add.w	r3, r7, #34	; 0x22
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	4619      	mov	r1, r3
 8001580:	4895      	ldr	r0, [pc, #596]	; (80017d8 <runCommands+0x3a0>)
 8001582:	f009 fefb 	bl	800b37c <iprintf>
			UserTxBufferFS[0] = cmd;
 8001586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158a:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800158e:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 8001590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001594:	2200      	movs	r2, #0
 8001596:	705a      	strb	r2, [r3, #1]

			CDC_Transmit_FS(UserTxBufferFS, 2);
 8001598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159c:	2102      	movs	r1, #2
 800159e:	4618      	mov	r0, r3
 80015a0:	f009 fab4 	bl	800ab0c <CDC_Transmit_FS>
			return;
 80015a4:	e34f      	b.n	8001c46 <runCommands+0x80e>
		}

		UserTxBufferFS[0] = cmd;
 80015a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015aa:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80015ae:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 80015b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b4:	2201      	movs	r2, #1
 80015b6:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 80015b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015bc:	2102      	movs	r1, #2
 80015be:	4618      	mov	r0, r3
 80015c0:	f009 faa4 	bl	800ab0c <CDC_Transmit_FS>
		return;
 80015c4:	e33f      	b.n	8001c46 <runCommands+0x80e>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x03)	// DB:4095
 80015c6:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80015ca:	2b03      	cmp	r3, #3
 80015cc:	d13e      	bne.n	800164c <runCommands+0x214>
	{
		if (*Len >= 3)
 80015ce:	463b      	mov	r3, r7
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d929      	bls.n	800162c <runCommands+0x1f4>
		{
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 80015d8:	f7ff fe00 	bl	80011dc <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 80015dc:	f7ff fe22 	bl	8001224 <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	3301      	adds	r3, #1
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80015ee:	801a      	strh	r2, [r3, #0]
			SetDacB(tVal16);
 80015f0:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fccb 	bl	8000f94 <SetDacB>

			UserTxBufferFS[0] = cmd;
 80015fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001602:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001606:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 8001608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160c:	2200      	movs	r2, #0
 800160e:	705a      	strb	r2, [r3, #1]

			printf("DacB: %d \n", tVal16);
 8001610:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	4619      	mov	r1, r3
 8001618:	4870      	ldr	r0, [pc, #448]	; (80017dc <runCommands+0x3a4>)
 800161a:	f009 feaf 	bl	800b37c <iprintf>

			CDC_Transmit_FS(UserTxBufferFS, 2);
 800161e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001622:	2102      	movs	r1, #2
 8001624:	4618      	mov	r0, r3
 8001626:	f009 fa71 	bl	800ab0c <CDC_Transmit_FS>
			return;
 800162a:	e30c      	b.n	8001c46 <runCommands+0x80e>
		}

		UserTxBufferFS[0] = cmd;
 800162c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001630:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001634:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8001636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163a:	2201      	movs	r2, #1
 800163c:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 800163e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001642:	2102      	movs	r1, #2
 8001644:	4618      	mov	r0, r3
 8001646:	f009 fa61 	bl	800ab0c <CDC_Transmit_FS>
		return;
 800164a:	e2fc      	b.n	8001c46 <runCommands+0x80e>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x04)	// ADC?
 800164c:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001650:	2b04      	cmp	r3, #4
 8001652:	d119      	bne.n	8001688 <runCommands+0x250>
	{
		tVal16 = GetADC();
 8001654:	f7ff fe5c 	bl	8001310 <GetADC>
 8001658:	4603      	mov	r3, r0
 800165a:	461a      	mov	r2, r3
 800165c:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001660:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8001662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001666:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800166a:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &tVal16, sizeof(tVal16));
 800166c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001670:	3301      	adds	r3, #1
 8001672:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8001676:	8812      	ldrh	r2, [r2, #0]
 8001678:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 3);
 800167a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167e:	2103      	movs	r1, #3
 8001680:	4618      	mov	r0, r3
 8001682:	f009 fa43 	bl	800ab0c <CDC_Transmit_FS>
		return;
 8001686:	e2de      	b.n	8001c46 <runCommands+0x80e>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x05)	// Relay?DA?DB?
 8001688:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 800168c:	2b05      	cmp	r3, #5
 800168e:	d12d      	bne.n	80016ec <runCommands+0x2b4>
	{
		UserTxBufferFS[0] = cmd;
 8001690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001694:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001698:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = RelayState;
 800169a:	4b4c      	ldr	r3, [pc, #304]	; (80017cc <runCommands+0x394>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a4:	705a      	strb	r2, [r3, #1]

		tVal16 = GetDacA();
 80016a6:	f7ff fca7 	bl	8000ff8 <GetDacA>
 80016aa:	4603      	mov	r3, r0
 80016ac:	461a      	mov	r2, r3
 80016ae:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80016b2:	801a      	strh	r2, [r3, #0]
		memcpy(UserTxBufferFS + 2, &tVal16, sizeof(tVal16));
 80016b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b8:	3302      	adds	r3, #2
 80016ba:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80016be:	8812      	ldrh	r2, [r2, #0]
 80016c0:	801a      	strh	r2, [r3, #0]

		tVal16 = GetDacB();
 80016c2:	f7ff fca3 	bl	800100c <GetDacB>
 80016c6:	4603      	mov	r3, r0
 80016c8:	461a      	mov	r2, r3
 80016ca:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80016ce:	801a      	strh	r2, [r3, #0]
		memcpy(UserTxBufferFS + 4, &tVal16, sizeof(tVal16));
 80016d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d4:	3304      	adds	r3, #4
 80016d6:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80016da:	8812      	ldrh	r2, [r2, #0]
 80016dc:	801a      	strh	r2, [r3, #0]

		CDC_Transmit_FS(UserTxBufferFS, 6);
 80016de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e2:	2106      	movs	r1, #6
 80016e4:	4618      	mov	r0, r3
 80016e6:	f009 fa11 	bl	800ab0c <CDC_Transmit_FS>
		return;
 80016ea:	e2ac      	b.n	8001c46 <runCommands+0x80e>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x06)	// Btn?
 80016ec:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80016f0:	2b06      	cmp	r3, #6
 80016f2:	d120      	bne.n	8001736 <runCommands+0x2fe>
	{
		UserTxBufferFS[0] = cmd;
 80016f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f8:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80016fc:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = GetBtnRunState();
 80016fe:	f7ff fc8f 	bl	8001020 <GetBtnRunState>
 8001702:	4603      	mov	r3, r0
 8001704:	461a      	mov	r2, r3
 8001706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170a:	705a      	strb	r2, [r3, #1]
		UserTxBufferFS[2] = GetBtnUpState();
 800170c:	f7ff fcca 	bl	80010a4 <GetBtnUpState>
 8001710:	4603      	mov	r3, r0
 8001712:	461a      	mov	r2, r3
 8001714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001718:	709a      	strb	r2, [r3, #2]
		UserTxBufferFS[3] = GetBtnDownState();
 800171a:	f7ff fd05 	bl	8001128 <GetBtnDownState>
 800171e:	4603      	mov	r3, r0
 8001720:	461a      	mov	r2, r3
 8001722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001726:	70da      	strb	r2, [r3, #3]
		CDC_Transmit_FS(UserTxBufferFS, 4);
 8001728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172c:	2104      	movs	r1, #4
 800172e:	4618      	mov	r0, r3
 8001730:	f009 f9ec 	bl	800ab0c <CDC_Transmit_FS>
		return;
 8001734:	e287      	b.n	8001c46 <runCommands+0x80e>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x07)	// ID?
 8001736:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 800173a:	2b07      	cmp	r3, #7
 800173c:	d154      	bne.n	80017e8 <runCommands+0x3b0>
	{
		char str[9] = {
 800173e:	f107 0318 	add.w	r3, r7, #24
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	3304      	adds	r3, #4
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	711a      	strb	r2, [r3, #4]
			0,
		};
		memcpy(str, "SN", strlen("SN"));
 800174e:	f107 0318 	add.w	r3, r7, #24
 8001752:	2202      	movs	r2, #2
 8001754:	4922      	ldr	r1, [pc, #136]	; (80017e0 <runCommands+0x3a8>)
 8001756:	4618      	mov	r0, r3
 8001758:	f009 fdfa 	bl	800b350 <memcpy>
		itoa(SN_DEFINE, str + 2, 16);
 800175c:	f107 0318 	add.w	r3, r7, #24
 8001760:	3302      	adds	r3, #2
 8001762:	2210      	movs	r2, #16
 8001764:	4619      	mov	r1, r3
 8001766:	481f      	ldr	r0, [pc, #124]	; (80017e4 <runCommands+0x3ac>)
 8001768:	f009 fdf0 	bl	800b34c <itoa>

		UserTxBufferFS[0] = cmd;
 800176c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001770:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001774:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = strlen(str);
 8001776:	f107 0318 	add.w	r3, r7, #24
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fce8 	bl	8000150 <strlen>
 8001780:	4603      	mov	r3, r0
 8001782:	b2da      	uxtb	r2, r3
 8001784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001788:	705a      	strb	r2, [r3, #1]
		memcpy(UserTxBufferFS + 2, str, strlen(str));
 800178a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800178e:	3402      	adds	r4, #2
 8001790:	f107 0318 	add.w	r3, r7, #24
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fcdb 	bl	8000150 <strlen>
 800179a:	4602      	mov	r2, r0
 800179c:	f107 0318 	add.w	r3, r7, #24
 80017a0:	4619      	mov	r1, r3
 80017a2:	4620      	mov	r0, r4
 80017a4:	f009 fdd4 	bl	800b350 <memcpy>
		CDC_Transmit_FS(UserTxBufferFS, strlen(str) + 2);
 80017a8:	f107 0318 	add.w	r3, r7, #24
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fccf 	bl	8000150 <strlen>
 80017b2:	4603      	mov	r3, r0
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	3302      	adds	r3, #2
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f009 f9a3 	bl	800ab0c <CDC_Transmit_FS>
 80017c6:	e23e      	b.n	8001c46 <runCommands+0x80e>
 80017c8:	40010800 	.word	0x40010800
 80017cc:	20000272 	.word	0x20000272
 80017d0:	0800c790 	.word	0x0800c790
 80017d4:	0800c7a8 	.word	0x0800c7a8
 80017d8:	0800c7c0 	.word	0x0800c7c0
 80017dc:	0800c7cc 	.word	0x0800c7cc
 80017e0:	0800c7d8 	.word	0x0800c7d8
 80017e4:	01121001 	.word	0x01121001
	 */

		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x08)	// Калибровка TIM inHL?
 80017e8:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d11b      	bne.n	8001828 <runCommands+0x3f0>
	{
		EnableTIM3_PB4();
 80017f0:	f7ff fcdc 	bl	80011ac <EnableTIM3_PB4>
		uint16_t temp = GetTIM3();
 80017f4:	f7ff fce6 	bl	80011c4 <GetTIM3>
 80017f8:	4603      	mov	r3, r0
 80017fa:	461a      	mov	r2, r3
 80017fc:	f107 0316 	add.w	r3, r7, #22
 8001800:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8001802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001806:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800180a:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &temp, sizeof(uint16_t));
 800180c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001810:	3301      	adds	r3, #1
 8001812:	f107 0216 	add.w	r2, r7, #22
 8001816:	8812      	ldrh	r2, [r2, #0]
 8001818:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 800181a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181e:	2103      	movs	r1, #3
 8001820:	4618      	mov	r0, r3
 8001822:	f009 f973 	bl	800ab0c <CDC_Transmit_FS>
 8001826:	e20e      	b.n	8001c46 <runCommands+0x80e>
		return;

		
		//--------------------------------------------------------------------------
	}
	else if (cmd == 0x09)	// Калибровка TIM inLL?
 8001828:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 800182c:	2b09      	cmp	r3, #9
 800182e:	d11b      	bne.n	8001868 <runCommands+0x430>
	{
		EnableTIM4_PB6();
 8001830:	f7ff fce0 	bl	80011f4 <EnableTIM4_PB6>
		uint16_t temp = GetTIM4();
 8001834:	f7ff fcea 	bl	800120c <GetTIM4>
 8001838:	4603      	mov	r3, r0
 800183a:	461a      	mov	r2, r3
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8001842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001846:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800184a:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &temp, sizeof(uint16_t));
 800184c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001850:	3301      	adds	r3, #1
 8001852:	f107 0214 	add.w	r2, r7, #20
 8001856:	8812      	ldrh	r2, [r2, #0]
 8001858:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 800185a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185e:	2103      	movs	r1, #3
 8001860:	4618      	mov	r0, r3
 8001862:	f009 f953 	bl	800ab0c <CDC_Transmit_FS>
 8001866:	e1ee      	b.n	8001c46 <runCommands+0x80e>
		return;
		//--------------------------------------------------------------------------

		
	}
	else if (cmd == 0x0A)	// Прием калибровочной таблицы [0x0A][1-4][offset][count][data] 	answer: [0x0A]+[1-4]+[offset]+[count]+[status] (0x00 - сработал; 0x01 - не сработал)
 8001868:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 800186c:	2b0a      	cmp	r3, #10
 800186e:	f040 81aa 	bne.w	8001bc6 <runCommands+0x78e>
	{
		//Прием калибровочной таблицы [0x0A][1-4][offset][count][data]
		uint16_t tOffset, tCount, tData;
		if (*Len >= 2 && Buf[1] >= 0x00 && Buf[1] <= 0x03)
 8001872:	463b      	mov	r3, r7
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b01      	cmp	r3, #1
 800187a:	f240 8194 	bls.w	8001ba6 <runCommands+0x76e>
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	3301      	adds	r3, #1
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b03      	cmp	r3, #3
 8001888:	f200 818d 	bhi.w	8001ba6 <runCommands+0x76e>
		{
			if 		(Buf[1] == 0x00)	//А_m12
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	3301      	adds	r3, #1
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d15c      	bne.n	8001952 <runCommands+0x51a>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	3302      	adds	r3, #2
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	f107 0312 	add.w	r3, r7, #18
 80018a6:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	3304      	adds	r3, #4
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	f107 0310 	add.w	r3, r7, #16
 80018b6:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 80018b8:	2300      	movs	r3, #0
 80018ba:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
 80018be:	e01f      	b.n	8001900 <runCommands+0x4c8>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 80018c0:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	3306      	adds	r3, #6
 80018c8:	1d3a      	adds	r2, r7, #4
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	4413      	add	r3, r2
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	f107 030e 	add.w	r3, r7, #14
 80018d6:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValA_m12[i + tOffset] = tData;
 80018d8:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 80018dc:	f107 0212 	add.w	r2, r7, #18
 80018e0:	8812      	ldrh	r2, [r2, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	f107 020e 	add.w	r2, r7, #14
 80018e8:	8811      	ldrh	r1, [r2, #0]
 80018ea:	4ad3      	ldr	r2, [pc, #844]	; (8001c38 <runCommands+0x800>)
 80018ec:	3304      	adds	r3, #4
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	4413      	add	r3, r2
 80018f2:	460a      	mov	r2, r1
 80018f4:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 80018f6:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 80018fa:	3301      	adds	r3, #1
 80018fc:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
 8001900:	f107 0310 	add.w	r3, r7, #16
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	f8b7 222e 	ldrh.w	r2, [r7, #558]	; 0x22e
 800190a:	429a      	cmp	r2, r3
 800190c:	d3d8      	bcc.n	80018c0 <runCommands+0x488>
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 800190e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001912:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001916:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8001918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191c:	2201      	movs	r2, #1
 800191e:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2			->4
 8001920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001924:	3302      	adds	r3, #2
 8001926:	f107 0212 	add.w	r2, r7, #18
 800192a:	8812      	ldrh	r2, [r2, #0]
 800192c:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 800192e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001932:	3304      	adds	r3, #4
 8001934:	f107 0210 	add.w	r2, r7, #16
 8001938:	8812      	ldrh	r2, [r2, #0]
 800193a:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1		->7
 800193c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001940:	2200      	movs	r2, #0
 8001942:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8001944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001948:	2101      	movs	r1, #1
 800194a:	4618      	mov	r0, r3
 800194c:	f009 f8de 	bl	800ab0c <CDC_Transmit_FS>
				return;
 8001950:	e179      	b.n	8001c46 <runCommands+0x80e>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x01)	//B_m12
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	3301      	adds	r3, #1
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d15c      	bne.n	8001a18 <runCommands+0x5e0>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	3302      	adds	r3, #2
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	b29a      	uxth	r2, r3
 8001968:	f107 0312 	add.w	r3, r7, #18
 800196c:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	3304      	adds	r3, #4
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	b29a      	uxth	r2, r3
 8001978:	f107 0310 	add.w	r3, r7, #16
 800197c:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 800197e:	2300      	movs	r3, #0
 8001980:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
 8001984:	e01f      	b.n	80019c6 <runCommands+0x58e>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8001986:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	3306      	adds	r3, #6
 800198e:	1d3a      	adds	r2, r7, #4
 8001990:	6812      	ldr	r2, [r2, #0]
 8001992:	4413      	add	r3, r2
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	b29a      	uxth	r2, r3
 8001998:	f107 030e 	add.w	r3, r7, #14
 800199c:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValB_m12[i + tOffset] = tData;
 800199e:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 80019a2:	f107 0212 	add.w	r2, r7, #18
 80019a6:	8812      	ldrh	r2, [r2, #0]
 80019a8:	4413      	add	r3, r2
 80019aa:	f107 020e 	add.w	r2, r7, #14
 80019ae:	8811      	ldrh	r1, [r2, #0]
 80019b0:	4aa1      	ldr	r2, [pc, #644]	; (8001c38 <runCommands+0x800>)
 80019b2:	335c      	adds	r3, #92	; 0x5c
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	460a      	mov	r2, r1
 80019ba:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 80019bc:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 80019c0:	3301      	adds	r3, #1
 80019c2:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
 80019c6:	f107 0310 	add.w	r3, r7, #16
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	f8b7 222c 	ldrh.w	r2, [r7, #556]	; 0x22c
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d3d8      	bcc.n	8001986 <runCommands+0x54e>
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 80019d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d8:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80019dc:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 80019de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e2:	2201      	movs	r2, #1
 80019e4:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 80019e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ea:	3302      	adds	r3, #2
 80019ec:	f107 0212 	add.w	r2, r7, #18
 80019f0:	8812      	ldrh	r2, [r2, #0]
 80019f2:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 80019f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f8:	3304      	adds	r3, #4
 80019fa:	f107 0210 	add.w	r2, r7, #16
 80019fe:	8812      	ldrh	r2, [r2, #0]
 8001a00:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 8001a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a06:	2200      	movs	r2, #0
 8001a08:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8001a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0e:	2101      	movs	r1, #1
 8001a10:	4618      	mov	r0, r3
 8001a12:	f009 f87b 	bl	800ab0c <CDC_Transmit_FS>
				return;
 8001a16:	e116      	b.n	8001c46 <runCommands+0x80e>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x02)	//A_m27
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d15c      	bne.n	8001ade <runCommands+0x6a6>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	3302      	adds	r3, #2
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	f107 0312 	add.w	r3, r7, #18
 8001a32:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	f107 0310 	add.w	r3, r7, #16
 8001a42:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8001a44:	2300      	movs	r3, #0
 8001a46:	f8a7 322a 	strh.w	r3, [r7, #554]	; 0x22a
 8001a4a:	e01f      	b.n	8001a8c <runCommands+0x654>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8001a4c:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	3306      	adds	r3, #6
 8001a54:	1d3a      	adds	r2, r7, #4
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	4413      	add	r3, r2
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	f107 030e 	add.w	r3, r7, #14
 8001a62:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValA_m27[i + tOffset] = tData;
 8001a64:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 8001a68:	f107 0212 	add.w	r2, r7, #18
 8001a6c:	8812      	ldrh	r2, [r2, #0]
 8001a6e:	4413      	add	r3, r2
 8001a70:	f107 020e 	add.w	r2, r7, #14
 8001a74:	8811      	ldrh	r1, [r2, #0]
 8001a76:	4a70      	ldr	r2, [pc, #448]	; (8001c38 <runCommands+0x800>)
 8001a78:	33b4      	adds	r3, #180	; 0xb4
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	4413      	add	r3, r2
 8001a7e:	460a      	mov	r2, r1
 8001a80:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 8001a82:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 8001a86:	3301      	adds	r3, #1
 8001a88:	f8a7 322a 	strh.w	r3, [r7, #554]	; 0x22a
 8001a8c:	f107 0310 	add.w	r3, r7, #16
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	f8b7 222a 	ldrh.w	r2, [r7, #554]	; 0x22a
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d3d8      	bcc.n	8001a4c <runCommands+0x614>
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 8001a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9e:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001aa2:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8001aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 8001aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab0:	3302      	adds	r3, #2
 8001ab2:	f107 0212 	add.w	r2, r7, #18
 8001ab6:	8812      	ldrh	r2, [r2, #0]
 8001ab8:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8001aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001abe:	3304      	adds	r3, #4
 8001ac0:	f107 0210 	add.w	r2, r7, #16
 8001ac4:	8812      	ldrh	r2, [r2, #0]
 8001ac6:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 8001ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001acc:	2200      	movs	r2, #0
 8001ace:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8001ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f009 f818 	bl	800ab0c <CDC_Transmit_FS>
				return;
 8001adc:	e0b3      	b.n	8001c46 <runCommands+0x80e>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x03)	//B_m27
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	d15d      	bne.n	8001ba6 <runCommands+0x76e>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	3302      	adds	r3, #2
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	f107 0312 	add.w	r3, r7, #18
 8001af8:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	3304      	adds	r3, #4
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	f107 0310 	add.w	r3, r7, #16
 8001b08:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f8a7 3228 	strh.w	r3, [r7, #552]	; 0x228
 8001b10:	e020      	b.n	8001b54 <runCommands+0x71c>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8001b12:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	3306      	adds	r3, #6
 8001b1a:	1d3a      	adds	r2, r7, #4
 8001b1c:	6812      	ldr	r2, [r2, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	f107 030e 	add.w	r3, r7, #14
 8001b28:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValB_m27[i + tOffset] = tData;
 8001b2a:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8001b2e:	f107 0212 	add.w	r2, r7, #18
 8001b32:	8812      	ldrh	r2, [r2, #0]
 8001b34:	4413      	add	r3, r2
 8001b36:	f107 020e 	add.w	r2, r7, #14
 8001b3a:	8811      	ldrh	r1, [r2, #0]
 8001b3c:	4a3e      	ldr	r2, [pc, #248]	; (8001c38 <runCommands+0x800>)
 8001b3e:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	460a      	mov	r2, r1
 8001b48:	805a      	strh	r2, [r3, #2]
				for (uint16_t i = 0; i < tCount; i++)
 8001b4a:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8001b4e:	3301      	adds	r3, #1
 8001b50:	f8a7 3228 	strh.w	r3, [r7, #552]	; 0x228
 8001b54:	f107 0310 	add.w	r3, r7, #16
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d3d7      	bcc.n	8001b12 <runCommands+0x6da>
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 8001b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b66:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001b6a:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8001b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b70:	2201      	movs	r2, #1
 8001b72:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 8001b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b78:	3302      	adds	r3, #2
 8001b7a:	f107 0212 	add.w	r2, r7, #18
 8001b7e:	8812      	ldrh	r2, [r2, #0]
 8001b80:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8001b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b86:	3304      	adds	r3, #4
 8001b88:	f107 0210 	add.w	r2, r7, #16
 8001b8c:	8812      	ldrh	r2, [r2, #0]
 8001b8e:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 8001b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b94:	2200      	movs	r2, #0
 8001b96:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8001b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f008 ffb4 	bl	800ab0c <CDC_Transmit_FS>
				return;
 8001ba4:	e04f      	b.n	8001c46 <runCommands+0x80e>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
		}
		UserTxBufferFS[0] = cmd;
 8001ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001baa:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001bae:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8001bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8001bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bbc:	2102      	movs	r1, #2
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f008 ffa4 	bl	800ab0c <CDC_Transmit_FS>
		return;
 8001bc4:	e03f      	b.n	8001c46 <runCommands+0x80e>
		//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0B)	// TODO: Отправка CRC 1-4 таблицы [0x0B][1-4][CRC(1-4)]	answer:
 8001bc6:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001bca:	2b0b      	cmp	r3, #11
 8001bcc:	d038      	beq.n	8001c40 <runCommands+0x808>
	{
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0C)	// TODO: Прием длины калибровочной таблицы [0x0C][Длина][???]
 8001bce:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001bd2:	2b0c      	cmp	r3, #12
 8001bd4:	d036      	beq.n	8001c44 <runCommands+0x80c>
	{
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0D)	// TODO Запись во флеш калибровочной таблицы [0x0D] data: 1B (0x00 - успешно; 0x01 - ошибка при записи)	answer: 0x0D + 1B status
 8001bd6:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001bda:	2b0d      	cmp	r3, #13
 8001bdc:	d133      	bne.n	8001c46 <runCommands+0x80e>
	{
		if (*Len >= 2 && (Buf[1] == 0x02))
 8001bde:	463b      	mov	r3, r7
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d917      	bls.n	8001c18 <runCommands+0x7e0>
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	3301      	adds	r3, #1
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d111      	bne.n	8001c18 <runCommands+0x7e0>
		{
			//TODO: Функция записи фо флеш.
			writeTableInFlash();
 8001bf4:	f7ff fbb2 	bl	800135c <writeTableInFlash>

				UserTxBufferFS[0] = cmd;
 8001bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bfc:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001c00:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 8001c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c06:	2200      	movs	r2, #0
 8001c08:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 8001c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0e:	2102      	movs	r1, #2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f008 ff7b 	bl	800ab0c <CDC_Transmit_FS>
				return;
 8001c16:	e016      	b.n	8001c46 <runCommands+0x80e>
		}
 		
		//--------------------------------------------------------------------------
		UserTxBufferFS[0] = cmd;
 8001c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c1c:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001c20:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8001c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c26:	2201      	movs	r2, #1
 8001c28:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8001c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2e:	2102      	movs	r1, #2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f008 ff6b 	bl	800ab0c <CDC_Transmit_FS>
		return;
 8001c36:	e006      	b.n	8001c46 <runCommands+0x80e>
 8001c38:	200004a4 	.word	0x200004a4
		return;
 8001c3c:	bf00      	nop
 8001c3e:	e002      	b.n	8001c46 <runCommands+0x80e>
		return;
 8001c40:	bf00      	nop
 8001c42:	e000      	b.n	8001c46 <runCommands+0x80e>
		return;
 8001c44:	bf00      	nop
		//--------------------------------------------------------------------------
	}
//-------------------------------------------------------------------------
	
}
 8001c46:	f507 770d 	add.w	r7, r7, #564	; 0x234
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd90      	pop	{r4, r7, pc}
 8001c4e:	bf00      	nop

08001c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	; 0x28
 8001c54:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001c56:	f000 ff79 	bl	8002b4c <HAL_Init>

	/* USER CODE BEGIN Init */
//--------------------------------------------------------------------------
#if DWT_INIT
	DWT_Init();
 8001c5a:	f7ff f933 	bl	8000ec4 <DWT_Init>
	//--------------------------------------------------------------------------

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001c5e:	f000 fa9b 	bl	8002198 <SystemClock_Config>
//-------------------------------------------------------------------------

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001c62:	f000 fc45 	bl	80024f0 <MX_GPIO_Init>
	MX_SPI1_Init();
 8001c66:	f000 fb47 	bl	80022f8 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 8001c6a:	f008 fe8d 	bl	800a988 <MX_USB_DEVICE_Init>
	MX_ADC1_Init();
 8001c6e:	f000 faf1 	bl	8002254 <MX_ADC1_Init>
	MX_TIM3_Init();
 8001c72:	f000 fb79 	bl	8002368 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001c76:	f000 fbd9 	bl	800242c <MX_TIM4_Init>
	MX_CRC_Init();
 8001c7a:	f000 fb29 	bl	80022d0 <MX_CRC_Init>
	/* USER CODE BEGIN 2 */
	//**************************************************************************
#if TEST_UID
	sprintf(buffer, "UID %x-%x-%lx-%lx\n", *idBase0, *idBase1, *idBase2, *idBase3);
 8001c7e:	4b9a      	ldr	r3, [pc, #616]	; (8001ee8 <main+0x298>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	4619      	mov	r1, r3
 8001c86:	4b99      	ldr	r3, [pc, #612]	; (8001eec <main+0x29c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	4b98      	ldr	r3, [pc, #608]	; (8001ef0 <main+0x2a0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a97      	ldr	r2, [pc, #604]	; (8001ef4 <main+0x2a4>)
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	6812      	ldr	r2, [r2, #0]
 8001c9a:	9201      	str	r2, [sp, #4]
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	460a      	mov	r2, r1
 8001ca2:	4995      	ldr	r1, [pc, #596]	; (8001ef8 <main+0x2a8>)
 8001ca4:	4895      	ldr	r0, [pc, #596]	; (8001efc <main+0x2ac>)
 8001ca6:	f009 fb81 	bl	800b3ac <siprintf>
	printf((uint8_t *)buffer);
 8001caa:	4894      	ldr	r0, [pc, #592]	; (8001efc <main+0x2ac>)
 8001cac:	f009 fb66 	bl	800b37c <iprintf>
#endif /* TEST_UID */

	//**************************************************************************
#if TEST_TIM_CAPTURE
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4893      	ldr	r0, [pc, #588]	; (8001f00 <main+0x2b0>)
 8001cb4:	f004 fd36 	bl	8006724 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8001cb8:	2104      	movs	r1, #4
 8001cba:	4891      	ldr	r0, [pc, #580]	; (8001f00 <main+0x2b0>)
 8001cbc:	f004 fd32 	bl	8006724 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4890      	ldr	r0, [pc, #576]	; (8001f04 <main+0x2b4>)
 8001cc4:	f004 fd2e 	bl	8006724 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8001cc8:	2104      	movs	r1, #4
 8001cca:	488e      	ldr	r0, [pc, #568]	; (8001f04 <main+0x2b4>)
 8001ccc:	f004 fd2a 	bl	8006724 <HAL_TIM_IC_Start_IT>
#endif /* TEST_TIM_CAPTURE */
//--------------------------------------------------------------------------
#if TEST_DAC
	SetAllDAC();
 8001cd0:	f7ff f980 	bl	8000fd4 <SetAllDAC>
#endif /* TEST_DAC */
	   //**************************************************************************
#if TEST_ADC
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001cd4:	488c      	ldr	r0, [pc, #560]	; (8001f08 <main+0x2b8>)
 8001cd6:	f001 fba9 	bl	800342c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_IT(&hadc1);
 8001cda:	488b      	ldr	r0, [pc, #556]	; (8001f08 <main+0x2b8>)
 8001cdc:	f001 f894 	bl	8002e08 <HAL_ADC_Start_IT>

#endif /* TEST_ADC */
//**************************************************************************

	// Чтение DevNVRAM
	uint32_t l_Address = FLASH_TABLE_START_ADDR;
 8001ce0:	4b8a      	ldr	r3, [pc, #552]	; (8001f0c <main+0x2bc>)
 8001ce2:	61fb      	str	r3, [r7, #28]
	uint32_t l_Error = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	607b      	str	r3, [r7, #4]
	uint32_t l_Index = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61bb      	str	r3, [r7, #24]
	while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001cec:	e00b      	b.n	8001d06 <main+0xb6>
	{
		DevNVRAM.data32[l_Index] = *(__IO uint32_t *)l_Address;
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	4987      	ldr	r1, [pc, #540]	; (8001f10 <main+0x2c0>)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		l_Index = l_Index + 1;
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	61bb      	str	r3, [r7, #24]
		l_Address = l_Address + 4;
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	3304      	adds	r3, #4
 8001d04:	61fb      	str	r3, [r7, #28]
	while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	4a82      	ldr	r2, [pc, #520]	; (8001f14 <main+0x2c4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d9ef      	bls.n	8001cee <main+0x9e>
	}

//--------------------------------------------------------------------------
	// если после чтения майджик кей не найден, то это первый запуск

	if (DevNVRAM.calibration_table.MagicNum != MAGIC_KEY_DEFINE)
 8001d0e:	4b80      	ldr	r3, [pc, #512]	; (8001f10 <main+0x2c0>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	4a81      	ldr	r2, [pc, #516]	; (8001f18 <main+0x2c8>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	f000 80af 	beq.w	8001e78 <main+0x228>
	{
		// Подготовка
		// Заносим типовые значения
		memset(DevNVRAM.data32, 0, sizeof(DevNVRAM.data32));
 8001d1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d1e:	2100      	movs	r1, #0
 8001d20:	487b      	ldr	r0, [pc, #492]	; (8001f10 <main+0x2c0>)
 8001d22:	f009 fb23 	bl	800b36c <memset>

		// TODO: !!!!!Добавить математику расчета калибровочной таблицы!!!!!!!

		for (uint8_t i = 0; i < MAX_VAL_M12; i++)
 8001d26:	2300      	movs	r3, #0
 8001d28:	75fb      	strb	r3, [r7, #23]
 8001d2a:	e00b      	b.n	8001d44 <main+0xf4>
		{
			DevNVRAM.calibration_table.dacValA_m12[i] = i;
 8001d2c:	7dfb      	ldrb	r3, [r7, #23]
 8001d2e:	7dfa      	ldrb	r2, [r7, #23]
 8001d30:	b291      	uxth	r1, r2
 8001d32:	4a77      	ldr	r2, [pc, #476]	; (8001f10 <main+0x2c0>)
 8001d34:	3304      	adds	r3, #4
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	4413      	add	r3, r2
 8001d3a:	460a      	mov	r2, r1
 8001d3c:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M12; i++)
 8001d3e:	7dfb      	ldrb	r3, [r7, #23]
 8001d40:	3301      	adds	r3, #1
 8001d42:	75fb      	strb	r3, [r7, #23]
 8001d44:	7dfb      	ldrb	r3, [r7, #23]
 8001d46:	2b57      	cmp	r3, #87	; 0x57
 8001d48:	d9f0      	bls.n	8001d2c <main+0xdc>
		}
		for (uint8_t i = 0; i < MAX_VAL_M12; i++)
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	75bb      	strb	r3, [r7, #22]
 8001d4e:	e00b      	b.n	8001d68 <main+0x118>
		{
			DevNVRAM.calibration_table.dacValB_m12[i] = i;
 8001d50:	7dbb      	ldrb	r3, [r7, #22]
 8001d52:	7dba      	ldrb	r2, [r7, #22]
 8001d54:	b291      	uxth	r1, r2
 8001d56:	4a6e      	ldr	r2, [pc, #440]	; (8001f10 <main+0x2c0>)
 8001d58:	335c      	adds	r3, #92	; 0x5c
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4413      	add	r3, r2
 8001d5e:	460a      	mov	r2, r1
 8001d60:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M12; i++)
 8001d62:	7dbb      	ldrb	r3, [r7, #22]
 8001d64:	3301      	adds	r3, #1
 8001d66:	75bb      	strb	r3, [r7, #22]
 8001d68:	7dbb      	ldrb	r3, [r7, #22]
 8001d6a:	2b57      	cmp	r3, #87	; 0x57
 8001d6c:	d9f0      	bls.n	8001d50 <main+0x100>
		}
		for (uint8_t i = 0; i < MAX_VAL_M27; i++)
 8001d6e:	2300      	movs	r3, #0
 8001d70:	757b      	strb	r3, [r7, #21]
 8001d72:	e00b      	b.n	8001d8c <main+0x13c>
		{
			DevNVRAM.calibration_table.dacValA_m27[i] = i;
 8001d74:	7d7b      	ldrb	r3, [r7, #21]
 8001d76:	7d7a      	ldrb	r2, [r7, #21]
 8001d78:	b291      	uxth	r1, r2
 8001d7a:	4a65      	ldr	r2, [pc, #404]	; (8001f10 <main+0x2c0>)
 8001d7c:	33b4      	adds	r3, #180	; 0xb4
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4413      	add	r3, r2
 8001d82:	460a      	mov	r2, r1
 8001d84:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M27; i++)
 8001d86:	7d7b      	ldrb	r3, [r7, #21]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	757b      	strb	r3, [r7, #21]
 8001d8c:	7d7b      	ldrb	r3, [r7, #21]
 8001d8e:	2ba2      	cmp	r3, #162	; 0xa2
 8001d90:	d9f0      	bls.n	8001d74 <main+0x124>
		}
		for (uint8_t i = 0; i < MAX_VAL_M27; i++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	753b      	strb	r3, [r7, #20]
 8001d96:	e00b      	b.n	8001db0 <main+0x160>
		{
			DevNVRAM.calibration_table.dacValB_m12[i] = i;
 8001d98:	7d3b      	ldrb	r3, [r7, #20]
 8001d9a:	7d3a      	ldrb	r2, [r7, #20]
 8001d9c:	b291      	uxth	r1, r2
 8001d9e:	4a5c      	ldr	r2, [pc, #368]	; (8001f10 <main+0x2c0>)
 8001da0:	335c      	adds	r3, #92	; 0x5c
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4413      	add	r3, r2
 8001da6:	460a      	mov	r2, r1
 8001da8:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M27; i++)
 8001daa:	7d3b      	ldrb	r3, [r7, #20]
 8001dac:	3301      	adds	r3, #1
 8001dae:	753b      	strb	r3, [r7, #20]
 8001db0:	7d3b      	ldrb	r3, [r7, #20]
 8001db2:	2ba2      	cmp	r3, #162	; 0xa2
 8001db4:	d9f0      	bls.n	8001d98 <main+0x148>
		}
		DevNVRAM.calibration_table.Hardwire = 0x06;
 8001db6:	4b56      	ldr	r3, [pc, #344]	; (8001f10 <main+0x2c0>)
 8001db8:	2206      	movs	r2, #6
 8001dba:	801a      	strh	r2, [r3, #0]
		DevNVRAM.calibration_table.Firmware = 0x05;
 8001dbc:	4b54      	ldr	r3, [pc, #336]	; (8001f10 <main+0x2c0>)
 8001dbe:	2205      	movs	r2, #5
 8001dc0:	805a      	strh	r2, [r3, #2]
		DevNVRAM.calibration_table.SN = 0x1121001; //11 недел	я + год + порядковый номер изготовления
 8001dc2:	4b53      	ldr	r3, [pc, #332]	; (8001f10 <main+0x2c0>)
 8001dc4:	4a55      	ldr	r2, [pc, #340]	; (8001f1c <main+0x2cc>)
 8001dc6:	605a      	str	r2, [r3, #4]
		DevNVRAM.calibration_table.MagicNum = MAGIC_KEY_DEFINE;
 8001dc8:	4b51      	ldr	r3, [pc, #324]	; (8001f10 <main+0x2c0>)
 8001dca:	4a53      	ldr	r2, [pc, #332]	; (8001f18 <main+0x2c8>)
 8001dcc:	609a      	str	r2, [r3, #8]

		DevNVRAM.sector.NWrite = 0;
 8001dce:	4b50      	ldr	r3, [pc, #320]	; (8001f10 <main+0x2c0>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

		DevNVRAM.sector.CheckSum = 0; //HAL_CRC_Calculate(&hcrc, &DevNVRAM.calibration_table, (sizeof(DevNVRAM.calibration_table)/4));//DONE: нужно отправлять длину кратную 32b! -  по какой то причине в этом проекте не работает CRC!!!
 8001dd6:	4b4e      	ldr	r3, [pc, #312]	; (8001f10 <main+0x2c0>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc

		//--------------------------------------------------------------------------
		//если после чтения майджик кей не найден, то это первый запуск записываем дефолтную таблицу
		l_Address = FLASH_TABLE_START_ADDR;
 8001dde:	4b4b      	ldr	r3, [pc, #300]	; (8001f0c <main+0x2bc>)
 8001de0:	61fb      	str	r3, [r7, #28]
		l_Error = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	607b      	str	r3, [r7, #4]
		l_Index = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]

		while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001dea:	e010      	b.n	8001e0e <main+0x1be>
		{
			if (DevNVRAM.data32[l_Index] != *(__IO uint32_t *)l_Address)
 8001dec:	4a48      	ldr	r2, [pc, #288]	; (8001f10 <main+0x2c0>)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d002      	beq.n	8001e02 <main+0x1b2>
			{
				l_Error++;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	607b      	str	r3, [r7, #4]
			}
			l_Index = l_Index + 1;
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	3301      	adds	r3, #1
 8001e06:	61bb      	str	r3, [r7, #24]
			l_Address = l_Address + 4;
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	61fb      	str	r3, [r7, #28]
		while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	4a40      	ldr	r2, [pc, #256]	; (8001f14 <main+0x2c4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d9ea      	bls.n	8001dec <main+0x19c>
		}

		if (l_Error > 0)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d02d      	beq.n	8001e78 <main+0x228>
		{ // конфигурация изменилась сохраняем
			// Готовим к записи в память
			HAL_FLASH_Unlock();
 8001e1c:	f001 fd78 	bl	8003910 <HAL_FLASH_Unlock>
			// Очищаем страницу памяти
			HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	4619      	mov	r1, r3
 8001e24:	483e      	ldr	r0, [pc, #248]	; (8001f20 <main+0x2d0>)
 8001e26:	f001 fe5b 	bl	8003ae0 <HAL_FLASHEx_Erase>
			//Пишем данные в память
			l_Address = FLASH_TABLE_START_ADDR;
 8001e2a:	4b38      	ldr	r3, [pc, #224]	; (8001f0c <main+0x2bc>)
 8001e2c:	61fb      	str	r3, [r7, #28]
			l_Error = 0x00;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	607b      	str	r3, [r7, #4]
			l_Index = 0x00;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61bb      	str	r3, [r7, #24]

			while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001e36:	e019      	b.n	8001e6c <main+0x21c>
			{
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
									  DevNVRAM.data32[l_Index]) != HAL_OK)
 8001e38:	4a35      	ldr	r2, [pc, #212]	; (8001f10 <main+0x2c0>)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 8001e40:	461a      	mov	r2, r3
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	69f9      	ldr	r1, [r7, #28]
 8001e48:	2002      	movs	r0, #2
 8001e4a:	f001 fcf1 	bl	8003830 <HAL_FLASH_Program>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <main+0x20a>
				{
					l_Error++;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3301      	adds	r3, #1
 8001e58:	607b      	str	r3, [r7, #4]
				}

				l_Address = l_Address + 4;
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	61fb      	str	r3, [r7, #28]
				l_Index = l_Index + 1;
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	3301      	adds	r3, #1
 8001e64:	61bb      	str	r3, [r7, #24]
				HAL_Delay(10);
 8001e66:	200a      	movs	r0, #10
 8001e68:	f000 fed2 	bl	8002c10 <HAL_Delay>
			while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	4a29      	ldr	r2, [pc, #164]	; (8001f14 <main+0x2c4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d9e1      	bls.n	8001e38 <main+0x1e8>
			}
			HAL_FLASH_Lock();
 8001e74:	f001 fd72 	bl	800395c <HAL_FLASH_Lock>

	// TODO: !!!!!Добавить математику расчета калибровочной таблицы!!!!!!!

	// Циклически проверяем соотвествует ли информация в памяти массиву настроек?

	l_Address = FLASH_TABLE_START_ADDR;
 8001e78:	4b24      	ldr	r3, [pc, #144]	; (8001f0c <main+0x2bc>)
 8001e7a:	61fb      	str	r3, [r7, #28]
	l_Error = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	607b      	str	r3, [r7, #4]
	l_Index = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61bb      	str	r3, [r7, #24]
	//Читаем и сравниваем
	while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001e84:	e010      	b.n	8001ea8 <main+0x258>
	{
		if (DevNVRAM.data32[l_Index] != *(__IO uint32_t *)l_Address)
 8001e86:	4a22      	ldr	r2, [pc, #136]	; (8001f10 <main+0x2c0>)
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d002      	beq.n	8001e9c <main+0x24c>
		{
			l_Error++;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	607b      	str	r3, [r7, #4]
		}
		l_Index = l_Index + 1;
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	61bb      	str	r3, [r7, #24]
		l_Address = l_Address + 4;
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	61fb      	str	r3, [r7, #28]
	while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	4a1a      	ldr	r2, [pc, #104]	; (8001f14 <main+0x2c4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d9ea      	bls.n	8001e86 <main+0x236>
	}

	if (l_Error > 0)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d056      	beq.n	8001f64 <main+0x314>
	{ // конфигурация изменилась сохраняем
		// Готовим к записи в память
		HAL_FLASH_Unlock();
 8001eb6:	f001 fd2b 	bl	8003910 <HAL_FLASH_Unlock>
		// Очищаем страницу памяти
		HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4818      	ldr	r0, [pc, #96]	; (8001f20 <main+0x2d0>)
 8001ec0:	f001 fe0e 	bl	8003ae0 <HAL_FLASHEx_Erase>
		//Пишем данные в память
		l_Address = FLASH_TABLE_START_ADDR;
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <main+0x2bc>)
 8001ec6:	61fb      	str	r3, [r7, #28]
		l_Error = 0x00;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	607b      	str	r3, [r7, #4]
		l_Index = 0x00;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61bb      	str	r3, [r7, #24]

		DevNVRAM.sector.NWrite = DevNVRAM.sector.NWrite + 1;
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <main+0x2c0>)
 8001ed2:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	4a0d      	ldr	r2, [pc, #52]	; (8001f10 <main+0x2c0>)
 8001eda:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
		DevNVRAM.sector.CheckSum = 0; //HAL_CRC_Calculate(&hcrc, &DevNVRAM.calibration_table, (sizeof(DevNVRAM.calibration_table)/4));
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <main+0x2c0>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc

		while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001ee6:	e037      	b.n	8001f58 <main+0x308>
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	20000004 	.word	0x20000004
 8001ef0:	20000008 	.word	0x20000008
 8001ef4:	2000000c 	.word	0x2000000c
 8001ef8:	0800c7dc 	.word	0x0800c7dc
 8001efc:	2000020c 	.word	0x2000020c
 8001f00:	200008f4 	.word	0x200008f4
 8001f04:	200008a4 	.word	0x200008a4
 8001f08:	2000094c 	.word	0x2000094c
 8001f0c:	0801fc00 	.word	0x0801fc00
 8001f10:	200004a4 	.word	0x200004a4
 8001f14:	0801ffff 	.word	0x0801ffff
 8001f18:	48151623 	.word	0x48151623
 8001f1c:	01121001 	.word	0x01121001
 8001f20:	2000093c 	.word	0x2000093c
		{
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
								  DevNVRAM.data32[l_Index]) != HAL_OK)
 8001f24:	4a8a      	ldr	r2, [pc, #552]	; (8002150 <main+0x500>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	f04f 0300 	mov.w	r3, #0
 8001f32:	69f9      	ldr	r1, [r7, #28]
 8001f34:	2002      	movs	r0, #2
 8001f36:	f001 fc7b 	bl	8003830 <HAL_FLASH_Program>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d002      	beq.n	8001f46 <main+0x2f6>
			{
				l_Error++;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3301      	adds	r3, #1
 8001f44:	607b      	str	r3, [r7, #4]
			}

			l_Address = l_Address + 4;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3304      	adds	r3, #4
 8001f4a:	61fb      	str	r3, [r7, #28]
			l_Index = l_Index + 1;
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	61bb      	str	r3, [r7, #24]
			HAL_Delay(10);
 8001f52:	200a      	movs	r0, #10
 8001f54:	f000 fe5c 	bl	8002c10 <HAL_Delay>
		while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	4a7e      	ldr	r2, [pc, #504]	; (8002154 <main+0x504>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d9e1      	bls.n	8001f24 <main+0x2d4>
		}
		HAL_FLASH_Lock();
 8001f60:	f001 fcfc 	bl	800395c <HAL_FLASH_Lock>
	}
	HAL_Delay(100);
 8001f64:	2064      	movs	r0, #100	; 0x64
 8001f66:	f000 fe53 	bl	8002c10 <HAL_Delay>

//	if(changeTableFlag) writeTableInFlash();

//**************************************************************************

		uint32_t Crc_cal_a_m12 = getCRC_table_a_m12();
 8001f6a:	f7fe ffdd 	bl	8000f28 <getCRC_table_a_m12>
 8001f6e:	6138      	str	r0, [r7, #16]
//		uint32_t Crc_cal_b_m27 = getCRC_table_b_m27();

//**************************************************************************
#if TEST_READ_BTN

		uint32_t ms = HAL_GetTick();
 8001f70:	f000 fe44 	bl	8002bfc <HAL_GetTick>
 8001f74:	60f8      	str	r0, [r7, #12]
		uint8_t key1_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12); // подставить свой пин //TODO: Проверить работу BACK key!
 8001f76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f7a:	4877      	ldr	r0, [pc, #476]	; (8002158 <main+0x508>)
 8001f7c:	f001 ffdc 	bl	8003f38 <HAL_GPIO_ReadPin>
 8001f80:	4603      	mov	r3, r0
 8001f82:	72fb      	strb	r3, [r7, #11]

		if (key1_state == 0 && !short_state1 && (ms - time_key1) > 50)
 8001f84:	7afb      	ldrb	r3, [r7, #11]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d113      	bne.n	8001fb2 <main+0x362>
 8001f8a:	4b74      	ldr	r3, [pc, #464]	; (800215c <main+0x50c>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10f      	bne.n	8001fb2 <main+0x362>
 8001f92:	4b73      	ldr	r3, [pc, #460]	; (8002160 <main+0x510>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b32      	cmp	r3, #50	; 0x32
 8001f9c:	d909      	bls.n	8001fb2 <main+0x362>
		{
			short_state1 = 1;
 8001f9e:	4b6f      	ldr	r3, [pc, #444]	; (800215c <main+0x50c>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]
			long_state1 = 0;
 8001fa4:	4b6f      	ldr	r3, [pc, #444]	; (8002164 <main+0x514>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 8001faa:	4a6d      	ldr	r2, [pc, #436]	; (8002160 <main+0x510>)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	e02e      	b.n	8002010 <main+0x3c0>
		}
		else if (key1_state == 0 && !long_state1 && (ms - time_key1) > KEY_LONG_DELAY)
 8001fb2:	7afb      	ldrb	r3, [r7, #11]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d111      	bne.n	8001fdc <main+0x38c>
 8001fb8:	4b6a      	ldr	r3, [pc, #424]	; (8002164 <main+0x514>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10d      	bne.n	8001fdc <main+0x38c>
 8001fc0:	4b67      	ldr	r3, [pc, #412]	; (8002160 <main+0x510>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fcc:	d906      	bls.n	8001fdc <main+0x38c>
		{
			long_state1 = 1;
 8001fce:	4b65      	ldr	r3, [pc, #404]	; (8002164 <main+0x514>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn1_long_rd = 1;
 8001fd4:	4b64      	ldr	r3, [pc, #400]	; (8002168 <main+0x518>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
 8001fda:	e019      	b.n	8002010 <main+0x3c0>
		}
		else if (key1_state == 1 && short_state1 && (ms - time_key1) > 50)
 8001fdc:	7afb      	ldrb	r3, [r7, #11]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d116      	bne.n	8002010 <main+0x3c0>
 8001fe2:	4b5e      	ldr	r3, [pc, #376]	; (800215c <main+0x50c>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d012      	beq.n	8002010 <main+0x3c0>
 8001fea:	4b5d      	ldr	r3, [pc, #372]	; (8002160 <main+0x510>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b32      	cmp	r3, #50	; 0x32
 8001ff4:	d90c      	bls.n	8002010 <main+0x3c0>
		{
			short_state1 = 0;
 8001ff6:	4b59      	ldr	r3, [pc, #356]	; (800215c <main+0x50c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 8001ffc:	4a58      	ldr	r2, [pc, #352]	; (8002160 <main+0x510>)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6013      	str	r3, [r2, #0]

			if (!long_state1)
 8002002:	4b58      	ldr	r3, [pc, #352]	; (8002164 <main+0x514>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d102      	bne.n	8002010 <main+0x3c0>
			{
				// действие на короткое нажатие
				btn1_short_rd = 1;
 800200a:	4b58      	ldr	r3, [pc, #352]	; (800216c <main+0x51c>)
 800200c:	2201      	movs	r2, #1
 800200e:	701a      	strb	r2, [r3, #0]
			}
		}
		uint8_t key2_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); // подставить свой пин
 8002010:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002014:	4850      	ldr	r0, [pc, #320]	; (8002158 <main+0x508>)
 8002016:	f001 ff8f 	bl	8003f38 <HAL_GPIO_ReadPin>
 800201a:	4603      	mov	r3, r0
 800201c:	72bb      	strb	r3, [r7, #10]

		if (key2_state == 0 && !short_state2 && (ms - time_key2) > 50)
 800201e:	7abb      	ldrb	r3, [r7, #10]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d113      	bne.n	800204c <main+0x3fc>
 8002024:	4b52      	ldr	r3, [pc, #328]	; (8002170 <main+0x520>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10f      	bne.n	800204c <main+0x3fc>
 800202c:	4b51      	ldr	r3, [pc, #324]	; (8002174 <main+0x524>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b32      	cmp	r3, #50	; 0x32
 8002036:	d909      	bls.n	800204c <main+0x3fc>
		{
			short_state2 = 1;
 8002038:	4b4d      	ldr	r3, [pc, #308]	; (8002170 <main+0x520>)
 800203a:	2201      	movs	r2, #1
 800203c:	701a      	strb	r2, [r3, #0]
			long_state2 = 0;
 800203e:	4b4e      	ldr	r3, [pc, #312]	; (8002178 <main+0x528>)
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 8002044:	4a4b      	ldr	r2, [pc, #300]	; (8002174 <main+0x524>)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	e02e      	b.n	80020aa <main+0x45a>
		}
		else if (key2_state == 0 && !long_state2 && (ms - time_key2) > KEY_LONG_DELAY)
 800204c:	7abb      	ldrb	r3, [r7, #10]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d111      	bne.n	8002076 <main+0x426>
 8002052:	4b49      	ldr	r3, [pc, #292]	; (8002178 <main+0x528>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10d      	bne.n	8002076 <main+0x426>
 800205a:	4b46      	ldr	r3, [pc, #280]	; (8002174 <main+0x524>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002066:	d906      	bls.n	8002076 <main+0x426>
		{
			long_state2 = 1;
 8002068:	4b43      	ldr	r3, [pc, #268]	; (8002178 <main+0x528>)
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]

			// действие на длинное нажатие
			btn2_long_rd = 1;
 800206e:	4b43      	ldr	r3, [pc, #268]	; (800217c <main+0x52c>)
 8002070:	2201      	movs	r2, #1
 8002072:	701a      	strb	r2, [r3, #0]
 8002074:	e019      	b.n	80020aa <main+0x45a>
		}
		else if (key2_state == 1 && short_state2 && (ms - time_key2) > 50)
 8002076:	7abb      	ldrb	r3, [r7, #10]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d116      	bne.n	80020aa <main+0x45a>
 800207c:	4b3c      	ldr	r3, [pc, #240]	; (8002170 <main+0x520>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d012      	beq.n	80020aa <main+0x45a>
 8002084:	4b3b      	ldr	r3, [pc, #236]	; (8002174 <main+0x524>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b32      	cmp	r3, #50	; 0x32
 800208e:	d90c      	bls.n	80020aa <main+0x45a>
		{
			short_state2 = 0;
 8002090:	4b37      	ldr	r3, [pc, #220]	; (8002170 <main+0x520>)
 8002092:	2200      	movs	r2, #0
 8002094:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 8002096:	4a37      	ldr	r2, [pc, #220]	; (8002174 <main+0x524>)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6013      	str	r3, [r2, #0]

			if (!long_state2)
 800209c:	4b36      	ldr	r3, [pc, #216]	; (8002178 <main+0x528>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d102      	bne.n	80020aa <main+0x45a>
			{
				// действие на короткое нажатие
				btn2_short_rd = 1;
 80020a4:	4b36      	ldr	r3, [pc, #216]	; (8002180 <main+0x530>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	701a      	strb	r2, [r3, #0]
			}
		}

		uint8_t key3_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // подставить свой пин
 80020aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020ae:	482a      	ldr	r0, [pc, #168]	; (8002158 <main+0x508>)
 80020b0:	f001 ff42 	bl	8003f38 <HAL_GPIO_ReadPin>
 80020b4:	4603      	mov	r3, r0
 80020b6:	727b      	strb	r3, [r7, #9]
		if (key3_state == 0 && !short_state3 && (ms - time_key3) > 50)
 80020b8:	7a7b      	ldrb	r3, [r7, #9]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d113      	bne.n	80020e6 <main+0x496>
 80020be:	4b31      	ldr	r3, [pc, #196]	; (8002184 <main+0x534>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10f      	bne.n	80020e6 <main+0x496>
 80020c6:	4b30      	ldr	r3, [pc, #192]	; (8002188 <main+0x538>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b32      	cmp	r3, #50	; 0x32
 80020d0:	d909      	bls.n	80020e6 <main+0x496>
		{
			short_state3 = 1;
 80020d2:	4b2c      	ldr	r3, [pc, #176]	; (8002184 <main+0x534>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	701a      	strb	r2, [r3, #0]
			long_state3 = 0;
 80020d8:	4b2c      	ldr	r3, [pc, #176]	; (800218c <main+0x53c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 80020de:	4a2a      	ldr	r2, [pc, #168]	; (8002188 <main+0x538>)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6013      	str	r3, [r2, #0]
 80020e4:	e032      	b.n	800214c <main+0x4fc>
		}
		else if (key3_state == 0 && !long_state3 && (ms - time_key3) > KEY_LONG_DELAY)
 80020e6:	7a7b      	ldrb	r3, [r7, #9]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d111      	bne.n	8002110 <main+0x4c0>
 80020ec:	4b27      	ldr	r3, [pc, #156]	; (800218c <main+0x53c>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10d      	bne.n	8002110 <main+0x4c0>
 80020f4:	4b24      	ldr	r3, [pc, #144]	; (8002188 <main+0x538>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002100:	d906      	bls.n	8002110 <main+0x4c0>
		{
			long_state3 = 1;
 8002102:	4b22      	ldr	r3, [pc, #136]	; (800218c <main+0x53c>)
 8002104:	2201      	movs	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn3_long_rd = 1;
 8002108:	4b21      	ldr	r3, [pc, #132]	; (8002190 <main+0x540>)
 800210a:	2201      	movs	r2, #1
 800210c:	701a      	strb	r2, [r3, #0]
 800210e:	e01d      	b.n	800214c <main+0x4fc>
		}
		else if (key3_state == 1 && short_state3 && (ms - time_key3) > 50)
 8002110:	7a7b      	ldrb	r3, [r7, #9]
 8002112:	2b01      	cmp	r3, #1
 8002114:	f47f af29 	bne.w	8001f6a <main+0x31a>
 8002118:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <main+0x534>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	f43f af24 	beq.w	8001f6a <main+0x31a>
 8002122:	4b19      	ldr	r3, [pc, #100]	; (8002188 <main+0x538>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b32      	cmp	r3, #50	; 0x32
 800212c:	f67f af1d 	bls.w	8001f6a <main+0x31a>
		{
			short_state3 = 0;
 8002130:	4b14      	ldr	r3, [pc, #80]	; (8002184 <main+0x534>)
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 8002136:	4a14      	ldr	r2, [pc, #80]	; (8002188 <main+0x538>)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6013      	str	r3, [r2, #0]

			if (!long_state3)
 800213c:	4b13      	ldr	r3, [pc, #76]	; (800218c <main+0x53c>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	f47f af12 	bne.w	8001f6a <main+0x31a>
			{
				// действие на короткое нажатие
				btn3_short_rd = 1;
 8002146:	4b13      	ldr	r3, [pc, #76]	; (8002194 <main+0x544>)
 8002148:	2201      	movs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]
	{
 800214c:	e70d      	b.n	8001f6a <main+0x31a>
 800214e:	bf00      	nop
 8002150:	200004a4 	.word	0x200004a4
 8002154:	0801ffff 	.word	0x0801ffff
 8002158:	40010c00 	.word	0x40010c00
 800215c:	20000250 	.word	0x20000250
 8002160:	20000254 	.word	0x20000254
 8002164:	20000251 	.word	0x20000251
 8002168:	20000258 	.word	0x20000258
 800216c:	20000259 	.word	0x20000259
 8002170:	2000025a 	.word	0x2000025a
 8002174:	2000025c 	.word	0x2000025c
 8002178:	2000025b 	.word	0x2000025b
 800217c:	20000260 	.word	0x20000260
 8002180:	20000261 	.word	0x20000261
 8002184:	20000262 	.word	0x20000262
 8002188:	20000264 	.word	0x20000264
 800218c:	20000263 	.word	0x20000263
 8002190:	20000268 	.word	0x20000268
 8002194:	20000269 	.word	0x20000269

08002198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b094      	sub	sp, #80	; 0x50
 800219c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800219e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021a2:	2228      	movs	r2, #40	; 0x28
 80021a4:	2100      	movs	r1, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f009 f8e0 	bl	800b36c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021bc:	1d3b      	adds	r3, r7, #4
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021c8:	2301      	movs	r3, #1
 80021ca:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80021d2:	2300      	movs	r3, #0
 80021d4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021d6:	2301      	movs	r3, #1
 80021d8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021da:	2302      	movs	r3, #2
 80021dc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021e2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80021e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80021e8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ee:	4618      	mov	r0, r3
 80021f0:	f003 fa62 	bl	80056b8 <HAL_RCC_OscConfig>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <SystemClock_Config+0x66>
	{
		Error_Handler();
 80021fa:	f000 fa09 	bl	8002610 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
  */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021fe:	230f      	movs	r3, #15
 8002200:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002202:	2302      	movs	r3, #2
 8002204:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800220a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800220e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002210:	2300      	movs	r3, #0
 8002212:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	2102      	movs	r1, #2
 800221a:	4618      	mov	r0, r3
 800221c:	f003 fccc 	bl	8005bb8 <HAL_RCC_ClockConfig>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <SystemClock_Config+0x92>
	{
		Error_Handler();
 8002226:	f000 f9f3 	bl	8002610 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_USB;
 800222a:	2312      	movs	r3, #18
 800222c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800222e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002232:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002234:	2300      	movs	r3, #0
 8002236:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002238:	1d3b      	adds	r3, r7, #4
 800223a:	4618      	mov	r0, r3
 800223c:	f003 fe42 	bl	8005ec4 <HAL_RCCEx_PeriphCLKConfig>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <SystemClock_Config+0xb2>
	{
		Error_Handler();
 8002246:	f000 f9e3 	bl	8002610 <Error_Handler>
	}
}
 800224a:	bf00      	nop
 800224c:	3750      	adds	r7, #80	; 0x50
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
  */
	hadc1.Instance = ADC1;
 8002264:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <MX_ADC1_Init+0x74>)
 8002266:	4a19      	ldr	r2, [pc, #100]	; (80022cc <MX_ADC1_Init+0x78>)
 8002268:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800226a:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <MX_ADC1_Init+0x74>)
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8002270:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <MX_ADC1_Init+0x74>)
 8002272:	2201      	movs	r2, #1
 8002274:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002276:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <MX_ADC1_Init+0x74>)
 8002278:	2200      	movs	r2, #0
 800227a:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <MX_ADC1_Init+0x74>)
 800227e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002282:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002284:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <MX_ADC1_Init+0x74>)
 8002286:	2200      	movs	r2, #0
 8002288:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 800228a:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <MX_ADC1_Init+0x74>)
 800228c:	2201      	movs	r2, #1
 800228e:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002290:	480d      	ldr	r0, [pc, #52]	; (80022c8 <MX_ADC1_Init+0x74>)
 8002292:	f000 fce1 	bl	8002c58 <HAL_ADC_Init>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_ADC1_Init+0x4c>
	{
		Error_Handler();
 800229c:	f000 f9b8 	bl	8002610 <Error_Handler>
	}
	/** Configure Regular Channel
  */
	sConfig.Channel = ADC_CHANNEL_3;
 80022a0:	2303      	movs	r3, #3
 80022a2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80022a4:	2301      	movs	r3, #1
 80022a6:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80022a8:	2302      	movs	r3, #2
 80022aa:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022ac:	1d3b      	adds	r3, r7, #4
 80022ae:	4619      	mov	r1, r3
 80022b0:	4805      	ldr	r0, [pc, #20]	; (80022c8 <MX_ADC1_Init+0x74>)
 80022b2:	f000 ff37 	bl	8003124 <HAL_ADC_ConfigChannel>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <MX_ADC1_Init+0x6c>
	{
		Error_Handler();
 80022bc:	f000 f9a8 	bl	8002610 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */
}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	2000094c 	.word	0x2000094c
 80022cc:	40012400 	.word	0x40012400

080022d0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <MX_CRC_Init+0x20>)
 80022d6:	4a07      	ldr	r2, [pc, #28]	; (80022f4 <MX_CRC_Init+0x24>)
 80022d8:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80022da:	4805      	ldr	r0, [pc, #20]	; (80022f0 <MX_CRC_Init+0x20>)
 80022dc:	f001 fa59 	bl	8003792 <HAL_CRC_Init>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_CRC_Init+0x1a>
	{
		Error_Handler();
 80022e6:	f000 f993 	bl	8002610 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200008ec 	.word	0x200008ec
 80022f4:	40023000 	.word	0x40023000

080022f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80022fc:	4b18      	ldr	r3, [pc, #96]	; (8002360 <MX_SPI1_Init+0x68>)
 80022fe:	4a19      	ldr	r2, [pc, #100]	; (8002364 <MX_SPI1_Init+0x6c>)
 8002300:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002302:	4b17      	ldr	r3, [pc, #92]	; (8002360 <MX_SPI1_Init+0x68>)
 8002304:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002308:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800230a:	4b15      	ldr	r3, [pc, #84]	; (8002360 <MX_SPI1_Init+0x68>)
 800230c:	2200      	movs	r2, #0
 800230e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <MX_SPI1_Init+0x68>)
 8002312:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002316:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002318:	4b11      	ldr	r3, [pc, #68]	; (8002360 <MX_SPI1_Init+0x68>)
 800231a:	2200      	movs	r2, #0
 800231c:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800231e:	4b10      	ldr	r3, [pc, #64]	; (8002360 <MX_SPI1_Init+0x68>)
 8002320:	2200      	movs	r2, #0
 8002322:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002324:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <MX_SPI1_Init+0x68>)
 8002326:	f44f 7200 	mov.w	r2, #512	; 0x200
 800232a:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <MX_SPI1_Init+0x68>)
 800232e:	2208      	movs	r2, #8
 8002330:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002332:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <MX_SPI1_Init+0x68>)
 8002334:	2200      	movs	r2, #0
 8002336:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002338:	4b09      	ldr	r3, [pc, #36]	; (8002360 <MX_SPI1_Init+0x68>)
 800233a:	2200      	movs	r2, #0
 800233c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800233e:	4b08      	ldr	r3, [pc, #32]	; (8002360 <MX_SPI1_Init+0x68>)
 8002340:	2200      	movs	r2, #0
 8002342:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <MX_SPI1_Init+0x68>)
 8002346:	220a      	movs	r2, #10
 8002348:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800234a:	4805      	ldr	r0, [pc, #20]	; (8002360 <MX_SPI1_Init+0x68>)
 800234c:	f003 ff34 	bl	80061b8 <HAL_SPI_Init>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_SPI1_Init+0x62>
	{
		Error_Handler();
 8002356:	f000 f95b 	bl	8002610 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	2000097c 	.word	0x2000097c
 8002364:	40013000 	.word	0x40013000

08002368 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800236e:	f107 0310 	add.w	r3, r7, #16
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8002378:	463b      	mov	r3, r7
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	605a      	str	r2, [r3, #4]
 8002380:	609a      	str	r2, [r3, #8]
 8002382:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002384:	4b27      	ldr	r3, [pc, #156]	; (8002424 <MX_TIM3_Init+0xbc>)
 8002386:	4a28      	ldr	r2, [pc, #160]	; (8002428 <MX_TIM3_Init+0xc0>)
 8002388:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72 - 1;
 800238a:	4b26      	ldr	r3, [pc, #152]	; (8002424 <MX_TIM3_Init+0xbc>)
 800238c:	2247      	movs	r2, #71	; 0x47
 800238e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002390:	4b24      	ldr	r3, [pc, #144]	; (8002424 <MX_TIM3_Init+0xbc>)
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65000 - 1;
 8002396:	4b23      	ldr	r3, [pc, #140]	; (8002424 <MX_TIM3_Init+0xbc>)
 8002398:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 800239c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800239e:	4b21      	ldr	r3, [pc, #132]	; (8002424 <MX_TIM3_Init+0xbc>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a4:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <MX_TIM3_Init+0xbc>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80023aa:	481e      	ldr	r0, [pc, #120]	; (8002424 <MX_TIM3_Init+0xbc>)
 80023ac:	f004 f96a 	bl	8006684 <HAL_TIM_IC_Init>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_TIM3_Init+0x52>
	{
		Error_Handler();
 80023b6:	f000 f92b 	bl	8002610 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023c2:	f107 0310 	add.w	r3, r7, #16
 80023c6:	4619      	mov	r1, r3
 80023c8:	4816      	ldr	r0, [pc, #88]	; (8002424 <MX_TIM3_Init+0xbc>)
 80023ca:	f004 fe49 	bl	8007060 <HAL_TIMEx_MasterConfigSynchronization>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_TIM3_Init+0x70>
	{
		Error_Handler();
 80023d4:	f000 f91c 	bl	8002610 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023d8:	2300      	movs	r3, #0
 80023da:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80023dc:	2301      	movs	r3, #1
 80023de:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80023e8:	463b      	mov	r3, r7
 80023ea:	2200      	movs	r2, #0
 80023ec:	4619      	mov	r1, r3
 80023ee:	480d      	ldr	r0, [pc, #52]	; (8002424 <MX_TIM3_Init+0xbc>)
 80023f0:	f004 fba6 	bl	8006b40 <HAL_TIM_IC_ConfigChannel>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_TIM3_Init+0x96>
	{
		Error_Handler();
 80023fa:	f000 f909 	bl	8002610 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80023fe:	2302      	movs	r3, #2
 8002400:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002402:	2302      	movs	r3, #2
 8002404:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002406:	463b      	mov	r3, r7
 8002408:	2204      	movs	r2, #4
 800240a:	4619      	mov	r1, r3
 800240c:	4805      	ldr	r0, [pc, #20]	; (8002424 <MX_TIM3_Init+0xbc>)
 800240e:	f004 fb97 	bl	8006b40 <HAL_TIM_IC_ConfigChannel>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_TIM3_Init+0xb4>
	{
		Error_Handler();
 8002418:	f000 f8fa 	bl	8002610 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
}
 800241c:	bf00      	nop
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	200008f4 	.word	0x200008f4
 8002428:	40000400 	.word	0x40000400

0800242c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002432:	f107 0310 	add.w	r3, r7, #16
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 800243c:	463b      	mov	r3, r7
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	605a      	str	r2, [r3, #4]
 8002444:	609a      	str	r2, [r3, #8]
 8002446:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8002448:	4b27      	ldr	r3, [pc, #156]	; (80024e8 <MX_TIM4_Init+0xbc>)
 800244a:	4a28      	ldr	r2, [pc, #160]	; (80024ec <MX_TIM4_Init+0xc0>)
 800244c:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 72 - 1;
 800244e:	4b26      	ldr	r3, [pc, #152]	; (80024e8 <MX_TIM4_Init+0xbc>)
 8002450:	2247      	movs	r2, #71	; 0x47
 8002452:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002454:	4b24      	ldr	r3, [pc, #144]	; (80024e8 <MX_TIM4_Init+0xbc>)
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65000 - 1;
 800245a:	4b23      	ldr	r3, [pc, #140]	; (80024e8 <MX_TIM4_Init+0xbc>)
 800245c:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8002460:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002462:	4b21      	ldr	r3, [pc, #132]	; (80024e8 <MX_TIM4_Init+0xbc>)
 8002464:	2200      	movs	r2, #0
 8002466:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002468:	4b1f      	ldr	r3, [pc, #124]	; (80024e8 <MX_TIM4_Init+0xbc>)
 800246a:	2200      	movs	r2, #0
 800246c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800246e:	481e      	ldr	r0, [pc, #120]	; (80024e8 <MX_TIM4_Init+0xbc>)
 8002470:	f004 f908 	bl	8006684 <HAL_TIM_IC_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_TIM4_Init+0x52>
	{
		Error_Handler();
 800247a:	f000 f8c9 	bl	8002610 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002486:	f107 0310 	add.w	r3, r7, #16
 800248a:	4619      	mov	r1, r3
 800248c:	4816      	ldr	r0, [pc, #88]	; (80024e8 <MX_TIM4_Init+0xbc>)
 800248e:	f004 fde7 	bl	8007060 <HAL_TIMEx_MasterConfigSynchronization>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_TIM4_Init+0x70>
	{
		Error_Handler();
 8002498:	f000 f8ba 	bl	8002610 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800249c:	2300      	movs	r3, #0
 800249e:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80024a0:	2301      	movs	r3, #1
 80024a2:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80024ac:	463b      	mov	r3, r7
 80024ae:	2200      	movs	r2, #0
 80024b0:	4619      	mov	r1, r3
 80024b2:	480d      	ldr	r0, [pc, #52]	; (80024e8 <MX_TIM4_Init+0xbc>)
 80024b4:	f004 fb44 	bl	8006b40 <HAL_TIM_IC_ConfigChannel>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_TIM4_Init+0x96>
	{
		Error_Handler();
 80024be:	f000 f8a7 	bl	8002610 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80024c2:	2302      	movs	r3, #2
 80024c4:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80024c6:	2302      	movs	r3, #2
 80024c8:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80024ca:	463b      	mov	r3, r7
 80024cc:	2204      	movs	r2, #4
 80024ce:	4619      	mov	r1, r3
 80024d0:	4805      	ldr	r0, [pc, #20]	; (80024e8 <MX_TIM4_Init+0xbc>)
 80024d2:	f004 fb35 	bl	8006b40 <HAL_TIM_IC_ConfigChannel>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_TIM4_Init+0xb4>
	{
		Error_Handler();
 80024dc:	f000 f898 	bl	8002610 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
}
 80024e0:	bf00      	nop
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	200008a4 	.word	0x200008a4
 80024ec:	40000800 	.word	0x40000800

080024f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f6:	f107 0310 	add.w	r3, r7, #16
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	609a      	str	r2, [r3, #8]
 8002502:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002504:	4b3e      	ldr	r3, [pc, #248]	; (8002600 <MX_GPIO_Init+0x110>)
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	4a3d      	ldr	r2, [pc, #244]	; (8002600 <MX_GPIO_Init+0x110>)
 800250a:	f043 0310 	orr.w	r3, r3, #16
 800250e:	6193      	str	r3, [r2, #24]
 8002510:	4b3b      	ldr	r3, [pc, #236]	; (8002600 <MX_GPIO_Init+0x110>)
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800251c:	4b38      	ldr	r3, [pc, #224]	; (8002600 <MX_GPIO_Init+0x110>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	4a37      	ldr	r2, [pc, #220]	; (8002600 <MX_GPIO_Init+0x110>)
 8002522:	f043 0320 	orr.w	r3, r3, #32
 8002526:	6193      	str	r3, [r2, #24]
 8002528:	4b35      	ldr	r3, [pc, #212]	; (8002600 <MX_GPIO_Init+0x110>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	f003 0320 	and.w	r3, r3, #32
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002534:	4b32      	ldr	r3, [pc, #200]	; (8002600 <MX_GPIO_Init+0x110>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	4a31      	ldr	r2, [pc, #196]	; (8002600 <MX_GPIO_Init+0x110>)
 800253a:	f043 0304 	orr.w	r3, r3, #4
 800253e:	6193      	str	r3, [r2, #24]
 8002540:	4b2f      	ldr	r3, [pc, #188]	; (8002600 <MX_GPIO_Init+0x110>)
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	607b      	str	r3, [r7, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800254c:	4b2c      	ldr	r3, [pc, #176]	; (8002600 <MX_GPIO_Init+0x110>)
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	4a2b      	ldr	r2, [pc, #172]	; (8002600 <MX_GPIO_Init+0x110>)
 8002552:	f043 0308 	orr.w	r3, r3, #8
 8002556:	6193      	str	r3, [r2, #24]
 8002558:	4b29      	ldr	r3, [pc, #164]	; (8002600 <MX_GPIO_Init+0x110>)
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	603b      	str	r3, [r7, #0]
 8002562:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002564:	2200      	movs	r2, #0
 8002566:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800256a:	4826      	ldr	r0, [pc, #152]	; (8002604 <MX_GPIO_Init+0x114>)
 800256c:	f001 fcfb 	bl	8003f66 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, AD5312_LDAC_Pin | AD5312_SYNC_Pin | GPIO_PIN_10, GPIO_PIN_RESET);
 8002570:	2200      	movs	r2, #0
 8002572:	f240 4112 	movw	r1, #1042	; 0x412
 8002576:	4824      	ldr	r0, [pc, #144]	; (8002608 <MX_GPIO_Init+0x118>)
 8002578:	f001 fcf5 	bl	8003f66 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 800257c:	2201      	movs	r2, #1
 800257e:	2104      	movs	r1, #4
 8002580:	4821      	ldr	r0, [pc, #132]	; (8002608 <MX_GPIO_Init+0x118>)
 8002582:	f001 fcf0 	bl	8003f66 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002586:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800258a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800258c:	2301      	movs	r3, #1
 800258e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002594:	2302      	movs	r3, #2
 8002596:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002598:	f107 0310 	add.w	r3, r7, #16
 800259c:	4619      	mov	r1, r3
 800259e:	4819      	ldr	r0, [pc, #100]	; (8002604 <MX_GPIO_Init+0x114>)
 80025a0:	f001 fb46 	bl	8003c30 <HAL_GPIO_Init>

	/*Configure GPIO pins : AD5312_LDAC_Pin Relay_Pin AD5312_SYNC_Pin PA10 */
	GPIO_InitStruct.Pin = AD5312_LDAC_Pin | Relay_Pin | AD5312_SYNC_Pin | GPIO_PIN_10;
 80025a4:	f240 4316 	movw	r3, #1046	; 0x416
 80025a8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025aa:	2301      	movs	r3, #1
 80025ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b2:	2302      	movs	r3, #2
 80025b4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b6:	f107 0310 	add.w	r3, r7, #16
 80025ba:	4619      	mov	r1, r3
 80025bc:	4812      	ldr	r0, [pc, #72]	; (8002608 <MX_GPIO_Init+0x118>)
 80025be:	f001 fb37 	bl	8003c30 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80025c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025cc:	2301      	movs	r3, #1
 80025ce:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d0:	f107 0310 	add.w	r3, r7, #16
 80025d4:	4619      	mov	r1, r3
 80025d6:	480d      	ldr	r0, [pc, #52]	; (800260c <MX_GPIO_Init+0x11c>)
 80025d8:	f001 fb2a 	bl	8003c30 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB13 PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 80025dc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80025e0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ea:	f107 0310 	add.w	r3, r7, #16
 80025ee:	4619      	mov	r1, r3
 80025f0:	4806      	ldr	r0, [pc, #24]	; (800260c <MX_GPIO_Init+0x11c>)
 80025f2:	f001 fb1d 	bl	8003c30 <HAL_GPIO_Init>
}
 80025f6:	bf00      	nop
 80025f8:	3720      	adds	r7, #32
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000
 8002604:	40011000 	.word	0x40011000
 8002608:	40010800 	.word	0x40010800
 800260c:	40010c00 	.word	0x40010c00

08002610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002622:	4b15      	ldr	r3, [pc, #84]	; (8002678 <HAL_MspInit+0x5c>)
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	4a14      	ldr	r2, [pc, #80]	; (8002678 <HAL_MspInit+0x5c>)
 8002628:	f043 0301 	orr.w	r3, r3, #1
 800262c:	6193      	str	r3, [r2, #24]
 800262e:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_MspInit+0x5c>)
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	60bb      	str	r3, [r7, #8]
 8002638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800263a:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <HAL_MspInit+0x5c>)
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	4a0e      	ldr	r2, [pc, #56]	; (8002678 <HAL_MspInit+0x5c>)
 8002640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002644:	61d3      	str	r3, [r2, #28]
 8002646:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <HAL_MspInit+0x5c>)
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264e:	607b      	str	r3, [r7, #4]
 8002650:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002652:	4b0a      	ldr	r3, [pc, #40]	; (800267c <HAL_MspInit+0x60>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	4a04      	ldr	r2, [pc, #16]	; (800267c <HAL_MspInit+0x60>)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800266e:	bf00      	nop
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr
 8002678:	40021000 	.word	0x40021000
 800267c:	40010000 	.word	0x40010000

08002680 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b088      	sub	sp, #32
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002688:	f107 0310 	add.w	r3, r7, #16
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a18      	ldr	r2, [pc, #96]	; (80026fc <HAL_ADC_MspInit+0x7c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d129      	bne.n	80026f4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026a0:	4b17      	ldr	r3, [pc, #92]	; (8002700 <HAL_ADC_MspInit+0x80>)
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	4a16      	ldr	r2, [pc, #88]	; (8002700 <HAL_ADC_MspInit+0x80>)
 80026a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026aa:	6193      	str	r3, [r2, #24]
 80026ac:	4b14      	ldr	r3, [pc, #80]	; (8002700 <HAL_ADC_MspInit+0x80>)
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b8:	4b11      	ldr	r3, [pc, #68]	; (8002700 <HAL_ADC_MspInit+0x80>)
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	4a10      	ldr	r2, [pc, #64]	; (8002700 <HAL_ADC_MspInit+0x80>)
 80026be:	f043 0304 	orr.w	r3, r3, #4
 80026c2:	6193      	str	r3, [r2, #24]
 80026c4:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <HAL_ADC_MspInit+0x80>)
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026d0:	2308      	movs	r3, #8
 80026d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026d4:	2303      	movs	r3, #3
 80026d6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d8:	f107 0310 	add.w	r3, r7, #16
 80026dc:	4619      	mov	r1, r3
 80026de:	4809      	ldr	r0, [pc, #36]	; (8002704 <HAL_ADC_MspInit+0x84>)
 80026e0:	f001 faa6 	bl	8003c30 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80026e4:	2200      	movs	r2, #0
 80026e6:	2100      	movs	r1, #0
 80026e8:	2012      	movs	r0, #18
 80026ea:	f001 f81c 	bl	8003726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80026ee:	2012      	movs	r0, #18
 80026f0:	f001 f835 	bl	800375e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80026f4:	bf00      	nop
 80026f6:	3720      	adds	r7, #32
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40012400 	.word	0x40012400
 8002700:	40021000 	.word	0x40021000
 8002704:	40010800 	.word	0x40010800

08002708 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a09      	ldr	r2, [pc, #36]	; (800273c <HAL_CRC_MspInit+0x34>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d10b      	bne.n	8002732 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800271a:	4b09      	ldr	r3, [pc, #36]	; (8002740 <HAL_CRC_MspInit+0x38>)
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	4a08      	ldr	r2, [pc, #32]	; (8002740 <HAL_CRC_MspInit+0x38>)
 8002720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002724:	6153      	str	r3, [r2, #20]
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_CRC_MspInit+0x38>)
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002732:	bf00      	nop
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr
 800273c:	40023000 	.word	0x40023000
 8002740:	40021000 	.word	0x40021000

08002744 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274c:	f107 0310 	add.w	r3, r7, #16
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a15      	ldr	r2, [pc, #84]	; (80027b4 <HAL_SPI_MspInit+0x70>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d123      	bne.n	80027ac <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002764:	4b14      	ldr	r3, [pc, #80]	; (80027b8 <HAL_SPI_MspInit+0x74>)
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	4a13      	ldr	r2, [pc, #76]	; (80027b8 <HAL_SPI_MspInit+0x74>)
 800276a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800276e:	6193      	str	r3, [r2, #24]
 8002770:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_SPI_MspInit+0x74>)
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277c:	4b0e      	ldr	r3, [pc, #56]	; (80027b8 <HAL_SPI_MspInit+0x74>)
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	4a0d      	ldr	r2, [pc, #52]	; (80027b8 <HAL_SPI_MspInit+0x74>)
 8002782:	f043 0304 	orr.w	r3, r3, #4
 8002786:	6193      	str	r3, [r2, #24]
 8002788:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <HAL_SPI_MspInit+0x74>)
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AD5312_SCLK_Pin|AD5312_DIN_Pin;
 8002794:	23a0      	movs	r3, #160	; 0xa0
 8002796:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002798:	2302      	movs	r3, #2
 800279a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800279c:	2303      	movs	r3, #3
 800279e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a0:	f107 0310 	add.w	r3, r7, #16
 80027a4:	4619      	mov	r1, r3
 80027a6:	4805      	ldr	r0, [pc, #20]	; (80027bc <HAL_SPI_MspInit+0x78>)
 80027a8:	f001 fa42 	bl	8003c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80027ac:	bf00      	nop
 80027ae:	3720      	adds	r7, #32
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40013000 	.word	0x40013000
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40010800 	.word	0x40010800

080027c0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08c      	sub	sp, #48	; 0x30
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	f107 031c 	add.w	r3, r7, #28
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a3b      	ldr	r2, [pc, #236]	; (80028c8 <HAL_TIM_IC_MspInit+0x108>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d13e      	bne.n	800285e <HAL_TIM_IC_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027e0:	4b3a      	ldr	r3, [pc, #232]	; (80028cc <HAL_TIM_IC_MspInit+0x10c>)
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	4a39      	ldr	r2, [pc, #228]	; (80028cc <HAL_TIM_IC_MspInit+0x10c>)
 80027e6:	f043 0302 	orr.w	r3, r3, #2
 80027ea:	61d3      	str	r3, [r2, #28]
 80027ec:	4b37      	ldr	r3, [pc, #220]	; (80028cc <HAL_TIM_IC_MspInit+0x10c>)
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f8:	4b34      	ldr	r3, [pc, #208]	; (80028cc <HAL_TIM_IC_MspInit+0x10c>)
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	4a33      	ldr	r2, [pc, #204]	; (80028cc <HAL_TIM_IC_MspInit+0x10c>)
 80027fe:	f043 0308 	orr.w	r3, r3, #8
 8002802:	6193      	str	r3, [r2, #24]
 8002804:	4b31      	ldr	r3, [pc, #196]	; (80028cc <HAL_TIM_IC_MspInit+0x10c>)
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002810:	2310      	movs	r3, #16
 8002812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002814:	2300      	movs	r3, #0
 8002816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800281c:	f107 031c 	add.w	r3, r7, #28
 8002820:	4619      	mov	r1, r3
 8002822:	482b      	ldr	r0, [pc, #172]	; (80028d0 <HAL_TIM_IC_MspInit+0x110>)
 8002824:	f001 fa04 	bl	8003c30 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002828:	4b2a      	ldr	r3, [pc, #168]	; (80028d4 <HAL_TIM_IC_MspInit+0x114>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800282e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002830:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002834:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002838:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800283c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800283e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002840:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002844:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002846:	4a23      	ldr	r2, [pc, #140]	; (80028d4 <HAL_TIM_IC_MspInit+0x114>)
 8002848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284a:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800284c:	2200      	movs	r2, #0
 800284e:	2100      	movs	r1, #0
 8002850:	201d      	movs	r0, #29
 8002852:	f000 ff68 	bl	8003726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002856:	201d      	movs	r0, #29
 8002858:	f000 ff81 	bl	800375e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800285c:	e030      	b.n	80028c0 <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM4)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a1d      	ldr	r2, [pc, #116]	; (80028d8 <HAL_TIM_IC_MspInit+0x118>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d12b      	bne.n	80028c0 <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002868:	4b18      	ldr	r3, [pc, #96]	; (80028cc <HAL_TIM_IC_MspInit+0x10c>)
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	4a17      	ldr	r2, [pc, #92]	; (80028cc <HAL_TIM_IC_MspInit+0x10c>)
 800286e:	f043 0304 	orr.w	r3, r3, #4
 8002872:	61d3      	str	r3, [r2, #28]
 8002874:	4b15      	ldr	r3, [pc, #84]	; (80028cc <HAL_TIM_IC_MspInit+0x10c>)
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	613b      	str	r3, [r7, #16]
 800287e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002880:	4b12      	ldr	r3, [pc, #72]	; (80028cc <HAL_TIM_IC_MspInit+0x10c>)
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	4a11      	ldr	r2, [pc, #68]	; (80028cc <HAL_TIM_IC_MspInit+0x10c>)
 8002886:	f043 0308 	orr.w	r3, r3, #8
 800288a:	6193      	str	r3, [r2, #24]
 800288c:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <HAL_TIM_IC_MspInit+0x10c>)
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	f003 0308 	and.w	r3, r3, #8
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002898:	2340      	movs	r3, #64	; 0x40
 800289a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800289c:	2300      	movs	r3, #0
 800289e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a4:	f107 031c 	add.w	r3, r7, #28
 80028a8:	4619      	mov	r1, r3
 80028aa:	4809      	ldr	r0, [pc, #36]	; (80028d0 <HAL_TIM_IC_MspInit+0x110>)
 80028ac:	f001 f9c0 	bl	8003c30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80028b0:	2200      	movs	r2, #0
 80028b2:	2100      	movs	r1, #0
 80028b4:	201e      	movs	r0, #30
 80028b6:	f000 ff36 	bl	8003726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80028ba:	201e      	movs	r0, #30
 80028bc:	f000 ff4f 	bl	800375e <HAL_NVIC_EnableIRQ>
}
 80028c0:	bf00      	nop
 80028c2:	3730      	adds	r7, #48	; 0x30
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40000400 	.word	0x40000400
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40010c00 	.word	0x40010c00
 80028d4:	40010000 	.word	0x40010000
 80028d8:	40000800 	.word	0x40000800

080028dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028e0:	bf00      	nop
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr

080028e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 80028ec:	4806      	ldr	r0, [pc, #24]	; (8002908 <HardFault_Handler+0x20>)
 80028ee:	f008 fd45 	bl	800b37c <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 80028f2:	4805      	ldr	r0, [pc, #20]	; (8002908 <HardFault_Handler+0x20>)
 80028f4:	f008 fd42 	bl	800b37c <iprintf>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80028f8:	2200      	movs	r2, #0
 80028fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028fe:	4803      	ldr	r0, [pc, #12]	; (800290c <HardFault_Handler+0x24>)
 8002900:	f001 fb31 	bl	8003f66 <HAL_GPIO_WritePin>
	  printf("HardFault_IRQn");
 8002904:	e7f5      	b.n	80028f2 <HardFault_Handler+0xa>
 8002906:	bf00      	nop
 8002908:	0800c7f0 	.word	0x0800c7f0
 800290c:	40011000 	.word	0x40011000

08002910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002914:	e7fe      	b.n	8002914 <MemManage_Handler+0x4>

08002916 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002916:	b480      	push	{r7}
 8002918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800291a:	e7fe      	b.n	800291a <BusFault_Handler+0x4>

0800291c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002920:	e7fe      	b.n	8002920 <UsageFault_Handler+0x4>

08002922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr

0800292e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800292e:	b480      	push	{r7}
 8002930:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800293a:	b480      	push	{r7}
 800293c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr

08002946 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800294a:	f000 f945 	bl	8002bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002958:	4802      	ldr	r0, [pc, #8]	; (8002964 <ADC1_2_IRQHandler+0x10>)
 800295a:	f000 fb17 	bl	8002f8c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	2000094c 	.word	0x2000094c

08002968 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800296c:	4802      	ldr	r0, [pc, #8]	; (8002978 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800296e:	f001 fc43 	bl	80041f8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	200012bc 	.word	0x200012bc

0800297c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002980:	4802      	ldr	r0, [pc, #8]	; (800298c <TIM3_IRQHandler+0x10>)
 8002982:	f003 ffd5 	bl	8006930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	200008f4 	.word	0x200008f4

08002990 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002994:	4802      	ldr	r0, [pc, #8]	; (80029a0 <TIM4_IRQHandler+0x10>)
 8002996:	f003 ffcb 	bl	8006930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	200008a4 	.word	0x200008a4

080029a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	e00a      	b.n	80029cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029b6:	f3af 8000 	nop.w
 80029ba:	4601      	mov	r1, r0
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	60ba      	str	r2, [r7, #8]
 80029c2:	b2ca      	uxtb	r2, r1
 80029c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	3301      	adds	r3, #1
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	dbf0      	blt.n	80029b6 <_read+0x12>
	}

return len;
 80029d4:	687b      	ldr	r3, [r7, #4]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <_close>:
	}
	return len;
}

int _close(int file)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
	return -1;
 80029e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a04:	605a      	str	r2, [r3, #4]
	return 0;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr

08002a12 <_isatty>:

int _isatty(int file)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
	return 1;
 8002a1a:	2301      	movs	r3, #1
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr

08002a26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b085      	sub	sp, #20
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	60f8      	str	r0, [r7, #12]
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	607a      	str	r2, [r7, #4]
	return 0;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr
	...

08002a40 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002a48:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <_sbrk+0x50>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d102      	bne.n	8002a56 <_sbrk+0x16>
		heap_end = &end;
 8002a50:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <_sbrk+0x50>)
 8002a52:	4a10      	ldr	r2, [pc, #64]	; (8002a94 <_sbrk+0x54>)
 8002a54:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002a56:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <_sbrk+0x50>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <_sbrk+0x50>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4413      	add	r3, r2
 8002a64:	466a      	mov	r2, sp
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d907      	bls.n	8002a7a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002a6a:	f008 fc2d 	bl	800b2c8 <__errno>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	220c      	movs	r2, #12
 8002a72:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002a74:	f04f 33ff 	mov.w	r3, #4294967295
 8002a78:	e006      	b.n	8002a88 <_sbrk+0x48>
	}

	heap_end += incr;
 8002a7a:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <_sbrk+0x50>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4413      	add	r3, r2
 8002a82:	4a03      	ldr	r2, [pc, #12]	; (8002a90 <_sbrk+0x50>)
 8002a84:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002a86:	68fb      	ldr	r3, [r7, #12]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20000274 	.word	0x20000274
 8002a94:	200015b8 	.word	0x200015b8

08002a98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002a9c:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <SystemInit+0x5c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a14      	ldr	r2, [pc, #80]	; (8002af4 <SystemInit+0x5c>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002aa8:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <SystemInit+0x5c>)
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	4911      	ldr	r1, [pc, #68]	; (8002af4 <SystemInit+0x5c>)
 8002aae:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <SystemInit+0x60>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002ab4:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <SystemInit+0x5c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a0e      	ldr	r2, [pc, #56]	; (8002af4 <SystemInit+0x5c>)
 8002aba:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <SystemInit+0x5c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a0a      	ldr	r2, [pc, #40]	; (8002af4 <SystemInit+0x5c>)
 8002aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ace:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002ad0:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <SystemInit+0x5c>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	4a07      	ldr	r2, [pc, #28]	; (8002af4 <SystemInit+0x5c>)
 8002ad6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002ada:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002adc:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <SystemInit+0x5c>)
 8002ade:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002ae2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002ae4:	4b05      	ldr	r3, [pc, #20]	; (8002afc <SystemInit+0x64>)
 8002ae6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002aea:	609a      	str	r2, [r3, #8]
#endif 
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr
 8002af4:	40021000 	.word	0x40021000
 8002af8:	f8ff0000 	.word	0xf8ff0000
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002b00:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002b02:	e003      	b.n	8002b0c <LoopCopyDataInit>

08002b04 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002b06:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002b08:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002b0a:	3104      	adds	r1, #4

08002b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002b0c:	480a      	ldr	r0, [pc, #40]	; (8002b38 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002b0e:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002b10:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002b12:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002b14:	d3f6      	bcc.n	8002b04 <CopyDataInit>
  ldr r2, =_sbss
 8002b16:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002b18:	e002      	b.n	8002b20 <LoopFillZerobss>

08002b1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002b1a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002b1c:	f842 3b04 	str.w	r3, [r2], #4

08002b20 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002b20:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002b22:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002b24:	d3f9      	bcc.n	8002b1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b26:	f7ff ffb7 	bl	8002a98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b2a:	f008 fbd3 	bl	800b2d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b2e:	f7ff f88f 	bl	8001c50 <main>
  bx lr
 8002b32:	4770      	bx	lr
  ldr r3, =_sidata
 8002b34:	0800c948 	.word	0x0800c948
  ldr r0, =_sdata
 8002b38:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002b3c:	200001f0 	.word	0x200001f0
  ldr r2, =_sbss
 8002b40:	200001f0 	.word	0x200001f0
  ldr r3, = _ebss
 8002b44:	200015b8 	.word	0x200015b8

08002b48 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b48:	e7fe      	b.n	8002b48 <CAN1_RX1_IRQHandler>
	...

08002b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b50:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <HAL_Init+0x28>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a07      	ldr	r2, [pc, #28]	; (8002b74 <HAL_Init+0x28>)
 8002b56:	f043 0310 	orr.w	r3, r3, #16
 8002b5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b5c:	2003      	movs	r0, #3
 8002b5e:	f000 fdd7 	bl	8003710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b62:	2000      	movs	r0, #0
 8002b64:	f000 f808 	bl	8002b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b68:	f7ff fd58 	bl	800261c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40022000 	.word	0x40022000

08002b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b80:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <HAL_InitTick+0x54>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <HAL_InitTick+0x58>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 fdef 	bl	800377a <HAL_SYSTICK_Config>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e00e      	b.n	8002bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b0f      	cmp	r3, #15
 8002baa:	d80a      	bhi.n	8002bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bac:	2200      	movs	r2, #0
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb4:	f000 fdb7 	bl	8003726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bb8:	4a06      	ldr	r2, [pc, #24]	; (8002bd4 <HAL_InitTick+0x5c>)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	e000      	b.n	8002bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20000010 	.word	0x20000010
 8002bd0:	20000018 	.word	0x20000018
 8002bd4:	20000014 	.word	0x20000014

08002bd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <HAL_IncTick+0x1c>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	461a      	mov	r2, r3
 8002be2:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <HAL_IncTick+0x20>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4413      	add	r3, r2
 8002be8:	4a03      	ldr	r2, [pc, #12]	; (8002bf8 <HAL_IncTick+0x20>)
 8002bea:	6013      	str	r3, [r2, #0]
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr
 8002bf4:	20000018 	.word	0x20000018
 8002bf8:	200009d4 	.word	0x200009d4

08002bfc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8002c00:	4b02      	ldr	r3, [pc, #8]	; (8002c0c <HAL_GetTick+0x10>)
 8002c02:	681b      	ldr	r3, [r3, #0]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr
 8002c0c:	200009d4 	.word	0x200009d4

08002c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c18:	f7ff fff0 	bl	8002bfc <HAL_GetTick>
 8002c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c28:	d005      	beq.n	8002c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c2a:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <HAL_Delay+0x44>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4413      	add	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c36:	bf00      	nop
 8002c38:	f7ff ffe0 	bl	8002bfc <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d8f7      	bhi.n	8002c38 <HAL_Delay+0x28>
  {
  }
}
 8002c48:	bf00      	nop
 8002c4a:	bf00      	nop
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20000018 	.word	0x20000018

08002c58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c60:	2300      	movs	r3, #0
 8002c62:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e0be      	b.n	8002df8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d109      	bne.n	8002c9c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7ff fcf2 	bl	8002680 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 fb8b 	bl	80033b8 <ADC_ConversionStop_Disable>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	f003 0310 	and.w	r3, r3, #16
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f040 8099 	bne.w	8002de6 <HAL_ADC_Init+0x18e>
 8002cb4:	7dfb      	ldrb	r3, [r7, #23]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f040 8095 	bne.w	8002de6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cc4:	f023 0302 	bic.w	r3, r3, #2
 8002cc8:	f043 0202 	orr.w	r2, r3, #2
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cd8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	7b1b      	ldrb	r3, [r3, #12]
 8002cde:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ce0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cf0:	d003      	beq.n	8002cfa <HAL_ADC_Init+0xa2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d102      	bne.n	8002d00 <HAL_ADC_Init+0xa8>
 8002cfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cfe:	e000      	b.n	8002d02 <HAL_ADC_Init+0xaa>
 8002d00:	2300      	movs	r3, #0
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	7d1b      	ldrb	r3, [r3, #20]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d119      	bne.n	8002d44 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	7b1b      	ldrb	r3, [r3, #12]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d109      	bne.n	8002d2c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	035a      	lsls	r2, r3, #13
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	e00b      	b.n	8002d44 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d30:	f043 0220 	orr.w	r2, r3, #32
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	f043 0201 	orr.w	r2, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	4b28      	ldr	r3, [pc, #160]	; (8002e00 <HAL_ADC_Init+0x1a8>)
 8002d60:	4013      	ands	r3, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6812      	ldr	r2, [r2, #0]
 8002d66:	68b9      	ldr	r1, [r7, #8]
 8002d68:	430b      	orrs	r3, r1
 8002d6a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d74:	d003      	beq.n	8002d7e <HAL_ADC_Init+0x126>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d104      	bne.n	8002d88 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	051b      	lsls	r3, r3, #20
 8002d86:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	4b18      	ldr	r3, [pc, #96]	; (8002e04 <HAL_ADC_Init+0x1ac>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d10b      	bne.n	8002dc4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db6:	f023 0303 	bic.w	r3, r3, #3
 8002dba:	f043 0201 	orr.w	r2, r3, #1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002dc2:	e018      	b.n	8002df6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc8:	f023 0312 	bic.w	r3, r3, #18
 8002dcc:	f043 0210 	orr.w	r2, r3, #16
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	f043 0201 	orr.w	r2, r3, #1
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002de4:	e007      	b.n	8002df6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dea:	f043 0210 	orr.w	r2, r3, #16
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	ffe1f7fd 	.word	0xffe1f7fd
 8002e04:	ff1f0efe 	.word	0xff1f0efe

08002e08 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_ADC_Start_IT+0x1a>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e0a0      	b.n	8002f64 <HAL_ADC_Start_IT+0x15c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fa72 	bl	8003314 <ADC_Enable>
 8002e30:	4603      	mov	r3, r0
 8002e32:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f040 808f 	bne.w	8002f5a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e44:	f023 0301 	bic.w	r3, r3, #1
 8002e48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a45      	ldr	r2, [pc, #276]	; (8002f6c <HAL_ADC_Start_IT+0x164>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d105      	bne.n	8002e66 <HAL_ADC_Start_IT+0x5e>
 8002e5a:	4b45      	ldr	r3, [pc, #276]	; (8002f70 <HAL_ADC_Start_IT+0x168>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d115      	bne.n	8002e92 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d026      	beq.n	8002ece <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e90:	e01d      	b.n	8002ece <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a33      	ldr	r2, [pc, #204]	; (8002f70 <HAL_ADC_Start_IT+0x168>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d004      	beq.n	8002eb2 <HAL_ADC_Start_IT+0xaa>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a2f      	ldr	r2, [pc, #188]	; (8002f6c <HAL_ADC_Start_IT+0x164>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d10d      	bne.n	8002ece <HAL_ADC_Start_IT+0xc6>
 8002eb2:	4b2f      	ldr	r3, [pc, #188]	; (8002f70 <HAL_ADC_Start_IT+0x168>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d007      	beq.n	8002ece <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ec6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d006      	beq.n	8002ee8 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ede:	f023 0206 	bic.w	r2, r3, #6
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ee6:	e002      	b.n	8002eee <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f06f 0202 	mvn.w	r2, #2
 8002efe:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0220 	orr.w	r2, r2, #32
 8002f0e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f1a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f1e:	d113      	bne.n	8002f48 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f24:	4a11      	ldr	r2, [pc, #68]	; (8002f6c <HAL_ADC_Start_IT+0x164>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d105      	bne.n	8002f36 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f2a:	4b11      	ldr	r3, [pc, #68]	; (8002f70 <HAL_ADC_Start_IT+0x168>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d108      	bne.n	8002f48 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002f44:	609a      	str	r2, [r3, #8]
 8002f46:	e00c      	b.n	8002f62 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f56:	609a      	str	r2, [r3, #8]
 8002f58:	e003      	b.n	8002f62 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40012800 	.word	0x40012800
 8002f70:	40012400 	.word	0x40012400

08002f74 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b20      	cmp	r3, #32
 8002fa0:	d140      	bne.n	8003024 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d139      	bne.n	8003024 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d105      	bne.n	8002fc8 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002fd2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002fd6:	d11d      	bne.n	8003014 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d119      	bne.n	8003014 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0220 	bic.w	r2, r2, #32
 8002fee:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d105      	bne.n	8003014 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	f043 0201 	orr.w	r2, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7fe f987 	bl	8001328 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f06f 0212 	mvn.w	r2, #18
 8003022:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302e:	2b80      	cmp	r3, #128	; 0x80
 8003030:	d14f      	bne.n	80030d2 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b04      	cmp	r3, #4
 800303e:	d148      	bne.n	80030d2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003044:	f003 0310 	and.w	r3, r3, #16
 8003048:	2b00      	cmp	r3, #0
 800304a:	d105      	bne.n	8003058 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003050:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003062:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003066:	d012      	beq.n	800308e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003072:	2b00      	cmp	r3, #0
 8003074:	d125      	bne.n	80030c2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003080:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003084:	d11d      	bne.n	80030c2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800308a:	2b00      	cmp	r3, #0
 800308c:	d119      	bne.n	80030c2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800309c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d105      	bne.n	80030c2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ba:	f043 0201 	orr.w	r2, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 fa4e 	bl	8003564 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f06f 020c 	mvn.w	r2, #12
 80030d0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030dc:	2b40      	cmp	r3, #64	; 0x40
 80030de:	d114      	bne.n	800310a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d10d      	bne.n	800310a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f809 	bl	8003112 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0201 	mvn.w	r2, #1
 8003108:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800310a:	bf00      	nop
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x20>
 8003140:	2302      	movs	r3, #2
 8003142:	e0dc      	b.n	80032fe <HAL_ADC_ConfigChannel+0x1da>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b06      	cmp	r3, #6
 8003152:	d81c      	bhi.n	800318e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	3b05      	subs	r3, #5
 8003166:	221f      	movs	r2, #31
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	43db      	mvns	r3, r3
 800316e:	4019      	ands	r1, r3
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	6818      	ldr	r0, [r3, #0]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	3b05      	subs	r3, #5
 8003180:	fa00 f203 	lsl.w	r2, r0, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	635a      	str	r2, [r3, #52]	; 0x34
 800318c:	e03c      	b.n	8003208 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b0c      	cmp	r3, #12
 8003194:	d81c      	bhi.n	80031d0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	3b23      	subs	r3, #35	; 0x23
 80031a8:	221f      	movs	r2, #31
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43db      	mvns	r3, r3
 80031b0:	4019      	ands	r1, r3
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	3b23      	subs	r3, #35	; 0x23
 80031c2:	fa00 f203 	lsl.w	r2, r0, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	631a      	str	r2, [r3, #48]	; 0x30
 80031ce:	e01b      	b.n	8003208 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	3b41      	subs	r3, #65	; 0x41
 80031e2:	221f      	movs	r2, #31
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	4019      	ands	r1, r3
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	3b41      	subs	r3, #65	; 0x41
 80031fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b09      	cmp	r3, #9
 800320e:	d91c      	bls.n	800324a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68d9      	ldr	r1, [r3, #12]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	4613      	mov	r3, r2
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	4413      	add	r3, r2
 8003220:	3b1e      	subs	r3, #30
 8003222:	2207      	movs	r2, #7
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	43db      	mvns	r3, r3
 800322a:	4019      	ands	r1, r3
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	6898      	ldr	r0, [r3, #8]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	4613      	mov	r3, r2
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	4413      	add	r3, r2
 800323a:	3b1e      	subs	r3, #30
 800323c:	fa00 f203 	lsl.w	r2, r0, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	60da      	str	r2, [r3, #12]
 8003248:	e019      	b.n	800327e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6919      	ldr	r1, [r3, #16]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4613      	mov	r3, r2
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	4413      	add	r3, r2
 800325a:	2207      	movs	r2, #7
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	4019      	ands	r1, r3
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	6898      	ldr	r0, [r3, #8]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	4613      	mov	r3, r2
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	4413      	add	r3, r2
 8003272:	fa00 f203 	lsl.w	r2, r0, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b10      	cmp	r3, #16
 8003284:	d003      	beq.n	800328e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800328a:	2b11      	cmp	r3, #17
 800328c:	d132      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a1d      	ldr	r2, [pc, #116]	; (8003308 <HAL_ADC_ConfigChannel+0x1e4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d125      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d126      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80032b4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b10      	cmp	r3, #16
 80032bc:	d11a      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032be:	4b13      	ldr	r3, [pc, #76]	; (800330c <HAL_ADC_ConfigChannel+0x1e8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a13      	ldr	r2, [pc, #76]	; (8003310 <HAL_ADC_ConfigChannel+0x1ec>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	0c9a      	lsrs	r2, r3, #18
 80032ca:	4613      	mov	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032d4:	e002      	b.n	80032dc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	3b01      	subs	r3, #1
 80032da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f9      	bne.n	80032d6 <HAL_ADC_ConfigChannel+0x1b2>
 80032e2:	e007      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e8:	f043 0220 	orr.w	r2, r3, #32
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr
 8003308:	40012400 	.word	0x40012400
 800330c:	20000010 	.word	0x20000010
 8003310:	431bde83 	.word	0x431bde83

08003314 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b01      	cmp	r3, #1
 8003330:	d039      	beq.n	80033a6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0201 	orr.w	r2, r2, #1
 8003340:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003342:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <ADC_Enable+0x9c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a1b      	ldr	r2, [pc, #108]	; (80033b4 <ADC_Enable+0xa0>)
 8003348:	fba2 2303 	umull	r2, r3, r2, r3
 800334c:	0c9b      	lsrs	r3, r3, #18
 800334e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003350:	e002      	b.n	8003358 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	3b01      	subs	r3, #1
 8003356:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f9      	bne.n	8003352 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800335e:	f7ff fc4d 	bl	8002bfc <HAL_GetTick>
 8003362:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003364:	e018      	b.n	8003398 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003366:	f7ff fc49 	bl	8002bfc <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d911      	bls.n	8003398 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	f043 0210 	orr.w	r2, r3, #16
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	f043 0201 	orr.w	r2, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e007      	b.n	80033a8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d1df      	bne.n	8003366 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	20000010 	.word	0x20000010
 80033b4:	431bde83 	.word	0x431bde83

080033b8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d127      	bne.n	8003422 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0201 	bic.w	r2, r2, #1
 80033e0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033e2:	f7ff fc0b 	bl	8002bfc <HAL_GetTick>
 80033e6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033e8:	e014      	b.n	8003414 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033ea:	f7ff fc07 	bl	8002bfc <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d90d      	bls.n	8003414 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fc:	f043 0210 	orr.w	r2, r3, #16
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	f043 0201 	orr.w	r2, r3, #1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e007      	b.n	8003424 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b01      	cmp	r3, #1
 8003420:	d0e3      	beq.n	80033ea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800342c:	b590      	push	{r4, r7, lr}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003442:	2b01      	cmp	r3, #1
 8003444:	d101      	bne.n	800344a <HAL_ADCEx_Calibration_Start+0x1e>
 8003446:	2302      	movs	r3, #2
 8003448:	e086      	b.n	8003558 <HAL_ADCEx_Calibration_Start+0x12c>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff ffb0 	bl	80033b8 <ADC_ConversionStop_Disable>
 8003458:	4603      	mov	r3, r0
 800345a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800345c:	7dfb      	ldrb	r3, [r7, #23]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d175      	bne.n	800354e <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003466:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800346a:	f023 0302 	bic.w	r3, r3, #2
 800346e:	f043 0202 	orr.w	r2, r3, #2
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003476:	4b3a      	ldr	r3, [pc, #232]	; (8003560 <HAL_ADCEx_Calibration_Start+0x134>)
 8003478:	681c      	ldr	r4, [r3, #0]
 800347a:	2002      	movs	r0, #2
 800347c:	f002 fdd8 	bl	8006030 <HAL_RCCEx_GetPeriphCLKFreq>
 8003480:	4603      	mov	r3, r0
 8003482:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003486:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003488:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800348a:	e002      	b.n	8003492 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	3b01      	subs	r3, #1
 8003490:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1f9      	bne.n	800348c <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff ff3b 	bl	8003314 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f042 0208 	orr.w	r2, r2, #8
 80034ac:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80034ae:	f7ff fba5 	bl	8002bfc <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80034b4:	e014      	b.n	80034e0 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80034b6:	f7ff fba1 	bl	8002bfc <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b0a      	cmp	r3, #10
 80034c2:	d90d      	bls.n	80034e0 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	f023 0312 	bic.w	r3, r3, #18
 80034cc:	f043 0210 	orr.w	r2, r3, #16
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e03b      	b.n	8003558 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1e3      	bne.n	80034b6 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f042 0204 	orr.w	r2, r2, #4
 80034fc:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80034fe:	f7ff fb7d 	bl	8002bfc <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003504:	e014      	b.n	8003530 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003506:	f7ff fb79 	bl	8002bfc <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b0a      	cmp	r3, #10
 8003512:	d90d      	bls.n	8003530 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003518:	f023 0312 	bic.w	r3, r3, #18
 800351c:	f043 0210 	orr.w	r2, r3, #16
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e013      	b.n	8003558 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1e3      	bne.n	8003506 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003542:	f023 0303 	bic.w	r3, r3, #3
 8003546:	f043 0201 	orr.w	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003556:	7dfb      	ldrb	r3, [r7, #23]
}
 8003558:	4618      	mov	r0, r3
 800355a:	371c      	adds	r7, #28
 800355c:	46bd      	mov	sp, r7
 800355e:	bd90      	pop	{r4, r7, pc}
 8003560:	20000010 	.word	0x20000010

08003564 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	bc80      	pop	{r7}
 8003574:	4770      	bx	lr
	...

08003578 <__NVIC_SetPriorityGrouping>:
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003588:	4b0c      	ldr	r3, [pc, #48]	; (80035bc <__NVIC_SetPriorityGrouping+0x44>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003594:	4013      	ands	r3, r2
 8003596:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035aa:	4a04      	ldr	r2, [pc, #16]	; (80035bc <__NVIC_SetPriorityGrouping+0x44>)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	60d3      	str	r3, [r2, #12]
}
 80035b0:	bf00      	nop
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	e000ed00 	.word	0xe000ed00

080035c0 <__NVIC_GetPriorityGrouping>:
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035c4:	4b04      	ldr	r3, [pc, #16]	; (80035d8 <__NVIC_GetPriorityGrouping+0x18>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	0a1b      	lsrs	r3, r3, #8
 80035ca:	f003 0307 	and.w	r3, r3, #7
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	e000ed00 	.word	0xe000ed00

080035dc <__NVIC_EnableIRQ>:
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	db0b      	blt.n	8003606 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	f003 021f 	and.w	r2, r3, #31
 80035f4:	4906      	ldr	r1, [pc, #24]	; (8003610 <__NVIC_EnableIRQ+0x34>)
 80035f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	2001      	movs	r0, #1
 80035fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr
 8003610:	e000e100 	.word	0xe000e100

08003614 <__NVIC_SetPriority>:
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	6039      	str	r1, [r7, #0]
 800361e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003624:	2b00      	cmp	r3, #0
 8003626:	db0a      	blt.n	800363e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	b2da      	uxtb	r2, r3
 800362c:	490c      	ldr	r1, [pc, #48]	; (8003660 <__NVIC_SetPriority+0x4c>)
 800362e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003632:	0112      	lsls	r2, r2, #4
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	440b      	add	r3, r1
 8003638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800363c:	e00a      	b.n	8003654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	4908      	ldr	r1, [pc, #32]	; (8003664 <__NVIC_SetPriority+0x50>)
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	3b04      	subs	r3, #4
 800364c:	0112      	lsls	r2, r2, #4
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	440b      	add	r3, r1
 8003652:	761a      	strb	r2, [r3, #24]
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	e000e100 	.word	0xe000e100
 8003664:	e000ed00 	.word	0xe000ed00

08003668 <NVIC_EncodePriority>:
{
 8003668:	b480      	push	{r7}
 800366a:	b089      	sub	sp, #36	; 0x24
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f1c3 0307 	rsb	r3, r3, #7
 8003682:	2b04      	cmp	r3, #4
 8003684:	bf28      	it	cs
 8003686:	2304      	movcs	r3, #4
 8003688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	3304      	adds	r3, #4
 800368e:	2b06      	cmp	r3, #6
 8003690:	d902      	bls.n	8003698 <NVIC_EncodePriority+0x30>
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	3b03      	subs	r3, #3
 8003696:	e000      	b.n	800369a <NVIC_EncodePriority+0x32>
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800369c:	f04f 32ff 	mov.w	r2, #4294967295
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43da      	mvns	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	401a      	ands	r2, r3
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036b0:	f04f 31ff 	mov.w	r1, #4294967295
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ba:	43d9      	mvns	r1, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c0:	4313      	orrs	r3, r2
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3724      	adds	r7, #36	; 0x24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr

080036cc <SysTick_Config>:
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036dc:	d301      	bcc.n	80036e2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80036de:	2301      	movs	r3, #1
 80036e0:	e00f      	b.n	8003702 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036e2:	4a0a      	ldr	r2, [pc, #40]	; (800370c <SysTick_Config+0x40>)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ea:	210f      	movs	r1, #15
 80036ec:	f04f 30ff 	mov.w	r0, #4294967295
 80036f0:	f7ff ff90 	bl	8003614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036f4:	4b05      	ldr	r3, [pc, #20]	; (800370c <SysTick_Config+0x40>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036fa:	4b04      	ldr	r3, [pc, #16]	; (800370c <SysTick_Config+0x40>)
 80036fc:	2207      	movs	r2, #7
 80036fe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	e000e010 	.word	0xe000e010

08003710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff ff2d 	bl	8003578 <__NVIC_SetPriorityGrouping>
}
 800371e:	bf00      	nop
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003726:	b580      	push	{r7, lr}
 8003728:	b086      	sub	sp, #24
 800372a:	af00      	add	r7, sp, #0
 800372c:	4603      	mov	r3, r0
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	607a      	str	r2, [r7, #4]
 8003732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003734:	2300      	movs	r3, #0
 8003736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003738:	f7ff ff42 	bl	80035c0 <__NVIC_GetPriorityGrouping>
 800373c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	6978      	ldr	r0, [r7, #20]
 8003744:	f7ff ff90 	bl	8003668 <NVIC_EncodePriority>
 8003748:	4602      	mov	r2, r0
 800374a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800374e:	4611      	mov	r1, r2
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff ff5f 	bl	8003614 <__NVIC_SetPriority>
}
 8003756:	bf00      	nop
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	af00      	add	r7, sp, #0
 8003764:	4603      	mov	r3, r0
 8003766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff ff35 	bl	80035dc <__NVIC_EnableIRQ>
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b082      	sub	sp, #8
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff ffa2 	bl	80036cc <SysTick_Config>
 8003788:	4603      	mov	r3, r0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b082      	sub	sp, #8
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e00e      	b.n	80037c2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	795b      	ldrb	r3, [r3, #5]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d105      	bne.n	80037ba <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7fe ffa7 	bl	8002708 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b087      	sub	sp, #28
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	60f8      	str	r0, [r7, #12]
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80037d6:	2300      	movs	r3, #0
 80037d8:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2202      	movs	r2, #2
 80037de:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0201 	orr.w	r2, r2, #1
 80037ee:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	e00a      	b.n	800380c <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	441a      	add	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	3301      	adds	r3, #1
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	429a      	cmp	r2, r3
 8003812:	d3f0      	bcc.n	80037f6 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2201      	movs	r2, #1
 8003820:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8003822:	693b      	ldr	r3, [r7, #16]
}
 8003824:	4618      	mov	r0, r3
 8003826:	371c      	adds	r7, #28
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	4770      	bx	lr
	...

08003830 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003842:	2300      	movs	r3, #0
 8003844:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003846:	2300      	movs	r3, #0
 8003848:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800384a:	4b2f      	ldr	r3, [pc, #188]	; (8003908 <HAL_FLASH_Program+0xd8>)
 800384c:	7e1b      	ldrb	r3, [r3, #24]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <HAL_FLASH_Program+0x26>
 8003852:	2302      	movs	r3, #2
 8003854:	e054      	b.n	8003900 <HAL_FLASH_Program+0xd0>
 8003856:	4b2c      	ldr	r3, [pc, #176]	; (8003908 <HAL_FLASH_Program+0xd8>)
 8003858:	2201      	movs	r2, #1
 800385a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800385c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003860:	f000 f8a8 	bl	80039b4 <FLASH_WaitForLastOperation>
 8003864:	4603      	mov	r3, r0
 8003866:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003868:	7dfb      	ldrb	r3, [r7, #23]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d144      	bne.n	80038f8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d102      	bne.n	800387a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003874:	2301      	movs	r3, #1
 8003876:	757b      	strb	r3, [r7, #21]
 8003878:	e007      	b.n	800388a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b02      	cmp	r3, #2
 800387e:	d102      	bne.n	8003886 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003880:	2302      	movs	r3, #2
 8003882:	757b      	strb	r3, [r7, #21]
 8003884:	e001      	b.n	800388a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003886:	2304      	movs	r3, #4
 8003888:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800388a:	2300      	movs	r3, #0
 800388c:	75bb      	strb	r3, [r7, #22]
 800388e:	e02d      	b.n	80038ec <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003890:	7dbb      	ldrb	r3, [r7, #22]
 8003892:	005a      	lsls	r2, r3, #1
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	eb02 0c03 	add.w	ip, r2, r3
 800389a:	7dbb      	ldrb	r3, [r7, #22]
 800389c:	0119      	lsls	r1, r3, #4
 800389e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038a2:	f1c1 0620 	rsb	r6, r1, #32
 80038a6:	f1a1 0020 	sub.w	r0, r1, #32
 80038aa:	fa22 f401 	lsr.w	r4, r2, r1
 80038ae:	fa03 f606 	lsl.w	r6, r3, r6
 80038b2:	4334      	orrs	r4, r6
 80038b4:	fa23 f000 	lsr.w	r0, r3, r0
 80038b8:	4304      	orrs	r4, r0
 80038ba:	fa23 f501 	lsr.w	r5, r3, r1
 80038be:	b2a3      	uxth	r3, r4
 80038c0:	4619      	mov	r1, r3
 80038c2:	4660      	mov	r0, ip
 80038c4:	f000 f85a 	bl	800397c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80038c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80038cc:	f000 f872 	bl	80039b4 <FLASH_WaitForLastOperation>
 80038d0:	4603      	mov	r3, r0
 80038d2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80038d4:	4b0d      	ldr	r3, [pc, #52]	; (800390c <HAL_FLASH_Program+0xdc>)
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	4a0c      	ldr	r2, [pc, #48]	; (800390c <HAL_FLASH_Program+0xdc>)
 80038da:	f023 0301 	bic.w	r3, r3, #1
 80038de:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80038e0:	7dfb      	ldrb	r3, [r7, #23]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d107      	bne.n	80038f6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80038e6:	7dbb      	ldrb	r3, [r7, #22]
 80038e8:	3301      	adds	r3, #1
 80038ea:	75bb      	strb	r3, [r7, #22]
 80038ec:	7dba      	ldrb	r2, [r7, #22]
 80038ee:	7d7b      	ldrb	r3, [r7, #21]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d3cd      	bcc.n	8003890 <HAL_FLASH_Program+0x60>
 80038f4:	e000      	b.n	80038f8 <HAL_FLASH_Program+0xc8>
      {
        break;
 80038f6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80038f8:	4b03      	ldr	r3, [pc, #12]	; (8003908 <HAL_FLASH_Program+0xd8>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	761a      	strb	r2, [r3, #24]

  return status;
 80038fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003900:	4618      	mov	r0, r3
 8003902:	371c      	adds	r7, #28
 8003904:	46bd      	mov	sp, r7
 8003906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003908:	200009d8 	.word	0x200009d8
 800390c:	40022000 	.word	0x40022000

08003910 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800391a:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <HAL_FLASH_Unlock+0x40>)
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00d      	beq.n	8003942 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003926:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <HAL_FLASH_Unlock+0x40>)
 8003928:	4a0a      	ldr	r2, [pc, #40]	; (8003954 <HAL_FLASH_Unlock+0x44>)
 800392a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800392c:	4b08      	ldr	r3, [pc, #32]	; (8003950 <HAL_FLASH_Unlock+0x40>)
 800392e:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <HAL_FLASH_Unlock+0x48>)
 8003930:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003932:	4b07      	ldr	r3, [pc, #28]	; (8003950 <HAL_FLASH_Unlock+0x40>)
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003942:	79fb      	ldrb	r3, [r7, #7]
}
 8003944:	4618      	mov	r0, r3
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40022000 	.word	0x40022000
 8003954:	45670123 	.word	0x45670123
 8003958:	cdef89ab 	.word	0xcdef89ab

0800395c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003960:	4b05      	ldr	r3, [pc, #20]	; (8003978 <HAL_FLASH_Lock+0x1c>)
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	4a04      	ldr	r2, [pc, #16]	; (8003978 <HAL_FLASH_Lock+0x1c>)
 8003966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800396a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	46bd      	mov	sp, r7
 8003972:	bc80      	pop	{r7}
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	40022000 	.word	0x40022000

0800397c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	460b      	mov	r3, r1
 8003986:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003988:	4b08      	ldr	r3, [pc, #32]	; (80039ac <FLASH_Program_HalfWord+0x30>)
 800398a:	2200      	movs	r2, #0
 800398c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800398e:	4b08      	ldr	r3, [pc, #32]	; (80039b0 <FLASH_Program_HalfWord+0x34>)
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	4a07      	ldr	r2, [pc, #28]	; (80039b0 <FLASH_Program_HalfWord+0x34>)
 8003994:	f043 0301 	orr.w	r3, r3, #1
 8003998:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	887a      	ldrh	r2, [r7, #2]
 800399e:	801a      	strh	r2, [r3, #0]
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	200009d8 	.word	0x200009d8
 80039b0:	40022000 	.word	0x40022000

080039b4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80039bc:	f7ff f91e 	bl	8002bfc <HAL_GetTick>
 80039c0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80039c2:	e010      	b.n	80039e6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ca:	d00c      	beq.n	80039e6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d007      	beq.n	80039e2 <FLASH_WaitForLastOperation+0x2e>
 80039d2:	f7ff f913 	bl	8002bfc <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d201      	bcs.n	80039e6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e025      	b.n	8003a32 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80039e6:	4b15      	ldr	r3, [pc, #84]	; (8003a3c <FLASH_WaitForLastOperation+0x88>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1e8      	bne.n	80039c4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80039f2:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <FLASH_WaitForLastOperation+0x88>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f003 0320 	and.w	r3, r3, #32
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80039fe:	4b0f      	ldr	r3, [pc, #60]	; (8003a3c <FLASH_WaitForLastOperation+0x88>)
 8003a00:	2220      	movs	r2, #32
 8003a02:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003a04:	4b0d      	ldr	r3, [pc, #52]	; (8003a3c <FLASH_WaitForLastOperation+0x88>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f003 0310 	and.w	r3, r3, #16
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10b      	bne.n	8003a28 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003a10:	4b0a      	ldr	r3, [pc, #40]	; (8003a3c <FLASH_WaitForLastOperation+0x88>)
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d105      	bne.n	8003a28 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003a1c:	4b07      	ldr	r3, [pc, #28]	; (8003a3c <FLASH_WaitForLastOperation+0x88>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003a28:	f000 f80a 	bl	8003a40 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e000      	b.n	8003a32 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40022000 	.word	0x40022000

08003a40 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003a4a:	4b23      	ldr	r3, [pc, #140]	; (8003ad8 <FLASH_SetErrorCode+0x98>)
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f003 0310 	and.w	r3, r3, #16
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d009      	beq.n	8003a6a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003a56:	4b21      	ldr	r3, [pc, #132]	; (8003adc <FLASH_SetErrorCode+0x9c>)
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	f043 0302 	orr.w	r3, r3, #2
 8003a5e:	4a1f      	ldr	r2, [pc, #124]	; (8003adc <FLASH_SetErrorCode+0x9c>)
 8003a60:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f043 0310 	orr.w	r3, r3, #16
 8003a68:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003a6a:	4b1b      	ldr	r3, [pc, #108]	; (8003ad8 <FLASH_SetErrorCode+0x98>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f003 0304 	and.w	r3, r3, #4
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d009      	beq.n	8003a8a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003a76:	4b19      	ldr	r3, [pc, #100]	; (8003adc <FLASH_SetErrorCode+0x9c>)
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	f043 0301 	orr.w	r3, r3, #1
 8003a7e:	4a17      	ldr	r2, [pc, #92]	; (8003adc <FLASH_SetErrorCode+0x9c>)
 8003a80:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f043 0304 	orr.w	r3, r3, #4
 8003a88:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003a8a:	4b13      	ldr	r3, [pc, #76]	; (8003ad8 <FLASH_SetErrorCode+0x98>)
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00b      	beq.n	8003aae <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003a96:	4b11      	ldr	r3, [pc, #68]	; (8003adc <FLASH_SetErrorCode+0x9c>)
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	f043 0304 	orr.w	r3, r3, #4
 8003a9e:	4a0f      	ldr	r2, [pc, #60]	; (8003adc <FLASH_SetErrorCode+0x9c>)
 8003aa0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003aa2:	4b0d      	ldr	r3, [pc, #52]	; (8003ad8 <FLASH_SetErrorCode+0x98>)
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	4a0c      	ldr	r2, [pc, #48]	; (8003ad8 <FLASH_SetErrorCode+0x98>)
 8003aa8:	f023 0301 	bic.w	r3, r3, #1
 8003aac:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f240 1201 	movw	r2, #257	; 0x101
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d106      	bne.n	8003ac6 <FLASH_SetErrorCode+0x86>
 8003ab8:	4b07      	ldr	r3, [pc, #28]	; (8003ad8 <FLASH_SetErrorCode+0x98>)
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	4a06      	ldr	r2, [pc, #24]	; (8003ad8 <FLASH_SetErrorCode+0x98>)
 8003abe:	f023 0301 	bic.w	r3, r3, #1
 8003ac2:	61d3      	str	r3, [r2, #28]
}  
 8003ac4:	e002      	b.n	8003acc <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003ac6:	4a04      	ldr	r2, [pc, #16]	; (8003ad8 <FLASH_SetErrorCode+0x98>)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	60d3      	str	r3, [r2, #12]
}  
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc80      	pop	{r7}
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40022000 	.word	0x40022000
 8003adc:	200009d8 	.word	0x200009d8

08003ae0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003af2:	4b2f      	ldr	r3, [pc, #188]	; (8003bb0 <HAL_FLASHEx_Erase+0xd0>)
 8003af4:	7e1b      	ldrb	r3, [r3, #24]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d101      	bne.n	8003afe <HAL_FLASHEx_Erase+0x1e>
 8003afa:	2302      	movs	r3, #2
 8003afc:	e053      	b.n	8003ba6 <HAL_FLASHEx_Erase+0xc6>
 8003afe:	4b2c      	ldr	r3, [pc, #176]	; (8003bb0 <HAL_FLASHEx_Erase+0xd0>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d116      	bne.n	8003b3a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003b0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b10:	f7ff ff50 	bl	80039b4 <FLASH_WaitForLastOperation>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d141      	bne.n	8003b9e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003b1a:	2001      	movs	r0, #1
 8003b1c:	f000 f84c 	bl	8003bb8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b20:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b24:	f7ff ff46 	bl	80039b4 <FLASH_WaitForLastOperation>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003b2c:	4b21      	ldr	r3, [pc, #132]	; (8003bb4 <HAL_FLASHEx_Erase+0xd4>)
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	4a20      	ldr	r2, [pc, #128]	; (8003bb4 <HAL_FLASHEx_Erase+0xd4>)
 8003b32:	f023 0304 	bic.w	r3, r3, #4
 8003b36:	6113      	str	r3, [r2, #16]
 8003b38:	e031      	b.n	8003b9e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003b3a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b3e:	f7ff ff39 	bl	80039b4 <FLASH_WaitForLastOperation>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d12a      	bne.n	8003b9e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b4e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	60bb      	str	r3, [r7, #8]
 8003b56:	e019      	b.n	8003b8c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003b58:	68b8      	ldr	r0, [r7, #8]
 8003b5a:	f000 f849 	bl	8003bf0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b5e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b62:	f7ff ff27 	bl	80039b4 <FLASH_WaitForLastOperation>
 8003b66:	4603      	mov	r3, r0
 8003b68:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003b6a:	4b12      	ldr	r3, [pc, #72]	; (8003bb4 <HAL_FLASHEx_Erase+0xd4>)
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	4a11      	ldr	r2, [pc, #68]	; (8003bb4 <HAL_FLASHEx_Erase+0xd4>)
 8003b70:	f023 0302 	bic.w	r3, r3, #2
 8003b74:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	601a      	str	r2, [r3, #0]
            break;
 8003b82:	e00c      	b.n	8003b9e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b8a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	029a      	lsls	r2, r3, #10
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d3dc      	bcc.n	8003b58 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003b9e:	4b04      	ldr	r3, [pc, #16]	; (8003bb0 <HAL_FLASHEx_Erase+0xd0>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	761a      	strb	r2, [r3, #24]

  return status;
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	200009d8 	.word	0x200009d8
 8003bb4:	40022000 	.word	0x40022000

08003bb8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003bc0:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <FLASH_MassErase+0x30>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003bc6:	4b09      	ldr	r3, [pc, #36]	; (8003bec <FLASH_MassErase+0x34>)
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	4a08      	ldr	r2, [pc, #32]	; (8003bec <FLASH_MassErase+0x34>)
 8003bcc:	f043 0304 	orr.w	r3, r3, #4
 8003bd0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <FLASH_MassErase+0x34>)
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	4a05      	ldr	r2, [pc, #20]	; (8003bec <FLASH_MassErase+0x34>)
 8003bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bdc:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bc80      	pop	{r7}
 8003be6:	4770      	bx	lr
 8003be8:	200009d8 	.word	0x200009d8
 8003bec:	40022000 	.word	0x40022000

08003bf0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003bf8:	4b0b      	ldr	r3, [pc, #44]	; (8003c28 <FLASH_PageErase+0x38>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003bfe:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <FLASH_PageErase+0x3c>)
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	4a0a      	ldr	r2, [pc, #40]	; (8003c2c <FLASH_PageErase+0x3c>)
 8003c04:	f043 0302 	orr.w	r3, r3, #2
 8003c08:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003c0a:	4a08      	ldr	r2, [pc, #32]	; (8003c2c <FLASH_PageErase+0x3c>)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <FLASH_PageErase+0x3c>)
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	4a05      	ldr	r2, [pc, #20]	; (8003c2c <FLASH_PageErase+0x3c>)
 8003c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c1a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bc80      	pop	{r7}
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	200009d8 	.word	0x200009d8
 8003c2c:	40022000 	.word	0x40022000

08003c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b08b      	sub	sp, #44	; 0x2c
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c42:	e169      	b.n	8003f18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c44:	2201      	movs	r2, #1
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69fa      	ldr	r2, [r7, #28]
 8003c54:	4013      	ands	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	f040 8158 	bne.w	8003f12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	4a9a      	ldr	r2, [pc, #616]	; (8003ed0 <HAL_GPIO_Init+0x2a0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d05e      	beq.n	8003d2a <HAL_GPIO_Init+0xfa>
 8003c6c:	4a98      	ldr	r2, [pc, #608]	; (8003ed0 <HAL_GPIO_Init+0x2a0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d875      	bhi.n	8003d5e <HAL_GPIO_Init+0x12e>
 8003c72:	4a98      	ldr	r2, [pc, #608]	; (8003ed4 <HAL_GPIO_Init+0x2a4>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d058      	beq.n	8003d2a <HAL_GPIO_Init+0xfa>
 8003c78:	4a96      	ldr	r2, [pc, #600]	; (8003ed4 <HAL_GPIO_Init+0x2a4>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d86f      	bhi.n	8003d5e <HAL_GPIO_Init+0x12e>
 8003c7e:	4a96      	ldr	r2, [pc, #600]	; (8003ed8 <HAL_GPIO_Init+0x2a8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d052      	beq.n	8003d2a <HAL_GPIO_Init+0xfa>
 8003c84:	4a94      	ldr	r2, [pc, #592]	; (8003ed8 <HAL_GPIO_Init+0x2a8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d869      	bhi.n	8003d5e <HAL_GPIO_Init+0x12e>
 8003c8a:	4a94      	ldr	r2, [pc, #592]	; (8003edc <HAL_GPIO_Init+0x2ac>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d04c      	beq.n	8003d2a <HAL_GPIO_Init+0xfa>
 8003c90:	4a92      	ldr	r2, [pc, #584]	; (8003edc <HAL_GPIO_Init+0x2ac>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d863      	bhi.n	8003d5e <HAL_GPIO_Init+0x12e>
 8003c96:	4a92      	ldr	r2, [pc, #584]	; (8003ee0 <HAL_GPIO_Init+0x2b0>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d046      	beq.n	8003d2a <HAL_GPIO_Init+0xfa>
 8003c9c:	4a90      	ldr	r2, [pc, #576]	; (8003ee0 <HAL_GPIO_Init+0x2b0>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d85d      	bhi.n	8003d5e <HAL_GPIO_Init+0x12e>
 8003ca2:	2b12      	cmp	r3, #18
 8003ca4:	d82a      	bhi.n	8003cfc <HAL_GPIO_Init+0xcc>
 8003ca6:	2b12      	cmp	r3, #18
 8003ca8:	d859      	bhi.n	8003d5e <HAL_GPIO_Init+0x12e>
 8003caa:	a201      	add	r2, pc, #4	; (adr r2, 8003cb0 <HAL_GPIO_Init+0x80>)
 8003cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb0:	08003d2b 	.word	0x08003d2b
 8003cb4:	08003d05 	.word	0x08003d05
 8003cb8:	08003d17 	.word	0x08003d17
 8003cbc:	08003d59 	.word	0x08003d59
 8003cc0:	08003d5f 	.word	0x08003d5f
 8003cc4:	08003d5f 	.word	0x08003d5f
 8003cc8:	08003d5f 	.word	0x08003d5f
 8003ccc:	08003d5f 	.word	0x08003d5f
 8003cd0:	08003d5f 	.word	0x08003d5f
 8003cd4:	08003d5f 	.word	0x08003d5f
 8003cd8:	08003d5f 	.word	0x08003d5f
 8003cdc:	08003d5f 	.word	0x08003d5f
 8003ce0:	08003d5f 	.word	0x08003d5f
 8003ce4:	08003d5f 	.word	0x08003d5f
 8003ce8:	08003d5f 	.word	0x08003d5f
 8003cec:	08003d5f 	.word	0x08003d5f
 8003cf0:	08003d5f 	.word	0x08003d5f
 8003cf4:	08003d0d 	.word	0x08003d0d
 8003cf8:	08003d21 	.word	0x08003d21
 8003cfc:	4a79      	ldr	r2, [pc, #484]	; (8003ee4 <HAL_GPIO_Init+0x2b4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d013      	beq.n	8003d2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d02:	e02c      	b.n	8003d5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	623b      	str	r3, [r7, #32]
          break;
 8003d0a:	e029      	b.n	8003d60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	3304      	adds	r3, #4
 8003d12:	623b      	str	r3, [r7, #32]
          break;
 8003d14:	e024      	b.n	8003d60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	3308      	adds	r3, #8
 8003d1c:	623b      	str	r3, [r7, #32]
          break;
 8003d1e:	e01f      	b.n	8003d60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	330c      	adds	r3, #12
 8003d26:	623b      	str	r3, [r7, #32]
          break;
 8003d28:	e01a      	b.n	8003d60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d102      	bne.n	8003d38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d32:	2304      	movs	r3, #4
 8003d34:	623b      	str	r3, [r7, #32]
          break;
 8003d36:	e013      	b.n	8003d60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d105      	bne.n	8003d4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d40:	2308      	movs	r3, #8
 8003d42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	611a      	str	r2, [r3, #16]
          break;
 8003d4a:	e009      	b.n	8003d60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d4c:	2308      	movs	r3, #8
 8003d4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	69fa      	ldr	r2, [r7, #28]
 8003d54:	615a      	str	r2, [r3, #20]
          break;
 8003d56:	e003      	b.n	8003d60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	623b      	str	r3, [r7, #32]
          break;
 8003d5c:	e000      	b.n	8003d60 <HAL_GPIO_Init+0x130>
          break;
 8003d5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	2bff      	cmp	r3, #255	; 0xff
 8003d64:	d801      	bhi.n	8003d6a <HAL_GPIO_Init+0x13a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	e001      	b.n	8003d6e <HAL_GPIO_Init+0x13e>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	2bff      	cmp	r3, #255	; 0xff
 8003d74:	d802      	bhi.n	8003d7c <HAL_GPIO_Init+0x14c>
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	e002      	b.n	8003d82 <HAL_GPIO_Init+0x152>
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	3b08      	subs	r3, #8
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	210f      	movs	r1, #15
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	401a      	ands	r2, r3
 8003d94:	6a39      	ldr	r1, [r7, #32]
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 80b1 	beq.w	8003f12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003db0:	4b4d      	ldr	r3, [pc, #308]	; (8003ee8 <HAL_GPIO_Init+0x2b8>)
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	4a4c      	ldr	r2, [pc, #304]	; (8003ee8 <HAL_GPIO_Init+0x2b8>)
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	6193      	str	r3, [r2, #24]
 8003dbc:	4b4a      	ldr	r3, [pc, #296]	; (8003ee8 <HAL_GPIO_Init+0x2b8>)
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	60bb      	str	r3, [r7, #8]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003dc8:	4a48      	ldr	r2, [pc, #288]	; (8003eec <HAL_GPIO_Init+0x2bc>)
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	089b      	lsrs	r3, r3, #2
 8003dce:	3302      	adds	r3, #2
 8003dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	f003 0303 	and.w	r3, r3, #3
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	220f      	movs	r2, #15
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	43db      	mvns	r3, r3
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4013      	ands	r3, r2
 8003dea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a40      	ldr	r2, [pc, #256]	; (8003ef0 <HAL_GPIO_Init+0x2c0>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d013      	beq.n	8003e1c <HAL_GPIO_Init+0x1ec>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a3f      	ldr	r2, [pc, #252]	; (8003ef4 <HAL_GPIO_Init+0x2c4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00d      	beq.n	8003e18 <HAL_GPIO_Init+0x1e8>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a3e      	ldr	r2, [pc, #248]	; (8003ef8 <HAL_GPIO_Init+0x2c8>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d007      	beq.n	8003e14 <HAL_GPIO_Init+0x1e4>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a3d      	ldr	r2, [pc, #244]	; (8003efc <HAL_GPIO_Init+0x2cc>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d101      	bne.n	8003e10 <HAL_GPIO_Init+0x1e0>
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e006      	b.n	8003e1e <HAL_GPIO_Init+0x1ee>
 8003e10:	2304      	movs	r3, #4
 8003e12:	e004      	b.n	8003e1e <HAL_GPIO_Init+0x1ee>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e002      	b.n	8003e1e <HAL_GPIO_Init+0x1ee>
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e000      	b.n	8003e1e <HAL_GPIO_Init+0x1ee>
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e20:	f002 0203 	and.w	r2, r2, #3
 8003e24:	0092      	lsls	r2, r2, #2
 8003e26:	4093      	lsls	r3, r2
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e2e:	492f      	ldr	r1, [pc, #188]	; (8003eec <HAL_GPIO_Init+0x2bc>)
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	089b      	lsrs	r3, r3, #2
 8003e34:	3302      	adds	r3, #2
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d006      	beq.n	8003e56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e48:	4b2d      	ldr	r3, [pc, #180]	; (8003f00 <HAL_GPIO_Init+0x2d0>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	492c      	ldr	r1, [pc, #176]	; (8003f00 <HAL_GPIO_Init+0x2d0>)
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	600b      	str	r3, [r1, #0]
 8003e54:	e006      	b.n	8003e64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e56:	4b2a      	ldr	r3, [pc, #168]	; (8003f00 <HAL_GPIO_Init+0x2d0>)
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	4928      	ldr	r1, [pc, #160]	; (8003f00 <HAL_GPIO_Init+0x2d0>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d006      	beq.n	8003e7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e70:	4b23      	ldr	r3, [pc, #140]	; (8003f00 <HAL_GPIO_Init+0x2d0>)
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	4922      	ldr	r1, [pc, #136]	; (8003f00 <HAL_GPIO_Init+0x2d0>)
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	604b      	str	r3, [r1, #4]
 8003e7c:	e006      	b.n	8003e8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e7e:	4b20      	ldr	r3, [pc, #128]	; (8003f00 <HAL_GPIO_Init+0x2d0>)
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	43db      	mvns	r3, r3
 8003e86:	491e      	ldr	r1, [pc, #120]	; (8003f00 <HAL_GPIO_Init+0x2d0>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d006      	beq.n	8003ea6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e98:	4b19      	ldr	r3, [pc, #100]	; (8003f00 <HAL_GPIO_Init+0x2d0>)
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	4918      	ldr	r1, [pc, #96]	; (8003f00 <HAL_GPIO_Init+0x2d0>)
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	608b      	str	r3, [r1, #8]
 8003ea4:	e006      	b.n	8003eb4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ea6:	4b16      	ldr	r3, [pc, #88]	; (8003f00 <HAL_GPIO_Init+0x2d0>)
 8003ea8:	689a      	ldr	r2, [r3, #8]
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	43db      	mvns	r3, r3
 8003eae:	4914      	ldr	r1, [pc, #80]	; (8003f00 <HAL_GPIO_Init+0x2d0>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d021      	beq.n	8003f04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ec0:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <HAL_GPIO_Init+0x2d0>)
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	490e      	ldr	r1, [pc, #56]	; (8003f00 <HAL_GPIO_Init+0x2d0>)
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	60cb      	str	r3, [r1, #12]
 8003ecc:	e021      	b.n	8003f12 <HAL_GPIO_Init+0x2e2>
 8003ece:	bf00      	nop
 8003ed0:	10320000 	.word	0x10320000
 8003ed4:	10310000 	.word	0x10310000
 8003ed8:	10220000 	.word	0x10220000
 8003edc:	10210000 	.word	0x10210000
 8003ee0:	10120000 	.word	0x10120000
 8003ee4:	10110000 	.word	0x10110000
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	40010000 	.word	0x40010000
 8003ef0:	40010800 	.word	0x40010800
 8003ef4:	40010c00 	.word	0x40010c00
 8003ef8:	40011000 	.word	0x40011000
 8003efc:	40011400 	.word	0x40011400
 8003f00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f04:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <HAL_GPIO_Init+0x304>)
 8003f06:	68da      	ldr	r2, [r3, #12]
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	4909      	ldr	r1, [pc, #36]	; (8003f34 <HAL_GPIO_Init+0x304>)
 8003f0e:	4013      	ands	r3, r2
 8003f10:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	3301      	adds	r3, #1
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f47f ae8e 	bne.w	8003c44 <HAL_GPIO_Init+0x14>
  }
}
 8003f28:	bf00      	nop
 8003f2a:	bf00      	nop
 8003f2c:	372c      	adds	r7, #44	; 0x2c
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc80      	pop	{r7}
 8003f32:	4770      	bx	lr
 8003f34:	40010400 	.word	0x40010400

08003f38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	460b      	mov	r3, r1
 8003f42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	887b      	ldrh	r3, [r7, #2]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d002      	beq.n	8003f56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f50:	2301      	movs	r3, #1
 8003f52:	73fb      	strb	r3, [r7, #15]
 8003f54:	e001      	b.n	8003f5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f56:	2300      	movs	r3, #0
 8003f58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bc80      	pop	{r7}
 8003f64:	4770      	bx	lr

08003f66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	460b      	mov	r3, r1
 8003f70:	807b      	strh	r3, [r7, #2]
 8003f72:	4613      	mov	r3, r2
 8003f74:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f76:	787b      	ldrb	r3, [r7, #1]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f7c:	887a      	ldrh	r2, [r7, #2]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f82:	e003      	b.n	8003f8c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f84:	887b      	ldrh	r3, [r7, #2]
 8003f86:	041a      	lsls	r2, r3, #16
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	611a      	str	r2, [r3, #16]
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr

08003f96 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f98:	b08b      	sub	sp, #44	; 0x2c
 8003f9a:	af06      	add	r7, sp, #24
 8003f9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e0fd      	b.n	80041a4 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d106      	bne.n	8003fc2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f006 fed9 	bl	800ad74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2203      	movs	r2, #3
 8003fc6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f003 f8dc 	bl	800718c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	603b      	str	r3, [r7, #0]
 8003fda:	687e      	ldr	r6, [r7, #4]
 8003fdc:	466d      	mov	r5, sp
 8003fde:	f106 0410 	add.w	r4, r6, #16
 8003fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	602b      	str	r3, [r5, #0]
 8003fea:	1d33      	adds	r3, r6, #4
 8003fec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fee:	6838      	ldr	r0, [r7, #0]
 8003ff0:	f003 f8a6 	bl	8007140 <USB_CoreInit>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d005      	beq.n	8004006 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e0ce      	b.n	80041a4 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2100      	movs	r1, #0
 800400c:	4618      	mov	r0, r3
 800400e:	f003 f8d7 	bl	80071c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004012:	2300      	movs	r3, #0
 8004014:	73fb      	strb	r3, [r7, #15]
 8004016:	e04c      	b.n	80040b2 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004018:	7bfb      	ldrb	r3, [r7, #15]
 800401a:	6879      	ldr	r1, [r7, #4]
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	4613      	mov	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	440b      	add	r3, r1
 8004028:	3301      	adds	r3, #1
 800402a:	2201      	movs	r2, #1
 800402c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800402e:	7bfb      	ldrb	r3, [r7, #15]
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	4613      	mov	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	440b      	add	r3, r1
 800403e:	7bfa      	ldrb	r2, [r7, #15]
 8004040:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004042:	7bfa      	ldrb	r2, [r7, #15]
 8004044:	7bfb      	ldrb	r3, [r7, #15]
 8004046:	b298      	uxth	r0, r3
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	440b      	add	r3, r1
 8004054:	3336      	adds	r3, #54	; 0x36
 8004056:	4602      	mov	r2, r0
 8004058:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800405a:	7bfb      	ldrb	r3, [r7, #15]
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	440b      	add	r3, r1
 800406a:	3303      	adds	r3, #3
 800406c:	2200      	movs	r2, #0
 800406e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004070:	7bfa      	ldrb	r2, [r7, #15]
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	4613      	mov	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	440b      	add	r3, r1
 800407e:	3338      	adds	r3, #56	; 0x38
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004084:	7bfa      	ldrb	r2, [r7, #15]
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	4613      	mov	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	440b      	add	r3, r1
 8004092:	333c      	adds	r3, #60	; 0x3c
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004098:	7bfa      	ldrb	r2, [r7, #15]
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	440b      	add	r3, r1
 80040a6:	3340      	adds	r3, #64	; 0x40
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	3301      	adds	r3, #1
 80040b0:	73fb      	strb	r3, [r7, #15]
 80040b2:	7bfa      	ldrb	r2, [r7, #15]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d3ad      	bcc.n	8004018 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040bc:	2300      	movs	r3, #0
 80040be:	73fb      	strb	r3, [r7, #15]
 80040c0:	e044      	b.n	800414c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80040c2:	7bfa      	ldrb	r2, [r7, #15]
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	4613      	mov	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	440b      	add	r3, r1
 80040d0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80040d4:	2200      	movs	r2, #0
 80040d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80040d8:	7bfa      	ldrb	r2, [r7, #15]
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	440b      	add	r3, r1
 80040e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80040ea:	7bfa      	ldrb	r2, [r7, #15]
 80040ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80040ee:	7bfa      	ldrb	r2, [r7, #15]
 80040f0:	6879      	ldr	r1, [r7, #4]
 80040f2:	4613      	mov	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	440b      	add	r3, r1
 80040fc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004100:	2200      	movs	r2, #0
 8004102:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004104:	7bfa      	ldrb	r2, [r7, #15]
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	4613      	mov	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	440b      	add	r3, r1
 8004112:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800411a:	7bfa      	ldrb	r2, [r7, #15]
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	4613      	mov	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	440b      	add	r3, r1
 8004128:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004130:	7bfa      	ldrb	r2, [r7, #15]
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	440b      	add	r3, r1
 800413e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004146:	7bfb      	ldrb	r3, [r7, #15]
 8004148:	3301      	adds	r3, #1
 800414a:	73fb      	strb	r3, [r7, #15]
 800414c:	7bfa      	ldrb	r2, [r7, #15]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	429a      	cmp	r2, r3
 8004154:	d3b5      	bcc.n	80040c2 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	603b      	str	r3, [r7, #0]
 800415c:	687e      	ldr	r6, [r7, #4]
 800415e:	466d      	mov	r5, sp
 8004160:	f106 0410 	add.w	r4, r6, #16
 8004164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004168:	6823      	ldr	r3, [r4, #0]
 800416a:	602b      	str	r3, [r5, #0]
 800416c:	1d33      	adds	r3, r6, #4
 800416e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004170:	6838      	ldr	r0, [r7, #0]
 8004172:	f003 f831 	bl	80071d8 <USB_DevInit>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d005      	beq.n	8004188 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e00d      	b.n	80041a4 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4618      	mov	r0, r3
 800419e:	f004 ffcb 	bl	8009138 <USB_DevDisconnect>

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d101      	bne.n	80041c2 <HAL_PCD_Start+0x16>
 80041be:	2302      	movs	r3, #2
 80041c0:	e016      	b.n	80041f0 <HAL_PCD_Start+0x44>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f002 ffc6 	bl	8007160 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80041d4:	2101      	movs	r1, #1
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f007 f83f 	bl	800b25a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f004 ff9f 	bl	8009124 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b088      	sub	sp, #32
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4618      	mov	r0, r3
 8004206:	f004 ffa1 	bl	800914c <USB_ReadInterrupts>
 800420a:	4603      	mov	r3, r0
 800420c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004214:	d102      	bne.n	800421c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 fb61 	bl	80048de <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4618      	mov	r0, r3
 8004222:	f004 ff93 	bl	800914c <USB_ReadInterrupts>
 8004226:	4603      	mov	r3, r0
 8004228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800422c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004230:	d112      	bne.n	8004258 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800423a:	b29a      	uxth	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004244:	b292      	uxth	r2, r2
 8004246:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f006 fe0d 	bl	800ae6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004250:	2100      	movs	r1, #0
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f925 	bl	80044a2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4618      	mov	r0, r3
 800425e:	f004 ff75 	bl	800914c <USB_ReadInterrupts>
 8004262:	4603      	mov	r3, r0
 8004264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004268:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800426c:	d10b      	bne.n	8004286 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004276:	b29a      	uxth	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004280:	b292      	uxth	r2, r2
 8004282:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f004 ff5e 	bl	800914c <USB_ReadInterrupts>
 8004290:	4603      	mov	r3, r0
 8004292:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800429a:	d10b      	bne.n	80042b4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042ae:	b292      	uxth	r2, r2
 80042b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f004 ff47 	bl	800914c <USB_ReadInterrupts>
 80042be:	4603      	mov	r3, r0
 80042c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c8:	d126      	bne.n	8004318 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0204 	bic.w	r2, r2, #4
 80042dc:	b292      	uxth	r2, r2
 80042de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0208 	bic.w	r2, r2, #8
 80042f4:	b292      	uxth	r2, r2
 80042f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f006 fdee 	bl	800aedc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004308:	b29a      	uxth	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004312:	b292      	uxth	r2, r2
 8004314:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f004 ff15 	bl	800914c <USB_ReadInterrupts>
 8004322:	4603      	mov	r3, r0
 8004324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800432c:	f040 8084 	bne.w	8004438 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004330:	2300      	movs	r3, #0
 8004332:	77fb      	strb	r3, [r7, #31]
 8004334:	e011      	b.n	800435a <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	461a      	mov	r2, r3
 800433c:	7ffb      	ldrb	r3, [r7, #31]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	441a      	add	r2, r3
 8004342:	7ffb      	ldrb	r3, [r7, #31]
 8004344:	8812      	ldrh	r2, [r2, #0]
 8004346:	b292      	uxth	r2, r2
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	f107 0120 	add.w	r1, r7, #32
 800434e:	440b      	add	r3, r1
 8004350:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004354:	7ffb      	ldrb	r3, [r7, #31]
 8004356:	3301      	adds	r3, #1
 8004358:	77fb      	strb	r3, [r7, #31]
 800435a:	7ffb      	ldrb	r3, [r7, #31]
 800435c:	2b07      	cmp	r3, #7
 800435e:	d9ea      	bls.n	8004336 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004368:	b29a      	uxth	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f042 0201 	orr.w	r2, r2, #1
 8004372:	b292      	uxth	r2, r2
 8004374:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004380:	b29a      	uxth	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0201 	bic.w	r2, r2, #1
 800438a:	b292      	uxth	r2, r2
 800438c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004390:	bf00      	nop
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800439a:	b29b      	uxth	r3, r3
 800439c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0f6      	beq.n	8004392 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b6:	b292      	uxth	r2, r2
 80043b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80043bc:	2300      	movs	r3, #0
 80043be:	77fb      	strb	r3, [r7, #31]
 80043c0:	e010      	b.n	80043e4 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80043c2:	7ffb      	ldrb	r3, [r7, #31]
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6812      	ldr	r2, [r2, #0]
 80043c8:	4611      	mov	r1, r2
 80043ca:	7ffa      	ldrb	r2, [r7, #31]
 80043cc:	0092      	lsls	r2, r2, #2
 80043ce:	440a      	add	r2, r1
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	f107 0120 	add.w	r1, r7, #32
 80043d6:	440b      	add	r3, r1
 80043d8:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80043dc:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80043de:	7ffb      	ldrb	r3, [r7, #31]
 80043e0:	3301      	adds	r3, #1
 80043e2:	77fb      	strb	r3, [r7, #31]
 80043e4:	7ffb      	ldrb	r3, [r7, #31]
 80043e6:	2b07      	cmp	r3, #7
 80043e8:	d9eb      	bls.n	80043c2 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f042 0208 	orr.w	r2, r2, #8
 80043fc:	b292      	uxth	r2, r2
 80043fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800440a:	b29a      	uxth	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004414:	b292      	uxth	r2, r2
 8004416:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004422:	b29a      	uxth	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f042 0204 	orr.w	r2, r2, #4
 800442c:	b292      	uxth	r2, r2
 800442e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f006 fd38 	bl	800aea8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f004 fe85 	bl	800914c <USB_ReadInterrupts>
 8004442:	4603      	mov	r3, r0
 8004444:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800444c:	d10e      	bne.n	800446c <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004456:	b29a      	uxth	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004460:	b292      	uxth	r2, r2
 8004462:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f006 fcf1 	bl	800ae4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4618      	mov	r0, r3
 8004472:	f004 fe6b 	bl	800914c <USB_ReadInterrupts>
 8004476:	4603      	mov	r3, r0
 8004478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004480:	d10b      	bne.n	800449a <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800448a:	b29a      	uxth	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004494:	b292      	uxth	r2, r2
 8004496:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800449a:	bf00      	nop
 800449c:	3720      	adds	r7, #32
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b082      	sub	sp, #8
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	460b      	mov	r3, r1
 80044ac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_PCD_SetAddress+0x1a>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e013      	b.n	80044e4 <HAL_PCD_SetAddress+0x42>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	78fa      	ldrb	r2, [r7, #3]
 80044c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	78fa      	ldrb	r2, [r7, #3]
 80044d2:	4611      	mov	r1, r2
 80044d4:	4618      	mov	r0, r3
 80044d6:	f004 fe12 	bl	80090fe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	4608      	mov	r0, r1
 80044f6:	4611      	mov	r1, r2
 80044f8:	461a      	mov	r2, r3
 80044fa:	4603      	mov	r3, r0
 80044fc:	70fb      	strb	r3, [r7, #3]
 80044fe:	460b      	mov	r3, r1
 8004500:	803b      	strh	r3, [r7, #0]
 8004502:	4613      	mov	r3, r2
 8004504:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800450a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800450e:	2b00      	cmp	r3, #0
 8004510:	da0e      	bge.n	8004530 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004512:	78fb      	ldrb	r3, [r7, #3]
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	1c5a      	adds	r2, r3, #1
 800451a:	4613      	mov	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	4413      	add	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2201      	movs	r2, #1
 800452c:	705a      	strb	r2, [r3, #1]
 800452e:	e00e      	b.n	800454e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	f003 0207 	and.w	r2, r3, #7
 8004536:	4613      	mov	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	4413      	add	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800454e:	78fb      	ldrb	r3, [r7, #3]
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	b2da      	uxtb	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800455a:	883a      	ldrh	r2, [r7, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	78ba      	ldrb	r2, [r7, #2]
 8004564:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	785b      	ldrb	r3, [r3, #1]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d004      	beq.n	8004578 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004578:	78bb      	ldrb	r3, [r7, #2]
 800457a:	2b02      	cmp	r3, #2
 800457c:	d102      	bne.n	8004584 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800458a:	2b01      	cmp	r3, #1
 800458c:	d101      	bne.n	8004592 <HAL_PCD_EP_Open+0xa6>
 800458e:	2302      	movs	r3, #2
 8004590:	e00e      	b.n	80045b0 <HAL_PCD_EP_Open+0xc4>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68f9      	ldr	r1, [r7, #12]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f002 fe39 	bl	8007218 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80045ae:	7afb      	ldrb	r3, [r7, #11]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	460b      	mov	r3, r1
 80045c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	da0e      	bge.n	80045ea <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045cc:	78fb      	ldrb	r3, [r7, #3]
 80045ce:	f003 0307 	and.w	r3, r3, #7
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	4613      	mov	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	4413      	add	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2201      	movs	r2, #1
 80045e6:	705a      	strb	r2, [r3, #1]
 80045e8:	e00e      	b.n	8004608 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045ea:	78fb      	ldrb	r3, [r7, #3]
 80045ec:	f003 0207 	and.w	r2, r3, #7
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	4413      	add	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004608:	78fb      	ldrb	r3, [r7, #3]
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	b2da      	uxtb	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_PCD_EP_Close+0x6a>
 800461e:	2302      	movs	r3, #2
 8004620:	e00e      	b.n	8004640 <HAL_PCD_EP_Close+0x88>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68f9      	ldr	r1, [r7, #12]
 8004630:	4618      	mov	r0, r3
 8004632:	f003 f95b 	bl	80078ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	607a      	str	r2, [r7, #4]
 8004652:	603b      	str	r3, [r7, #0]
 8004654:	460b      	mov	r3, r1
 8004656:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004658:	7afb      	ldrb	r3, [r7, #11]
 800465a:	f003 0207 	and.w	r2, r3, #7
 800465e:	4613      	mov	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	4413      	add	r3, r2
 800466e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	2200      	movs	r2, #0
 8004680:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2200      	movs	r2, #0
 8004686:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004688:	7afb      	ldrb	r3, [r7, #11]
 800468a:	f003 0307 	and.w	r3, r3, #7
 800468e:	b2da      	uxtb	r2, r3
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004694:	7afb      	ldrb	r3, [r7, #11]
 8004696:	f003 0307 	and.w	r3, r3, #7
 800469a:	2b00      	cmp	r3, #0
 800469c:	d106      	bne.n	80046ac <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6979      	ldr	r1, [r7, #20]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f003 fb0d 	bl	8007cc4 <USB_EPStartXfer>
 80046aa:	e005      	b.n	80046b8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6979      	ldr	r1, [r7, #20]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f003 fb06 	bl	8007cc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
 80046ca:	460b      	mov	r3, r1
 80046cc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80046ce:	78fb      	ldrb	r3, [r7, #3]
 80046d0:	f003 0207 	and.w	r2, r3, #7
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	440b      	add	r3, r1
 80046e0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80046e4:	681b      	ldr	r3, [r3, #0]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr

080046f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	607a      	str	r2, [r7, #4]
 80046fa:	603b      	str	r3, [r7, #0]
 80046fc:	460b      	mov	r3, r1
 80046fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004700:	7afb      	ldrb	r3, [r7, #11]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	4613      	mov	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4413      	add	r3, r2
 8004714:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	2200      	movs	r2, #0
 8004734:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2201      	movs	r2, #1
 800473a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800473c:	7afb      	ldrb	r3, [r7, #11]
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	b2da      	uxtb	r2, r3
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004748:	7afb      	ldrb	r3, [r7, #11]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	2b00      	cmp	r3, #0
 8004750:	d106      	bne.n	8004760 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6979      	ldr	r1, [r7, #20]
 8004758:	4618      	mov	r0, r3
 800475a:	f003 fab3 	bl	8007cc4 <USB_EPStartXfer>
 800475e:	e005      	b.n	800476c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6979      	ldr	r1, [r7, #20]
 8004766:	4618      	mov	r0, r3
 8004768:	f003 faac 	bl	8007cc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b084      	sub	sp, #16
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	460b      	mov	r3, r1
 8004780:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004782:	78fb      	ldrb	r3, [r7, #3]
 8004784:	f003 0207 	and.w	r2, r3, #7
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	429a      	cmp	r2, r3
 800478e:	d901      	bls.n	8004794 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e04c      	b.n	800482e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004794:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004798:	2b00      	cmp	r3, #0
 800479a:	da0e      	bge.n	80047ba <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800479c:	78fb      	ldrb	r3, [r7, #3]
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	1c5a      	adds	r2, r3, #1
 80047a4:	4613      	mov	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	4413      	add	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2201      	movs	r2, #1
 80047b6:	705a      	strb	r2, [r3, #1]
 80047b8:	e00c      	b.n	80047d4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80047ba:	78fa      	ldrb	r2, [r7, #3]
 80047bc:	4613      	mov	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	4413      	add	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2201      	movs	r2, #1
 80047d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047da:	78fb      	ldrb	r3, [r7, #3]
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d101      	bne.n	80047f4 <HAL_PCD_EP_SetStall+0x7e>
 80047f0:	2302      	movs	r3, #2
 80047f2:	e01c      	b.n	800482e <HAL_PCD_EP_SetStall+0xb8>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68f9      	ldr	r1, [r7, #12]
 8004802:	4618      	mov	r0, r3
 8004804:	f004 fb7e 	bl	8008f04 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004808:	78fb      	ldrb	r3, [r7, #3]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	2b00      	cmp	r3, #0
 8004810:	d108      	bne.n	8004824 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800481c:	4619      	mov	r1, r3
 800481e:	4610      	mov	r0, r2
 8004820:	f004 fca3 	bl	800916a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b084      	sub	sp, #16
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	460b      	mov	r3, r1
 8004840:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004842:	78fb      	ldrb	r3, [r7, #3]
 8004844:	f003 020f 	and.w	r2, r3, #15
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	429a      	cmp	r2, r3
 800484e:	d901      	bls.n	8004854 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e040      	b.n	80048d6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004854:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004858:	2b00      	cmp	r3, #0
 800485a:	da0e      	bge.n	800487a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800485c:	78fb      	ldrb	r3, [r7, #3]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	4613      	mov	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	4413      	add	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2201      	movs	r2, #1
 8004876:	705a      	strb	r2, [r3, #1]
 8004878:	e00e      	b.n	8004898 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800487a:	78fb      	ldrb	r3, [r7, #3]
 800487c:	f003 0207 	and.w	r2, r3, #7
 8004880:	4613      	mov	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	4413      	add	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800489e:	78fb      	ldrb	r3, [r7, #3]
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d101      	bne.n	80048b8 <HAL_PCD_EP_ClrStall+0x82>
 80048b4:	2302      	movs	r3, #2
 80048b6:	e00e      	b.n	80048d6 <HAL_PCD_EP_ClrStall+0xa0>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68f9      	ldr	r1, [r7, #12]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f004 fb6c 	bl	8008fa4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b08e      	sub	sp, #56	; 0x38
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80048e6:	e2df      	b.n	8004ea8 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048f0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80048f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80048fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004902:	2b00      	cmp	r3, #0
 8004904:	f040 8158 	bne.w	8004bb8 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004908:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800490a:	f003 0310 	and.w	r3, r3, #16
 800490e:	2b00      	cmp	r3, #0
 8004910:	d152      	bne.n	80049b8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	b29b      	uxth	r3, r3
 800491a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800491e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004922:	81fb      	strh	r3, [r7, #14]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	89fb      	ldrh	r3, [r7, #14]
 800492a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800492e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004932:	b29b      	uxth	r3, r3
 8004934:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	3328      	adds	r3, #40	; 0x28
 800493a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004944:	b29b      	uxth	r3, r3
 8004946:	461a      	mov	r2, r3
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	00db      	lsls	r3, r3, #3
 800494e:	4413      	add	r3, r2
 8004950:	3302      	adds	r3, #2
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6812      	ldr	r2, [r2, #0]
 8004958:	4413      	add	r3, r2
 800495a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	695a      	ldr	r2, [r3, #20]
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	441a      	add	r2, r3
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004976:	2100      	movs	r1, #0
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f006 fa4e 	bl	800ae1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 828e 	beq.w	8004ea8 <PCD_EP_ISR_Handler+0x5ca>
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	2b00      	cmp	r3, #0
 8004992:	f040 8289 	bne.w	8004ea8 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800499c:	b2db      	uxtb	r3, r3
 800499e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	b292      	uxth	r2, r2
 80049aa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80049b6:	e277      	b.n	8004ea8 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80049be:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80049c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80049ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d034      	beq.n	8004a3c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049da:	b29b      	uxth	r3, r3
 80049dc:	461a      	mov	r2, r3
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	4413      	add	r3, r2
 80049e6:	3306      	adds	r3, #6
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6812      	ldr	r2, [r2, #0]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6818      	ldr	r0, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	f004 fbfa 	bl	800920a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004a22:	4013      	ands	r3, r2
 8004a24:	823b      	strh	r3, [r7, #16]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	8a3a      	ldrh	r2, [r7, #16]
 8004a2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a30:	b292      	uxth	r2, r2
 8004a32:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f006 f9c3 	bl	800adc0 <HAL_PCD_SetupStageCallback>
 8004a3a:	e235      	b.n	8004ea8 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004a3c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f280 8231 	bge.w	8004ea8 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	881b      	ldrh	r3, [r3, #0]
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004a52:	4013      	ands	r3, r2
 8004a54:	83bb      	strh	r3, [r7, #28]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	8bba      	ldrh	r2, [r7, #28]
 8004a5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a60:	b292      	uxth	r2, r2
 8004a62:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	461a      	mov	r2, r3
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	4413      	add	r3, r2
 8004a78:	3306      	adds	r3, #6
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6812      	ldr	r2, [r2, #0]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d019      	beq.n	8004acc <PCD_EP_ISR_Handler+0x1ee>
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d015      	beq.n	8004acc <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6818      	ldr	r0, [r3, #0]
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	6959      	ldr	r1, [r3, #20]
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	f004 fbaa 	bl	800920a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	695a      	ldr	r2, [r3, #20]
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	441a      	add	r2, r3
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f006 f98c 	bl	800ade4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	61bb      	str	r3, [r7, #24]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	461a      	mov	r2, r3
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	61bb      	str	r3, [r7, #24]
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004aea:	617b      	str	r3, [r7, #20]
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d112      	bne.n	8004b1a <PCD_EP_ISR_Handler+0x23c>
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	881b      	ldrh	r3, [r3, #0]
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	801a      	strh	r2, [r3, #0]
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	801a      	strh	r2, [r3, #0]
 8004b18:	e02f      	b.n	8004b7a <PCD_EP_ISR_Handler+0x29c>
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	2b3e      	cmp	r3, #62	; 0x3e
 8004b20:	d813      	bhi.n	8004b4a <PCD_EP_ISR_Handler+0x26c>
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	085b      	lsrs	r3, r3, #1
 8004b28:	633b      	str	r3, [r7, #48]	; 0x30
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d002      	beq.n	8004b3c <PCD_EP_ISR_Handler+0x25e>
 8004b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b38:	3301      	adds	r3, #1
 8004b3a:	633b      	str	r3, [r7, #48]	; 0x30
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	029b      	lsls	r3, r3, #10
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	801a      	strh	r2, [r3, #0]
 8004b48:	e017      	b.n	8004b7a <PCD_EP_ISR_Handler+0x29c>
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	095b      	lsrs	r3, r3, #5
 8004b50:	633b      	str	r3, [r7, #48]	; 0x30
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	f003 031f 	and.w	r3, r3, #31
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d102      	bne.n	8004b64 <PCD_EP_ISR_Handler+0x286>
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b60:	3b01      	subs	r3, #1
 8004b62:	633b      	str	r3, [r7, #48]	; 0x30
 8004b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	029b      	lsls	r3, r3, #10
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	881b      	ldrh	r3, [r3, #0]
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8a:	827b      	strh	r3, [r7, #18]
 8004b8c:	8a7b      	ldrh	r3, [r7, #18]
 8004b8e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b92:	827b      	strh	r3, [r7, #18]
 8004b94:	8a7b      	ldrh	r3, [r7, #18]
 8004b96:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b9a:	827b      	strh	r3, [r7, #18]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	8a7b      	ldrh	r3, [r7, #18]
 8004ba2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ba6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	8013      	strh	r3, [r2, #0]
 8004bb6:	e177      	b.n	8004ea8 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004bca:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f280 80ea 	bge.w	8004da8 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	461a      	mov	r2, r3
 8004bda:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004bea:	4013      	ands	r3, r2
 8004bec:	853b      	strh	r3, [r7, #40]	; 0x28
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004bfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c02:	b292      	uxth	r2, r2
 8004c04:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004c06:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	4413      	add	r3, r2
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	7b1b      	ldrb	r3, [r3, #12]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d122      	bne.n	8004c6a <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	461a      	mov	r2, r3
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	4413      	add	r3, r2
 8004c38:	3306      	adds	r3, #6
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6812      	ldr	r2, [r2, #0]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c4c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004c4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 8087 	beq.w	8004d64 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6818      	ldr	r0, [r3, #0]
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	6959      	ldr	r1, [r3, #20]
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	88da      	ldrh	r2, [r3, #6]
 8004c62:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c64:	f004 fad1 	bl	800920a <USB_ReadPMA>
 8004c68:	e07c      	b.n	8004d64 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	78db      	ldrb	r3, [r3, #3]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d108      	bne.n	8004c84 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004c72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004c74:	461a      	mov	r2, r3
 8004c76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f923 	bl	8004ec4 <HAL_PCD_EP_DB_Receive>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004c82:	e06f      	b.n	8004d64 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	441a      	add	r2, r3
 8004cae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004cb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d021      	beq.n	8004d22 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	461a      	mov	r2, r3
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	4413      	add	r3, r2
 8004cf2:	3302      	adds	r3, #2
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6812      	ldr	r2, [r2, #0]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d06:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004d08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d02a      	beq.n	8004d64 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6818      	ldr	r0, [r3, #0]
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	6959      	ldr	r1, [r3, #20]
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	891a      	ldrh	r2, [r3, #8]
 8004d1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d1c:	f004 fa75 	bl	800920a <USB_ReadPMA>
 8004d20:	e020      	b.n	8004d64 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	4413      	add	r3, r2
 8004d36:	3306      	adds	r3, #6
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6812      	ldr	r2, [r2, #0]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d4a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004d4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d008      	beq.n	8004d64 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6818      	ldr	r0, [r3, #0]
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	6959      	ldr	r1, [r3, #20]
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	895a      	ldrh	r2, [r3, #10]
 8004d5e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d60:	f004 fa53 	bl	800920a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	69da      	ldr	r2, [r3, #28]
 8004d68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d6a:	441a      	add	r2, r3
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	695a      	ldr	r2, [r3, #20]
 8004d74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d76:	441a      	add	r2, r3
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d004      	beq.n	8004d8e <PCD_EP_ISR_Handler+0x4b0>
 8004d84:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d206      	bcs.n	8004d9c <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	4619      	mov	r1, r3
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f006 f825 	bl	800ade4 <HAL_PCD_DataOutStageCallback>
 8004d9a:	e005      	b.n	8004da8 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004da2:	4618      	mov	r0, r3
 8004da4:	f002 ff8e 	bl	8007cc4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004da8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d07a      	beq.n	8004ea8 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8004db2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	4613      	mov	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de0:	843b      	strh	r3, [r7, #32]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	461a      	mov	r2, r3
 8004de8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	441a      	add	r2, r3
 8004df0:	8c3b      	ldrh	r3, [r7, #32]
 8004df2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004df6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	78db      	ldrb	r3, [r3, #3]
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d108      	bne.n	8004e18 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d146      	bne.n	8004e9c <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004e0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d141      	bne.n	8004e9c <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	461a      	mov	r2, r3
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	00db      	lsls	r3, r3, #3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	3302      	adds	r3, #2
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6812      	ldr	r2, [r2, #0]
 8004e34:	4413      	add	r3, r2
 8004e36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e40:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	699a      	ldr	r2, [r3, #24]
 8004e46:	8bfb      	ldrh	r3, [r7, #30]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d906      	bls.n	8004e5a <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	699a      	ldr	r2, [r3, #24]
 8004e50:	8bfb      	ldrh	r3, [r7, #30]
 8004e52:	1ad2      	subs	r2, r2, r3
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	619a      	str	r2, [r3, #24]
 8004e58:	e002      	b.n	8004e60 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d106      	bne.n	8004e76 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f005 ffd3 	bl	800ae1a <HAL_PCD_DataInStageCallback>
 8004e74:	e018      	b.n	8004ea8 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	695a      	ldr	r2, [r3, #20]
 8004e7a:	8bfb      	ldrh	r3, [r7, #30]
 8004e7c:	441a      	add	r2, r3
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	69da      	ldr	r2, [r3, #28]
 8004e86:	8bfb      	ldrh	r3, [r7, #30]
 8004e88:	441a      	add	r2, r3
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e94:	4618      	mov	r0, r3
 8004e96:	f002 ff15 	bl	8007cc4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004e9a:	e005      	b.n	8004ea8 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004e9c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f91b 	bl	80050de <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	b21b      	sxth	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f6ff ad17 	blt.w	80048e8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3738      	adds	r7, #56	; 0x38
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ed2:	88fb      	ldrh	r3, [r7, #6]
 8004ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d07e      	beq.n	8004fda <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	4413      	add	r3, r2
 8004ef0:	3302      	adds	r3, #2
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	6812      	ldr	r2, [r2, #0]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f04:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	699a      	ldr	r2, [r3, #24]
 8004f0a:	8b7b      	ldrh	r3, [r7, #26]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d306      	bcc.n	8004f1e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	699a      	ldr	r2, [r3, #24]
 8004f14:	8b7b      	ldrh	r3, [r7, #26]
 8004f16:	1ad2      	subs	r2, r2, r3
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	619a      	str	r2, [r3, #24]
 8004f1c:	e002      	b.n	8004f24 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2200      	movs	r2, #0
 8004f22:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d123      	bne.n	8004f74 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	461a      	mov	r2, r3
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f46:	833b      	strh	r3, [r7, #24]
 8004f48:	8b3b      	ldrh	r3, [r7, #24]
 8004f4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f4e:	833b      	strh	r3, [r7, #24]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	461a      	mov	r2, r3
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	441a      	add	r2, r3
 8004f5e:	8b3b      	ldrh	r3, [r7, #24]
 8004f60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f74:	88fb      	ldrh	r3, [r7, #6]
 8004f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d01f      	beq.n	8004fbe <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	461a      	mov	r2, r3
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f98:	82fb      	strh	r3, [r7, #22]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	441a      	add	r2, r3
 8004fa8:	8afb      	ldrh	r3, [r7, #22]
 8004faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004fbe:	8b7b      	ldrh	r3, [r7, #26]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 8087 	beq.w	80050d4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6818      	ldr	r0, [r3, #0]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	6959      	ldr	r1, [r3, #20]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	891a      	ldrh	r2, [r3, #8]
 8004fd2:	8b7b      	ldrh	r3, [r7, #26]
 8004fd4:	f004 f919 	bl	800920a <USB_ReadPMA>
 8004fd8:	e07c      	b.n	80050d4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	4413      	add	r3, r2
 8004fee:	3306      	adds	r3, #6
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	6812      	ldr	r2, [r2, #0]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005002:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	699a      	ldr	r2, [r3, #24]
 8005008:	8b7b      	ldrh	r3, [r7, #26]
 800500a:	429a      	cmp	r2, r3
 800500c:	d306      	bcc.n	800501c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	699a      	ldr	r2, [r3, #24]
 8005012:	8b7b      	ldrh	r3, [r7, #26]
 8005014:	1ad2      	subs	r2, r2, r3
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	619a      	str	r2, [r3, #24]
 800501a:	e002      	b.n	8005022 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2200      	movs	r2, #0
 8005020:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d123      	bne.n	8005072 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	b29b      	uxth	r3, r3
 800503c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005044:	83fb      	strh	r3, [r7, #30]
 8005046:	8bfb      	ldrh	r3, [r7, #30]
 8005048:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800504c:	83fb      	strh	r3, [r7, #30]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	461a      	mov	r2, r3
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	441a      	add	r2, r3
 800505c:	8bfb      	ldrh	r3, [r7, #30]
 800505e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005062:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800506a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800506e:	b29b      	uxth	r3, r3
 8005070:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005072:	88fb      	ldrh	r3, [r7, #6]
 8005074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005078:	2b00      	cmp	r3, #0
 800507a:	d11f      	bne.n	80050bc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	461a      	mov	r2, r3
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	b29b      	uxth	r3, r3
 800508e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005096:	83bb      	strh	r3, [r7, #28]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	441a      	add	r2, r3
 80050a6:	8bbb      	ldrh	r3, [r7, #28]
 80050a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80050bc:	8b7b      	ldrh	r3, [r7, #26]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d008      	beq.n	80050d4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6818      	ldr	r0, [r3, #0]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	6959      	ldr	r1, [r3, #20]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	895a      	ldrh	r2, [r3, #10]
 80050ce:	8b7b      	ldrh	r3, [r7, #26]
 80050d0:	f004 f89b 	bl	800920a <USB_ReadPMA>
    }
  }

  return count;
 80050d4:	8b7b      	ldrh	r3, [r7, #26]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3720      	adds	r7, #32
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b094      	sub	sp, #80	; 0x50
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	4613      	mov	r3, r2
 80050ea:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80050ec:	88fb      	ldrh	r3, [r7, #6]
 80050ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 8138 	beq.w	8005368 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005100:	b29b      	uxth	r3, r3
 8005102:	461a      	mov	r2, r3
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	4413      	add	r3, r2
 800510c:	3302      	adds	r3, #2
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	6812      	ldr	r2, [r2, #0]
 8005114:	4413      	add	r3, r2
 8005116:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005120:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	699a      	ldr	r2, [r3, #24]
 8005128:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800512c:	429a      	cmp	r2, r3
 800512e:	d907      	bls.n	8005140 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	699a      	ldr	r2, [r3, #24]
 8005134:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005138:	1ad2      	subs	r2, r2, r3
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	619a      	str	r2, [r3, #24]
 800513e:	e002      	b.n	8005146 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2200      	movs	r2, #0
 8005144:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d12c      	bne.n	80051a8 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	4619      	mov	r1, r3
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f005 fe60 	bl	800ae1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800515a:	88fb      	ldrh	r3, [r7, #6]
 800515c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 823a 	beq.w	80055da <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	b29b      	uxth	r3, r3
 8005178:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800517c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005180:	82fb      	strh	r3, [r7, #22]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	461a      	mov	r2, r3
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	441a      	add	r2, r3
 8005190:	8afb      	ldrh	r3, [r7, #22]
 8005192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800519a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800519e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	8013      	strh	r3, [r2, #0]
 80051a6:	e218      	b.n	80055da <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80051a8:	88fb      	ldrh	r3, [r7, #6]
 80051aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d01f      	beq.n	80051f2 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	461a      	mov	r2, r3
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051cc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	461a      	mov	r2, r3
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	441a      	add	r2, r3
 80051dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80051de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	f040 81ee 	bne.w	80055da <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	695a      	ldr	r2, [r3, #20]
 8005202:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005206:	441a      	add	r2, r3
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	69da      	ldr	r2, [r3, #28]
 8005210:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005214:	441a      	add	r2, r3
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	6a1a      	ldr	r2, [r3, #32]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	429a      	cmp	r2, r3
 8005224:	d309      	bcc.n	800523a <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	6a1a      	ldr	r2, [r3, #32]
 8005230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005232:	1ad2      	subs	r2, r2, r3
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	621a      	str	r2, [r3, #32]
 8005238:	e015      	b.n	8005266 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d107      	bne.n	8005252 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8005242:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005246:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005250:	e009      	b.n	8005266 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2200      	movs	r2, #0
 8005264:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	785b      	ldrb	r3, [r3, #1]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d155      	bne.n	800531a <HAL_PCD_EP_DB_Transmit+0x23c>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	61fb      	str	r3, [r7, #28]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800527c:	b29b      	uxth	r3, r3
 800527e:	461a      	mov	r2, r3
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	4413      	add	r3, r2
 8005284:	61fb      	str	r3, [r7, #28]
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	011a      	lsls	r2, r3, #4
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	4413      	add	r3, r2
 8005290:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005294:	61bb      	str	r3, [r7, #24]
 8005296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005298:	2b00      	cmp	r3, #0
 800529a:	d112      	bne.n	80052c2 <HAL_PCD_EP_DB_Transmit+0x1e4>
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	881b      	ldrh	r3, [r3, #0]
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	801a      	strh	r2, [r3, #0]
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	801a      	strh	r2, [r3, #0]
 80052c0:	e047      	b.n	8005352 <HAL_PCD_EP_DB_Transmit+0x274>
 80052c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c4:	2b3e      	cmp	r3, #62	; 0x3e
 80052c6:	d811      	bhi.n	80052ec <HAL_PCD_EP_DB_Transmit+0x20e>
 80052c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ca:	085b      	lsrs	r3, r3, #1
 80052cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <HAL_PCD_EP_DB_Transmit+0x200>
 80052d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052da:	3301      	adds	r3, #1
 80052dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	029b      	lsls	r3, r3, #10
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	801a      	strh	r2, [r3, #0]
 80052ea:	e032      	b.n	8005352 <HAL_PCD_EP_DB_Transmit+0x274>
 80052ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ee:	095b      	lsrs	r3, r3, #5
 80052f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052f4:	f003 031f 	and.w	r3, r3, #31
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d102      	bne.n	8005302 <HAL_PCD_EP_DB_Transmit+0x224>
 80052fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fe:	3b01      	subs	r3, #1
 8005300:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005304:	b29b      	uxth	r3, r3
 8005306:	029b      	lsls	r3, r3, #10
 8005308:	b29b      	uxth	r3, r3
 800530a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800530e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005312:	b29a      	uxth	r2, r3
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	801a      	strh	r2, [r3, #0]
 8005318:	e01b      	b.n	8005352 <HAL_PCD_EP_DB_Transmit+0x274>
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	785b      	ldrb	r3, [r3, #1]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d117      	bne.n	8005352 <HAL_PCD_EP_DB_Transmit+0x274>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	627b      	str	r3, [r7, #36]	; 0x24
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005330:	b29b      	uxth	r3, r3
 8005332:	461a      	mov	r2, r3
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	4413      	add	r3, r2
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	011a      	lsls	r2, r3, #4
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	4413      	add	r3, r2
 8005344:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005348:	623b      	str	r3, [r7, #32]
 800534a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800534c:	b29a      	uxth	r2, r3
 800534e:	6a3b      	ldr	r3, [r7, #32]
 8005350:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6818      	ldr	r0, [r3, #0]
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	6959      	ldr	r1, [r3, #20]
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	891a      	ldrh	r2, [r3, #8]
 800535e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005360:	b29b      	uxth	r3, r3
 8005362:	f003 ff0d 	bl	8009180 <USB_WritePMA>
 8005366:	e138      	b.n	80055da <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005370:	b29b      	uxth	r3, r3
 8005372:	461a      	mov	r2, r3
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	00db      	lsls	r3, r3, #3
 800537a:	4413      	add	r3, r2
 800537c:	3306      	adds	r3, #6
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	6812      	ldr	r2, [r2, #0]
 8005384:	4413      	add	r3, r2
 8005386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005390:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	699a      	ldr	r2, [r3, #24]
 8005398:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800539c:	429a      	cmp	r2, r3
 800539e:	d307      	bcc.n	80053b0 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	699a      	ldr	r2, [r3, #24]
 80053a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80053a8:	1ad2      	subs	r2, r2, r3
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	619a      	str	r2, [r3, #24]
 80053ae:	e002      	b.n	80053b6 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2200      	movs	r2, #0
 80053b4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d12e      	bne.n	800541c <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	4619      	mov	r1, r3
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f005 fd28 	bl	800ae1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80053ca:	88fb      	ldrh	r3, [r7, #6]
 80053cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f040 8102 	bne.w	80055da <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	461a      	mov	r2, r3
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	461a      	mov	r2, r3
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	441a      	add	r2, r3
 8005402:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800540a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800540e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005416:	b29b      	uxth	r3, r3
 8005418:	8013      	strh	r3, [r2, #0]
 800541a:	e0de      	b.n	80055da <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800541c:	88fb      	ldrh	r3, [r7, #6]
 800541e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d11f      	bne.n	8005466 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	461a      	mov	r2, r3
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4413      	add	r3, r2
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	b29b      	uxth	r3, r3
 8005438:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800543c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005440:	867b      	strh	r3, [r7, #50]	; 0x32
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	461a      	mov	r2, r3
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	441a      	add	r2, r3
 8005450:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800545a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800545e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005462:	b29b      	uxth	r3, r3
 8005464:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800546c:	2b01      	cmp	r3, #1
 800546e:	f040 80b4 	bne.w	80055da <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	695a      	ldr	r2, [r3, #20]
 8005476:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800547a:	441a      	add	r2, r3
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	69da      	ldr	r2, [r3, #28]
 8005484:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005488:	441a      	add	r2, r3
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	6a1a      	ldr	r2, [r3, #32]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	429a      	cmp	r2, r3
 8005498:	d309      	bcc.n	80054ae <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	6a1a      	ldr	r2, [r3, #32]
 80054a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054a6:	1ad2      	subs	r2, r2, r3
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	621a      	str	r2, [r3, #32]
 80054ac:	e015      	b.n	80054da <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d107      	bne.n	80054c6 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 80054b6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80054ba:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80054c4:	e009      	b.n	80054da <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	2200      	movs	r2, #0
 80054d0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	643b      	str	r3, [r7, #64]	; 0x40
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	785b      	ldrb	r3, [r3, #1]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d155      	bne.n	8005594 <HAL_PCD_EP_DB_Transmit+0x4b6>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	461a      	mov	r2, r3
 80054fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fc:	4413      	add	r3, r2
 80054fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	011a      	lsls	r2, r3, #4
 8005506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005508:	4413      	add	r3, r2
 800550a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800550e:	637b      	str	r3, [r7, #52]	; 0x34
 8005510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005512:	2b00      	cmp	r3, #0
 8005514:	d112      	bne.n	800553c <HAL_PCD_EP_DB_Transmit+0x45e>
 8005516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	b29b      	uxth	r3, r3
 800551c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005520:	b29a      	uxth	r2, r3
 8005522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005524:	801a      	strh	r2, [r3, #0]
 8005526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005528:	881b      	ldrh	r3, [r3, #0]
 800552a:	b29b      	uxth	r3, r3
 800552c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005534:	b29a      	uxth	r2, r3
 8005536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005538:	801a      	strh	r2, [r3, #0]
 800553a:	e044      	b.n	80055c6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800553c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800553e:	2b3e      	cmp	r3, #62	; 0x3e
 8005540:	d811      	bhi.n	8005566 <HAL_PCD_EP_DB_Transmit+0x488>
 8005542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005544:	085b      	lsrs	r3, r3, #1
 8005546:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <HAL_PCD_EP_DB_Transmit+0x47a>
 8005552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005554:	3301      	adds	r3, #1
 8005556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800555a:	b29b      	uxth	r3, r3
 800555c:	029b      	lsls	r3, r3, #10
 800555e:	b29a      	uxth	r2, r3
 8005560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005562:	801a      	strh	r2, [r3, #0]
 8005564:	e02f      	b.n	80055c6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8005566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005568:	095b      	lsrs	r3, r3, #5
 800556a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800556c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800556e:	f003 031f 	and.w	r3, r3, #31
 8005572:	2b00      	cmp	r3, #0
 8005574:	d102      	bne.n	800557c <HAL_PCD_EP_DB_Transmit+0x49e>
 8005576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005578:	3b01      	subs	r3, #1
 800557a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800557c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800557e:	b29b      	uxth	r3, r3
 8005580:	029b      	lsls	r3, r3, #10
 8005582:	b29b      	uxth	r3, r3
 8005584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800558c:	b29a      	uxth	r2, r3
 800558e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005590:	801a      	strh	r2, [r3, #0]
 8005592:	e018      	b.n	80055c6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	785b      	ldrb	r3, [r3, #1]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d114      	bne.n	80055c6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	461a      	mov	r2, r3
 80055a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055aa:	4413      	add	r3, r2
 80055ac:	643b      	str	r3, [r7, #64]	; 0x40
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	011a      	lsls	r2, r3, #4
 80055b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055b6:	4413      	add	r3, r2
 80055b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6818      	ldr	r0, [r3, #0]
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	6959      	ldr	r1, [r3, #20]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	895a      	ldrh	r2, [r3, #10]
 80055d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	f003 fdd3 	bl	8009180 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	881b      	ldrh	r3, [r3, #0]
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055f4:	82bb      	strh	r3, [r7, #20]
 80055f6:	8abb      	ldrh	r3, [r7, #20]
 80055f8:	f083 0310 	eor.w	r3, r3, #16
 80055fc:	82bb      	strh	r3, [r7, #20]
 80055fe:	8abb      	ldrh	r3, [r7, #20]
 8005600:	f083 0320 	eor.w	r3, r3, #32
 8005604:	82bb      	strh	r3, [r7, #20]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	461a      	mov	r2, r3
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	441a      	add	r2, r3
 8005614:	8abb      	ldrh	r3, [r7, #20]
 8005616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800561a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800561e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005626:	b29b      	uxth	r3, r3
 8005628:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3750      	adds	r7, #80	; 0x50
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005634:	b480      	push	{r7}
 8005636:	b087      	sub	sp, #28
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	607b      	str	r3, [r7, #4]
 800563e:	460b      	mov	r3, r1
 8005640:	817b      	strh	r3, [r7, #10]
 8005642:	4613      	mov	r3, r2
 8005644:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005646:	897b      	ldrh	r3, [r7, #10]
 8005648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564c:	b29b      	uxth	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00b      	beq.n	800566a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005652:	897b      	ldrh	r3, [r7, #10]
 8005654:	f003 0307 	and.w	r3, r3, #7
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	4613      	mov	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	4413      	add	r3, r2
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	e009      	b.n	800567e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800566a:	897a      	ldrh	r2, [r7, #10]
 800566c:	4613      	mov	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	00db      	lsls	r3, r3, #3
 8005674:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	4413      	add	r3, r2
 800567c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800567e:	893b      	ldrh	r3, [r7, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d107      	bne.n	8005694 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	2200      	movs	r2, #0
 8005688:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	b29a      	uxth	r2, r3
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	80da      	strh	r2, [r3, #6]
 8005692:	e00b      	b.n	80056ac <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	2201      	movs	r2, #1
 8005698:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	b29a      	uxth	r2, r3
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	0c1b      	lsrs	r3, r3, #16
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	371c      	adds	r7, #28
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bc80      	pop	{r7}
 80056b6:	4770      	bx	lr

080056b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e26c      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 8087 	beq.w	80057e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80056d8:	4b92      	ldr	r3, [pc, #584]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f003 030c 	and.w	r3, r3, #12
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d00c      	beq.n	80056fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80056e4:	4b8f      	ldr	r3, [pc, #572]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f003 030c 	and.w	r3, r3, #12
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d112      	bne.n	8005716 <HAL_RCC_OscConfig+0x5e>
 80056f0:	4b8c      	ldr	r3, [pc, #560]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056fc:	d10b      	bne.n	8005716 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056fe:	4b89      	ldr	r3, [pc, #548]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d06c      	beq.n	80057e4 <HAL_RCC_OscConfig+0x12c>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d168      	bne.n	80057e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e246      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800571e:	d106      	bne.n	800572e <HAL_RCC_OscConfig+0x76>
 8005720:	4b80      	ldr	r3, [pc, #512]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a7f      	ldr	r2, [pc, #508]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800572a:	6013      	str	r3, [r2, #0]
 800572c:	e02e      	b.n	800578c <HAL_RCC_OscConfig+0xd4>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10c      	bne.n	8005750 <HAL_RCC_OscConfig+0x98>
 8005736:	4b7b      	ldr	r3, [pc, #492]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a7a      	ldr	r2, [pc, #488]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 800573c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005740:	6013      	str	r3, [r2, #0]
 8005742:	4b78      	ldr	r3, [pc, #480]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a77      	ldr	r2, [pc, #476]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005748:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800574c:	6013      	str	r3, [r2, #0]
 800574e:	e01d      	b.n	800578c <HAL_RCC_OscConfig+0xd4>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005758:	d10c      	bne.n	8005774 <HAL_RCC_OscConfig+0xbc>
 800575a:	4b72      	ldr	r3, [pc, #456]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a71      	ldr	r2, [pc, #452]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	4b6f      	ldr	r3, [pc, #444]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a6e      	ldr	r2, [pc, #440]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 800576c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	e00b      	b.n	800578c <HAL_RCC_OscConfig+0xd4>
 8005774:	4b6b      	ldr	r3, [pc, #428]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a6a      	ldr	r2, [pc, #424]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 800577a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800577e:	6013      	str	r3, [r2, #0]
 8005780:	4b68      	ldr	r3, [pc, #416]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a67      	ldr	r2, [pc, #412]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800578a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d013      	beq.n	80057bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005794:	f7fd fa32 	bl	8002bfc <HAL_GetTick>
 8005798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800579a:	e008      	b.n	80057ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800579c:	f7fd fa2e 	bl	8002bfc <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b64      	cmp	r3, #100	; 0x64
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e1fa      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ae:	4b5d      	ldr	r3, [pc, #372]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d0f0      	beq.n	800579c <HAL_RCC_OscConfig+0xe4>
 80057ba:	e014      	b.n	80057e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057bc:	f7fd fa1e 	bl	8002bfc <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057c2:	e008      	b.n	80057d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057c4:	f7fd fa1a 	bl	8002bfc <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b64      	cmp	r3, #100	; 0x64
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e1e6      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057d6:	4b53      	ldr	r3, [pc, #332]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1f0      	bne.n	80057c4 <HAL_RCC_OscConfig+0x10c>
 80057e2:	e000      	b.n	80057e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d063      	beq.n	80058ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057f2:	4b4c      	ldr	r3, [pc, #304]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f003 030c 	and.w	r3, r3, #12
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00b      	beq.n	8005816 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80057fe:	4b49      	ldr	r3, [pc, #292]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f003 030c 	and.w	r3, r3, #12
 8005806:	2b08      	cmp	r3, #8
 8005808:	d11c      	bne.n	8005844 <HAL_RCC_OscConfig+0x18c>
 800580a:	4b46      	ldr	r3, [pc, #280]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d116      	bne.n	8005844 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005816:	4b43      	ldr	r3, [pc, #268]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d005      	beq.n	800582e <HAL_RCC_OscConfig+0x176>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d001      	beq.n	800582e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e1ba      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800582e:	4b3d      	ldr	r3, [pc, #244]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	4939      	ldr	r1, [pc, #228]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 800583e:	4313      	orrs	r3, r2
 8005840:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005842:	e03a      	b.n	80058ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d020      	beq.n	800588e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800584c:	4b36      	ldr	r3, [pc, #216]	; (8005928 <HAL_RCC_OscConfig+0x270>)
 800584e:	2201      	movs	r2, #1
 8005850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005852:	f7fd f9d3 	bl	8002bfc <HAL_GetTick>
 8005856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005858:	e008      	b.n	800586c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800585a:	f7fd f9cf 	bl	8002bfc <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d901      	bls.n	800586c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e19b      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800586c:	4b2d      	ldr	r3, [pc, #180]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0f0      	beq.n	800585a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005878:	4b2a      	ldr	r3, [pc, #168]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	4927      	ldr	r1, [pc, #156]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005888:	4313      	orrs	r3, r2
 800588a:	600b      	str	r3, [r1, #0]
 800588c:	e015      	b.n	80058ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800588e:	4b26      	ldr	r3, [pc, #152]	; (8005928 <HAL_RCC_OscConfig+0x270>)
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005894:	f7fd f9b2 	bl	8002bfc <HAL_GetTick>
 8005898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800589a:	e008      	b.n	80058ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800589c:	f7fd f9ae 	bl	8002bfc <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d901      	bls.n	80058ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e17a      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058ae:	4b1d      	ldr	r3, [pc, #116]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1f0      	bne.n	800589c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0308 	and.w	r3, r3, #8
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d03a      	beq.n	800593c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d019      	beq.n	8005902 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058ce:	4b17      	ldr	r3, [pc, #92]	; (800592c <HAL_RCC_OscConfig+0x274>)
 80058d0:	2201      	movs	r2, #1
 80058d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058d4:	f7fd f992 	bl	8002bfc <HAL_GetTick>
 80058d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058da:	e008      	b.n	80058ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058dc:	f7fd f98e 	bl	8002bfc <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e15a      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ee:	4b0d      	ldr	r3, [pc, #52]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0f0      	beq.n	80058dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80058fa:	2001      	movs	r0, #1
 80058fc:	f000 fac4 	bl	8005e88 <RCC_Delay>
 8005900:	e01c      	b.n	800593c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005902:	4b0a      	ldr	r3, [pc, #40]	; (800592c <HAL_RCC_OscConfig+0x274>)
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005908:	f7fd f978 	bl	8002bfc <HAL_GetTick>
 800590c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800590e:	e00f      	b.n	8005930 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005910:	f7fd f974 	bl	8002bfc <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d908      	bls.n	8005930 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e140      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
 8005922:	bf00      	nop
 8005924:	40021000 	.word	0x40021000
 8005928:	42420000 	.word	0x42420000
 800592c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005930:	4b9e      	ldr	r3, [pc, #632]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1e9      	bne.n	8005910 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 80a6 	beq.w	8005a96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800594a:	2300      	movs	r3, #0
 800594c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800594e:	4b97      	ldr	r3, [pc, #604]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10d      	bne.n	8005976 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800595a:	4b94      	ldr	r3, [pc, #592]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	4a93      	ldr	r2, [pc, #588]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005964:	61d3      	str	r3, [r2, #28]
 8005966:	4b91      	ldr	r3, [pc, #580]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800596e:	60bb      	str	r3, [r7, #8]
 8005970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005972:	2301      	movs	r3, #1
 8005974:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005976:	4b8e      	ldr	r3, [pc, #568]	; (8005bb0 <HAL_RCC_OscConfig+0x4f8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597e:	2b00      	cmp	r3, #0
 8005980:	d118      	bne.n	80059b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005982:	4b8b      	ldr	r3, [pc, #556]	; (8005bb0 <HAL_RCC_OscConfig+0x4f8>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a8a      	ldr	r2, [pc, #552]	; (8005bb0 <HAL_RCC_OscConfig+0x4f8>)
 8005988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800598c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800598e:	f7fd f935 	bl	8002bfc <HAL_GetTick>
 8005992:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005994:	e008      	b.n	80059a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005996:	f7fd f931 	bl	8002bfc <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	2b64      	cmp	r3, #100	; 0x64
 80059a2:	d901      	bls.n	80059a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e0fd      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059a8:	4b81      	ldr	r3, [pc, #516]	; (8005bb0 <HAL_RCC_OscConfig+0x4f8>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d0f0      	beq.n	8005996 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d106      	bne.n	80059ca <HAL_RCC_OscConfig+0x312>
 80059bc:	4b7b      	ldr	r3, [pc, #492]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	4a7a      	ldr	r2, [pc, #488]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 80059c2:	f043 0301 	orr.w	r3, r3, #1
 80059c6:	6213      	str	r3, [r2, #32]
 80059c8:	e02d      	b.n	8005a26 <HAL_RCC_OscConfig+0x36e>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10c      	bne.n	80059ec <HAL_RCC_OscConfig+0x334>
 80059d2:	4b76      	ldr	r3, [pc, #472]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	4a75      	ldr	r2, [pc, #468]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 80059d8:	f023 0301 	bic.w	r3, r3, #1
 80059dc:	6213      	str	r3, [r2, #32]
 80059de:	4b73      	ldr	r3, [pc, #460]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	4a72      	ldr	r2, [pc, #456]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 80059e4:	f023 0304 	bic.w	r3, r3, #4
 80059e8:	6213      	str	r3, [r2, #32]
 80059ea:	e01c      	b.n	8005a26 <HAL_RCC_OscConfig+0x36e>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	2b05      	cmp	r3, #5
 80059f2:	d10c      	bne.n	8005a0e <HAL_RCC_OscConfig+0x356>
 80059f4:	4b6d      	ldr	r3, [pc, #436]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	4a6c      	ldr	r2, [pc, #432]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 80059fa:	f043 0304 	orr.w	r3, r3, #4
 80059fe:	6213      	str	r3, [r2, #32]
 8005a00:	4b6a      	ldr	r3, [pc, #424]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	4a69      	ldr	r2, [pc, #420]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005a06:	f043 0301 	orr.w	r3, r3, #1
 8005a0a:	6213      	str	r3, [r2, #32]
 8005a0c:	e00b      	b.n	8005a26 <HAL_RCC_OscConfig+0x36e>
 8005a0e:	4b67      	ldr	r3, [pc, #412]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	4a66      	ldr	r2, [pc, #408]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005a14:	f023 0301 	bic.w	r3, r3, #1
 8005a18:	6213      	str	r3, [r2, #32]
 8005a1a:	4b64      	ldr	r3, [pc, #400]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	4a63      	ldr	r2, [pc, #396]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005a20:	f023 0304 	bic.w	r3, r3, #4
 8005a24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d015      	beq.n	8005a5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a2e:	f7fd f8e5 	bl	8002bfc <HAL_GetTick>
 8005a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a34:	e00a      	b.n	8005a4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a36:	f7fd f8e1 	bl	8002bfc <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e0ab      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a4c:	4b57      	ldr	r3, [pc, #348]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0ee      	beq.n	8005a36 <HAL_RCC_OscConfig+0x37e>
 8005a58:	e014      	b.n	8005a84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a5a:	f7fd f8cf 	bl	8002bfc <HAL_GetTick>
 8005a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a60:	e00a      	b.n	8005a78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a62:	f7fd f8cb 	bl	8002bfc <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d901      	bls.n	8005a78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e095      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a78:	4b4c      	ldr	r3, [pc, #304]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1ee      	bne.n	8005a62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005a84:	7dfb      	ldrb	r3, [r7, #23]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d105      	bne.n	8005a96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a8a:	4b48      	ldr	r3, [pc, #288]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	4a47      	ldr	r2, [pc, #284]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f000 8081 	beq.w	8005ba2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005aa0:	4b42      	ldr	r3, [pc, #264]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f003 030c 	and.w	r3, r3, #12
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d061      	beq.n	8005b70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	69db      	ldr	r3, [r3, #28]
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d146      	bne.n	8005b42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ab4:	4b3f      	ldr	r3, [pc, #252]	; (8005bb4 <HAL_RCC_OscConfig+0x4fc>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aba:	f7fd f89f 	bl	8002bfc <HAL_GetTick>
 8005abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ac0:	e008      	b.n	8005ad4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ac2:	f7fd f89b 	bl	8002bfc <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e067      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ad4:	4b35      	ldr	r3, [pc, #212]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1f0      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ae8:	d108      	bne.n	8005afc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005aea:	4b30      	ldr	r3, [pc, #192]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	492d      	ldr	r1, [pc, #180]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005afc:	4b2b      	ldr	r3, [pc, #172]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a19      	ldr	r1, [r3, #32]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	430b      	orrs	r3, r1
 8005b0e:	4927      	ldr	r1, [pc, #156]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b14:	4b27      	ldr	r3, [pc, #156]	; (8005bb4 <HAL_RCC_OscConfig+0x4fc>)
 8005b16:	2201      	movs	r2, #1
 8005b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b1a:	f7fd f86f 	bl	8002bfc <HAL_GetTick>
 8005b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b20:	e008      	b.n	8005b34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b22:	f7fd f86b 	bl	8002bfc <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e037      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b34:	4b1d      	ldr	r3, [pc, #116]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d0f0      	beq.n	8005b22 <HAL_RCC_OscConfig+0x46a>
 8005b40:	e02f      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b42:	4b1c      	ldr	r3, [pc, #112]	; (8005bb4 <HAL_RCC_OscConfig+0x4fc>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b48:	f7fd f858 	bl	8002bfc <HAL_GetTick>
 8005b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b4e:	e008      	b.n	8005b62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b50:	f7fd f854 	bl	8002bfc <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e020      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b62:	4b12      	ldr	r3, [pc, #72]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1f0      	bne.n	8005b50 <HAL_RCC_OscConfig+0x498>
 8005b6e:	e018      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	69db      	ldr	r3, [r3, #28]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d101      	bne.n	8005b7c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e013      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005b7c:	4b0b      	ldr	r3, [pc, #44]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d106      	bne.n	8005b9e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d001      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e000      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3718      	adds	r7, #24
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	40021000 	.word	0x40021000
 8005bb0:	40007000 	.word	0x40007000
 8005bb4:	42420060 	.word	0x42420060

08005bb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e0d0      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bcc:	4b6a      	ldr	r3, [pc, #424]	; (8005d78 <HAL_RCC_ClockConfig+0x1c0>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0307 	and.w	r3, r3, #7
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d910      	bls.n	8005bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bda:	4b67      	ldr	r3, [pc, #412]	; (8005d78 <HAL_RCC_ClockConfig+0x1c0>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f023 0207 	bic.w	r2, r3, #7
 8005be2:	4965      	ldr	r1, [pc, #404]	; (8005d78 <HAL_RCC_ClockConfig+0x1c0>)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bea:	4b63      	ldr	r3, [pc, #396]	; (8005d78 <HAL_RCC_ClockConfig+0x1c0>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0307 	and.w	r3, r3, #7
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d001      	beq.n	8005bfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e0b8      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d020      	beq.n	8005c4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0304 	and.w	r3, r3, #4
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d005      	beq.n	8005c20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c14:	4b59      	ldr	r3, [pc, #356]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	4a58      	ldr	r2, [pc, #352]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005c1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0308 	and.w	r3, r3, #8
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d005      	beq.n	8005c38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c2c:	4b53      	ldr	r3, [pc, #332]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	4a52      	ldr	r2, [pc, #328]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005c32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005c36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c38:	4b50      	ldr	r3, [pc, #320]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	494d      	ldr	r1, [pc, #308]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d040      	beq.n	8005cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d107      	bne.n	8005c6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c5e:	4b47      	ldr	r3, [pc, #284]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d115      	bne.n	8005c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e07f      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d107      	bne.n	8005c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c76:	4b41      	ldr	r3, [pc, #260]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d109      	bne.n	8005c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e073      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c86:	4b3d      	ldr	r3, [pc, #244]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e06b      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c96:	4b39      	ldr	r3, [pc, #228]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f023 0203 	bic.w	r2, r3, #3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	4936      	ldr	r1, [pc, #216]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ca8:	f7fc ffa8 	bl	8002bfc <HAL_GetTick>
 8005cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cae:	e00a      	b.n	8005cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cb0:	f7fc ffa4 	bl	8002bfc <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d901      	bls.n	8005cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e053      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cc6:	4b2d      	ldr	r3, [pc, #180]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f003 020c 	and.w	r2, r3, #12
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d1eb      	bne.n	8005cb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cd8:	4b27      	ldr	r3, [pc, #156]	; (8005d78 <HAL_RCC_ClockConfig+0x1c0>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0307 	and.w	r3, r3, #7
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d210      	bcs.n	8005d08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ce6:	4b24      	ldr	r3, [pc, #144]	; (8005d78 <HAL_RCC_ClockConfig+0x1c0>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f023 0207 	bic.w	r2, r3, #7
 8005cee:	4922      	ldr	r1, [pc, #136]	; (8005d78 <HAL_RCC_ClockConfig+0x1c0>)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cf6:	4b20      	ldr	r3, [pc, #128]	; (8005d78 <HAL_RCC_ClockConfig+0x1c0>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0307 	and.w	r3, r3, #7
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d001      	beq.n	8005d08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e032      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0304 	and.w	r3, r3, #4
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d008      	beq.n	8005d26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d14:	4b19      	ldr	r3, [pc, #100]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	4916      	ldr	r1, [pc, #88]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0308 	and.w	r3, r3, #8
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d009      	beq.n	8005d46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d32:	4b12      	ldr	r3, [pc, #72]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	490e      	ldr	r1, [pc, #56]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d46:	f000 f821 	bl	8005d8c <HAL_RCC_GetSysClockFreq>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	091b      	lsrs	r3, r3, #4
 8005d52:	f003 030f 	and.w	r3, r3, #15
 8005d56:	490a      	ldr	r1, [pc, #40]	; (8005d80 <HAL_RCC_ClockConfig+0x1c8>)
 8005d58:	5ccb      	ldrb	r3, [r1, r3]
 8005d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d5e:	4a09      	ldr	r2, [pc, #36]	; (8005d84 <HAL_RCC_ClockConfig+0x1cc>)
 8005d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d62:	4b09      	ldr	r3, [pc, #36]	; (8005d88 <HAL_RCC_ClockConfig+0x1d0>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fc ff06 	bl	8002b78 <HAL_InitTick>

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	40022000 	.word	0x40022000
 8005d7c:	40021000 	.word	0x40021000
 8005d80:	0800c868 	.word	0x0800c868
 8005d84:	20000010 	.word	0x20000010
 8005d88:	20000014 	.word	0x20000014

08005d8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d8c:	b490      	push	{r4, r7}
 8005d8e:	b08a      	sub	sp, #40	; 0x28
 8005d90:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005d92:	4b2a      	ldr	r3, [pc, #168]	; (8005e3c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005d94:	1d3c      	adds	r4, r7, #4
 8005d96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005d9c:	f240 2301 	movw	r3, #513	; 0x201
 8005da0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	61fb      	str	r3, [r7, #28]
 8005da6:	2300      	movs	r3, #0
 8005da8:	61bb      	str	r3, [r7, #24]
 8005daa:	2300      	movs	r3, #0
 8005dac:	627b      	str	r3, [r7, #36]	; 0x24
 8005dae:	2300      	movs	r3, #0
 8005db0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005db2:	2300      	movs	r3, #0
 8005db4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005db6:	4b22      	ldr	r3, [pc, #136]	; (8005e40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	f003 030c 	and.w	r3, r3, #12
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	d002      	beq.n	8005dcc <HAL_RCC_GetSysClockFreq+0x40>
 8005dc6:	2b08      	cmp	r3, #8
 8005dc8:	d003      	beq.n	8005dd2 <HAL_RCC_GetSysClockFreq+0x46>
 8005dca:	e02d      	b.n	8005e28 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005dcc:	4b1d      	ldr	r3, [pc, #116]	; (8005e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dce:	623b      	str	r3, [r7, #32]
      break;
 8005dd0:	e02d      	b.n	8005e2e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	0c9b      	lsrs	r3, r3, #18
 8005dd6:	f003 030f 	and.w	r3, r3, #15
 8005dda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005dde:	4413      	add	r3, r2
 8005de0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005de4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d013      	beq.n	8005e18 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005df0:	4b13      	ldr	r3, [pc, #76]	; (8005e40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	0c5b      	lsrs	r3, r3, #17
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005dfe:	4413      	add	r3, r2
 8005e00:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005e04:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	4a0e      	ldr	r2, [pc, #56]	; (8005e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e0a:	fb02 f203 	mul.w	r2, r2, r3
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e14:	627b      	str	r3, [r7, #36]	; 0x24
 8005e16:	e004      	b.n	8005e22 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	4a0b      	ldr	r2, [pc, #44]	; (8005e48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e1c:	fb02 f303 	mul.w	r3, r2, r3
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	623b      	str	r3, [r7, #32]
      break;
 8005e26:	e002      	b.n	8005e2e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e28:	4b06      	ldr	r3, [pc, #24]	; (8005e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e2a:	623b      	str	r3, [r7, #32]
      break;
 8005e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3728      	adds	r7, #40	; 0x28
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bc90      	pop	{r4, r7}
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	0800c800 	.word	0x0800c800
 8005e40:	40021000 	.word	0x40021000
 8005e44:	007a1200 	.word	0x007a1200
 8005e48:	003d0900 	.word	0x003d0900

08005e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e50:	4b02      	ldr	r3, [pc, #8]	; (8005e5c <HAL_RCC_GetHCLKFreq+0x10>)
 8005e52:	681b      	ldr	r3, [r3, #0]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bc80      	pop	{r7}
 8005e5a:	4770      	bx	lr
 8005e5c:	20000010 	.word	0x20000010

08005e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e64:	f7ff fff2 	bl	8005e4c <HAL_RCC_GetHCLKFreq>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	4b05      	ldr	r3, [pc, #20]	; (8005e80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	0adb      	lsrs	r3, r3, #11
 8005e70:	f003 0307 	and.w	r3, r3, #7
 8005e74:	4903      	ldr	r1, [pc, #12]	; (8005e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e76:	5ccb      	ldrb	r3, [r1, r3]
 8005e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	40021000 	.word	0x40021000
 8005e84:	0800c878 	.word	0x0800c878

08005e88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005e90:	4b0a      	ldr	r3, [pc, #40]	; (8005ebc <RCC_Delay+0x34>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a0a      	ldr	r2, [pc, #40]	; (8005ec0 <RCC_Delay+0x38>)
 8005e96:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9a:	0a5b      	lsrs	r3, r3, #9
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ea2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ea4:	bf00      	nop
  }
  while (Delay --);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	1e5a      	subs	r2, r3, #1
 8005eaa:	60fa      	str	r2, [r7, #12]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1f9      	bne.n	8005ea4 <RCC_Delay+0x1c>
}
 8005eb0:	bf00      	nop
 8005eb2:	bf00      	nop
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bc80      	pop	{r7}
 8005eba:	4770      	bx	lr
 8005ebc:	20000010 	.word	0x20000010
 8005ec0:	10624dd3 	.word	0x10624dd3

08005ec4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	613b      	str	r3, [r7, #16]
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d07d      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ee4:	4b4f      	ldr	r3, [pc, #316]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ee6:	69db      	ldr	r3, [r3, #28]
 8005ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10d      	bne.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ef0:	4b4c      	ldr	r3, [pc, #304]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	4a4b      	ldr	r2, [pc, #300]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005efa:	61d3      	str	r3, [r2, #28]
 8005efc:	4b49      	ldr	r3, [pc, #292]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f04:	60bb      	str	r3, [r7, #8]
 8005f06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f0c:	4b46      	ldr	r3, [pc, #280]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d118      	bne.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f18:	4b43      	ldr	r3, [pc, #268]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a42      	ldr	r2, [pc, #264]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f24:	f7fc fe6a 	bl	8002bfc <HAL_GetTick>
 8005f28:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f2a:	e008      	b.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f2c:	f7fc fe66 	bl	8002bfc <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	2b64      	cmp	r3, #100	; 0x64
 8005f38:	d901      	bls.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e06d      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f3e:	4b3a      	ldr	r3, [pc, #232]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d0f0      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f4a:	4b36      	ldr	r3, [pc, #216]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f52:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d02e      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d027      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f68:	4b2e      	ldr	r3, [pc, #184]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f70:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f72:	4b2e      	ldr	r3, [pc, #184]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f74:	2201      	movs	r2, #1
 8005f76:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f78:	4b2c      	ldr	r3, [pc, #176]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005f7e:	4a29      	ldr	r2, [pc, #164]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d014      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f8e:	f7fc fe35 	bl	8002bfc <HAL_GetTick>
 8005f92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f94:	e00a      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f96:	f7fc fe31 	bl	8002bfc <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d901      	bls.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e036      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fac:	4b1d      	ldr	r3, [pc, #116]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d0ee      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fb8:	4b1a      	ldr	r3, [pc, #104]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	4917      	ldr	r1, [pc, #92]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005fca:	7dfb      	ldrb	r3, [r7, #23]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d105      	bne.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fd0:	4b14      	ldr	r3, [pc, #80]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	4a13      	ldr	r2, [pc, #76]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fda:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d008      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fe8:	4b0e      	ldr	r3, [pc, #56]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	490b      	ldr	r1, [pc, #44]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0310 	and.w	r3, r3, #16
 8006002:	2b00      	cmp	r3, #0
 8006004:	d008      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006006:	4b07      	ldr	r3, [pc, #28]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	4904      	ldr	r1, [pc, #16]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006014:	4313      	orrs	r3, r2
 8006016:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3718      	adds	r7, #24
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	40021000 	.word	0x40021000
 8006028:	40007000 	.word	0x40007000
 800602c:	42420440 	.word	0x42420440

08006030 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006030:	b590      	push	{r4, r7, lr}
 8006032:	b08d      	sub	sp, #52	; 0x34
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006038:	4b5a      	ldr	r3, [pc, #360]	; (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800603a:	f107 040c 	add.w	r4, r7, #12
 800603e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006040:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006044:	f240 2301 	movw	r3, #513	; 0x201
 8006048:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	627b      	str	r3, [r7, #36]	; 0x24
 800604e:	2300      	movs	r3, #0
 8006050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006052:	2300      	movs	r3, #0
 8006054:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	61fb      	str	r3, [r7, #28]
 800605a:	2300      	movs	r3, #0
 800605c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2b10      	cmp	r3, #16
 8006062:	d00a      	beq.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b10      	cmp	r3, #16
 8006068:	f200 8091 	bhi.w	800618e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d04c      	beq.n	800610c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b02      	cmp	r3, #2
 8006076:	d07c      	beq.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006078:	e089      	b.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 800607a:	4b4b      	ldr	r3, [pc, #300]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006080:	4b49      	ldr	r3, [pc, #292]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 8082 	beq.w	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	0c9b      	lsrs	r3, r3, #18
 8006092:	f003 030f 	and.w	r3, r3, #15
 8006096:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800609a:	4413      	add	r3, r2
 800609c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80060a0:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d018      	beq.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80060ac:	4b3e      	ldr	r3, [pc, #248]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	0c5b      	lsrs	r3, r3, #17
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80060ba:	4413      	add	r3, r2
 80060bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80060c0:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00d      	beq.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80060cc:	4a37      	ldr	r2, [pc, #220]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80060d4:	6a3b      	ldr	r3, [r7, #32]
 80060d6:	fb02 f303 	mul.w	r3, r2, r3
 80060da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060dc:	e004      	b.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	4a33      	ldr	r2, [pc, #204]	; (80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80060e2:	fb02 f303 	mul.w	r3, r2, r3
 80060e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80060e8:	4b2f      	ldr	r3, [pc, #188]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060f4:	d102      	bne.n	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80060f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80060fa:	e04a      	b.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80060fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fe:	005b      	lsls	r3, r3, #1
 8006100:	4a2c      	ldr	r2, [pc, #176]	; (80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8006102:	fba2 2303 	umull	r2, r3, r2, r3
 8006106:	085b      	lsrs	r3, r3, #1
 8006108:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800610a:	e042      	b.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 800610c:	4b26      	ldr	r3, [pc, #152]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800611c:	d108      	bne.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	f003 0302 	and.w	r3, r3, #2
 8006124:	2b00      	cmp	r3, #0
 8006126:	d003      	beq.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8006128:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800612c:	62bb      	str	r3, [r7, #40]	; 0x28
 800612e:	e01f      	b.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800613a:	d109      	bne.n	8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800613c:	4b1a      	ldr	r3, [pc, #104]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b00      	cmp	r3, #0
 8006146:	d003      	beq.n	8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8006148:	f649 4340 	movw	r3, #40000	; 0x9c40
 800614c:	62bb      	str	r3, [r7, #40]	; 0x28
 800614e:	e00f      	b.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006156:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800615a:	d11c      	bne.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800615c:	4b12      	ldr	r3, [pc, #72]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d016      	beq.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8006168:	f24f 4324 	movw	r3, #62500	; 0xf424
 800616c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800616e:	e012      	b.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8006170:	e011      	b.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006172:	f7ff fe75 	bl	8005e60 <HAL_RCC_GetPCLK2Freq>
 8006176:	4602      	mov	r2, r0
 8006178:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	0b9b      	lsrs	r3, r3, #14
 800617e:	f003 0303 	and.w	r3, r3, #3
 8006182:	3301      	adds	r3, #1
 8006184:	005b      	lsls	r3, r3, #1
 8006186:	fbb2 f3f3 	udiv	r3, r2, r3
 800618a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800618c:	e004      	b.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800618e:	bf00      	nop
 8006190:	e002      	b.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8006192:	bf00      	nop
 8006194:	e000      	b.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8006196:	bf00      	nop
    }
  }
  return (frequency);
 8006198:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800619a:	4618      	mov	r0, r3
 800619c:	3734      	adds	r7, #52	; 0x34
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd90      	pop	{r4, r7, pc}
 80061a2:	bf00      	nop
 80061a4:	0800c810 	.word	0x0800c810
 80061a8:	40021000 	.word	0x40021000
 80061ac:	007a1200 	.word	0x007a1200
 80061b0:	003d0900 	.word	0x003d0900
 80061b4:	aaaaaaab 	.word	0xaaaaaaab

080061b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d101      	bne.n	80061ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e076      	b.n	80062b8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d108      	bne.n	80061e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061da:	d009      	beq.n	80061f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	61da      	str	r2, [r3, #28]
 80061e2:	e005      	b.n	80061f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d106      	bne.n	8006210 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7fc fa9a 	bl	8002744 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2202      	movs	r2, #2
 8006214:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006226:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006238:	431a      	orrs	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006242:	431a      	orrs	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	431a      	orrs	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	431a      	orrs	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006260:	431a      	orrs	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800626a:	431a      	orrs	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006274:	ea42 0103 	orr.w	r1, r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	0c1a      	lsrs	r2, r3, #16
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f002 0204 	and.w	r2, r2, #4
 8006296:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	69da      	ldr	r2, [r3, #28]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b088      	sub	sp, #32
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	603b      	str	r3, [r7, #0]
 80062cc:	4613      	mov	r3, r2
 80062ce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062d0:	2300      	movs	r3, #0
 80062d2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d101      	bne.n	80062e2 <HAL_SPI_Transmit+0x22>
 80062de:	2302      	movs	r3, #2
 80062e0:	e126      	b.n	8006530 <HAL_SPI_Transmit+0x270>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062ea:	f7fc fc87 	bl	8002bfc <HAL_GetTick>
 80062ee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80062f0:	88fb      	ldrh	r3, [r7, #6]
 80062f2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d002      	beq.n	8006306 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006300:	2302      	movs	r3, #2
 8006302:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006304:	e10b      	b.n	800651e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <HAL_SPI_Transmit+0x52>
 800630c:	88fb      	ldrh	r3, [r7, #6]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d102      	bne.n	8006318 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006316:	e102      	b.n	800651e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2203      	movs	r2, #3
 800631c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	88fa      	ldrh	r2, [r7, #6]
 8006330:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	88fa      	ldrh	r2, [r7, #6]
 8006336:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800635e:	d10f      	bne.n	8006380 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800636e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800637e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638a:	2b40      	cmp	r3, #64	; 0x40
 800638c:	d007      	beq.n	800639e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800639c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063a6:	d14b      	bne.n	8006440 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <HAL_SPI_Transmit+0xf6>
 80063b0:	8afb      	ldrh	r3, [r7, #22]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d13e      	bne.n	8006434 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ba:	881a      	ldrh	r2, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c6:	1c9a      	adds	r2, r3, #2
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	3b01      	subs	r3, #1
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80063da:	e02b      	b.n	8006434 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d112      	bne.n	8006410 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ee:	881a      	ldrh	r2, [r3, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fa:	1c9a      	adds	r2, r3, #2
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006404:	b29b      	uxth	r3, r3
 8006406:	3b01      	subs	r3, #1
 8006408:	b29a      	uxth	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	86da      	strh	r2, [r3, #54]	; 0x36
 800640e:	e011      	b.n	8006434 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006410:	f7fc fbf4 	bl	8002bfc <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	429a      	cmp	r2, r3
 800641e:	d803      	bhi.n	8006428 <HAL_SPI_Transmit+0x168>
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006426:	d102      	bne.n	800642e <HAL_SPI_Transmit+0x16e>
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d102      	bne.n	8006434 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006432:	e074      	b.n	800651e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006438:	b29b      	uxth	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1ce      	bne.n	80063dc <HAL_SPI_Transmit+0x11c>
 800643e:	e04c      	b.n	80064da <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <HAL_SPI_Transmit+0x18e>
 8006448:	8afb      	ldrh	r3, [r7, #22]
 800644a:	2b01      	cmp	r3, #1
 800644c:	d140      	bne.n	80064d0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	330c      	adds	r3, #12
 8006458:	7812      	ldrb	r2, [r2, #0]
 800645a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006460:	1c5a      	adds	r2, r3, #1
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800646a:	b29b      	uxth	r3, r3
 800646c:	3b01      	subs	r3, #1
 800646e:	b29a      	uxth	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006474:	e02c      	b.n	80064d0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b02      	cmp	r3, #2
 8006482:	d113      	bne.n	80064ac <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	330c      	adds	r3, #12
 800648e:	7812      	ldrb	r2, [r2, #0]
 8006490:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006496:	1c5a      	adds	r2, r3, #1
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	3b01      	subs	r3, #1
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	86da      	strh	r2, [r3, #54]	; 0x36
 80064aa:	e011      	b.n	80064d0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064ac:	f7fc fba6 	bl	8002bfc <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d803      	bhi.n	80064c4 <HAL_SPI_Transmit+0x204>
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c2:	d102      	bne.n	80064ca <HAL_SPI_Transmit+0x20a>
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d102      	bne.n	80064d0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80064ce:	e026      	b.n	800651e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1cd      	bne.n	8006476 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064da:	69ba      	ldr	r2, [r7, #24]
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f000 f8b2 	bl	8006648 <SPI_EndRxTxTransaction>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2220      	movs	r2, #32
 80064ee:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10a      	bne.n	800650e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064f8:	2300      	movs	r3, #0
 80064fa:	613b      	str	r3, [r7, #16]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	613b      	str	r3, [r7, #16]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	613b      	str	r3, [r7, #16]
 800650c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006512:	2b00      	cmp	r3, #0
 8006514:	d002      	beq.n	800651c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	77fb      	strb	r3, [r7, #31]
 800651a:	e000      	b.n	800651e <HAL_SPI_Transmit+0x25e>
  }

error:
 800651c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800652e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3720      	adds	r7, #32
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b088      	sub	sp, #32
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	603b      	str	r3, [r7, #0]
 8006544:	4613      	mov	r3, r2
 8006546:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006548:	f7fc fb58 	bl	8002bfc <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006550:	1a9b      	subs	r3, r3, r2
 8006552:	683a      	ldr	r2, [r7, #0]
 8006554:	4413      	add	r3, r2
 8006556:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006558:	f7fc fb50 	bl	8002bfc <HAL_GetTick>
 800655c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800655e:	4b39      	ldr	r3, [pc, #228]	; (8006644 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	015b      	lsls	r3, r3, #5
 8006564:	0d1b      	lsrs	r3, r3, #20
 8006566:	69fa      	ldr	r2, [r7, #28]
 8006568:	fb02 f303 	mul.w	r3, r2, r3
 800656c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800656e:	e054      	b.n	800661a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006576:	d050      	beq.n	800661a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006578:	f7fc fb40 	bl	8002bfc <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	69fa      	ldr	r2, [r7, #28]
 8006584:	429a      	cmp	r2, r3
 8006586:	d902      	bls.n	800658e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d13d      	bne.n	800660a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800659c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065a6:	d111      	bne.n	80065cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065b0:	d004      	beq.n	80065bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ba:	d107      	bne.n	80065cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065d4:	d10f      	bne.n	80065f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065e4:	601a      	str	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e017      	b.n	800663a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006610:	2300      	movs	r3, #0
 8006612:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	3b01      	subs	r3, #1
 8006618:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	4013      	ands	r3, r2
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	429a      	cmp	r2, r3
 8006628:	bf0c      	ite	eq
 800662a:	2301      	moveq	r3, #1
 800662c:	2300      	movne	r3, #0
 800662e:	b2db      	uxtb	r3, r3
 8006630:	461a      	mov	r2, r3
 8006632:	79fb      	ldrb	r3, [r7, #7]
 8006634:	429a      	cmp	r2, r3
 8006636:	d19b      	bne.n	8006570 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3720      	adds	r7, #32
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	20000010 	.word	0x20000010

08006648 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af02      	add	r7, sp, #8
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	2200      	movs	r2, #0
 800665c:	2180      	movs	r1, #128	; 0x80
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f7ff ff6a 	bl	8006538 <SPI_WaitFlagStateUntilTimeout>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d007      	beq.n	800667a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666e:	f043 0220 	orr.w	r2, r3, #32
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e000      	b.n	800667c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e041      	b.n	800671a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d106      	bne.n	80066b0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7fc f888 	bl	80027c0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	3304      	adds	r3, #4
 80066c0:	4619      	mov	r1, r3
 80066c2:	4610      	mov	r0, r2
 80066c4:	f000 fb38 	bl	8006d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
	...

08006724 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d104      	bne.n	800673e <HAL_TIM_IC_Start_IT+0x1a>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800673a:	b2db      	uxtb	r3, r3
 800673c:	e013      	b.n	8006766 <HAL_TIM_IC_Start_IT+0x42>
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2b04      	cmp	r3, #4
 8006742:	d104      	bne.n	800674e <HAL_TIM_IC_Start_IT+0x2a>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800674a:	b2db      	uxtb	r3, r3
 800674c:	e00b      	b.n	8006766 <HAL_TIM_IC_Start_IT+0x42>
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2b08      	cmp	r3, #8
 8006752:	d104      	bne.n	800675e <HAL_TIM_IC_Start_IT+0x3a>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800675a:	b2db      	uxtb	r3, r3
 800675c:	e003      	b.n	8006766 <HAL_TIM_IC_Start_IT+0x42>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006764:	b2db      	uxtb	r3, r3
 8006766:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d104      	bne.n	8006778 <HAL_TIM_IC_Start_IT+0x54>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006774:	b2db      	uxtb	r3, r3
 8006776:	e013      	b.n	80067a0 <HAL_TIM_IC_Start_IT+0x7c>
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	2b04      	cmp	r3, #4
 800677c:	d104      	bne.n	8006788 <HAL_TIM_IC_Start_IT+0x64>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006784:	b2db      	uxtb	r3, r3
 8006786:	e00b      	b.n	80067a0 <HAL_TIM_IC_Start_IT+0x7c>
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	2b08      	cmp	r3, #8
 800678c:	d104      	bne.n	8006798 <HAL_TIM_IC_Start_IT+0x74>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006794:	b2db      	uxtb	r3, r3
 8006796:	e003      	b.n	80067a0 <HAL_TIM_IC_Start_IT+0x7c>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d102      	bne.n	80067ae <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80067a8:	7bbb      	ldrb	r3, [r7, #14]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d001      	beq.n	80067b2 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e0b3      	b.n	800691a <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d104      	bne.n	80067c2 <HAL_TIM_IC_Start_IT+0x9e>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2202      	movs	r2, #2
 80067bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067c0:	e013      	b.n	80067ea <HAL_TIM_IC_Start_IT+0xc6>
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b04      	cmp	r3, #4
 80067c6:	d104      	bne.n	80067d2 <HAL_TIM_IC_Start_IT+0xae>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2202      	movs	r2, #2
 80067cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067d0:	e00b      	b.n	80067ea <HAL_TIM_IC_Start_IT+0xc6>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b08      	cmp	r3, #8
 80067d6:	d104      	bne.n	80067e2 <HAL_TIM_IC_Start_IT+0xbe>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2202      	movs	r2, #2
 80067dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067e0:	e003      	b.n	80067ea <HAL_TIM_IC_Start_IT+0xc6>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2202      	movs	r2, #2
 80067e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d104      	bne.n	80067fa <HAL_TIM_IC_Start_IT+0xd6>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2202      	movs	r2, #2
 80067f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067f8:	e013      	b.n	8006822 <HAL_TIM_IC_Start_IT+0xfe>
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b04      	cmp	r3, #4
 80067fe:	d104      	bne.n	800680a <HAL_TIM_IC_Start_IT+0xe6>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2202      	movs	r2, #2
 8006804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006808:	e00b      	b.n	8006822 <HAL_TIM_IC_Start_IT+0xfe>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	2b08      	cmp	r3, #8
 800680e:	d104      	bne.n	800681a <HAL_TIM_IC_Start_IT+0xf6>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006818:	e003      	b.n	8006822 <HAL_TIM_IC_Start_IT+0xfe>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2202      	movs	r2, #2
 800681e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2b0c      	cmp	r3, #12
 8006826:	d841      	bhi.n	80068ac <HAL_TIM_IC_Start_IT+0x188>
 8006828:	a201      	add	r2, pc, #4	; (adr r2, 8006830 <HAL_TIM_IC_Start_IT+0x10c>)
 800682a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800682e:	bf00      	nop
 8006830:	08006865 	.word	0x08006865
 8006834:	080068ad 	.word	0x080068ad
 8006838:	080068ad 	.word	0x080068ad
 800683c:	080068ad 	.word	0x080068ad
 8006840:	08006877 	.word	0x08006877
 8006844:	080068ad 	.word	0x080068ad
 8006848:	080068ad 	.word	0x080068ad
 800684c:	080068ad 	.word	0x080068ad
 8006850:	08006889 	.word	0x08006889
 8006854:	080068ad 	.word	0x080068ad
 8006858:	080068ad 	.word	0x080068ad
 800685c:	080068ad 	.word	0x080068ad
 8006860:	0800689b 	.word	0x0800689b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68da      	ldr	r2, [r3, #12]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f042 0202 	orr.w	r2, r2, #2
 8006872:	60da      	str	r2, [r3, #12]
      break;
 8006874:	e01b      	b.n	80068ae <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68da      	ldr	r2, [r3, #12]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f042 0204 	orr.w	r2, r2, #4
 8006884:	60da      	str	r2, [r3, #12]
      break;
 8006886:	e012      	b.n	80068ae <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68da      	ldr	r2, [r3, #12]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f042 0208 	orr.w	r2, r2, #8
 8006896:	60da      	str	r2, [r3, #12]
      break;
 8006898:	e009      	b.n	80068ae <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68da      	ldr	r2, [r3, #12]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f042 0210 	orr.w	r2, r2, #16
 80068a8:	60da      	str	r2, [r3, #12]
      break;
 80068aa:	e000      	b.n	80068ae <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80068ac:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2201      	movs	r2, #1
 80068b4:	6839      	ldr	r1, [r7, #0]
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 fbad 	bl	8007016 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a18      	ldr	r2, [pc, #96]	; (8006924 <HAL_TIM_IC_Start_IT+0x200>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d00e      	beq.n	80068e4 <HAL_TIM_IC_Start_IT+0x1c0>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ce:	d009      	beq.n	80068e4 <HAL_TIM_IC_Start_IT+0x1c0>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a14      	ldr	r2, [pc, #80]	; (8006928 <HAL_TIM_IC_Start_IT+0x204>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d004      	beq.n	80068e4 <HAL_TIM_IC_Start_IT+0x1c0>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a13      	ldr	r2, [pc, #76]	; (800692c <HAL_TIM_IC_Start_IT+0x208>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d111      	bne.n	8006908 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f003 0307 	and.w	r3, r3, #7
 80068ee:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	2b06      	cmp	r3, #6
 80068f4:	d010      	beq.n	8006918 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f042 0201 	orr.w	r2, r2, #1
 8006904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006906:	e007      	b.n	8006918 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0201 	orr.w	r2, r2, #1
 8006916:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	40012c00 	.word	0x40012c00
 8006928:	40000400 	.word	0x40000400
 800692c:	40000800 	.word	0x40000800

08006930 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	f003 0302 	and.w	r3, r3, #2
 8006942:	2b02      	cmp	r3, #2
 8006944:	d122      	bne.n	800698c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	f003 0302 	and.w	r3, r3, #2
 8006950:	2b02      	cmp	r3, #2
 8006952:	d11b      	bne.n	800698c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f06f 0202 	mvn.w	r2, #2
 800695c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	f003 0303 	and.w	r3, r3, #3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d003      	beq.n	800697a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fa fc62 	bl	800123c <HAL_TIM_IC_CaptureCallback>
 8006978:	e005      	b.n	8006986 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f9c1 	bl	8006d02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f9c7 	bl	8006d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	f003 0304 	and.w	r3, r3, #4
 8006996:	2b04      	cmp	r3, #4
 8006998:	d122      	bne.n	80069e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	f003 0304 	and.w	r3, r3, #4
 80069a4:	2b04      	cmp	r3, #4
 80069a6:	d11b      	bne.n	80069e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f06f 0204 	mvn.w	r2, #4
 80069b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2202      	movs	r2, #2
 80069b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d003      	beq.n	80069ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7fa fc38 	bl	800123c <HAL_TIM_IC_CaptureCallback>
 80069cc:	e005      	b.n	80069da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f997 	bl	8006d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f99d 	bl	8006d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	f003 0308 	and.w	r3, r3, #8
 80069ea:	2b08      	cmp	r3, #8
 80069ec:	d122      	bne.n	8006a34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	f003 0308 	and.w	r3, r3, #8
 80069f8:	2b08      	cmp	r3, #8
 80069fa:	d11b      	bne.n	8006a34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f06f 0208 	mvn.w	r2, #8
 8006a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2204      	movs	r2, #4
 8006a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	69db      	ldr	r3, [r3, #28]
 8006a12:	f003 0303 	and.w	r3, r3, #3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d003      	beq.n	8006a22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7fa fc0e 	bl	800123c <HAL_TIM_IC_CaptureCallback>
 8006a20:	e005      	b.n	8006a2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f96d 	bl	8006d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f973 	bl	8006d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	f003 0310 	and.w	r3, r3, #16
 8006a3e:	2b10      	cmp	r3, #16
 8006a40:	d122      	bne.n	8006a88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	f003 0310 	and.w	r3, r3, #16
 8006a4c:	2b10      	cmp	r3, #16
 8006a4e:	d11b      	bne.n	8006a88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f06f 0210 	mvn.w	r2, #16
 8006a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2208      	movs	r2, #8
 8006a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d003      	beq.n	8006a76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7fa fbe4 	bl	800123c <HAL_TIM_IC_CaptureCallback>
 8006a74:	e005      	b.n	8006a82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f943 	bl	8006d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f949 	bl	8006d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d10e      	bne.n	8006ab4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d107      	bne.n	8006ab4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f06f 0201 	mvn.w	r2, #1
 8006aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f91e 	bl	8006cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006abe:	2b80      	cmp	r3, #128	; 0x80
 8006ac0:	d10e      	bne.n	8006ae0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006acc:	2b80      	cmp	r3, #128	; 0x80
 8006ace:	d107      	bne.n	8006ae0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 fb27 	bl	800712e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aea:	2b40      	cmp	r3, #64	; 0x40
 8006aec:	d10e      	bne.n	8006b0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af8:	2b40      	cmp	r3, #64	; 0x40
 8006afa:	d107      	bne.n	8006b0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f90d 	bl	8006d26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	f003 0320 	and.w	r3, r3, #32
 8006b16:	2b20      	cmp	r3, #32
 8006b18:	d10e      	bne.n	8006b38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	f003 0320 	and.w	r3, r3, #32
 8006b24:	2b20      	cmp	r3, #32
 8006b26:	d107      	bne.n	8006b38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f06f 0220 	mvn.w	r2, #32
 8006b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 faf2 	bl	800711c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b38:	bf00      	nop
 8006b3a:	3708      	adds	r7, #8
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d101      	bne.n	8006b5a <HAL_TIM_IC_ConfigChannel+0x1a>
 8006b56:	2302      	movs	r3, #2
 8006b58:	e082      	b.n	8006c60 <HAL_TIM_IC_ConfigChannel+0x120>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d11b      	bne.n	8006ba0 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6818      	ldr	r0, [r3, #0]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	6819      	ldr	r1, [r3, #0]
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	f000 f940 	bl	8006dfc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	699a      	ldr	r2, [r3, #24]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f022 020c 	bic.w	r2, r2, #12
 8006b8a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6999      	ldr	r1, [r3, #24]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	689a      	ldr	r2, [r3, #8]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	619a      	str	r2, [r3, #24]
 8006b9e:	e05a      	b.n	8006c56 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b04      	cmp	r3, #4
 8006ba4:	d11c      	bne.n	8006be0 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6818      	ldr	r0, [r3, #0]
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	6819      	ldr	r1, [r3, #0]
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	685a      	ldr	r2, [r3, #4]
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	f000 f97b 	bl	8006eb0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	699a      	ldr	r2, [r3, #24]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006bc8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6999      	ldr	r1, [r3, #24]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	021a      	lsls	r2, r3, #8
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	619a      	str	r2, [r3, #24]
 8006bde:	e03a      	b.n	8006c56 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b08      	cmp	r3, #8
 8006be4:	d11b      	bne.n	8006c1e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6818      	ldr	r0, [r3, #0]
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	6819      	ldr	r1, [r3, #0]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f000 f997 	bl	8006f28 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	69da      	ldr	r2, [r3, #28]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f022 020c 	bic.w	r2, r2, #12
 8006c08:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	69d9      	ldr	r1, [r3, #28]
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	430a      	orrs	r2, r1
 8006c1a:	61da      	str	r2, [r3, #28]
 8006c1c:	e01b      	b.n	8006c56 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6818      	ldr	r0, [r3, #0]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	6819      	ldr	r1, [r3, #0]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	f000 f9b6 	bl	8006f9e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	69da      	ldr	r2, [r3, #28]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006c40:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69d9      	ldr	r1, [r3, #28]
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	021a      	lsls	r2, r3, #8
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	430a      	orrs	r2, r1
 8006c54:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	60fb      	str	r3, [r7, #12]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b0c      	cmp	r3, #12
 8006c7a:	d831      	bhi.n	8006ce0 <HAL_TIM_ReadCapturedValue+0x78>
 8006c7c:	a201      	add	r2, pc, #4	; (adr r2, 8006c84 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c82:	bf00      	nop
 8006c84:	08006cb9 	.word	0x08006cb9
 8006c88:	08006ce1 	.word	0x08006ce1
 8006c8c:	08006ce1 	.word	0x08006ce1
 8006c90:	08006ce1 	.word	0x08006ce1
 8006c94:	08006cc3 	.word	0x08006cc3
 8006c98:	08006ce1 	.word	0x08006ce1
 8006c9c:	08006ce1 	.word	0x08006ce1
 8006ca0:	08006ce1 	.word	0x08006ce1
 8006ca4:	08006ccd 	.word	0x08006ccd
 8006ca8:	08006ce1 	.word	0x08006ce1
 8006cac:	08006ce1 	.word	0x08006ce1
 8006cb0:	08006ce1 	.word	0x08006ce1
 8006cb4:	08006cd7 	.word	0x08006cd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cbe:	60fb      	str	r3, [r7, #12]

      break;
 8006cc0:	e00f      	b.n	8006ce2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc8:	60fb      	str	r3, [r7, #12]

      break;
 8006cca:	e00a      	b.n	8006ce2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd2:	60fb      	str	r3, [r7, #12]

      break;
 8006cd4:	e005      	b.n	8006ce2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cdc:	60fb      	str	r3, [r7, #12]

      break;
 8006cde:	e000      	b.n	8006ce2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006ce0:	bf00      	nop
  }

  return tmpreg;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bc80      	pop	{r7}
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop

08006cf0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bc80      	pop	{r7}
 8006d00:	4770      	bx	lr

08006d02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b083      	sub	sp, #12
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d0a:	bf00      	nop
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bc80      	pop	{r7}
 8006d12:	4770      	bx	lr

08006d14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bc80      	pop	{r7}
 8006d24:	4770      	bx	lr

08006d26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b083      	sub	sp, #12
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d2e:	bf00      	nop
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bc80      	pop	{r7}
 8006d36:	4770      	bx	lr

08006d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a29      	ldr	r2, [pc, #164]	; (8006df0 <TIM_Base_SetConfig+0xb8>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d00b      	beq.n	8006d68 <TIM_Base_SetConfig+0x30>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d56:	d007      	beq.n	8006d68 <TIM_Base_SetConfig+0x30>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a26      	ldr	r2, [pc, #152]	; (8006df4 <TIM_Base_SetConfig+0xbc>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d003      	beq.n	8006d68 <TIM_Base_SetConfig+0x30>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a25      	ldr	r2, [pc, #148]	; (8006df8 <TIM_Base_SetConfig+0xc0>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d108      	bne.n	8006d7a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a1c      	ldr	r2, [pc, #112]	; (8006df0 <TIM_Base_SetConfig+0xb8>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d00b      	beq.n	8006d9a <TIM_Base_SetConfig+0x62>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d88:	d007      	beq.n	8006d9a <TIM_Base_SetConfig+0x62>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a19      	ldr	r2, [pc, #100]	; (8006df4 <TIM_Base_SetConfig+0xbc>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d003      	beq.n	8006d9a <TIM_Base_SetConfig+0x62>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a18      	ldr	r2, [pc, #96]	; (8006df8 <TIM_Base_SetConfig+0xc0>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d108      	bne.n	8006dac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006da0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	689a      	ldr	r2, [r3, #8]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a07      	ldr	r2, [pc, #28]	; (8006df0 <TIM_Base_SetConfig+0xb8>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d103      	bne.n	8006de0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	691a      	ldr	r2, [r3, #16]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	615a      	str	r2, [r3, #20]
}
 8006de6:	bf00      	nop
 8006de8:	3714      	adds	r7, #20
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bc80      	pop	{r7}
 8006dee:	4770      	bx	lr
 8006df0:	40012c00 	.word	0x40012c00
 8006df4:	40000400 	.word	0x40000400
 8006df8:	40000800 	.word	0x40000800

08006dfc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b087      	sub	sp, #28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
 8006e08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	f023 0201 	bic.w	r2, r3, #1
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	4a1f      	ldr	r2, [pc, #124]	; (8006ea4 <TIM_TI1_SetConfig+0xa8>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d00b      	beq.n	8006e42 <TIM_TI1_SetConfig+0x46>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e30:	d007      	beq.n	8006e42 <TIM_TI1_SetConfig+0x46>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	4a1c      	ldr	r2, [pc, #112]	; (8006ea8 <TIM_TI1_SetConfig+0xac>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d003      	beq.n	8006e42 <TIM_TI1_SetConfig+0x46>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	4a1b      	ldr	r2, [pc, #108]	; (8006eac <TIM_TI1_SetConfig+0xb0>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d101      	bne.n	8006e46 <TIM_TI1_SetConfig+0x4a>
 8006e42:	2301      	movs	r3, #1
 8006e44:	e000      	b.n	8006e48 <TIM_TI1_SetConfig+0x4c>
 8006e46:	2300      	movs	r3, #0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d008      	beq.n	8006e5e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f023 0303 	bic.w	r3, r3, #3
 8006e52:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	617b      	str	r3, [r7, #20]
 8006e5c:	e003      	b.n	8006e66 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f043 0301 	orr.w	r3, r3, #1
 8006e64:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	011b      	lsls	r3, r3, #4
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	f023 030a 	bic.w	r3, r3, #10
 8006e80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	f003 030a 	and.w	r3, r3, #10
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	621a      	str	r2, [r3, #32]
}
 8006e9a:	bf00      	nop
 8006e9c:	371c      	adds	r7, #28
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bc80      	pop	{r7}
 8006ea2:	4770      	bx	lr
 8006ea4:	40012c00 	.word	0x40012c00
 8006ea8:	40000400 	.word	0x40000400
 8006eac:	40000800 	.word	0x40000800

08006eb0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
 8006ebc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	f023 0210 	bic.w	r2, r3, #16
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006edc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	021b      	lsls	r3, r3, #8
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006eee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	031b      	lsls	r3, r3, #12
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f02:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	011b      	lsls	r3, r3, #4
 8006f08:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	621a      	str	r2, [r3, #32]
}
 8006f1e:	bf00      	nop
 8006f20:	371c      	adds	r7, #28
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bc80      	pop	{r7}
 8006f26:	4770      	bx	lr

08006f28 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b087      	sub	sp, #28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
 8006f34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6a1b      	ldr	r3, [r3, #32]
 8006f4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f023 0303 	bic.w	r3, r3, #3
 8006f54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f64:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	011b      	lsls	r3, r3, #4
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	697a      	ldr	r2, [r7, #20]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f78:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	021b      	lsls	r3, r3, #8
 8006f7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f82:	693a      	ldr	r2, [r7, #16]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	621a      	str	r2, [r3, #32]
}
 8006f94:	bf00      	nop
 8006f96:	371c      	adds	r7, #28
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bc80      	pop	{r7}
 8006f9c:	4770      	bx	lr

08006f9e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b087      	sub	sp, #28
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	60f8      	str	r0, [r7, #12]
 8006fa6:	60b9      	str	r1, [r7, #8]
 8006fa8:	607a      	str	r2, [r7, #4]
 8006faa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6a1b      	ldr	r3, [r3, #32]
 8006fb0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	69db      	ldr	r3, [r3, #28]
 8006fbc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	021b      	lsls	r3, r3, #8
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fdc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	031b      	lsls	r3, r3, #12
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ff0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	031b      	lsls	r3, r3, #12
 8006ff6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ffa:	693a      	ldr	r2, [r7, #16]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	621a      	str	r2, [r3, #32]
}
 800700c:	bf00      	nop
 800700e:	371c      	adds	r7, #28
 8007010:	46bd      	mov	sp, r7
 8007012:	bc80      	pop	{r7}
 8007014:	4770      	bx	lr

08007016 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007016:	b480      	push	{r7}
 8007018:	b087      	sub	sp, #28
 800701a:	af00      	add	r7, sp, #0
 800701c:	60f8      	str	r0, [r7, #12]
 800701e:	60b9      	str	r1, [r7, #8]
 8007020:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	f003 031f 	and.w	r3, r3, #31
 8007028:	2201      	movs	r2, #1
 800702a:	fa02 f303 	lsl.w	r3, r2, r3
 800702e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6a1a      	ldr	r2, [r3, #32]
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	43db      	mvns	r3, r3
 8007038:	401a      	ands	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6a1a      	ldr	r2, [r3, #32]
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	f003 031f 	and.w	r3, r3, #31
 8007048:	6879      	ldr	r1, [r7, #4]
 800704a:	fa01 f303 	lsl.w	r3, r1, r3
 800704e:	431a      	orrs	r2, r3
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	621a      	str	r2, [r3, #32]
}
 8007054:	bf00      	nop
 8007056:	371c      	adds	r7, #28
 8007058:	46bd      	mov	sp, r7
 800705a:	bc80      	pop	{r7}
 800705c:	4770      	bx	lr
	...

08007060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007070:	2b01      	cmp	r3, #1
 8007072:	d101      	bne.n	8007078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007074:	2302      	movs	r3, #2
 8007076:	e046      	b.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2202      	movs	r2, #2
 8007084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800709e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a16      	ldr	r2, [pc, #88]	; (8007110 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d00e      	beq.n	80070da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070c4:	d009      	beq.n	80070da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a12      	ldr	r2, [pc, #72]	; (8007114 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d004      	beq.n	80070da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a10      	ldr	r2, [pc, #64]	; (8007118 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d10c      	bne.n	80070f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	bc80      	pop	{r7}
 800710e:	4770      	bx	lr
 8007110:	40012c00 	.word	0x40012c00
 8007114:	40000400 	.word	0x40000400
 8007118:	40000800 	.word	0x40000800

0800711c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	bc80      	pop	{r7}
 800712c:	4770      	bx	lr

0800712e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800712e:	b480      	push	{r7}
 8007130:	b083      	sub	sp, #12
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007136:	bf00      	nop
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	bc80      	pop	{r7}
 800713e:	4770      	bx	lr

08007140 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007140:	b084      	sub	sp, #16
 8007142:	b480      	push	{r7}
 8007144:	b083      	sub	sp, #12
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	f107 0014 	add.w	r0, r7, #20
 800714e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	bc80      	pop	{r7}
 800715c:	b004      	add	sp, #16
 800715e:	4770      	bx	lr

08007160 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007170:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007174:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	b29a      	uxth	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	bc80      	pop	{r7}
 800718a:	4770      	bx	lr

0800718c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007194:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007198:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	43db      	mvns	r3, r3
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	4013      	ands	r3, r2
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bc80      	pop	{r7}
 80071be:	4770      	bx	lr

080071c0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	460b      	mov	r3, r1
 80071ca:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bc80      	pop	{r7}
 80071d6:	4770      	bx	lr

080071d8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80071d8:	b084      	sub	sp, #16
 80071da:	b480      	push	{r7}
 80071dc:	b083      	sub	sp, #12
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	f107 0014 	add.w	r0, r7, #20
 80071e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	bc80      	pop	{r7}
 8007214:	b004      	add	sp, #16
 8007216:	4770      	bx	lr

08007218 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007218:	b480      	push	{r7}
 800721a:	b09b      	sub	sp, #108	; 0x6c
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007222:	2300      	movs	r3, #0
 8007224:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	4413      	add	r3, r2
 8007232:	881b      	ldrh	r3, [r3, #0]
 8007234:	b29b      	uxth	r3, r3
 8007236:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800723a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	78db      	ldrb	r3, [r3, #3]
 8007246:	2b03      	cmp	r3, #3
 8007248:	d81f      	bhi.n	800728a <USB_ActivateEndpoint+0x72>
 800724a:	a201      	add	r2, pc, #4	; (adr r2, 8007250 <USB_ActivateEndpoint+0x38>)
 800724c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007250:	08007261 	.word	0x08007261
 8007254:	0800727d 	.word	0x0800727d
 8007258:	08007293 	.word	0x08007293
 800725c:	0800726f 	.word	0x0800726f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007260:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007264:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007268:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800726c:	e012      	b.n	8007294 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800726e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007272:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007276:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800727a:	e00b      	b.n	8007294 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800727c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007280:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007284:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007288:	e004      	b.n	8007294 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007290:	e000      	b.n	8007294 <USB_ActivateEndpoint+0x7c>
      break;
 8007292:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	441a      	add	r2, r3
 800729e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80072a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	4413      	add	r3, r2
 80072c0:	881b      	ldrh	r3, [r3, #0]
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	4313      	orrs	r3, r2
 80072d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	441a      	add	r2, r3
 80072e4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80072e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	7b1b      	ldrb	r3, [r3, #12]
 8007300:	2b00      	cmp	r3, #0
 8007302:	f040 8149 	bne.w	8007598 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	785b      	ldrb	r3, [r3, #1]
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 8084 	beq.w	8007418 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	617b      	str	r3, [r7, #20]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800731a:	b29b      	uxth	r3, r3
 800731c:	461a      	mov	r2, r3
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	4413      	add	r3, r2
 8007322:	617b      	str	r3, [r7, #20]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	011a      	lsls	r2, r3, #4
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	4413      	add	r3, r2
 800732e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007332:	613b      	str	r3, [r7, #16]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	88db      	ldrh	r3, [r3, #6]
 8007338:	085b      	lsrs	r3, r3, #1
 800733a:	b29b      	uxth	r3, r3
 800733c:	005b      	lsls	r3, r3, #1
 800733e:	b29a      	uxth	r2, r3
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	881b      	ldrh	r3, [r3, #0]
 8007350:	81fb      	strh	r3, [r7, #14]
 8007352:	89fb      	ldrh	r3, [r7, #14]
 8007354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007358:	2b00      	cmp	r3, #0
 800735a:	d01b      	beq.n	8007394 <USB_ActivateEndpoint+0x17c>
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	881b      	ldrh	r3, [r3, #0]
 8007368:	b29b      	uxth	r3, r3
 800736a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800736e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007372:	81bb      	strh	r3, [r7, #12]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	441a      	add	r2, r3
 800737e:	89bb      	ldrh	r3, [r7, #12]
 8007380:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007384:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800738c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007390:	b29b      	uxth	r3, r3
 8007392:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	78db      	ldrb	r3, [r3, #3]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d020      	beq.n	80073de <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4413      	add	r3, r2
 80073a6:	881b      	ldrh	r3, [r3, #0]
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073b2:	813b      	strh	r3, [r7, #8]
 80073b4:	893b      	ldrh	r3, [r7, #8]
 80073b6:	f083 0320 	eor.w	r3, r3, #32
 80073ba:	813b      	strh	r3, [r7, #8]
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	441a      	add	r2, r3
 80073c6:	893b      	ldrh	r3, [r7, #8]
 80073c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073d8:	b29b      	uxth	r3, r3
 80073da:	8013      	strh	r3, [r2, #0]
 80073dc:	e27f      	b.n	80078de <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4413      	add	r3, r2
 80073e8:	881b      	ldrh	r3, [r3, #0]
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073f4:	817b      	strh	r3, [r7, #10]
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	441a      	add	r2, r3
 8007400:	897b      	ldrh	r3, [r7, #10]
 8007402:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007406:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800740a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800740e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007412:	b29b      	uxth	r3, r3
 8007414:	8013      	strh	r3, [r2, #0]
 8007416:	e262      	b.n	80078de <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007422:	b29b      	uxth	r3, r3
 8007424:	461a      	mov	r2, r3
 8007426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007428:	4413      	add	r3, r2
 800742a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	011a      	lsls	r2, r3, #4
 8007432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007434:	4413      	add	r3, r2
 8007436:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800743a:	62bb      	str	r3, [r7, #40]	; 0x28
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	88db      	ldrh	r3, [r3, #6]
 8007440:	085b      	lsrs	r3, r3, #1
 8007442:	b29b      	uxth	r3, r3
 8007444:	005b      	lsls	r3, r3, #1
 8007446:	b29a      	uxth	r2, r3
 8007448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	627b      	str	r3, [r7, #36]	; 0x24
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007456:	b29b      	uxth	r3, r3
 8007458:	461a      	mov	r2, r3
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	4413      	add	r3, r2
 800745e:	627b      	str	r3, [r7, #36]	; 0x24
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	011a      	lsls	r2, r3, #4
 8007466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007468:	4413      	add	r3, r2
 800746a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800746e:	623b      	str	r3, [r7, #32]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d112      	bne.n	800749e <USB_ActivateEndpoint+0x286>
 8007478:	6a3b      	ldr	r3, [r7, #32]
 800747a:	881b      	ldrh	r3, [r3, #0]
 800747c:	b29b      	uxth	r3, r3
 800747e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007482:	b29a      	uxth	r2, r3
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	801a      	strh	r2, [r3, #0]
 8007488:	6a3b      	ldr	r3, [r7, #32]
 800748a:	881b      	ldrh	r3, [r3, #0]
 800748c:	b29b      	uxth	r3, r3
 800748e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007492:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007496:	b29a      	uxth	r2, r3
 8007498:	6a3b      	ldr	r3, [r7, #32]
 800749a:	801a      	strh	r2, [r3, #0]
 800749c:	e02f      	b.n	80074fe <USB_ActivateEndpoint+0x2e6>
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	2b3e      	cmp	r3, #62	; 0x3e
 80074a4:	d813      	bhi.n	80074ce <USB_ActivateEndpoint+0x2b6>
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	085b      	lsrs	r3, r3, #1
 80074ac:	663b      	str	r3, [r7, #96]	; 0x60
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d002      	beq.n	80074c0 <USB_ActivateEndpoint+0x2a8>
 80074ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074bc:	3301      	adds	r3, #1
 80074be:	663b      	str	r3, [r7, #96]	; 0x60
 80074c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	029b      	lsls	r3, r3, #10
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	801a      	strh	r2, [r3, #0]
 80074cc:	e017      	b.n	80074fe <USB_ActivateEndpoint+0x2e6>
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	095b      	lsrs	r3, r3, #5
 80074d4:	663b      	str	r3, [r7, #96]	; 0x60
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	f003 031f 	and.w	r3, r3, #31
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d102      	bne.n	80074e8 <USB_ActivateEndpoint+0x2d0>
 80074e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074e4:	3b01      	subs	r3, #1
 80074e6:	663b      	str	r3, [r7, #96]	; 0x60
 80074e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	029b      	lsls	r3, r3, #10
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	881b      	ldrh	r3, [r3, #0]
 800750a:	83fb      	strh	r3, [r7, #30]
 800750c:	8bfb      	ldrh	r3, [r7, #30]
 800750e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007512:	2b00      	cmp	r3, #0
 8007514:	d01b      	beq.n	800754e <USB_ActivateEndpoint+0x336>
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	881b      	ldrh	r3, [r3, #0]
 8007522:	b29b      	uxth	r3, r3
 8007524:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800752c:	83bb      	strh	r3, [r7, #28]
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	441a      	add	r2, r3
 8007538:	8bbb      	ldrh	r3, [r7, #28]
 800753a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800753e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007542:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800754a:	b29b      	uxth	r3, r3
 800754c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4413      	add	r3, r2
 8007558:	881b      	ldrh	r3, [r3, #0]
 800755a:	b29b      	uxth	r3, r3
 800755c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007564:	837b      	strh	r3, [r7, #26]
 8007566:	8b7b      	ldrh	r3, [r7, #26]
 8007568:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800756c:	837b      	strh	r3, [r7, #26]
 800756e:	8b7b      	ldrh	r3, [r7, #26]
 8007570:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007574:	837b      	strh	r3, [r7, #26]
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	441a      	add	r2, r3
 8007580:	8b7b      	ldrh	r3, [r7, #26]
 8007582:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007586:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800758a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800758e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007592:	b29b      	uxth	r3, r3
 8007594:	8013      	strh	r3, [r2, #0]
 8007596:	e1a2      	b.n	80078de <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	4413      	add	r3, r2
 80075a2:	881b      	ldrh	r3, [r3, #0]
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ae:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	441a      	add	r2, r3
 80075bc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80075c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075c8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80075cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075de:	b29b      	uxth	r3, r3
 80075e0:	461a      	mov	r2, r3
 80075e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80075e4:	4413      	add	r3, r2
 80075e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	011a      	lsls	r2, r3, #4
 80075ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80075f0:	4413      	add	r3, r2
 80075f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075f6:	657b      	str	r3, [r7, #84]	; 0x54
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	891b      	ldrh	r3, [r3, #8]
 80075fc:	085b      	lsrs	r3, r3, #1
 80075fe:	b29b      	uxth	r3, r3
 8007600:	005b      	lsls	r3, r3, #1
 8007602:	b29a      	uxth	r2, r3
 8007604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007606:	801a      	strh	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	653b      	str	r3, [r7, #80]	; 0x50
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007612:	b29b      	uxth	r3, r3
 8007614:	461a      	mov	r2, r3
 8007616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007618:	4413      	add	r3, r2
 800761a:	653b      	str	r3, [r7, #80]	; 0x50
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	011a      	lsls	r2, r3, #4
 8007622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007624:	4413      	add	r3, r2
 8007626:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800762a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	895b      	ldrh	r3, [r3, #10]
 8007630:	085b      	lsrs	r3, r3, #1
 8007632:	b29b      	uxth	r3, r3
 8007634:	005b      	lsls	r3, r3, #1
 8007636:	b29a      	uxth	r2, r3
 8007638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800763a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	785b      	ldrb	r3, [r3, #1]
 8007640:	2b00      	cmp	r3, #0
 8007642:	f040 8091 	bne.w	8007768 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4413      	add	r3, r2
 8007650:	881b      	ldrh	r3, [r3, #0]
 8007652:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007654:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d01b      	beq.n	8007696 <USB_ActivateEndpoint+0x47e>
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	4413      	add	r3, r2
 8007668:	881b      	ldrh	r3, [r3, #0]
 800766a:	b29b      	uxth	r3, r3
 800766c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007674:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	441a      	add	r2, r3
 8007680:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800768a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800768e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007692:	b29b      	uxth	r3, r3
 8007694:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4413      	add	r3, r2
 80076a0:	881b      	ldrh	r3, [r3, #0]
 80076a2:	873b      	strh	r3, [r7, #56]	; 0x38
 80076a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80076a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d01b      	beq.n	80076e6 <USB_ActivateEndpoint+0x4ce>
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4413      	add	r3, r2
 80076b8:	881b      	ldrh	r3, [r3, #0]
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076c4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	441a      	add	r2, r3
 80076d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80076d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	4413      	add	r3, r2
 80076f0:	881b      	ldrh	r3, [r3, #0]
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076fc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80076fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007700:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007704:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007706:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007708:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800770c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	441a      	add	r2, r3
 8007718:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800771a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800771e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800772a:	b29b      	uxth	r3, r3
 800772c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	881b      	ldrh	r3, [r3, #0]
 800773a:	b29b      	uxth	r3, r3
 800773c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007744:	867b      	strh	r3, [r7, #50]	; 0x32
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	441a      	add	r2, r3
 8007750:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007752:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007756:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800775a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800775e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007762:	b29b      	uxth	r3, r3
 8007764:	8013      	strh	r3, [r2, #0]
 8007766:	e0ba      	b.n	80078de <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	4413      	add	r3, r2
 8007772:	881b      	ldrh	r3, [r3, #0]
 8007774:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007778:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800777c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d01d      	beq.n	80077c0 <USB_ActivateEndpoint+0x5a8>
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	4413      	add	r3, r2
 800778e:	881b      	ldrh	r3, [r3, #0]
 8007790:	b29b      	uxth	r3, r3
 8007792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800779a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	441a      	add	r2, r3
 80077a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80077ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80077b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077bc:	b29b      	uxth	r3, r3
 80077be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	4413      	add	r3, r2
 80077ca:	881b      	ldrh	r3, [r3, #0]
 80077cc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80077d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80077d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d01d      	beq.n	8007818 <USB_ActivateEndpoint+0x600>
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	881b      	ldrh	r3, [r3, #0]
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	441a      	add	r2, r3
 8007800:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800780c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007810:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007814:	b29b      	uxth	r3, r3
 8007816:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	78db      	ldrb	r3, [r3, #3]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d024      	beq.n	800786a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	4413      	add	r3, r2
 800782a:	881b      	ldrh	r3, [r3, #0]
 800782c:	b29b      	uxth	r3, r3
 800782e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007832:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007836:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800783a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800783e:	f083 0320 	eor.w	r3, r3, #32
 8007842:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	441a      	add	r2, r3
 8007850:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007854:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007858:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800785c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007864:	b29b      	uxth	r3, r3
 8007866:	8013      	strh	r3, [r2, #0]
 8007868:	e01d      	b.n	80078a6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	4413      	add	r3, r2
 8007874:	881b      	ldrh	r3, [r3, #0]
 8007876:	b29b      	uxth	r3, r3
 8007878:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800787c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007880:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	441a      	add	r2, r3
 800788e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800789a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800789e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	4413      	add	r3, r2
 80078b0:	881b      	ldrh	r3, [r3, #0]
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	441a      	add	r2, r3
 80078c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80078ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078da:	b29b      	uxth	r3, r3
 80078dc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80078de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	376c      	adds	r7, #108	; 0x6c
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bc80      	pop	{r7}
 80078ea:	4770      	bx	lr

080078ec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b08d      	sub	sp, #52	; 0x34
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	7b1b      	ldrb	r3, [r3, #12]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f040 808e 	bne.w	8007a1c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	785b      	ldrb	r3, [r3, #1]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d044      	beq.n	8007992 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	4413      	add	r3, r2
 8007912:	881b      	ldrh	r3, [r3, #0]
 8007914:	81bb      	strh	r3, [r7, #12]
 8007916:	89bb      	ldrh	r3, [r7, #12]
 8007918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800791c:	2b00      	cmp	r3, #0
 800791e:	d01b      	beq.n	8007958 <USB_DeactivateEndpoint+0x6c>
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	4413      	add	r3, r2
 800792a:	881b      	ldrh	r3, [r3, #0]
 800792c:	b29b      	uxth	r3, r3
 800792e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007936:	817b      	strh	r3, [r7, #10]
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	441a      	add	r2, r3
 8007942:	897b      	ldrh	r3, [r7, #10]
 8007944:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007948:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800794c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007950:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007954:	b29b      	uxth	r3, r3
 8007956:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4413      	add	r3, r2
 8007962:	881b      	ldrh	r3, [r3, #0]
 8007964:	b29b      	uxth	r3, r3
 8007966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800796a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800796e:	813b      	strh	r3, [r7, #8]
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	441a      	add	r2, r3
 800797a:	893b      	ldrh	r3, [r7, #8]
 800797c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007980:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800798c:	b29b      	uxth	r3, r3
 800798e:	8013      	strh	r3, [r2, #0]
 8007990:	e192      	b.n	8007cb8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	881b      	ldrh	r3, [r3, #0]
 800799e:	827b      	strh	r3, [r7, #18]
 80079a0:	8a7b      	ldrh	r3, [r7, #18]
 80079a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d01b      	beq.n	80079e2 <USB_DeactivateEndpoint+0xf6>
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4413      	add	r3, r2
 80079b4:	881b      	ldrh	r3, [r3, #0]
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c0:	823b      	strh	r3, [r7, #16]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	441a      	add	r2, r3
 80079cc:	8a3b      	ldrh	r3, [r7, #16]
 80079ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079de:	b29b      	uxth	r3, r3
 80079e0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4413      	add	r3, r2
 80079ec:	881b      	ldrh	r3, [r3, #0]
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079f8:	81fb      	strh	r3, [r7, #14]
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	441a      	add	r2, r3
 8007a04:	89fb      	ldrh	r3, [r7, #14]
 8007a06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	8013      	strh	r3, [r2, #0]
 8007a1a:	e14d      	b.n	8007cb8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	785b      	ldrb	r3, [r3, #1]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f040 80a5 	bne.w	8007b70 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	4413      	add	r3, r2
 8007a30:	881b      	ldrh	r3, [r3, #0]
 8007a32:	843b      	strh	r3, [r7, #32]
 8007a34:	8c3b      	ldrh	r3, [r7, #32]
 8007a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d01b      	beq.n	8007a76 <USB_DeactivateEndpoint+0x18a>
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	4413      	add	r3, r2
 8007a48:	881b      	ldrh	r3, [r3, #0]
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a54:	83fb      	strh	r3, [r7, #30]
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	441a      	add	r2, r3
 8007a60:	8bfb      	ldrh	r3, [r7, #30]
 8007a62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	881b      	ldrh	r3, [r3, #0]
 8007a82:	83bb      	strh	r3, [r7, #28]
 8007a84:	8bbb      	ldrh	r3, [r7, #28]
 8007a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d01b      	beq.n	8007ac6 <USB_DeactivateEndpoint+0x1da>
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4413      	add	r3, r2
 8007a98:	881b      	ldrh	r3, [r3, #0]
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aa4:	837b      	strh	r3, [r7, #26]
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	441a      	add	r2, r3
 8007ab0:	8b7b      	ldrh	r3, [r7, #26]
 8007ab2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ab6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007abe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4413      	add	r3, r2
 8007ad0:	881b      	ldrh	r3, [r3, #0]
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007adc:	833b      	strh	r3, [r7, #24]
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	441a      	add	r2, r3
 8007ae8:	8b3b      	ldrh	r3, [r7, #24]
 8007aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007af6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	881b      	ldrh	r3, [r3, #0]
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b14:	82fb      	strh	r3, [r7, #22]
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	441a      	add	r2, r3
 8007b20:	8afb      	ldrh	r3, [r7, #22]
 8007b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b4c:	82bb      	strh	r3, [r7, #20]
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	441a      	add	r2, r3
 8007b58:	8abb      	ldrh	r3, [r7, #20]
 8007b5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	8013      	strh	r3, [r2, #0]
 8007b6e:	e0a3      	b.n	8007cb8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	4413      	add	r3, r2
 8007b7a:	881b      	ldrh	r3, [r3, #0]
 8007b7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007b7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d01b      	beq.n	8007bc0 <USB_DeactivateEndpoint+0x2d4>
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	881b      	ldrh	r3, [r3, #0]
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b9e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	441a      	add	r2, r3
 8007baa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007bac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4413      	add	r3, r2
 8007bca:	881b      	ldrh	r3, [r3, #0]
 8007bcc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007bce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d01b      	beq.n	8007c10 <USB_DeactivateEndpoint+0x324>
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	4413      	add	r3, r2
 8007be2:	881b      	ldrh	r3, [r3, #0]
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bee:	853b      	strh	r3, [r7, #40]	; 0x28
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	441a      	add	r2, r3
 8007bfa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007bfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4413      	add	r3, r2
 8007c1a:	881b      	ldrh	r3, [r3, #0]
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c26:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	441a      	add	r2, r3
 8007c32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c5e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	441a      	add	r2, r3
 8007c6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4413      	add	r3, r2
 8007c8a:	881b      	ldrh	r3, [r3, #0]
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c96:	847b      	strh	r3, [r7, #34]	; 0x22
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	441a      	add	r2, r3
 8007ca2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007ca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3734      	adds	r7, #52	; 0x34
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bc80      	pop	{r7}
 8007cc2:	4770      	bx	lr

08007cc4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b0c4      	sub	sp, #272	; 0x110
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	1d3b      	adds	r3, r7, #4
 8007ccc:	6018      	str	r0, [r3, #0]
 8007cce:	463b      	mov	r3, r7
 8007cd0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007cd2:	463b      	mov	r3, r7
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	785b      	ldrb	r3, [r3, #1]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	f040 8557 	bne.w	800878c <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007cde:	463b      	mov	r3, r7
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	699a      	ldr	r2, [r3, #24]
 8007ce4:	463b      	mov	r3, r7
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d905      	bls.n	8007cfa <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8007cee:	463b      	mov	r3, r7
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007cf8:	e004      	b.n	8007d04 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007cfa:	463b      	mov	r3, r7
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007d04:	463b      	mov	r3, r7
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	7b1b      	ldrb	r3, [r3, #12]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d12c      	bne.n	8007d68 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007d0e:	463b      	mov	r3, r7
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	6959      	ldr	r1, [r3, #20]
 8007d14:	463b      	mov	r3, r7
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	88da      	ldrh	r2, [r3, #6]
 8007d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	1d38      	adds	r0, r7, #4
 8007d22:	6800      	ldr	r0, [r0, #0]
 8007d24:	f001 fa2c 	bl	8009180 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007d28:	1d3b      	adds	r3, r7, #4
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	617b      	str	r3, [r7, #20]
 8007d2e:	1d3b      	adds	r3, r7, #4
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	461a      	mov	r2, r3
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	617b      	str	r3, [r7, #20]
 8007d40:	463b      	mov	r3, r7
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	011a      	lsls	r2, r3, #4
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007d50:	f107 0310 	add.w	r3, r7, #16
 8007d54:	601a      	str	r2, [r3, #0]
 8007d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	f107 0310 	add.w	r3, r7, #16
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	801a      	strh	r2, [r3, #0]
 8007d64:	f000 bcdd 	b.w	8008722 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007d68:	463b      	mov	r3, r7
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	78db      	ldrb	r3, [r3, #3]
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	f040 8347 	bne.w	8008402 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007d74:	463b      	mov	r3, r7
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6a1a      	ldr	r2, [r3, #32]
 8007d7a:	463b      	mov	r3, r7
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	f240 82eb 	bls.w	800835c <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007d86:	1d3b      	adds	r3, r7, #4
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	463b      	mov	r3, r7
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	4413      	add	r3, r2
 8007d94:	881b      	ldrh	r3, [r3, #0]
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007da0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8007da4:	1d3b      	adds	r3, r7, #4
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	463b      	mov	r3, r7
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	441a      	add	r2, r3
 8007db2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007db6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dbe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007dca:	463b      	mov	r3, r7
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	6a1a      	ldr	r2, [r3, #32]
 8007dd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dd4:	1ad2      	subs	r2, r2, r3
 8007dd6:	463b      	mov	r3, r7
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007ddc:	1d3b      	adds	r3, r7, #4
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	463b      	mov	r3, r7
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4413      	add	r3, r2
 8007dea:	881b      	ldrh	r3, [r3, #0]
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 8159 	beq.w	80080aa <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007df8:	1d3b      	adds	r3, r7, #4
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8007dfe:	463b      	mov	r3, r7
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	785b      	ldrb	r3, [r3, #1]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d164      	bne.n	8007ed2 <USB_EPStartXfer+0x20e>
 8007e08:	1d3b      	adds	r3, r7, #4
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e0e:	1d3b      	adds	r3, r7, #4
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	461a      	mov	r2, r3
 8007e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1c:	4413      	add	r3, r2
 8007e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e20:	463b      	mov	r3, r7
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	011a      	lsls	r2, r3, #4
 8007e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d112      	bne.n	8007e60 <USB_EPStartXfer+0x19c>
 8007e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e48:	801a      	strh	r2, [r3, #0]
 8007e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4c:	881b      	ldrh	r3, [r3, #0]
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e58:	b29a      	uxth	r2, r3
 8007e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5c:	801a      	strh	r2, [r3, #0]
 8007e5e:	e054      	b.n	8007f0a <USB_EPStartXfer+0x246>
 8007e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e64:	2b3e      	cmp	r3, #62	; 0x3e
 8007e66:	d817      	bhi.n	8007e98 <USB_EPStartXfer+0x1d4>
 8007e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e6c:	085b      	lsrs	r3, r3, #1
 8007e6e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e76:	f003 0301 	and.w	r3, r3, #1
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d004      	beq.n	8007e88 <USB_EPStartXfer+0x1c4>
 8007e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e82:	3301      	adds	r3, #1
 8007e84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	029b      	lsls	r3, r3, #10
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e94:	801a      	strh	r2, [r3, #0]
 8007e96:	e038      	b.n	8007f0a <USB_EPStartXfer+0x246>
 8007e98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e9c:	095b      	lsrs	r3, r3, #5
 8007e9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ea6:	f003 031f 	and.w	r3, r3, #31
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d104      	bne.n	8007eb8 <USB_EPStartXfer+0x1f4>
 8007eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	029b      	lsls	r3, r3, #10
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ec6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ece:	801a      	strh	r2, [r3, #0]
 8007ed0:	e01b      	b.n	8007f0a <USB_EPStartXfer+0x246>
 8007ed2:	463b      	mov	r3, r7
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	785b      	ldrb	r3, [r3, #1]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d116      	bne.n	8007f0a <USB_EPStartXfer+0x246>
 8007edc:	1d3b      	adds	r3, r7, #4
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eea:	4413      	add	r3, r2
 8007eec:	637b      	str	r3, [r7, #52]	; 0x34
 8007eee:	463b      	mov	r3, r7
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	011a      	lsls	r2, r3, #4
 8007ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef8:	4413      	add	r3, r2
 8007efa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007efe:	633b      	str	r3, [r7, #48]	; 0x30
 8007f00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f08:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007f0a:	463b      	mov	r3, r7
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	895b      	ldrh	r3, [r3, #10]
 8007f10:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f14:	463b      	mov	r3, r7
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6959      	ldr	r1, [r3, #20]
 8007f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007f24:	1d38      	adds	r0, r7, #4
 8007f26:	6800      	ldr	r0, [r0, #0]
 8007f28:	f001 f92a 	bl	8009180 <USB_WritePMA>
            ep->xfer_buff += len;
 8007f2c:	463b      	mov	r3, r7
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	695a      	ldr	r2, [r3, #20]
 8007f32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f36:	441a      	add	r2, r3
 8007f38:	463b      	mov	r3, r7
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007f3e:	463b      	mov	r3, r7
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	6a1a      	ldr	r2, [r3, #32]
 8007f44:	463b      	mov	r3, r7
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d909      	bls.n	8007f62 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8007f4e:	463b      	mov	r3, r7
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	6a1a      	ldr	r2, [r3, #32]
 8007f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f58:	1ad2      	subs	r2, r2, r3
 8007f5a:	463b      	mov	r3, r7
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	621a      	str	r2, [r3, #32]
 8007f60:	e008      	b.n	8007f74 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8007f62:	463b      	mov	r3, r7
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6a1b      	ldr	r3, [r3, #32]
 8007f68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8007f6c:	463b      	mov	r3, r7
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2200      	movs	r2, #0
 8007f72:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f74:	463b      	mov	r3, r7
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	785b      	ldrb	r3, [r3, #1]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d164      	bne.n	8008048 <USB_EPStartXfer+0x384>
 8007f7e:	1d3b      	adds	r3, r7, #4
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	61fb      	str	r3, [r7, #28]
 8007f84:	1d3b      	adds	r3, r7, #4
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	461a      	mov	r2, r3
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	4413      	add	r3, r2
 8007f94:	61fb      	str	r3, [r7, #28]
 8007f96:	463b      	mov	r3, r7
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	011a      	lsls	r2, r3, #4
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007fa6:	61bb      	str	r3, [r7, #24]
 8007fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d112      	bne.n	8007fd6 <USB_EPStartXfer+0x312>
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	881b      	ldrh	r3, [r3, #0]
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	801a      	strh	r2, [r3, #0]
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	881b      	ldrh	r3, [r3, #0]
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	801a      	strh	r2, [r3, #0]
 8007fd4:	e057      	b.n	8008086 <USB_EPStartXfer+0x3c2>
 8007fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fda:	2b3e      	cmp	r3, #62	; 0x3e
 8007fdc:	d817      	bhi.n	800800e <USB_EPStartXfer+0x34a>
 8007fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fe2:	085b      	lsrs	r3, r3, #1
 8007fe4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007fe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fec:	f003 0301 	and.w	r3, r3, #1
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d004      	beq.n	8007ffe <USB_EPStartXfer+0x33a>
 8007ff4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007ffe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008002:	b29b      	uxth	r3, r3
 8008004:	029b      	lsls	r3, r3, #10
 8008006:	b29a      	uxth	r2, r3
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	801a      	strh	r2, [r3, #0]
 800800c:	e03b      	b.n	8008086 <USB_EPStartXfer+0x3c2>
 800800e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008012:	095b      	lsrs	r3, r3, #5
 8008014:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008018:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800801c:	f003 031f 	and.w	r3, r3, #31
 8008020:	2b00      	cmp	r3, #0
 8008022:	d104      	bne.n	800802e <USB_EPStartXfer+0x36a>
 8008024:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008028:	3b01      	subs	r3, #1
 800802a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800802e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008032:	b29b      	uxth	r3, r3
 8008034:	029b      	lsls	r3, r3, #10
 8008036:	b29b      	uxth	r3, r3
 8008038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800803c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008040:	b29a      	uxth	r2, r3
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	801a      	strh	r2, [r3, #0]
 8008046:	e01e      	b.n	8008086 <USB_EPStartXfer+0x3c2>
 8008048:	463b      	mov	r3, r7
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	785b      	ldrb	r3, [r3, #1]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d119      	bne.n	8008086 <USB_EPStartXfer+0x3c2>
 8008052:	1d3b      	adds	r3, r7, #4
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	627b      	str	r3, [r7, #36]	; 0x24
 8008058:	1d3b      	adds	r3, r7, #4
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008060:	b29b      	uxth	r3, r3
 8008062:	461a      	mov	r2, r3
 8008064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008066:	4413      	add	r3, r2
 8008068:	627b      	str	r3, [r7, #36]	; 0x24
 800806a:	463b      	mov	r3, r7
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	011a      	lsls	r2, r3, #4
 8008072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008074:	4413      	add	r3, r2
 8008076:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800807a:	623b      	str	r3, [r7, #32]
 800807c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008080:	b29a      	uxth	r2, r3
 8008082:	6a3b      	ldr	r3, [r7, #32]
 8008084:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008086:	463b      	mov	r3, r7
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	891b      	ldrh	r3, [r3, #8]
 800808c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008090:	463b      	mov	r3, r7
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	6959      	ldr	r1, [r3, #20]
 8008096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800809a:	b29b      	uxth	r3, r3
 800809c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80080a0:	1d38      	adds	r0, r7, #4
 80080a2:	6800      	ldr	r0, [r0, #0]
 80080a4:	f001 f86c 	bl	8009180 <USB_WritePMA>
 80080a8:	e33b      	b.n	8008722 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80080aa:	463b      	mov	r3, r7
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	785b      	ldrb	r3, [r3, #1]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d164      	bne.n	800817e <USB_EPStartXfer+0x4ba>
 80080b4:	1d3b      	adds	r3, r7, #4
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080ba:	1d3b      	adds	r3, r7, #4
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	461a      	mov	r2, r3
 80080c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080c8:	4413      	add	r3, r2
 80080ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080cc:	463b      	mov	r3, r7
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	011a      	lsls	r2, r3, #4
 80080d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080d6:	4413      	add	r3, r2
 80080d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80080dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80080de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d112      	bne.n	800810c <USB_EPStartXfer+0x448>
 80080e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080e8:	881b      	ldrh	r3, [r3, #0]
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080f4:	801a      	strh	r2, [r3, #0]
 80080f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080f8:	881b      	ldrh	r3, [r3, #0]
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008104:	b29a      	uxth	r2, r3
 8008106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008108:	801a      	strh	r2, [r3, #0]
 800810a:	e057      	b.n	80081bc <USB_EPStartXfer+0x4f8>
 800810c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008110:	2b3e      	cmp	r3, #62	; 0x3e
 8008112:	d817      	bhi.n	8008144 <USB_EPStartXfer+0x480>
 8008114:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008118:	085b      	lsrs	r3, r3, #1
 800811a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800811e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008122:	f003 0301 	and.w	r3, r3, #1
 8008126:	2b00      	cmp	r3, #0
 8008128:	d004      	beq.n	8008134 <USB_EPStartXfer+0x470>
 800812a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800812e:	3301      	adds	r3, #1
 8008130:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008138:	b29b      	uxth	r3, r3
 800813a:	029b      	lsls	r3, r3, #10
 800813c:	b29a      	uxth	r2, r3
 800813e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008140:	801a      	strh	r2, [r3, #0]
 8008142:	e03b      	b.n	80081bc <USB_EPStartXfer+0x4f8>
 8008144:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008148:	095b      	lsrs	r3, r3, #5
 800814a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800814e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008152:	f003 031f 	and.w	r3, r3, #31
 8008156:	2b00      	cmp	r3, #0
 8008158:	d104      	bne.n	8008164 <USB_EPStartXfer+0x4a0>
 800815a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800815e:	3b01      	subs	r3, #1
 8008160:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008168:	b29b      	uxth	r3, r3
 800816a:	029b      	lsls	r3, r3, #10
 800816c:	b29b      	uxth	r3, r3
 800816e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008176:	b29a      	uxth	r2, r3
 8008178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800817a:	801a      	strh	r2, [r3, #0]
 800817c:	e01e      	b.n	80081bc <USB_EPStartXfer+0x4f8>
 800817e:	463b      	mov	r3, r7
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	785b      	ldrb	r3, [r3, #1]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d119      	bne.n	80081bc <USB_EPStartXfer+0x4f8>
 8008188:	1d3b      	adds	r3, r7, #4
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	657b      	str	r3, [r7, #84]	; 0x54
 800818e:	1d3b      	adds	r3, r7, #4
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008196:	b29b      	uxth	r3, r3
 8008198:	461a      	mov	r2, r3
 800819a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800819c:	4413      	add	r3, r2
 800819e:	657b      	str	r3, [r7, #84]	; 0x54
 80081a0:	463b      	mov	r3, r7
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	011a      	lsls	r2, r3, #4
 80081a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081aa:	4413      	add	r3, r2
 80081ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80081b0:	653b      	str	r3, [r7, #80]	; 0x50
 80081b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081ba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80081bc:	463b      	mov	r3, r7
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	891b      	ldrh	r3, [r3, #8]
 80081c2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081c6:	463b      	mov	r3, r7
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	6959      	ldr	r1, [r3, #20]
 80081cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80081d6:	1d38      	adds	r0, r7, #4
 80081d8:	6800      	ldr	r0, [r0, #0]
 80081da:	f000 ffd1 	bl	8009180 <USB_WritePMA>
            ep->xfer_buff += len;
 80081de:	463b      	mov	r3, r7
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	695a      	ldr	r2, [r3, #20]
 80081e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081e8:	441a      	add	r2, r3
 80081ea:	463b      	mov	r3, r7
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80081f0:	463b      	mov	r3, r7
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	6a1a      	ldr	r2, [r3, #32]
 80081f6:	463b      	mov	r3, r7
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d909      	bls.n	8008214 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8008200:	463b      	mov	r3, r7
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6a1a      	ldr	r2, [r3, #32]
 8008206:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800820a:	1ad2      	subs	r2, r2, r3
 800820c:	463b      	mov	r3, r7
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	621a      	str	r2, [r3, #32]
 8008212:	e008      	b.n	8008226 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8008214:	463b      	mov	r3, r7
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	6a1b      	ldr	r3, [r3, #32]
 800821a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800821e:	463b      	mov	r3, r7
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2200      	movs	r2, #0
 8008224:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008226:	1d3b      	adds	r3, r7, #4
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	647b      	str	r3, [r7, #68]	; 0x44
 800822c:	463b      	mov	r3, r7
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	785b      	ldrb	r3, [r3, #1]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d164      	bne.n	8008300 <USB_EPStartXfer+0x63c>
 8008236:	1d3b      	adds	r3, r7, #4
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800823c:	1d3b      	adds	r3, r7, #4
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008244:	b29b      	uxth	r3, r3
 8008246:	461a      	mov	r2, r3
 8008248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800824a:	4413      	add	r3, r2
 800824c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800824e:	463b      	mov	r3, r7
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	011a      	lsls	r2, r3, #4
 8008256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008258:	4413      	add	r3, r2
 800825a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800825e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008260:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008264:	2b00      	cmp	r3, #0
 8008266:	d112      	bne.n	800828e <USB_EPStartXfer+0x5ca>
 8008268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826a:	881b      	ldrh	r3, [r3, #0]
 800826c:	b29b      	uxth	r3, r3
 800826e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008272:	b29a      	uxth	r2, r3
 8008274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008276:	801a      	strh	r2, [r3, #0]
 8008278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827a:	881b      	ldrh	r3, [r3, #0]
 800827c:	b29b      	uxth	r3, r3
 800827e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008286:	b29a      	uxth	r2, r3
 8008288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828a:	801a      	strh	r2, [r3, #0]
 800828c:	e054      	b.n	8008338 <USB_EPStartXfer+0x674>
 800828e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008292:	2b3e      	cmp	r3, #62	; 0x3e
 8008294:	d817      	bhi.n	80082c6 <USB_EPStartXfer+0x602>
 8008296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800829a:	085b      	lsrs	r3, r3, #1
 800829c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80082a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082a4:	f003 0301 	and.w	r3, r3, #1
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d004      	beq.n	80082b6 <USB_EPStartXfer+0x5f2>
 80082ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80082b0:	3301      	adds	r3, #1
 80082b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80082b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	029b      	lsls	r3, r3, #10
 80082be:	b29a      	uxth	r2, r3
 80082c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c2:	801a      	strh	r2, [r3, #0]
 80082c4:	e038      	b.n	8008338 <USB_EPStartXfer+0x674>
 80082c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082ca:	095b      	lsrs	r3, r3, #5
 80082cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80082d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082d4:	f003 031f 	and.w	r3, r3, #31
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d104      	bne.n	80082e6 <USB_EPStartXfer+0x622>
 80082dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80082e0:	3b01      	subs	r3, #1
 80082e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80082e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	029b      	lsls	r3, r3, #10
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fc:	801a      	strh	r2, [r3, #0]
 80082fe:	e01b      	b.n	8008338 <USB_EPStartXfer+0x674>
 8008300:	463b      	mov	r3, r7
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	785b      	ldrb	r3, [r3, #1]
 8008306:	2b01      	cmp	r3, #1
 8008308:	d116      	bne.n	8008338 <USB_EPStartXfer+0x674>
 800830a:	1d3b      	adds	r3, r7, #4
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008312:	b29b      	uxth	r3, r3
 8008314:	461a      	mov	r2, r3
 8008316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008318:	4413      	add	r3, r2
 800831a:	647b      	str	r3, [r7, #68]	; 0x44
 800831c:	463b      	mov	r3, r7
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	011a      	lsls	r2, r3, #4
 8008324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008326:	4413      	add	r3, r2
 8008328:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800832c:	643b      	str	r3, [r7, #64]	; 0x40
 800832e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008332:	b29a      	uxth	r2, r3
 8008334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008336:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008338:	463b      	mov	r3, r7
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	895b      	ldrh	r3, [r3, #10]
 800833e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008342:	463b      	mov	r3, r7
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	6959      	ldr	r1, [r3, #20]
 8008348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800834c:	b29b      	uxth	r3, r3
 800834e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008352:	1d38      	adds	r0, r7, #4
 8008354:	6800      	ldr	r0, [r0, #0]
 8008356:	f000 ff13 	bl	8009180 <USB_WritePMA>
 800835a:	e1e2      	b.n	8008722 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800835c:	463b      	mov	r3, r7
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008366:	1d3b      	adds	r3, r7, #4
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	463b      	mov	r3, r7
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4413      	add	r3, r2
 8008374:	881b      	ldrh	r3, [r3, #0]
 8008376:	b29b      	uxth	r3, r3
 8008378:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800837c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008380:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008384:	1d3b      	adds	r3, r7, #4
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	463b      	mov	r3, r7
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	441a      	add	r2, r3
 8008392:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008396:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800839a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800839e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80083aa:	1d3b      	adds	r3, r7, #4
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	663b      	str	r3, [r7, #96]	; 0x60
 80083b0:	1d3b      	adds	r3, r7, #4
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	461a      	mov	r2, r3
 80083bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083be:	4413      	add	r3, r2
 80083c0:	663b      	str	r3, [r7, #96]	; 0x60
 80083c2:	463b      	mov	r3, r7
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	011a      	lsls	r2, r3, #4
 80083ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083cc:	4413      	add	r3, r2
 80083ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80083d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083d8:	b29a      	uxth	r2, r3
 80083da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083dc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80083de:	463b      	mov	r3, r7
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	891b      	ldrh	r3, [r3, #8]
 80083e4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80083e8:	463b      	mov	r3, r7
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	6959      	ldr	r1, [r3, #20]
 80083ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80083f8:	1d38      	adds	r0, r7, #4
 80083fa:	6800      	ldr	r0, [r0, #0]
 80083fc:	f000 fec0 	bl	8009180 <USB_WritePMA>
 8008400:	e18f      	b.n	8008722 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008402:	1d3b      	adds	r3, r7, #4
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	463b      	mov	r3, r7
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4413      	add	r3, r2
 8008410:	881b      	ldrh	r3, [r3, #0]
 8008412:	b29b      	uxth	r3, r3
 8008414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 808f 	beq.w	800853c <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800841e:	1d3b      	adds	r3, r7, #4
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	67bb      	str	r3, [r7, #120]	; 0x78
 8008424:	463b      	mov	r3, r7
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	785b      	ldrb	r3, [r3, #1]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d164      	bne.n	80084f8 <USB_EPStartXfer+0x834>
 800842e:	1d3b      	adds	r3, r7, #4
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	673b      	str	r3, [r7, #112]	; 0x70
 8008434:	1d3b      	adds	r3, r7, #4
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800843c:	b29b      	uxth	r3, r3
 800843e:	461a      	mov	r2, r3
 8008440:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008442:	4413      	add	r3, r2
 8008444:	673b      	str	r3, [r7, #112]	; 0x70
 8008446:	463b      	mov	r3, r7
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	011a      	lsls	r2, r3, #4
 800844e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008450:	4413      	add	r3, r2
 8008452:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008456:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008458:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800845c:	2b00      	cmp	r3, #0
 800845e:	d112      	bne.n	8008486 <USB_EPStartXfer+0x7c2>
 8008460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008462:	881b      	ldrh	r3, [r3, #0]
 8008464:	b29b      	uxth	r3, r3
 8008466:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800846a:	b29a      	uxth	r2, r3
 800846c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800846e:	801a      	strh	r2, [r3, #0]
 8008470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008472:	881b      	ldrh	r3, [r3, #0]
 8008474:	b29b      	uxth	r3, r3
 8008476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800847a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800847e:	b29a      	uxth	r2, r3
 8008480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008482:	801a      	strh	r2, [r3, #0]
 8008484:	e054      	b.n	8008530 <USB_EPStartXfer+0x86c>
 8008486:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800848a:	2b3e      	cmp	r3, #62	; 0x3e
 800848c:	d817      	bhi.n	80084be <USB_EPStartXfer+0x7fa>
 800848e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008492:	085b      	lsrs	r3, r3, #1
 8008494:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008498:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800849c:	f003 0301 	and.w	r3, r3, #1
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d004      	beq.n	80084ae <USB_EPStartXfer+0x7ea>
 80084a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084a8:	3301      	adds	r3, #1
 80084aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80084ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	029b      	lsls	r3, r3, #10
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084ba:	801a      	strh	r2, [r3, #0]
 80084bc:	e038      	b.n	8008530 <USB_EPStartXfer+0x86c>
 80084be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084c2:	095b      	lsrs	r3, r3, #5
 80084c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80084c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084cc:	f003 031f 	and.w	r3, r3, #31
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d104      	bne.n	80084de <USB_EPStartXfer+0x81a>
 80084d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084d8:	3b01      	subs	r3, #1
 80084da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80084de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	029b      	lsls	r3, r3, #10
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084f4:	801a      	strh	r2, [r3, #0]
 80084f6:	e01b      	b.n	8008530 <USB_EPStartXfer+0x86c>
 80084f8:	463b      	mov	r3, r7
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	785b      	ldrb	r3, [r3, #1]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d116      	bne.n	8008530 <USB_EPStartXfer+0x86c>
 8008502:	1d3b      	adds	r3, r7, #4
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800850a:	b29b      	uxth	r3, r3
 800850c:	461a      	mov	r2, r3
 800850e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008510:	4413      	add	r3, r2
 8008512:	67bb      	str	r3, [r7, #120]	; 0x78
 8008514:	463b      	mov	r3, r7
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	011a      	lsls	r2, r3, #4
 800851c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800851e:	4413      	add	r3, r2
 8008520:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008524:	677b      	str	r3, [r7, #116]	; 0x74
 8008526:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800852a:	b29a      	uxth	r2, r3
 800852c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800852e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008530:	463b      	mov	r3, r7
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	895b      	ldrh	r3, [r3, #10]
 8008536:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800853a:	e097      	b.n	800866c <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800853c:	463b      	mov	r3, r7
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	785b      	ldrb	r3, [r3, #1]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d168      	bne.n	8008618 <USB_EPStartXfer+0x954>
 8008546:	1d3b      	adds	r3, r7, #4
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800854e:	1d3b      	adds	r3, r7, #4
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008556:	b29b      	uxth	r3, r3
 8008558:	461a      	mov	r2, r3
 800855a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800855e:	4413      	add	r3, r2
 8008560:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008564:	463b      	mov	r3, r7
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	011a      	lsls	r2, r3, #4
 800856c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008570:	4413      	add	r3, r2
 8008572:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008576:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008578:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800857c:	2b00      	cmp	r3, #0
 800857e:	d112      	bne.n	80085a6 <USB_EPStartXfer+0x8e2>
 8008580:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008582:	881b      	ldrh	r3, [r3, #0]
 8008584:	b29b      	uxth	r3, r3
 8008586:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800858a:	b29a      	uxth	r2, r3
 800858c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800858e:	801a      	strh	r2, [r3, #0]
 8008590:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008592:	881b      	ldrh	r3, [r3, #0]
 8008594:	b29b      	uxth	r3, r3
 8008596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800859a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800859e:	b29a      	uxth	r2, r3
 80085a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80085a2:	801a      	strh	r2, [r3, #0]
 80085a4:	e05d      	b.n	8008662 <USB_EPStartXfer+0x99e>
 80085a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085aa:	2b3e      	cmp	r3, #62	; 0x3e
 80085ac:	d817      	bhi.n	80085de <USB_EPStartXfer+0x91a>
 80085ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085b2:	085b      	lsrs	r3, r3, #1
 80085b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80085b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085bc:	f003 0301 	and.w	r3, r3, #1
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d004      	beq.n	80085ce <USB_EPStartXfer+0x90a>
 80085c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80085c8:	3301      	adds	r3, #1
 80085ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80085ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	029b      	lsls	r3, r3, #10
 80085d6:	b29a      	uxth	r2, r3
 80085d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80085da:	801a      	strh	r2, [r3, #0]
 80085dc:	e041      	b.n	8008662 <USB_EPStartXfer+0x99e>
 80085de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085e2:	095b      	lsrs	r3, r3, #5
 80085e4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80085e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085ec:	f003 031f 	and.w	r3, r3, #31
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d104      	bne.n	80085fe <USB_EPStartXfer+0x93a>
 80085f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80085f8:	3b01      	subs	r3, #1
 80085fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80085fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008602:	b29b      	uxth	r3, r3
 8008604:	029b      	lsls	r3, r3, #10
 8008606:	b29b      	uxth	r3, r3
 8008608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800860c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008610:	b29a      	uxth	r2, r3
 8008612:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008614:	801a      	strh	r2, [r3, #0]
 8008616:	e024      	b.n	8008662 <USB_EPStartXfer+0x99e>
 8008618:	463b      	mov	r3, r7
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	785b      	ldrb	r3, [r3, #1]
 800861e:	2b01      	cmp	r3, #1
 8008620:	d11f      	bne.n	8008662 <USB_EPStartXfer+0x99e>
 8008622:	1d3b      	adds	r3, r7, #4
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800862a:	1d3b      	adds	r3, r7, #4
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008632:	b29b      	uxth	r3, r3
 8008634:	461a      	mov	r2, r3
 8008636:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800863a:	4413      	add	r3, r2
 800863c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008640:	463b      	mov	r3, r7
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	011a      	lsls	r2, r3, #4
 8008648:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800864c:	4413      	add	r3, r2
 800864e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008652:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008656:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800865a:	b29a      	uxth	r2, r3
 800865c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008660:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008662:	463b      	mov	r3, r7
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	891b      	ldrh	r3, [r3, #8]
 8008668:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800866c:	463b      	mov	r3, r7
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	6959      	ldr	r1, [r3, #20]
 8008672:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008676:	b29b      	uxth	r3, r3
 8008678:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800867c:	1d38      	adds	r0, r7, #4
 800867e:	6800      	ldr	r0, [r0, #0]
 8008680:	f000 fd7e 	bl	8009180 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8008684:	463b      	mov	r3, r7
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	785b      	ldrb	r3, [r3, #1]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d122      	bne.n	80086d4 <USB_EPStartXfer+0xa10>
 800868e:	1d3b      	adds	r3, r7, #4
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	463b      	mov	r3, r7
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	881b      	ldrh	r3, [r3, #0]
 800869e:	b29b      	uxth	r3, r3
 80086a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086a8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80086ac:	1d3b      	adds	r3, r7, #4
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	463b      	mov	r3, r7
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	441a      	add	r2, r3
 80086ba:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80086be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	8013      	strh	r3, [r2, #0]
 80086d2:	e026      	b.n	8008722 <USB_EPStartXfer+0xa5e>
 80086d4:	463b      	mov	r3, r7
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	785b      	ldrb	r3, [r3, #1]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d121      	bne.n	8008722 <USB_EPStartXfer+0xa5e>
 80086de:	1d3b      	adds	r3, r7, #4
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	463b      	mov	r3, r7
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4413      	add	r3, r2
 80086ec:	881b      	ldrh	r3, [r3, #0]
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086f8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80086fc:	1d3b      	adds	r3, r7, #4
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	463b      	mov	r3, r7
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	441a      	add	r2, r3
 800870a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800870e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008712:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008716:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800871a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800871e:	b29b      	uxth	r3, r3
 8008720:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008722:	1d3b      	adds	r3, r7, #4
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	463b      	mov	r3, r7
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4413      	add	r3, r2
 8008730:	881b      	ldrh	r3, [r3, #0]
 8008732:	b29b      	uxth	r3, r3
 8008734:	f107 020e 	add.w	r2, r7, #14
 8008738:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800873c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008740:	8013      	strh	r3, [r2, #0]
 8008742:	f107 030e 	add.w	r3, r7, #14
 8008746:	f107 020e 	add.w	r2, r7, #14
 800874a:	8812      	ldrh	r2, [r2, #0]
 800874c:	f082 0210 	eor.w	r2, r2, #16
 8008750:	801a      	strh	r2, [r3, #0]
 8008752:	f107 030e 	add.w	r3, r7, #14
 8008756:	f107 020e 	add.w	r2, r7, #14
 800875a:	8812      	ldrh	r2, [r2, #0]
 800875c:	f082 0220 	eor.w	r2, r2, #32
 8008760:	801a      	strh	r2, [r3, #0]
 8008762:	1d3b      	adds	r3, r7, #4
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	463b      	mov	r3, r7
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	441a      	add	r2, r3
 8008770:	f107 030e 	add.w	r3, r7, #14
 8008774:	881b      	ldrh	r3, [r3, #0]
 8008776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800877a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800877e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008786:	b29b      	uxth	r3, r3
 8008788:	8013      	strh	r3, [r2, #0]
 800878a:	e3b5      	b.n	8008ef8 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800878c:	463b      	mov	r3, r7
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	7b1b      	ldrb	r3, [r3, #12]
 8008792:	2b00      	cmp	r3, #0
 8008794:	f040 8090 	bne.w	80088b8 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008798:	463b      	mov	r3, r7
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	699a      	ldr	r2, [r3, #24]
 800879e:	463b      	mov	r3, r7
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d90e      	bls.n	80087c6 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80087a8:	463b      	mov	r3, r7
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80087b2:	463b      	mov	r3, r7
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	699a      	ldr	r2, [r3, #24]
 80087b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087bc:	1ad2      	subs	r2, r2, r3
 80087be:	463b      	mov	r3, r7
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	619a      	str	r2, [r3, #24]
 80087c4:	e008      	b.n	80087d8 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80087c6:	463b      	mov	r3, r7
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80087d0:	463b      	mov	r3, r7
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2200      	movs	r2, #0
 80087d6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80087d8:	1d3b      	adds	r3, r7, #4
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80087e0:	1d3b      	adds	r3, r7, #4
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	461a      	mov	r2, r3
 80087ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80087f0:	4413      	add	r3, r2
 80087f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80087f6:	463b      	mov	r3, r7
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	011a      	lsls	r2, r3, #4
 80087fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008802:	4413      	add	r3, r2
 8008804:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008808:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800880c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008810:	2b00      	cmp	r3, #0
 8008812:	d116      	bne.n	8008842 <USB_EPStartXfer+0xb7e>
 8008814:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008818:	881b      	ldrh	r3, [r3, #0]
 800881a:	b29b      	uxth	r3, r3
 800881c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008820:	b29a      	uxth	r2, r3
 8008822:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008826:	801a      	strh	r2, [r3, #0]
 8008828:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800882c:	881b      	ldrh	r3, [r3, #0]
 800882e:	b29b      	uxth	r3, r3
 8008830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008838:	b29a      	uxth	r2, r3
 800883a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800883e:	801a      	strh	r2, [r3, #0]
 8008840:	e32c      	b.n	8008e9c <USB_EPStartXfer+0x11d8>
 8008842:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008846:	2b3e      	cmp	r3, #62	; 0x3e
 8008848:	d818      	bhi.n	800887c <USB_EPStartXfer+0xbb8>
 800884a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800884e:	085b      	lsrs	r3, r3, #1
 8008850:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008854:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008858:	f003 0301 	and.w	r3, r3, #1
 800885c:	2b00      	cmp	r3, #0
 800885e:	d004      	beq.n	800886a <USB_EPStartXfer+0xba6>
 8008860:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008864:	3301      	adds	r3, #1
 8008866:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800886a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800886e:	b29b      	uxth	r3, r3
 8008870:	029b      	lsls	r3, r3, #10
 8008872:	b29a      	uxth	r2, r3
 8008874:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008878:	801a      	strh	r2, [r3, #0]
 800887a:	e30f      	b.n	8008e9c <USB_EPStartXfer+0x11d8>
 800887c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008880:	095b      	lsrs	r3, r3, #5
 8008882:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008886:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800888a:	f003 031f 	and.w	r3, r3, #31
 800888e:	2b00      	cmp	r3, #0
 8008890:	d104      	bne.n	800889c <USB_EPStartXfer+0xbd8>
 8008892:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008896:	3b01      	subs	r3, #1
 8008898:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800889c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	029b      	lsls	r3, r3, #10
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088b4:	801a      	strh	r2, [r3, #0]
 80088b6:	e2f1      	b.n	8008e9c <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80088b8:	463b      	mov	r3, r7
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	78db      	ldrb	r3, [r3, #3]
 80088be:	2b02      	cmp	r3, #2
 80088c0:	f040 818f 	bne.w	8008be2 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80088c4:	463b      	mov	r3, r7
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	785b      	ldrb	r3, [r3, #1]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d175      	bne.n	80089ba <USB_EPStartXfer+0xcf6>
 80088ce:	1d3b      	adds	r3, r7, #4
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80088d6:	1d3b      	adds	r3, r7, #4
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088de:	b29b      	uxth	r3, r3
 80088e0:	461a      	mov	r2, r3
 80088e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80088e6:	4413      	add	r3, r2
 80088e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80088ec:	463b      	mov	r3, r7
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	011a      	lsls	r2, r3, #4
 80088f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80088f8:	4413      	add	r3, r2
 80088fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80088fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008902:	463b      	mov	r3, r7
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d116      	bne.n	800893a <USB_EPStartXfer+0xc76>
 800890c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008910:	881b      	ldrh	r3, [r3, #0]
 8008912:	b29b      	uxth	r3, r3
 8008914:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008918:	b29a      	uxth	r2, r3
 800891a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800891e:	801a      	strh	r2, [r3, #0]
 8008920:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008924:	881b      	ldrh	r3, [r3, #0]
 8008926:	b29b      	uxth	r3, r3
 8008928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800892c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008930:	b29a      	uxth	r2, r3
 8008932:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008936:	801a      	strh	r2, [r3, #0]
 8008938:	e065      	b.n	8008a06 <USB_EPStartXfer+0xd42>
 800893a:	463b      	mov	r3, r7
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	2b3e      	cmp	r3, #62	; 0x3e
 8008942:	d81a      	bhi.n	800897a <USB_EPStartXfer+0xcb6>
 8008944:	463b      	mov	r3, r7
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	691b      	ldr	r3, [r3, #16]
 800894a:	085b      	lsrs	r3, r3, #1
 800894c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008950:	463b      	mov	r3, r7
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	691b      	ldr	r3, [r3, #16]
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	2b00      	cmp	r3, #0
 800895c:	d004      	beq.n	8008968 <USB_EPStartXfer+0xca4>
 800895e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008962:	3301      	adds	r3, #1
 8008964:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008968:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800896c:	b29b      	uxth	r3, r3
 800896e:	029b      	lsls	r3, r3, #10
 8008970:	b29a      	uxth	r2, r3
 8008972:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008976:	801a      	strh	r2, [r3, #0]
 8008978:	e045      	b.n	8008a06 <USB_EPStartXfer+0xd42>
 800897a:	463b      	mov	r3, r7
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	095b      	lsrs	r3, r3, #5
 8008982:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008986:	463b      	mov	r3, r7
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	691b      	ldr	r3, [r3, #16]
 800898c:	f003 031f 	and.w	r3, r3, #31
 8008990:	2b00      	cmp	r3, #0
 8008992:	d104      	bne.n	800899e <USB_EPStartXfer+0xcda>
 8008994:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008998:	3b01      	subs	r3, #1
 800899a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800899e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	029b      	lsls	r3, r3, #10
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089b6:	801a      	strh	r2, [r3, #0]
 80089b8:	e025      	b.n	8008a06 <USB_EPStartXfer+0xd42>
 80089ba:	463b      	mov	r3, r7
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	785b      	ldrb	r3, [r3, #1]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d120      	bne.n	8008a06 <USB_EPStartXfer+0xd42>
 80089c4:	1d3b      	adds	r3, r7, #4
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80089cc:	1d3b      	adds	r3, r7, #4
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	461a      	mov	r2, r3
 80089d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80089dc:	4413      	add	r3, r2
 80089de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80089e2:	463b      	mov	r3, r7
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	011a      	lsls	r2, r3, #4
 80089ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80089ee:	4413      	add	r3, r2
 80089f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80089f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80089f8:	463b      	mov	r3, r7
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a04:	801a      	strh	r2, [r3, #0]
 8008a06:	1d3b      	adds	r3, r7, #4
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008a0e:	463b      	mov	r3, r7
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	785b      	ldrb	r3, [r3, #1]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d175      	bne.n	8008b04 <USB_EPStartXfer+0xe40>
 8008a18:	1d3b      	adds	r3, r7, #4
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008a20:	1d3b      	adds	r3, r7, #4
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008a30:	4413      	add	r3, r2
 8008a32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008a36:	463b      	mov	r3, r7
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	011a      	lsls	r2, r3, #4
 8008a3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008a42:	4413      	add	r3, r2
 8008a44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008a4c:	463b      	mov	r3, r7
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d116      	bne.n	8008a84 <USB_EPStartXfer+0xdc0>
 8008a56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a5a:	881b      	ldrh	r3, [r3, #0]
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a62:	b29a      	uxth	r2, r3
 8008a64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a68:	801a      	strh	r2, [r3, #0]
 8008a6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a6e:	881b      	ldrh	r3, [r3, #0]
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a7a:	b29a      	uxth	r2, r3
 8008a7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a80:	801a      	strh	r2, [r3, #0]
 8008a82:	e061      	b.n	8008b48 <USB_EPStartXfer+0xe84>
 8008a84:	463b      	mov	r3, r7
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	2b3e      	cmp	r3, #62	; 0x3e
 8008a8c:	d81a      	bhi.n	8008ac4 <USB_EPStartXfer+0xe00>
 8008a8e:	463b      	mov	r3, r7
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	085b      	lsrs	r3, r3, #1
 8008a96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a9a:	463b      	mov	r3, r7
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	f003 0301 	and.w	r3, r3, #1
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d004      	beq.n	8008ab2 <USB_EPStartXfer+0xdee>
 8008aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aac:	3301      	adds	r3, #1
 8008aae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	029b      	lsls	r3, r3, #10
 8008aba:	b29a      	uxth	r2, r3
 8008abc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ac0:	801a      	strh	r2, [r3, #0]
 8008ac2:	e041      	b.n	8008b48 <USB_EPStartXfer+0xe84>
 8008ac4:	463b      	mov	r3, r7
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	095b      	lsrs	r3, r3, #5
 8008acc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ad0:	463b      	mov	r3, r7
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	f003 031f 	and.w	r3, r3, #31
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d104      	bne.n	8008ae8 <USB_EPStartXfer+0xe24>
 8008ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	029b      	lsls	r3, r3, #10
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b00:	801a      	strh	r2, [r3, #0]
 8008b02:	e021      	b.n	8008b48 <USB_EPStartXfer+0xe84>
 8008b04:	463b      	mov	r3, r7
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	785b      	ldrb	r3, [r3, #1]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d11c      	bne.n	8008b48 <USB_EPStartXfer+0xe84>
 8008b0e:	1d3b      	adds	r3, r7, #4
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	461a      	mov	r2, r3
 8008b1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008b1e:	4413      	add	r3, r2
 8008b20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008b24:	463b      	mov	r3, r7
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	011a      	lsls	r2, r3, #4
 8008b2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008b30:	4413      	add	r3, r2
 8008b32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008b3a:	463b      	mov	r3, r7
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	691b      	ldr	r3, [r3, #16]
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008b46:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008b48:	463b      	mov	r3, r7
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	69db      	ldr	r3, [r3, #28]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	f000 81a4 	beq.w	8008e9c <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008b54:	1d3b      	adds	r3, r7, #4
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	463b      	mov	r3, r7
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	4413      	add	r3, r2
 8008b62:	881b      	ldrh	r3, [r3, #0]
 8008b64:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008b68:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d005      	beq.n	8008b80 <USB_EPStartXfer+0xebc>
 8008b74:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d10d      	bne.n	8008b9c <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008b80:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f040 8187 	bne.w	8008e9c <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008b8e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	f040 8180 	bne.w	8008e9c <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008b9c:	1d3b      	adds	r3, r7, #4
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	463b      	mov	r3, r7
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4413      	add	r3, r2
 8008baa:	881b      	ldrh	r3, [r3, #0]
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bb6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8008bba:	1d3b      	adds	r3, r7, #4
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	463b      	mov	r3, r7
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	441a      	add	r2, r3
 8008bc8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8008bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	8013      	strh	r3, [r2, #0]
 8008be0:	e15c      	b.n	8008e9c <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008be2:	463b      	mov	r3, r7
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	78db      	ldrb	r3, [r3, #3]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	f040 8155 	bne.w	8008e98 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008bee:	463b      	mov	r3, r7
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	699a      	ldr	r2, [r3, #24]
 8008bf4:	463b      	mov	r3, r7
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d90e      	bls.n	8008c1c <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8008bfe:	463b      	mov	r3, r7
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8008c08:	463b      	mov	r3, r7
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	699a      	ldr	r2, [r3, #24]
 8008c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c12:	1ad2      	subs	r2, r2, r3
 8008c14:	463b      	mov	r3, r7
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	619a      	str	r2, [r3, #24]
 8008c1a:	e008      	b.n	8008c2e <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8008c1c:	463b      	mov	r3, r7
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8008c26:	463b      	mov	r3, r7
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008c2e:	463b      	mov	r3, r7
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	785b      	ldrb	r3, [r3, #1]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d16f      	bne.n	8008d18 <USB_EPStartXfer+0x1054>
 8008c38:	1d3b      	adds	r3, r7, #4
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c40:	1d3b      	adds	r3, r7, #4
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008c50:	4413      	add	r3, r2
 8008c52:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c56:	463b      	mov	r3, r7
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	011a      	lsls	r2, r3, #4
 8008c5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008c62:	4413      	add	r3, r2
 8008c64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d116      	bne.n	8008ca2 <USB_EPStartXfer+0xfde>
 8008c74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008c78:	881b      	ldrh	r3, [r3, #0]
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c80:	b29a      	uxth	r2, r3
 8008c82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008c86:	801a      	strh	r2, [r3, #0]
 8008c88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008c8c:	881b      	ldrh	r3, [r3, #0]
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c98:	b29a      	uxth	r2, r3
 8008c9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008c9e:	801a      	strh	r2, [r3, #0]
 8008ca0:	e05f      	b.n	8008d62 <USB_EPStartXfer+0x109e>
 8008ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ca6:	2b3e      	cmp	r3, #62	; 0x3e
 8008ca8:	d818      	bhi.n	8008cdc <USB_EPStartXfer+0x1018>
 8008caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cae:	085b      	lsrs	r3, r3, #1
 8008cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cb8:	f003 0301 	and.w	r3, r3, #1
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d004      	beq.n	8008cca <USB_EPStartXfer+0x1006>
 8008cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	029b      	lsls	r3, r3, #10
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008cd8:	801a      	strh	r2, [r3, #0]
 8008cda:	e042      	b.n	8008d62 <USB_EPStartXfer+0x109e>
 8008cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ce0:	095b      	lsrs	r3, r3, #5
 8008ce2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cea:	f003 031f 	and.w	r3, r3, #31
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d104      	bne.n	8008cfc <USB_EPStartXfer+0x1038>
 8008cf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	029b      	lsls	r3, r3, #10
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d0e:	b29a      	uxth	r2, r3
 8008d10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008d14:	801a      	strh	r2, [r3, #0]
 8008d16:	e024      	b.n	8008d62 <USB_EPStartXfer+0x109e>
 8008d18:	463b      	mov	r3, r7
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	785b      	ldrb	r3, [r3, #1]
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d11f      	bne.n	8008d62 <USB_EPStartXfer+0x109e>
 8008d22:	1d3b      	adds	r3, r7, #4
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d2a:	1d3b      	adds	r3, r7, #4
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	461a      	mov	r2, r3
 8008d36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d3a:	4413      	add	r3, r2
 8008d3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d40:	463b      	mov	r3, r7
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	011a      	lsls	r2, r3, #4
 8008d48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d4c:	4413      	add	r3, r2
 8008d4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d5a:	b29a      	uxth	r2, r3
 8008d5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d60:	801a      	strh	r2, [r3, #0]
 8008d62:	1d3b      	adds	r3, r7, #4
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d6a:	463b      	mov	r3, r7
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	785b      	ldrb	r3, [r3, #1]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d16f      	bne.n	8008e54 <USB_EPStartXfer+0x1190>
 8008d74:	1d3b      	adds	r3, r7, #4
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d7c:	1d3b      	adds	r3, r7, #4
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	461a      	mov	r2, r3
 8008d88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d92:	463b      	mov	r3, r7
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	011a      	lsls	r2, r3, #4
 8008d9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008d9e:	4413      	add	r3, r2
 8008da0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008da4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008da8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d116      	bne.n	8008dde <USB_EPStartXfer+0x111a>
 8008db0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008db4:	881b      	ldrh	r3, [r3, #0]
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008dc2:	801a      	strh	r2, [r3, #0]
 8008dc4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008dc8:	881b      	ldrh	r3, [r3, #0]
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dd4:	b29a      	uxth	r2, r3
 8008dd6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008dda:	801a      	strh	r2, [r3, #0]
 8008ddc:	e05e      	b.n	8008e9c <USB_EPStartXfer+0x11d8>
 8008dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008de2:	2b3e      	cmp	r3, #62	; 0x3e
 8008de4:	d818      	bhi.n	8008e18 <USB_EPStartXfer+0x1154>
 8008de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008dea:	085b      	lsrs	r3, r3, #1
 8008dec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008df4:	f003 0301 	and.w	r3, r3, #1
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d004      	beq.n	8008e06 <USB_EPStartXfer+0x1142>
 8008dfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e00:	3301      	adds	r3, #1
 8008e02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	029b      	lsls	r3, r3, #10
 8008e0e:	b29a      	uxth	r2, r3
 8008e10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008e14:	801a      	strh	r2, [r3, #0]
 8008e16:	e041      	b.n	8008e9c <USB_EPStartXfer+0x11d8>
 8008e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e1c:	095b      	lsrs	r3, r3, #5
 8008e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e26:	f003 031f 	and.w	r3, r3, #31
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d104      	bne.n	8008e38 <USB_EPStartXfer+0x1174>
 8008e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e32:	3b01      	subs	r3, #1
 8008e34:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	029b      	lsls	r3, r3, #10
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e4a:	b29a      	uxth	r2, r3
 8008e4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008e50:	801a      	strh	r2, [r3, #0]
 8008e52:	e023      	b.n	8008e9c <USB_EPStartXfer+0x11d8>
 8008e54:	463b      	mov	r3, r7
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	785b      	ldrb	r3, [r3, #1]
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d11e      	bne.n	8008e9c <USB_EPStartXfer+0x11d8>
 8008e5e:	1d3b      	adds	r3, r7, #4
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	461a      	mov	r2, r3
 8008e6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e6e:	4413      	add	r3, r2
 8008e70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e74:	463b      	mov	r3, r7
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	011a      	lsls	r2, r3, #4
 8008e7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e80:	4413      	add	r3, r2
 8008e82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008e86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008e94:	801a      	strh	r2, [r3, #0]
 8008e96:	e001      	b.n	8008e9c <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e02e      	b.n	8008efa <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e9c:	1d3b      	adds	r3, r7, #4
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	463b      	mov	r3, r7
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	4413      	add	r3, r2
 8008eaa:	881b      	ldrh	r3, [r3, #0]
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eb6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008eba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008ebe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ec2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008ec6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008eca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008ece:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008ed2:	1d3b      	adds	r3, r7, #4
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	463b      	mov	r3, r7
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	441a      	add	r2, r3
 8008ee0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008ee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	785b      	ldrb	r3, [r3, #1]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d020      	beq.n	8008f58 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	4413      	add	r3, r2
 8008f20:	881b      	ldrh	r3, [r3, #0]
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f2c:	81bb      	strh	r3, [r7, #12]
 8008f2e:	89bb      	ldrh	r3, [r7, #12]
 8008f30:	f083 0310 	eor.w	r3, r3, #16
 8008f34:	81bb      	strh	r3, [r7, #12]
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	441a      	add	r2, r3
 8008f40:	89bb      	ldrh	r3, [r7, #12]
 8008f42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	8013      	strh	r3, [r2, #0]
 8008f56:	e01f      	b.n	8008f98 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	4413      	add	r3, r2
 8008f62:	881b      	ldrh	r3, [r3, #0]
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f6e:	81fb      	strh	r3, [r7, #14]
 8008f70:	89fb      	ldrh	r3, [r7, #14]
 8008f72:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008f76:	81fb      	strh	r3, [r7, #14]
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	441a      	add	r2, r3
 8008f82:	89fb      	ldrh	r3, [r7, #14]
 8008f84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3714      	adds	r7, #20
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bc80      	pop	{r7}
 8008fa2:	4770      	bx	lr

08008fa4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b087      	sub	sp, #28
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	7b1b      	ldrb	r3, [r3, #12]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	f040 809d 	bne.w	80090f2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	785b      	ldrb	r3, [r3, #1]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d04c      	beq.n	800905a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	4413      	add	r3, r2
 8008fca:	881b      	ldrh	r3, [r3, #0]
 8008fcc:	823b      	strh	r3, [r7, #16]
 8008fce:	8a3b      	ldrh	r3, [r7, #16]
 8008fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d01b      	beq.n	8009010 <USB_EPClearStall+0x6c>
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	4413      	add	r3, r2
 8008fe2:	881b      	ldrh	r3, [r3, #0]
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fee:	81fb      	strh	r3, [r7, #14]
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	441a      	add	r2, r3
 8008ffa:	89fb      	ldrh	r3, [r7, #14]
 8008ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009004:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009008:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800900c:	b29b      	uxth	r3, r3
 800900e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	78db      	ldrb	r3, [r3, #3]
 8009014:	2b01      	cmp	r3, #1
 8009016:	d06c      	beq.n	80090f2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	4413      	add	r3, r2
 8009022:	881b      	ldrh	r3, [r3, #0]
 8009024:	b29b      	uxth	r3, r3
 8009026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800902a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800902e:	81bb      	strh	r3, [r7, #12]
 8009030:	89bb      	ldrh	r3, [r7, #12]
 8009032:	f083 0320 	eor.w	r3, r3, #32
 8009036:	81bb      	strh	r3, [r7, #12]
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	441a      	add	r2, r3
 8009042:	89bb      	ldrh	r3, [r7, #12]
 8009044:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009048:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800904c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009054:	b29b      	uxth	r3, r3
 8009056:	8013      	strh	r3, [r2, #0]
 8009058:	e04b      	b.n	80090f2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	4413      	add	r3, r2
 8009064:	881b      	ldrh	r3, [r3, #0]
 8009066:	82fb      	strh	r3, [r7, #22]
 8009068:	8afb      	ldrh	r3, [r7, #22]
 800906a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800906e:	2b00      	cmp	r3, #0
 8009070:	d01b      	beq.n	80090aa <USB_EPClearStall+0x106>
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	4413      	add	r3, r2
 800907c:	881b      	ldrh	r3, [r3, #0]
 800907e:	b29b      	uxth	r3, r3
 8009080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009088:	82bb      	strh	r3, [r7, #20]
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	441a      	add	r2, r3
 8009094:	8abb      	ldrh	r3, [r7, #20]
 8009096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800909a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800909e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80090a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	4413      	add	r3, r2
 80090b4:	881b      	ldrh	r3, [r3, #0]
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090c0:	827b      	strh	r3, [r7, #18]
 80090c2:	8a7b      	ldrh	r3, [r7, #18]
 80090c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80090c8:	827b      	strh	r3, [r7, #18]
 80090ca:	8a7b      	ldrh	r3, [r7, #18]
 80090cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80090d0:	827b      	strh	r3, [r7, #18]
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	441a      	add	r2, r3
 80090dc:	8a7b      	ldrh	r3, [r7, #18]
 80090de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	371c      	adds	r7, #28
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bc80      	pop	{r7}
 80090fc:	4770      	bx	lr

080090fe <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80090fe:	b480      	push	{r7}
 8009100:	b083      	sub	sp, #12
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
 8009106:	460b      	mov	r3, r1
 8009108:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800910a:	78fb      	ldrb	r3, [r7, #3]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d103      	bne.n	8009118 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2280      	movs	r2, #128	; 0x80
 8009114:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	370c      	adds	r7, #12
 800911e:	46bd      	mov	sp, r7
 8009120:	bc80      	pop	{r7}
 8009122:	4770      	bx	lr

08009124 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	370c      	adds	r7, #12
 8009132:	46bd      	mov	sp, r7
 8009134:	bc80      	pop	{r7}
 8009136:	4770      	bx	lr

08009138 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009140:	2300      	movs	r3, #0
}
 8009142:	4618      	mov	r0, r3
 8009144:	370c      	adds	r7, #12
 8009146:	46bd      	mov	sp, r7
 8009148:	bc80      	pop	{r7}
 800914a:	4770      	bx	lr

0800914c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800914c:	b480      	push	{r7}
 800914e:	b085      	sub	sp, #20
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800915a:	b29b      	uxth	r3, r3
 800915c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800915e:	68fb      	ldr	r3, [r7, #12]
}
 8009160:	4618      	mov	r0, r3
 8009162:	3714      	adds	r7, #20
 8009164:	46bd      	mov	sp, r7
 8009166:	bc80      	pop	{r7}
 8009168:	4770      	bx	lr

0800916a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800916a:	b480      	push	{r7}
 800916c:	b083      	sub	sp, #12
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	370c      	adds	r7, #12
 800917a:	46bd      	mov	sp, r7
 800917c:	bc80      	pop	{r7}
 800917e:	4770      	bx	lr

08009180 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009180:	b480      	push	{r7}
 8009182:	b08d      	sub	sp, #52	; 0x34
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	4611      	mov	r1, r2
 800918c:	461a      	mov	r2, r3
 800918e:	460b      	mov	r3, r1
 8009190:	80fb      	strh	r3, [r7, #6]
 8009192:	4613      	mov	r3, r2
 8009194:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009196:	88bb      	ldrh	r3, [r7, #4]
 8009198:	3301      	adds	r3, #1
 800919a:	085b      	lsrs	r3, r3, #1
 800919c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80091a6:	88fb      	ldrh	r3, [r7, #6]
 80091a8:	005a      	lsls	r2, r3, #1
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	4413      	add	r3, r2
 80091ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091b2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80091b4:	6a3b      	ldr	r3, [r7, #32]
 80091b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091b8:	e01e      	b.n	80091f8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80091ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80091c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c2:	3301      	adds	r3, #1
 80091c4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80091c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	021b      	lsls	r3, r3, #8
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	461a      	mov	r2, r3
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	4313      	orrs	r3, r2
 80091d6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	b29a      	uxth	r2, r3
 80091dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091de:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80091e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e2:	3302      	adds	r3, #2
 80091e4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80091e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e8:	3302      	adds	r3, #2
 80091ea:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80091ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ee:	3301      	adds	r3, #1
 80091f0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80091f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f4:	3b01      	subs	r3, #1
 80091f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d1dd      	bne.n	80091ba <USB_WritePMA+0x3a>
  }
}
 80091fe:	bf00      	nop
 8009200:	bf00      	nop
 8009202:	3734      	adds	r7, #52	; 0x34
 8009204:	46bd      	mov	sp, r7
 8009206:	bc80      	pop	{r7}
 8009208:	4770      	bx	lr

0800920a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800920a:	b480      	push	{r7}
 800920c:	b08b      	sub	sp, #44	; 0x2c
 800920e:	af00      	add	r7, sp, #0
 8009210:	60f8      	str	r0, [r7, #12]
 8009212:	60b9      	str	r1, [r7, #8]
 8009214:	4611      	mov	r1, r2
 8009216:	461a      	mov	r2, r3
 8009218:	460b      	mov	r3, r1
 800921a:	80fb      	strh	r3, [r7, #6]
 800921c:	4613      	mov	r3, r2
 800921e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009220:	88bb      	ldrh	r3, [r7, #4]
 8009222:	085b      	lsrs	r3, r3, #1
 8009224:	b29b      	uxth	r3, r3
 8009226:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009230:	88fb      	ldrh	r3, [r7, #6]
 8009232:	005a      	lsls	r2, r3, #1
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	4413      	add	r3, r2
 8009238:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800923c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	627b      	str	r3, [r7, #36]	; 0x24
 8009242:	e01b      	b.n	800927c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009244:	6a3b      	ldr	r3, [r7, #32]
 8009246:	881b      	ldrh	r3, [r3, #0]
 8009248:	b29b      	uxth	r3, r3
 800924a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800924c:	6a3b      	ldr	r3, [r7, #32]
 800924e:	3302      	adds	r3, #2
 8009250:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	b2da      	uxtb	r2, r3
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	3301      	adds	r3, #1
 800925e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	0a1b      	lsrs	r3, r3, #8
 8009264:	b2da      	uxtb	r2, r3
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	3301      	adds	r3, #1
 800926e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009270:	6a3b      	ldr	r3, [r7, #32]
 8009272:	3302      	adds	r3, #2
 8009274:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009278:	3b01      	subs	r3, #1
 800927a:	627b      	str	r3, [r7, #36]	; 0x24
 800927c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1e0      	bne.n	8009244 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009282:	88bb      	ldrh	r3, [r7, #4]
 8009284:	f003 0301 	and.w	r3, r3, #1
 8009288:	b29b      	uxth	r3, r3
 800928a:	2b00      	cmp	r3, #0
 800928c:	d007      	beq.n	800929e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800928e:	6a3b      	ldr	r3, [r7, #32]
 8009290:	881b      	ldrh	r3, [r3, #0]
 8009292:	b29b      	uxth	r3, r3
 8009294:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	b2da      	uxtb	r2, r3
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	701a      	strb	r2, [r3, #0]
  }
}
 800929e:	bf00      	nop
 80092a0:	372c      	adds	r7, #44	; 0x2c
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bc80      	pop	{r7}
 80092a6:	4770      	bx	lr

080092a8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	460b      	mov	r3, r1
 80092b2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80092b4:	2300      	movs	r3, #0
 80092b6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	7c1b      	ldrb	r3, [r3, #16]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d115      	bne.n	80092ec <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80092c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092c4:	2202      	movs	r2, #2
 80092c6:	2181      	movs	r1, #129	; 0x81
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f001 fe8a 	bl	800afe2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2201      	movs	r2, #1
 80092d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80092d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092d8:	2202      	movs	r2, #2
 80092da:	2101      	movs	r1, #1
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f001 fe80 	bl	800afe2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2201      	movs	r2, #1
 80092e6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80092ea:	e012      	b.n	8009312 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80092ec:	2340      	movs	r3, #64	; 0x40
 80092ee:	2202      	movs	r2, #2
 80092f0:	2181      	movs	r1, #129	; 0x81
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f001 fe75 	bl	800afe2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80092fe:	2340      	movs	r3, #64	; 0x40
 8009300:	2202      	movs	r2, #2
 8009302:	2101      	movs	r1, #1
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f001 fe6c 	bl	800afe2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2201      	movs	r2, #1
 800930e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009312:	2308      	movs	r3, #8
 8009314:	2203      	movs	r2, #3
 8009316:	2182      	movs	r1, #130	; 0x82
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f001 fe62 	bl	800afe2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2201      	movs	r2, #1
 8009322:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009324:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009328:	f001 ff82 	bl	800b230 <USBD_static_malloc>
 800932c:	4602      	mov	r2, r0
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800933a:	2b00      	cmp	r3, #0
 800933c:	d102      	bne.n	8009344 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800933e:	2301      	movs	r3, #1
 8009340:	73fb      	strb	r3, [r7, #15]
 8009342:	e026      	b.n	8009392 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800934a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	2200      	movs	r2, #0
 800935a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	2200      	movs	r2, #0
 8009362:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	7c1b      	ldrb	r3, [r3, #16]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d109      	bne.n	8009382 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009374:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009378:	2101      	movs	r1, #1
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f001 ff22 	bl	800b1c4 <USBD_LL_PrepareReceive>
 8009380:	e007      	b.n	8009392 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009388:	2340      	movs	r3, #64	; 0x40
 800938a:	2101      	movs	r1, #1
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f001 ff19 	bl	800b1c4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009392:	7bfb      	ldrb	r3, [r7, #15]
}
 8009394:	4618      	mov	r0, r3
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	460b      	mov	r3, r1
 80093a6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80093a8:	2300      	movs	r3, #0
 80093aa:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80093ac:	2181      	movs	r1, #129	; 0x81
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f001 fe3d 	bl	800b02e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80093ba:	2101      	movs	r1, #1
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f001 fe36 	bl	800b02e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80093ca:	2182      	movs	r1, #130	; 0x82
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f001 fe2e 	bl	800b02e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d00e      	beq.n	8009400 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093f2:	4618      	mov	r0, r3
 80093f4:	f001 ff28 	bl	800b248 <USBD_static_free>
    pdev->pClassData = NULL;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009400:	7bfb      	ldrb	r3, [r7, #15]
}
 8009402:	4618      	mov	r0, r3
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b086      	sub	sp, #24
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800941a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800941c:	2300      	movs	r3, #0
 800941e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009420:	2300      	movs	r3, #0
 8009422:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009430:	2b00      	cmp	r3, #0
 8009432:	d039      	beq.n	80094a8 <USBD_CDC_Setup+0x9e>
 8009434:	2b20      	cmp	r3, #32
 8009436:	d17f      	bne.n	8009538 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	88db      	ldrh	r3, [r3, #6]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d029      	beq.n	8009494 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	b25b      	sxtb	r3, r3
 8009446:	2b00      	cmp	r3, #0
 8009448:	da11      	bge.n	800946e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	683a      	ldr	r2, [r7, #0]
 8009454:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009456:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009458:	683a      	ldr	r2, [r7, #0]
 800945a:	88d2      	ldrh	r2, [r2, #6]
 800945c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800945e:	6939      	ldr	r1, [r7, #16]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	88db      	ldrh	r3, [r3, #6]
 8009464:	461a      	mov	r2, r3
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f001 fa09 	bl	800a87e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800946c:	e06b      	b.n	8009546 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	785a      	ldrb	r2, [r3, #1]
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	88db      	ldrh	r3, [r3, #6]
 800947c:	b2da      	uxtb	r2, r3
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009484:	6939      	ldr	r1, [r7, #16]
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	88db      	ldrh	r3, [r3, #6]
 800948a:	461a      	mov	r2, r3
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f001 fa24 	bl	800a8da <USBD_CtlPrepareRx>
      break;
 8009492:	e058      	b.n	8009546 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	683a      	ldr	r2, [r7, #0]
 800949e:	7850      	ldrb	r0, [r2, #1]
 80094a0:	2200      	movs	r2, #0
 80094a2:	6839      	ldr	r1, [r7, #0]
 80094a4:	4798      	blx	r3
      break;
 80094a6:	e04e      	b.n	8009546 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	785b      	ldrb	r3, [r3, #1]
 80094ac:	2b0b      	cmp	r3, #11
 80094ae:	d02e      	beq.n	800950e <USBD_CDC_Setup+0x104>
 80094b0:	2b0b      	cmp	r3, #11
 80094b2:	dc38      	bgt.n	8009526 <USBD_CDC_Setup+0x11c>
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d002      	beq.n	80094be <USBD_CDC_Setup+0xb4>
 80094b8:	2b0a      	cmp	r3, #10
 80094ba:	d014      	beq.n	80094e6 <USBD_CDC_Setup+0xdc>
 80094bc:	e033      	b.n	8009526 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094c4:	2b03      	cmp	r3, #3
 80094c6:	d107      	bne.n	80094d8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80094c8:	f107 030c 	add.w	r3, r7, #12
 80094cc:	2202      	movs	r2, #2
 80094ce:	4619      	mov	r1, r3
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f001 f9d4 	bl	800a87e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80094d6:	e02e      	b.n	8009536 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80094d8:	6839      	ldr	r1, [r7, #0]
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f001 f965 	bl	800a7aa <USBD_CtlError>
            ret = USBD_FAIL;
 80094e0:	2302      	movs	r3, #2
 80094e2:	75fb      	strb	r3, [r7, #23]
          break;
 80094e4:	e027      	b.n	8009536 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094ec:	2b03      	cmp	r3, #3
 80094ee:	d107      	bne.n	8009500 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80094f0:	f107 030f 	add.w	r3, r7, #15
 80094f4:	2201      	movs	r2, #1
 80094f6:	4619      	mov	r1, r3
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f001 f9c0 	bl	800a87e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80094fe:	e01a      	b.n	8009536 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009500:	6839      	ldr	r1, [r7, #0]
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f001 f951 	bl	800a7aa <USBD_CtlError>
            ret = USBD_FAIL;
 8009508:	2302      	movs	r3, #2
 800950a:	75fb      	strb	r3, [r7, #23]
          break;
 800950c:	e013      	b.n	8009536 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009514:	2b03      	cmp	r3, #3
 8009516:	d00d      	beq.n	8009534 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009518:	6839      	ldr	r1, [r7, #0]
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f001 f945 	bl	800a7aa <USBD_CtlError>
            ret = USBD_FAIL;
 8009520:	2302      	movs	r3, #2
 8009522:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009524:	e006      	b.n	8009534 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009526:	6839      	ldr	r1, [r7, #0]
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f001 f93e 	bl	800a7aa <USBD_CtlError>
          ret = USBD_FAIL;
 800952e:	2302      	movs	r3, #2
 8009530:	75fb      	strb	r3, [r7, #23]
          break;
 8009532:	e000      	b.n	8009536 <USBD_CDC_Setup+0x12c>
          break;
 8009534:	bf00      	nop
      }
      break;
 8009536:	e006      	b.n	8009546 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009538:	6839      	ldr	r1, [r7, #0]
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f001 f935 	bl	800a7aa <USBD_CtlError>
      ret = USBD_FAIL;
 8009540:	2302      	movs	r3, #2
 8009542:	75fb      	strb	r3, [r7, #23]
      break;
 8009544:	bf00      	nop
  }

  return ret;
 8009546:	7dfb      	ldrb	r3, [r7, #23]
}
 8009548:	4618      	mov	r0, r3
 800954a:	3718      	adds	r7, #24
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	460b      	mov	r3, r1
 800955a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009562:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800956a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009572:	2b00      	cmp	r3, #0
 8009574:	d03a      	beq.n	80095ec <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009576:	78fa      	ldrb	r2, [r7, #3]
 8009578:	6879      	ldr	r1, [r7, #4]
 800957a:	4613      	mov	r3, r2
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	4413      	add	r3, r2
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	440b      	add	r3, r1
 8009584:	331c      	adds	r3, #28
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d029      	beq.n	80095e0 <USBD_CDC_DataIn+0x90>
 800958c:	78fa      	ldrb	r2, [r7, #3]
 800958e:	6879      	ldr	r1, [r7, #4]
 8009590:	4613      	mov	r3, r2
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	4413      	add	r3, r2
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	440b      	add	r3, r1
 800959a:	331c      	adds	r3, #28
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	78f9      	ldrb	r1, [r7, #3]
 80095a0:	68b8      	ldr	r0, [r7, #8]
 80095a2:	460b      	mov	r3, r1
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	440b      	add	r3, r1
 80095a8:	00db      	lsls	r3, r3, #3
 80095aa:	4403      	add	r3, r0
 80095ac:	3338      	adds	r3, #56	; 0x38
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80095b4:	fb03 f301 	mul.w	r3, r3, r1
 80095b8:	1ad3      	subs	r3, r2, r3
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d110      	bne.n	80095e0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80095be:	78fa      	ldrb	r2, [r7, #3]
 80095c0:	6879      	ldr	r1, [r7, #4]
 80095c2:	4613      	mov	r3, r2
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	4413      	add	r3, r2
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	440b      	add	r3, r1
 80095cc:	331c      	adds	r3, #28
 80095ce:	2200      	movs	r2, #0
 80095d0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80095d2:	78f9      	ldrb	r1, [r7, #3]
 80095d4:	2300      	movs	r3, #0
 80095d6:	2200      	movs	r2, #0
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f001 fdd0 	bl	800b17e <USBD_LL_Transmit>
 80095de:	e003      	b.n	80095e8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80095e8:	2300      	movs	r3, #0
 80095ea:	e000      	b.n	80095ee <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80095ec:	2302      	movs	r3, #2
  }
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b084      	sub	sp, #16
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
 80095fe:	460b      	mov	r3, r1
 8009600:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009608:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800960a:	78fb      	ldrb	r3, [r7, #3]
 800960c:	4619      	mov	r1, r3
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f001 fdfb 	bl	800b20a <USBD_LL_GetRxDataSize>
 8009614:	4602      	mov	r2, r0
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009622:	2b00      	cmp	r3, #0
 8009624:	d00d      	beq.n	8009642 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800963a:	4611      	mov	r1, r2
 800963c:	4798      	blx	r3

    return USBD_OK;
 800963e:	2300      	movs	r3, #0
 8009640:	e000      	b.n	8009644 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009642:	2302      	movs	r3, #2
  }
}
 8009644:	4618      	mov	r0, r3
 8009646:	3710      	adds	r7, #16
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800965a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009662:	2b00      	cmp	r3, #0
 8009664:	d015      	beq.n	8009692 <USBD_CDC_EP0_RxReady+0x46>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800966c:	2bff      	cmp	r3, #255	; 0xff
 800966e:	d010      	beq.n	8009692 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	68fa      	ldr	r2, [r7, #12]
 800967a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800967e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009686:	b292      	uxth	r2, r2
 8009688:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	22ff      	movs	r2, #255	; 0xff
 800968e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2243      	movs	r2, #67	; 0x43
 80096a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80096aa:	4b03      	ldr	r3, [pc, #12]	; (80096b8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bc80      	pop	{r7}
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	200000a4 	.word	0x200000a4

080096bc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2243      	movs	r2, #67	; 0x43
 80096c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80096ca:	4b03      	ldr	r3, [pc, #12]	; (80096d8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	370c      	adds	r7, #12
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bc80      	pop	{r7}
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	20000060 	.word	0x20000060

080096dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2243      	movs	r2, #67	; 0x43
 80096e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80096ea:	4b03      	ldr	r3, [pc, #12]	; (80096f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bc80      	pop	{r7}
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	200000e8 	.word	0x200000e8

080096fc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	220a      	movs	r2, #10
 8009708:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800970a:	4b03      	ldr	r3, [pc, #12]	; (8009718 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800970c:	4618      	mov	r0, r3
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	bc80      	pop	{r7}
 8009714:	4770      	bx	lr
 8009716:	bf00      	nop
 8009718:	2000001c 	.word	0x2000001c

0800971c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009726:	2302      	movs	r3, #2
 8009728:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d005      	beq.n	800973c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	683a      	ldr	r2, [r7, #0]
 8009734:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009738:	2300      	movs	r3, #0
 800973a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800973c:	7bfb      	ldrb	r3, [r7, #15]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3714      	adds	r7, #20
 8009742:	46bd      	mov	sp, r7
 8009744:	bc80      	pop	{r7}
 8009746:	4770      	bx	lr

08009748 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009748:	b480      	push	{r7}
 800974a:	b087      	sub	sp, #28
 800974c:	af00      	add	r7, sp, #0
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	4613      	mov	r3, r2
 8009754:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800975c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009766:	88fa      	ldrh	r2, [r7, #6]
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	371c      	adds	r7, #28
 8009774:	46bd      	mov	sp, r7
 8009776:	bc80      	pop	{r7}
 8009778:	4770      	bx	lr

0800977a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800977a:	b480      	push	{r7}
 800977c:	b085      	sub	sp, #20
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
 8009782:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800978a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	683a      	ldr	r2, [r7, #0]
 8009790:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009794:	2300      	movs	r3, #0
}
 8009796:	4618      	mov	r0, r3
 8009798:	3714      	adds	r7, #20
 800979a:	46bd      	mov	sp, r7
 800979c:	bc80      	pop	{r7}
 800979e:	4770      	bx	lr

080097a0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d01c      	beq.n	80097f4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d115      	bne.n	80097f0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	2181      	movs	r1, #129	; 0x81
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f001 fcc9 	bl	800b17e <USBD_LL_Transmit>

      return USBD_OK;
 80097ec:	2300      	movs	r3, #0
 80097ee:	e002      	b.n	80097f6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80097f0:	2301      	movs	r3, #1
 80097f2:	e000      	b.n	80097f6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80097f4:	2302      	movs	r3, #2
  }
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3710      	adds	r7, #16
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b084      	sub	sp, #16
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800980c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009814:	2b00      	cmp	r3, #0
 8009816:	d017      	beq.n	8009848 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	7c1b      	ldrb	r3, [r3, #16]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d109      	bne.n	8009834 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009826:	f44f 7300 	mov.w	r3, #512	; 0x200
 800982a:	2101      	movs	r1, #1
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f001 fcc9 	bl	800b1c4 <USBD_LL_PrepareReceive>
 8009832:	e007      	b.n	8009844 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800983a:	2340      	movs	r3, #64	; 0x40
 800983c:	2101      	movs	r1, #1
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f001 fcc0 	bl	800b1c4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009844:	2300      	movs	r3, #0
 8009846:	e000      	b.n	800984a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009848:	2302      	movs	r3, #2
  }
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b084      	sub	sp, #16
 8009856:	af00      	add	r7, sp, #0
 8009858:	60f8      	str	r0, [r7, #12]
 800985a:	60b9      	str	r1, [r7, #8]
 800985c:	4613      	mov	r3, r2
 800985e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d101      	bne.n	800986a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009866:	2302      	movs	r3, #2
 8009868:	e01a      	b.n	80098a0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009870:	2b00      	cmp	r3, #0
 8009872:	d003      	beq.n	800987c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2200      	movs	r2, #0
 8009878:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d003      	beq.n	800988a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	68ba      	ldr	r2, [r7, #8]
 8009886:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2201      	movs	r2, #1
 800988e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	79fa      	ldrb	r2, [r7, #7]
 8009896:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009898:	68f8      	ldr	r0, [r7, #12]
 800989a:	f001 fb2d 	bl	800aef8 <USBD_LL_Init>

  return USBD_OK;
 800989e:	2300      	movs	r3, #0
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3710      	adds	r7, #16
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80098b2:	2300      	movs	r3, #0
 80098b4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d006      	beq.n	80098ca <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	683a      	ldr	r2, [r7, #0]
 80098c0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80098c4:	2300      	movs	r3, #0
 80098c6:	73fb      	strb	r3, [r7, #15]
 80098c8:	e001      	b.n	80098ce <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80098ca:	2302      	movs	r3, #2
 80098cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80098ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3714      	adds	r7, #20
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bc80      	pop	{r7}
 80098d8:	4770      	bx	lr

080098da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b082      	sub	sp, #8
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f001 fb62 	bl	800afac <USBD_LL_Start>

  return USBD_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3708      	adds	r7, #8
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80098f2:	b480      	push	{r7}
 80098f4:	b083      	sub	sp, #12
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80098fa:	2300      	movs	r3, #0
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	bc80      	pop	{r7}
 8009904:	4770      	bx	lr

08009906 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b084      	sub	sp, #16
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
 800990e:	460b      	mov	r3, r1
 8009910:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009912:	2302      	movs	r3, #2
 8009914:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800991c:	2b00      	cmp	r3, #0
 800991e:	d00c      	beq.n	800993a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	78fa      	ldrb	r2, [r7, #3]
 800992a:	4611      	mov	r1, r2
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	4798      	blx	r3
 8009930:	4603      	mov	r3, r0
 8009932:	2b00      	cmp	r3, #0
 8009934:	d101      	bne.n	800993a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009936:	2300      	movs	r3, #0
 8009938:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800993a:	7bfb      	ldrb	r3, [r7, #15]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	460b      	mov	r3, r1
 800994e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	78fa      	ldrb	r2, [r7, #3]
 800995a:	4611      	mov	r1, r2
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	4798      	blx	r3

  return USBD_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b082      	sub	sp, #8
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
 8009972:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800997a:	6839      	ldr	r1, [r7, #0]
 800997c:	4618      	mov	r0, r3
 800997e:	f000 fed8 	bl	800a732 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2201      	movs	r2, #1
 8009986:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009990:	461a      	mov	r2, r3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800999e:	f003 031f 	and.w	r3, r3, #31
 80099a2:	2b02      	cmp	r3, #2
 80099a4:	d016      	beq.n	80099d4 <USBD_LL_SetupStage+0x6a>
 80099a6:	2b02      	cmp	r3, #2
 80099a8:	d81c      	bhi.n	80099e4 <USBD_LL_SetupStage+0x7a>
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d002      	beq.n	80099b4 <USBD_LL_SetupStage+0x4a>
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d008      	beq.n	80099c4 <USBD_LL_SetupStage+0x5a>
 80099b2:	e017      	b.n	80099e4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80099ba:	4619      	mov	r1, r3
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 f9cb 	bl	8009d58 <USBD_StdDevReq>
      break;
 80099c2:	e01a      	b.n	80099fa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80099ca:	4619      	mov	r1, r3
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 fa2d 	bl	8009e2c <USBD_StdItfReq>
      break;
 80099d2:	e012      	b.n	80099fa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80099da:	4619      	mov	r1, r3
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 fa6d 	bl	8009ebc <USBD_StdEPReq>
      break;
 80099e2:	e00a      	b.n	80099fa <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80099ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	4619      	mov	r1, r3
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f001 fb3a 	bl	800b06c <USBD_LL_StallEP>
      break;
 80099f8:	bf00      	nop
  }

  return USBD_OK;
 80099fa:	2300      	movs	r3, #0
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3708      	adds	r7, #8
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b086      	sub	sp, #24
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	607a      	str	r2, [r7, #4]
 8009a10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009a12:	7afb      	ldrb	r3, [r7, #11]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d14b      	bne.n	8009ab0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009a1e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a26:	2b03      	cmp	r3, #3
 8009a28:	d134      	bne.n	8009a94 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	68da      	ldr	r2, [r3, #12]
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	691b      	ldr	r3, [r3, #16]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d919      	bls.n	8009a6a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	68da      	ldr	r2, [r3, #12]
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	691b      	ldr	r3, [r3, #16]
 8009a3e:	1ad2      	subs	r2, r2, r3
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	68da      	ldr	r2, [r3, #12]
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d203      	bcs.n	8009a58 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	e002      	b.n	8009a5e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	461a      	mov	r2, r3
 8009a60:	6879      	ldr	r1, [r7, #4]
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	f000 ff57 	bl	800a916 <USBD_CtlContinueRx>
 8009a68:	e038      	b.n	8009adc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a70:	691b      	ldr	r3, [r3, #16]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d00a      	beq.n	8009a8c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009a7c:	2b03      	cmp	r3, #3
 8009a7e:	d105      	bne.n	8009a8c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	68f8      	ldr	r0, [r7, #12]
 8009a8a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f000 ff54 	bl	800a93a <USBD_CtlSendStatus>
 8009a92:	e023      	b.n	8009adc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a9a:	2b05      	cmp	r3, #5
 8009a9c:	d11e      	bne.n	8009adc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	68f8      	ldr	r0, [r7, #12]
 8009aaa:	f001 fadf 	bl	800b06c <USBD_LL_StallEP>
 8009aae:	e015      	b.n	8009adc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ab6:	699b      	ldr	r3, [r3, #24]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00d      	beq.n	8009ad8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009ac2:	2b03      	cmp	r3, #3
 8009ac4:	d108      	bne.n	8009ad8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009acc:	699b      	ldr	r3, [r3, #24]
 8009ace:	7afa      	ldrb	r2, [r7, #11]
 8009ad0:	4611      	mov	r1, r2
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	4798      	blx	r3
 8009ad6:	e001      	b.n	8009adc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009ad8:	2302      	movs	r3, #2
 8009ada:	e000      	b.n	8009ade <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3718      	adds	r7, #24
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}

08009ae6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b086      	sub	sp, #24
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	60f8      	str	r0, [r7, #12]
 8009aee:	460b      	mov	r3, r1
 8009af0:	607a      	str	r2, [r7, #4]
 8009af2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009af4:	7afb      	ldrb	r3, [r7, #11]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d17f      	bne.n	8009bfa <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	3314      	adds	r3, #20
 8009afe:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d15c      	bne.n	8009bc4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	68da      	ldr	r2, [r3, #12]
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d915      	bls.n	8009b42 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	68da      	ldr	r2, [r3, #12]
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	691b      	ldr	r3, [r3, #16]
 8009b1e:	1ad2      	subs	r2, r2, r3
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	6879      	ldr	r1, [r7, #4]
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f000 fec1 	bl	800a8b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b34:	2300      	movs	r3, #0
 8009b36:	2200      	movs	r2, #0
 8009b38:	2100      	movs	r1, #0
 8009b3a:	68f8      	ldr	r0, [r7, #12]
 8009b3c:	f001 fb42 	bl	800b1c4 <USBD_LL_PrepareReceive>
 8009b40:	e04e      	b.n	8009be0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	697a      	ldr	r2, [r7, #20]
 8009b48:	6912      	ldr	r2, [r2, #16]
 8009b4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b4e:	fb02 f201 	mul.w	r2, r2, r1
 8009b52:	1a9b      	subs	r3, r3, r2
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d11c      	bne.n	8009b92 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	689a      	ldr	r2, [r3, #8]
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d316      	bcc.n	8009b92 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	689a      	ldr	r2, [r3, #8]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d20f      	bcs.n	8009b92 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009b72:	2200      	movs	r2, #0
 8009b74:	2100      	movs	r1, #0
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f000 fe9d 	bl	800a8b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b84:	2300      	movs	r3, #0
 8009b86:	2200      	movs	r2, #0
 8009b88:	2100      	movs	r1, #0
 8009b8a:	68f8      	ldr	r0, [r7, #12]
 8009b8c:	f001 fb1a 	bl	800b1c4 <USBD_LL_PrepareReceive>
 8009b90:	e026      	b.n	8009be0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00a      	beq.n	8009bb4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009ba4:	2b03      	cmp	r3, #3
 8009ba6:	d105      	bne.n	8009bb4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009bb4:	2180      	movs	r1, #128	; 0x80
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f001 fa58 	bl	800b06c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f000 fecf 	bl	800a960 <USBD_CtlReceiveStatus>
 8009bc2:	e00d      	b.n	8009be0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009bca:	2b04      	cmp	r3, #4
 8009bcc:	d004      	beq.n	8009bd8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d103      	bne.n	8009be0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009bd8:	2180      	movs	r1, #128	; 0x80
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f001 fa46 	bl	800b06c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d11d      	bne.n	8009c26 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009bea:	68f8      	ldr	r0, [r7, #12]
 8009bec:	f7ff fe81 	bl	80098f2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009bf8:	e015      	b.n	8009c26 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c00:	695b      	ldr	r3, [r3, #20]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00d      	beq.n	8009c22 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009c0c:	2b03      	cmp	r3, #3
 8009c0e:	d108      	bne.n	8009c22 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c16:	695b      	ldr	r3, [r3, #20]
 8009c18:	7afa      	ldrb	r2, [r7, #11]
 8009c1a:	4611      	mov	r1, r2
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	4798      	blx	r3
 8009c20:	e001      	b.n	8009c26 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009c22:	2302      	movs	r3, #2
 8009c24:	e000      	b.n	8009c28 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009c26:	2300      	movs	r3, #0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3718      	adds	r7, #24
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c38:	2340      	movs	r3, #64	; 0x40
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	2100      	movs	r1, #0
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f001 f9cf 	bl	800afe2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2240      	movs	r2, #64	; 0x40
 8009c50:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c54:	2340      	movs	r3, #64	; 0x40
 8009c56:	2200      	movs	r2, #0
 8009c58:	2180      	movs	r1, #128	; 0x80
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f001 f9c1 	bl	800afe2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2201      	movs	r2, #1
 8009c64:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2240      	movs	r2, #64	; 0x40
 8009c6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d009      	beq.n	8009ca8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	6852      	ldr	r2, [r2, #4]
 8009ca0:	b2d2      	uxtb	r2, r2
 8009ca2:	4611      	mov	r1, r2
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	4798      	blx	r3
  }

  return USBD_OK;
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3708      	adds	r7, #8
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009cb2:	b480      	push	{r7}
 8009cb4:	b083      	sub	sp, #12
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
 8009cba:	460b      	mov	r3, r1
 8009cbc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	78fa      	ldrb	r2, [r7, #3]
 8009cc2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	370c      	adds	r7, #12
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bc80      	pop	{r7}
 8009cce:	4770      	bx	lr

08009cd0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b083      	sub	sp, #12
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2204      	movs	r2, #4
 8009ce8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	370c      	adds	r7, #12
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bc80      	pop	{r7}
 8009cf6:	4770      	bx	lr

08009cf8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d06:	2b04      	cmp	r3, #4
 8009d08:	d105      	bne.n	8009d16 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009d16:	2300      	movs	r3, #0
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	370c      	adds	r7, #12
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bc80      	pop	{r7}
 8009d20:	4770      	bx	lr

08009d22 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b082      	sub	sp, #8
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d30:	2b03      	cmp	r3, #3
 8009d32:	d10b      	bne.n	8009d4c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d3a:	69db      	ldr	r3, [r3, #28]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d005      	beq.n	8009d4c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d46:	69db      	ldr	r3, [r3, #28]
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009d4c:	2300      	movs	r3, #0
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3708      	adds	r7, #8
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
	...

08009d58 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d62:	2300      	movs	r3, #0
 8009d64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d6e:	2b40      	cmp	r3, #64	; 0x40
 8009d70:	d005      	beq.n	8009d7e <USBD_StdDevReq+0x26>
 8009d72:	2b40      	cmp	r3, #64	; 0x40
 8009d74:	d84f      	bhi.n	8009e16 <USBD_StdDevReq+0xbe>
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d009      	beq.n	8009d8e <USBD_StdDevReq+0x36>
 8009d7a:	2b20      	cmp	r3, #32
 8009d7c:	d14b      	bne.n	8009e16 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	6839      	ldr	r1, [r7, #0]
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	4798      	blx	r3
      break;
 8009d8c:	e048      	b.n	8009e20 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	785b      	ldrb	r3, [r3, #1]
 8009d92:	2b09      	cmp	r3, #9
 8009d94:	d839      	bhi.n	8009e0a <USBD_StdDevReq+0xb2>
 8009d96:	a201      	add	r2, pc, #4	; (adr r2, 8009d9c <USBD_StdDevReq+0x44>)
 8009d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9c:	08009ded 	.word	0x08009ded
 8009da0:	08009e01 	.word	0x08009e01
 8009da4:	08009e0b 	.word	0x08009e0b
 8009da8:	08009df7 	.word	0x08009df7
 8009dac:	08009e0b 	.word	0x08009e0b
 8009db0:	08009dcf 	.word	0x08009dcf
 8009db4:	08009dc5 	.word	0x08009dc5
 8009db8:	08009e0b 	.word	0x08009e0b
 8009dbc:	08009de3 	.word	0x08009de3
 8009dc0:	08009dd9 	.word	0x08009dd9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009dc4:	6839      	ldr	r1, [r7, #0]
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 f9dc 	bl	800a184 <USBD_GetDescriptor>
          break;
 8009dcc:	e022      	b.n	8009e14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009dce:	6839      	ldr	r1, [r7, #0]
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 fb3f 	bl	800a454 <USBD_SetAddress>
          break;
 8009dd6:	e01d      	b.n	8009e14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009dd8:	6839      	ldr	r1, [r7, #0]
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fb7e 	bl	800a4dc <USBD_SetConfig>
          break;
 8009de0:	e018      	b.n	8009e14 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009de2:	6839      	ldr	r1, [r7, #0]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 fc07 	bl	800a5f8 <USBD_GetConfig>
          break;
 8009dea:	e013      	b.n	8009e14 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009dec:	6839      	ldr	r1, [r7, #0]
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 fc37 	bl	800a662 <USBD_GetStatus>
          break;
 8009df4:	e00e      	b.n	8009e14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009df6:	6839      	ldr	r1, [r7, #0]
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 fc65 	bl	800a6c8 <USBD_SetFeature>
          break;
 8009dfe:	e009      	b.n	8009e14 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009e00:	6839      	ldr	r1, [r7, #0]
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 fc74 	bl	800a6f0 <USBD_ClrFeature>
          break;
 8009e08:	e004      	b.n	8009e14 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009e0a:	6839      	ldr	r1, [r7, #0]
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 fccc 	bl	800a7aa <USBD_CtlError>
          break;
 8009e12:	bf00      	nop
      }
      break;
 8009e14:	e004      	b.n	8009e20 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009e16:	6839      	ldr	r1, [r7, #0]
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 fcc6 	bl	800a7aa <USBD_CtlError>
      break;
 8009e1e:	bf00      	nop
  }

  return ret;
 8009e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop

08009e2c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e36:	2300      	movs	r3, #0
 8009e38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e42:	2b40      	cmp	r3, #64	; 0x40
 8009e44:	d005      	beq.n	8009e52 <USBD_StdItfReq+0x26>
 8009e46:	2b40      	cmp	r3, #64	; 0x40
 8009e48:	d82e      	bhi.n	8009ea8 <USBD_StdItfReq+0x7c>
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d001      	beq.n	8009e52 <USBD_StdItfReq+0x26>
 8009e4e:	2b20      	cmp	r3, #32
 8009e50:	d12a      	bne.n	8009ea8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	2b02      	cmp	r3, #2
 8009e5c:	d81d      	bhi.n	8009e9a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	889b      	ldrh	r3, [r3, #4]
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d813      	bhi.n	8009e90 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	6839      	ldr	r1, [r7, #0]
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	4798      	blx	r3
 8009e76:	4603      	mov	r3, r0
 8009e78:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	88db      	ldrh	r3, [r3, #6]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d110      	bne.n	8009ea4 <USBD_StdItfReq+0x78>
 8009e82:	7bfb      	ldrb	r3, [r7, #15]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d10d      	bne.n	8009ea4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 fd56 	bl	800a93a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009e8e:	e009      	b.n	8009ea4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009e90:	6839      	ldr	r1, [r7, #0]
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 fc89 	bl	800a7aa <USBD_CtlError>
          break;
 8009e98:	e004      	b.n	8009ea4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009e9a:	6839      	ldr	r1, [r7, #0]
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f000 fc84 	bl	800a7aa <USBD_CtlError>
          break;
 8009ea2:	e000      	b.n	8009ea6 <USBD_StdItfReq+0x7a>
          break;
 8009ea4:	bf00      	nop
      }
      break;
 8009ea6:	e004      	b.n	8009eb2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009ea8:	6839      	ldr	r1, [r7, #0]
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fc7d 	bl	800a7aa <USBD_CtlError>
      break;
 8009eb0:	bf00      	nop
  }

  return USBD_OK;
 8009eb2:	2300      	movs	r3, #0
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	889b      	ldrh	r3, [r3, #4]
 8009ece:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ed8:	2b40      	cmp	r3, #64	; 0x40
 8009eda:	d007      	beq.n	8009eec <USBD_StdEPReq+0x30>
 8009edc:	2b40      	cmp	r3, #64	; 0x40
 8009ede:	f200 8146 	bhi.w	800a16e <USBD_StdEPReq+0x2b2>
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d00a      	beq.n	8009efc <USBD_StdEPReq+0x40>
 8009ee6:	2b20      	cmp	r3, #32
 8009ee8:	f040 8141 	bne.w	800a16e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	6839      	ldr	r1, [r7, #0]
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	4798      	blx	r3
      break;
 8009efa:	e13d      	b.n	800a178 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f04:	2b20      	cmp	r3, #32
 8009f06:	d10a      	bne.n	8009f1e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	6839      	ldr	r1, [r7, #0]
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	4798      	blx	r3
 8009f16:	4603      	mov	r3, r0
 8009f18:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009f1a:	7bfb      	ldrb	r3, [r7, #15]
 8009f1c:	e12d      	b.n	800a17a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	785b      	ldrb	r3, [r3, #1]
 8009f22:	2b03      	cmp	r3, #3
 8009f24:	d007      	beq.n	8009f36 <USBD_StdEPReq+0x7a>
 8009f26:	2b03      	cmp	r3, #3
 8009f28:	f300 811b 	bgt.w	800a162 <USBD_StdEPReq+0x2a6>
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d072      	beq.n	800a016 <USBD_StdEPReq+0x15a>
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d03a      	beq.n	8009faa <USBD_StdEPReq+0xee>
 8009f34:	e115      	b.n	800a162 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f3c:	2b02      	cmp	r3, #2
 8009f3e:	d002      	beq.n	8009f46 <USBD_StdEPReq+0x8a>
 8009f40:	2b03      	cmp	r3, #3
 8009f42:	d015      	beq.n	8009f70 <USBD_StdEPReq+0xb4>
 8009f44:	e02b      	b.n	8009f9e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f46:	7bbb      	ldrb	r3, [r7, #14]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d00c      	beq.n	8009f66 <USBD_StdEPReq+0xaa>
 8009f4c:	7bbb      	ldrb	r3, [r7, #14]
 8009f4e:	2b80      	cmp	r3, #128	; 0x80
 8009f50:	d009      	beq.n	8009f66 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009f52:	7bbb      	ldrb	r3, [r7, #14]
 8009f54:	4619      	mov	r1, r3
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f001 f888 	bl	800b06c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009f5c:	2180      	movs	r1, #128	; 0x80
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f001 f884 	bl	800b06c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f64:	e020      	b.n	8009fa8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009f66:	6839      	ldr	r1, [r7, #0]
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 fc1e 	bl	800a7aa <USBD_CtlError>
              break;
 8009f6e:	e01b      	b.n	8009fa8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	885b      	ldrh	r3, [r3, #2]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d10e      	bne.n	8009f96 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009f78:	7bbb      	ldrb	r3, [r7, #14]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00b      	beq.n	8009f96 <USBD_StdEPReq+0xda>
 8009f7e:	7bbb      	ldrb	r3, [r7, #14]
 8009f80:	2b80      	cmp	r3, #128	; 0x80
 8009f82:	d008      	beq.n	8009f96 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	88db      	ldrh	r3, [r3, #6]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d104      	bne.n	8009f96 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009f8c:	7bbb      	ldrb	r3, [r7, #14]
 8009f8e:	4619      	mov	r1, r3
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f001 f86b 	bl	800b06c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 fccf 	bl	800a93a <USBD_CtlSendStatus>

              break;
 8009f9c:	e004      	b.n	8009fa8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009f9e:	6839      	ldr	r1, [r7, #0]
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 fc02 	bl	800a7aa <USBD_CtlError>
              break;
 8009fa6:	bf00      	nop
          }
          break;
 8009fa8:	e0e0      	b.n	800a16c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	d002      	beq.n	8009fba <USBD_StdEPReq+0xfe>
 8009fb4:	2b03      	cmp	r3, #3
 8009fb6:	d015      	beq.n	8009fe4 <USBD_StdEPReq+0x128>
 8009fb8:	e026      	b.n	800a008 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009fba:	7bbb      	ldrb	r3, [r7, #14]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d00c      	beq.n	8009fda <USBD_StdEPReq+0x11e>
 8009fc0:	7bbb      	ldrb	r3, [r7, #14]
 8009fc2:	2b80      	cmp	r3, #128	; 0x80
 8009fc4:	d009      	beq.n	8009fda <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009fc6:	7bbb      	ldrb	r3, [r7, #14]
 8009fc8:	4619      	mov	r1, r3
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f001 f84e 	bl	800b06c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009fd0:	2180      	movs	r1, #128	; 0x80
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f001 f84a 	bl	800b06c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009fd8:	e01c      	b.n	800a014 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009fda:	6839      	ldr	r1, [r7, #0]
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 fbe4 	bl	800a7aa <USBD_CtlError>
              break;
 8009fe2:	e017      	b.n	800a014 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	885b      	ldrh	r3, [r3, #2]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d112      	bne.n	800a012 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009fec:	7bbb      	ldrb	r3, [r7, #14]
 8009fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d004      	beq.n	800a000 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009ff6:	7bbb      	ldrb	r3, [r7, #14]
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f001 f855 	bl	800b0aa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 fc9a 	bl	800a93a <USBD_CtlSendStatus>
              }
              break;
 800a006:	e004      	b.n	800a012 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a008:	6839      	ldr	r1, [r7, #0]
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 fbcd 	bl	800a7aa <USBD_CtlError>
              break;
 800a010:	e000      	b.n	800a014 <USBD_StdEPReq+0x158>
              break;
 800a012:	bf00      	nop
          }
          break;
 800a014:	e0aa      	b.n	800a16c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a01c:	2b02      	cmp	r3, #2
 800a01e:	d002      	beq.n	800a026 <USBD_StdEPReq+0x16a>
 800a020:	2b03      	cmp	r3, #3
 800a022:	d032      	beq.n	800a08a <USBD_StdEPReq+0x1ce>
 800a024:	e097      	b.n	800a156 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a026:	7bbb      	ldrb	r3, [r7, #14]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d007      	beq.n	800a03c <USBD_StdEPReq+0x180>
 800a02c:	7bbb      	ldrb	r3, [r7, #14]
 800a02e:	2b80      	cmp	r3, #128	; 0x80
 800a030:	d004      	beq.n	800a03c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a032:	6839      	ldr	r1, [r7, #0]
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 fbb8 	bl	800a7aa <USBD_CtlError>
                break;
 800a03a:	e091      	b.n	800a160 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a03c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a040:	2b00      	cmp	r3, #0
 800a042:	da0b      	bge.n	800a05c <USBD_StdEPReq+0x1a0>
 800a044:	7bbb      	ldrb	r3, [r7, #14]
 800a046:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a04a:	4613      	mov	r3, r2
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	4413      	add	r3, r2
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	3310      	adds	r3, #16
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	4413      	add	r3, r2
 800a058:	3304      	adds	r3, #4
 800a05a:	e00b      	b.n	800a074 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a05c:	7bbb      	ldrb	r3, [r7, #14]
 800a05e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a062:	4613      	mov	r3, r2
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	4413      	add	r3, r2
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	4413      	add	r3, r2
 800a072:	3304      	adds	r3, #4
 800a074:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	2200      	movs	r2, #0
 800a07a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	2202      	movs	r2, #2
 800a080:	4619      	mov	r1, r3
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 fbfb 	bl	800a87e <USBD_CtlSendData>
              break;
 800a088:	e06a      	b.n	800a160 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a08a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	da11      	bge.n	800a0b6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a092:	7bbb      	ldrb	r3, [r7, #14]
 800a094:	f003 020f 	and.w	r2, r3, #15
 800a098:	6879      	ldr	r1, [r7, #4]
 800a09a:	4613      	mov	r3, r2
 800a09c:	009b      	lsls	r3, r3, #2
 800a09e:	4413      	add	r3, r2
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	440b      	add	r3, r1
 800a0a4:	3318      	adds	r3, #24
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d117      	bne.n	800a0dc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a0ac:	6839      	ldr	r1, [r7, #0]
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 fb7b 	bl	800a7aa <USBD_CtlError>
                  break;
 800a0b4:	e054      	b.n	800a160 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a0b6:	7bbb      	ldrb	r3, [r7, #14]
 800a0b8:	f003 020f 	and.w	r2, r3, #15
 800a0bc:	6879      	ldr	r1, [r7, #4]
 800a0be:	4613      	mov	r3, r2
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	4413      	add	r3, r2
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	440b      	add	r3, r1
 800a0c8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d104      	bne.n	800a0dc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a0d2:	6839      	ldr	r1, [r7, #0]
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 fb68 	bl	800a7aa <USBD_CtlError>
                  break;
 800a0da:	e041      	b.n	800a160 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	da0b      	bge.n	800a0fc <USBD_StdEPReq+0x240>
 800a0e4:	7bbb      	ldrb	r3, [r7, #14]
 800a0e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	4413      	add	r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	3310      	adds	r3, #16
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	3304      	adds	r3, #4
 800a0fa:	e00b      	b.n	800a114 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a0fc:	7bbb      	ldrb	r3, [r7, #14]
 800a0fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a102:	4613      	mov	r3, r2
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	4413      	add	r3, r2
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	4413      	add	r3, r2
 800a112:	3304      	adds	r3, #4
 800a114:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a116:	7bbb      	ldrb	r3, [r7, #14]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d002      	beq.n	800a122 <USBD_StdEPReq+0x266>
 800a11c:	7bbb      	ldrb	r3, [r7, #14]
 800a11e:	2b80      	cmp	r3, #128	; 0x80
 800a120:	d103      	bne.n	800a12a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	2200      	movs	r2, #0
 800a126:	601a      	str	r2, [r3, #0]
 800a128:	e00e      	b.n	800a148 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a12a:	7bbb      	ldrb	r3, [r7, #14]
 800a12c:	4619      	mov	r1, r3
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 ffda 	bl	800b0e8 <USBD_LL_IsStallEP>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d003      	beq.n	800a142 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	2201      	movs	r2, #1
 800a13e:	601a      	str	r2, [r3, #0]
 800a140:	e002      	b.n	800a148 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	2200      	movs	r2, #0
 800a146:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	2202      	movs	r2, #2
 800a14c:	4619      	mov	r1, r3
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 fb95 	bl	800a87e <USBD_CtlSendData>
              break;
 800a154:	e004      	b.n	800a160 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a156:	6839      	ldr	r1, [r7, #0]
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 fb26 	bl	800a7aa <USBD_CtlError>
              break;
 800a15e:	bf00      	nop
          }
          break;
 800a160:	e004      	b.n	800a16c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a162:	6839      	ldr	r1, [r7, #0]
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 fb20 	bl	800a7aa <USBD_CtlError>
          break;
 800a16a:	bf00      	nop
      }
      break;
 800a16c:	e004      	b.n	800a178 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a16e:	6839      	ldr	r1, [r7, #0]
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 fb1a 	bl	800a7aa <USBD_CtlError>
      break;
 800a176:	bf00      	nop
  }

  return ret;
 800a178:	7bfb      	ldrb	r3, [r7, #15]
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3710      	adds	r7, #16
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
	...

0800a184 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a18e:	2300      	movs	r3, #0
 800a190:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a192:	2300      	movs	r3, #0
 800a194:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a196:	2300      	movs	r3, #0
 800a198:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	885b      	ldrh	r3, [r3, #2]
 800a19e:	0a1b      	lsrs	r3, r3, #8
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	2b06      	cmp	r3, #6
 800a1a6:	f200 8128 	bhi.w	800a3fa <USBD_GetDescriptor+0x276>
 800a1aa:	a201      	add	r2, pc, #4	; (adr r2, 800a1b0 <USBD_GetDescriptor+0x2c>)
 800a1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b0:	0800a1cd 	.word	0x0800a1cd
 800a1b4:	0800a1e5 	.word	0x0800a1e5
 800a1b8:	0800a225 	.word	0x0800a225
 800a1bc:	0800a3fb 	.word	0x0800a3fb
 800a1c0:	0800a3fb 	.word	0x0800a3fb
 800a1c4:	0800a39b 	.word	0x0800a39b
 800a1c8:	0800a3c7 	.word	0x0800a3c7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	7c12      	ldrb	r2, [r2, #16]
 800a1d8:	f107 0108 	add.w	r1, r7, #8
 800a1dc:	4610      	mov	r0, r2
 800a1de:	4798      	blx	r3
 800a1e0:	60f8      	str	r0, [r7, #12]
      break;
 800a1e2:	e112      	b.n	800a40a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	7c1b      	ldrb	r3, [r3, #16]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d10d      	bne.n	800a208 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1f4:	f107 0208 	add.w	r2, r7, #8
 800a1f8:	4610      	mov	r0, r2
 800a1fa:	4798      	blx	r3
 800a1fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	3301      	adds	r3, #1
 800a202:	2202      	movs	r2, #2
 800a204:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a206:	e100      	b.n	800a40a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a210:	f107 0208 	add.w	r2, r7, #8
 800a214:	4610      	mov	r0, r2
 800a216:	4798      	blx	r3
 800a218:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	3301      	adds	r3, #1
 800a21e:	2202      	movs	r2, #2
 800a220:	701a      	strb	r2, [r3, #0]
      break;
 800a222:	e0f2      	b.n	800a40a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	885b      	ldrh	r3, [r3, #2]
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	2b05      	cmp	r3, #5
 800a22c:	f200 80ac 	bhi.w	800a388 <USBD_GetDescriptor+0x204>
 800a230:	a201      	add	r2, pc, #4	; (adr r2, 800a238 <USBD_GetDescriptor+0xb4>)
 800a232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a236:	bf00      	nop
 800a238:	0800a251 	.word	0x0800a251
 800a23c:	0800a285 	.word	0x0800a285
 800a240:	0800a2b9 	.word	0x0800a2b9
 800a244:	0800a2ed 	.word	0x0800a2ed
 800a248:	0800a321 	.word	0x0800a321
 800a24c:	0800a355 	.word	0x0800a355
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d00b      	beq.n	800a274 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	7c12      	ldrb	r2, [r2, #16]
 800a268:	f107 0108 	add.w	r1, r7, #8
 800a26c:	4610      	mov	r0, r2
 800a26e:	4798      	blx	r3
 800a270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a272:	e091      	b.n	800a398 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a274:	6839      	ldr	r1, [r7, #0]
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 fa97 	bl	800a7aa <USBD_CtlError>
            err++;
 800a27c:	7afb      	ldrb	r3, [r7, #11]
 800a27e:	3301      	adds	r3, #1
 800a280:	72fb      	strb	r3, [r7, #11]
          break;
 800a282:	e089      	b.n	800a398 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d00b      	beq.n	800a2a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	7c12      	ldrb	r2, [r2, #16]
 800a29c:	f107 0108 	add.w	r1, r7, #8
 800a2a0:	4610      	mov	r0, r2
 800a2a2:	4798      	blx	r3
 800a2a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2a6:	e077      	b.n	800a398 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2a8:	6839      	ldr	r1, [r7, #0]
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 fa7d 	bl	800a7aa <USBD_CtlError>
            err++;
 800a2b0:	7afb      	ldrb	r3, [r7, #11]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	72fb      	strb	r3, [r7, #11]
          break;
 800a2b6:	e06f      	b.n	800a398 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2be:	68db      	ldr	r3, [r3, #12]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d00b      	beq.n	800a2dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	7c12      	ldrb	r2, [r2, #16]
 800a2d0:	f107 0108 	add.w	r1, r7, #8
 800a2d4:	4610      	mov	r0, r2
 800a2d6:	4798      	blx	r3
 800a2d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2da:	e05d      	b.n	800a398 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2dc:	6839      	ldr	r1, [r7, #0]
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 fa63 	bl	800a7aa <USBD_CtlError>
            err++;
 800a2e4:	7afb      	ldrb	r3, [r7, #11]
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	72fb      	strb	r3, [r7, #11]
          break;
 800a2ea:	e055      	b.n	800a398 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2f2:	691b      	ldr	r3, [r3, #16]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d00b      	beq.n	800a310 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2fe:	691b      	ldr	r3, [r3, #16]
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	7c12      	ldrb	r2, [r2, #16]
 800a304:	f107 0108 	add.w	r1, r7, #8
 800a308:	4610      	mov	r0, r2
 800a30a:	4798      	blx	r3
 800a30c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a30e:	e043      	b.n	800a398 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a310:	6839      	ldr	r1, [r7, #0]
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 fa49 	bl	800a7aa <USBD_CtlError>
            err++;
 800a318:	7afb      	ldrb	r3, [r7, #11]
 800a31a:	3301      	adds	r3, #1
 800a31c:	72fb      	strb	r3, [r7, #11]
          break;
 800a31e:	e03b      	b.n	800a398 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a326:	695b      	ldr	r3, [r3, #20]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d00b      	beq.n	800a344 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a332:	695b      	ldr	r3, [r3, #20]
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	7c12      	ldrb	r2, [r2, #16]
 800a338:	f107 0108 	add.w	r1, r7, #8
 800a33c:	4610      	mov	r0, r2
 800a33e:	4798      	blx	r3
 800a340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a342:	e029      	b.n	800a398 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a344:	6839      	ldr	r1, [r7, #0]
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 fa2f 	bl	800a7aa <USBD_CtlError>
            err++;
 800a34c:	7afb      	ldrb	r3, [r7, #11]
 800a34e:	3301      	adds	r3, #1
 800a350:	72fb      	strb	r3, [r7, #11]
          break;
 800a352:	e021      	b.n	800a398 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a35a:	699b      	ldr	r3, [r3, #24]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00b      	beq.n	800a378 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a366:	699b      	ldr	r3, [r3, #24]
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	7c12      	ldrb	r2, [r2, #16]
 800a36c:	f107 0108 	add.w	r1, r7, #8
 800a370:	4610      	mov	r0, r2
 800a372:	4798      	blx	r3
 800a374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a376:	e00f      	b.n	800a398 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a378:	6839      	ldr	r1, [r7, #0]
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 fa15 	bl	800a7aa <USBD_CtlError>
            err++;
 800a380:	7afb      	ldrb	r3, [r7, #11]
 800a382:	3301      	adds	r3, #1
 800a384:	72fb      	strb	r3, [r7, #11]
          break;
 800a386:	e007      	b.n	800a398 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a388:	6839      	ldr	r1, [r7, #0]
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 fa0d 	bl	800a7aa <USBD_CtlError>
          err++;
 800a390:	7afb      	ldrb	r3, [r7, #11]
 800a392:	3301      	adds	r3, #1
 800a394:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a396:	e038      	b.n	800a40a <USBD_GetDescriptor+0x286>
 800a398:	e037      	b.n	800a40a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	7c1b      	ldrb	r3, [r3, #16]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d109      	bne.n	800a3b6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3aa:	f107 0208 	add.w	r2, r7, #8
 800a3ae:	4610      	mov	r0, r2
 800a3b0:	4798      	blx	r3
 800a3b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3b4:	e029      	b.n	800a40a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a3b6:	6839      	ldr	r1, [r7, #0]
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 f9f6 	bl	800a7aa <USBD_CtlError>
        err++;
 800a3be:	7afb      	ldrb	r3, [r7, #11]
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	72fb      	strb	r3, [r7, #11]
      break;
 800a3c4:	e021      	b.n	800a40a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	7c1b      	ldrb	r3, [r3, #16]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d10d      	bne.n	800a3ea <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3d6:	f107 0208 	add.w	r2, r7, #8
 800a3da:	4610      	mov	r0, r2
 800a3dc:	4798      	blx	r3
 800a3de:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	2207      	movs	r2, #7
 800a3e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3e8:	e00f      	b.n	800a40a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a3ea:	6839      	ldr	r1, [r7, #0]
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 f9dc 	bl	800a7aa <USBD_CtlError>
        err++;
 800a3f2:	7afb      	ldrb	r3, [r7, #11]
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	72fb      	strb	r3, [r7, #11]
      break;
 800a3f8:	e007      	b.n	800a40a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a3fa:	6839      	ldr	r1, [r7, #0]
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 f9d4 	bl	800a7aa <USBD_CtlError>
      err++;
 800a402:	7afb      	ldrb	r3, [r7, #11]
 800a404:	3301      	adds	r3, #1
 800a406:	72fb      	strb	r3, [r7, #11]
      break;
 800a408:	bf00      	nop
  }

  if (err != 0U)
 800a40a:	7afb      	ldrb	r3, [r7, #11]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d11c      	bne.n	800a44a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a410:	893b      	ldrh	r3, [r7, #8]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d011      	beq.n	800a43a <USBD_GetDescriptor+0x2b6>
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	88db      	ldrh	r3, [r3, #6]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00d      	beq.n	800a43a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	88da      	ldrh	r2, [r3, #6]
 800a422:	893b      	ldrh	r3, [r7, #8]
 800a424:	4293      	cmp	r3, r2
 800a426:	bf28      	it	cs
 800a428:	4613      	movcs	r3, r2
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a42e:	893b      	ldrh	r3, [r7, #8]
 800a430:	461a      	mov	r2, r3
 800a432:	68f9      	ldr	r1, [r7, #12]
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 fa22 	bl	800a87e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	88db      	ldrh	r3, [r3, #6]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d104      	bne.n	800a44c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 fa79 	bl	800a93a <USBD_CtlSendStatus>
 800a448:	e000      	b.n	800a44c <USBD_GetDescriptor+0x2c8>
    return;
 800a44a:	bf00      	nop
    }
  }
}
 800a44c:	3710      	adds	r7, #16
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop

0800a454 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b084      	sub	sp, #16
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	889b      	ldrh	r3, [r3, #4]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d130      	bne.n	800a4c8 <USBD_SetAddress+0x74>
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	88db      	ldrh	r3, [r3, #6]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d12c      	bne.n	800a4c8 <USBD_SetAddress+0x74>
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	885b      	ldrh	r3, [r3, #2]
 800a472:	2b7f      	cmp	r3, #127	; 0x7f
 800a474:	d828      	bhi.n	800a4c8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	885b      	ldrh	r3, [r3, #2]
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a480:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a488:	2b03      	cmp	r3, #3
 800a48a:	d104      	bne.n	800a496 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a48c:	6839      	ldr	r1, [r7, #0]
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 f98b 	bl	800a7aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a494:	e01d      	b.n	800a4d2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	7bfa      	ldrb	r2, [r7, #15]
 800a49a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a49e:	7bfb      	ldrb	r3, [r7, #15]
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 fe4c 	bl	800b140 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 fa46 	bl	800a93a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a4ae:	7bfb      	ldrb	r3, [r7, #15]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d004      	beq.n	800a4be <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2202      	movs	r2, #2
 800a4b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4bc:	e009      	b.n	800a4d2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4c6:	e004      	b.n	800a4d2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a4c8:	6839      	ldr	r1, [r7, #0]
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 f96d 	bl	800a7aa <USBD_CtlError>
  }
}
 800a4d0:	bf00      	nop
 800a4d2:	bf00      	nop
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
	...

0800a4dc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	885b      	ldrh	r3, [r3, #2]
 800a4ea:	b2da      	uxtb	r2, r3
 800a4ec:	4b41      	ldr	r3, [pc, #260]	; (800a5f4 <USBD_SetConfig+0x118>)
 800a4ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a4f0:	4b40      	ldr	r3, [pc, #256]	; (800a5f4 <USBD_SetConfig+0x118>)
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d904      	bls.n	800a502 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a4f8:	6839      	ldr	r1, [r7, #0]
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 f955 	bl	800a7aa <USBD_CtlError>
 800a500:	e075      	b.n	800a5ee <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a508:	2b02      	cmp	r3, #2
 800a50a:	d002      	beq.n	800a512 <USBD_SetConfig+0x36>
 800a50c:	2b03      	cmp	r3, #3
 800a50e:	d023      	beq.n	800a558 <USBD_SetConfig+0x7c>
 800a510:	e062      	b.n	800a5d8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a512:	4b38      	ldr	r3, [pc, #224]	; (800a5f4 <USBD_SetConfig+0x118>)
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d01a      	beq.n	800a550 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a51a:	4b36      	ldr	r3, [pc, #216]	; (800a5f4 <USBD_SetConfig+0x118>)
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	461a      	mov	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2203      	movs	r2, #3
 800a528:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a52c:	4b31      	ldr	r3, [pc, #196]	; (800a5f4 <USBD_SetConfig+0x118>)
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	4619      	mov	r1, r3
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f7ff f9e7 	bl	8009906 <USBD_SetClassConfig>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b02      	cmp	r3, #2
 800a53c:	d104      	bne.n	800a548 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a53e:	6839      	ldr	r1, [r7, #0]
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 f932 	bl	800a7aa <USBD_CtlError>
            return;
 800a546:	e052      	b.n	800a5ee <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 f9f6 	bl	800a93a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a54e:	e04e      	b.n	800a5ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 f9f2 	bl	800a93a <USBD_CtlSendStatus>
        break;
 800a556:	e04a      	b.n	800a5ee <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a558:	4b26      	ldr	r3, [pc, #152]	; (800a5f4 <USBD_SetConfig+0x118>)
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d112      	bne.n	800a586 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2202      	movs	r2, #2
 800a564:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a568:	4b22      	ldr	r3, [pc, #136]	; (800a5f4 <USBD_SetConfig+0x118>)
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	461a      	mov	r2, r3
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a572:	4b20      	ldr	r3, [pc, #128]	; (800a5f4 <USBD_SetConfig+0x118>)
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	4619      	mov	r1, r3
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f7ff f9e3 	bl	8009944 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 f9db 	bl	800a93a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a584:	e033      	b.n	800a5ee <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a586:	4b1b      	ldr	r3, [pc, #108]	; (800a5f4 <USBD_SetConfig+0x118>)
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	461a      	mov	r2, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	429a      	cmp	r2, r3
 800a592:	d01d      	beq.n	800a5d0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	4619      	mov	r1, r3
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f7ff f9d1 	bl	8009944 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a5a2:	4b14      	ldr	r3, [pc, #80]	; (800a5f4 <USBD_SetConfig+0x118>)
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a5ac:	4b11      	ldr	r3, [pc, #68]	; (800a5f4 <USBD_SetConfig+0x118>)
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f7ff f9a7 	bl	8009906 <USBD_SetClassConfig>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b02      	cmp	r3, #2
 800a5bc:	d104      	bne.n	800a5c8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a5be:	6839      	ldr	r1, [r7, #0]
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 f8f2 	bl	800a7aa <USBD_CtlError>
            return;
 800a5c6:	e012      	b.n	800a5ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f000 f9b6 	bl	800a93a <USBD_CtlSendStatus>
        break;
 800a5ce:	e00e      	b.n	800a5ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 f9b2 	bl	800a93a <USBD_CtlSendStatus>
        break;
 800a5d6:	e00a      	b.n	800a5ee <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a5d8:	6839      	ldr	r1, [r7, #0]
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f000 f8e5 	bl	800a7aa <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a5e0:	4b04      	ldr	r3, [pc, #16]	; (800a5f4 <USBD_SetConfig+0x118>)
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f7ff f9ac 	bl	8009944 <USBD_ClrClassConfig>
        break;
 800a5ec:	bf00      	nop
    }
  }
}
 800a5ee:	3708      	adds	r7, #8
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	20000278 	.word	0x20000278

0800a5f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	88db      	ldrh	r3, [r3, #6]
 800a606:	2b01      	cmp	r3, #1
 800a608:	d004      	beq.n	800a614 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a60a:	6839      	ldr	r1, [r7, #0]
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 f8cc 	bl	800a7aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a612:	e022      	b.n	800a65a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a61a:	2b02      	cmp	r3, #2
 800a61c:	dc02      	bgt.n	800a624 <USBD_GetConfig+0x2c>
 800a61e:	2b00      	cmp	r3, #0
 800a620:	dc03      	bgt.n	800a62a <USBD_GetConfig+0x32>
 800a622:	e015      	b.n	800a650 <USBD_GetConfig+0x58>
 800a624:	2b03      	cmp	r3, #3
 800a626:	d00b      	beq.n	800a640 <USBD_GetConfig+0x48>
 800a628:	e012      	b.n	800a650 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	3308      	adds	r3, #8
 800a634:	2201      	movs	r2, #1
 800a636:	4619      	mov	r1, r3
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 f920 	bl	800a87e <USBD_CtlSendData>
        break;
 800a63e:	e00c      	b.n	800a65a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	3304      	adds	r3, #4
 800a644:	2201      	movs	r2, #1
 800a646:	4619      	mov	r1, r3
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 f918 	bl	800a87e <USBD_CtlSendData>
        break;
 800a64e:	e004      	b.n	800a65a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a650:	6839      	ldr	r1, [r7, #0]
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 f8a9 	bl	800a7aa <USBD_CtlError>
        break;
 800a658:	bf00      	nop
}
 800a65a:	bf00      	nop
 800a65c:	3708      	adds	r7, #8
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a662:	b580      	push	{r7, lr}
 800a664:	b082      	sub	sp, #8
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
 800a66a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a672:	3b01      	subs	r3, #1
 800a674:	2b02      	cmp	r3, #2
 800a676:	d81e      	bhi.n	800a6b6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	88db      	ldrh	r3, [r3, #6]
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	d004      	beq.n	800a68a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a680:	6839      	ldr	r1, [r7, #0]
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 f891 	bl	800a7aa <USBD_CtlError>
        break;
 800a688:	e01a      	b.n	800a6c0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2201      	movs	r2, #1
 800a68e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a696:	2b00      	cmp	r3, #0
 800a698:	d005      	beq.n	800a6a6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	68db      	ldr	r3, [r3, #12]
 800a69e:	f043 0202 	orr.w	r2, r3, #2
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	330c      	adds	r3, #12
 800a6aa:	2202      	movs	r2, #2
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 f8e5 	bl	800a87e <USBD_CtlSendData>
      break;
 800a6b4:	e004      	b.n	800a6c0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a6b6:	6839      	ldr	r1, [r7, #0]
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 f876 	bl	800a7aa <USBD_CtlError>
      break;
 800a6be:	bf00      	nop
  }
}
 800a6c0:	bf00      	nop
 800a6c2:	3708      	adds	r7, #8
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	885b      	ldrh	r3, [r3, #2]
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d106      	bne.n	800a6e8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 f929 	bl	800a93a <USBD_CtlSendStatus>
  }
}
 800a6e8:	bf00      	nop
 800a6ea:	3708      	adds	r7, #8
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a700:	3b01      	subs	r3, #1
 800a702:	2b02      	cmp	r3, #2
 800a704:	d80b      	bhi.n	800a71e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	885b      	ldrh	r3, [r3, #2]
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d10c      	bne.n	800a728 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 f90f 	bl	800a93a <USBD_CtlSendStatus>
      }
      break;
 800a71c:	e004      	b.n	800a728 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a71e:	6839      	ldr	r1, [r7, #0]
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f000 f842 	bl	800a7aa <USBD_CtlError>
      break;
 800a726:	e000      	b.n	800a72a <USBD_ClrFeature+0x3a>
      break;
 800a728:	bf00      	nop
  }
}
 800a72a:	bf00      	nop
 800a72c:	3708      	adds	r7, #8
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a732:	b480      	push	{r7}
 800a734:	b083      	sub	sp, #12
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
 800a73a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	781a      	ldrb	r2, [r3, #0]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	785a      	ldrb	r2, [r3, #1]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	3302      	adds	r3, #2
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	b29a      	uxth	r2, r3
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	3303      	adds	r3, #3
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	021b      	lsls	r3, r3, #8
 800a75e:	b29b      	uxth	r3, r3
 800a760:	4413      	add	r3, r2
 800a762:	b29a      	uxth	r2, r3
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	3304      	adds	r3, #4
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	b29a      	uxth	r2, r3
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	3305      	adds	r3, #5
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	b29b      	uxth	r3, r3
 800a778:	021b      	lsls	r3, r3, #8
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	4413      	add	r3, r2
 800a77e:	b29a      	uxth	r2, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	3306      	adds	r3, #6
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	b29a      	uxth	r2, r3
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	3307      	adds	r3, #7
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	b29b      	uxth	r3, r3
 800a794:	021b      	lsls	r3, r3, #8
 800a796:	b29b      	uxth	r3, r3
 800a798:	4413      	add	r3, r2
 800a79a:	b29a      	uxth	r2, r3
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	80da      	strh	r2, [r3, #6]

}
 800a7a0:	bf00      	nop
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bc80      	pop	{r7}
 800a7a8:	4770      	bx	lr

0800a7aa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b082      	sub	sp, #8
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
 800a7b2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a7b4:	2180      	movs	r1, #128	; 0x80
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 fc58 	bl	800b06c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a7bc:	2100      	movs	r1, #0
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 fc54 	bl	800b06c <USBD_LL_StallEP>
}
 800a7c4:	bf00      	nop
 800a7c6:	3708      	adds	r7, #8
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b086      	sub	sp, #24
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d032      	beq.n	800a848 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	f000 f834 	bl	800a850 <USBD_GetLen>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	005b      	lsls	r3, r3, #1
 800a7f0:	b29a      	uxth	r2, r3
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a7f6:	7dfb      	ldrb	r3, [r7, #23]
 800a7f8:	1c5a      	adds	r2, r3, #1
 800a7fa:	75fa      	strb	r2, [r7, #23]
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	4413      	add	r3, r2
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	7812      	ldrb	r2, [r2, #0]
 800a806:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a808:	7dfb      	ldrb	r3, [r7, #23]
 800a80a:	1c5a      	adds	r2, r3, #1
 800a80c:	75fa      	strb	r2, [r7, #23]
 800a80e:	461a      	mov	r2, r3
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	4413      	add	r3, r2
 800a814:	2203      	movs	r2, #3
 800a816:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a818:	e012      	b.n	800a840 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	1c5a      	adds	r2, r3, #1
 800a81e:	60fa      	str	r2, [r7, #12]
 800a820:	7dfa      	ldrb	r2, [r7, #23]
 800a822:	1c51      	adds	r1, r2, #1
 800a824:	75f9      	strb	r1, [r7, #23]
 800a826:	4611      	mov	r1, r2
 800a828:	68ba      	ldr	r2, [r7, #8]
 800a82a:	440a      	add	r2, r1
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a830:	7dfb      	ldrb	r3, [r7, #23]
 800a832:	1c5a      	adds	r2, r3, #1
 800a834:	75fa      	strb	r2, [r7, #23]
 800a836:	461a      	mov	r2, r3
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	4413      	add	r3, r2
 800a83c:	2200      	movs	r2, #0
 800a83e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d1e8      	bne.n	800a81a <USBD_GetString+0x4e>
    }
  }
}
 800a848:	bf00      	nop
 800a84a:	3718      	adds	r7, #24
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a850:	b480      	push	{r7}
 800a852:	b085      	sub	sp, #20
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a858:	2300      	movs	r3, #0
 800a85a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a85c:	e005      	b.n	800a86a <USBD_GetLen+0x1a>
  {
    len++;
 800a85e:	7bfb      	ldrb	r3, [r7, #15]
 800a860:	3301      	adds	r3, #1
 800a862:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	3301      	adds	r3, #1
 800a868:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d1f5      	bne.n	800a85e <USBD_GetLen+0xe>
  }

  return len;
 800a872:	7bfb      	ldrb	r3, [r7, #15]
}
 800a874:	4618      	mov	r0, r3
 800a876:	3714      	adds	r7, #20
 800a878:	46bd      	mov	sp, r7
 800a87a:	bc80      	pop	{r7}
 800a87c:	4770      	bx	lr

0800a87e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b084      	sub	sp, #16
 800a882:	af00      	add	r7, sp, #0
 800a884:	60f8      	str	r0, [r7, #12]
 800a886:	60b9      	str	r1, [r7, #8]
 800a888:	4613      	mov	r3, r2
 800a88a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2202      	movs	r2, #2
 800a890:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a894:	88fa      	ldrh	r2, [r7, #6]
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a89a:	88fa      	ldrh	r2, [r7, #6]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8a0:	88fb      	ldrh	r3, [r7, #6]
 800a8a2:	68ba      	ldr	r2, [r7, #8]
 800a8a4:	2100      	movs	r1, #0
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f000 fc69 	bl	800b17e <USBD_LL_Transmit>

  return USBD_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b084      	sub	sp, #16
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	60f8      	str	r0, [r7, #12]
 800a8be:	60b9      	str	r1, [r7, #8]
 800a8c0:	4613      	mov	r3, r2
 800a8c2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8c4:	88fb      	ldrh	r3, [r7, #6]
 800a8c6:	68ba      	ldr	r2, [r7, #8]
 800a8c8:	2100      	movs	r1, #0
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f000 fc57 	bl	800b17e <USBD_LL_Transmit>

  return USBD_OK;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b084      	sub	sp, #16
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	60f8      	str	r0, [r7, #12]
 800a8e2:	60b9      	str	r1, [r7, #8]
 800a8e4:	4613      	mov	r3, r2
 800a8e6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2203      	movs	r2, #3
 800a8ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a8f0:	88fa      	ldrh	r2, [r7, #6]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a8f8:	88fa      	ldrh	r2, [r7, #6]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a900:	88fb      	ldrh	r3, [r7, #6]
 800a902:	68ba      	ldr	r2, [r7, #8]
 800a904:	2100      	movs	r1, #0
 800a906:	68f8      	ldr	r0, [r7, #12]
 800a908:	f000 fc5c 	bl	800b1c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3710      	adds	r7, #16
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a916:	b580      	push	{r7, lr}
 800a918:	b084      	sub	sp, #16
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	60f8      	str	r0, [r7, #12]
 800a91e:	60b9      	str	r1, [r7, #8]
 800a920:	4613      	mov	r3, r2
 800a922:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a924:	88fb      	ldrh	r3, [r7, #6]
 800a926:	68ba      	ldr	r2, [r7, #8]
 800a928:	2100      	movs	r1, #0
 800a92a:	68f8      	ldr	r0, [r7, #12]
 800a92c:	f000 fc4a 	bl	800b1c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	3710      	adds	r7, #16
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b082      	sub	sp, #8
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2204      	movs	r2, #4
 800a946:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a94a:	2300      	movs	r3, #0
 800a94c:	2200      	movs	r2, #0
 800a94e:	2100      	movs	r1, #0
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 fc14 	bl	800b17e <USBD_LL_Transmit>

  return USBD_OK;
 800a956:	2300      	movs	r3, #0
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3708      	adds	r7, #8
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2205      	movs	r2, #5
 800a96c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a970:	2300      	movs	r3, #0
 800a972:	2200      	movs	r2, #0
 800a974:	2100      	movs	r1, #0
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 fc24 	bl	800b1c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a97c:	2300      	movs	r3, #0
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3708      	adds	r7, #8
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
	...

0800a988 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a98c:	2200      	movs	r2, #0
 800a98e:	4912      	ldr	r1, [pc, #72]	; (800a9d8 <MX_USB_DEVICE_Init+0x50>)
 800a990:	4812      	ldr	r0, [pc, #72]	; (800a9dc <MX_USB_DEVICE_Init+0x54>)
 800a992:	f7fe ff5e 	bl	8009852 <USBD_Init>
 800a996:	4603      	mov	r3, r0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d001      	beq.n	800a9a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a99c:	f7f7 fe38 	bl	8002610 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a9a0:	490f      	ldr	r1, [pc, #60]	; (800a9e0 <MX_USB_DEVICE_Init+0x58>)
 800a9a2:	480e      	ldr	r0, [pc, #56]	; (800a9dc <MX_USB_DEVICE_Init+0x54>)
 800a9a4:	f7fe ff80 	bl	80098a8 <USBD_RegisterClass>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d001      	beq.n	800a9b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a9ae:	f7f7 fe2f 	bl	8002610 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a9b2:	490c      	ldr	r1, [pc, #48]	; (800a9e4 <MX_USB_DEVICE_Init+0x5c>)
 800a9b4:	4809      	ldr	r0, [pc, #36]	; (800a9dc <MX_USB_DEVICE_Init+0x54>)
 800a9b6:	f7fe feb1 	bl	800971c <USBD_CDC_RegisterInterface>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d001      	beq.n	800a9c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a9c0:	f7f7 fe26 	bl	8002610 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a9c4:	4805      	ldr	r0, [pc, #20]	; (800a9dc <MX_USB_DEVICE_Init+0x54>)
 800a9c6:	f7fe ff88 	bl	80098da <USBD_Start>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d001      	beq.n	800a9d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a9d0:	f7f7 fe1e 	bl	8002610 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a9d4:	bf00      	nop
 800a9d6:	bd80      	pop	{r7, pc}
 800a9d8:	2000013c 	.word	0x2000013c
 800a9dc:	200009f8 	.word	0x200009f8
 800a9e0:	20000028 	.word	0x20000028
 800a9e4:	2000012c 	.word	0x2000012c

0800a9e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	4905      	ldr	r1, [pc, #20]	; (800aa04 <CDC_Init_FS+0x1c>)
 800a9f0:	4805      	ldr	r0, [pc, #20]	; (800aa08 <CDC_Init_FS+0x20>)
 800a9f2:	f7fe fea9 	bl	8009748 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a9f6:	4905      	ldr	r1, [pc, #20]	; (800aa0c <CDC_Init_FS+0x24>)
 800a9f8:	4803      	ldr	r0, [pc, #12]	; (800aa08 <CDC_Init_FS+0x20>)
 800a9fa:	f7fe febe 	bl	800977a <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800a9fe:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	20000ebc 	.word	0x20000ebc
 800aa08:	200009f8 	.word	0x200009f8
 800aa0c:	20000cbc 	.word	0x20000cbc

0800aa10 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aa10:	b480      	push	{r7}
 800aa12:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 800aa14:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bc80      	pop	{r7}
 800aa1c:	4770      	bx	lr
	...

0800aa20 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b083      	sub	sp, #12
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	4603      	mov	r3, r0
 800aa28:	6039      	str	r1, [r7, #0]
 800aa2a:	71fb      	strb	r3, [r7, #7]
 800aa2c:	4613      	mov	r3, r2
 800aa2e:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch (cmd)
 800aa30:	79fb      	ldrb	r3, [r7, #7]
 800aa32:	2b23      	cmp	r3, #35	; 0x23
 800aa34:	d84a      	bhi.n	800aacc <CDC_Control_FS+0xac>
 800aa36:	a201      	add	r2, pc, #4	; (adr r2, 800aa3c <CDC_Control_FS+0x1c>)
 800aa38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa3c:	0800aacd 	.word	0x0800aacd
 800aa40:	0800aacd 	.word	0x0800aacd
 800aa44:	0800aacd 	.word	0x0800aacd
 800aa48:	0800aacd 	.word	0x0800aacd
 800aa4c:	0800aacd 	.word	0x0800aacd
 800aa50:	0800aacd 	.word	0x0800aacd
 800aa54:	0800aacd 	.word	0x0800aacd
 800aa58:	0800aacd 	.word	0x0800aacd
 800aa5c:	0800aacd 	.word	0x0800aacd
 800aa60:	0800aacd 	.word	0x0800aacd
 800aa64:	0800aacd 	.word	0x0800aacd
 800aa68:	0800aacd 	.word	0x0800aacd
 800aa6c:	0800aacd 	.word	0x0800aacd
 800aa70:	0800aacd 	.word	0x0800aacd
 800aa74:	0800aacd 	.word	0x0800aacd
 800aa78:	0800aacd 	.word	0x0800aacd
 800aa7c:	0800aacd 	.word	0x0800aacd
 800aa80:	0800aacd 	.word	0x0800aacd
 800aa84:	0800aacd 	.word	0x0800aacd
 800aa88:	0800aacd 	.word	0x0800aacd
 800aa8c:	0800aacd 	.word	0x0800aacd
 800aa90:	0800aacd 	.word	0x0800aacd
 800aa94:	0800aacd 	.word	0x0800aacd
 800aa98:	0800aacd 	.word	0x0800aacd
 800aa9c:	0800aacd 	.word	0x0800aacd
 800aaa0:	0800aacd 	.word	0x0800aacd
 800aaa4:	0800aacd 	.word	0x0800aacd
 800aaa8:	0800aacd 	.word	0x0800aacd
 800aaac:	0800aacd 	.word	0x0800aacd
 800aab0:	0800aacd 	.word	0x0800aacd
 800aab4:	0800aacd 	.word	0x0800aacd
 800aab8:	0800aacd 	.word	0x0800aacd
 800aabc:	0800aacd 	.word	0x0800aacd
 800aac0:	0800aacd 	.word	0x0800aacd
 800aac4:	0800aacd 	.word	0x0800aacd
 800aac8:	0800aacd 	.word	0x0800aacd
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800aacc:	bf00      	nop
	}

	return (USBD_OK);
 800aace:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bc80      	pop	{r7}
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop

0800aadc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aae6:	6879      	ldr	r1, [r7, #4]
 800aae8:	4807      	ldr	r0, [pc, #28]	; (800ab08 <CDC_Receive_FS+0x2c>)
 800aaea:	f7fe fe46 	bl	800977a <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aaee:	4806      	ldr	r0, [pc, #24]	; (800ab08 <CDC_Receive_FS+0x2c>)
 800aaf0:	f7fe fe85 	bl	80097fe <USBD_CDC_ReceivePacket>

	runCommands(Buf, Len);
 800aaf4:	6839      	ldr	r1, [r7, #0]
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f7f6 fc9e 	bl	8001438 <runCommands>
	return (USBD_OK);
 800aafc:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3708      	adds	r7, #8
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	200009f8 	.word	0x200009f8

0800ab0c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	460b      	mov	r3, r1
 800ab16:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800ab1c:	4b0d      	ldr	r3, [pc, #52]	; (800ab54 <CDC_Transmit_FS+0x48>)
 800ab1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab22:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0)
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d001      	beq.n	800ab32 <CDC_Transmit_FS+0x26>
	{
		return USBD_BUSY;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e00b      	b.n	800ab4a <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ab32:	887b      	ldrh	r3, [r7, #2]
 800ab34:	461a      	mov	r2, r3
 800ab36:	6879      	ldr	r1, [r7, #4]
 800ab38:	4806      	ldr	r0, [pc, #24]	; (800ab54 <CDC_Transmit_FS+0x48>)
 800ab3a:	f7fe fe05 	bl	8009748 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ab3e:	4805      	ldr	r0, [pc, #20]	; (800ab54 <CDC_Transmit_FS+0x48>)
 800ab40:	f7fe fe2e 	bl	80097a0 <USBD_CDC_TransmitPacket>
 800ab44:	4603      	mov	r3, r0
 800ab46:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 800ab48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	200009f8 	.word	0x200009f8

0800ab58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b083      	sub	sp, #12
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	4603      	mov	r3, r0
 800ab60:	6039      	str	r1, [r7, #0]
 800ab62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	2212      	movs	r2, #18
 800ab68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ab6a:	4b03      	ldr	r3, [pc, #12]	; (800ab78 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	370c      	adds	r7, #12
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bc80      	pop	{r7}
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop
 800ab78:	20000158 	.word	0x20000158

0800ab7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	4603      	mov	r3, r0
 800ab84:	6039      	str	r1, [r7, #0]
 800ab86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	2204      	movs	r2, #4
 800ab8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ab8e:	4b03      	ldr	r3, [pc, #12]	; (800ab9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	370c      	adds	r7, #12
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bc80      	pop	{r7}
 800ab98:	4770      	bx	lr
 800ab9a:	bf00      	nop
 800ab9c:	2000016c 	.word	0x2000016c

0800aba0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	4603      	mov	r3, r0
 800aba8:	6039      	str	r1, [r7, #0]
 800abaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800abac:	79fb      	ldrb	r3, [r7, #7]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d105      	bne.n	800abbe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800abb2:	683a      	ldr	r2, [r7, #0]
 800abb4:	4907      	ldr	r1, [pc, #28]	; (800abd4 <USBD_FS_ProductStrDescriptor+0x34>)
 800abb6:	4808      	ldr	r0, [pc, #32]	; (800abd8 <USBD_FS_ProductStrDescriptor+0x38>)
 800abb8:	f7ff fe08 	bl	800a7cc <USBD_GetString>
 800abbc:	e004      	b.n	800abc8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800abbe:	683a      	ldr	r2, [r7, #0]
 800abc0:	4904      	ldr	r1, [pc, #16]	; (800abd4 <USBD_FS_ProductStrDescriptor+0x34>)
 800abc2:	4805      	ldr	r0, [pc, #20]	; (800abd8 <USBD_FS_ProductStrDescriptor+0x38>)
 800abc4:	f7ff fe02 	bl	800a7cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800abc8:	4b02      	ldr	r3, [pc, #8]	; (800abd4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3708      	adds	r7, #8
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	200010bc 	.word	0x200010bc
 800abd8:	0800c820 	.word	0x0800c820

0800abdc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	4603      	mov	r3, r0
 800abe4:	6039      	str	r1, [r7, #0]
 800abe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800abe8:	683a      	ldr	r2, [r7, #0]
 800abea:	4904      	ldr	r1, [pc, #16]	; (800abfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800abec:	4804      	ldr	r0, [pc, #16]	; (800ac00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800abee:	f7ff fded 	bl	800a7cc <USBD_GetString>
  return USBD_StrDesc;
 800abf2:	4b02      	ldr	r3, [pc, #8]	; (800abfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3708      	adds	r7, #8
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	200010bc 	.word	0x200010bc
 800ac00:	0800c838 	.word	0x0800c838

0800ac04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	6039      	str	r1, [r7, #0]
 800ac0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	221a      	movs	r2, #26
 800ac14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ac16:	f000 f843 	bl	800aca0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ac1a:	4b02      	ldr	r3, [pc, #8]	; (800ac24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3708      	adds	r7, #8
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	20000170 	.word	0x20000170

0800ac28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	4603      	mov	r3, r0
 800ac30:	6039      	str	r1, [r7, #0]
 800ac32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ac34:	79fb      	ldrb	r3, [r7, #7]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d105      	bne.n	800ac46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ac3a:	683a      	ldr	r2, [r7, #0]
 800ac3c:	4907      	ldr	r1, [pc, #28]	; (800ac5c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ac3e:	4808      	ldr	r0, [pc, #32]	; (800ac60 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ac40:	f7ff fdc4 	bl	800a7cc <USBD_GetString>
 800ac44:	e004      	b.n	800ac50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ac46:	683a      	ldr	r2, [r7, #0]
 800ac48:	4904      	ldr	r1, [pc, #16]	; (800ac5c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ac4a:	4805      	ldr	r0, [pc, #20]	; (800ac60 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ac4c:	f7ff fdbe 	bl	800a7cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac50:	4b02      	ldr	r3, [pc, #8]	; (800ac5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3708      	adds	r7, #8
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
 800ac5a:	bf00      	nop
 800ac5c:	200010bc 	.word	0x200010bc
 800ac60:	0800c84c 	.word	0x0800c84c

0800ac64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b082      	sub	sp, #8
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	6039      	str	r1, [r7, #0]
 800ac6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac70:	79fb      	ldrb	r3, [r7, #7]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d105      	bne.n	800ac82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ac76:	683a      	ldr	r2, [r7, #0]
 800ac78:	4907      	ldr	r1, [pc, #28]	; (800ac98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ac7a:	4808      	ldr	r0, [pc, #32]	; (800ac9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ac7c:	f7ff fda6 	bl	800a7cc <USBD_GetString>
 800ac80:	e004      	b.n	800ac8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ac82:	683a      	ldr	r2, [r7, #0]
 800ac84:	4904      	ldr	r1, [pc, #16]	; (800ac98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ac86:	4805      	ldr	r0, [pc, #20]	; (800ac9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ac88:	f7ff fda0 	bl	800a7cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac8c:	4b02      	ldr	r3, [pc, #8]	; (800ac98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3708      	adds	r7, #8
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	200010bc 	.word	0x200010bc
 800ac9c:	0800c858 	.word	0x0800c858

0800aca0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aca6:	4b0f      	ldr	r3, [pc, #60]	; (800ace4 <Get_SerialNum+0x44>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800acac:	4b0e      	ldr	r3, [pc, #56]	; (800ace8 <Get_SerialNum+0x48>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800acb2:	4b0e      	ldr	r3, [pc, #56]	; (800acec <Get_SerialNum+0x4c>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4413      	add	r3, r2
 800acbe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d009      	beq.n	800acda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800acc6:	2208      	movs	r2, #8
 800acc8:	4909      	ldr	r1, [pc, #36]	; (800acf0 <Get_SerialNum+0x50>)
 800acca:	68f8      	ldr	r0, [r7, #12]
 800accc:	f000 f814 	bl	800acf8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800acd0:	2204      	movs	r2, #4
 800acd2:	4908      	ldr	r1, [pc, #32]	; (800acf4 <Get_SerialNum+0x54>)
 800acd4:	68b8      	ldr	r0, [r7, #8]
 800acd6:	f000 f80f 	bl	800acf8 <IntToUnicode>
  }
}
 800acda:	bf00      	nop
 800acdc:	3710      	adds	r7, #16
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop
 800ace4:	1ffff7e8 	.word	0x1ffff7e8
 800ace8:	1ffff7ec 	.word	0x1ffff7ec
 800acec:	1ffff7f0 	.word	0x1ffff7f0
 800acf0:	20000172 	.word	0x20000172
 800acf4:	20000182 	.word	0x20000182

0800acf8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b087      	sub	sp, #28
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	4613      	mov	r3, r2
 800ad04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ad06:	2300      	movs	r3, #0
 800ad08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	75fb      	strb	r3, [r7, #23]
 800ad0e:	e027      	b.n	800ad60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	0f1b      	lsrs	r3, r3, #28
 800ad14:	2b09      	cmp	r3, #9
 800ad16:	d80b      	bhi.n	800ad30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	0f1b      	lsrs	r3, r3, #28
 800ad1c:	b2da      	uxtb	r2, r3
 800ad1e:	7dfb      	ldrb	r3, [r7, #23]
 800ad20:	005b      	lsls	r3, r3, #1
 800ad22:	4619      	mov	r1, r3
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	440b      	add	r3, r1
 800ad28:	3230      	adds	r2, #48	; 0x30
 800ad2a:	b2d2      	uxtb	r2, r2
 800ad2c:	701a      	strb	r2, [r3, #0]
 800ad2e:	e00a      	b.n	800ad46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	0f1b      	lsrs	r3, r3, #28
 800ad34:	b2da      	uxtb	r2, r3
 800ad36:	7dfb      	ldrb	r3, [r7, #23]
 800ad38:	005b      	lsls	r3, r3, #1
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	440b      	add	r3, r1
 800ad40:	3237      	adds	r2, #55	; 0x37
 800ad42:	b2d2      	uxtb	r2, r2
 800ad44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	011b      	lsls	r3, r3, #4
 800ad4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ad4c:	7dfb      	ldrb	r3, [r7, #23]
 800ad4e:	005b      	lsls	r3, r3, #1
 800ad50:	3301      	adds	r3, #1
 800ad52:	68ba      	ldr	r2, [r7, #8]
 800ad54:	4413      	add	r3, r2
 800ad56:	2200      	movs	r2, #0
 800ad58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ad5a:	7dfb      	ldrb	r3, [r7, #23]
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	75fb      	strb	r3, [r7, #23]
 800ad60:	7dfa      	ldrb	r2, [r7, #23]
 800ad62:	79fb      	ldrb	r3, [r7, #7]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d3d3      	bcc.n	800ad10 <IntToUnicode+0x18>
  }
}
 800ad68:	bf00      	nop
 800ad6a:	bf00      	nop
 800ad6c:	371c      	adds	r7, #28
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bc80      	pop	{r7}
 800ad72:	4770      	bx	lr

0800ad74 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4a0d      	ldr	r2, [pc, #52]	; (800adb8 <HAL_PCD_MspInit+0x44>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d113      	bne.n	800adae <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ad86:	4b0d      	ldr	r3, [pc, #52]	; (800adbc <HAL_PCD_MspInit+0x48>)
 800ad88:	69db      	ldr	r3, [r3, #28]
 800ad8a:	4a0c      	ldr	r2, [pc, #48]	; (800adbc <HAL_PCD_MspInit+0x48>)
 800ad8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ad90:	61d3      	str	r3, [r2, #28]
 800ad92:	4b0a      	ldr	r3, [pc, #40]	; (800adbc <HAL_PCD_MspInit+0x48>)
 800ad94:	69db      	ldr	r3, [r3, #28]
 800ad96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad9a:	60fb      	str	r3, [r7, #12]
 800ad9c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800ad9e:	2200      	movs	r2, #0
 800ada0:	2100      	movs	r1, #0
 800ada2:	2014      	movs	r0, #20
 800ada4:	f7f8 fcbf 	bl	8003726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ada8:	2014      	movs	r0, #20
 800adaa:	f7f8 fcd8 	bl	800375e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800adae:	bf00      	nop
 800adb0:	3710      	adds	r7, #16
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	40005c00 	.word	0x40005c00
 800adbc:	40021000 	.word	0x40021000

0800adc0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800add4:	4619      	mov	r1, r3
 800add6:	4610      	mov	r0, r2
 800add8:	f7fe fdc7 	bl	800996a <USBD_LL_SetupStage>
}
 800addc:	bf00      	nop
 800adde:	3708      	adds	r7, #8
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	460b      	mov	r3, r1
 800adee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800adf6:	78fa      	ldrb	r2, [r7, #3]
 800adf8:	6879      	ldr	r1, [r7, #4]
 800adfa:	4613      	mov	r3, r2
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	4413      	add	r3, r2
 800ae00:	00db      	lsls	r3, r3, #3
 800ae02:	440b      	add	r3, r1
 800ae04:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	78fb      	ldrb	r3, [r7, #3]
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	f7fe fdf9 	bl	8009a04 <USBD_LL_DataOutStage>
}
 800ae12:	bf00      	nop
 800ae14:	3708      	adds	r7, #8
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b082      	sub	sp, #8
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
 800ae22:	460b      	mov	r3, r1
 800ae24:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ae2c:	78fa      	ldrb	r2, [r7, #3]
 800ae2e:	6879      	ldr	r1, [r7, #4]
 800ae30:	4613      	mov	r3, r2
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	4413      	add	r3, r2
 800ae36:	00db      	lsls	r3, r3, #3
 800ae38:	440b      	add	r3, r1
 800ae3a:	333c      	adds	r3, #60	; 0x3c
 800ae3c:	681a      	ldr	r2, [r3, #0]
 800ae3e:	78fb      	ldrb	r3, [r7, #3]
 800ae40:	4619      	mov	r1, r3
 800ae42:	f7fe fe50 	bl	8009ae6 <USBD_LL_DataInStage>
}
 800ae46:	bf00      	nop
 800ae48:	3708      	adds	r7, #8
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae4e:	b580      	push	{r7, lr}
 800ae50:	b082      	sub	sp, #8
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f7fe ff60 	bl	8009d22 <USBD_LL_SOF>
}
 800ae62:	bf00      	nop
 800ae64:	3708      	adds	r7, #8
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}

0800ae6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae6a:	b580      	push	{r7, lr}
 800ae6c:	b084      	sub	sp, #16
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ae72:	2301      	movs	r3, #1
 800ae74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	689b      	ldr	r3, [r3, #8]
 800ae7a:	2b02      	cmp	r3, #2
 800ae7c:	d001      	beq.n	800ae82 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ae7e:	f7f7 fbc7 	bl	8002610 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ae88:	7bfa      	ldrb	r2, [r7, #15]
 800ae8a:	4611      	mov	r1, r2
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7fe ff10 	bl	8009cb2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f7fe fec9 	bl	8009c30 <USBD_LL_Reset>
}
 800ae9e:	bf00      	nop
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
	...

0800aea8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7fe ff0a 	bl	8009cd0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	699b      	ldr	r3, [r3, #24]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d005      	beq.n	800aed0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aec4:	4b04      	ldr	r3, [pc, #16]	; (800aed8 <HAL_PCD_SuspendCallback+0x30>)
 800aec6:	691b      	ldr	r3, [r3, #16]
 800aec8:	4a03      	ldr	r2, [pc, #12]	; (800aed8 <HAL_PCD_SuspendCallback+0x30>)
 800aeca:	f043 0306 	orr.w	r3, r3, #6
 800aece:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aed0:	bf00      	nop
 800aed2:	3708      	adds	r7, #8
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	e000ed00 	.word	0xe000ed00

0800aedc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7fe ff04 	bl	8009cf8 <USBD_LL_Resume>
}
 800aef0:	bf00      	nop
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800af00:	4a28      	ldr	r2, [pc, #160]	; (800afa4 <USBD_LL_Init+0xac>)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	4a26      	ldr	r2, [pc, #152]	; (800afa4 <USBD_LL_Init+0xac>)
 800af0c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800af10:	4b24      	ldr	r3, [pc, #144]	; (800afa4 <USBD_LL_Init+0xac>)
 800af12:	4a25      	ldr	r2, [pc, #148]	; (800afa8 <USBD_LL_Init+0xb0>)
 800af14:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800af16:	4b23      	ldr	r3, [pc, #140]	; (800afa4 <USBD_LL_Init+0xac>)
 800af18:	2208      	movs	r2, #8
 800af1a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800af1c:	4b21      	ldr	r3, [pc, #132]	; (800afa4 <USBD_LL_Init+0xac>)
 800af1e:	2202      	movs	r2, #2
 800af20:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800af22:	4b20      	ldr	r3, [pc, #128]	; (800afa4 <USBD_LL_Init+0xac>)
 800af24:	2200      	movs	r2, #0
 800af26:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800af28:	4b1e      	ldr	r3, [pc, #120]	; (800afa4 <USBD_LL_Init+0xac>)
 800af2a:	2200      	movs	r2, #0
 800af2c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800af2e:	4b1d      	ldr	r3, [pc, #116]	; (800afa4 <USBD_LL_Init+0xac>)
 800af30:	2200      	movs	r2, #0
 800af32:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800af34:	481b      	ldr	r0, [pc, #108]	; (800afa4 <USBD_LL_Init+0xac>)
 800af36:	f7f9 f82e 	bl	8003f96 <HAL_PCD_Init>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d001      	beq.n	800af44 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800af40:	f7f7 fb66 	bl	8002610 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800af4a:	2318      	movs	r3, #24
 800af4c:	2200      	movs	r2, #0
 800af4e:	2100      	movs	r1, #0
 800af50:	f7fa fb70 	bl	8005634 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800af5a:	2358      	movs	r3, #88	; 0x58
 800af5c:	2200      	movs	r2, #0
 800af5e:	2180      	movs	r1, #128	; 0x80
 800af60:	f7fa fb68 	bl	8005634 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800af6a:	23c0      	movs	r3, #192	; 0xc0
 800af6c:	2200      	movs	r2, #0
 800af6e:	2181      	movs	r1, #129	; 0x81
 800af70:	f7fa fb60 	bl	8005634 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800af7a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800af7e:	2200      	movs	r2, #0
 800af80:	2101      	movs	r1, #1
 800af82:	f7fa fb57 	bl	8005634 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800af8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af90:	2200      	movs	r2, #0
 800af92:	2182      	movs	r1, #130	; 0x82
 800af94:	f7fa fb4e 	bl	8005634 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800af98:	2300      	movs	r3, #0
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3708      	adds	r7, #8
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop
 800afa4:	200012bc 	.word	0x200012bc
 800afa8:	40005c00 	.word	0x40005c00

0800afac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afb4:	2300      	movs	r3, #0
 800afb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afb8:	2300      	movs	r3, #0
 800afba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7f9 f8f2 	bl	80041ac <HAL_PCD_Start>
 800afc8:	4603      	mov	r3, r0
 800afca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afcc:	7bfb      	ldrb	r3, [r7, #15]
 800afce:	4618      	mov	r0, r3
 800afd0:	f000 f94e 	bl	800b270 <USBD_Get_USB_Status>
 800afd4:	4603      	mov	r3, r0
 800afd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afd8:	7bbb      	ldrb	r3, [r7, #14]
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3710      	adds	r7, #16
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800afe2:	b580      	push	{r7, lr}
 800afe4:	b084      	sub	sp, #16
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
 800afea:	4608      	mov	r0, r1
 800afec:	4611      	mov	r1, r2
 800afee:	461a      	mov	r2, r3
 800aff0:	4603      	mov	r3, r0
 800aff2:	70fb      	strb	r3, [r7, #3]
 800aff4:	460b      	mov	r3, r1
 800aff6:	70bb      	strb	r3, [r7, #2]
 800aff8:	4613      	mov	r3, r2
 800affa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800affc:	2300      	movs	r3, #0
 800affe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b000:	2300      	movs	r3, #0
 800b002:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b00a:	78bb      	ldrb	r3, [r7, #2]
 800b00c:	883a      	ldrh	r2, [r7, #0]
 800b00e:	78f9      	ldrb	r1, [r7, #3]
 800b010:	f7f9 fa6c 	bl	80044ec <HAL_PCD_EP_Open>
 800b014:	4603      	mov	r3, r0
 800b016:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b018:	7bfb      	ldrb	r3, [r7, #15]
 800b01a:	4618      	mov	r0, r3
 800b01c:	f000 f928 	bl	800b270 <USBD_Get_USB_Status>
 800b020:	4603      	mov	r3, r0
 800b022:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b024:	7bbb      	ldrb	r3, [r7, #14]
}
 800b026:	4618      	mov	r0, r3
 800b028:	3710      	adds	r7, #16
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b084      	sub	sp, #16
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
 800b036:	460b      	mov	r3, r1
 800b038:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b03a:	2300      	movs	r3, #0
 800b03c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b03e:	2300      	movs	r3, #0
 800b040:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b048:	78fa      	ldrb	r2, [r7, #3]
 800b04a:	4611      	mov	r1, r2
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7f9 fab3 	bl	80045b8 <HAL_PCD_EP_Close>
 800b052:	4603      	mov	r3, r0
 800b054:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b056:	7bfb      	ldrb	r3, [r7, #15]
 800b058:	4618      	mov	r0, r3
 800b05a:	f000 f909 	bl	800b270 <USBD_Get_USB_Status>
 800b05e:	4603      	mov	r3, r0
 800b060:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b062:	7bbb      	ldrb	r3, [r7, #14]
}
 800b064:	4618      	mov	r0, r3
 800b066:	3710      	adds	r7, #16
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	460b      	mov	r3, r1
 800b076:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b078:	2300      	movs	r3, #0
 800b07a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b07c:	2300      	movs	r3, #0
 800b07e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b086:	78fa      	ldrb	r2, [r7, #3]
 800b088:	4611      	mov	r1, r2
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7f9 fb73 	bl	8004776 <HAL_PCD_EP_SetStall>
 800b090:	4603      	mov	r3, r0
 800b092:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b094:	7bfb      	ldrb	r3, [r7, #15]
 800b096:	4618      	mov	r0, r3
 800b098:	f000 f8ea 	bl	800b270 <USBD_Get_USB_Status>
 800b09c:	4603      	mov	r3, r0
 800b09e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3710      	adds	r7, #16
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}

0800b0aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b084      	sub	sp, #16
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b0c4:	78fa      	ldrb	r2, [r7, #3]
 800b0c6:	4611      	mov	r1, r2
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7f9 fbb4 	bl	8004836 <HAL_PCD_EP_ClrStall>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0d2:	7bfb      	ldrb	r3, [r7, #15]
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f000 f8cb 	bl	800b270 <USBD_Get_USB_Status>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0de:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3710      	adds	r7, #16
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b085      	sub	sp, #20
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b0fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b0fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b100:	2b00      	cmp	r3, #0
 800b102:	da0c      	bge.n	800b11e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b104:	78fb      	ldrb	r3, [r7, #3]
 800b106:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b10a:	68f9      	ldr	r1, [r7, #12]
 800b10c:	1c5a      	adds	r2, r3, #1
 800b10e:	4613      	mov	r3, r2
 800b110:	009b      	lsls	r3, r3, #2
 800b112:	4413      	add	r3, r2
 800b114:	00db      	lsls	r3, r3, #3
 800b116:	440b      	add	r3, r1
 800b118:	3302      	adds	r3, #2
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	e00b      	b.n	800b136 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b11e:	78fb      	ldrb	r3, [r7, #3]
 800b120:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b124:	68f9      	ldr	r1, [r7, #12]
 800b126:	4613      	mov	r3, r2
 800b128:	009b      	lsls	r3, r3, #2
 800b12a:	4413      	add	r3, r2
 800b12c:	00db      	lsls	r3, r3, #3
 800b12e:	440b      	add	r3, r1
 800b130:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b134:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b136:	4618      	mov	r0, r3
 800b138:	3714      	adds	r7, #20
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bc80      	pop	{r7}
 800b13e:	4770      	bx	lr

0800b140 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	460b      	mov	r3, r1
 800b14a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b14c:	2300      	movs	r3, #0
 800b14e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b150:	2300      	movs	r3, #0
 800b152:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b15a:	78fa      	ldrb	r2, [r7, #3]
 800b15c:	4611      	mov	r1, r2
 800b15e:	4618      	mov	r0, r3
 800b160:	f7f9 f99f 	bl	80044a2 <HAL_PCD_SetAddress>
 800b164:	4603      	mov	r3, r0
 800b166:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b168:	7bfb      	ldrb	r3, [r7, #15]
 800b16a:	4618      	mov	r0, r3
 800b16c:	f000 f880 	bl	800b270 <USBD_Get_USB_Status>
 800b170:	4603      	mov	r3, r0
 800b172:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b174:	7bbb      	ldrb	r3, [r7, #14]
}
 800b176:	4618      	mov	r0, r3
 800b178:	3710      	adds	r7, #16
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b086      	sub	sp, #24
 800b182:	af00      	add	r7, sp, #0
 800b184:	60f8      	str	r0, [r7, #12]
 800b186:	607a      	str	r2, [r7, #4]
 800b188:	461a      	mov	r2, r3
 800b18a:	460b      	mov	r3, r1
 800b18c:	72fb      	strb	r3, [r7, #11]
 800b18e:	4613      	mov	r3, r2
 800b190:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b192:	2300      	movs	r3, #0
 800b194:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b196:	2300      	movs	r3, #0
 800b198:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b1a0:	893b      	ldrh	r3, [r7, #8]
 800b1a2:	7af9      	ldrb	r1, [r7, #11]
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	f7f9 faa3 	bl	80046f0 <HAL_PCD_EP_Transmit>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1ae:	7dfb      	ldrb	r3, [r7, #23]
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f000 f85d 	bl	800b270 <USBD_Get_USB_Status>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b1ba:	7dbb      	ldrb	r3, [r7, #22]
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3718      	adds	r7, #24
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b086      	sub	sp, #24
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	60f8      	str	r0, [r7, #12]
 800b1cc:	607a      	str	r2, [r7, #4]
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	72fb      	strb	r3, [r7, #11]
 800b1d4:	4613      	mov	r3, r2
 800b1d6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b1e6:	893b      	ldrh	r3, [r7, #8]
 800b1e8:	7af9      	ldrb	r1, [r7, #11]
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	f7f9 fa2c 	bl	8004648 <HAL_PCD_EP_Receive>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1f4:	7dfb      	ldrb	r3, [r7, #23]
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f000 f83a 	bl	800b270 <USBD_Get_USB_Status>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b200:	7dbb      	ldrb	r3, [r7, #22]
}
 800b202:	4618      	mov	r0, r3
 800b204:	3718      	adds	r7, #24
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b082      	sub	sp, #8
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
 800b212:	460b      	mov	r3, r1
 800b214:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b21c:	78fa      	ldrb	r2, [r7, #3]
 800b21e:	4611      	mov	r1, r2
 800b220:	4618      	mov	r0, r3
 800b222:	f7f9 fa4e 	bl	80046c2 <HAL_PCD_EP_GetRxCount>
 800b226:	4603      	mov	r3, r0
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3708      	adds	r7, #8
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b238:	4b02      	ldr	r3, [pc, #8]	; (800b244 <USBD_static_malloc+0x14>)
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	370c      	adds	r7, #12
 800b23e:	46bd      	mov	sp, r7
 800b240:	bc80      	pop	{r7}
 800b242:	4770      	bx	lr
 800b244:	2000027c 	.word	0x2000027c

0800b248 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b248:	b480      	push	{r7}
 800b24a:	b083      	sub	sp, #12
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]

}
 800b250:	bf00      	nop
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	bc80      	pop	{r7}
 800b258:	4770      	bx	lr

0800b25a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b25a:	b480      	push	{r7}
 800b25c:	b083      	sub	sp, #12
 800b25e:	af00      	add	r7, sp, #0
 800b260:	6078      	str	r0, [r7, #4]
 800b262:	460b      	mov	r3, r1
 800b264:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b266:	bf00      	nop
 800b268:	370c      	adds	r7, #12
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bc80      	pop	{r7}
 800b26e:	4770      	bx	lr

0800b270 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b270:	b480      	push	{r7}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
 800b276:	4603      	mov	r3, r0
 800b278:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b27a:	2300      	movs	r3, #0
 800b27c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b27e:	79fb      	ldrb	r3, [r7, #7]
 800b280:	2b03      	cmp	r3, #3
 800b282:	d817      	bhi.n	800b2b4 <USBD_Get_USB_Status+0x44>
 800b284:	a201      	add	r2, pc, #4	; (adr r2, 800b28c <USBD_Get_USB_Status+0x1c>)
 800b286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b28a:	bf00      	nop
 800b28c:	0800b29d 	.word	0x0800b29d
 800b290:	0800b2a3 	.word	0x0800b2a3
 800b294:	0800b2a9 	.word	0x0800b2a9
 800b298:	0800b2af 	.word	0x0800b2af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b29c:	2300      	movs	r3, #0
 800b29e:	73fb      	strb	r3, [r7, #15]
    break;
 800b2a0:	e00b      	b.n	800b2ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b2a2:	2302      	movs	r3, #2
 800b2a4:	73fb      	strb	r3, [r7, #15]
    break;
 800b2a6:	e008      	b.n	800b2ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b2ac:	e005      	b.n	800b2ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b2ae:	2302      	movs	r3, #2
 800b2b0:	73fb      	strb	r3, [r7, #15]
    break;
 800b2b2:	e002      	b.n	800b2ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b2b4:	2302      	movs	r3, #2
 800b2b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b2b8:	bf00      	nop
  }
  return usb_status;
 800b2ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3714      	adds	r7, #20
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bc80      	pop	{r7}
 800b2c4:	4770      	bx	lr
 800b2c6:	bf00      	nop

0800b2c8 <__errno>:
 800b2c8:	4b01      	ldr	r3, [pc, #4]	; (800b2d0 <__errno+0x8>)
 800b2ca:	6818      	ldr	r0, [r3, #0]
 800b2cc:	4770      	bx	lr
 800b2ce:	bf00      	nop
 800b2d0:	2000018c 	.word	0x2000018c

0800b2d4 <__libc_init_array>:
 800b2d4:	b570      	push	{r4, r5, r6, lr}
 800b2d6:	2600      	movs	r6, #0
 800b2d8:	4d0c      	ldr	r5, [pc, #48]	; (800b30c <__libc_init_array+0x38>)
 800b2da:	4c0d      	ldr	r4, [pc, #52]	; (800b310 <__libc_init_array+0x3c>)
 800b2dc:	1b64      	subs	r4, r4, r5
 800b2de:	10a4      	asrs	r4, r4, #2
 800b2e0:	42a6      	cmp	r6, r4
 800b2e2:	d109      	bne.n	800b2f8 <__libc_init_array+0x24>
 800b2e4:	f001 fa30 	bl	800c748 <_init>
 800b2e8:	2600      	movs	r6, #0
 800b2ea:	4d0a      	ldr	r5, [pc, #40]	; (800b314 <__libc_init_array+0x40>)
 800b2ec:	4c0a      	ldr	r4, [pc, #40]	; (800b318 <__libc_init_array+0x44>)
 800b2ee:	1b64      	subs	r4, r4, r5
 800b2f0:	10a4      	asrs	r4, r4, #2
 800b2f2:	42a6      	cmp	r6, r4
 800b2f4:	d105      	bne.n	800b302 <__libc_init_array+0x2e>
 800b2f6:	bd70      	pop	{r4, r5, r6, pc}
 800b2f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2fc:	4798      	blx	r3
 800b2fe:	3601      	adds	r6, #1
 800b300:	e7ee      	b.n	800b2e0 <__libc_init_array+0xc>
 800b302:	f855 3b04 	ldr.w	r3, [r5], #4
 800b306:	4798      	blx	r3
 800b308:	3601      	adds	r6, #1
 800b30a:	e7f2      	b.n	800b2f2 <__libc_init_array+0x1e>
 800b30c:	0800c940 	.word	0x0800c940
 800b310:	0800c940 	.word	0x0800c940
 800b314:	0800c940 	.word	0x0800c940
 800b318:	0800c944 	.word	0x0800c944

0800b31c <__itoa>:
 800b31c:	1e93      	subs	r3, r2, #2
 800b31e:	2b22      	cmp	r3, #34	; 0x22
 800b320:	b510      	push	{r4, lr}
 800b322:	460c      	mov	r4, r1
 800b324:	d904      	bls.n	800b330 <__itoa+0x14>
 800b326:	2300      	movs	r3, #0
 800b328:	461c      	mov	r4, r3
 800b32a:	700b      	strb	r3, [r1, #0]
 800b32c:	4620      	mov	r0, r4
 800b32e:	bd10      	pop	{r4, pc}
 800b330:	2a0a      	cmp	r2, #10
 800b332:	d109      	bne.n	800b348 <__itoa+0x2c>
 800b334:	2800      	cmp	r0, #0
 800b336:	da07      	bge.n	800b348 <__itoa+0x2c>
 800b338:	232d      	movs	r3, #45	; 0x2d
 800b33a:	700b      	strb	r3, [r1, #0]
 800b33c:	2101      	movs	r1, #1
 800b33e:	4240      	negs	r0, r0
 800b340:	4421      	add	r1, r4
 800b342:	f000 f853 	bl	800b3ec <__utoa>
 800b346:	e7f1      	b.n	800b32c <__itoa+0x10>
 800b348:	2100      	movs	r1, #0
 800b34a:	e7f9      	b.n	800b340 <__itoa+0x24>

0800b34c <itoa>:
 800b34c:	f7ff bfe6 	b.w	800b31c <__itoa>

0800b350 <memcpy>:
 800b350:	440a      	add	r2, r1
 800b352:	4291      	cmp	r1, r2
 800b354:	f100 33ff 	add.w	r3, r0, #4294967295
 800b358:	d100      	bne.n	800b35c <memcpy+0xc>
 800b35a:	4770      	bx	lr
 800b35c:	b510      	push	{r4, lr}
 800b35e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b362:	4291      	cmp	r1, r2
 800b364:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b368:	d1f9      	bne.n	800b35e <memcpy+0xe>
 800b36a:	bd10      	pop	{r4, pc}

0800b36c <memset>:
 800b36c:	4603      	mov	r3, r0
 800b36e:	4402      	add	r2, r0
 800b370:	4293      	cmp	r3, r2
 800b372:	d100      	bne.n	800b376 <memset+0xa>
 800b374:	4770      	bx	lr
 800b376:	f803 1b01 	strb.w	r1, [r3], #1
 800b37a:	e7f9      	b.n	800b370 <memset+0x4>

0800b37c <iprintf>:
 800b37c:	b40f      	push	{r0, r1, r2, r3}
 800b37e:	4b0a      	ldr	r3, [pc, #40]	; (800b3a8 <iprintf+0x2c>)
 800b380:	b513      	push	{r0, r1, r4, lr}
 800b382:	681c      	ldr	r4, [r3, #0]
 800b384:	b124      	cbz	r4, 800b390 <iprintf+0x14>
 800b386:	69a3      	ldr	r3, [r4, #24]
 800b388:	b913      	cbnz	r3, 800b390 <iprintf+0x14>
 800b38a:	4620      	mov	r0, r4
 800b38c:	f000 f8c8 	bl	800b520 <__sinit>
 800b390:	ab05      	add	r3, sp, #20
 800b392:	4620      	mov	r0, r4
 800b394:	9a04      	ldr	r2, [sp, #16]
 800b396:	68a1      	ldr	r1, [r4, #8]
 800b398:	9301      	str	r3, [sp, #4]
 800b39a:	f000 fb3f 	bl	800ba1c <_vfiprintf_r>
 800b39e:	b002      	add	sp, #8
 800b3a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3a4:	b004      	add	sp, #16
 800b3a6:	4770      	bx	lr
 800b3a8:	2000018c 	.word	0x2000018c

0800b3ac <siprintf>:
 800b3ac:	b40e      	push	{r1, r2, r3}
 800b3ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b3b2:	b500      	push	{lr}
 800b3b4:	b09c      	sub	sp, #112	; 0x70
 800b3b6:	ab1d      	add	r3, sp, #116	; 0x74
 800b3b8:	9002      	str	r0, [sp, #8]
 800b3ba:	9006      	str	r0, [sp, #24]
 800b3bc:	9107      	str	r1, [sp, #28]
 800b3be:	9104      	str	r1, [sp, #16]
 800b3c0:	4808      	ldr	r0, [pc, #32]	; (800b3e4 <siprintf+0x38>)
 800b3c2:	4909      	ldr	r1, [pc, #36]	; (800b3e8 <siprintf+0x3c>)
 800b3c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3c8:	9105      	str	r1, [sp, #20]
 800b3ca:	6800      	ldr	r0, [r0, #0]
 800b3cc:	a902      	add	r1, sp, #8
 800b3ce:	9301      	str	r3, [sp, #4]
 800b3d0:	f000 f9fc 	bl	800b7cc <_svfiprintf_r>
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	9b02      	ldr	r3, [sp, #8]
 800b3d8:	701a      	strb	r2, [r3, #0]
 800b3da:	b01c      	add	sp, #112	; 0x70
 800b3dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3e0:	b003      	add	sp, #12
 800b3e2:	4770      	bx	lr
 800b3e4:	2000018c 	.word	0x2000018c
 800b3e8:	ffff0208 	.word	0xffff0208

0800b3ec <__utoa>:
 800b3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3ee:	b08b      	sub	sp, #44	; 0x2c
 800b3f0:	4605      	mov	r5, r0
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	466e      	mov	r6, sp
 800b3f6:	4c1d      	ldr	r4, [pc, #116]	; (800b46c <__utoa+0x80>)
 800b3f8:	f104 0c20 	add.w	ip, r4, #32
 800b3fc:	4637      	mov	r7, r6
 800b3fe:	6820      	ldr	r0, [r4, #0]
 800b400:	6861      	ldr	r1, [r4, #4]
 800b402:	3408      	adds	r4, #8
 800b404:	c703      	stmia	r7!, {r0, r1}
 800b406:	4564      	cmp	r4, ip
 800b408:	463e      	mov	r6, r7
 800b40a:	d1f7      	bne.n	800b3fc <__utoa+0x10>
 800b40c:	7921      	ldrb	r1, [r4, #4]
 800b40e:	6820      	ldr	r0, [r4, #0]
 800b410:	7139      	strb	r1, [r7, #4]
 800b412:	1e91      	subs	r1, r2, #2
 800b414:	2922      	cmp	r1, #34	; 0x22
 800b416:	6038      	str	r0, [r7, #0]
 800b418:	f04f 0100 	mov.w	r1, #0
 800b41c:	d904      	bls.n	800b428 <__utoa+0x3c>
 800b41e:	7019      	strb	r1, [r3, #0]
 800b420:	460b      	mov	r3, r1
 800b422:	4618      	mov	r0, r3
 800b424:	b00b      	add	sp, #44	; 0x2c
 800b426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b428:	1e58      	subs	r0, r3, #1
 800b42a:	4684      	mov	ip, r0
 800b42c:	fbb5 f7f2 	udiv	r7, r5, r2
 800b430:	fb02 5617 	mls	r6, r2, r7, r5
 800b434:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800b438:	4476      	add	r6, lr
 800b43a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800b43e:	460c      	mov	r4, r1
 800b440:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800b444:	462e      	mov	r6, r5
 800b446:	42b2      	cmp	r2, r6
 800b448:	463d      	mov	r5, r7
 800b44a:	f101 0101 	add.w	r1, r1, #1
 800b44e:	d9ed      	bls.n	800b42c <__utoa+0x40>
 800b450:	2200      	movs	r2, #0
 800b452:	545a      	strb	r2, [r3, r1]
 800b454:	1919      	adds	r1, r3, r4
 800b456:	1aa5      	subs	r5, r4, r2
 800b458:	42aa      	cmp	r2, r5
 800b45a:	dae2      	bge.n	800b422 <__utoa+0x36>
 800b45c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b460:	780e      	ldrb	r6, [r1, #0]
 800b462:	3201      	adds	r2, #1
 800b464:	7006      	strb	r6, [r0, #0]
 800b466:	f801 5901 	strb.w	r5, [r1], #-1
 800b46a:	e7f4      	b.n	800b456 <__utoa+0x6a>
 800b46c:	0800c884 	.word	0x0800c884

0800b470 <std>:
 800b470:	2300      	movs	r3, #0
 800b472:	b510      	push	{r4, lr}
 800b474:	4604      	mov	r4, r0
 800b476:	e9c0 3300 	strd	r3, r3, [r0]
 800b47a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b47e:	6083      	str	r3, [r0, #8]
 800b480:	8181      	strh	r1, [r0, #12]
 800b482:	6643      	str	r3, [r0, #100]	; 0x64
 800b484:	81c2      	strh	r2, [r0, #14]
 800b486:	6183      	str	r3, [r0, #24]
 800b488:	4619      	mov	r1, r3
 800b48a:	2208      	movs	r2, #8
 800b48c:	305c      	adds	r0, #92	; 0x5c
 800b48e:	f7ff ff6d 	bl	800b36c <memset>
 800b492:	4b05      	ldr	r3, [pc, #20]	; (800b4a8 <std+0x38>)
 800b494:	6224      	str	r4, [r4, #32]
 800b496:	6263      	str	r3, [r4, #36]	; 0x24
 800b498:	4b04      	ldr	r3, [pc, #16]	; (800b4ac <std+0x3c>)
 800b49a:	62a3      	str	r3, [r4, #40]	; 0x28
 800b49c:	4b04      	ldr	r3, [pc, #16]	; (800b4b0 <std+0x40>)
 800b49e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b4a0:	4b04      	ldr	r3, [pc, #16]	; (800b4b4 <std+0x44>)
 800b4a2:	6323      	str	r3, [r4, #48]	; 0x30
 800b4a4:	bd10      	pop	{r4, pc}
 800b4a6:	bf00      	nop
 800b4a8:	0800bfc9 	.word	0x0800bfc9
 800b4ac:	0800bfeb 	.word	0x0800bfeb
 800b4b0:	0800c023 	.word	0x0800c023
 800b4b4:	0800c047 	.word	0x0800c047

0800b4b8 <_cleanup_r>:
 800b4b8:	4901      	ldr	r1, [pc, #4]	; (800b4c0 <_cleanup_r+0x8>)
 800b4ba:	f000 b8af 	b.w	800b61c <_fwalk_reent>
 800b4be:	bf00      	nop
 800b4c0:	0800c321 	.word	0x0800c321

0800b4c4 <__sfmoreglue>:
 800b4c4:	b570      	push	{r4, r5, r6, lr}
 800b4c6:	2568      	movs	r5, #104	; 0x68
 800b4c8:	1e4a      	subs	r2, r1, #1
 800b4ca:	4355      	muls	r5, r2
 800b4cc:	460e      	mov	r6, r1
 800b4ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b4d2:	f000 f8c5 	bl	800b660 <_malloc_r>
 800b4d6:	4604      	mov	r4, r0
 800b4d8:	b140      	cbz	r0, 800b4ec <__sfmoreglue+0x28>
 800b4da:	2100      	movs	r1, #0
 800b4dc:	e9c0 1600 	strd	r1, r6, [r0]
 800b4e0:	300c      	adds	r0, #12
 800b4e2:	60a0      	str	r0, [r4, #8]
 800b4e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b4e8:	f7ff ff40 	bl	800b36c <memset>
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	bd70      	pop	{r4, r5, r6, pc}

0800b4f0 <__sfp_lock_acquire>:
 800b4f0:	4801      	ldr	r0, [pc, #4]	; (800b4f8 <__sfp_lock_acquire+0x8>)
 800b4f2:	f000 b8b3 	b.w	800b65c <__retarget_lock_acquire_recursive>
 800b4f6:	bf00      	nop
 800b4f8:	200015b0 	.word	0x200015b0

0800b4fc <__sfp_lock_release>:
 800b4fc:	4801      	ldr	r0, [pc, #4]	; (800b504 <__sfp_lock_release+0x8>)
 800b4fe:	f000 b8ae 	b.w	800b65e <__retarget_lock_release_recursive>
 800b502:	bf00      	nop
 800b504:	200015b0 	.word	0x200015b0

0800b508 <__sinit_lock_acquire>:
 800b508:	4801      	ldr	r0, [pc, #4]	; (800b510 <__sinit_lock_acquire+0x8>)
 800b50a:	f000 b8a7 	b.w	800b65c <__retarget_lock_acquire_recursive>
 800b50e:	bf00      	nop
 800b510:	200015ab 	.word	0x200015ab

0800b514 <__sinit_lock_release>:
 800b514:	4801      	ldr	r0, [pc, #4]	; (800b51c <__sinit_lock_release+0x8>)
 800b516:	f000 b8a2 	b.w	800b65e <__retarget_lock_release_recursive>
 800b51a:	bf00      	nop
 800b51c:	200015ab 	.word	0x200015ab

0800b520 <__sinit>:
 800b520:	b510      	push	{r4, lr}
 800b522:	4604      	mov	r4, r0
 800b524:	f7ff fff0 	bl	800b508 <__sinit_lock_acquire>
 800b528:	69a3      	ldr	r3, [r4, #24]
 800b52a:	b11b      	cbz	r3, 800b534 <__sinit+0x14>
 800b52c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b530:	f7ff bff0 	b.w	800b514 <__sinit_lock_release>
 800b534:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b538:	6523      	str	r3, [r4, #80]	; 0x50
 800b53a:	4b13      	ldr	r3, [pc, #76]	; (800b588 <__sinit+0x68>)
 800b53c:	4a13      	ldr	r2, [pc, #76]	; (800b58c <__sinit+0x6c>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	62a2      	str	r2, [r4, #40]	; 0x28
 800b542:	42a3      	cmp	r3, r4
 800b544:	bf08      	it	eq
 800b546:	2301      	moveq	r3, #1
 800b548:	4620      	mov	r0, r4
 800b54a:	bf08      	it	eq
 800b54c:	61a3      	streq	r3, [r4, #24]
 800b54e:	f000 f81f 	bl	800b590 <__sfp>
 800b552:	6060      	str	r0, [r4, #4]
 800b554:	4620      	mov	r0, r4
 800b556:	f000 f81b 	bl	800b590 <__sfp>
 800b55a:	60a0      	str	r0, [r4, #8]
 800b55c:	4620      	mov	r0, r4
 800b55e:	f000 f817 	bl	800b590 <__sfp>
 800b562:	2200      	movs	r2, #0
 800b564:	2104      	movs	r1, #4
 800b566:	60e0      	str	r0, [r4, #12]
 800b568:	6860      	ldr	r0, [r4, #4]
 800b56a:	f7ff ff81 	bl	800b470 <std>
 800b56e:	2201      	movs	r2, #1
 800b570:	2109      	movs	r1, #9
 800b572:	68a0      	ldr	r0, [r4, #8]
 800b574:	f7ff ff7c 	bl	800b470 <std>
 800b578:	2202      	movs	r2, #2
 800b57a:	2112      	movs	r1, #18
 800b57c:	68e0      	ldr	r0, [r4, #12]
 800b57e:	f7ff ff77 	bl	800b470 <std>
 800b582:	2301      	movs	r3, #1
 800b584:	61a3      	str	r3, [r4, #24]
 800b586:	e7d1      	b.n	800b52c <__sinit+0xc>
 800b588:	0800c880 	.word	0x0800c880
 800b58c:	0800b4b9 	.word	0x0800b4b9

0800b590 <__sfp>:
 800b590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b592:	4607      	mov	r7, r0
 800b594:	f7ff ffac 	bl	800b4f0 <__sfp_lock_acquire>
 800b598:	4b1e      	ldr	r3, [pc, #120]	; (800b614 <__sfp+0x84>)
 800b59a:	681e      	ldr	r6, [r3, #0]
 800b59c:	69b3      	ldr	r3, [r6, #24]
 800b59e:	b913      	cbnz	r3, 800b5a6 <__sfp+0x16>
 800b5a0:	4630      	mov	r0, r6
 800b5a2:	f7ff ffbd 	bl	800b520 <__sinit>
 800b5a6:	3648      	adds	r6, #72	; 0x48
 800b5a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b5ac:	3b01      	subs	r3, #1
 800b5ae:	d503      	bpl.n	800b5b8 <__sfp+0x28>
 800b5b0:	6833      	ldr	r3, [r6, #0]
 800b5b2:	b30b      	cbz	r3, 800b5f8 <__sfp+0x68>
 800b5b4:	6836      	ldr	r6, [r6, #0]
 800b5b6:	e7f7      	b.n	800b5a8 <__sfp+0x18>
 800b5b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b5bc:	b9d5      	cbnz	r5, 800b5f4 <__sfp+0x64>
 800b5be:	4b16      	ldr	r3, [pc, #88]	; (800b618 <__sfp+0x88>)
 800b5c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b5c4:	60e3      	str	r3, [r4, #12]
 800b5c6:	6665      	str	r5, [r4, #100]	; 0x64
 800b5c8:	f000 f847 	bl	800b65a <__retarget_lock_init_recursive>
 800b5cc:	f7ff ff96 	bl	800b4fc <__sfp_lock_release>
 800b5d0:	2208      	movs	r2, #8
 800b5d2:	4629      	mov	r1, r5
 800b5d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b5d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b5dc:	6025      	str	r5, [r4, #0]
 800b5de:	61a5      	str	r5, [r4, #24]
 800b5e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b5e4:	f7ff fec2 	bl	800b36c <memset>
 800b5e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b5ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5f4:	3468      	adds	r4, #104	; 0x68
 800b5f6:	e7d9      	b.n	800b5ac <__sfp+0x1c>
 800b5f8:	2104      	movs	r1, #4
 800b5fa:	4638      	mov	r0, r7
 800b5fc:	f7ff ff62 	bl	800b4c4 <__sfmoreglue>
 800b600:	4604      	mov	r4, r0
 800b602:	6030      	str	r0, [r6, #0]
 800b604:	2800      	cmp	r0, #0
 800b606:	d1d5      	bne.n	800b5b4 <__sfp+0x24>
 800b608:	f7ff ff78 	bl	800b4fc <__sfp_lock_release>
 800b60c:	230c      	movs	r3, #12
 800b60e:	603b      	str	r3, [r7, #0]
 800b610:	e7ee      	b.n	800b5f0 <__sfp+0x60>
 800b612:	bf00      	nop
 800b614:	0800c880 	.word	0x0800c880
 800b618:	ffff0001 	.word	0xffff0001

0800b61c <_fwalk_reent>:
 800b61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b620:	4606      	mov	r6, r0
 800b622:	4688      	mov	r8, r1
 800b624:	2700      	movs	r7, #0
 800b626:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b62a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b62e:	f1b9 0901 	subs.w	r9, r9, #1
 800b632:	d505      	bpl.n	800b640 <_fwalk_reent+0x24>
 800b634:	6824      	ldr	r4, [r4, #0]
 800b636:	2c00      	cmp	r4, #0
 800b638:	d1f7      	bne.n	800b62a <_fwalk_reent+0xe>
 800b63a:	4638      	mov	r0, r7
 800b63c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b640:	89ab      	ldrh	r3, [r5, #12]
 800b642:	2b01      	cmp	r3, #1
 800b644:	d907      	bls.n	800b656 <_fwalk_reent+0x3a>
 800b646:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b64a:	3301      	adds	r3, #1
 800b64c:	d003      	beq.n	800b656 <_fwalk_reent+0x3a>
 800b64e:	4629      	mov	r1, r5
 800b650:	4630      	mov	r0, r6
 800b652:	47c0      	blx	r8
 800b654:	4307      	orrs	r7, r0
 800b656:	3568      	adds	r5, #104	; 0x68
 800b658:	e7e9      	b.n	800b62e <_fwalk_reent+0x12>

0800b65a <__retarget_lock_init_recursive>:
 800b65a:	4770      	bx	lr

0800b65c <__retarget_lock_acquire_recursive>:
 800b65c:	4770      	bx	lr

0800b65e <__retarget_lock_release_recursive>:
 800b65e:	4770      	bx	lr

0800b660 <_malloc_r>:
 800b660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b662:	1ccd      	adds	r5, r1, #3
 800b664:	f025 0503 	bic.w	r5, r5, #3
 800b668:	3508      	adds	r5, #8
 800b66a:	2d0c      	cmp	r5, #12
 800b66c:	bf38      	it	cc
 800b66e:	250c      	movcc	r5, #12
 800b670:	2d00      	cmp	r5, #0
 800b672:	4606      	mov	r6, r0
 800b674:	db01      	blt.n	800b67a <_malloc_r+0x1a>
 800b676:	42a9      	cmp	r1, r5
 800b678:	d903      	bls.n	800b682 <_malloc_r+0x22>
 800b67a:	230c      	movs	r3, #12
 800b67c:	6033      	str	r3, [r6, #0]
 800b67e:	2000      	movs	r0, #0
 800b680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b682:	f000 ff27 	bl	800c4d4 <__malloc_lock>
 800b686:	4921      	ldr	r1, [pc, #132]	; (800b70c <_malloc_r+0xac>)
 800b688:	680a      	ldr	r2, [r1, #0]
 800b68a:	4614      	mov	r4, r2
 800b68c:	b99c      	cbnz	r4, 800b6b6 <_malloc_r+0x56>
 800b68e:	4f20      	ldr	r7, [pc, #128]	; (800b710 <_malloc_r+0xb0>)
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	b923      	cbnz	r3, 800b69e <_malloc_r+0x3e>
 800b694:	4621      	mov	r1, r4
 800b696:	4630      	mov	r0, r6
 800b698:	f000 fc86 	bl	800bfa8 <_sbrk_r>
 800b69c:	6038      	str	r0, [r7, #0]
 800b69e:	4629      	mov	r1, r5
 800b6a0:	4630      	mov	r0, r6
 800b6a2:	f000 fc81 	bl	800bfa8 <_sbrk_r>
 800b6a6:	1c43      	adds	r3, r0, #1
 800b6a8:	d123      	bne.n	800b6f2 <_malloc_r+0x92>
 800b6aa:	230c      	movs	r3, #12
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	6033      	str	r3, [r6, #0]
 800b6b0:	f000 ff16 	bl	800c4e0 <__malloc_unlock>
 800b6b4:	e7e3      	b.n	800b67e <_malloc_r+0x1e>
 800b6b6:	6823      	ldr	r3, [r4, #0]
 800b6b8:	1b5b      	subs	r3, r3, r5
 800b6ba:	d417      	bmi.n	800b6ec <_malloc_r+0x8c>
 800b6bc:	2b0b      	cmp	r3, #11
 800b6be:	d903      	bls.n	800b6c8 <_malloc_r+0x68>
 800b6c0:	6023      	str	r3, [r4, #0]
 800b6c2:	441c      	add	r4, r3
 800b6c4:	6025      	str	r5, [r4, #0]
 800b6c6:	e004      	b.n	800b6d2 <_malloc_r+0x72>
 800b6c8:	6863      	ldr	r3, [r4, #4]
 800b6ca:	42a2      	cmp	r2, r4
 800b6cc:	bf0c      	ite	eq
 800b6ce:	600b      	streq	r3, [r1, #0]
 800b6d0:	6053      	strne	r3, [r2, #4]
 800b6d2:	4630      	mov	r0, r6
 800b6d4:	f000 ff04 	bl	800c4e0 <__malloc_unlock>
 800b6d8:	f104 000b 	add.w	r0, r4, #11
 800b6dc:	1d23      	adds	r3, r4, #4
 800b6de:	f020 0007 	bic.w	r0, r0, #7
 800b6e2:	1ac2      	subs	r2, r0, r3
 800b6e4:	d0cc      	beq.n	800b680 <_malloc_r+0x20>
 800b6e6:	1a1b      	subs	r3, r3, r0
 800b6e8:	50a3      	str	r3, [r4, r2]
 800b6ea:	e7c9      	b.n	800b680 <_malloc_r+0x20>
 800b6ec:	4622      	mov	r2, r4
 800b6ee:	6864      	ldr	r4, [r4, #4]
 800b6f0:	e7cc      	b.n	800b68c <_malloc_r+0x2c>
 800b6f2:	1cc4      	adds	r4, r0, #3
 800b6f4:	f024 0403 	bic.w	r4, r4, #3
 800b6f8:	42a0      	cmp	r0, r4
 800b6fa:	d0e3      	beq.n	800b6c4 <_malloc_r+0x64>
 800b6fc:	1a21      	subs	r1, r4, r0
 800b6fe:	4630      	mov	r0, r6
 800b700:	f000 fc52 	bl	800bfa8 <_sbrk_r>
 800b704:	3001      	adds	r0, #1
 800b706:	d1dd      	bne.n	800b6c4 <_malloc_r+0x64>
 800b708:	e7cf      	b.n	800b6aa <_malloc_r+0x4a>
 800b70a:	bf00      	nop
 800b70c:	2000049c 	.word	0x2000049c
 800b710:	200004a0 	.word	0x200004a0

0800b714 <__ssputs_r>:
 800b714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b718:	688e      	ldr	r6, [r1, #8]
 800b71a:	4682      	mov	sl, r0
 800b71c:	429e      	cmp	r6, r3
 800b71e:	460c      	mov	r4, r1
 800b720:	4690      	mov	r8, r2
 800b722:	461f      	mov	r7, r3
 800b724:	d838      	bhi.n	800b798 <__ssputs_r+0x84>
 800b726:	898a      	ldrh	r2, [r1, #12]
 800b728:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b72c:	d032      	beq.n	800b794 <__ssputs_r+0x80>
 800b72e:	6825      	ldr	r5, [r4, #0]
 800b730:	6909      	ldr	r1, [r1, #16]
 800b732:	3301      	adds	r3, #1
 800b734:	eba5 0901 	sub.w	r9, r5, r1
 800b738:	6965      	ldr	r5, [r4, #20]
 800b73a:	444b      	add	r3, r9
 800b73c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b740:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b744:	106d      	asrs	r5, r5, #1
 800b746:	429d      	cmp	r5, r3
 800b748:	bf38      	it	cc
 800b74a:	461d      	movcc	r5, r3
 800b74c:	0553      	lsls	r3, r2, #21
 800b74e:	d531      	bpl.n	800b7b4 <__ssputs_r+0xa0>
 800b750:	4629      	mov	r1, r5
 800b752:	f7ff ff85 	bl	800b660 <_malloc_r>
 800b756:	4606      	mov	r6, r0
 800b758:	b950      	cbnz	r0, 800b770 <__ssputs_r+0x5c>
 800b75a:	230c      	movs	r3, #12
 800b75c:	f04f 30ff 	mov.w	r0, #4294967295
 800b760:	f8ca 3000 	str.w	r3, [sl]
 800b764:	89a3      	ldrh	r3, [r4, #12]
 800b766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b76a:	81a3      	strh	r3, [r4, #12]
 800b76c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b770:	464a      	mov	r2, r9
 800b772:	6921      	ldr	r1, [r4, #16]
 800b774:	f7ff fdec 	bl	800b350 <memcpy>
 800b778:	89a3      	ldrh	r3, [r4, #12]
 800b77a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b77e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b782:	81a3      	strh	r3, [r4, #12]
 800b784:	6126      	str	r6, [r4, #16]
 800b786:	444e      	add	r6, r9
 800b788:	6026      	str	r6, [r4, #0]
 800b78a:	463e      	mov	r6, r7
 800b78c:	6165      	str	r5, [r4, #20]
 800b78e:	eba5 0509 	sub.w	r5, r5, r9
 800b792:	60a5      	str	r5, [r4, #8]
 800b794:	42be      	cmp	r6, r7
 800b796:	d900      	bls.n	800b79a <__ssputs_r+0x86>
 800b798:	463e      	mov	r6, r7
 800b79a:	4632      	mov	r2, r6
 800b79c:	4641      	mov	r1, r8
 800b79e:	6820      	ldr	r0, [r4, #0]
 800b7a0:	f000 fe7e 	bl	800c4a0 <memmove>
 800b7a4:	68a3      	ldr	r3, [r4, #8]
 800b7a6:	6822      	ldr	r2, [r4, #0]
 800b7a8:	1b9b      	subs	r3, r3, r6
 800b7aa:	4432      	add	r2, r6
 800b7ac:	2000      	movs	r0, #0
 800b7ae:	60a3      	str	r3, [r4, #8]
 800b7b0:	6022      	str	r2, [r4, #0]
 800b7b2:	e7db      	b.n	800b76c <__ssputs_r+0x58>
 800b7b4:	462a      	mov	r2, r5
 800b7b6:	f000 fee5 	bl	800c584 <_realloc_r>
 800b7ba:	4606      	mov	r6, r0
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	d1e1      	bne.n	800b784 <__ssputs_r+0x70>
 800b7c0:	4650      	mov	r0, sl
 800b7c2:	6921      	ldr	r1, [r4, #16]
 800b7c4:	f000 fe92 	bl	800c4ec <_free_r>
 800b7c8:	e7c7      	b.n	800b75a <__ssputs_r+0x46>
	...

0800b7cc <_svfiprintf_r>:
 800b7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7d0:	4698      	mov	r8, r3
 800b7d2:	898b      	ldrh	r3, [r1, #12]
 800b7d4:	4607      	mov	r7, r0
 800b7d6:	061b      	lsls	r3, r3, #24
 800b7d8:	460d      	mov	r5, r1
 800b7da:	4614      	mov	r4, r2
 800b7dc:	b09d      	sub	sp, #116	; 0x74
 800b7de:	d50e      	bpl.n	800b7fe <_svfiprintf_r+0x32>
 800b7e0:	690b      	ldr	r3, [r1, #16]
 800b7e2:	b963      	cbnz	r3, 800b7fe <_svfiprintf_r+0x32>
 800b7e4:	2140      	movs	r1, #64	; 0x40
 800b7e6:	f7ff ff3b 	bl	800b660 <_malloc_r>
 800b7ea:	6028      	str	r0, [r5, #0]
 800b7ec:	6128      	str	r0, [r5, #16]
 800b7ee:	b920      	cbnz	r0, 800b7fa <_svfiprintf_r+0x2e>
 800b7f0:	230c      	movs	r3, #12
 800b7f2:	603b      	str	r3, [r7, #0]
 800b7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f8:	e0d1      	b.n	800b99e <_svfiprintf_r+0x1d2>
 800b7fa:	2340      	movs	r3, #64	; 0x40
 800b7fc:	616b      	str	r3, [r5, #20]
 800b7fe:	2300      	movs	r3, #0
 800b800:	9309      	str	r3, [sp, #36]	; 0x24
 800b802:	2320      	movs	r3, #32
 800b804:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b808:	2330      	movs	r3, #48	; 0x30
 800b80a:	f04f 0901 	mov.w	r9, #1
 800b80e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b812:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b9b8 <_svfiprintf_r+0x1ec>
 800b816:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b81a:	4623      	mov	r3, r4
 800b81c:	469a      	mov	sl, r3
 800b81e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b822:	b10a      	cbz	r2, 800b828 <_svfiprintf_r+0x5c>
 800b824:	2a25      	cmp	r2, #37	; 0x25
 800b826:	d1f9      	bne.n	800b81c <_svfiprintf_r+0x50>
 800b828:	ebba 0b04 	subs.w	fp, sl, r4
 800b82c:	d00b      	beq.n	800b846 <_svfiprintf_r+0x7a>
 800b82e:	465b      	mov	r3, fp
 800b830:	4622      	mov	r2, r4
 800b832:	4629      	mov	r1, r5
 800b834:	4638      	mov	r0, r7
 800b836:	f7ff ff6d 	bl	800b714 <__ssputs_r>
 800b83a:	3001      	adds	r0, #1
 800b83c:	f000 80aa 	beq.w	800b994 <_svfiprintf_r+0x1c8>
 800b840:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b842:	445a      	add	r2, fp
 800b844:	9209      	str	r2, [sp, #36]	; 0x24
 800b846:	f89a 3000 	ldrb.w	r3, [sl]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	f000 80a2 	beq.w	800b994 <_svfiprintf_r+0x1c8>
 800b850:	2300      	movs	r3, #0
 800b852:	f04f 32ff 	mov.w	r2, #4294967295
 800b856:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b85a:	f10a 0a01 	add.w	sl, sl, #1
 800b85e:	9304      	str	r3, [sp, #16]
 800b860:	9307      	str	r3, [sp, #28]
 800b862:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b866:	931a      	str	r3, [sp, #104]	; 0x68
 800b868:	4654      	mov	r4, sl
 800b86a:	2205      	movs	r2, #5
 800b86c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b870:	4851      	ldr	r0, [pc, #324]	; (800b9b8 <_svfiprintf_r+0x1ec>)
 800b872:	f000 fe07 	bl	800c484 <memchr>
 800b876:	9a04      	ldr	r2, [sp, #16]
 800b878:	b9d8      	cbnz	r0, 800b8b2 <_svfiprintf_r+0xe6>
 800b87a:	06d0      	lsls	r0, r2, #27
 800b87c:	bf44      	itt	mi
 800b87e:	2320      	movmi	r3, #32
 800b880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b884:	0711      	lsls	r1, r2, #28
 800b886:	bf44      	itt	mi
 800b888:	232b      	movmi	r3, #43	; 0x2b
 800b88a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b88e:	f89a 3000 	ldrb.w	r3, [sl]
 800b892:	2b2a      	cmp	r3, #42	; 0x2a
 800b894:	d015      	beq.n	800b8c2 <_svfiprintf_r+0xf6>
 800b896:	4654      	mov	r4, sl
 800b898:	2000      	movs	r0, #0
 800b89a:	f04f 0c0a 	mov.w	ip, #10
 800b89e:	9a07      	ldr	r2, [sp, #28]
 800b8a0:	4621      	mov	r1, r4
 800b8a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8a6:	3b30      	subs	r3, #48	; 0x30
 800b8a8:	2b09      	cmp	r3, #9
 800b8aa:	d94e      	bls.n	800b94a <_svfiprintf_r+0x17e>
 800b8ac:	b1b0      	cbz	r0, 800b8dc <_svfiprintf_r+0x110>
 800b8ae:	9207      	str	r2, [sp, #28]
 800b8b0:	e014      	b.n	800b8dc <_svfiprintf_r+0x110>
 800b8b2:	eba0 0308 	sub.w	r3, r0, r8
 800b8b6:	fa09 f303 	lsl.w	r3, r9, r3
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	46a2      	mov	sl, r4
 800b8be:	9304      	str	r3, [sp, #16]
 800b8c0:	e7d2      	b.n	800b868 <_svfiprintf_r+0x9c>
 800b8c2:	9b03      	ldr	r3, [sp, #12]
 800b8c4:	1d19      	adds	r1, r3, #4
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	9103      	str	r1, [sp, #12]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	bfbb      	ittet	lt
 800b8ce:	425b      	neglt	r3, r3
 800b8d0:	f042 0202 	orrlt.w	r2, r2, #2
 800b8d4:	9307      	strge	r3, [sp, #28]
 800b8d6:	9307      	strlt	r3, [sp, #28]
 800b8d8:	bfb8      	it	lt
 800b8da:	9204      	strlt	r2, [sp, #16]
 800b8dc:	7823      	ldrb	r3, [r4, #0]
 800b8de:	2b2e      	cmp	r3, #46	; 0x2e
 800b8e0:	d10c      	bne.n	800b8fc <_svfiprintf_r+0x130>
 800b8e2:	7863      	ldrb	r3, [r4, #1]
 800b8e4:	2b2a      	cmp	r3, #42	; 0x2a
 800b8e6:	d135      	bne.n	800b954 <_svfiprintf_r+0x188>
 800b8e8:	9b03      	ldr	r3, [sp, #12]
 800b8ea:	3402      	adds	r4, #2
 800b8ec:	1d1a      	adds	r2, r3, #4
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	9203      	str	r2, [sp, #12]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	bfb8      	it	lt
 800b8f6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b8fa:	9305      	str	r3, [sp, #20]
 800b8fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b9c8 <_svfiprintf_r+0x1fc>
 800b900:	2203      	movs	r2, #3
 800b902:	4650      	mov	r0, sl
 800b904:	7821      	ldrb	r1, [r4, #0]
 800b906:	f000 fdbd 	bl	800c484 <memchr>
 800b90a:	b140      	cbz	r0, 800b91e <_svfiprintf_r+0x152>
 800b90c:	2340      	movs	r3, #64	; 0x40
 800b90e:	eba0 000a 	sub.w	r0, r0, sl
 800b912:	fa03 f000 	lsl.w	r0, r3, r0
 800b916:	9b04      	ldr	r3, [sp, #16]
 800b918:	3401      	adds	r4, #1
 800b91a:	4303      	orrs	r3, r0
 800b91c:	9304      	str	r3, [sp, #16]
 800b91e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b922:	2206      	movs	r2, #6
 800b924:	4825      	ldr	r0, [pc, #148]	; (800b9bc <_svfiprintf_r+0x1f0>)
 800b926:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b92a:	f000 fdab 	bl	800c484 <memchr>
 800b92e:	2800      	cmp	r0, #0
 800b930:	d038      	beq.n	800b9a4 <_svfiprintf_r+0x1d8>
 800b932:	4b23      	ldr	r3, [pc, #140]	; (800b9c0 <_svfiprintf_r+0x1f4>)
 800b934:	bb1b      	cbnz	r3, 800b97e <_svfiprintf_r+0x1b2>
 800b936:	9b03      	ldr	r3, [sp, #12]
 800b938:	3307      	adds	r3, #7
 800b93a:	f023 0307 	bic.w	r3, r3, #7
 800b93e:	3308      	adds	r3, #8
 800b940:	9303      	str	r3, [sp, #12]
 800b942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b944:	4433      	add	r3, r6
 800b946:	9309      	str	r3, [sp, #36]	; 0x24
 800b948:	e767      	b.n	800b81a <_svfiprintf_r+0x4e>
 800b94a:	460c      	mov	r4, r1
 800b94c:	2001      	movs	r0, #1
 800b94e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b952:	e7a5      	b.n	800b8a0 <_svfiprintf_r+0xd4>
 800b954:	2300      	movs	r3, #0
 800b956:	f04f 0c0a 	mov.w	ip, #10
 800b95a:	4619      	mov	r1, r3
 800b95c:	3401      	adds	r4, #1
 800b95e:	9305      	str	r3, [sp, #20]
 800b960:	4620      	mov	r0, r4
 800b962:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b966:	3a30      	subs	r2, #48	; 0x30
 800b968:	2a09      	cmp	r2, #9
 800b96a:	d903      	bls.n	800b974 <_svfiprintf_r+0x1a8>
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d0c5      	beq.n	800b8fc <_svfiprintf_r+0x130>
 800b970:	9105      	str	r1, [sp, #20]
 800b972:	e7c3      	b.n	800b8fc <_svfiprintf_r+0x130>
 800b974:	4604      	mov	r4, r0
 800b976:	2301      	movs	r3, #1
 800b978:	fb0c 2101 	mla	r1, ip, r1, r2
 800b97c:	e7f0      	b.n	800b960 <_svfiprintf_r+0x194>
 800b97e:	ab03      	add	r3, sp, #12
 800b980:	9300      	str	r3, [sp, #0]
 800b982:	462a      	mov	r2, r5
 800b984:	4638      	mov	r0, r7
 800b986:	4b0f      	ldr	r3, [pc, #60]	; (800b9c4 <_svfiprintf_r+0x1f8>)
 800b988:	a904      	add	r1, sp, #16
 800b98a:	f3af 8000 	nop.w
 800b98e:	1c42      	adds	r2, r0, #1
 800b990:	4606      	mov	r6, r0
 800b992:	d1d6      	bne.n	800b942 <_svfiprintf_r+0x176>
 800b994:	89ab      	ldrh	r3, [r5, #12]
 800b996:	065b      	lsls	r3, r3, #25
 800b998:	f53f af2c 	bmi.w	800b7f4 <_svfiprintf_r+0x28>
 800b99c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b99e:	b01d      	add	sp, #116	; 0x74
 800b9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9a4:	ab03      	add	r3, sp, #12
 800b9a6:	9300      	str	r3, [sp, #0]
 800b9a8:	462a      	mov	r2, r5
 800b9aa:	4638      	mov	r0, r7
 800b9ac:	4b05      	ldr	r3, [pc, #20]	; (800b9c4 <_svfiprintf_r+0x1f8>)
 800b9ae:	a904      	add	r1, sp, #16
 800b9b0:	f000 f9d4 	bl	800bd5c <_printf_i>
 800b9b4:	e7eb      	b.n	800b98e <_svfiprintf_r+0x1c2>
 800b9b6:	bf00      	nop
 800b9b8:	0800c90c 	.word	0x0800c90c
 800b9bc:	0800c916 	.word	0x0800c916
 800b9c0:	00000000 	.word	0x00000000
 800b9c4:	0800b715 	.word	0x0800b715
 800b9c8:	0800c912 	.word	0x0800c912

0800b9cc <__sfputc_r>:
 800b9cc:	6893      	ldr	r3, [r2, #8]
 800b9ce:	b410      	push	{r4}
 800b9d0:	3b01      	subs	r3, #1
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	6093      	str	r3, [r2, #8]
 800b9d6:	da07      	bge.n	800b9e8 <__sfputc_r+0x1c>
 800b9d8:	6994      	ldr	r4, [r2, #24]
 800b9da:	42a3      	cmp	r3, r4
 800b9dc:	db01      	blt.n	800b9e2 <__sfputc_r+0x16>
 800b9de:	290a      	cmp	r1, #10
 800b9e0:	d102      	bne.n	800b9e8 <__sfputc_r+0x1c>
 800b9e2:	bc10      	pop	{r4}
 800b9e4:	f000 bb34 	b.w	800c050 <__swbuf_r>
 800b9e8:	6813      	ldr	r3, [r2, #0]
 800b9ea:	1c58      	adds	r0, r3, #1
 800b9ec:	6010      	str	r0, [r2, #0]
 800b9ee:	7019      	strb	r1, [r3, #0]
 800b9f0:	4608      	mov	r0, r1
 800b9f2:	bc10      	pop	{r4}
 800b9f4:	4770      	bx	lr

0800b9f6 <__sfputs_r>:
 800b9f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9f8:	4606      	mov	r6, r0
 800b9fa:	460f      	mov	r7, r1
 800b9fc:	4614      	mov	r4, r2
 800b9fe:	18d5      	adds	r5, r2, r3
 800ba00:	42ac      	cmp	r4, r5
 800ba02:	d101      	bne.n	800ba08 <__sfputs_r+0x12>
 800ba04:	2000      	movs	r0, #0
 800ba06:	e007      	b.n	800ba18 <__sfputs_r+0x22>
 800ba08:	463a      	mov	r2, r7
 800ba0a:	4630      	mov	r0, r6
 800ba0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba10:	f7ff ffdc 	bl	800b9cc <__sfputc_r>
 800ba14:	1c43      	adds	r3, r0, #1
 800ba16:	d1f3      	bne.n	800ba00 <__sfputs_r+0xa>
 800ba18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba1c <_vfiprintf_r>:
 800ba1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba20:	460d      	mov	r5, r1
 800ba22:	4614      	mov	r4, r2
 800ba24:	4698      	mov	r8, r3
 800ba26:	4606      	mov	r6, r0
 800ba28:	b09d      	sub	sp, #116	; 0x74
 800ba2a:	b118      	cbz	r0, 800ba34 <_vfiprintf_r+0x18>
 800ba2c:	6983      	ldr	r3, [r0, #24]
 800ba2e:	b90b      	cbnz	r3, 800ba34 <_vfiprintf_r+0x18>
 800ba30:	f7ff fd76 	bl	800b520 <__sinit>
 800ba34:	4b89      	ldr	r3, [pc, #548]	; (800bc5c <_vfiprintf_r+0x240>)
 800ba36:	429d      	cmp	r5, r3
 800ba38:	d11b      	bne.n	800ba72 <_vfiprintf_r+0x56>
 800ba3a:	6875      	ldr	r5, [r6, #4]
 800ba3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba3e:	07d9      	lsls	r1, r3, #31
 800ba40:	d405      	bmi.n	800ba4e <_vfiprintf_r+0x32>
 800ba42:	89ab      	ldrh	r3, [r5, #12]
 800ba44:	059a      	lsls	r2, r3, #22
 800ba46:	d402      	bmi.n	800ba4e <_vfiprintf_r+0x32>
 800ba48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba4a:	f7ff fe07 	bl	800b65c <__retarget_lock_acquire_recursive>
 800ba4e:	89ab      	ldrh	r3, [r5, #12]
 800ba50:	071b      	lsls	r3, r3, #28
 800ba52:	d501      	bpl.n	800ba58 <_vfiprintf_r+0x3c>
 800ba54:	692b      	ldr	r3, [r5, #16]
 800ba56:	b9eb      	cbnz	r3, 800ba94 <_vfiprintf_r+0x78>
 800ba58:	4629      	mov	r1, r5
 800ba5a:	4630      	mov	r0, r6
 800ba5c:	f000 fb5c 	bl	800c118 <__swsetup_r>
 800ba60:	b1c0      	cbz	r0, 800ba94 <_vfiprintf_r+0x78>
 800ba62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba64:	07dc      	lsls	r4, r3, #31
 800ba66:	d50e      	bpl.n	800ba86 <_vfiprintf_r+0x6a>
 800ba68:	f04f 30ff 	mov.w	r0, #4294967295
 800ba6c:	b01d      	add	sp, #116	; 0x74
 800ba6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba72:	4b7b      	ldr	r3, [pc, #492]	; (800bc60 <_vfiprintf_r+0x244>)
 800ba74:	429d      	cmp	r5, r3
 800ba76:	d101      	bne.n	800ba7c <_vfiprintf_r+0x60>
 800ba78:	68b5      	ldr	r5, [r6, #8]
 800ba7a:	e7df      	b.n	800ba3c <_vfiprintf_r+0x20>
 800ba7c:	4b79      	ldr	r3, [pc, #484]	; (800bc64 <_vfiprintf_r+0x248>)
 800ba7e:	429d      	cmp	r5, r3
 800ba80:	bf08      	it	eq
 800ba82:	68f5      	ldreq	r5, [r6, #12]
 800ba84:	e7da      	b.n	800ba3c <_vfiprintf_r+0x20>
 800ba86:	89ab      	ldrh	r3, [r5, #12]
 800ba88:	0598      	lsls	r0, r3, #22
 800ba8a:	d4ed      	bmi.n	800ba68 <_vfiprintf_r+0x4c>
 800ba8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba8e:	f7ff fde6 	bl	800b65e <__retarget_lock_release_recursive>
 800ba92:	e7e9      	b.n	800ba68 <_vfiprintf_r+0x4c>
 800ba94:	2300      	movs	r3, #0
 800ba96:	9309      	str	r3, [sp, #36]	; 0x24
 800ba98:	2320      	movs	r3, #32
 800ba9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba9e:	2330      	movs	r3, #48	; 0x30
 800baa0:	f04f 0901 	mov.w	r9, #1
 800baa4:	f8cd 800c 	str.w	r8, [sp, #12]
 800baa8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800bc68 <_vfiprintf_r+0x24c>
 800baac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bab0:	4623      	mov	r3, r4
 800bab2:	469a      	mov	sl, r3
 800bab4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bab8:	b10a      	cbz	r2, 800babe <_vfiprintf_r+0xa2>
 800baba:	2a25      	cmp	r2, #37	; 0x25
 800babc:	d1f9      	bne.n	800bab2 <_vfiprintf_r+0x96>
 800babe:	ebba 0b04 	subs.w	fp, sl, r4
 800bac2:	d00b      	beq.n	800badc <_vfiprintf_r+0xc0>
 800bac4:	465b      	mov	r3, fp
 800bac6:	4622      	mov	r2, r4
 800bac8:	4629      	mov	r1, r5
 800baca:	4630      	mov	r0, r6
 800bacc:	f7ff ff93 	bl	800b9f6 <__sfputs_r>
 800bad0:	3001      	adds	r0, #1
 800bad2:	f000 80aa 	beq.w	800bc2a <_vfiprintf_r+0x20e>
 800bad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bad8:	445a      	add	r2, fp
 800bada:	9209      	str	r2, [sp, #36]	; 0x24
 800badc:	f89a 3000 	ldrb.w	r3, [sl]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	f000 80a2 	beq.w	800bc2a <_vfiprintf_r+0x20e>
 800bae6:	2300      	movs	r3, #0
 800bae8:	f04f 32ff 	mov.w	r2, #4294967295
 800baec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800baf0:	f10a 0a01 	add.w	sl, sl, #1
 800baf4:	9304      	str	r3, [sp, #16]
 800baf6:	9307      	str	r3, [sp, #28]
 800baf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bafc:	931a      	str	r3, [sp, #104]	; 0x68
 800bafe:	4654      	mov	r4, sl
 800bb00:	2205      	movs	r2, #5
 800bb02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb06:	4858      	ldr	r0, [pc, #352]	; (800bc68 <_vfiprintf_r+0x24c>)
 800bb08:	f000 fcbc 	bl	800c484 <memchr>
 800bb0c:	9a04      	ldr	r2, [sp, #16]
 800bb0e:	b9d8      	cbnz	r0, 800bb48 <_vfiprintf_r+0x12c>
 800bb10:	06d1      	lsls	r1, r2, #27
 800bb12:	bf44      	itt	mi
 800bb14:	2320      	movmi	r3, #32
 800bb16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb1a:	0713      	lsls	r3, r2, #28
 800bb1c:	bf44      	itt	mi
 800bb1e:	232b      	movmi	r3, #43	; 0x2b
 800bb20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb24:	f89a 3000 	ldrb.w	r3, [sl]
 800bb28:	2b2a      	cmp	r3, #42	; 0x2a
 800bb2a:	d015      	beq.n	800bb58 <_vfiprintf_r+0x13c>
 800bb2c:	4654      	mov	r4, sl
 800bb2e:	2000      	movs	r0, #0
 800bb30:	f04f 0c0a 	mov.w	ip, #10
 800bb34:	9a07      	ldr	r2, [sp, #28]
 800bb36:	4621      	mov	r1, r4
 800bb38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb3c:	3b30      	subs	r3, #48	; 0x30
 800bb3e:	2b09      	cmp	r3, #9
 800bb40:	d94e      	bls.n	800bbe0 <_vfiprintf_r+0x1c4>
 800bb42:	b1b0      	cbz	r0, 800bb72 <_vfiprintf_r+0x156>
 800bb44:	9207      	str	r2, [sp, #28]
 800bb46:	e014      	b.n	800bb72 <_vfiprintf_r+0x156>
 800bb48:	eba0 0308 	sub.w	r3, r0, r8
 800bb4c:	fa09 f303 	lsl.w	r3, r9, r3
 800bb50:	4313      	orrs	r3, r2
 800bb52:	46a2      	mov	sl, r4
 800bb54:	9304      	str	r3, [sp, #16]
 800bb56:	e7d2      	b.n	800bafe <_vfiprintf_r+0xe2>
 800bb58:	9b03      	ldr	r3, [sp, #12]
 800bb5a:	1d19      	adds	r1, r3, #4
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	9103      	str	r1, [sp, #12]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	bfbb      	ittet	lt
 800bb64:	425b      	neglt	r3, r3
 800bb66:	f042 0202 	orrlt.w	r2, r2, #2
 800bb6a:	9307      	strge	r3, [sp, #28]
 800bb6c:	9307      	strlt	r3, [sp, #28]
 800bb6e:	bfb8      	it	lt
 800bb70:	9204      	strlt	r2, [sp, #16]
 800bb72:	7823      	ldrb	r3, [r4, #0]
 800bb74:	2b2e      	cmp	r3, #46	; 0x2e
 800bb76:	d10c      	bne.n	800bb92 <_vfiprintf_r+0x176>
 800bb78:	7863      	ldrb	r3, [r4, #1]
 800bb7a:	2b2a      	cmp	r3, #42	; 0x2a
 800bb7c:	d135      	bne.n	800bbea <_vfiprintf_r+0x1ce>
 800bb7e:	9b03      	ldr	r3, [sp, #12]
 800bb80:	3402      	adds	r4, #2
 800bb82:	1d1a      	adds	r2, r3, #4
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	9203      	str	r2, [sp, #12]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	bfb8      	it	lt
 800bb8c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb90:	9305      	str	r3, [sp, #20]
 800bb92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bc78 <_vfiprintf_r+0x25c>
 800bb96:	2203      	movs	r2, #3
 800bb98:	4650      	mov	r0, sl
 800bb9a:	7821      	ldrb	r1, [r4, #0]
 800bb9c:	f000 fc72 	bl	800c484 <memchr>
 800bba0:	b140      	cbz	r0, 800bbb4 <_vfiprintf_r+0x198>
 800bba2:	2340      	movs	r3, #64	; 0x40
 800bba4:	eba0 000a 	sub.w	r0, r0, sl
 800bba8:	fa03 f000 	lsl.w	r0, r3, r0
 800bbac:	9b04      	ldr	r3, [sp, #16]
 800bbae:	3401      	adds	r4, #1
 800bbb0:	4303      	orrs	r3, r0
 800bbb2:	9304      	str	r3, [sp, #16]
 800bbb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbb8:	2206      	movs	r2, #6
 800bbba:	482c      	ldr	r0, [pc, #176]	; (800bc6c <_vfiprintf_r+0x250>)
 800bbbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbc0:	f000 fc60 	bl	800c484 <memchr>
 800bbc4:	2800      	cmp	r0, #0
 800bbc6:	d03f      	beq.n	800bc48 <_vfiprintf_r+0x22c>
 800bbc8:	4b29      	ldr	r3, [pc, #164]	; (800bc70 <_vfiprintf_r+0x254>)
 800bbca:	bb1b      	cbnz	r3, 800bc14 <_vfiprintf_r+0x1f8>
 800bbcc:	9b03      	ldr	r3, [sp, #12]
 800bbce:	3307      	adds	r3, #7
 800bbd0:	f023 0307 	bic.w	r3, r3, #7
 800bbd4:	3308      	adds	r3, #8
 800bbd6:	9303      	str	r3, [sp, #12]
 800bbd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbda:	443b      	add	r3, r7
 800bbdc:	9309      	str	r3, [sp, #36]	; 0x24
 800bbde:	e767      	b.n	800bab0 <_vfiprintf_r+0x94>
 800bbe0:	460c      	mov	r4, r1
 800bbe2:	2001      	movs	r0, #1
 800bbe4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbe8:	e7a5      	b.n	800bb36 <_vfiprintf_r+0x11a>
 800bbea:	2300      	movs	r3, #0
 800bbec:	f04f 0c0a 	mov.w	ip, #10
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	3401      	adds	r4, #1
 800bbf4:	9305      	str	r3, [sp, #20]
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbfc:	3a30      	subs	r2, #48	; 0x30
 800bbfe:	2a09      	cmp	r2, #9
 800bc00:	d903      	bls.n	800bc0a <_vfiprintf_r+0x1ee>
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d0c5      	beq.n	800bb92 <_vfiprintf_r+0x176>
 800bc06:	9105      	str	r1, [sp, #20]
 800bc08:	e7c3      	b.n	800bb92 <_vfiprintf_r+0x176>
 800bc0a:	4604      	mov	r4, r0
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc12:	e7f0      	b.n	800bbf6 <_vfiprintf_r+0x1da>
 800bc14:	ab03      	add	r3, sp, #12
 800bc16:	9300      	str	r3, [sp, #0]
 800bc18:	462a      	mov	r2, r5
 800bc1a:	4630      	mov	r0, r6
 800bc1c:	4b15      	ldr	r3, [pc, #84]	; (800bc74 <_vfiprintf_r+0x258>)
 800bc1e:	a904      	add	r1, sp, #16
 800bc20:	f3af 8000 	nop.w
 800bc24:	4607      	mov	r7, r0
 800bc26:	1c78      	adds	r0, r7, #1
 800bc28:	d1d6      	bne.n	800bbd8 <_vfiprintf_r+0x1bc>
 800bc2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc2c:	07d9      	lsls	r1, r3, #31
 800bc2e:	d405      	bmi.n	800bc3c <_vfiprintf_r+0x220>
 800bc30:	89ab      	ldrh	r3, [r5, #12]
 800bc32:	059a      	lsls	r2, r3, #22
 800bc34:	d402      	bmi.n	800bc3c <_vfiprintf_r+0x220>
 800bc36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc38:	f7ff fd11 	bl	800b65e <__retarget_lock_release_recursive>
 800bc3c:	89ab      	ldrh	r3, [r5, #12]
 800bc3e:	065b      	lsls	r3, r3, #25
 800bc40:	f53f af12 	bmi.w	800ba68 <_vfiprintf_r+0x4c>
 800bc44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc46:	e711      	b.n	800ba6c <_vfiprintf_r+0x50>
 800bc48:	ab03      	add	r3, sp, #12
 800bc4a:	9300      	str	r3, [sp, #0]
 800bc4c:	462a      	mov	r2, r5
 800bc4e:	4630      	mov	r0, r6
 800bc50:	4b08      	ldr	r3, [pc, #32]	; (800bc74 <_vfiprintf_r+0x258>)
 800bc52:	a904      	add	r1, sp, #16
 800bc54:	f000 f882 	bl	800bd5c <_printf_i>
 800bc58:	e7e4      	b.n	800bc24 <_vfiprintf_r+0x208>
 800bc5a:	bf00      	nop
 800bc5c:	0800c8cc 	.word	0x0800c8cc
 800bc60:	0800c8ec 	.word	0x0800c8ec
 800bc64:	0800c8ac 	.word	0x0800c8ac
 800bc68:	0800c90c 	.word	0x0800c90c
 800bc6c:	0800c916 	.word	0x0800c916
 800bc70:	00000000 	.word	0x00000000
 800bc74:	0800b9f7 	.word	0x0800b9f7
 800bc78:	0800c912 	.word	0x0800c912

0800bc7c <_printf_common>:
 800bc7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc80:	4616      	mov	r6, r2
 800bc82:	4699      	mov	r9, r3
 800bc84:	688a      	ldr	r2, [r1, #8]
 800bc86:	690b      	ldr	r3, [r1, #16]
 800bc88:	4607      	mov	r7, r0
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	bfb8      	it	lt
 800bc8e:	4613      	movlt	r3, r2
 800bc90:	6033      	str	r3, [r6, #0]
 800bc92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc96:	460c      	mov	r4, r1
 800bc98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc9c:	b10a      	cbz	r2, 800bca2 <_printf_common+0x26>
 800bc9e:	3301      	adds	r3, #1
 800bca0:	6033      	str	r3, [r6, #0]
 800bca2:	6823      	ldr	r3, [r4, #0]
 800bca4:	0699      	lsls	r1, r3, #26
 800bca6:	bf42      	ittt	mi
 800bca8:	6833      	ldrmi	r3, [r6, #0]
 800bcaa:	3302      	addmi	r3, #2
 800bcac:	6033      	strmi	r3, [r6, #0]
 800bcae:	6825      	ldr	r5, [r4, #0]
 800bcb0:	f015 0506 	ands.w	r5, r5, #6
 800bcb4:	d106      	bne.n	800bcc4 <_printf_common+0x48>
 800bcb6:	f104 0a19 	add.w	sl, r4, #25
 800bcba:	68e3      	ldr	r3, [r4, #12]
 800bcbc:	6832      	ldr	r2, [r6, #0]
 800bcbe:	1a9b      	subs	r3, r3, r2
 800bcc0:	42ab      	cmp	r3, r5
 800bcc2:	dc28      	bgt.n	800bd16 <_printf_common+0x9a>
 800bcc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bcc8:	1e13      	subs	r3, r2, #0
 800bcca:	6822      	ldr	r2, [r4, #0]
 800bccc:	bf18      	it	ne
 800bcce:	2301      	movne	r3, #1
 800bcd0:	0692      	lsls	r2, r2, #26
 800bcd2:	d42d      	bmi.n	800bd30 <_printf_common+0xb4>
 800bcd4:	4649      	mov	r1, r9
 800bcd6:	4638      	mov	r0, r7
 800bcd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bcdc:	47c0      	blx	r8
 800bcde:	3001      	adds	r0, #1
 800bce0:	d020      	beq.n	800bd24 <_printf_common+0xa8>
 800bce2:	6823      	ldr	r3, [r4, #0]
 800bce4:	68e5      	ldr	r5, [r4, #12]
 800bce6:	f003 0306 	and.w	r3, r3, #6
 800bcea:	2b04      	cmp	r3, #4
 800bcec:	bf18      	it	ne
 800bcee:	2500      	movne	r5, #0
 800bcf0:	6832      	ldr	r2, [r6, #0]
 800bcf2:	f04f 0600 	mov.w	r6, #0
 800bcf6:	68a3      	ldr	r3, [r4, #8]
 800bcf8:	bf08      	it	eq
 800bcfa:	1aad      	subeq	r5, r5, r2
 800bcfc:	6922      	ldr	r2, [r4, #16]
 800bcfe:	bf08      	it	eq
 800bd00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd04:	4293      	cmp	r3, r2
 800bd06:	bfc4      	itt	gt
 800bd08:	1a9b      	subgt	r3, r3, r2
 800bd0a:	18ed      	addgt	r5, r5, r3
 800bd0c:	341a      	adds	r4, #26
 800bd0e:	42b5      	cmp	r5, r6
 800bd10:	d11a      	bne.n	800bd48 <_printf_common+0xcc>
 800bd12:	2000      	movs	r0, #0
 800bd14:	e008      	b.n	800bd28 <_printf_common+0xac>
 800bd16:	2301      	movs	r3, #1
 800bd18:	4652      	mov	r2, sl
 800bd1a:	4649      	mov	r1, r9
 800bd1c:	4638      	mov	r0, r7
 800bd1e:	47c0      	blx	r8
 800bd20:	3001      	adds	r0, #1
 800bd22:	d103      	bne.n	800bd2c <_printf_common+0xb0>
 800bd24:	f04f 30ff 	mov.w	r0, #4294967295
 800bd28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd2c:	3501      	adds	r5, #1
 800bd2e:	e7c4      	b.n	800bcba <_printf_common+0x3e>
 800bd30:	2030      	movs	r0, #48	; 0x30
 800bd32:	18e1      	adds	r1, r4, r3
 800bd34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd38:	1c5a      	adds	r2, r3, #1
 800bd3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd3e:	4422      	add	r2, r4
 800bd40:	3302      	adds	r3, #2
 800bd42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd46:	e7c5      	b.n	800bcd4 <_printf_common+0x58>
 800bd48:	2301      	movs	r3, #1
 800bd4a:	4622      	mov	r2, r4
 800bd4c:	4649      	mov	r1, r9
 800bd4e:	4638      	mov	r0, r7
 800bd50:	47c0      	blx	r8
 800bd52:	3001      	adds	r0, #1
 800bd54:	d0e6      	beq.n	800bd24 <_printf_common+0xa8>
 800bd56:	3601      	adds	r6, #1
 800bd58:	e7d9      	b.n	800bd0e <_printf_common+0x92>
	...

0800bd5c <_printf_i>:
 800bd5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd60:	460c      	mov	r4, r1
 800bd62:	7e27      	ldrb	r7, [r4, #24]
 800bd64:	4691      	mov	r9, r2
 800bd66:	2f78      	cmp	r7, #120	; 0x78
 800bd68:	4680      	mov	r8, r0
 800bd6a:	469a      	mov	sl, r3
 800bd6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bd6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd72:	d807      	bhi.n	800bd84 <_printf_i+0x28>
 800bd74:	2f62      	cmp	r7, #98	; 0x62
 800bd76:	d80a      	bhi.n	800bd8e <_printf_i+0x32>
 800bd78:	2f00      	cmp	r7, #0
 800bd7a:	f000 80d9 	beq.w	800bf30 <_printf_i+0x1d4>
 800bd7e:	2f58      	cmp	r7, #88	; 0x58
 800bd80:	f000 80a4 	beq.w	800becc <_printf_i+0x170>
 800bd84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bd88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd8c:	e03a      	b.n	800be04 <_printf_i+0xa8>
 800bd8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd92:	2b15      	cmp	r3, #21
 800bd94:	d8f6      	bhi.n	800bd84 <_printf_i+0x28>
 800bd96:	a001      	add	r0, pc, #4	; (adr r0, 800bd9c <_printf_i+0x40>)
 800bd98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bd9c:	0800bdf5 	.word	0x0800bdf5
 800bda0:	0800be09 	.word	0x0800be09
 800bda4:	0800bd85 	.word	0x0800bd85
 800bda8:	0800bd85 	.word	0x0800bd85
 800bdac:	0800bd85 	.word	0x0800bd85
 800bdb0:	0800bd85 	.word	0x0800bd85
 800bdb4:	0800be09 	.word	0x0800be09
 800bdb8:	0800bd85 	.word	0x0800bd85
 800bdbc:	0800bd85 	.word	0x0800bd85
 800bdc0:	0800bd85 	.word	0x0800bd85
 800bdc4:	0800bd85 	.word	0x0800bd85
 800bdc8:	0800bf17 	.word	0x0800bf17
 800bdcc:	0800be39 	.word	0x0800be39
 800bdd0:	0800bef9 	.word	0x0800bef9
 800bdd4:	0800bd85 	.word	0x0800bd85
 800bdd8:	0800bd85 	.word	0x0800bd85
 800bddc:	0800bf39 	.word	0x0800bf39
 800bde0:	0800bd85 	.word	0x0800bd85
 800bde4:	0800be39 	.word	0x0800be39
 800bde8:	0800bd85 	.word	0x0800bd85
 800bdec:	0800bd85 	.word	0x0800bd85
 800bdf0:	0800bf01 	.word	0x0800bf01
 800bdf4:	680b      	ldr	r3, [r1, #0]
 800bdf6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bdfa:	1d1a      	adds	r2, r3, #4
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	600a      	str	r2, [r1, #0]
 800be00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be04:	2301      	movs	r3, #1
 800be06:	e0a4      	b.n	800bf52 <_printf_i+0x1f6>
 800be08:	6825      	ldr	r5, [r4, #0]
 800be0a:	6808      	ldr	r0, [r1, #0]
 800be0c:	062e      	lsls	r6, r5, #24
 800be0e:	f100 0304 	add.w	r3, r0, #4
 800be12:	d50a      	bpl.n	800be2a <_printf_i+0xce>
 800be14:	6805      	ldr	r5, [r0, #0]
 800be16:	600b      	str	r3, [r1, #0]
 800be18:	2d00      	cmp	r5, #0
 800be1a:	da03      	bge.n	800be24 <_printf_i+0xc8>
 800be1c:	232d      	movs	r3, #45	; 0x2d
 800be1e:	426d      	negs	r5, r5
 800be20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be24:	230a      	movs	r3, #10
 800be26:	485e      	ldr	r0, [pc, #376]	; (800bfa0 <_printf_i+0x244>)
 800be28:	e019      	b.n	800be5e <_printf_i+0x102>
 800be2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800be2e:	6805      	ldr	r5, [r0, #0]
 800be30:	600b      	str	r3, [r1, #0]
 800be32:	bf18      	it	ne
 800be34:	b22d      	sxthne	r5, r5
 800be36:	e7ef      	b.n	800be18 <_printf_i+0xbc>
 800be38:	680b      	ldr	r3, [r1, #0]
 800be3a:	6825      	ldr	r5, [r4, #0]
 800be3c:	1d18      	adds	r0, r3, #4
 800be3e:	6008      	str	r0, [r1, #0]
 800be40:	0628      	lsls	r0, r5, #24
 800be42:	d501      	bpl.n	800be48 <_printf_i+0xec>
 800be44:	681d      	ldr	r5, [r3, #0]
 800be46:	e002      	b.n	800be4e <_printf_i+0xf2>
 800be48:	0669      	lsls	r1, r5, #25
 800be4a:	d5fb      	bpl.n	800be44 <_printf_i+0xe8>
 800be4c:	881d      	ldrh	r5, [r3, #0]
 800be4e:	2f6f      	cmp	r7, #111	; 0x6f
 800be50:	bf0c      	ite	eq
 800be52:	2308      	moveq	r3, #8
 800be54:	230a      	movne	r3, #10
 800be56:	4852      	ldr	r0, [pc, #328]	; (800bfa0 <_printf_i+0x244>)
 800be58:	2100      	movs	r1, #0
 800be5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be5e:	6866      	ldr	r6, [r4, #4]
 800be60:	2e00      	cmp	r6, #0
 800be62:	bfa8      	it	ge
 800be64:	6821      	ldrge	r1, [r4, #0]
 800be66:	60a6      	str	r6, [r4, #8]
 800be68:	bfa4      	itt	ge
 800be6a:	f021 0104 	bicge.w	r1, r1, #4
 800be6e:	6021      	strge	r1, [r4, #0]
 800be70:	b90d      	cbnz	r5, 800be76 <_printf_i+0x11a>
 800be72:	2e00      	cmp	r6, #0
 800be74:	d04d      	beq.n	800bf12 <_printf_i+0x1b6>
 800be76:	4616      	mov	r6, r2
 800be78:	fbb5 f1f3 	udiv	r1, r5, r3
 800be7c:	fb03 5711 	mls	r7, r3, r1, r5
 800be80:	5dc7      	ldrb	r7, [r0, r7]
 800be82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800be86:	462f      	mov	r7, r5
 800be88:	42bb      	cmp	r3, r7
 800be8a:	460d      	mov	r5, r1
 800be8c:	d9f4      	bls.n	800be78 <_printf_i+0x11c>
 800be8e:	2b08      	cmp	r3, #8
 800be90:	d10b      	bne.n	800beaa <_printf_i+0x14e>
 800be92:	6823      	ldr	r3, [r4, #0]
 800be94:	07df      	lsls	r7, r3, #31
 800be96:	d508      	bpl.n	800beaa <_printf_i+0x14e>
 800be98:	6923      	ldr	r3, [r4, #16]
 800be9a:	6861      	ldr	r1, [r4, #4]
 800be9c:	4299      	cmp	r1, r3
 800be9e:	bfde      	ittt	le
 800bea0:	2330      	movle	r3, #48	; 0x30
 800bea2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bea6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800beaa:	1b92      	subs	r2, r2, r6
 800beac:	6122      	str	r2, [r4, #16]
 800beae:	464b      	mov	r3, r9
 800beb0:	4621      	mov	r1, r4
 800beb2:	4640      	mov	r0, r8
 800beb4:	f8cd a000 	str.w	sl, [sp]
 800beb8:	aa03      	add	r2, sp, #12
 800beba:	f7ff fedf 	bl	800bc7c <_printf_common>
 800bebe:	3001      	adds	r0, #1
 800bec0:	d14c      	bne.n	800bf5c <_printf_i+0x200>
 800bec2:	f04f 30ff 	mov.w	r0, #4294967295
 800bec6:	b004      	add	sp, #16
 800bec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800becc:	4834      	ldr	r0, [pc, #208]	; (800bfa0 <_printf_i+0x244>)
 800bece:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bed2:	680e      	ldr	r6, [r1, #0]
 800bed4:	6823      	ldr	r3, [r4, #0]
 800bed6:	f856 5b04 	ldr.w	r5, [r6], #4
 800beda:	061f      	lsls	r7, r3, #24
 800bedc:	600e      	str	r6, [r1, #0]
 800bede:	d514      	bpl.n	800bf0a <_printf_i+0x1ae>
 800bee0:	07d9      	lsls	r1, r3, #31
 800bee2:	bf44      	itt	mi
 800bee4:	f043 0320 	orrmi.w	r3, r3, #32
 800bee8:	6023      	strmi	r3, [r4, #0]
 800beea:	b91d      	cbnz	r5, 800bef4 <_printf_i+0x198>
 800beec:	6823      	ldr	r3, [r4, #0]
 800beee:	f023 0320 	bic.w	r3, r3, #32
 800bef2:	6023      	str	r3, [r4, #0]
 800bef4:	2310      	movs	r3, #16
 800bef6:	e7af      	b.n	800be58 <_printf_i+0xfc>
 800bef8:	6823      	ldr	r3, [r4, #0]
 800befa:	f043 0320 	orr.w	r3, r3, #32
 800befe:	6023      	str	r3, [r4, #0]
 800bf00:	2378      	movs	r3, #120	; 0x78
 800bf02:	4828      	ldr	r0, [pc, #160]	; (800bfa4 <_printf_i+0x248>)
 800bf04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bf08:	e7e3      	b.n	800bed2 <_printf_i+0x176>
 800bf0a:	065e      	lsls	r6, r3, #25
 800bf0c:	bf48      	it	mi
 800bf0e:	b2ad      	uxthmi	r5, r5
 800bf10:	e7e6      	b.n	800bee0 <_printf_i+0x184>
 800bf12:	4616      	mov	r6, r2
 800bf14:	e7bb      	b.n	800be8e <_printf_i+0x132>
 800bf16:	680b      	ldr	r3, [r1, #0]
 800bf18:	6826      	ldr	r6, [r4, #0]
 800bf1a:	1d1d      	adds	r5, r3, #4
 800bf1c:	6960      	ldr	r0, [r4, #20]
 800bf1e:	600d      	str	r5, [r1, #0]
 800bf20:	0635      	lsls	r5, r6, #24
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	d501      	bpl.n	800bf2a <_printf_i+0x1ce>
 800bf26:	6018      	str	r0, [r3, #0]
 800bf28:	e002      	b.n	800bf30 <_printf_i+0x1d4>
 800bf2a:	0671      	lsls	r1, r6, #25
 800bf2c:	d5fb      	bpl.n	800bf26 <_printf_i+0x1ca>
 800bf2e:	8018      	strh	r0, [r3, #0]
 800bf30:	2300      	movs	r3, #0
 800bf32:	4616      	mov	r6, r2
 800bf34:	6123      	str	r3, [r4, #16]
 800bf36:	e7ba      	b.n	800beae <_printf_i+0x152>
 800bf38:	680b      	ldr	r3, [r1, #0]
 800bf3a:	1d1a      	adds	r2, r3, #4
 800bf3c:	600a      	str	r2, [r1, #0]
 800bf3e:	681e      	ldr	r6, [r3, #0]
 800bf40:	2100      	movs	r1, #0
 800bf42:	4630      	mov	r0, r6
 800bf44:	6862      	ldr	r2, [r4, #4]
 800bf46:	f000 fa9d 	bl	800c484 <memchr>
 800bf4a:	b108      	cbz	r0, 800bf50 <_printf_i+0x1f4>
 800bf4c:	1b80      	subs	r0, r0, r6
 800bf4e:	6060      	str	r0, [r4, #4]
 800bf50:	6863      	ldr	r3, [r4, #4]
 800bf52:	6123      	str	r3, [r4, #16]
 800bf54:	2300      	movs	r3, #0
 800bf56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf5a:	e7a8      	b.n	800beae <_printf_i+0x152>
 800bf5c:	4632      	mov	r2, r6
 800bf5e:	4649      	mov	r1, r9
 800bf60:	4640      	mov	r0, r8
 800bf62:	6923      	ldr	r3, [r4, #16]
 800bf64:	47d0      	blx	sl
 800bf66:	3001      	adds	r0, #1
 800bf68:	d0ab      	beq.n	800bec2 <_printf_i+0x166>
 800bf6a:	6823      	ldr	r3, [r4, #0]
 800bf6c:	079b      	lsls	r3, r3, #30
 800bf6e:	d413      	bmi.n	800bf98 <_printf_i+0x23c>
 800bf70:	68e0      	ldr	r0, [r4, #12]
 800bf72:	9b03      	ldr	r3, [sp, #12]
 800bf74:	4298      	cmp	r0, r3
 800bf76:	bfb8      	it	lt
 800bf78:	4618      	movlt	r0, r3
 800bf7a:	e7a4      	b.n	800bec6 <_printf_i+0x16a>
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	4632      	mov	r2, r6
 800bf80:	4649      	mov	r1, r9
 800bf82:	4640      	mov	r0, r8
 800bf84:	47d0      	blx	sl
 800bf86:	3001      	adds	r0, #1
 800bf88:	d09b      	beq.n	800bec2 <_printf_i+0x166>
 800bf8a:	3501      	adds	r5, #1
 800bf8c:	68e3      	ldr	r3, [r4, #12]
 800bf8e:	9903      	ldr	r1, [sp, #12]
 800bf90:	1a5b      	subs	r3, r3, r1
 800bf92:	42ab      	cmp	r3, r5
 800bf94:	dcf2      	bgt.n	800bf7c <_printf_i+0x220>
 800bf96:	e7eb      	b.n	800bf70 <_printf_i+0x214>
 800bf98:	2500      	movs	r5, #0
 800bf9a:	f104 0619 	add.w	r6, r4, #25
 800bf9e:	e7f5      	b.n	800bf8c <_printf_i+0x230>
 800bfa0:	0800c91d 	.word	0x0800c91d
 800bfa4:	0800c92e 	.word	0x0800c92e

0800bfa8 <_sbrk_r>:
 800bfa8:	b538      	push	{r3, r4, r5, lr}
 800bfaa:	2300      	movs	r3, #0
 800bfac:	4d05      	ldr	r5, [pc, #20]	; (800bfc4 <_sbrk_r+0x1c>)
 800bfae:	4604      	mov	r4, r0
 800bfb0:	4608      	mov	r0, r1
 800bfb2:	602b      	str	r3, [r5, #0]
 800bfb4:	f7f6 fd44 	bl	8002a40 <_sbrk>
 800bfb8:	1c43      	adds	r3, r0, #1
 800bfba:	d102      	bne.n	800bfc2 <_sbrk_r+0x1a>
 800bfbc:	682b      	ldr	r3, [r5, #0]
 800bfbe:	b103      	cbz	r3, 800bfc2 <_sbrk_r+0x1a>
 800bfc0:	6023      	str	r3, [r4, #0]
 800bfc2:	bd38      	pop	{r3, r4, r5, pc}
 800bfc4:	200015b4 	.word	0x200015b4

0800bfc8 <__sread>:
 800bfc8:	b510      	push	{r4, lr}
 800bfca:	460c      	mov	r4, r1
 800bfcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfd0:	f000 fafe 	bl	800c5d0 <_read_r>
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	bfab      	itete	ge
 800bfd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bfda:	89a3      	ldrhlt	r3, [r4, #12]
 800bfdc:	181b      	addge	r3, r3, r0
 800bfde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bfe2:	bfac      	ite	ge
 800bfe4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bfe6:	81a3      	strhlt	r3, [r4, #12]
 800bfe8:	bd10      	pop	{r4, pc}

0800bfea <__swrite>:
 800bfea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfee:	461f      	mov	r7, r3
 800bff0:	898b      	ldrh	r3, [r1, #12]
 800bff2:	4605      	mov	r5, r0
 800bff4:	05db      	lsls	r3, r3, #23
 800bff6:	460c      	mov	r4, r1
 800bff8:	4616      	mov	r6, r2
 800bffa:	d505      	bpl.n	800c008 <__swrite+0x1e>
 800bffc:	2302      	movs	r3, #2
 800bffe:	2200      	movs	r2, #0
 800c000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c004:	f000 f9c8 	bl	800c398 <_lseek_r>
 800c008:	89a3      	ldrh	r3, [r4, #12]
 800c00a:	4632      	mov	r2, r6
 800c00c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c010:	81a3      	strh	r3, [r4, #12]
 800c012:	4628      	mov	r0, r5
 800c014:	463b      	mov	r3, r7
 800c016:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c01a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c01e:	f000 b869 	b.w	800c0f4 <_write_r>

0800c022 <__sseek>:
 800c022:	b510      	push	{r4, lr}
 800c024:	460c      	mov	r4, r1
 800c026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c02a:	f000 f9b5 	bl	800c398 <_lseek_r>
 800c02e:	1c43      	adds	r3, r0, #1
 800c030:	89a3      	ldrh	r3, [r4, #12]
 800c032:	bf15      	itete	ne
 800c034:	6560      	strne	r0, [r4, #84]	; 0x54
 800c036:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c03a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c03e:	81a3      	strheq	r3, [r4, #12]
 800c040:	bf18      	it	ne
 800c042:	81a3      	strhne	r3, [r4, #12]
 800c044:	bd10      	pop	{r4, pc}

0800c046 <__sclose>:
 800c046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c04a:	f000 b8d3 	b.w	800c1f4 <_close_r>
	...

0800c050 <__swbuf_r>:
 800c050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c052:	460e      	mov	r6, r1
 800c054:	4614      	mov	r4, r2
 800c056:	4605      	mov	r5, r0
 800c058:	b118      	cbz	r0, 800c062 <__swbuf_r+0x12>
 800c05a:	6983      	ldr	r3, [r0, #24]
 800c05c:	b90b      	cbnz	r3, 800c062 <__swbuf_r+0x12>
 800c05e:	f7ff fa5f 	bl	800b520 <__sinit>
 800c062:	4b21      	ldr	r3, [pc, #132]	; (800c0e8 <__swbuf_r+0x98>)
 800c064:	429c      	cmp	r4, r3
 800c066:	d12b      	bne.n	800c0c0 <__swbuf_r+0x70>
 800c068:	686c      	ldr	r4, [r5, #4]
 800c06a:	69a3      	ldr	r3, [r4, #24]
 800c06c:	60a3      	str	r3, [r4, #8]
 800c06e:	89a3      	ldrh	r3, [r4, #12]
 800c070:	071a      	lsls	r2, r3, #28
 800c072:	d52f      	bpl.n	800c0d4 <__swbuf_r+0x84>
 800c074:	6923      	ldr	r3, [r4, #16]
 800c076:	b36b      	cbz	r3, 800c0d4 <__swbuf_r+0x84>
 800c078:	6923      	ldr	r3, [r4, #16]
 800c07a:	6820      	ldr	r0, [r4, #0]
 800c07c:	b2f6      	uxtb	r6, r6
 800c07e:	1ac0      	subs	r0, r0, r3
 800c080:	6963      	ldr	r3, [r4, #20]
 800c082:	4637      	mov	r7, r6
 800c084:	4283      	cmp	r3, r0
 800c086:	dc04      	bgt.n	800c092 <__swbuf_r+0x42>
 800c088:	4621      	mov	r1, r4
 800c08a:	4628      	mov	r0, r5
 800c08c:	f000 f948 	bl	800c320 <_fflush_r>
 800c090:	bb30      	cbnz	r0, 800c0e0 <__swbuf_r+0x90>
 800c092:	68a3      	ldr	r3, [r4, #8]
 800c094:	3001      	adds	r0, #1
 800c096:	3b01      	subs	r3, #1
 800c098:	60a3      	str	r3, [r4, #8]
 800c09a:	6823      	ldr	r3, [r4, #0]
 800c09c:	1c5a      	adds	r2, r3, #1
 800c09e:	6022      	str	r2, [r4, #0]
 800c0a0:	701e      	strb	r6, [r3, #0]
 800c0a2:	6963      	ldr	r3, [r4, #20]
 800c0a4:	4283      	cmp	r3, r0
 800c0a6:	d004      	beq.n	800c0b2 <__swbuf_r+0x62>
 800c0a8:	89a3      	ldrh	r3, [r4, #12]
 800c0aa:	07db      	lsls	r3, r3, #31
 800c0ac:	d506      	bpl.n	800c0bc <__swbuf_r+0x6c>
 800c0ae:	2e0a      	cmp	r6, #10
 800c0b0:	d104      	bne.n	800c0bc <__swbuf_r+0x6c>
 800c0b2:	4621      	mov	r1, r4
 800c0b4:	4628      	mov	r0, r5
 800c0b6:	f000 f933 	bl	800c320 <_fflush_r>
 800c0ba:	b988      	cbnz	r0, 800c0e0 <__swbuf_r+0x90>
 800c0bc:	4638      	mov	r0, r7
 800c0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0c0:	4b0a      	ldr	r3, [pc, #40]	; (800c0ec <__swbuf_r+0x9c>)
 800c0c2:	429c      	cmp	r4, r3
 800c0c4:	d101      	bne.n	800c0ca <__swbuf_r+0x7a>
 800c0c6:	68ac      	ldr	r4, [r5, #8]
 800c0c8:	e7cf      	b.n	800c06a <__swbuf_r+0x1a>
 800c0ca:	4b09      	ldr	r3, [pc, #36]	; (800c0f0 <__swbuf_r+0xa0>)
 800c0cc:	429c      	cmp	r4, r3
 800c0ce:	bf08      	it	eq
 800c0d0:	68ec      	ldreq	r4, [r5, #12]
 800c0d2:	e7ca      	b.n	800c06a <__swbuf_r+0x1a>
 800c0d4:	4621      	mov	r1, r4
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	f000 f81e 	bl	800c118 <__swsetup_r>
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	d0cb      	beq.n	800c078 <__swbuf_r+0x28>
 800c0e0:	f04f 37ff 	mov.w	r7, #4294967295
 800c0e4:	e7ea      	b.n	800c0bc <__swbuf_r+0x6c>
 800c0e6:	bf00      	nop
 800c0e8:	0800c8cc 	.word	0x0800c8cc
 800c0ec:	0800c8ec 	.word	0x0800c8ec
 800c0f0:	0800c8ac 	.word	0x0800c8ac

0800c0f4 <_write_r>:
 800c0f4:	b538      	push	{r3, r4, r5, lr}
 800c0f6:	4604      	mov	r4, r0
 800c0f8:	4608      	mov	r0, r1
 800c0fa:	4611      	mov	r1, r2
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	4d05      	ldr	r5, [pc, #20]	; (800c114 <_write_r+0x20>)
 800c100:	602a      	str	r2, [r5, #0]
 800c102:	461a      	mov	r2, r3
 800c104:	f7f4 fef4 	bl	8000ef0 <_write>
 800c108:	1c43      	adds	r3, r0, #1
 800c10a:	d102      	bne.n	800c112 <_write_r+0x1e>
 800c10c:	682b      	ldr	r3, [r5, #0]
 800c10e:	b103      	cbz	r3, 800c112 <_write_r+0x1e>
 800c110:	6023      	str	r3, [r4, #0]
 800c112:	bd38      	pop	{r3, r4, r5, pc}
 800c114:	200015b4 	.word	0x200015b4

0800c118 <__swsetup_r>:
 800c118:	4b32      	ldr	r3, [pc, #200]	; (800c1e4 <__swsetup_r+0xcc>)
 800c11a:	b570      	push	{r4, r5, r6, lr}
 800c11c:	681d      	ldr	r5, [r3, #0]
 800c11e:	4606      	mov	r6, r0
 800c120:	460c      	mov	r4, r1
 800c122:	b125      	cbz	r5, 800c12e <__swsetup_r+0x16>
 800c124:	69ab      	ldr	r3, [r5, #24]
 800c126:	b913      	cbnz	r3, 800c12e <__swsetup_r+0x16>
 800c128:	4628      	mov	r0, r5
 800c12a:	f7ff f9f9 	bl	800b520 <__sinit>
 800c12e:	4b2e      	ldr	r3, [pc, #184]	; (800c1e8 <__swsetup_r+0xd0>)
 800c130:	429c      	cmp	r4, r3
 800c132:	d10f      	bne.n	800c154 <__swsetup_r+0x3c>
 800c134:	686c      	ldr	r4, [r5, #4]
 800c136:	89a3      	ldrh	r3, [r4, #12]
 800c138:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c13c:	0719      	lsls	r1, r3, #28
 800c13e:	d42c      	bmi.n	800c19a <__swsetup_r+0x82>
 800c140:	06dd      	lsls	r5, r3, #27
 800c142:	d411      	bmi.n	800c168 <__swsetup_r+0x50>
 800c144:	2309      	movs	r3, #9
 800c146:	6033      	str	r3, [r6, #0]
 800c148:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c14c:	f04f 30ff 	mov.w	r0, #4294967295
 800c150:	81a3      	strh	r3, [r4, #12]
 800c152:	e03e      	b.n	800c1d2 <__swsetup_r+0xba>
 800c154:	4b25      	ldr	r3, [pc, #148]	; (800c1ec <__swsetup_r+0xd4>)
 800c156:	429c      	cmp	r4, r3
 800c158:	d101      	bne.n	800c15e <__swsetup_r+0x46>
 800c15a:	68ac      	ldr	r4, [r5, #8]
 800c15c:	e7eb      	b.n	800c136 <__swsetup_r+0x1e>
 800c15e:	4b24      	ldr	r3, [pc, #144]	; (800c1f0 <__swsetup_r+0xd8>)
 800c160:	429c      	cmp	r4, r3
 800c162:	bf08      	it	eq
 800c164:	68ec      	ldreq	r4, [r5, #12]
 800c166:	e7e6      	b.n	800c136 <__swsetup_r+0x1e>
 800c168:	0758      	lsls	r0, r3, #29
 800c16a:	d512      	bpl.n	800c192 <__swsetup_r+0x7a>
 800c16c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c16e:	b141      	cbz	r1, 800c182 <__swsetup_r+0x6a>
 800c170:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c174:	4299      	cmp	r1, r3
 800c176:	d002      	beq.n	800c17e <__swsetup_r+0x66>
 800c178:	4630      	mov	r0, r6
 800c17a:	f000 f9b7 	bl	800c4ec <_free_r>
 800c17e:	2300      	movs	r3, #0
 800c180:	6363      	str	r3, [r4, #52]	; 0x34
 800c182:	89a3      	ldrh	r3, [r4, #12]
 800c184:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c188:	81a3      	strh	r3, [r4, #12]
 800c18a:	2300      	movs	r3, #0
 800c18c:	6063      	str	r3, [r4, #4]
 800c18e:	6923      	ldr	r3, [r4, #16]
 800c190:	6023      	str	r3, [r4, #0]
 800c192:	89a3      	ldrh	r3, [r4, #12]
 800c194:	f043 0308 	orr.w	r3, r3, #8
 800c198:	81a3      	strh	r3, [r4, #12]
 800c19a:	6923      	ldr	r3, [r4, #16]
 800c19c:	b94b      	cbnz	r3, 800c1b2 <__swsetup_r+0x9a>
 800c19e:	89a3      	ldrh	r3, [r4, #12]
 800c1a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c1a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1a8:	d003      	beq.n	800c1b2 <__swsetup_r+0x9a>
 800c1aa:	4621      	mov	r1, r4
 800c1ac:	4630      	mov	r0, r6
 800c1ae:	f000 f929 	bl	800c404 <__smakebuf_r>
 800c1b2:	89a0      	ldrh	r0, [r4, #12]
 800c1b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c1b8:	f010 0301 	ands.w	r3, r0, #1
 800c1bc:	d00a      	beq.n	800c1d4 <__swsetup_r+0xbc>
 800c1be:	2300      	movs	r3, #0
 800c1c0:	60a3      	str	r3, [r4, #8]
 800c1c2:	6963      	ldr	r3, [r4, #20]
 800c1c4:	425b      	negs	r3, r3
 800c1c6:	61a3      	str	r3, [r4, #24]
 800c1c8:	6923      	ldr	r3, [r4, #16]
 800c1ca:	b943      	cbnz	r3, 800c1de <__swsetup_r+0xc6>
 800c1cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c1d0:	d1ba      	bne.n	800c148 <__swsetup_r+0x30>
 800c1d2:	bd70      	pop	{r4, r5, r6, pc}
 800c1d4:	0781      	lsls	r1, r0, #30
 800c1d6:	bf58      	it	pl
 800c1d8:	6963      	ldrpl	r3, [r4, #20]
 800c1da:	60a3      	str	r3, [r4, #8]
 800c1dc:	e7f4      	b.n	800c1c8 <__swsetup_r+0xb0>
 800c1de:	2000      	movs	r0, #0
 800c1e0:	e7f7      	b.n	800c1d2 <__swsetup_r+0xba>
 800c1e2:	bf00      	nop
 800c1e4:	2000018c 	.word	0x2000018c
 800c1e8:	0800c8cc 	.word	0x0800c8cc
 800c1ec:	0800c8ec 	.word	0x0800c8ec
 800c1f0:	0800c8ac 	.word	0x0800c8ac

0800c1f4 <_close_r>:
 800c1f4:	b538      	push	{r3, r4, r5, lr}
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	4d05      	ldr	r5, [pc, #20]	; (800c210 <_close_r+0x1c>)
 800c1fa:	4604      	mov	r4, r0
 800c1fc:	4608      	mov	r0, r1
 800c1fe:	602b      	str	r3, [r5, #0]
 800c200:	f7f6 fbed 	bl	80029de <_close>
 800c204:	1c43      	adds	r3, r0, #1
 800c206:	d102      	bne.n	800c20e <_close_r+0x1a>
 800c208:	682b      	ldr	r3, [r5, #0]
 800c20a:	b103      	cbz	r3, 800c20e <_close_r+0x1a>
 800c20c:	6023      	str	r3, [r4, #0]
 800c20e:	bd38      	pop	{r3, r4, r5, pc}
 800c210:	200015b4 	.word	0x200015b4

0800c214 <__sflush_r>:
 800c214:	898a      	ldrh	r2, [r1, #12]
 800c216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c21a:	4605      	mov	r5, r0
 800c21c:	0710      	lsls	r0, r2, #28
 800c21e:	460c      	mov	r4, r1
 800c220:	d458      	bmi.n	800c2d4 <__sflush_r+0xc0>
 800c222:	684b      	ldr	r3, [r1, #4]
 800c224:	2b00      	cmp	r3, #0
 800c226:	dc05      	bgt.n	800c234 <__sflush_r+0x20>
 800c228:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	dc02      	bgt.n	800c234 <__sflush_r+0x20>
 800c22e:	2000      	movs	r0, #0
 800c230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c234:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c236:	2e00      	cmp	r6, #0
 800c238:	d0f9      	beq.n	800c22e <__sflush_r+0x1a>
 800c23a:	2300      	movs	r3, #0
 800c23c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c240:	682f      	ldr	r7, [r5, #0]
 800c242:	602b      	str	r3, [r5, #0]
 800c244:	d032      	beq.n	800c2ac <__sflush_r+0x98>
 800c246:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c248:	89a3      	ldrh	r3, [r4, #12]
 800c24a:	075a      	lsls	r2, r3, #29
 800c24c:	d505      	bpl.n	800c25a <__sflush_r+0x46>
 800c24e:	6863      	ldr	r3, [r4, #4]
 800c250:	1ac0      	subs	r0, r0, r3
 800c252:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c254:	b10b      	cbz	r3, 800c25a <__sflush_r+0x46>
 800c256:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c258:	1ac0      	subs	r0, r0, r3
 800c25a:	2300      	movs	r3, #0
 800c25c:	4602      	mov	r2, r0
 800c25e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c260:	4628      	mov	r0, r5
 800c262:	6a21      	ldr	r1, [r4, #32]
 800c264:	47b0      	blx	r6
 800c266:	1c43      	adds	r3, r0, #1
 800c268:	89a3      	ldrh	r3, [r4, #12]
 800c26a:	d106      	bne.n	800c27a <__sflush_r+0x66>
 800c26c:	6829      	ldr	r1, [r5, #0]
 800c26e:	291d      	cmp	r1, #29
 800c270:	d82c      	bhi.n	800c2cc <__sflush_r+0xb8>
 800c272:	4a2a      	ldr	r2, [pc, #168]	; (800c31c <__sflush_r+0x108>)
 800c274:	40ca      	lsrs	r2, r1
 800c276:	07d6      	lsls	r6, r2, #31
 800c278:	d528      	bpl.n	800c2cc <__sflush_r+0xb8>
 800c27a:	2200      	movs	r2, #0
 800c27c:	6062      	str	r2, [r4, #4]
 800c27e:	6922      	ldr	r2, [r4, #16]
 800c280:	04d9      	lsls	r1, r3, #19
 800c282:	6022      	str	r2, [r4, #0]
 800c284:	d504      	bpl.n	800c290 <__sflush_r+0x7c>
 800c286:	1c42      	adds	r2, r0, #1
 800c288:	d101      	bne.n	800c28e <__sflush_r+0x7a>
 800c28a:	682b      	ldr	r3, [r5, #0]
 800c28c:	b903      	cbnz	r3, 800c290 <__sflush_r+0x7c>
 800c28e:	6560      	str	r0, [r4, #84]	; 0x54
 800c290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c292:	602f      	str	r7, [r5, #0]
 800c294:	2900      	cmp	r1, #0
 800c296:	d0ca      	beq.n	800c22e <__sflush_r+0x1a>
 800c298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c29c:	4299      	cmp	r1, r3
 800c29e:	d002      	beq.n	800c2a6 <__sflush_r+0x92>
 800c2a0:	4628      	mov	r0, r5
 800c2a2:	f000 f923 	bl	800c4ec <_free_r>
 800c2a6:	2000      	movs	r0, #0
 800c2a8:	6360      	str	r0, [r4, #52]	; 0x34
 800c2aa:	e7c1      	b.n	800c230 <__sflush_r+0x1c>
 800c2ac:	6a21      	ldr	r1, [r4, #32]
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	4628      	mov	r0, r5
 800c2b2:	47b0      	blx	r6
 800c2b4:	1c41      	adds	r1, r0, #1
 800c2b6:	d1c7      	bne.n	800c248 <__sflush_r+0x34>
 800c2b8:	682b      	ldr	r3, [r5, #0]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d0c4      	beq.n	800c248 <__sflush_r+0x34>
 800c2be:	2b1d      	cmp	r3, #29
 800c2c0:	d001      	beq.n	800c2c6 <__sflush_r+0xb2>
 800c2c2:	2b16      	cmp	r3, #22
 800c2c4:	d101      	bne.n	800c2ca <__sflush_r+0xb6>
 800c2c6:	602f      	str	r7, [r5, #0]
 800c2c8:	e7b1      	b.n	800c22e <__sflush_r+0x1a>
 800c2ca:	89a3      	ldrh	r3, [r4, #12]
 800c2cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2d0:	81a3      	strh	r3, [r4, #12]
 800c2d2:	e7ad      	b.n	800c230 <__sflush_r+0x1c>
 800c2d4:	690f      	ldr	r7, [r1, #16]
 800c2d6:	2f00      	cmp	r7, #0
 800c2d8:	d0a9      	beq.n	800c22e <__sflush_r+0x1a>
 800c2da:	0793      	lsls	r3, r2, #30
 800c2dc:	bf18      	it	ne
 800c2de:	2300      	movne	r3, #0
 800c2e0:	680e      	ldr	r6, [r1, #0]
 800c2e2:	bf08      	it	eq
 800c2e4:	694b      	ldreq	r3, [r1, #20]
 800c2e6:	eba6 0807 	sub.w	r8, r6, r7
 800c2ea:	600f      	str	r7, [r1, #0]
 800c2ec:	608b      	str	r3, [r1, #8]
 800c2ee:	f1b8 0f00 	cmp.w	r8, #0
 800c2f2:	dd9c      	ble.n	800c22e <__sflush_r+0x1a>
 800c2f4:	4643      	mov	r3, r8
 800c2f6:	463a      	mov	r2, r7
 800c2f8:	4628      	mov	r0, r5
 800c2fa:	6a21      	ldr	r1, [r4, #32]
 800c2fc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c2fe:	47b0      	blx	r6
 800c300:	2800      	cmp	r0, #0
 800c302:	dc06      	bgt.n	800c312 <__sflush_r+0xfe>
 800c304:	89a3      	ldrh	r3, [r4, #12]
 800c306:	f04f 30ff 	mov.w	r0, #4294967295
 800c30a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c30e:	81a3      	strh	r3, [r4, #12]
 800c310:	e78e      	b.n	800c230 <__sflush_r+0x1c>
 800c312:	4407      	add	r7, r0
 800c314:	eba8 0800 	sub.w	r8, r8, r0
 800c318:	e7e9      	b.n	800c2ee <__sflush_r+0xda>
 800c31a:	bf00      	nop
 800c31c:	20400001 	.word	0x20400001

0800c320 <_fflush_r>:
 800c320:	b538      	push	{r3, r4, r5, lr}
 800c322:	690b      	ldr	r3, [r1, #16]
 800c324:	4605      	mov	r5, r0
 800c326:	460c      	mov	r4, r1
 800c328:	b913      	cbnz	r3, 800c330 <_fflush_r+0x10>
 800c32a:	2500      	movs	r5, #0
 800c32c:	4628      	mov	r0, r5
 800c32e:	bd38      	pop	{r3, r4, r5, pc}
 800c330:	b118      	cbz	r0, 800c33a <_fflush_r+0x1a>
 800c332:	6983      	ldr	r3, [r0, #24]
 800c334:	b90b      	cbnz	r3, 800c33a <_fflush_r+0x1a>
 800c336:	f7ff f8f3 	bl	800b520 <__sinit>
 800c33a:	4b14      	ldr	r3, [pc, #80]	; (800c38c <_fflush_r+0x6c>)
 800c33c:	429c      	cmp	r4, r3
 800c33e:	d11b      	bne.n	800c378 <_fflush_r+0x58>
 800c340:	686c      	ldr	r4, [r5, #4]
 800c342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d0ef      	beq.n	800c32a <_fflush_r+0xa>
 800c34a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c34c:	07d0      	lsls	r0, r2, #31
 800c34e:	d404      	bmi.n	800c35a <_fflush_r+0x3a>
 800c350:	0599      	lsls	r1, r3, #22
 800c352:	d402      	bmi.n	800c35a <_fflush_r+0x3a>
 800c354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c356:	f7ff f981 	bl	800b65c <__retarget_lock_acquire_recursive>
 800c35a:	4628      	mov	r0, r5
 800c35c:	4621      	mov	r1, r4
 800c35e:	f7ff ff59 	bl	800c214 <__sflush_r>
 800c362:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c364:	4605      	mov	r5, r0
 800c366:	07da      	lsls	r2, r3, #31
 800c368:	d4e0      	bmi.n	800c32c <_fflush_r+0xc>
 800c36a:	89a3      	ldrh	r3, [r4, #12]
 800c36c:	059b      	lsls	r3, r3, #22
 800c36e:	d4dd      	bmi.n	800c32c <_fflush_r+0xc>
 800c370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c372:	f7ff f974 	bl	800b65e <__retarget_lock_release_recursive>
 800c376:	e7d9      	b.n	800c32c <_fflush_r+0xc>
 800c378:	4b05      	ldr	r3, [pc, #20]	; (800c390 <_fflush_r+0x70>)
 800c37a:	429c      	cmp	r4, r3
 800c37c:	d101      	bne.n	800c382 <_fflush_r+0x62>
 800c37e:	68ac      	ldr	r4, [r5, #8]
 800c380:	e7df      	b.n	800c342 <_fflush_r+0x22>
 800c382:	4b04      	ldr	r3, [pc, #16]	; (800c394 <_fflush_r+0x74>)
 800c384:	429c      	cmp	r4, r3
 800c386:	bf08      	it	eq
 800c388:	68ec      	ldreq	r4, [r5, #12]
 800c38a:	e7da      	b.n	800c342 <_fflush_r+0x22>
 800c38c:	0800c8cc 	.word	0x0800c8cc
 800c390:	0800c8ec 	.word	0x0800c8ec
 800c394:	0800c8ac 	.word	0x0800c8ac

0800c398 <_lseek_r>:
 800c398:	b538      	push	{r3, r4, r5, lr}
 800c39a:	4604      	mov	r4, r0
 800c39c:	4608      	mov	r0, r1
 800c39e:	4611      	mov	r1, r2
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	4d05      	ldr	r5, [pc, #20]	; (800c3b8 <_lseek_r+0x20>)
 800c3a4:	602a      	str	r2, [r5, #0]
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	f7f6 fb3d 	bl	8002a26 <_lseek>
 800c3ac:	1c43      	adds	r3, r0, #1
 800c3ae:	d102      	bne.n	800c3b6 <_lseek_r+0x1e>
 800c3b0:	682b      	ldr	r3, [r5, #0]
 800c3b2:	b103      	cbz	r3, 800c3b6 <_lseek_r+0x1e>
 800c3b4:	6023      	str	r3, [r4, #0]
 800c3b6:	bd38      	pop	{r3, r4, r5, pc}
 800c3b8:	200015b4 	.word	0x200015b4

0800c3bc <__swhatbuf_r>:
 800c3bc:	b570      	push	{r4, r5, r6, lr}
 800c3be:	460e      	mov	r6, r1
 800c3c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3c4:	4614      	mov	r4, r2
 800c3c6:	2900      	cmp	r1, #0
 800c3c8:	461d      	mov	r5, r3
 800c3ca:	b096      	sub	sp, #88	; 0x58
 800c3cc:	da07      	bge.n	800c3de <__swhatbuf_r+0x22>
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	602b      	str	r3, [r5, #0]
 800c3d2:	89b3      	ldrh	r3, [r6, #12]
 800c3d4:	061a      	lsls	r2, r3, #24
 800c3d6:	d410      	bmi.n	800c3fa <__swhatbuf_r+0x3e>
 800c3d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3dc:	e00e      	b.n	800c3fc <__swhatbuf_r+0x40>
 800c3de:	466a      	mov	r2, sp
 800c3e0:	f000 f908 	bl	800c5f4 <_fstat_r>
 800c3e4:	2800      	cmp	r0, #0
 800c3e6:	dbf2      	blt.n	800c3ce <__swhatbuf_r+0x12>
 800c3e8:	9a01      	ldr	r2, [sp, #4]
 800c3ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c3ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c3f2:	425a      	negs	r2, r3
 800c3f4:	415a      	adcs	r2, r3
 800c3f6:	602a      	str	r2, [r5, #0]
 800c3f8:	e7ee      	b.n	800c3d8 <__swhatbuf_r+0x1c>
 800c3fa:	2340      	movs	r3, #64	; 0x40
 800c3fc:	2000      	movs	r0, #0
 800c3fe:	6023      	str	r3, [r4, #0]
 800c400:	b016      	add	sp, #88	; 0x58
 800c402:	bd70      	pop	{r4, r5, r6, pc}

0800c404 <__smakebuf_r>:
 800c404:	898b      	ldrh	r3, [r1, #12]
 800c406:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c408:	079d      	lsls	r5, r3, #30
 800c40a:	4606      	mov	r6, r0
 800c40c:	460c      	mov	r4, r1
 800c40e:	d507      	bpl.n	800c420 <__smakebuf_r+0x1c>
 800c410:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c414:	6023      	str	r3, [r4, #0]
 800c416:	6123      	str	r3, [r4, #16]
 800c418:	2301      	movs	r3, #1
 800c41a:	6163      	str	r3, [r4, #20]
 800c41c:	b002      	add	sp, #8
 800c41e:	bd70      	pop	{r4, r5, r6, pc}
 800c420:	466a      	mov	r2, sp
 800c422:	ab01      	add	r3, sp, #4
 800c424:	f7ff ffca 	bl	800c3bc <__swhatbuf_r>
 800c428:	9900      	ldr	r1, [sp, #0]
 800c42a:	4605      	mov	r5, r0
 800c42c:	4630      	mov	r0, r6
 800c42e:	f7ff f917 	bl	800b660 <_malloc_r>
 800c432:	b948      	cbnz	r0, 800c448 <__smakebuf_r+0x44>
 800c434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c438:	059a      	lsls	r2, r3, #22
 800c43a:	d4ef      	bmi.n	800c41c <__smakebuf_r+0x18>
 800c43c:	f023 0303 	bic.w	r3, r3, #3
 800c440:	f043 0302 	orr.w	r3, r3, #2
 800c444:	81a3      	strh	r3, [r4, #12]
 800c446:	e7e3      	b.n	800c410 <__smakebuf_r+0xc>
 800c448:	4b0d      	ldr	r3, [pc, #52]	; (800c480 <__smakebuf_r+0x7c>)
 800c44a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c44c:	89a3      	ldrh	r3, [r4, #12]
 800c44e:	6020      	str	r0, [r4, #0]
 800c450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c454:	81a3      	strh	r3, [r4, #12]
 800c456:	9b00      	ldr	r3, [sp, #0]
 800c458:	6120      	str	r0, [r4, #16]
 800c45a:	6163      	str	r3, [r4, #20]
 800c45c:	9b01      	ldr	r3, [sp, #4]
 800c45e:	b15b      	cbz	r3, 800c478 <__smakebuf_r+0x74>
 800c460:	4630      	mov	r0, r6
 800c462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c466:	f000 f8d7 	bl	800c618 <_isatty_r>
 800c46a:	b128      	cbz	r0, 800c478 <__smakebuf_r+0x74>
 800c46c:	89a3      	ldrh	r3, [r4, #12]
 800c46e:	f023 0303 	bic.w	r3, r3, #3
 800c472:	f043 0301 	orr.w	r3, r3, #1
 800c476:	81a3      	strh	r3, [r4, #12]
 800c478:	89a0      	ldrh	r0, [r4, #12]
 800c47a:	4305      	orrs	r5, r0
 800c47c:	81a5      	strh	r5, [r4, #12]
 800c47e:	e7cd      	b.n	800c41c <__smakebuf_r+0x18>
 800c480:	0800b4b9 	.word	0x0800b4b9

0800c484 <memchr>:
 800c484:	4603      	mov	r3, r0
 800c486:	b510      	push	{r4, lr}
 800c488:	b2c9      	uxtb	r1, r1
 800c48a:	4402      	add	r2, r0
 800c48c:	4293      	cmp	r3, r2
 800c48e:	4618      	mov	r0, r3
 800c490:	d101      	bne.n	800c496 <memchr+0x12>
 800c492:	2000      	movs	r0, #0
 800c494:	e003      	b.n	800c49e <memchr+0x1a>
 800c496:	7804      	ldrb	r4, [r0, #0]
 800c498:	3301      	adds	r3, #1
 800c49a:	428c      	cmp	r4, r1
 800c49c:	d1f6      	bne.n	800c48c <memchr+0x8>
 800c49e:	bd10      	pop	{r4, pc}

0800c4a0 <memmove>:
 800c4a0:	4288      	cmp	r0, r1
 800c4a2:	b510      	push	{r4, lr}
 800c4a4:	eb01 0402 	add.w	r4, r1, r2
 800c4a8:	d902      	bls.n	800c4b0 <memmove+0x10>
 800c4aa:	4284      	cmp	r4, r0
 800c4ac:	4623      	mov	r3, r4
 800c4ae:	d807      	bhi.n	800c4c0 <memmove+0x20>
 800c4b0:	1e43      	subs	r3, r0, #1
 800c4b2:	42a1      	cmp	r1, r4
 800c4b4:	d008      	beq.n	800c4c8 <memmove+0x28>
 800c4b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c4be:	e7f8      	b.n	800c4b2 <memmove+0x12>
 800c4c0:	4601      	mov	r1, r0
 800c4c2:	4402      	add	r2, r0
 800c4c4:	428a      	cmp	r2, r1
 800c4c6:	d100      	bne.n	800c4ca <memmove+0x2a>
 800c4c8:	bd10      	pop	{r4, pc}
 800c4ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c4ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c4d2:	e7f7      	b.n	800c4c4 <memmove+0x24>

0800c4d4 <__malloc_lock>:
 800c4d4:	4801      	ldr	r0, [pc, #4]	; (800c4dc <__malloc_lock+0x8>)
 800c4d6:	f7ff b8c1 	b.w	800b65c <__retarget_lock_acquire_recursive>
 800c4da:	bf00      	nop
 800c4dc:	200015ac 	.word	0x200015ac

0800c4e0 <__malloc_unlock>:
 800c4e0:	4801      	ldr	r0, [pc, #4]	; (800c4e8 <__malloc_unlock+0x8>)
 800c4e2:	f7ff b8bc 	b.w	800b65e <__retarget_lock_release_recursive>
 800c4e6:	bf00      	nop
 800c4e8:	200015ac 	.word	0x200015ac

0800c4ec <_free_r>:
 800c4ec:	b538      	push	{r3, r4, r5, lr}
 800c4ee:	4605      	mov	r5, r0
 800c4f0:	2900      	cmp	r1, #0
 800c4f2:	d043      	beq.n	800c57c <_free_r+0x90>
 800c4f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4f8:	1f0c      	subs	r4, r1, #4
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	bfb8      	it	lt
 800c4fe:	18e4      	addlt	r4, r4, r3
 800c500:	f7ff ffe8 	bl	800c4d4 <__malloc_lock>
 800c504:	4a1e      	ldr	r2, [pc, #120]	; (800c580 <_free_r+0x94>)
 800c506:	6813      	ldr	r3, [r2, #0]
 800c508:	4610      	mov	r0, r2
 800c50a:	b933      	cbnz	r3, 800c51a <_free_r+0x2e>
 800c50c:	6063      	str	r3, [r4, #4]
 800c50e:	6014      	str	r4, [r2, #0]
 800c510:	4628      	mov	r0, r5
 800c512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c516:	f7ff bfe3 	b.w	800c4e0 <__malloc_unlock>
 800c51a:	42a3      	cmp	r3, r4
 800c51c:	d90a      	bls.n	800c534 <_free_r+0x48>
 800c51e:	6821      	ldr	r1, [r4, #0]
 800c520:	1862      	adds	r2, r4, r1
 800c522:	4293      	cmp	r3, r2
 800c524:	bf01      	itttt	eq
 800c526:	681a      	ldreq	r2, [r3, #0]
 800c528:	685b      	ldreq	r3, [r3, #4]
 800c52a:	1852      	addeq	r2, r2, r1
 800c52c:	6022      	streq	r2, [r4, #0]
 800c52e:	6063      	str	r3, [r4, #4]
 800c530:	6004      	str	r4, [r0, #0]
 800c532:	e7ed      	b.n	800c510 <_free_r+0x24>
 800c534:	461a      	mov	r2, r3
 800c536:	685b      	ldr	r3, [r3, #4]
 800c538:	b10b      	cbz	r3, 800c53e <_free_r+0x52>
 800c53a:	42a3      	cmp	r3, r4
 800c53c:	d9fa      	bls.n	800c534 <_free_r+0x48>
 800c53e:	6811      	ldr	r1, [r2, #0]
 800c540:	1850      	adds	r0, r2, r1
 800c542:	42a0      	cmp	r0, r4
 800c544:	d10b      	bne.n	800c55e <_free_r+0x72>
 800c546:	6820      	ldr	r0, [r4, #0]
 800c548:	4401      	add	r1, r0
 800c54a:	1850      	adds	r0, r2, r1
 800c54c:	4283      	cmp	r3, r0
 800c54e:	6011      	str	r1, [r2, #0]
 800c550:	d1de      	bne.n	800c510 <_free_r+0x24>
 800c552:	6818      	ldr	r0, [r3, #0]
 800c554:	685b      	ldr	r3, [r3, #4]
 800c556:	4401      	add	r1, r0
 800c558:	6011      	str	r1, [r2, #0]
 800c55a:	6053      	str	r3, [r2, #4]
 800c55c:	e7d8      	b.n	800c510 <_free_r+0x24>
 800c55e:	d902      	bls.n	800c566 <_free_r+0x7a>
 800c560:	230c      	movs	r3, #12
 800c562:	602b      	str	r3, [r5, #0]
 800c564:	e7d4      	b.n	800c510 <_free_r+0x24>
 800c566:	6820      	ldr	r0, [r4, #0]
 800c568:	1821      	adds	r1, r4, r0
 800c56a:	428b      	cmp	r3, r1
 800c56c:	bf01      	itttt	eq
 800c56e:	6819      	ldreq	r1, [r3, #0]
 800c570:	685b      	ldreq	r3, [r3, #4]
 800c572:	1809      	addeq	r1, r1, r0
 800c574:	6021      	streq	r1, [r4, #0]
 800c576:	6063      	str	r3, [r4, #4]
 800c578:	6054      	str	r4, [r2, #4]
 800c57a:	e7c9      	b.n	800c510 <_free_r+0x24>
 800c57c:	bd38      	pop	{r3, r4, r5, pc}
 800c57e:	bf00      	nop
 800c580:	2000049c 	.word	0x2000049c

0800c584 <_realloc_r>:
 800c584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c586:	4607      	mov	r7, r0
 800c588:	4614      	mov	r4, r2
 800c58a:	460e      	mov	r6, r1
 800c58c:	b921      	cbnz	r1, 800c598 <_realloc_r+0x14>
 800c58e:	4611      	mov	r1, r2
 800c590:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c594:	f7ff b864 	b.w	800b660 <_malloc_r>
 800c598:	b922      	cbnz	r2, 800c5a4 <_realloc_r+0x20>
 800c59a:	f7ff ffa7 	bl	800c4ec <_free_r>
 800c59e:	4625      	mov	r5, r4
 800c5a0:	4628      	mov	r0, r5
 800c5a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5a4:	f000 f848 	bl	800c638 <_malloc_usable_size_r>
 800c5a8:	42a0      	cmp	r0, r4
 800c5aa:	d20f      	bcs.n	800c5cc <_realloc_r+0x48>
 800c5ac:	4621      	mov	r1, r4
 800c5ae:	4638      	mov	r0, r7
 800c5b0:	f7ff f856 	bl	800b660 <_malloc_r>
 800c5b4:	4605      	mov	r5, r0
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	d0f2      	beq.n	800c5a0 <_realloc_r+0x1c>
 800c5ba:	4631      	mov	r1, r6
 800c5bc:	4622      	mov	r2, r4
 800c5be:	f7fe fec7 	bl	800b350 <memcpy>
 800c5c2:	4631      	mov	r1, r6
 800c5c4:	4638      	mov	r0, r7
 800c5c6:	f7ff ff91 	bl	800c4ec <_free_r>
 800c5ca:	e7e9      	b.n	800c5a0 <_realloc_r+0x1c>
 800c5cc:	4635      	mov	r5, r6
 800c5ce:	e7e7      	b.n	800c5a0 <_realloc_r+0x1c>

0800c5d0 <_read_r>:
 800c5d0:	b538      	push	{r3, r4, r5, lr}
 800c5d2:	4604      	mov	r4, r0
 800c5d4:	4608      	mov	r0, r1
 800c5d6:	4611      	mov	r1, r2
 800c5d8:	2200      	movs	r2, #0
 800c5da:	4d05      	ldr	r5, [pc, #20]	; (800c5f0 <_read_r+0x20>)
 800c5dc:	602a      	str	r2, [r5, #0]
 800c5de:	461a      	mov	r2, r3
 800c5e0:	f7f6 f9e0 	bl	80029a4 <_read>
 800c5e4:	1c43      	adds	r3, r0, #1
 800c5e6:	d102      	bne.n	800c5ee <_read_r+0x1e>
 800c5e8:	682b      	ldr	r3, [r5, #0]
 800c5ea:	b103      	cbz	r3, 800c5ee <_read_r+0x1e>
 800c5ec:	6023      	str	r3, [r4, #0]
 800c5ee:	bd38      	pop	{r3, r4, r5, pc}
 800c5f0:	200015b4 	.word	0x200015b4

0800c5f4 <_fstat_r>:
 800c5f4:	b538      	push	{r3, r4, r5, lr}
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	4d06      	ldr	r5, [pc, #24]	; (800c614 <_fstat_r+0x20>)
 800c5fa:	4604      	mov	r4, r0
 800c5fc:	4608      	mov	r0, r1
 800c5fe:	4611      	mov	r1, r2
 800c600:	602b      	str	r3, [r5, #0]
 800c602:	f7f6 f9f7 	bl	80029f4 <_fstat>
 800c606:	1c43      	adds	r3, r0, #1
 800c608:	d102      	bne.n	800c610 <_fstat_r+0x1c>
 800c60a:	682b      	ldr	r3, [r5, #0]
 800c60c:	b103      	cbz	r3, 800c610 <_fstat_r+0x1c>
 800c60e:	6023      	str	r3, [r4, #0]
 800c610:	bd38      	pop	{r3, r4, r5, pc}
 800c612:	bf00      	nop
 800c614:	200015b4 	.word	0x200015b4

0800c618 <_isatty_r>:
 800c618:	b538      	push	{r3, r4, r5, lr}
 800c61a:	2300      	movs	r3, #0
 800c61c:	4d05      	ldr	r5, [pc, #20]	; (800c634 <_isatty_r+0x1c>)
 800c61e:	4604      	mov	r4, r0
 800c620:	4608      	mov	r0, r1
 800c622:	602b      	str	r3, [r5, #0]
 800c624:	f7f6 f9f5 	bl	8002a12 <_isatty>
 800c628:	1c43      	adds	r3, r0, #1
 800c62a:	d102      	bne.n	800c632 <_isatty_r+0x1a>
 800c62c:	682b      	ldr	r3, [r5, #0]
 800c62e:	b103      	cbz	r3, 800c632 <_isatty_r+0x1a>
 800c630:	6023      	str	r3, [r4, #0]
 800c632:	bd38      	pop	{r3, r4, r5, pc}
 800c634:	200015b4 	.word	0x200015b4

0800c638 <_malloc_usable_size_r>:
 800c638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c63c:	1f18      	subs	r0, r3, #4
 800c63e:	2b00      	cmp	r3, #0
 800c640:	bfbc      	itt	lt
 800c642:	580b      	ldrlt	r3, [r1, r0]
 800c644:	18c0      	addlt	r0, r0, r3
 800c646:	4770      	bx	lr

0800c648 <floor>:
 800c648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c64c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800c650:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800c654:	2e13      	cmp	r6, #19
 800c656:	4602      	mov	r2, r0
 800c658:	460b      	mov	r3, r1
 800c65a:	4607      	mov	r7, r0
 800c65c:	460c      	mov	r4, r1
 800c65e:	4605      	mov	r5, r0
 800c660:	dc34      	bgt.n	800c6cc <floor+0x84>
 800c662:	2e00      	cmp	r6, #0
 800c664:	da15      	bge.n	800c692 <floor+0x4a>
 800c666:	a334      	add	r3, pc, #208	; (adr r3, 800c738 <floor+0xf0>)
 800c668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66c:	f7f3 fd7e 	bl	800016c <__adddf3>
 800c670:	2200      	movs	r2, #0
 800c672:	2300      	movs	r3, #0
 800c674:	f7f3 ffae 	bl	80005d4 <__aeabi_dcmpgt>
 800c678:	b140      	cbz	r0, 800c68c <floor+0x44>
 800c67a:	2c00      	cmp	r4, #0
 800c67c:	da59      	bge.n	800c732 <floor+0xea>
 800c67e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c682:	ea57 0503 	orrs.w	r5, r7, r3
 800c686:	d001      	beq.n	800c68c <floor+0x44>
 800c688:	2500      	movs	r5, #0
 800c68a:	4c2d      	ldr	r4, [pc, #180]	; (800c740 <floor+0xf8>)
 800c68c:	4623      	mov	r3, r4
 800c68e:	462f      	mov	r7, r5
 800c690:	e025      	b.n	800c6de <floor+0x96>
 800c692:	4a2c      	ldr	r2, [pc, #176]	; (800c744 <floor+0xfc>)
 800c694:	fa42 f806 	asr.w	r8, r2, r6
 800c698:	ea01 0208 	and.w	r2, r1, r8
 800c69c:	4302      	orrs	r2, r0
 800c69e:	d01e      	beq.n	800c6de <floor+0x96>
 800c6a0:	a325      	add	r3, pc, #148	; (adr r3, 800c738 <floor+0xf0>)
 800c6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a6:	f7f3 fd61 	bl	800016c <__adddf3>
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	f7f3 ff91 	bl	80005d4 <__aeabi_dcmpgt>
 800c6b2:	2800      	cmp	r0, #0
 800c6b4:	d0ea      	beq.n	800c68c <floor+0x44>
 800c6b6:	2c00      	cmp	r4, #0
 800c6b8:	bfbe      	ittt	lt
 800c6ba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c6be:	fa43 f606 	asrlt.w	r6, r3, r6
 800c6c2:	19a4      	addlt	r4, r4, r6
 800c6c4:	2500      	movs	r5, #0
 800c6c6:	ea24 0408 	bic.w	r4, r4, r8
 800c6ca:	e7df      	b.n	800c68c <floor+0x44>
 800c6cc:	2e33      	cmp	r6, #51	; 0x33
 800c6ce:	dd0a      	ble.n	800c6e6 <floor+0x9e>
 800c6d0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c6d4:	d103      	bne.n	800c6de <floor+0x96>
 800c6d6:	f7f3 fd49 	bl	800016c <__adddf3>
 800c6da:	4607      	mov	r7, r0
 800c6dc:	460b      	mov	r3, r1
 800c6de:	4638      	mov	r0, r7
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6e6:	f04f 32ff 	mov.w	r2, #4294967295
 800c6ea:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800c6ee:	fa22 f808 	lsr.w	r8, r2, r8
 800c6f2:	ea18 0f00 	tst.w	r8, r0
 800c6f6:	d0f2      	beq.n	800c6de <floor+0x96>
 800c6f8:	a30f      	add	r3, pc, #60	; (adr r3, 800c738 <floor+0xf0>)
 800c6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fe:	f7f3 fd35 	bl	800016c <__adddf3>
 800c702:	2200      	movs	r2, #0
 800c704:	2300      	movs	r3, #0
 800c706:	f7f3 ff65 	bl	80005d4 <__aeabi_dcmpgt>
 800c70a:	2800      	cmp	r0, #0
 800c70c:	d0be      	beq.n	800c68c <floor+0x44>
 800c70e:	2c00      	cmp	r4, #0
 800c710:	da02      	bge.n	800c718 <floor+0xd0>
 800c712:	2e14      	cmp	r6, #20
 800c714:	d103      	bne.n	800c71e <floor+0xd6>
 800c716:	3401      	adds	r4, #1
 800c718:	ea25 0508 	bic.w	r5, r5, r8
 800c71c:	e7b6      	b.n	800c68c <floor+0x44>
 800c71e:	2301      	movs	r3, #1
 800c720:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c724:	fa03 f606 	lsl.w	r6, r3, r6
 800c728:	4435      	add	r5, r6
 800c72a:	42bd      	cmp	r5, r7
 800c72c:	bf38      	it	cc
 800c72e:	18e4      	addcc	r4, r4, r3
 800c730:	e7f2      	b.n	800c718 <floor+0xd0>
 800c732:	2500      	movs	r5, #0
 800c734:	462c      	mov	r4, r5
 800c736:	e7a9      	b.n	800c68c <floor+0x44>
 800c738:	8800759c 	.word	0x8800759c
 800c73c:	7e37e43c 	.word	0x7e37e43c
 800c740:	bff00000 	.word	0xbff00000
 800c744:	000fffff 	.word	0x000fffff

0800c748 <_init>:
 800c748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c74a:	bf00      	nop
 800c74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c74e:	bc08      	pop	{r3}
 800c750:	469e      	mov	lr, r3
 800c752:	4770      	bx	lr

0800c754 <_fini>:
 800c754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c756:	bf00      	nop
 800c758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c75a:	bc08      	pop	{r3}
 800c75c:	469e      	mov	lr, r3
 800c75e:	4770      	bx	lr
