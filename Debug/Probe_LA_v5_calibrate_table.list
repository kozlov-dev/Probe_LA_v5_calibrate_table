
Probe_LA_v5_calibrate_table.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  0800b9e0  0800b9e0  0001b9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb88  0800bb88  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800bb88  0800bb88  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bb88  0800bb88  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb88  0800bb88  0001bb88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb8c  0800bb8c  0001bb8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800bb90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013b8  200001f8  0800bd84  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200015b0  0800bd84  000215b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002010d  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bdb  00000000  00000000  0004032a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  00044f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d8  00000000  00000000  000465f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df92  00000000  00000000  00047ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c4d6  00000000  00000000  00065a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097f0e  00000000  00000000  00081f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00119e46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066c4  00000000  00000000  00119e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f8 	.word	0x200001f8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b9c8 	.word	0x0800b9c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001fc 	.word	0x200001fc
 8000148:	0800b9c8 	.word	0x0800b9c8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ToggleLDAC>:
// Подключение заголовочного файла
#include <DAC_AD5322.h>

//--------------------------------------------------------------------------
// Необходим для загрузки значений в ЦАП
void ToggleLDAC() {
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_RESET);
 8000160:	2200      	movs	r2, #0
 8000162:	2102      	movs	r1, #2
 8000164:	4804      	ldr	r0, [pc, #16]	; (8000178 <ToggleLDAC+0x1c>)
 8000166:	f003 f91a 	bl	800339e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_SET);
 800016a:	2201      	movs	r2, #1
 800016c:	2102      	movs	r1, #2
 800016e:	4802      	ldr	r0, [pc, #8]	; (8000178 <ToggleLDAC+0x1c>)
 8000170:	f003 f915 	bl	800339e <HAL_GPIO_WritePin>
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40010800 	.word	0x40010800

0800017c <SendSPI>:
//--------------------------------------------------------------------------
void SendSPI(SPI_HandleTypeDef *pSPI,uint16_t out){
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
 8000184:	460b      	mov	r3, r1
 8000186:	807b      	strh	r3, [r7, #2]

  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_RESET);
 8000188:	2200      	movs	r2, #0
 800018a:	2110      	movs	r1, #16
 800018c:	4808      	ldr	r0, [pc, #32]	; (80001b0 <SendSPI+0x34>)
 800018e:	f003 f906 	bl	800339e <HAL_GPIO_WritePin>

  	// Передача значений в цап
  	//out	= 0b0100000111111111;
  	HAL_SPI_Transmit(pSPI, (uint8_t*)(&out), 1, 1);
 8000192:	1cb9      	adds	r1, r7, #2
 8000194:	2301      	movs	r3, #1
 8000196:	2201      	movs	r2, #1
 8000198:	6878      	ldr	r0, [r7, #4]
 800019a:	f005 faad 	bl	80056f8 <HAL_SPI_Transmit>

  	// запепрет передачи CS
  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_SET);
 800019e:	2201      	movs	r2, #1
 80001a0:	2110      	movs	r1, #16
 80001a2:	4803      	ldr	r0, [pc, #12]	; (80001b0 <SendSPI+0x34>)
 80001a4:	f003 f8fb 	bl	800339e <HAL_GPIO_WritePin>

}
 80001a8:	bf00      	nop
 80001aa:	3708      	adds	r7, #8
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	40010800 	.word	0x40010800

080001b4 <DAC_AD5322_Ch2>:
  	SendSPI(pSPI,out);
  	ToggleLDAC();
}
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала В
void DAC_AD5322_Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch2) {
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
 80001bc:	460b      	mov	r3, r1
 80001be:	807b      	strh	r3, [r7, #2]

	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 80001c0:	887b      	ldrh	r3, [r7, #2]
 80001c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001c6:	d302      	bcc.n	80001ce <DAC_AD5322_Ch2+0x1a>
 80001c8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80001cc:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 80001ce:	2301      	movs	r3, #1
 80001d0:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 80001d2:	2301      	movs	r3, #1
 80001d4:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 80001d6:	2300      	movs	r3, #0
 80001d8:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 80001da:	2300      	movs	r3, #0
 80001dc:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 80001de:	8afb      	ldrh	r3, [r7, #22]
 80001e0:	03db      	lsls	r3, r3, #15
 80001e2:	b21a      	sxth	r2, r3
 80001e4:	8abb      	ldrh	r3, [r7, #20]
 80001e6:	039b      	lsls	r3, r3, #14
 80001e8:	b21b      	sxth	r3, r3
 80001ea:	4313      	orrs	r3, r2
 80001ec:	b21a      	sxth	r2, r3
 80001ee:	8a7b      	ldrh	r3, [r7, #18]
 80001f0:	035b      	lsls	r3, r3, #13
 80001f2:	b21b      	sxth	r3, r3
 80001f4:	4313      	orrs	r3, r2
 80001f6:	b21a      	sxth	r2, r3
 80001f8:	8a3b      	ldrh	r3, [r7, #16]
 80001fa:	031b      	lsls	r3, r3, #12
 80001fc:	b21b      	sxth	r3, r3
 80001fe:	4313      	orrs	r3, r2
 8000200:	b21b      	sxth	r3, r3
 8000202:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000204:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000208:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800020c:	f023 030f 	bic.w	r3, r3, #15
 8000210:	b21a      	sxth	r2, r3
 8000212:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800021a:	b21b      	sxth	r3, r3
 800021c:	4313      	orrs	r3, r2
 800021e:	b21b      	sxth	r3, r3
 8000220:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000222:	89bb      	ldrh	r3, [r7, #12]
 8000224:	4619      	mov	r1, r3
 8000226:	6878      	ldr	r0, [r7, #4]
 8000228:	f7ff ffa8 	bl	800017c <SendSPI>
  	SendSPI(pSPI,out);
 800022c:	89bb      	ldrh	r3, [r7, #12]
 800022e:	4619      	mov	r1, r3
 8000230:	6878      	ldr	r0, [r7, #4]
 8000232:	f7ff ffa3 	bl	800017c <SendSPI>
  	ToggleLDAC();
 8000236:	f7ff ff91 	bl	800015c <ToggleLDAC>
}
 800023a:	bf00      	nop
 800023c:	3718      	adds	r7, #24
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}

08000242 <DAC_AD5322_Ch1Ch2>:
//--------------------------------------------------------------------------
void DAC_AD5322_Ch1Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch1, uint16_t data_ch2) {
 8000242:	b580      	push	{r7, lr}
 8000244:	b086      	sub	sp, #24
 8000246:	af00      	add	r7, sp, #0
 8000248:	6078      	str	r0, [r7, #4]
 800024a:	460b      	mov	r3, r1
 800024c:	807b      	strh	r3, [r7, #2]
 800024e:	4613      	mov	r3, r2
 8000250:	803b      	strh	r3, [r7, #0]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000252:	887b      	ldrh	r3, [r7, #2]
 8000254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000258:	d302      	bcc.n	8000260 <DAC_AD5322_Ch1Ch2+0x1e>
 800025a:	f640 73ff 	movw	r3, #4095	; 0xfff
 800025e:	807b      	strh	r3, [r7, #2]
	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 8000260:	883b      	ldrh	r3, [r7, #0]
 8000262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000266:	d302      	bcc.n	800026e <DAC_AD5322_Ch1Ch2+0x2c>
 8000268:	f640 73ff 	movw	r3, #4095	; 0xfff
 800026c:	803b      	strh	r3, [r7, #0]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 800026e:	2300      	movs	r3, #0
 8000270:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000272:	2301      	movs	r3, #1
 8000274:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000276:	2300      	movs	r3, #0
 8000278:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 800027a:	2300      	movs	r3, #0
 800027c:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 800027e:	8afb      	ldrh	r3, [r7, #22]
 8000280:	03db      	lsls	r3, r3, #15
 8000282:	b21a      	sxth	r2, r3
 8000284:	8abb      	ldrh	r3, [r7, #20]
 8000286:	039b      	lsls	r3, r3, #14
 8000288:	b21b      	sxth	r3, r3
 800028a:	4313      	orrs	r3, r2
 800028c:	b21a      	sxth	r2, r3
 800028e:	8a7b      	ldrh	r3, [r7, #18]
 8000290:	035b      	lsls	r3, r3, #13
 8000292:	b21b      	sxth	r3, r3
 8000294:	4313      	orrs	r3, r2
 8000296:	b21a      	sxth	r2, r3
 8000298:	8a3b      	ldrh	r3, [r7, #16]
 800029a:	031b      	lsls	r3, r3, #12
 800029c:	b21b      	sxth	r3, r3
 800029e:	4313      	orrs	r3, r2
 80002a0:	b21b      	sxth	r3, r3
 80002a2:	81fb      	strh	r3, [r7, #14]
	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 80002a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80002a8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80002ac:	f023 030f 	bic.w	r3, r3, #15
 80002b0:	b21a      	sxth	r2, r3
 80002b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80002b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002ba:	b21b      	sxth	r3, r3
 80002bc:	4313      	orrs	r3, r2
 80002be:	b21b      	sxth	r3, r3
 80002c0:	81bb      	strh	r3, [r7, #12]

  	SendSPI(pSPI,out);
 80002c2:	89bb      	ldrh	r3, [r7, #12]
 80002c4:	4619      	mov	r1, r3
 80002c6:	6878      	ldr	r0, [r7, #4]
 80002c8:	f7ff ff58 	bl	800017c <SendSPI>
  	SendSPI(pSPI,out);
 80002cc:	89bb      	ldrh	r3, [r7, #12]
 80002ce:	4619      	mov	r1, r3
 80002d0:	6878      	ldr	r0, [r7, #4]
 80002d2:	f7ff ff53 	bl	800017c <SendSPI>
  	//--------------------------------------------------------------------------
  	chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 80002d6:	2301      	movs	r3, #1
 80002d8:	82fb      	strh	r3, [r7, #22]
  	bufferVref 	= 1;	// bit 14: усилитель VREF?
 80002da:	2301      	movs	r3, #1
 80002dc:	82bb      	strh	r3, [r7, #20]
  	PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 80002de:	2300      	movs	r3, #0
 80002e0:	827b      	strh	r3, [r7, #18]
  	PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 80002e2:	2300      	movs	r3, #0
 80002e4:	823b      	strh	r3, [r7, #16]

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 80002e6:	8afb      	ldrh	r3, [r7, #22]
 80002e8:	03db      	lsls	r3, r3, #15
 80002ea:	b21a      	sxth	r2, r3
 80002ec:	8abb      	ldrh	r3, [r7, #20]
 80002ee:	039b      	lsls	r3, r3, #14
 80002f0:	b21b      	sxth	r3, r3
 80002f2:	4313      	orrs	r3, r2
 80002f4:	b21a      	sxth	r2, r3
 80002f6:	8a7b      	ldrh	r3, [r7, #18]
 80002f8:	035b      	lsls	r3, r3, #13
 80002fa:	b21b      	sxth	r3, r3
 80002fc:	4313      	orrs	r3, r2
 80002fe:	b21a      	sxth	r2, r3
 8000300:	8a3b      	ldrh	r3, [r7, #16]
 8000302:	031b      	lsls	r3, r3, #12
 8000304:	b21b      	sxth	r3, r3
 8000306:	4313      	orrs	r3, r2
 8000308:	b21b      	sxth	r3, r3
 800030a:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 800030c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000310:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000314:	f023 030f 	bic.w	r3, r3, #15
 8000318:	b21a      	sxth	r2, r3
 800031a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800031e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000322:	b21b      	sxth	r3, r3
 8000324:	4313      	orrs	r3, r2
 8000326:	b21b      	sxth	r3, r3
 8000328:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 800032a:	89bb      	ldrh	r3, [r7, #12]
 800032c:	4619      	mov	r1, r3
 800032e:	6878      	ldr	r0, [r7, #4]
 8000330:	f7ff ff24 	bl	800017c <SendSPI>
  	SendSPI(pSPI,out);
 8000334:	89bb      	ldrh	r3, [r7, #12]
 8000336:	4619      	mov	r1, r3
 8000338:	6878      	ldr	r0, [r7, #4]
 800033a:	f7ff ff1f 	bl	800017c <SendSPI>
  	ToggleLDAC();
 800033e:	f7ff ff0d 	bl	800015c <ToggleLDAC>
}
 8000342:	bf00      	nop
 8000344:	3718      	adds	r7, #24
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
	...

0800034c <flash_write_calibTable>:
/*
 * @brief   Write calibration table into flash memory
 * @retval  HAL Status
 */
HAL_StatusTypeDef flash_write_calibTable(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b088      	sub	sp, #32
 8000350:	af00      	add	r7, sp, #0
    /* Create some variables */
    volatile uint32_t   addr    = FLASH_TABLE_START_ADDR;
 8000352:	4b45      	ldr	r3, [pc, #276]	; (8000468 <flash_write_calibTable+0x11c>)
 8000354:	617b      	str	r3, [r7, #20]
    uint32_t            err     = 0;
 8000356:	2300      	movs	r3, #0
 8000358:	613b      	str	r3, [r7, #16]
    uint32_t            index   = 0;
 800035a:	2300      	movs	r3, #0
 800035c:	61fb      	str	r3, [r7, #28]
    uint8_t             status  = HAL_OK;
 800035e:	2300      	movs	r3, #0
 8000360:	76fb      	strb	r3, [r7, #27]

    /* Compare flash and ram content */
    while ( addr < FLASH_TABLE_STOP_ADDR ) {
 8000362:	e010      	b.n	8000386 <flash_write_calibTable+0x3a>
        if ( DevNVRAM.data32[index] != *(uint32_t *)addr ) {
 8000364:	4a41      	ldr	r2, [pc, #260]	; (800046c <flash_write_calibTable+0x120>)
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800036c:	697b      	ldr	r3, [r7, #20]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	429a      	cmp	r2, r3
 8000372:	d002      	beq.n	800037a <flash_write_calibTable+0x2e>
            ++err;
 8000374:	693b      	ldr	r3, [r7, #16]
 8000376:	3301      	adds	r3, #1
 8000378:	613b      	str	r3, [r7, #16]
        }
        index += 1;
 800037a:	69fb      	ldr	r3, [r7, #28]
 800037c:	3301      	adds	r3, #1
 800037e:	61fb      	str	r3, [r7, #28]
        addr += 4;
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	3304      	adds	r3, #4
 8000384:	617b      	str	r3, [r7, #20]
    while ( addr < FLASH_TABLE_STOP_ADDR ) {
 8000386:	697b      	ldr	r3, [r7, #20]
 8000388:	4a39      	ldr	r2, [pc, #228]	; (8000470 <flash_write_calibTable+0x124>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d9ea      	bls.n	8000364 <flash_write_calibTable+0x18>
    }

    /* If there are differencies -> write new data in flash */
    if (err > 0) {
 800038e:	693b      	ldr	r3, [r7, #16]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d063      	beq.n	800045c <flash_write_calibTable+0x110>
        /* Unlock flash */
        if ( HAL_FLASH_Unlock() != HAL_OK ) {
 8000394:	f002 fcd8 	bl	8002d48 <HAL_FLASH_Unlock>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d003      	beq.n	80003a6 <flash_write_calibTable+0x5a>
            status = HAL_ERROR;
 800039e:	2301      	movs	r3, #1
 80003a0:	76fb      	strb	r3, [r7, #27]
            return status;
 80003a2:	7efb      	ldrb	r3, [r7, #27]
 80003a4:	e05b      	b.n	800045e <flash_write_calibTable+0x112>
        }

        /* Erase flash */
        FLASH_EraseInitTypeDef EraseInitStruct = {
 80003a6:	463b      	mov	r3, r7
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
 80003b0:	60da      	str	r2, [r3, #12]
 80003b2:	4b2d      	ldr	r3, [pc, #180]	; (8000468 <flash_write_calibTable+0x11c>)
 80003b4:	60bb      	str	r3, [r7, #8]
 80003b6:	2301      	movs	r3, #1
 80003b8:	60fb      	str	r3, [r7, #12]
                .TypeErase      = FLASH_TYPEERASE_PAGES,
                .PageAddress    = FLASH_TABLE_START_ADDR,
                .NbPages        = 1
        };
        if ( HAL_FLASHEx_Erase(&EraseInitStruct, &err) != HAL_OK ) {
 80003ba:	f107 0210 	add.w	r2, r7, #16
 80003be:	463b      	mov	r3, r7
 80003c0:	4611      	mov	r1, r2
 80003c2:	4618      	mov	r0, r3
 80003c4:	f002 fda8 	bl	8002f18 <HAL_FLASHEx_Erase>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d003      	beq.n	80003d6 <flash_write_calibTable+0x8a>
            status = HAL_ERROR;
 80003ce:	2301      	movs	r3, #1
 80003d0:	76fb      	strb	r3, [r7, #27]
            return status;
 80003d2:	7efb      	ldrb	r3, [r7, #27]
 80003d4:	e043      	b.n	800045e <flash_write_calibTable+0x112>
        }
        if ( err != 0xFFFFFFFF ) {
 80003d6:	693b      	ldr	r3, [r7, #16]
 80003d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003dc:	d003      	beq.n	80003e6 <flash_write_calibTable+0x9a>
            status = HAL_ERROR;
 80003de:	2301      	movs	r3, #1
 80003e0:	76fb      	strb	r3, [r7, #27]
            return status;
 80003e2:	7efb      	ldrb	r3, [r7, #27]
 80003e4:	e03b      	b.n	800045e <flash_write_calibTable+0x112>
        }

        /* Reset variables */
        addr    = FLASH_TABLE_START_ADDR;
 80003e6:	4b20      	ldr	r3, [pc, #128]	; (8000468 <flash_write_calibTable+0x11c>)
 80003e8:	617b      	str	r3, [r7, #20]
        err     = 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	613b      	str	r3, [r7, #16]
        index   = 0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	61fb      	str	r3, [r7, #28]
        /* Increase number of rewritings */
        DevNVRAM.sector.NWrite += 1;
 80003f2:	4b1e      	ldr	r3, [pc, #120]	; (800046c <flash_write_calibTable+0x120>)
 80003f4:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 80003f8:	3301      	adds	r3, #1
 80003fa:	4a1c      	ldr	r2, [pc, #112]	; (800046c <flash_write_calibTable+0x120>)
 80003fc:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
        /* Calculate calibration table checksum */
        DevNVRAM.sector.CheckSum = HAL_CRC_Calculate( &hcrc,
 8000400:	2218      	movs	r2, #24
 8000402:	491a      	ldr	r1, [pc, #104]	; (800046c <flash_write_calibTable+0x120>)
 8000404:	481b      	ldr	r0, [pc, #108]	; (8000474 <flash_write_calibTable+0x128>)
 8000406:	f002 fbfc 	bl	8002c02 <HAL_CRC_Calculate>
 800040a:	4603      	mov	r3, r0
 800040c:	4a17      	ldr	r2, [pc, #92]	; (800046c <flash_write_calibTable+0x120>)
 800040e:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
                                                      (uint32_t*)&DevNVRAM.calibration_table,
                                                      (sizeof(DevNVRAM.calibration_table)/4) );
        /* Write flash */
        while (addr < FLASH_TABLE_STOP_ADDR) {
 8000412:	e01d      	b.n	8000450 <flash_write_calibTable+0x104>
            if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, DevNVRAM.data32[index]) != HAL_OK) {
 8000414:	6979      	ldr	r1, [r7, #20]
 8000416:	4a15      	ldr	r2, [pc, #84]	; (800046c <flash_write_calibTable+0x120>)
 8000418:	69fb      	ldr	r3, [r7, #28]
 800041a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800041e:	461a      	mov	r2, r3
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	2002      	movs	r0, #2
 8000426:	f002 fc1f 	bl	8002c68 <HAL_FLASH_Program>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d002      	beq.n	8000436 <flash_write_calibTable+0xea>
                err++;
 8000430:	693b      	ldr	r3, [r7, #16]
 8000432:	3301      	adds	r3, #1
 8000434:	613b      	str	r3, [r7, #16]
            }
            index += 1;
 8000436:	69fb      	ldr	r3, [r7, #28]
 8000438:	3301      	adds	r3, #1
 800043a:	61fb      	str	r3, [r7, #28]
            addr += 4;
 800043c:	697b      	ldr	r3, [r7, #20]
 800043e:	3304      	adds	r3, #4
 8000440:	617b      	str	r3, [r7, #20]
            /* Wait until flash is busy */
            while ( (FLASH->SR & FLASH_SR_BSY) != 0 )
 8000442:	bf00      	nop
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <flash_write_calibTable+0x12c>)
 8000446:	68db      	ldr	r3, [r3, #12]
 8000448:	f003 0301 	and.w	r3, r3, #1
 800044c:	2b00      	cmp	r3, #0
 800044e:	d1f9      	bne.n	8000444 <flash_write_calibTable+0xf8>
        while (addr < FLASH_TABLE_STOP_ADDR) {
 8000450:	697b      	ldr	r3, [r7, #20]
 8000452:	4a07      	ldr	r2, [pc, #28]	; (8000470 <flash_write_calibTable+0x124>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d9dd      	bls.n	8000414 <flash_write_calibTable+0xc8>
                ;
        }
        /* Lock flash */
        HAL_FLASH_Lock();
 8000458:	f002 fc9c 	bl	8002d94 <HAL_FLASH_Lock>
    }
    return status;
 800045c:	7efb      	ldrb	r3, [r7, #27]
}
 800045e:	4618      	mov	r0, r3
 8000460:	3720      	adds	r7, #32
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	0801fc00 	.word	0x0801fc00
 800046c:	200004f4 	.word	0x200004f4
 8000470:	0801ffff 	.word	0x0801ffff
 8000474:	200008f4 	.word	0x200008f4
 8000478:	40022000 	.word	0x40022000

0800047c <crete_calibration_table>:
#include <logic_calibration_table.h>
#include <stdlib.h>
#include <math.h>

void crete_calibration_table(Table_t *calibTable)
{ //de
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]

    calibTable->dacValA_m12[0] = 0x159;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	f240 1259 	movw	r2, #345	; 0x159
 800048a:	819a      	strh	r2, [r3, #12]
    calibTable->dacValA_m12[1] = 0x182;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8000492:	81da      	strh	r2, [r3, #14]
    calibTable->dacValA_m12[2] = 0x225;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	f240 2225 	movw	r2, #549	; 0x225
 800049a:	821a      	strh	r2, [r3, #16]
    calibTable->dacValA_m12[3] = 0x309;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f240 3209 	movw	r2, #777	; 0x309
 80004a2:	825a      	strh	r2, [r3, #18]
    calibTable->dacValA_m12[4] = 0x3eb;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80004aa:	829a      	strh	r2, [r3, #20]
    calibTable->dacValA_m12[5] = 0x4cd;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	f240 42cd 	movw	r2, #1229	; 0x4cd
 80004b2:	82da      	strh	r2, [r3, #22]
    calibTable->dacValA_m12[6] = 0x5b0;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	f44f 62b6 	mov.w	r2, #1456	; 0x5b0
 80004ba:	831a      	strh	r2, [r3, #24]
    calibTable->dacValA_m12[7] = 0x693;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	f240 6293 	movw	r2, #1683	; 0x693
 80004c2:	835a      	strh	r2, [r3, #26]
    calibTable->dacValA_m12[8] = 0x777;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	f240 7277 	movw	r2, #1911	; 0x777
 80004ca:	839a      	strh	r2, [r3, #28]
    calibTable->dacValA_m12[9] = 0x861;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	f640 0261 	movw	r2, #2145	; 0x861
 80004d2:	83da      	strh	r2, [r3, #30]
    calibTable->dacValA_m12[10] = 0x93c;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	f640 123c 	movw	r2, #2364	; 0x93c
 80004da:	841a      	strh	r2, [r3, #32]
    calibTable->dacValA_m12[11] = 0xa20;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	f44f 6222 	mov.w	r2, #2592	; 0xa20
 80004e2:	845a      	strh	r2, [r3, #34]	; 0x22
    calibTable->dacValA_m12[12] = 0xb04;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	f640 3204 	movw	r2, #2820	; 0xb04
 80004ea:	849a      	strh	r2, [r3, #36]	; 0x24
    calibTable->dacValA_m12[13] = 0xbe5;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	f640 32e5 	movw	r2, #3045	; 0xbe5
 80004f2:	84da      	strh	r2, [r3, #38]	; 0x26
    calibTable->dacValA_m12[14] = 0xcc7;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	f640 42c7 	movw	r2, #3271	; 0xcc7
 80004fa:	851a      	strh	r2, [r3, #40]	; 0x28
    calibTable->dacValA_m12[15] = 0xda9;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	f640 52a9 	movw	r2, #3497	; 0xda9
 8000502:	855a      	strh	r2, [r3, #42]	; 0x2a
    calibTable->dacValA_m12[16] = 0xe62;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	f640 6262 	movw	r2, #3682	; 0xe62
 800050a:	859a      	strh	r2, [r3, #44]	; 0x2c
    calibTable->dacValA_m12[17] = 0xe96;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f640 6296 	movw	r2, #3734	; 0xe96
 8000512:	85da      	strh	r2, [r3, #46]	; 0x2e
    calibTable->dacValA_m12[18] = 0xeac;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f640 62ac 	movw	r2, #3756	; 0xeac
 800051a:	861a      	strh	r2, [r3, #48]	; 0x30

    calibTable->dacValB_m12[0] = 0x145;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f240 1245 	movw	r2, #325	; 0x145
 8000522:	865a      	strh	r2, [r3, #50]	; 0x32
    calibTable->dacValB_m12[1] = 0x16e;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800052a:	869a      	strh	r2, [r3, #52]	; 0x34
    calibTable->dacValB_m12[2] = 0x212;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	f240 2212 	movw	r2, #530	; 0x212
 8000532:	86da      	strh	r2, [r3, #54]	; 0x36
    calibTable->dacValB_m12[3] = 0x2f0;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 800053a:	871a      	strh	r2, [r3, #56]	; 0x38
    calibTable->dacValB_m12[4] = 0x3d2;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	f240 32d2 	movw	r2, #978	; 0x3d2
 8000542:	875a      	strh	r2, [r3, #58]	; 0x3a
    calibTable->dacValB_m12[5] = 0x4b4;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800054a:	879a      	strh	r2, [r3, #60]	; 0x3c
    calibTable->dacValB_m12[6] = 0x597;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f240 5297 	movw	r2, #1431	; 0x597
 8000552:	87da      	strh	r2, [r3, #62]	; 0x3e
    calibTable->dacValB_m12[7] = 0x67a;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f240 627a 	movw	r2, #1658	; 0x67a
 800055a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    calibTable->dacValB_m12[8] = 0x75e;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	f240 725e 	movw	r2, #1886	; 0x75e
 8000564:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    calibTable->dacValB_m12[9] = 0x84a;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f640 024a 	movw	r2, #2122	; 0x84a
 800056e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    calibTable->dacValB_m12[10] = 0x923;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	f640 1223 	movw	r2, #2339	; 0x923
 8000578:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    calibTable->dacValB_m12[11] = 0xa07;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	f640 2207 	movw	r2, #2567	; 0xa07
 8000582:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    calibTable->dacValB_m12[12] = 0xae8;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	f640 22e8 	movw	r2, #2792	; 0xae8
 800058c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    calibTable->dacValB_m12[13] = 0xbcc;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f640 32cc 	movw	r2, #3020	; 0xbcc
 8000596:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    calibTable->dacValB_m12[14] = 0xcae;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	f640 42ae 	movw	r2, #3246	; 0xcae
 80005a0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    calibTable->dacValB_m12[15] = 0xd90;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f44f 6259 	mov.w	r2, #3472	; 0xd90
 80005aa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    calibTable->dacValB_m12[16] = 0xe49;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f640 6249 	movw	r2, #3657	; 0xe49
 80005b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    calibTable->dacValB_m12[17] = 0xe7b;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f640 627b 	movw	r2, #3707	; 0xe7b
 80005be:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    calibTable->dacValB_m12[18] = 0xe92;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f640 6292 	movw	r2, #3730	; 0xe92
 80005c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    calibTable->dacValA_m27[0] = 0x0;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2200      	movs	r2, #0
 80005d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    calibTable->dacValA_m27[1] = 0x1000;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    calibTable->dacValB_m27[0] = 0x0;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2200      	movs	r2, #0
 80005e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    calibTable->dacValB_m27[1] = 0x1000;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr

080005fa <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005fa:	b480      	push	{r7}
 80005fc:	b083      	sub	sp, #12
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000602:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000606:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	2b00      	cmp	r3, #0
 8000610:	d013      	beq.n	800063a <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000612:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000616:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800061a:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800061e:	2b00      	cmp	r3, #0
 8000620:	d00b      	beq.n	800063a <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000622:	e000      	b.n	8000626 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000624:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000626:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0f9      	beq.n	8000624 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000630:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	b2d2      	uxtb	r2, r2
 8000638:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800063a:	687b      	ldr	r3, [r7, #4]
}
 800063c:	4618      	mov	r0, r3
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
	...

08000648 <DWT_Init>:
#define SCB_DEMCR   *(volatile unsigned long *)0xE000EDFC

/******************************************************************************/
/* inline func */
__STATIC_INLINE void DWT_Init(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 800064c:	4b07      	ldr	r3, [pc, #28]	; (800066c <DWT_Init+0x24>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	4a06      	ldr	r2, [pc, #24]	; (800066c <DWT_Init+0x24>)
 8000652:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000656:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <DWT_Init+0x28>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a04      	ldr	r2, [pc, #16]	; (8000670 <DWT_Init+0x28>)
 800065e:	f043 0301 	orr.w	r3, r3, #1
 8000662:	6013      	str	r3, [r2, #0]
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	e000edf0 	.word	0xe000edf0
 8000670:	e0001000 	.word	0xe0001000

08000674 <_write>:
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */
//**************************************************************************
#if DEBUG_SWO
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
 8000684:	e009      	b.n	800069a <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	1c5a      	adds	r2, r3, #1
 800068a:	60ba      	str	r2, [r7, #8]
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ffb3 	bl	80005fa <ITM_SendChar>
	for (int i = 0; i < len; i++)
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	3301      	adds	r3, #1
 8000698:	617b      	str	r3, [r7, #20]
 800069a:	697a      	ldr	r2, [r7, #20]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	429a      	cmp	r2, r3
 80006a0:	dbf1      	blt.n	8000686 <_write+0x12>
	}
	return len;
 80006a2:	687b      	ldr	r3, [r7, #4]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3718      	adds	r7, #24
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <SetDacA>:
#if TEST_DAC
uint16_t VDAC_A = 0;
uint16_t VDAC_B = 0;
//--------------------------------------------------------------------------
// Старая реализация. для приема dgt значений цап.
 void SetDacA(uint16_t da) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	80fb      	strh	r3, [r7, #6]
 	VDAC_A = da;
 80006b6:	4a06      	ldr	r2, [pc, #24]	; (80006d0 <SetDacA+0x24>)
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	8013      	strh	r3, [r2, #0]
 	DAC_AD5322_Ch2(&hspi1, VDAC_A);
 80006bc:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <SetDacA+0x24>)
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	4619      	mov	r1, r3
 80006c2:	4804      	ldr	r0, [pc, #16]	; (80006d4 <SetDacA+0x28>)
 80006c4:	f7ff fd76 	bl	80001b4 <DAC_AD5322_Ch2>
 }
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000256 	.word	0x20000256
 80006d4:	20000974 	.word	0x20000974

080006d8 <SetDacB>:
 void SetDacB(uint16_t db) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	80fb      	strh	r3, [r7, #6]
 	VDAC_B = db;
 80006e2:	4a06      	ldr	r2, [pc, #24]	; (80006fc <SetDacB+0x24>)
 80006e4:	88fb      	ldrh	r3, [r7, #6]
 80006e6:	8013      	strh	r3, [r2, #0]
 	DAC_AD5322_Ch2(&hspi1, VDAC_B);
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <SetDacB+0x24>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	4619      	mov	r1, r3
 80006ee:	4804      	ldr	r0, [pc, #16]	; (8000700 <SetDacB+0x28>)
 80006f0:	f7ff fd60 	bl	80001b4 <DAC_AD5322_Ch2>
 }
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000258 	.word	0x20000258
 8000700:	20000974 	.word	0x20000974

08000704 <SetAllDAC>:
void SetAllDAC() {
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	DAC_AD5322_Ch1Ch2(&hspi1,VDAC_A,VDAC_B);
 8000708:	4b04      	ldr	r3, [pc, #16]	; (800071c <SetAllDAC+0x18>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	4a04      	ldr	r2, [pc, #16]	; (8000720 <SetAllDAC+0x1c>)
 800070e:	8812      	ldrh	r2, [r2, #0]
 8000710:	4619      	mov	r1, r3
 8000712:	4804      	ldr	r0, [pc, #16]	; (8000724 <SetAllDAC+0x20>)
 8000714:	f7ff fd95 	bl	8000242 <DAC_AD5322_Ch1Ch2>
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000256 	.word	0x20000256
 8000720:	20000258 	.word	0x20000258
 8000724:	20000974 	.word	0x20000974

08000728 <GetDacA>:
//void SetAllDAC()
//{
//	DAC_AD5322_Ch1Ch2(&hspi1, VDAC_A, VDAC_B);
//}
uint16_t GetDacA()
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
	return VDAC_A;
 800072c:	4b02      	ldr	r3, [pc, #8]	; (8000738 <GetDacA+0x10>)
 800072e:	881b      	ldrh	r3, [r3, #0]
}
 8000730:	4618      	mov	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	20000256 	.word	0x20000256

0800073c <GetDacB>:
uint16_t GetDacB()
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
	return VDAC_B;
 8000740:	4b02      	ldr	r3, [pc, #8]	; (800074c <GetDacB+0x10>)
 8000742:	881b      	ldrh	r3, [r3, #0]
}
 8000744:	4618      	mov	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	20000258 	.word	0x20000258

08000750 <GetBtnRunState>:

uint8_t btn3_long_rd = 0;
uint8_t btn3_short_rd = 0;
//--------------------------------------------------------------------------
uint8_t GetBtnRunState()
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x00)
 8000754:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <GetBtnRunState+0x7c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d10b      	bne.n	8000774 <GetBtnRunState+0x24>
 800075c:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <GetBtnRunState+0x80>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d107      	bne.n	8000774 <GetBtnRunState+0x24>
	{
		btn1_long_rd = 0;
 8000764:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <GetBtnRunState+0x80>)
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <GetBtnRunState+0x7c>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8000770:	2300      	movs	r3, #0
 8000772:	e026      	b.n	80007c2 <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x01 && btn1_long_rd == 0x00)
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <GetBtnRunState+0x7c>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d10b      	bne.n	8000794 <GetBtnRunState+0x44>
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <GetBtnRunState+0x80>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d107      	bne.n	8000794 <GetBtnRunState+0x44>
	{
		btn1_long_rd = 0;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <GetBtnRunState+0x80>)
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <GetBtnRunState+0x7c>)
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
		return 0x01;
 8000790:	2301      	movs	r3, #1
 8000792:	e016      	b.n	80007c2 <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x01)
 8000794:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <GetBtnRunState+0x7c>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d10b      	bne.n	80007b4 <GetBtnRunState+0x64>
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <GetBtnRunState+0x80>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d107      	bne.n	80007b4 <GetBtnRunState+0x64>
	{
		btn1_long_rd = 0;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <GetBtnRunState+0x80>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <GetBtnRunState+0x7c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
		return 0x02;
 80007b0:	2302      	movs	r3, #2
 80007b2:	e006      	b.n	80007c2 <GetBtnRunState+0x72>
	}

	btn1_long_rd = 0;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <GetBtnRunState+0x80>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	701a      	strb	r2, [r3, #0]
	btn1_short_rd = 0;
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <GetBtnRunState+0x7c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]

	//	if (short_state1 == 0x00 && long_state1 == 0x00)	return 0x00;
	//	if (short_state1 == 0x01 && long_state1 == 0x00)	return 0x01;
	//	if (short_state1 == 0x00 && long_state1 == 0x01)	return 0x02;
	return 0x00;
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	20000261 	.word	0x20000261
 80007d0:	20000260 	.word	0x20000260

080007d4 <GetBtnUpState>:
//--------------------------------------------------------------------------
uint8_t GetBtnUpState()
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x00)
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <GetBtnUpState+0x7c>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d10b      	bne.n	80007f8 <GetBtnUpState+0x24>
 80007e0:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <GetBtnUpState+0x80>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d107      	bne.n	80007f8 <GetBtnUpState+0x24>
	{
		btn2_long_rd = 0;
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <GetBtnUpState+0x80>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <GetBtnUpState+0x7c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
		return 0x00;
 80007f4:	2300      	movs	r3, #0
 80007f6:	e026      	b.n	8000846 <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x01 && btn2_long_rd == 0x00)
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <GetBtnUpState+0x7c>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d10b      	bne.n	8000818 <GetBtnUpState+0x44>
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <GetBtnUpState+0x80>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d107      	bne.n	8000818 <GetBtnUpState+0x44>
	{
		btn2_long_rd = 0;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <GetBtnUpState+0x80>)
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <GetBtnUpState+0x7c>)
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
		return 0x01;
 8000814:	2301      	movs	r3, #1
 8000816:	e016      	b.n	8000846 <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x01)
 8000818:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <GetBtnUpState+0x7c>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d10b      	bne.n	8000838 <GetBtnUpState+0x64>
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <GetBtnUpState+0x80>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d107      	bne.n	8000838 <GetBtnUpState+0x64>
	{
		btn2_long_rd = 0;
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <GetBtnUpState+0x80>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <GetBtnUpState+0x7c>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
		return 0x02;
 8000834:	2302      	movs	r3, #2
 8000836:	e006      	b.n	8000846 <GetBtnUpState+0x72>
	}

	btn2_long_rd = 0;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <GetBtnUpState+0x80>)
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
	btn2_short_rd = 0;
 800083e:	4b04      	ldr	r3, [pc, #16]	; (8000850 <GetBtnUpState+0x7c>)
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]
	//	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	//	if (short_state2 == 0x00 && long_state2 == 0x00)	return 0x00;
	//	if (short_state2 == 0x01 && long_state2 == 0x00)	return 0x01;
	//	if (short_state2 == 0x00 && long_state2 == 0x01)	return 0x02;
	return 0x00;
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	20000269 	.word	0x20000269
 8000854:	20000268 	.word	0x20000268

08000858 <GetBtnDownState>:
//--------------------------------------------------------------------------
uint8_t GetBtnDownState()
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x00)
 800085c:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <GetBtnDownState+0x7c>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d10b      	bne.n	800087c <GetBtnDownState+0x24>
 8000864:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <GetBtnDownState+0x80>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d107      	bne.n	800087c <GetBtnDownState+0x24>
	{
		btn3_long_rd = 0;
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <GetBtnDownState+0x80>)
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <GetBtnDownState+0x7c>)
 8000874:	2200      	movs	r2, #0
 8000876:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8000878:	2300      	movs	r3, #0
 800087a:	e026      	b.n	80008ca <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x01 && btn3_long_rd == 0x00)
 800087c:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <GetBtnDownState+0x7c>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d10b      	bne.n	800089c <GetBtnDownState+0x44>
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <GetBtnDownState+0x80>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d107      	bne.n	800089c <GetBtnDownState+0x44>
	{
		btn3_long_rd = 0;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <GetBtnDownState+0x80>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <GetBtnDownState+0x7c>)
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]
		return 0x01;
 8000898:	2301      	movs	r3, #1
 800089a:	e016      	b.n	80008ca <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x01)
 800089c:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <GetBtnDownState+0x7c>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d10b      	bne.n	80008bc <GetBtnDownState+0x64>
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <GetBtnDownState+0x80>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d107      	bne.n	80008bc <GetBtnDownState+0x64>
	{
		btn3_long_rd = 0;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <GetBtnDownState+0x80>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <GetBtnDownState+0x7c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
		return 0x02;
 80008b8:	2302      	movs	r3, #2
 80008ba:	e006      	b.n	80008ca <GetBtnDownState+0x72>
	}

	btn3_long_rd = 0;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <GetBtnDownState+0x80>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
	btn3_short_rd = 0;
 80008c2:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <GetBtnDownState+0x7c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
	//	if (short_state3 == 0x00 && long_state3 == 0x00)	return 0x00;
	//	if (short_state3 == 0x01 && long_state3 == 0x00)	return 0x01;
	//	if (short_state3 == 0x00 && long_state3 == 0x01)	return 0x02;
	return 0x00;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	20000271 	.word	0x20000271
 80008d8:	20000270 	.word	0x20000270

080008dc <EnableTIM3_PB4>:
// char trans2_str[64] = {
// 	0,
// };
//--------------------------------------------------------------------------
void EnableTIM3_PB4()
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
	timWork = 1;
 80008e0:	4b03      	ldr	r3, [pc, #12]	; (80008f0 <EnableTIM3_PB4+0x14>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	701a      	strb	r2, [r3, #0]
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	20000272 	.word	0x20000272

080008f4 <GetTIM3>:
uint16_t GetTIM3()
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
	return g_vTIM3_PB4;
 80008f8:	4b03      	ldr	r3, [pc, #12]	; (8000908 <GetTIM3+0x14>)
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	b29b      	uxth	r3, r3
}
 80008fe:	4618      	mov	r0, r3
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	20000274 	.word	0x20000274

0800090c <resValTIM3_PB4>:
void resValTIM3_PB4()
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
	g_vTIM3_PB4 = 0;
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <resValTIM3_PB4+0x14>)
 8000912:	2200      	movs	r2, #0
 8000914:	801a      	strh	r2, [r3, #0]
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	20000274 	.word	0x20000274

08000924 <EnableTIM4_PB6>:
//--------------------------------------------------------------------------
void EnableTIM4_PB6()
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
	timWork = 0;
 8000928:	4b03      	ldr	r3, [pc, #12]	; (8000938 <EnableTIM4_PB6+0x14>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	20000272 	.word	0x20000272

0800093c <GetTIM4>:
uint16_t GetTIM4()
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
	return g_vTIM4_PB6;
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <GetTIM4+0x14>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	b29b      	uxth	r3, r3
}
 8000946:	4618      	mov	r0, r3
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	20000276 	.word	0x20000276

08000954 <resValTIM4_PB6>:
void resValTIM4_PB6()
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
	g_vTIM4_PB6 = 0;
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <resValTIM4_PB6+0x14>)
 800095a:	2200      	movs	r2, #0
 800095c:	801a      	strh	r2, [r3, #0]
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	20000276 	.word	0x20000276

0800096c <HAL_TIM_IC_CaptureCallback>:
//--------------------------------------------------------------------------
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	uint16_t periodTIM3, pulseWidthTIM3, periodTIM4, pulseWidthTIM4;

	if (timWork)
 8000974:	4b2b      	ldr	r3, [pc, #172]	; (8000a24 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b00      	cmp	r3, #0
 800097c:	d027      	beq.n	80009ce <HAL_TIM_IC_CaptureCallback+0x62>
	{
		if (htim->Instance == TIM3)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a29      	ldr	r2, [pc, #164]	; (8000a28 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d149      	bne.n	8000a1c <HAL_TIM_IC_CaptureCallback+0xb0>
		{
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	7f1b      	ldrb	r3, [r3, #28]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d145      	bne.n	8000a1c <HAL_TIM_IC_CaptureCallback+0xb0>
			{
				periodTIM3 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8000990:	2100      	movs	r1, #0
 8000992:	4826      	ldr	r0, [pc, #152]	; (8000a2c <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000994:	f005 fb84 	bl	80060a0 <HAL_TIM_ReadCapturedValue>
 8000998:	4603      	mov	r3, r0
 800099a:	823b      	strh	r3, [r7, #16]
				pulseWidthTIM3 = HAL_TIM_ReadCapturedValue(&htim3,
 800099c:	2104      	movs	r1, #4
 800099e:	4823      	ldr	r0, [pc, #140]	; (8000a2c <HAL_TIM_IC_CaptureCallback+0xc0>)
 80009a0:	f005 fb7e 	bl	80060a0 <HAL_TIM_ReadCapturedValue>
 80009a4:	4603      	mov	r3, r0
 80009a6:	81fb      	strh	r3, [r7, #14]
														   TIM_CHANNEL_2);

				TIM3->CNT = 0;
 80009a8:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24

				int16_t deltaTIM3 = (int16_t)periodTIM3 - (int16_t)pulseWidthTIM3;
 80009ae:	8a3a      	ldrh	r2, [r7, #16]
 80009b0:	89fb      	ldrh	r3, [r7, #14]
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	81bb      	strh	r3, [r7, #12]
				deltaTIM3 = (deltaTIM3 < 0) ? (-1 * deltaTIM3) : deltaTIM3;
 80009b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	bfb8      	it	lt
 80009c0:	425b      	neglt	r3, r3
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	81bb      	strh	r3, [r7, #12]
				g_vTIM3_PB4 = deltaTIM3;
 80009c6:	89ba      	ldrh	r2, [r7, #12]
 80009c8:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80009ca:	801a      	strh	r2, [r3, #0]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
				g_vTIM4_PB6 = deltaTIM4;
			}
		}
	}
}
 80009cc:	e026      	b.n	8000a1c <HAL_TIM_IC_CaptureCallback+0xb0>
		if (htim->Instance == TIM4)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a18      	ldr	r2, [pc, #96]	; (8000a34 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d121      	bne.n	8000a1c <HAL_TIM_IC_CaptureCallback+0xb0>
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	7f1b      	ldrb	r3, [r3, #28]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d11d      	bne.n	8000a1c <HAL_TIM_IC_CaptureCallback+0xb0>
				periodTIM4 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 80009e0:	2100      	movs	r1, #0
 80009e2:	4815      	ldr	r0, [pc, #84]	; (8000a38 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80009e4:	f005 fb5c 	bl	80060a0 <HAL_TIM_ReadCapturedValue>
 80009e8:	4603      	mov	r3, r0
 80009ea:	82fb      	strh	r3, [r7, #22]
				pulseWidthTIM4 = HAL_TIM_ReadCapturedValue(&htim4,
 80009ec:	2104      	movs	r1, #4
 80009ee:	4812      	ldr	r0, [pc, #72]	; (8000a38 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80009f0:	f005 fb56 	bl	80060a0 <HAL_TIM_ReadCapturedValue>
 80009f4:	4603      	mov	r3, r0
 80009f6:	82bb      	strh	r3, [r7, #20]
				TIM4->CNT = 0;
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	625a      	str	r2, [r3, #36]	; 0x24
				int16_t deltaTIM4 = (int16_t)periodTIM4 - (int16_t)pulseWidthTIM4;
 80009fe:	8afa      	ldrh	r2, [r7, #22]
 8000a00:	8abb      	ldrh	r3, [r7, #20]
 8000a02:	1ad3      	subs	r3, r2, r3
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	827b      	strh	r3, [r7, #18]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
 8000a08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	bfb8      	it	lt
 8000a10:	425b      	neglt	r3, r3
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	827b      	strh	r3, [r7, #18]
				g_vTIM4_PB6 = deltaTIM4;
 8000a16:	8a7a      	ldrh	r2, [r7, #18]
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000a1a:	801a      	strh	r2, [r3, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000272 	.word	0x20000272
 8000a28:	40000400 	.word	0x40000400
 8000a2c:	200008fc 	.word	0x200008fc
 8000a30:	20000274 	.word	0x20000274
 8000a34:	40000800 	.word	0x40000800
 8000a38:	200004ac 	.word	0x200004ac
 8000a3c:	20000276 	.word	0x20000276

08000a40 <GetADC>:
//**************************************************************************
#if TEST_ADC
volatile uint16_t g_VADC = 0;

uint16_t GetADC()
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
	return g_VADC;
 8000a44:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <GetADC+0x14>)
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	b29b      	uxth	r3, r3
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	20000278 	.word	0x20000278

08000a58 <HAL_ADC_ConvCpltCallback>:
//--------------------------------------------------------------------------
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a06      	ldr	r2, [pc, #24]	; (8000a80 <HAL_ADC_ConvCpltCallback+0x28>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d106      	bne.n	8000a78 <HAL_ADC_ConvCpltCallback+0x20>
	{
		g_VADC = HAL_ADC_GetValue(&hadc1); // глобальная переменна g_VADC вычитывается
 8000a6a:	4806      	ldr	r0, [pc, #24]	; (8000a84 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000a6c:	f001 fc9e 	bl	80023ac <HAL_ADC_GetValue>
 8000a70:	4603      	mov	r3, r0
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <HAL_ADC_ConvCpltCallback+0x30>)
 8000a76:	801a      	strh	r2, [r3, #0]
	}
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40012400 	.word	0x40012400
 8000a84:	20000944 	.word	0x20000944
 8000a88:	20000278 	.word	0x20000278

08000a8c <runCommands>:
	Калибровка 
	На вход щупа подается семетричная пила с частотой 1кГц с оффестом установленным на ип.
	после компарирования сигнала МК измеряет длительность импульса
	т.к. 1 кГц соотвествет длительности в 500 мс то это означает что мы попапали в полуку офсета.
	--------------------------------------------------------------------------*/
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	6018      	str	r0, [r3, #0]
 8000a98:	463b      	mov	r3, r7
 8000a9a:	6019      	str	r1, [r3, #0]
	if (*Len < 1)
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f000 83e8 	beq.w	8001278 <runCommands+0x7ec>

	//--------------------------------------------------------------------------

	uint8_t UserTxBufferFS[APP_TX_DATA_SIZE];
	uint16_t tVal16;
	uint8_t cmd = Buf[0];
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	//--------------------------------------------------------------------------
	if 		(cmd == 0x01)	// Relay:1 - 12V	[0x01 - 0x01]
 8000ab2:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d16c      	bne.n	8000b94 <runCommands+0x108>
	{
		if (*Len >= 2 && (Buf[1] == 0x01 || Buf[1] == 0x00))
 8000aba:	463b      	mov	r3, r7
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d957      	bls.n	8000b74 <runCommands+0xe8>
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d005      	beq.n	8000adc <runCommands+0x50>
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d14b      	bne.n	8000b74 <runCommands+0xe8>
		{
			if (Buf[1] == 0x01)
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d11f      	bne.n	8000b28 <runCommands+0x9c>
			{
				#if TEST_RELAY
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2104      	movs	r1, #4
 8000aec:	48d2      	ldr	r0, [pc, #840]	; (8000e38 <runCommands+0x3ac>)
 8000aee:	f002 fc56 	bl	800339e <HAL_GPIO_WritePin>
				RelayState = m12;
 8000af2:	4bd2      	ldr	r3, [pc, #840]	; (8000e3c <runCommands+0x3b0>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	701a      	strb	r2, [r3, #0]
				printf("RelayState:12V - %d \n", RelayState);
 8000af8:	4bd0      	ldr	r3, [pc, #832]	; (8000e3c <runCommands+0x3b0>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4619      	mov	r1, r3
 8000afe:	48d0      	ldr	r0, [pc, #832]	; (8000e40 <runCommands+0x3b4>)
 8000b00:	f009 fe3e 	bl	800a780 <iprintf>
				SetAllDAC();
 8000b04:	f7ff fdfe 	bl	8000704 <SetAllDAC>
				UserTxBufferFS[0] = cmd;
 8000b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0c:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8000b10:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 8000b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b16:	2200      	movs	r2, #0
 8000b18:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 8000b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1e:	2102      	movs	r1, #2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f009 fa0f 	bl	8009f44 <CDC_Transmit_FS>
				#endif /* TEST_RELAY */
				return;
 8000b26:	e3ac      	b.n	8001282 <runCommands+0x7f6>
			}
			else if (Buf[1] == 0x00)
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d11f      	bne.n	8000b74 <runCommands+0xe8>
			{
				#if TEST_RELAY
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2104      	movs	r1, #4
 8000b38:	48bf      	ldr	r0, [pc, #764]	; (8000e38 <runCommands+0x3ac>)
 8000b3a:	f002 fc30 	bl	800339e <HAL_GPIO_WritePin>
				RelayState = m27;
 8000b3e:	4bbf      	ldr	r3, [pc, #764]	; (8000e3c <runCommands+0x3b0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
				printf("RelayState:27V - %d \n", RelayState);
 8000b44:	4bbd      	ldr	r3, [pc, #756]	; (8000e3c <runCommands+0x3b0>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	48be      	ldr	r0, [pc, #760]	; (8000e44 <runCommands+0x3b8>)
 8000b4c:	f009 fe18 	bl	800a780 <iprintf>
				SetAllDAC();
 8000b50:	f7ff fdd8 	bl	8000704 <SetAllDAC>

				UserTxBufferFS[0] = cmd;
 8000b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b58:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8000b5c:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 8000b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b62:	2200      	movs	r2, #0
 8000b64:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 8000b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6a:	2102      	movs	r1, #2
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f009 f9e9 	bl	8009f44 <CDC_Transmit_FS>
				#endif /* TEST_RELAY */
				return;
 8000b72:	e386      	b.n	8001282 <runCommands+0x7f6>
			}
		}

		UserTxBufferFS[0] = cmd;
 8000b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b78:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8000b7c:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8000b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b82:	2201      	movs	r2, #1
 8000b84:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8000b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8a:	2102      	movs	r1, #2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f009 f9d9 	bl	8009f44 <CDC_Transmit_FS>
		return;
 8000b92:	e376      	b.n	8001282 <runCommands+0x7f6>

		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x02)	// DA:4095
 8000b94:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d13d      	bne.n	8000c18 <runCommands+0x18c>
	{
		if (*Len >= 3)
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d928      	bls.n	8000bf8 <runCommands+0x16c>
		{
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 8000ba6:	f7ff feb1 	bl	800090c <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 8000baa:	f7ff fed3 	bl	8000954 <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000bbc:	801a      	strh	r2, [r3, #0]
//			SetDacA(tVal16,RelayState);
						SetDacA(tVal16);
 8000bbe:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fd71 	bl	80006ac <SetDacA>

			printf("DacA: %d\n", tVal16);
 8000bca:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	489d      	ldr	r0, [pc, #628]	; (8000e48 <runCommands+0x3bc>)
 8000bd4:	f009 fdd4 	bl	800a780 <iprintf>
			UserTxBufferFS[0] = cmd;
 8000bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bdc:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8000be0:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 8000be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be6:	2200      	movs	r2, #0
 8000be8:	705a      	strb	r2, [r3, #1]

			CDC_Transmit_FS(UserTxBufferFS, 2);
 8000bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bee:	2102      	movs	r1, #2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f009 f9a7 	bl	8009f44 <CDC_Transmit_FS>
			return;
 8000bf6:	e344      	b.n	8001282 <runCommands+0x7f6>
		}

		UserTxBufferFS[0] = cmd;
 8000bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfc:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8000c00:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	2201      	movs	r2, #1
 8000c08:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8000c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0e:	2102      	movs	r1, #2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f009 f997 	bl	8009f44 <CDC_Transmit_FS>
		return;
 8000c16:	e334      	b.n	8001282 <runCommands+0x7f6>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x03)	// DB:4095
 8000c18:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d13d      	bne.n	8000c9c <runCommands+0x210>
	{
		if (*Len >= 3)
 8000c20:	463b      	mov	r3, r7
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d928      	bls.n	8000c7c <runCommands+0x1f0>
		{
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 8000c2a:	f7ff fe6f 	bl	800090c <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 8000c2e:	f7ff fe91 	bl	8000954 <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	3301      	adds	r3, #1
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000c40:	801a      	strh	r2, [r3, #0]
			SetDacB(tVal16);
 8000c42:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fd45 	bl	80006d8 <SetDacB>
//			SetDacB(tVal16,RelayState);

			UserTxBufferFS[0] = cmd;
 8000c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c52:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8000c56:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 8000c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	705a      	strb	r2, [r3, #1]

			printf("DacB: %d \n", tVal16);
 8000c60:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	4619      	mov	r1, r3
 8000c68:	4878      	ldr	r0, [pc, #480]	; (8000e4c <runCommands+0x3c0>)
 8000c6a:	f009 fd89 	bl	800a780 <iprintf>

			CDC_Transmit_FS(UserTxBufferFS, 2);
 8000c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c72:	2102      	movs	r1, #2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f009 f965 	bl	8009f44 <CDC_Transmit_FS>
			return;
 8000c7a:	e302      	b.n	8001282 <runCommands+0x7f6>
		}

		UserTxBufferFS[0] = cmd;
 8000c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c80:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8000c84:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8000c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8000c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c92:	2102      	movs	r1, #2
 8000c94:	4618      	mov	r0, r3
 8000c96:	f009 f955 	bl	8009f44 <CDC_Transmit_FS>
		return;
 8000c9a:	e2f2      	b.n	8001282 <runCommands+0x7f6>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x04)	// ADC?
 8000c9c:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8000ca0:	2b04      	cmp	r3, #4
 8000ca2:	d119      	bne.n	8000cd8 <runCommands+0x24c>
	{
		tVal16 = GetADC();
 8000ca4:	f7ff fecc 	bl	8000a40 <GetADC>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	461a      	mov	r2, r3
 8000cac:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000cb0:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8000cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb6:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8000cba:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &tVal16, sizeof(tVal16));
 8000cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8000cc6:	8812      	ldrh	r2, [r2, #0]
 8000cc8:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 3);
 8000cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cce:	2103      	movs	r1, #3
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f009 f937 	bl	8009f44 <CDC_Transmit_FS>
		return;
 8000cd6:	e2d4      	b.n	8001282 <runCommands+0x7f6>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x05)	// Relay?DA?DB?
 8000cd8:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8000cdc:	2b05      	cmp	r3, #5
 8000cde:	d12d      	bne.n	8000d3c <runCommands+0x2b0>
	{
		UserTxBufferFS[0] = cmd;
 8000ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce4:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8000ce8:	701a      	strb	r2, [r3, #0]
		#if TEST_RELAY
		UserTxBufferFS[1] = RelayState;
 8000cea:	4b54      	ldr	r3, [pc, #336]	; (8000e3c <runCommands+0x3b0>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf4:	705a      	strb	r2, [r3, #1]
		#endif /* TEST_RELAY */

		tVal16 = GetDacA();
 8000cf6:	f7ff fd17 	bl	8000728 <GetDacA>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000d02:	801a      	strh	r2, [r3, #0]
		memcpy(UserTxBufferFS + 2, &tVal16, sizeof(tVal16));
 8000d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d08:	3302      	adds	r3, #2
 8000d0a:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8000d0e:	8812      	ldrh	r2, [r2, #0]
 8000d10:	801a      	strh	r2, [r3, #0]

		tVal16 = GetDacB();
 8000d12:	f7ff fd13 	bl	800073c <GetDacB>
 8000d16:	4603      	mov	r3, r0
 8000d18:	461a      	mov	r2, r3
 8000d1a:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000d1e:	801a      	strh	r2, [r3, #0]
		memcpy(UserTxBufferFS + 4, &tVal16, sizeof(tVal16));
 8000d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d24:	3304      	adds	r3, #4
 8000d26:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8000d2a:	8812      	ldrh	r2, [r2, #0]
 8000d2c:	801a      	strh	r2, [r3, #0]

		CDC_Transmit_FS(UserTxBufferFS, 6);
 8000d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d32:	2106      	movs	r1, #6
 8000d34:	4618      	mov	r0, r3
 8000d36:	f009 f905 	bl	8009f44 <CDC_Transmit_FS>
		return;
 8000d3a:	e2a2      	b.n	8001282 <runCommands+0x7f6>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x06)	// Btn?
 8000d3c:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8000d40:	2b06      	cmp	r3, #6
 8000d42:	d120      	bne.n	8000d86 <runCommands+0x2fa>
	{
		UserTxBufferFS[0] = cmd;
 8000d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d48:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8000d4c:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = GetBtnRunState();
 8000d4e:	f7ff fcff 	bl	8000750 <GetBtnRunState>
 8000d52:	4603      	mov	r3, r0
 8000d54:	461a      	mov	r2, r3
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	705a      	strb	r2, [r3, #1]
		UserTxBufferFS[2] = GetBtnUpState();
 8000d5c:	f7ff fd3a 	bl	80007d4 <GetBtnUpState>
 8000d60:	4603      	mov	r3, r0
 8000d62:	461a      	mov	r2, r3
 8000d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d68:	709a      	strb	r2, [r3, #2]
		UserTxBufferFS[3] = GetBtnDownState();
 8000d6a:	f7ff fd75 	bl	8000858 <GetBtnDownState>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	461a      	mov	r2, r3
 8000d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d76:	70da      	strb	r2, [r3, #3]
		CDC_Transmit_FS(UserTxBufferFS, 4);
 8000d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7c:	2104      	movs	r1, #4
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f009 f8e0 	bl	8009f44 <CDC_Transmit_FS>
		return;
 8000d84:	e27d      	b.n	8001282 <runCommands+0x7f6>
		//--------------------------------------------------------------------------
		

	// ID?
	} else if (cmd == 0x07) {
 8000d86:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8000d8a:	2b07      	cmp	r3, #7
 8000d8c:	d133      	bne.n	8000df6 <runCommands+0x36a>
		char str[] = "prb_v0.3";
 8000d8e:	f107 0318 	add.w	r3, r7, #24
 8000d92:	4a2f      	ldr	r2, [pc, #188]	; (8000e50 <runCommands+0x3c4>)
 8000d94:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d96:	c303      	stmia	r3!, {r0, r1}
 8000d98:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8000d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9e:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8000da2:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = strlen(str);
 8000da4:	f107 0318 	add.w	r3, r7, #24
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff f9cf 	bl	800014c <strlen>
 8000dae:	4603      	mov	r3, r0
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db6:	705a      	strb	r2, [r3, #1]
		memcpy(UserTxBufferFS + 2, str, strlen(str));
 8000db8:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000dbc:	3402      	adds	r4, #2
 8000dbe:	f107 0318 	add.w	r3, r7, #24
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff f9c2 	bl	800014c <strlen>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	f107 0318 	add.w	r3, r7, #24
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	f009 fcbf 	bl	800a754 <memcpy>
		CDC_Transmit_FS(UserTxBufferFS, strlen(str) + 2);
 8000dd6:	f107 0318 	add.w	r3, r7, #24
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff f9b6 	bl	800014c <strlen>
 8000de0:	4603      	mov	r3, r0
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	3302      	adds	r3, #2
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dec:	4611      	mov	r1, r2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f009 f8a8 	bl	8009f44 <CDC_Transmit_FS>
 8000df4:	e245      	b.n	8001282 <runCommands+0x7f6>
	На вход щупа подается семетричная пила с частотой 1кГц с оффестом установленным на ип.
	после компарирования сигнала МК измеряет длительность импульса
	т.к. 1 кГц соотвествет длительности в 500 мс то это означает что мы попапали в полуку офсета.*/
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x08)	// Калибровка TIM inHL?
 8000df6:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8000dfa:	2b08      	cmp	r3, #8
 8000dfc:	d12a      	bne.n	8000e54 <runCommands+0x3c8>
	{
		EnableTIM3_PB4();
 8000dfe:	f7ff fd6d 	bl	80008dc <EnableTIM3_PB4>
		uint16_t temp = GetTIM3();
 8000e02:	f7ff fd77 	bl	80008f4 <GetTIM3>
 8000e06:	4603      	mov	r3, r0
 8000e08:	461a      	mov	r2, r3
 8000e0a:	f107 0316 	add.w	r3, r7, #22
 8000e0e:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8000e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e14:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8000e18:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &temp, sizeof(uint16_t));
 8000e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1e:	3301      	adds	r3, #1
 8000e20:	f107 0216 	add.w	r2, r7, #22
 8000e24:	8812      	ldrh	r2, [r2, #0]
 8000e26:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 8000e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2c:	2103      	movs	r1, #3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f009 f888 	bl	8009f44 <CDC_Transmit_FS>
 8000e34:	e225      	b.n	8001282 <runCommands+0x7f6>
 8000e36:	bf00      	nop
 8000e38:	40010800 	.word	0x40010800
 8000e3c:	20000010 	.word	0x20000010
 8000e40:	0800b9e0 	.word	0x0800b9e0
 8000e44:	0800b9f8 	.word	0x0800b9f8
 8000e48:	0800ba10 	.word	0x0800ba10
 8000e4c:	0800ba1c 	.word	0x0800ba1c
 8000e50:	0800ba40 	.word	0x0800ba40
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x09)	// Калибровка TIM inLL?
 8000e54:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8000e58:	2b09      	cmp	r3, #9
 8000e5a:	d11b      	bne.n	8000e94 <runCommands+0x408>
	{
		EnableTIM4_PB6();
 8000e5c:	f7ff fd62 	bl	8000924 <EnableTIM4_PB6>
		uint16_t temp = GetTIM4();
 8000e60:	f7ff fd6c 	bl	800093c <GetTIM4>
 8000e64:	4603      	mov	r3, r0
 8000e66:	461a      	mov	r2, r3
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8000e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e72:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8000e76:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &temp, sizeof(uint16_t));
 8000e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	f107 0214 	add.w	r2, r7, #20
 8000e82:	8812      	ldrh	r2, [r2, #0]
 8000e84:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 8000e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8a:	2103      	movs	r1, #3
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f009 f859 	bl	8009f44 <CDC_Transmit_FS>
 8000e92:	e1f6      	b.n	8001282 <runCommands+0x7f6>
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0A)	// TODO: Прием калибровочной таблицы [0x0A][1-4][offset][count][data] 	answer: [0x0A]+[1-4]+[offset]+[count]+[status] (0x00 - сработал; 0x01 - не сработал)
 8000e94:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8000e98:	2b0a      	cmp	r3, #10
 8000e9a:	f040 81aa 	bne.w	80011f2 <runCommands+0x766>
	{
		//Прием калибровочной таблицы [0x0A][1-4][offset][count][data]
		//FIXME: За одну посылку можно получить максимум 64 byte. Нужно организовать пакетную передачу
		uint16_t tOffset, tCount, tData;
		if (*Len >= 2 && Buf[1] >= 0x00 && Buf[1] <= 0x03)
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	f240 8194 	bls.w	80011d2 <runCommands+0x746>
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	f200 818d 	bhi.w	80011d2 <runCommands+0x746>
		{
			if 		(Buf[1] == 0x00)	//А_m12
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d15f      	bne.n	8000f84 <runCommands+0x4f8>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	3302      	adds	r3, #2
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	f107 0312 	add.w	r3, r7, #18
 8000ed2:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
 8000eea:	e01f      	b.n	8000f2c <runCommands+0x4a0>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8000eec:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	3306      	adds	r3, #6
 8000ef4:	1d3a      	adds	r2, r7, #4
 8000ef6:	6812      	ldr	r2, [r2, #0]
 8000ef8:	4413      	add	r3, r2
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	f107 030e 	add.w	r3, r7, #14
 8000f02:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValA_m12[i + tOffset] = tData;
 8000f04:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8000f08:	f107 0212 	add.w	r2, r7, #18
 8000f0c:	8812      	ldrh	r2, [r2, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	f107 020e 	add.w	r2, r7, #14
 8000f14:	8811      	ldrh	r1, [r2, #0]
 8000f16:	4acd      	ldr	r2, [pc, #820]	; (800124c <runCommands+0x7c0>)
 8000f18:	3304      	adds	r3, #4
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	460a      	mov	r2, r1
 8000f20:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 8000f22:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8000f26:	3301      	adds	r3, #1
 8000f28:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	f8b7 222e 	ldrh.w	r2, [r7, #558]	; 0x22e
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d3d8      	bcc.n	8000eec <runCommands+0x460>
				}

				changeTableFlag = true;
 8000f3a:	4bc5      	ldr	r3, [pc, #788]	; (8001250 <runCommands+0x7c4>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	701a      	strb	r2, [r3, #0]
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 8000f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f44:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8000f48:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8000f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4e:	2201      	movs	r2, #1
 8000f50:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2			->4
 8000f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f56:	3302      	adds	r3, #2
 8000f58:	f107 0212 	add.w	r2, r7, #18
 8000f5c:	8812      	ldrh	r2, [r2, #0]
 8000f5e:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8000f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f64:	3304      	adds	r3, #4
 8000f66:	f107 0210 	add.w	r2, r7, #16
 8000f6a:	8812      	ldrh	r2, [r2, #0]
 8000f6c:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1		->7
 8000f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f72:	2200      	movs	r2, #0
 8000f74:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8000f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f008 ffe1 	bl	8009f44 <CDC_Transmit_FS>
				return;
 8000f82:	e17e      	b.n	8001282 <runCommands+0x7f6>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x01)	//B_m12
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d15c      	bne.n	800104a <runCommands+0x5be>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	3302      	adds	r3, #2
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	f107 0312 	add.w	r3, r7, #18
 8000f9e:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	f107 0310 	add.w	r3, r7, #16
 8000fae:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
 8000fb6:	e01f      	b.n	8000ff8 <runCommands+0x56c>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8000fb8:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	3306      	adds	r3, #6
 8000fc0:	1d3a      	adds	r2, r7, #4
 8000fc2:	6812      	ldr	r2, [r2, #0]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	f107 030e 	add.w	r3, r7, #14
 8000fce:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValB_m12[i + tOffset] = tData;
 8000fd0:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8000fd4:	f107 0212 	add.w	r2, r7, #18
 8000fd8:	8812      	ldrh	r2, [r2, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	f107 020e 	add.w	r2, r7, #14
 8000fe0:	8811      	ldrh	r1, [r2, #0]
 8000fe2:	4a9a      	ldr	r2, [pc, #616]	; (800124c <runCommands+0x7c0>)
 8000fe4:	3318      	adds	r3, #24
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	4413      	add	r3, r2
 8000fea:	460a      	mov	r2, r1
 8000fec:	805a      	strh	r2, [r3, #2]
				for (uint16_t i = 0; i < tCount; i++)
 8000fee:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
 8000ff8:	f107 0310 	add.w	r3, r7, #16
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	f8b7 222c 	ldrh.w	r2, [r7, #556]	; 0x22c
 8001002:	429a      	cmp	r2, r3
 8001004:	d3d8      	bcc.n	8000fb8 <runCommands+0x52c>
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 8001006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100a:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800100e:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8001010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001014:	2201      	movs	r2, #1
 8001016:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 8001018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101c:	3302      	adds	r3, #2
 800101e:	f107 0212 	add.w	r2, r7, #18
 8001022:	8812      	ldrh	r2, [r2, #0]
 8001024:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8001026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102a:	3304      	adds	r3, #4
 800102c:	f107 0210 	add.w	r2, r7, #16
 8001030:	8812      	ldrh	r2, [r2, #0]
 8001032:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 8001034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001038:	2200      	movs	r2, #0
 800103a:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 800103c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001040:	2101      	movs	r1, #1
 8001042:	4618      	mov	r0, r3
 8001044:	f008 ff7e 	bl	8009f44 <CDC_Transmit_FS>
				return;
 8001048:	e11b      	b.n	8001282 <runCommands+0x7f6>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x02)	//A_m27
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b02      	cmp	r3, #2
 8001054:	d15a      	bne.n	800110c <runCommands+0x680>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	3302      	adds	r3, #2
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	b29a      	uxth	r2, r3
 8001060:	f107 0312 	add.w	r3, r7, #18
 8001064:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	3304      	adds	r3, #4
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	b29a      	uxth	r2, r3
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8001076:	2300      	movs	r3, #0
 8001078:	f8a7 322a 	strh.w	r3, [r7, #554]	; 0x22a
 800107c:	e01d      	b.n	80010ba <runCommands+0x62e>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 800107e:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	3306      	adds	r3, #6
 8001086:	1d3a      	adds	r2, r7, #4
 8001088:	6812      	ldr	r2, [r2, #0]
 800108a:	4413      	add	r3, r2
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	b29a      	uxth	r2, r3
 8001090:	f107 030e 	add.w	r3, r7, #14
 8001094:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValA_m27[i + tOffset] = tData;
 8001096:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 800109a:	f107 0212 	add.w	r2, r7, #18
 800109e:	8812      	ldrh	r2, [r2, #0]
 80010a0:	4413      	add	r3, r2
 80010a2:	f107 020e 	add.w	r2, r7, #14
 80010a6:	8811      	ldrh	r1, [r2, #0]
 80010a8:	4a68      	ldr	r2, [pc, #416]	; (800124c <runCommands+0x7c0>)
 80010aa:	332c      	adds	r3, #44	; 0x2c
 80010ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for (uint16_t i = 0; i < tCount; i++)
 80010b0:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 80010b4:	3301      	adds	r3, #1
 80010b6:	f8a7 322a 	strh.w	r3, [r7, #554]	; 0x22a
 80010ba:	f107 0310 	add.w	r3, r7, #16
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	f8b7 222a 	ldrh.w	r2, [r7, #554]	; 0x22a
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d3da      	bcc.n	800107e <runCommands+0x5f2>
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 80010c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010cc:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80010d0:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 80010d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d6:	2201      	movs	r2, #1
 80010d8:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 80010da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010de:	3302      	adds	r3, #2
 80010e0:	f107 0212 	add.w	r2, r7, #18
 80010e4:	8812      	ldrh	r2, [r2, #0]
 80010e6:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 80010e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ec:	3304      	adds	r3, #4
 80010ee:	f107 0210 	add.w	r2, r7, #16
 80010f2:	8812      	ldrh	r2, [r2, #0]
 80010f4:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 80010f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fa:	2200      	movs	r2, #0
 80010fc:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 80010fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001102:	2101      	movs	r1, #1
 8001104:	4618      	mov	r0, r3
 8001106:	f008 ff1d 	bl	8009f44 <CDC_Transmit_FS>
				return;
 800110a:	e0ba      	b.n	8001282 <runCommands+0x7f6>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x03)	//B_m27
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	3301      	adds	r3, #1
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b03      	cmp	r3, #3
 8001116:	d15c      	bne.n	80011d2 <runCommands+0x746>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	3302      	adds	r3, #2
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	b29a      	uxth	r2, r3
 8001122:	f107 0312 	add.w	r3, r7, #18
 8001126:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	3304      	adds	r3, #4
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	b29a      	uxth	r2, r3
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8001138:	2300      	movs	r3, #0
 800113a:	f8a7 3228 	strh.w	r3, [r7, #552]	; 0x228
 800113e:	e01f      	b.n	8001180 <runCommands+0x6f4>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8001140:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	3306      	adds	r3, #6
 8001148:	1d3a      	adds	r2, r7, #4
 800114a:	6812      	ldr	r2, [r2, #0]
 800114c:	4413      	add	r3, r2
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	b29a      	uxth	r2, r3
 8001152:	f107 030e 	add.w	r3, r7, #14
 8001156:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValB_m27[i + tOffset] = tData;
 8001158:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 800115c:	f107 0212 	add.w	r2, r7, #18
 8001160:	8812      	ldrh	r2, [r2, #0]
 8001162:	4413      	add	r3, r2
 8001164:	f107 020e 	add.w	r2, r7, #14
 8001168:	8811      	ldrh	r1, [r2, #0]
 800116a:	4a38      	ldr	r2, [pc, #224]	; (800124c <runCommands+0x7c0>)
 800116c:	332c      	adds	r3, #44	; 0x2c
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4413      	add	r3, r2
 8001172:	460a      	mov	r2, r1
 8001174:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 8001176:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 800117a:	3301      	adds	r3, #1
 800117c:	f8a7 3228 	strh.w	r3, [r7, #552]	; 0x228
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 800118a:	429a      	cmp	r2, r3
 800118c:	d3d8      	bcc.n	8001140 <runCommands+0x6b4>
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 800118e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001192:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001196:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8001198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119c:	2201      	movs	r2, #1
 800119e:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 80011a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a4:	3302      	adds	r3, #2
 80011a6:	f107 0212 	add.w	r2, r7, #18
 80011aa:	8812      	ldrh	r2, [r2, #0]
 80011ac:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 80011ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b2:	3304      	adds	r3, #4
 80011b4:	f107 0210 	add.w	r2, r7, #16
 80011b8:	8812      	ldrh	r2, [r2, #0]
 80011ba:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 80011bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c0:	2200      	movs	r2, #0
 80011c2:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 80011c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c8:	2101      	movs	r1, #1
 80011ca:	4618      	mov	r0, r3
 80011cc:	f008 feba 	bl	8009f44 <CDC_Transmit_FS>
				return;
 80011d0:	e057      	b.n	8001282 <runCommands+0x7f6>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
		}
		UserTxBufferFS[0] = cmd;
 80011d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d6:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80011da:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 80011dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e0:	2201      	movs	r2, #1
 80011e2:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 80011e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e8:	2102      	movs	r1, #2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f008 feaa 	bl	8009f44 <CDC_Transmit_FS>
		return;
 80011f0:	e047      	b.n	8001282 <runCommands+0x7f6>
		//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0B)	// TODO: Отправка CRC 1-4 таблицы [0x0B][1-4][CRC(1-4)]	answer:
 80011f2:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80011f6:	2b0b      	cmp	r3, #11
 80011f8:	d040      	beq.n	800127c <runCommands+0x7f0>
	{
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0C)	// TODO: Прием длины калибровочной таблицы [0x0C][Длина][???]
 80011fa:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80011fe:	2b0c      	cmp	r3, #12
 8001200:	d03e      	beq.n	8001280 <runCommands+0x7f4>
	{
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0D)	// TODO: Запись во флеш калибровочной таблицы [0x0D] data: 1B (0x00 - успешно; 0x01 - ошибка при записи)	answer: 0x0D + 1B status
 8001202:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001206:	2b0d      	cmp	r3, #13
 8001208:	d13b      	bne.n	8001282 <runCommands+0x7f6>
	{
		if (*Len >= 2 && (Buf[1] == 0x02))
 800120a:	463b      	mov	r3, r7
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d921      	bls.n	8001258 <runCommands+0x7cc>
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	3301      	adds	r3, #1
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d11b      	bne.n	8001258 <runCommands+0x7cc>
		{
			//TODO: Функция записи фо флеш. FIXME: не работает запись фо флеш!
			 changeTableFlag = true;
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <runCommands+0x7c4>)
 8001222:	2201      	movs	r2, #1
 8001224:	701a      	strb	r2, [r3, #0]
			// writeTableInFlash();
			printf("changeTableFlag = true!");
 8001226:	480b      	ldr	r0, [pc, #44]	; (8001254 <runCommands+0x7c8>)
 8001228:	f009 faaa 	bl	800a780 <iprintf>
			UserTxBufferFS[0] = cmd;
 800122c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001230:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001234:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 8001236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123a:	2200      	movs	r2, #0
 800123c:	705a      	strb	r2, [r3, #1]
			CDC_Transmit_FS(UserTxBufferFS, 2);
 800123e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001242:	2102      	movs	r1, #2
 8001244:	4618      	mov	r0, r3
 8001246:	f008 fe7d 	bl	8009f44 <CDC_Transmit_FS>
			return;
 800124a:	e01a      	b.n	8001282 <runCommands+0x7f6>
 800124c:	200004f4 	.word	0x200004f4
 8001250:	20000254 	.word	0x20000254
 8001254:	0800ba28 	.word	0x0800ba28
		}
 		
		//--------------------------------------------------------------------------
		UserTxBufferFS[0] = cmd;
 8001258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125c:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001260:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8001262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001266:	2201      	movs	r2, #1
 8001268:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 800126a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126e:	2102      	movs	r1, #2
 8001270:	4618      	mov	r0, r3
 8001272:	f008 fe67 	bl	8009f44 <CDC_Transmit_FS>
		return;
 8001276:	e004      	b.n	8001282 <runCommands+0x7f6>
		return;
 8001278:	bf00      	nop
 800127a:	e002      	b.n	8001282 <runCommands+0x7f6>
		return;
 800127c:	bf00      	nop
 800127e:	e000      	b.n	8001282 <runCommands+0x7f6>
		return;
 8001280:	bf00      	nop
		//--------------------------------------------------------------------------
	}
//-------------------------------------------------------------------------
	
}
 8001282:	f507 770d 	add.w	r7, r7, #564	; 0x234
 8001286:	46bd      	mov	sp, r7
 8001288:	bd90      	pop	{r4, r7, pc}
 800128a:	bf00      	nop

0800128c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001292:	f000 fe9b 	bl	8001fcc <HAL_Init>

  /* USER CODE BEGIN Init */
//--------------------------------------------------------------------------
#if DWT_INIT
	DWT_Init();
 8001296:	f7ff f9d7 	bl	8000648 <DWT_Init>
	//--------------------------------------------------------------------------

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800129a:	f000 f975 	bl	8001588 <SystemClock_Config>
//-------------------------------------------------------------------------

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800129e:	f000 fb1f 	bl	80018e0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80012a2:	f000 fa21 	bl	80016e8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80012a6:	f008 fd8b 	bl	8009dc0 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80012aa:	f000 f9cb 	bl	8001644 <MX_ADC1_Init>
  MX_TIM3_Init();
 80012ae:	f000 fa53 	bl	8001758 <MX_TIM3_Init>
  MX_TIM4_Init();
 80012b2:	f000 fab3 	bl	800181c <MX_TIM4_Init>
  MX_CRC_Init();
 80012b6:	f000 fa03 	bl	80016c0 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
	//**************************************************************************
#if TEST_UID
	sprintf(buffer, "UID %x-%x-%lx-%lx\n", *idBase0, *idBase1, *idBase2, *idBase3);
 80012ba:	4b99      	ldr	r3, [pc, #612]	; (8001520 <main+0x294>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	4b98      	ldr	r3, [pc, #608]	; (8001524 <main+0x298>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	4b97      	ldr	r3, [pc, #604]	; (8001528 <main+0x29c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a96      	ldr	r2, [pc, #600]	; (800152c <main+0x2a0>)
 80012d2:	6812      	ldr	r2, [r2, #0]
 80012d4:	6812      	ldr	r2, [r2, #0]
 80012d6:	9201      	str	r2, [sp, #4]
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	4603      	mov	r3, r0
 80012dc:	460a      	mov	r2, r1
 80012de:	4994      	ldr	r1, [pc, #592]	; (8001530 <main+0x2a4>)
 80012e0:	4894      	ldr	r0, [pc, #592]	; (8001534 <main+0x2a8>)
 80012e2:	f009 fa65 	bl	800a7b0 <siprintf>
	printf(buffer);
 80012e6:	4893      	ldr	r0, [pc, #588]	; (8001534 <main+0x2a8>)
 80012e8:	f009 fa4a 	bl	800a780 <iprintf>
#endif /* TEST_UID */

	//**************************************************************************
#if TEST_TIM_CAPTURE
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80012ec:	2100      	movs	r1, #0
 80012ee:	4892      	ldr	r0, [pc, #584]	; (8001538 <main+0x2ac>)
 80012f0:	f004 fc34 	bl	8005b5c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80012f4:	2104      	movs	r1, #4
 80012f6:	4890      	ldr	r0, [pc, #576]	; (8001538 <main+0x2ac>)
 80012f8:	f004 fc30 	bl	8005b5c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80012fc:	2100      	movs	r1, #0
 80012fe:	488f      	ldr	r0, [pc, #572]	; (800153c <main+0x2b0>)
 8001300:	f004 fc2c 	bl	8005b5c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8001304:	2104      	movs	r1, #4
 8001306:	488d      	ldr	r0, [pc, #564]	; (800153c <main+0x2b0>)
 8001308:	f004 fc28 	bl	8005b5c <HAL_TIM_IC_Start_IT>
#endif /* TEST_TIM_CAPTURE */
//--------------------------------------------------------------------------
#if TEST_DAC
	SetAllDAC();
 800130c:	f7ff f9fa 	bl	8000704 <SetAllDAC>
#endif /* TEST_DAC */
	   //**************************************************************************
#if TEST_ADC
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001310:	488b      	ldr	r0, [pc, #556]	; (8001540 <main+0x2b4>)
 8001312:	f001 faa7 	bl	8002864 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_IT(&hadc1);
 8001316:	488a      	ldr	r0, [pc, #552]	; (8001540 <main+0x2b4>)
 8001318:	f000 ff92 	bl	8002240 <HAL_ADC_Start_IT>
#endif /* TEST_ADC */
//**************************************************************************
#if TEST_FLASH_TABLE

//	flash_fill_calibTable();
	crete_calibration_table(&DevNVRAM.calibration_table);
 800131c:	4889      	ldr	r0, [pc, #548]	; (8001544 <main+0x2b8>)
 800131e:	f7ff f8ad 	bl	800047c <crete_calibration_table>
	flash_write_calibTable();
 8001322:	f7ff f813 	bl	800034c <flash_write_calibTable>
    // TODO: Надо по запросе какая версия калиброчной табцы высылать значения дефолтной таблице...
    //--------------------------------------------------------------------------
*/
#endif /* TEST_FLASH_TABLE */

	uint32_t _timer = 0; // для таймера в 10 сек
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// Циклически проверяем соотвествует ли информация в памяти массиву настроек?
		if ((HAL_GetTick() - _timer) > 10000) // интервал  10сек
 800132a:	f000 fea7 	bl	800207c <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	f242 7210 	movw	r2, #10000	; 0x2710
 8001338:	4293      	cmp	r3, r2
 800133a:	d902      	bls.n	8001342 <main+0xb6>
				HAL_Delay(100);
				//--------------------------------------------------------------------------
				printf("flash done");
			}*/
#endif /* TEST_FLASH_TABLE */
			_timer = HAL_GetTick();
 800133c:	f000 fe9e 	bl	800207c <HAL_GetTick>
 8001340:	60f8      	str	r0, [r7, #12]
		}

//**************************************************************************
#if TEST_READ_BTN //TODO: данная реализация плохо отрабатывает! TODO: Нужно переделать на EXTI+TIM

		uint32_t ms = HAL_GetTick();
 8001342:	f000 fe9b 	bl	800207c <HAL_GetTick>
 8001346:	60b8      	str	r0, [r7, #8]
		uint8_t key1_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12); // подставить свой пин //TODO: Проверить работу BACK key!
 8001348:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800134c:	487e      	ldr	r0, [pc, #504]	; (8001548 <main+0x2bc>)
 800134e:	f002 f80f 	bl	8003370 <HAL_GPIO_ReadPin>
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]

		if (key1_state == 0 && !short_state1 && (ms - time_key1) > 50)
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d113      	bne.n	8001384 <main+0xf8>
 800135c:	4b7b      	ldr	r3, [pc, #492]	; (800154c <main+0x2c0>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d10f      	bne.n	8001384 <main+0xf8>
 8001364:	4b7a      	ldr	r3, [pc, #488]	; (8001550 <main+0x2c4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b32      	cmp	r3, #50	; 0x32
 800136e:	d909      	bls.n	8001384 <main+0xf8>
		{
			short_state1 = 1;
 8001370:	4b76      	ldr	r3, [pc, #472]	; (800154c <main+0x2c0>)
 8001372:	2201      	movs	r2, #1
 8001374:	701a      	strb	r2, [r3, #0]
			long_state1 = 0;
 8001376:	4b77      	ldr	r3, [pc, #476]	; (8001554 <main+0x2c8>)
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 800137c:	4a74      	ldr	r2, [pc, #464]	; (8001550 <main+0x2c4>)
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	e02e      	b.n	80013e2 <main+0x156>
		}
		else if (key1_state == 0 && !long_state1 && (ms - time_key1) > KEY_LONG_DELAY)
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d111      	bne.n	80013ae <main+0x122>
 800138a:	4b72      	ldr	r3, [pc, #456]	; (8001554 <main+0x2c8>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d10d      	bne.n	80013ae <main+0x122>
 8001392:	4b6f      	ldr	r3, [pc, #444]	; (8001550 <main+0x2c4>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800139e:	d906      	bls.n	80013ae <main+0x122>
		{
			long_state1 = 1;
 80013a0:	4b6c      	ldr	r3, [pc, #432]	; (8001554 <main+0x2c8>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn1_long_rd = 1;
 80013a6:	4b6c      	ldr	r3, [pc, #432]	; (8001558 <main+0x2cc>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
 80013ac:	e019      	b.n	80013e2 <main+0x156>
		}
		else if (key1_state == 1 && short_state1 && (ms - time_key1) > 50)
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d116      	bne.n	80013e2 <main+0x156>
 80013b4:	4b65      	ldr	r3, [pc, #404]	; (800154c <main+0x2c0>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d012      	beq.n	80013e2 <main+0x156>
 80013bc:	4b64      	ldr	r3, [pc, #400]	; (8001550 <main+0x2c4>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b32      	cmp	r3, #50	; 0x32
 80013c6:	d90c      	bls.n	80013e2 <main+0x156>
		{
			short_state1 = 0;
 80013c8:	4b60      	ldr	r3, [pc, #384]	; (800154c <main+0x2c0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 80013ce:	4a60      	ldr	r2, [pc, #384]	; (8001550 <main+0x2c4>)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	6013      	str	r3, [r2, #0]

			if (!long_state1)
 80013d4:	4b5f      	ldr	r3, [pc, #380]	; (8001554 <main+0x2c8>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d102      	bne.n	80013e2 <main+0x156>
			{
				// действие на короткое нажатие
				btn1_short_rd = 1;
 80013dc:	4b5f      	ldr	r3, [pc, #380]	; (800155c <main+0x2d0>)
 80013de:	2201      	movs	r2, #1
 80013e0:	701a      	strb	r2, [r3, #0]
			}
		}
		uint8_t key2_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); // подставить свой пин
 80013e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013e6:	4858      	ldr	r0, [pc, #352]	; (8001548 <main+0x2bc>)
 80013e8:	f001 ffc2 	bl	8003370 <HAL_GPIO_ReadPin>
 80013ec:	4603      	mov	r3, r0
 80013ee:	71bb      	strb	r3, [r7, #6]

		if (key2_state == 0 && !short_state2 && (ms - time_key2) > 50)
 80013f0:	79bb      	ldrb	r3, [r7, #6]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d113      	bne.n	800141e <main+0x192>
 80013f6:	4b5a      	ldr	r3, [pc, #360]	; (8001560 <main+0x2d4>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d10f      	bne.n	800141e <main+0x192>
 80013fe:	4b59      	ldr	r3, [pc, #356]	; (8001564 <main+0x2d8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b32      	cmp	r3, #50	; 0x32
 8001408:	d909      	bls.n	800141e <main+0x192>
		{
			short_state2 = 1;
 800140a:	4b55      	ldr	r3, [pc, #340]	; (8001560 <main+0x2d4>)
 800140c:	2201      	movs	r2, #1
 800140e:	701a      	strb	r2, [r3, #0]
			long_state2 = 0;
 8001410:	4b55      	ldr	r3, [pc, #340]	; (8001568 <main+0x2dc>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 8001416:	4a53      	ldr	r2, [pc, #332]	; (8001564 <main+0x2d8>)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	e02e      	b.n	800147c <main+0x1f0>
		}
		else if (key2_state == 0 && !long_state2 && (ms - time_key2) > KEY_LONG_DELAY)
 800141e:	79bb      	ldrb	r3, [r7, #6]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d111      	bne.n	8001448 <main+0x1bc>
 8001424:	4b50      	ldr	r3, [pc, #320]	; (8001568 <main+0x2dc>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d10d      	bne.n	8001448 <main+0x1bc>
 800142c:	4b4d      	ldr	r3, [pc, #308]	; (8001564 <main+0x2d8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68ba      	ldr	r2, [r7, #8]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001438:	d906      	bls.n	8001448 <main+0x1bc>
		{
			long_state2 = 1;
 800143a:	4b4b      	ldr	r3, [pc, #300]	; (8001568 <main+0x2dc>)
 800143c:	2201      	movs	r2, #1
 800143e:	701a      	strb	r2, [r3, #0]

			// действие на длинное нажатие
			btn2_long_rd = 1;
 8001440:	4b4a      	ldr	r3, [pc, #296]	; (800156c <main+0x2e0>)
 8001442:	2201      	movs	r2, #1
 8001444:	701a      	strb	r2, [r3, #0]
 8001446:	e019      	b.n	800147c <main+0x1f0>
		}
		else if (key2_state == 1 && short_state2 && (ms - time_key2) > 50)
 8001448:	79bb      	ldrb	r3, [r7, #6]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d116      	bne.n	800147c <main+0x1f0>
 800144e:	4b44      	ldr	r3, [pc, #272]	; (8001560 <main+0x2d4>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d012      	beq.n	800147c <main+0x1f0>
 8001456:	4b43      	ldr	r3, [pc, #268]	; (8001564 <main+0x2d8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b32      	cmp	r3, #50	; 0x32
 8001460:	d90c      	bls.n	800147c <main+0x1f0>
		{
			short_state2 = 0;
 8001462:	4b3f      	ldr	r3, [pc, #252]	; (8001560 <main+0x2d4>)
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 8001468:	4a3e      	ldr	r2, [pc, #248]	; (8001564 <main+0x2d8>)
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	6013      	str	r3, [r2, #0]

			if (!long_state2)
 800146e:	4b3e      	ldr	r3, [pc, #248]	; (8001568 <main+0x2dc>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d102      	bne.n	800147c <main+0x1f0>
			{
				// действие на короткое нажатие
				btn2_short_rd = 1;
 8001476:	4b3e      	ldr	r3, [pc, #248]	; (8001570 <main+0x2e4>)
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]
			}
		}

		uint8_t key3_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // подставить свой пин
 800147c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001480:	4831      	ldr	r0, [pc, #196]	; (8001548 <main+0x2bc>)
 8001482:	f001 ff75 	bl	8003370 <HAL_GPIO_ReadPin>
 8001486:	4603      	mov	r3, r0
 8001488:	717b      	strb	r3, [r7, #5]
		if (key3_state == 0 && !short_state3 && (ms - time_key3) > 50)
 800148a:	797b      	ldrb	r3, [r7, #5]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d113      	bne.n	80014b8 <main+0x22c>
 8001490:	4b38      	ldr	r3, [pc, #224]	; (8001574 <main+0x2e8>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d10f      	bne.n	80014b8 <main+0x22c>
 8001498:	4b37      	ldr	r3, [pc, #220]	; (8001578 <main+0x2ec>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b32      	cmp	r3, #50	; 0x32
 80014a2:	d909      	bls.n	80014b8 <main+0x22c>
		{
			short_state3 = 1;
 80014a4:	4b33      	ldr	r3, [pc, #204]	; (8001574 <main+0x2e8>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	701a      	strb	r2, [r3, #0]
			long_state3 = 0;
 80014aa:	4b34      	ldr	r3, [pc, #208]	; (800157c <main+0x2f0>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 80014b0:	4a31      	ldr	r2, [pc, #196]	; (8001578 <main+0x2ec>)
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	e032      	b.n	800151e <main+0x292>
		}
		else if (key3_state == 0 && !long_state3 && (ms - time_key3) > KEY_LONG_DELAY)
 80014b8:	797b      	ldrb	r3, [r7, #5]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d111      	bne.n	80014e2 <main+0x256>
 80014be:	4b2f      	ldr	r3, [pc, #188]	; (800157c <main+0x2f0>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10d      	bne.n	80014e2 <main+0x256>
 80014c6:	4b2c      	ldr	r3, [pc, #176]	; (8001578 <main+0x2ec>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014d2:	d906      	bls.n	80014e2 <main+0x256>
		{
			long_state3 = 1;
 80014d4:	4b29      	ldr	r3, [pc, #164]	; (800157c <main+0x2f0>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn3_long_rd = 1;
 80014da:	4b29      	ldr	r3, [pc, #164]	; (8001580 <main+0x2f4>)
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
 80014e0:	e01d      	b.n	800151e <main+0x292>
		}
		else if (key3_state == 1 && short_state3 && (ms - time_key3) > 50)
 80014e2:	797b      	ldrb	r3, [r7, #5]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	f47f af20 	bne.w	800132a <main+0x9e>
 80014ea:	4b22      	ldr	r3, [pc, #136]	; (8001574 <main+0x2e8>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f43f af1b 	beq.w	800132a <main+0x9e>
 80014f4:	4b20      	ldr	r3, [pc, #128]	; (8001578 <main+0x2ec>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	68ba      	ldr	r2, [r7, #8]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b32      	cmp	r3, #50	; 0x32
 80014fe:	f67f af14 	bls.w	800132a <main+0x9e>
		{
			short_state3 = 0;
 8001502:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <main+0x2e8>)
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 8001508:	4a1b      	ldr	r2, [pc, #108]	; (8001578 <main+0x2ec>)
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	6013      	str	r3, [r2, #0]

			if (!long_state3)
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <main+0x2f0>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	f47f af09 	bne.w	800132a <main+0x9e>
			{
				// действие на короткое нажатие
				btn3_short_rd = 1;
 8001518:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <main+0x2f8>)
 800151a:	2201      	movs	r2, #1
 800151c:	701a      	strb	r2, [r3, #0]
	{
 800151e:	e704      	b.n	800132a <main+0x9e>
 8001520:	20000000 	.word	0x20000000
 8001524:	20000004 	.word	0x20000004
 8001528:	20000008 	.word	0x20000008
 800152c:	2000000c 	.word	0x2000000c
 8001530:	0800ba4c 	.word	0x0800ba4c
 8001534:	20000214 	.word	0x20000214
 8001538:	200008fc 	.word	0x200008fc
 800153c:	200004ac 	.word	0x200004ac
 8001540:	20000944 	.word	0x20000944
 8001544:	200004f4 	.word	0x200004f4
 8001548:	40010c00 	.word	0x40010c00
 800154c:	2000025a 	.word	0x2000025a
 8001550:	2000025c 	.word	0x2000025c
 8001554:	2000025b 	.word	0x2000025b
 8001558:	20000260 	.word	0x20000260
 800155c:	20000261 	.word	0x20000261
 8001560:	20000262 	.word	0x20000262
 8001564:	20000264 	.word	0x20000264
 8001568:	20000263 	.word	0x20000263
 800156c:	20000268 	.word	0x20000268
 8001570:	20000269 	.word	0x20000269
 8001574:	2000026a 	.word	0x2000026a
 8001578:	2000026c 	.word	0x2000026c
 800157c:	2000026b 	.word	0x2000026b
 8001580:	20000270 	.word	0x20000270
 8001584:	20000271 	.word	0x20000271

08001588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b094      	sub	sp, #80	; 0x50
 800158c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001592:	2228      	movs	r2, #40	; 0x28
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f009 f8ea 	bl	800a770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015b8:	2301      	movs	r3, #1
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015c2:	2300      	movs	r3, #0
 80015c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015c6:	2301      	movs	r3, #1
 80015c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ca:	2302      	movs	r3, #2
 80015cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015d4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015de:	4618      	mov	r0, r3
 80015e0:	f003 fa86 	bl	8004af0 <HAL_RCC_OscConfig>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80015ea:	f000 fa51 	bl	8001a90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ee:	230f      	movs	r3, #15
 80015f0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f2:	2302      	movs	r3, #2
 80015f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001600:	2300      	movs	r3, #0
 8001602:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	2102      	movs	r1, #2
 800160a:	4618      	mov	r0, r3
 800160c:	f003 fcf0 	bl	8004ff0 <HAL_RCC_ClockConfig>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001616:	f000 fa3b 	bl	8001a90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800161a:	2312      	movs	r3, #18
 800161c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800161e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001622:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001624:	2300      	movs	r3, #0
 8001626:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	4618      	mov	r0, r3
 800162c:	f003 fe66 	bl	80052fc <HAL_RCCEx_PeriphCLKConfig>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001636:	f000 fa2b 	bl	8001a90 <Error_Handler>
  }
}
 800163a:	bf00      	nop
 800163c:	3750      	adds	r7, #80	; 0x50
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001654:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <MX_ADC1_Init+0x74>)
 8001656:	4a19      	ldr	r2, [pc, #100]	; (80016bc <MX_ADC1_Init+0x78>)
 8001658:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <MX_ADC1_Init+0x74>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001660:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <MX_ADC1_Init+0x74>)
 8001662:	2201      	movs	r2, #1
 8001664:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001666:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <MX_ADC1_Init+0x74>)
 8001668:	2200      	movs	r2, #0
 800166a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <MX_ADC1_Init+0x74>)
 800166e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001672:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001674:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <MX_ADC1_Init+0x74>)
 8001676:	2200      	movs	r2, #0
 8001678:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800167a:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <MX_ADC1_Init+0x74>)
 800167c:	2201      	movs	r2, #1
 800167e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001680:	480d      	ldr	r0, [pc, #52]	; (80016b8 <MX_ADC1_Init+0x74>)
 8001682:	f000 fd05 	bl	8002090 <HAL_ADC_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800168c:	f000 fa00 	bl	8001a90 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001690:	2303      	movs	r3, #3
 8001692:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001694:	2301      	movs	r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001698:	2302      	movs	r3, #2
 800169a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_ADC1_Init+0x74>)
 80016a2:	f000 ff5b 	bl	800255c <HAL_ADC_ConfigChannel>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80016ac:	f000 f9f0 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000944 	.word	0x20000944
 80016bc:	40012400 	.word	0x40012400

080016c0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <MX_CRC_Init+0x20>)
 80016c6:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <MX_CRC_Init+0x24>)
 80016c8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80016ca:	4805      	ldr	r0, [pc, #20]	; (80016e0 <MX_CRC_Init+0x20>)
 80016cc:	f001 fa7d 	bl	8002bca <HAL_CRC_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80016d6:	f000 f9db 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200008f4 	.word	0x200008f4
 80016e4:	40023000 	.word	0x40023000

080016e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016ec:	4b18      	ldr	r3, [pc, #96]	; (8001750 <MX_SPI1_Init+0x68>)
 80016ee:	4a19      	ldr	r2, [pc, #100]	; (8001754 <MX_SPI1_Init+0x6c>)
 80016f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <MX_SPI1_Init+0x68>)
 80016f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <MX_SPI1_Init+0x68>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001700:	4b13      	ldr	r3, [pc, #76]	; (8001750 <MX_SPI1_Init+0x68>)
 8001702:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001706:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_SPI1_Init+0x68>)
 800170a:	2200      	movs	r2, #0
 800170c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <MX_SPI1_Init+0x68>)
 8001710:	2200      	movs	r2, #0
 8001712:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001714:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <MX_SPI1_Init+0x68>)
 8001716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800171a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <MX_SPI1_Init+0x68>)
 800171e:	2208      	movs	r2, #8
 8001720:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <MX_SPI1_Init+0x68>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <MX_SPI1_Init+0x68>)
 800172a:	2200      	movs	r2, #0
 800172c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <MX_SPI1_Init+0x68>)
 8001730:	2200      	movs	r2, #0
 8001732:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <MX_SPI1_Init+0x68>)
 8001736:	220a      	movs	r2, #10
 8001738:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800173a:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_SPI1_Init+0x68>)
 800173c:	f003 ff58 	bl	80055f0 <HAL_SPI_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001746:	f000 f9a3 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000974 	.word	0x20000974
 8001754:	40013000 	.word	0x40013000

08001758 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175e:	f107 0310 	add.w	r3, r7, #16
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001768:	463b      	mov	r3, r7
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001774:	4b27      	ldr	r3, [pc, #156]	; (8001814 <MX_TIM3_Init+0xbc>)
 8001776:	4a28      	ldr	r2, [pc, #160]	; (8001818 <MX_TIM3_Init+0xc0>)
 8001778:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800177a:	4b26      	ldr	r3, [pc, #152]	; (8001814 <MX_TIM3_Init+0xbc>)
 800177c:	2247      	movs	r2, #71	; 0x47
 800177e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001780:	4b24      	ldr	r3, [pc, #144]	; (8001814 <MX_TIM3_Init+0xbc>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000-1;
 8001786:	4b23      	ldr	r3, [pc, #140]	; (8001814 <MX_TIM3_Init+0xbc>)
 8001788:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 800178c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178e:	4b21      	ldr	r3, [pc, #132]	; (8001814 <MX_TIM3_Init+0xbc>)
 8001790:	2200      	movs	r2, #0
 8001792:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001794:	4b1f      	ldr	r3, [pc, #124]	; (8001814 <MX_TIM3_Init+0xbc>)
 8001796:	2200      	movs	r2, #0
 8001798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800179a:	481e      	ldr	r0, [pc, #120]	; (8001814 <MX_TIM3_Init+0xbc>)
 800179c:	f004 f98e 	bl	8005abc <HAL_TIM_IC_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80017a6:	f000 f973 	bl	8001a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017b2:	f107 0310 	add.w	r3, r7, #16
 80017b6:	4619      	mov	r1, r3
 80017b8:	4816      	ldr	r0, [pc, #88]	; (8001814 <MX_TIM3_Init+0xbc>)
 80017ba:	f004 fe6d 	bl	8006498 <HAL_TIMEx_MasterConfigSynchronization>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80017c4:	f000 f964 	bl	8001a90 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017c8:	2300      	movs	r3, #0
 80017ca:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017cc:	2301      	movs	r3, #1
 80017ce:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017d8:	463b      	mov	r3, r7
 80017da:	2200      	movs	r2, #0
 80017dc:	4619      	mov	r1, r3
 80017de:	480d      	ldr	r0, [pc, #52]	; (8001814 <MX_TIM3_Init+0xbc>)
 80017e0:	f004 fbca 	bl	8005f78 <HAL_TIM_IC_ConfigChannel>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80017ea:	f000 f951 	bl	8001a90 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80017ee:	2302      	movs	r3, #2
 80017f0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80017f2:	2302      	movs	r3, #2
 80017f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80017f6:	463b      	mov	r3, r7
 80017f8:	2204      	movs	r2, #4
 80017fa:	4619      	mov	r1, r3
 80017fc:	4805      	ldr	r0, [pc, #20]	; (8001814 <MX_TIM3_Init+0xbc>)
 80017fe:	f004 fbbb 	bl	8005f78 <HAL_TIM_IC_ConfigChannel>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001808:	f000 f942 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800180c:	bf00      	nop
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200008fc 	.word	0x200008fc
 8001818:	40000400 	.word	0x40000400

0800181c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001822:	f107 0310 	add.w	r3, r7, #16
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800182c:	463b      	mov	r3, r7
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001838:	4b27      	ldr	r3, [pc, #156]	; (80018d8 <MX_TIM4_Init+0xbc>)
 800183a:	4a28      	ldr	r2, [pc, #160]	; (80018dc <MX_TIM4_Init+0xc0>)
 800183c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 800183e:	4b26      	ldr	r3, [pc, #152]	; (80018d8 <MX_TIM4_Init+0xbc>)
 8001840:	2247      	movs	r2, #71	; 0x47
 8001842:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001844:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <MX_TIM4_Init+0xbc>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000-1;
 800184a:	4b23      	ldr	r3, [pc, #140]	; (80018d8 <MX_TIM4_Init+0xbc>)
 800184c:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001850:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001852:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <MX_TIM4_Init+0xbc>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001858:	4b1f      	ldr	r3, [pc, #124]	; (80018d8 <MX_TIM4_Init+0xbc>)
 800185a:	2200      	movs	r2, #0
 800185c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800185e:	481e      	ldr	r0, [pc, #120]	; (80018d8 <MX_TIM4_Init+0xbc>)
 8001860:	f004 f92c 	bl	8005abc <HAL_TIM_IC_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800186a:	f000 f911 	bl	8001a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001876:	f107 0310 	add.w	r3, r7, #16
 800187a:	4619      	mov	r1, r3
 800187c:	4816      	ldr	r0, [pc, #88]	; (80018d8 <MX_TIM4_Init+0xbc>)
 800187e:	f004 fe0b 	bl	8006498 <HAL_TIMEx_MasterConfigSynchronization>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001888:	f000 f902 	bl	8001a90 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800188c:	2300      	movs	r3, #0
 800188e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001890:	2301      	movs	r3, #1
 8001892:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001894:	2300      	movs	r3, #0
 8001896:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800189c:	463b      	mov	r3, r7
 800189e:	2200      	movs	r2, #0
 80018a0:	4619      	mov	r1, r3
 80018a2:	480d      	ldr	r0, [pc, #52]	; (80018d8 <MX_TIM4_Init+0xbc>)
 80018a4:	f004 fb68 	bl	8005f78 <HAL_TIM_IC_ConfigChannel>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80018ae:	f000 f8ef 	bl	8001a90 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80018b2:	2302      	movs	r3, #2
 80018b4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80018b6:	2302      	movs	r3, #2
 80018b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80018ba:	463b      	mov	r3, r7
 80018bc:	2204      	movs	r2, #4
 80018be:	4619      	mov	r1, r3
 80018c0:	4805      	ldr	r0, [pc, #20]	; (80018d8 <MX_TIM4_Init+0xbc>)
 80018c2:	f004 fb59 	bl	8005f78 <HAL_TIM_IC_ConfigChannel>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80018cc:	f000 f8e0 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018d0:	bf00      	nop
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200004ac 	.word	0x200004ac
 80018dc:	40000800 	.word	0x40000800

080018e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f4:	4b62      	ldr	r3, [pc, #392]	; (8001a80 <MX_GPIO_Init+0x1a0>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	4a61      	ldr	r2, [pc, #388]	; (8001a80 <MX_GPIO_Init+0x1a0>)
 80018fa:	f043 0310 	orr.w	r3, r3, #16
 80018fe:	6193      	str	r3, [r2, #24]
 8001900:	4b5f      	ldr	r3, [pc, #380]	; (8001a80 <MX_GPIO_Init+0x1a0>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f003 0310 	and.w	r3, r3, #16
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800190c:	4b5c      	ldr	r3, [pc, #368]	; (8001a80 <MX_GPIO_Init+0x1a0>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	4a5b      	ldr	r2, [pc, #364]	; (8001a80 <MX_GPIO_Init+0x1a0>)
 8001912:	f043 0320 	orr.w	r3, r3, #32
 8001916:	6193      	str	r3, [r2, #24]
 8001918:	4b59      	ldr	r3, [pc, #356]	; (8001a80 <MX_GPIO_Init+0x1a0>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f003 0320 	and.w	r3, r3, #32
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001924:	4b56      	ldr	r3, [pc, #344]	; (8001a80 <MX_GPIO_Init+0x1a0>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	4a55      	ldr	r2, [pc, #340]	; (8001a80 <MX_GPIO_Init+0x1a0>)
 800192a:	f043 0304 	orr.w	r3, r3, #4
 800192e:	6193      	str	r3, [r2, #24]
 8001930:	4b53      	ldr	r3, [pc, #332]	; (8001a80 <MX_GPIO_Init+0x1a0>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193c:	4b50      	ldr	r3, [pc, #320]	; (8001a80 <MX_GPIO_Init+0x1a0>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	4a4f      	ldr	r2, [pc, #316]	; (8001a80 <MX_GPIO_Init+0x1a0>)
 8001942:	f043 0308 	orr.w	r3, r3, #8
 8001946:	6193      	str	r3, [r2, #24]
 8001948:	4b4d      	ldr	r3, [pc, #308]	; (8001a80 <MX_GPIO_Init+0x1a0>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	687b      	ldr	r3, [r7, #4]


  // reset USB DP (D+)
  // инициализируем пин DP как выход
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195a:	2301      	movs	r3, #1
 800195c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195e:	2302      	movs	r3, #2
 8001960:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	4619      	mov	r1, r3
 8001968:	4846      	ldr	r0, [pc, #280]	; (8001a84 <MX_GPIO_Init+0x1a4>)
 800196a:	f001 fb7d 	bl	8003068 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // прижимаем DP к "земле"
 800196e:	2200      	movs	r2, #0
 8001970:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001974:	4843      	ldr	r0, [pc, #268]	; (8001a84 <MX_GPIO_Init+0x1a4>)
 8001976:	f001 fd12 	bl	800339e <HAL_GPIO_WritePin>
  for(uint16_t i = 0; i < 10000; i++) {}; // немного ждём
 800197a:	2300      	movs	r3, #0
 800197c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800197e:	e002      	b.n	8001986 <MX_GPIO_Init+0xa6>
 8001980:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001982:	3301      	adds	r3, #1
 8001984:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001986:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001988:	f242 720f 	movw	r2, #9999	; 0x270f
 800198c:	4293      	cmp	r3, r2
 800198e:	d9f7      	bls.n	8001980 <MX_GPIO_Init+0xa0>

  // переинициализируем пин для работы с USB
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001990:	2300      	movs	r3, #0
 8001992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4619      	mov	r1, r3
 800199e:	4839      	ldr	r0, [pc, #228]	; (8001a84 <MX_GPIO_Init+0x1a4>)
 80019a0:	f001 fb62 	bl	8003068 <HAL_GPIO_Init>
  for(uint16_t i = 0; i < 10000; i++) {}; // немного ждём
 80019a4:	2300      	movs	r3, #0
 80019a6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80019a8:	e002      	b.n	80019b0 <MX_GPIO_Init+0xd0>
 80019aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019ac:	3301      	adds	r3, #1
 80019ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 80019b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019b2:	f242 720f 	movw	r2, #9999	; 0x270f
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d9f7      	bls.n	80019aa <MX_GPIO_Init+0xca>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019ba:	2200      	movs	r2, #0
 80019bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019c0:	4831      	ldr	r0, [pc, #196]	; (8001a88 <MX_GPIO_Init+0x1a8>)
 80019c2:	f001 fcec 	bl	800339e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD5312_LDAC_Pin|AD5312_SYNC_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80019c6:	2200      	movs	r2, #0
 80019c8:	f240 4112 	movw	r1, #1042	; 0x412
 80019cc:	482d      	ldr	r0, [pc, #180]	; (8001a84 <MX_GPIO_Init+0x1a4>)
 80019ce:	f001 fce6 	bl	800339e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 80019d2:	2201      	movs	r2, #1
 80019d4:	2104      	movs	r1, #4
 80019d6:	482b      	ldr	r0, [pc, #172]	; (8001a84 <MX_GPIO_Init+0x1a4>)
 80019d8:	f001 fce1 	bl	800339e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80019dc:	2200      	movs	r2, #0
 80019de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019e2:	482a      	ldr	r0, [pc, #168]	; (8001a8c <MX_GPIO_Init+0x1ac>)
 80019e4:	f001 fcdb 	bl	800339e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ee:	2301      	movs	r3, #1
 80019f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2302      	movs	r3, #2
 80019f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4619      	mov	r1, r3
 8001a00:	4821      	ldr	r0, [pc, #132]	; (8001a88 <MX_GPIO_Init+0x1a8>)
 8001a02:	f001 fb31 	bl	8003068 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD5312_LDAC_Pin Relay_Pin AD5312_SYNC_Pin PA10 */
  GPIO_InitStruct.Pin = AD5312_LDAC_Pin|Relay_Pin|AD5312_SYNC_Pin|GPIO_PIN_10;
 8001a06:	f240 4316 	movw	r3, #1046	; 0x416
 8001a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2302      	movs	r3, #2
 8001a16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4819      	ldr	r0, [pc, #100]	; (8001a84 <MX_GPIO_Init+0x1a4>)
 8001a20:	f001 fb22 	bl	8003068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4619      	mov	r1, r3
 8001a38:	4814      	ldr	r0, [pc, #80]	; (8001a8c <MX_GPIO_Init+0x1ac>)
 8001a3a:	f001 fb15 	bl	8003068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001a3e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	4619      	mov	r1, r3
 8001a52:	480e      	ldr	r0, [pc, #56]	; (8001a8c <MX_GPIO_Init+0x1ac>)
 8001a54:	f001 fb08 	bl	8003068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a62:	2301      	movs	r3, #1
 8001a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a66:	2302      	movs	r3, #2
 8001a68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4806      	ldr	r0, [pc, #24]	; (8001a8c <MX_GPIO_Init+0x1ac>)
 8001a72:	f001 faf9 	bl	8003068 <HAL_GPIO_Init>

}
 8001a76:	bf00      	nop
 8001a78:	3728      	adds	r7, #40	; 0x28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40010800 	.word	0x40010800
 8001a88:	40011000 	.word	0x40011000
 8001a8c:	40010c00 	.word	0x40010c00

08001a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <HAL_MspInit+0x5c>)
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	4a14      	ldr	r2, [pc, #80]	; (8001af8 <HAL_MspInit+0x5c>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6193      	str	r3, [r2, #24]
 8001aae:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <HAL_MspInit+0x5c>)
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aba:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <HAL_MspInit+0x5c>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	4a0e      	ldr	r2, [pc, #56]	; (8001af8 <HAL_MspInit+0x5c>)
 8001ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	61d3      	str	r3, [r2, #28]
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <HAL_MspInit+0x5c>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <HAL_MspInit+0x60>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	4a04      	ldr	r2, [pc, #16]	; (8001afc <HAL_MspInit+0x60>)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aee:	bf00      	nop
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40010000 	.word	0x40010000

08001b00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 0310 	add.w	r3, r7, #16
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a18      	ldr	r2, [pc, #96]	; (8001b7c <HAL_ADC_MspInit+0x7c>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d129      	bne.n	8001b74 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b20:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <HAL_ADC_MspInit+0x80>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	4a16      	ldr	r2, [pc, #88]	; (8001b80 <HAL_ADC_MspInit+0x80>)
 8001b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b2a:	6193      	str	r3, [r2, #24]
 8001b2c:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <HAL_ADC_MspInit+0x80>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <HAL_ADC_MspInit+0x80>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	4a10      	ldr	r2, [pc, #64]	; (8001b80 <HAL_ADC_MspInit+0x80>)
 8001b3e:	f043 0304 	orr.w	r3, r3, #4
 8001b42:	6193      	str	r3, [r2, #24]
 8001b44:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_ADC_MspInit+0x80>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b50:	2308      	movs	r3, #8
 8001b52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b54:	2303      	movs	r3, #3
 8001b56:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b58:	f107 0310 	add.w	r3, r7, #16
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4809      	ldr	r0, [pc, #36]	; (8001b84 <HAL_ADC_MspInit+0x84>)
 8001b60:	f001 fa82 	bl	8003068 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001b64:	2200      	movs	r2, #0
 8001b66:	2100      	movs	r1, #0
 8001b68:	2012      	movs	r0, #18
 8001b6a:	f000 fff8 	bl	8002b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001b6e:	2012      	movs	r0, #18
 8001b70:	f001 f811 	bl	8002b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b74:	bf00      	nop
 8001b76:	3720      	adds	r7, #32
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40012400 	.word	0x40012400
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40010800 	.word	0x40010800

08001b88 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a09      	ldr	r2, [pc, #36]	; (8001bbc <HAL_CRC_MspInit+0x34>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d10b      	bne.n	8001bb2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_CRC_MspInit+0x38>)
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	4a08      	ldr	r2, [pc, #32]	; (8001bc0 <HAL_CRC_MspInit+0x38>)
 8001ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ba4:	6153      	str	r3, [r2, #20]
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_CRC_MspInit+0x38>)
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001bb2:	bf00      	nop
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	40023000 	.word	0x40023000
 8001bc0:	40021000 	.word	0x40021000

08001bc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0310 	add.w	r3, r7, #16
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a15      	ldr	r2, [pc, #84]	; (8001c34 <HAL_SPI_MspInit+0x70>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d123      	bne.n	8001c2c <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001be4:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <HAL_SPI_MspInit+0x74>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	4a13      	ldr	r2, [pc, #76]	; (8001c38 <HAL_SPI_MspInit+0x74>)
 8001bea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bee:	6193      	str	r3, [r2, #24]
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <HAL_SPI_MspInit+0x74>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <HAL_SPI_MspInit+0x74>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	4a0d      	ldr	r2, [pc, #52]	; (8001c38 <HAL_SPI_MspInit+0x74>)
 8001c02:	f043 0304 	orr.w	r3, r3, #4
 8001c06:	6193      	str	r3, [r2, #24]
 8001c08:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <HAL_SPI_MspInit+0x74>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AD5312_SCLK_Pin|AD5312_DIN_Pin;
 8001c14:	23a0      	movs	r3, #160	; 0xa0
 8001c16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	4619      	mov	r1, r3
 8001c26:	4805      	ldr	r0, [pc, #20]	; (8001c3c <HAL_SPI_MspInit+0x78>)
 8001c28:	f001 fa1e 	bl	8003068 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c2c:	bf00      	nop
 8001c2e:	3720      	adds	r7, #32
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40013000 	.word	0x40013000
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40010800 	.word	0x40010800

08001c40 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08c      	sub	sp, #48	; 0x30
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 031c 	add.w	r3, r7, #28
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a3b      	ldr	r2, [pc, #236]	; (8001d48 <HAL_TIM_IC_MspInit+0x108>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d13e      	bne.n	8001cde <HAL_TIM_IC_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c60:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <HAL_TIM_IC_MspInit+0x10c>)
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	4a39      	ldr	r2, [pc, #228]	; (8001d4c <HAL_TIM_IC_MspInit+0x10c>)
 8001c66:	f043 0302 	orr.w	r3, r3, #2
 8001c6a:	61d3      	str	r3, [r2, #28]
 8001c6c:	4b37      	ldr	r3, [pc, #220]	; (8001d4c <HAL_TIM_IC_MspInit+0x10c>)
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	61bb      	str	r3, [r7, #24]
 8001c76:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c78:	4b34      	ldr	r3, [pc, #208]	; (8001d4c <HAL_TIM_IC_MspInit+0x10c>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	4a33      	ldr	r2, [pc, #204]	; (8001d4c <HAL_TIM_IC_MspInit+0x10c>)
 8001c7e:	f043 0308 	orr.w	r3, r3, #8
 8001c82:	6193      	str	r3, [r2, #24]
 8001c84:	4b31      	ldr	r3, [pc, #196]	; (8001d4c <HAL_TIM_IC_MspInit+0x10c>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c90:	2310      	movs	r3, #16
 8001c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c94:	2300      	movs	r3, #0
 8001c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	482b      	ldr	r0, [pc, #172]	; (8001d50 <HAL_TIM_IC_MspInit+0x110>)
 8001ca4:	f001 f9e0 	bl	8003068 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001ca8:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <HAL_TIM_IC_MspInit+0x114>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cc6:	4a23      	ldr	r2, [pc, #140]	; (8001d54 <HAL_TIM_IC_MspInit+0x114>)
 8001cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cca:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2100      	movs	r1, #0
 8001cd0:	201d      	movs	r0, #29
 8001cd2:	f000 ff44 	bl	8002b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cd6:	201d      	movs	r0, #29
 8001cd8:	f000 ff5d 	bl	8002b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001cdc:	e030      	b.n	8001d40 <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM4)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a1d      	ldr	r2, [pc, #116]	; (8001d58 <HAL_TIM_IC_MspInit+0x118>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d12b      	bne.n	8001d40 <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ce8:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <HAL_TIM_IC_MspInit+0x10c>)
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	4a17      	ldr	r2, [pc, #92]	; (8001d4c <HAL_TIM_IC_MspInit+0x10c>)
 8001cee:	f043 0304 	orr.w	r3, r3, #4
 8001cf2:	61d3      	str	r3, [r2, #28]
 8001cf4:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <HAL_TIM_IC_MspInit+0x10c>)
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_TIM_IC_MspInit+0x10c>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	4a11      	ldr	r2, [pc, #68]	; (8001d4c <HAL_TIM_IC_MspInit+0x10c>)
 8001d06:	f043 0308 	orr.w	r3, r3, #8
 8001d0a:	6193      	str	r3, [r2, #24]
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <HAL_TIM_IC_MspInit+0x10c>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d18:	2340      	movs	r3, #64	; 0x40
 8001d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d24:	f107 031c 	add.w	r3, r7, #28
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4809      	ldr	r0, [pc, #36]	; (8001d50 <HAL_TIM_IC_MspInit+0x110>)
 8001d2c:	f001 f99c 	bl	8003068 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d30:	2200      	movs	r2, #0
 8001d32:	2100      	movs	r1, #0
 8001d34:	201e      	movs	r0, #30
 8001d36:	f000 ff12 	bl	8002b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d3a:	201e      	movs	r0, #30
 8001d3c:	f000 ff2b 	bl	8002b96 <HAL_NVIC_EnableIRQ>
}
 8001d40:	bf00      	nop
 8001d42:	3730      	adds	r7, #48	; 0x30
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40000400 	.word	0x40000400
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40010c00 	.word	0x40010c00
 8001d54:	40010000 	.word	0x40010000
 8001d58:	40000800 	.word	0x40000800

08001d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 8001d6c:	4806      	ldr	r0, [pc, #24]	; (8001d88 <HardFault_Handler+0x20>)
 8001d6e:	f008 fd07 	bl	800a780 <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 8001d72:	4805      	ldr	r0, [pc, #20]	; (8001d88 <HardFault_Handler+0x20>)
 8001d74:	f008 fd04 	bl	800a780 <iprintf>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d7e:	4803      	ldr	r0, [pc, #12]	; (8001d8c <HardFault_Handler+0x24>)
 8001d80:	f001 fb0d 	bl	800339e <HAL_GPIO_WritePin>
	  printf("HardFault_IRQn");
 8001d84:	e7f5      	b.n	8001d72 <HardFault_Handler+0xa>
 8001d86:	bf00      	nop
 8001d88:	0800ba60 	.word	0x0800ba60
 8001d8c:	40011000 	.word	0x40011000

08001d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <MemManage_Handler+0x4>

08001d96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d9a:	e7fe      	b.n	8001d9a <BusFault_Handler+0x4>

08001d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da0:	e7fe      	b.n	8001da0 <UsageFault_Handler+0x4>

08001da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr

08001dae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr

08001dba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr

08001dc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dca:	f000 f945 	bl	8002058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001dd8:	4802      	ldr	r0, [pc, #8]	; (8001de4 <ADC1_2_IRQHandler+0x10>)
 8001dda:	f000 faf3 	bl	80023c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000944 	.word	0x20000944

08001de8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001dec:	4802      	ldr	r0, [pc, #8]	; (8001df8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001dee:	f001 fc1f 	bl	8003630 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200012b4 	.word	0x200012b4

08001dfc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <TIM3_IRQHandler+0x10>)
 8001e02:	f003 ffb1 	bl	8005d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200008fc 	.word	0x200008fc

08001e10 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <TIM4_IRQHandler+0x10>)
 8001e16:	f003 ffa7 	bl	8005d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	200004ac 	.word	0x200004ac

08001e24 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	e00a      	b.n	8001e4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e36:	f3af 8000 	nop.w
 8001e3a:	4601      	mov	r1, r0
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	60ba      	str	r2, [r7, #8]
 8001e42:	b2ca      	uxtb	r2, r1
 8001e44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	dbf0      	blt.n	8001e36 <_read+0x12>
	}

return len;
 8001e54:	687b      	ldr	r3, [r7, #4]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <_close>:
	}
	return len;
}

int _close(int file)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
	return -1;
 8001e66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e84:	605a      	str	r2, [r3, #4]
	return 0;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr

08001e92 <_isatty>:

int _isatty(int file)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
	return 1;
 8001e9a:	2301      	movs	r3, #1
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr

08001ea6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b085      	sub	sp, #20
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
	return 0;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
	...

08001ec0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <_sbrk+0x50>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d102      	bne.n	8001ed6 <_sbrk+0x16>
		heap_end = &end;
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <_sbrk+0x50>)
 8001ed2:	4a10      	ldr	r2, [pc, #64]	; (8001f14 <_sbrk+0x54>)
 8001ed4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <_sbrk+0x50>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <_sbrk+0x50>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	466a      	mov	r2, sp
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d907      	bls.n	8001efa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001eea:	f008 fc09 	bl	800a700 <__errno>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	220c      	movs	r2, #12
 8001ef2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef8:	e006      	b.n	8001f08 <_sbrk+0x48>
	}

	heap_end += incr;
 8001efa:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <_sbrk+0x50>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	4a03      	ldr	r2, [pc, #12]	; (8001f10 <_sbrk+0x50>)
 8001f04:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001f06:	68fb      	ldr	r3, [r7, #12]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	2000027c 	.word	0x2000027c
 8001f14:	200015b0 	.word	0x200015b0

08001f18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001f1c:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <SystemInit+0x5c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a14      	ldr	r2, [pc, #80]	; (8001f74 <SystemInit+0x5c>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <SystemInit+0x5c>)
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	4911      	ldr	r1, [pc, #68]	; (8001f74 <SystemInit+0x5c>)
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <SystemInit+0x60>)
 8001f30:	4013      	ands	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001f34:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <SystemInit+0x5c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0e      	ldr	r2, [pc, #56]	; (8001f74 <SystemInit+0x5c>)
 8001f3a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f42:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <SystemInit+0x5c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <SystemInit+0x5c>)
 8001f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f4e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <SystemInit+0x5c>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	4a07      	ldr	r2, [pc, #28]	; (8001f74 <SystemInit+0x5c>)
 8001f56:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001f5a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001f5c:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <SystemInit+0x5c>)
 8001f5e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001f62:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001f64:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <SystemInit+0x64>)
 8001f66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f6a:	609a      	str	r2, [r3, #8]
#endif 
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	40021000 	.word	0x40021000
 8001f78:	f8ff0000 	.word	0xf8ff0000
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001f80:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001f82:	e003      	b.n	8001f8c <LoopCopyDataInit>

08001f84 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001f86:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001f88:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001f8a:	3104      	adds	r1, #4

08001f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001f8c:	480a      	ldr	r0, [pc, #40]	; (8001fb8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001f90:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001f92:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001f94:	d3f6      	bcc.n	8001f84 <CopyDataInit>
  ldr r2, =_sbss
 8001f96:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001f98:	e002      	b.n	8001fa0 <LoopFillZerobss>

08001f9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001f9a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001f9c:	f842 3b04 	str.w	r3, [r2], #4

08001fa0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001fa2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001fa4:	d3f9      	bcc.n	8001f9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fa6:	f7ff ffb7 	bl	8001f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001faa:	f008 fbaf 	bl	800a70c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fae:	f7ff f96d 	bl	800128c <main>
  bx lr
 8001fb2:	4770      	bx	lr
  ldr r3, =_sidata
 8001fb4:	0800bb90 	.word	0x0800bb90
  ldr r0, =_sdata
 8001fb8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001fbc:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8001fc0:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 8001fc4:	200015b0 	.word	0x200015b0

08001fc8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fc8:	e7fe      	b.n	8001fc8 <CAN1_RX1_IRQHandler>
	...

08001fcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fd0:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <HAL_Init+0x28>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a07      	ldr	r2, [pc, #28]	; (8001ff4 <HAL_Init+0x28>)
 8001fd6:	f043 0310 	orr.w	r3, r3, #16
 8001fda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fdc:	2003      	movs	r0, #3
 8001fde:	f000 fdb3 	bl	8002b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	f000 f808 	bl	8001ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fe8:	f7ff fd58 	bl	8001a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40022000 	.word	0x40022000

08001ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002000:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_InitTick+0x54>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b12      	ldr	r3, [pc, #72]	; (8002050 <HAL_InitTick+0x58>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	4619      	mov	r1, r3
 800200a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800200e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002012:	fbb2 f3f3 	udiv	r3, r2, r3
 8002016:	4618      	mov	r0, r3
 8002018:	f000 fdcb 	bl	8002bb2 <HAL_SYSTICK_Config>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e00e      	b.n	8002044 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b0f      	cmp	r3, #15
 800202a:	d80a      	bhi.n	8002042 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800202c:	2200      	movs	r2, #0
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	f04f 30ff 	mov.w	r0, #4294967295
 8002034:	f000 fd93 	bl	8002b5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002038:	4a06      	ldr	r2, [pc, #24]	; (8002054 <HAL_InitTick+0x5c>)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
 8002040:	e000      	b.n	8002044 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
}
 8002044:	4618      	mov	r0, r3
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20000014 	.word	0x20000014
 8002050:	2000001c 	.word	0x2000001c
 8002054:	20000018 	.word	0x20000018

08002058 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_IncTick+0x1c>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_IncTick+0x20>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4413      	add	r3, r2
 8002068:	4a03      	ldr	r2, [pc, #12]	; (8002078 <HAL_IncTick+0x20>)
 800206a:	6013      	str	r3, [r2, #0]
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr
 8002074:	2000001c 	.word	0x2000001c
 8002078:	200009cc 	.word	0x200009cc

0800207c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return uwTick;
 8002080:	4b02      	ldr	r3, [pc, #8]	; (800208c <HAL_GetTick+0x10>)
 8002082:	681b      	ldr	r3, [r3, #0]
}
 8002084:	4618      	mov	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr
 800208c:	200009cc 	.word	0x200009cc

08002090 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800209c:	2300      	movs	r3, #0
 800209e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e0be      	b.n	8002230 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d109      	bne.n	80020d4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff fd16 	bl	8001b00 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 fb8b 	bl	80027f0 <ADC_ConversionStop_Disable>
 80020da:	4603      	mov	r3, r0
 80020dc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e2:	f003 0310 	and.w	r3, r3, #16
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f040 8099 	bne.w	800221e <HAL_ADC_Init+0x18e>
 80020ec:	7dfb      	ldrb	r3, [r7, #23]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f040 8095 	bne.w	800221e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020fc:	f023 0302 	bic.w	r3, r3, #2
 8002100:	f043 0202 	orr.w	r2, r3, #2
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002110:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	7b1b      	ldrb	r3, [r3, #12]
 8002116:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002118:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	4313      	orrs	r3, r2
 800211e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002128:	d003      	beq.n	8002132 <HAL_ADC_Init+0xa2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d102      	bne.n	8002138 <HAL_ADC_Init+0xa8>
 8002132:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002136:	e000      	b.n	800213a <HAL_ADC_Init+0xaa>
 8002138:	2300      	movs	r3, #0
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	7d1b      	ldrb	r3, [r3, #20]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d119      	bne.n	800217c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	7b1b      	ldrb	r3, [r3, #12]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d109      	bne.n	8002164 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	3b01      	subs	r3, #1
 8002156:	035a      	lsls	r2, r3, #13
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	e00b      	b.n	800217c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	f043 0220 	orr.w	r2, r3, #32
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	f043 0201 	orr.w	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	430a      	orrs	r2, r1
 800218e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	4b28      	ldr	r3, [pc, #160]	; (8002238 <HAL_ADC_Init+0x1a8>)
 8002198:	4013      	ands	r3, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	68b9      	ldr	r1, [r7, #8]
 80021a0:	430b      	orrs	r3, r1
 80021a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021ac:	d003      	beq.n	80021b6 <HAL_ADC_Init+0x126>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d104      	bne.n	80021c0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	051b      	lsls	r3, r3, #20
 80021be:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	4b18      	ldr	r3, [pc, #96]	; (800223c <HAL_ADC_Init+0x1ac>)
 80021dc:	4013      	ands	r3, r2
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d10b      	bne.n	80021fc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ee:	f023 0303 	bic.w	r3, r3, #3
 80021f2:	f043 0201 	orr.w	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021fa:	e018      	b.n	800222e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	f023 0312 	bic.w	r3, r3, #18
 8002204:	f043 0210 	orr.w	r2, r3, #16
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	f043 0201 	orr.w	r2, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800221c:	e007      	b.n	800222e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002222:	f043 0210 	orr.w	r2, r3, #16
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800222e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	ffe1f7fd 	.word	0xffe1f7fd
 800223c:	ff1f0efe 	.word	0xff1f0efe

08002240 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_ADC_Start_IT+0x1a>
 8002256:	2302      	movs	r3, #2
 8002258:	e0a0      	b.n	800239c <HAL_ADC_Start_IT+0x15c>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 fa72 	bl	800274c <ADC_Enable>
 8002268:	4603      	mov	r3, r0
 800226a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	2b00      	cmp	r3, #0
 8002270:	f040 808f 	bne.w	8002392 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002278:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800227c:	f023 0301 	bic.w	r3, r3, #1
 8002280:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a45      	ldr	r2, [pc, #276]	; (80023a4 <HAL_ADC_Start_IT+0x164>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d105      	bne.n	800229e <HAL_ADC_Start_IT+0x5e>
 8002292:	4b45      	ldr	r3, [pc, #276]	; (80023a8 <HAL_ADC_Start_IT+0x168>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d115      	bne.n	80022ca <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d026      	beq.n	8002306 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022c8:	e01d      	b.n	8002306 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a33      	ldr	r2, [pc, #204]	; (80023a8 <HAL_ADC_Start_IT+0x168>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d004      	beq.n	80022ea <HAL_ADC_Start_IT+0xaa>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a2f      	ldr	r2, [pc, #188]	; (80023a4 <HAL_ADC_Start_IT+0x164>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d10d      	bne.n	8002306 <HAL_ADC_Start_IT+0xc6>
 80022ea:	4b2f      	ldr	r3, [pc, #188]	; (80023a8 <HAL_ADC_Start_IT+0x168>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d007      	beq.n	8002306 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d006      	beq.n	8002320 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002316:	f023 0206 	bic.w	r2, r3, #6
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	62da      	str	r2, [r3, #44]	; 0x2c
 800231e:	e002      	b.n	8002326 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f06f 0202 	mvn.w	r2, #2
 8002336:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0220 	orr.w	r2, r2, #32
 8002346:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002352:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002356:	d113      	bne.n	8002380 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800235c:	4a11      	ldr	r2, [pc, #68]	; (80023a4 <HAL_ADC_Start_IT+0x164>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d105      	bne.n	800236e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002362:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <HAL_ADC_Start_IT+0x168>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800236a:	2b00      	cmp	r3, #0
 800236c:	d108      	bne.n	8002380 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800237c:	609a      	str	r2, [r3, #8]
 800237e:	e00c      	b.n	800239a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	e003      	b.n	800239a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800239a:	7bfb      	ldrb	r3, [r7, #15]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40012800 	.word	0x40012800
 80023a8:	40012400 	.word	0x40012400

080023ac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 0320 	and.w	r3, r3, #32
 80023d6:	2b20      	cmp	r3, #32
 80023d8:	d140      	bne.n	800245c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d139      	bne.n	800245c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	f003 0310 	and.w	r3, r3, #16
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d105      	bne.n	8002400 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800240a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800240e:	d11d      	bne.n	800244c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002414:	2b00      	cmp	r3, #0
 8002416:	d119      	bne.n	800244c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0220 	bic.w	r2, r2, #32
 8002426:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d105      	bne.n	800244c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002444:	f043 0201 	orr.w	r2, r3, #1
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7fe fb03 	bl	8000a58 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f06f 0212 	mvn.w	r2, #18
 800245a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002466:	2b80      	cmp	r3, #128	; 0x80
 8002468:	d14f      	bne.n	800250a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b04      	cmp	r3, #4
 8002476:	d148      	bne.n	800250a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247c:	f003 0310 	and.w	r3, r3, #16
 8002480:	2b00      	cmp	r3, #0
 8002482:	d105      	bne.n	8002490 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002488:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800249a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800249e:	d012      	beq.n	80024c6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d125      	bne.n	80024fa <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80024b8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80024bc:	d11d      	bne.n	80024fa <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d119      	bne.n	80024fa <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024d4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d105      	bne.n	80024fa <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f2:	f043 0201 	orr.w	r2, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fa4e 	bl	800299c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 020c 	mvn.w	r2, #12
 8002508:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002514:	2b40      	cmp	r3, #64	; 0x40
 8002516:	d114      	bne.n	8002542 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b01      	cmp	r3, #1
 8002524:	d10d      	bne.n	8002542 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f809 	bl	800254a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 0201 	mvn.w	r2, #1
 8002540:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr

0800255c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_ADC_ConfigChannel+0x20>
 8002578:	2302      	movs	r3, #2
 800257a:	e0dc      	b.n	8002736 <HAL_ADC_ConfigChannel+0x1da>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b06      	cmp	r3, #6
 800258a:	d81c      	bhi.n	80025c6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	3b05      	subs	r3, #5
 800259e:	221f      	movs	r2, #31
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	4019      	ands	r1, r3
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	3b05      	subs	r3, #5
 80025b8:	fa00 f203 	lsl.w	r2, r0, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	635a      	str	r2, [r3, #52]	; 0x34
 80025c4:	e03c      	b.n	8002640 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b0c      	cmp	r3, #12
 80025cc:	d81c      	bhi.n	8002608 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	3b23      	subs	r3, #35	; 0x23
 80025e0:	221f      	movs	r2, #31
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	4019      	ands	r1, r3
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	3b23      	subs	r3, #35	; 0x23
 80025fa:	fa00 f203 	lsl.w	r2, r0, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	631a      	str	r2, [r3, #48]	; 0x30
 8002606:	e01b      	b.n	8002640 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	3b41      	subs	r3, #65	; 0x41
 800261a:	221f      	movs	r2, #31
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	4019      	ands	r1, r3
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	3b41      	subs	r3, #65	; 0x41
 8002634:	fa00 f203 	lsl.w	r2, r0, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b09      	cmp	r3, #9
 8002646:	d91c      	bls.n	8002682 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68d9      	ldr	r1, [r3, #12]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	4613      	mov	r3, r2
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	4413      	add	r3, r2
 8002658:	3b1e      	subs	r3, #30
 800265a:	2207      	movs	r2, #7
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	4019      	ands	r1, r3
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	6898      	ldr	r0, [r3, #8]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4613      	mov	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4413      	add	r3, r2
 8002672:	3b1e      	subs	r3, #30
 8002674:	fa00 f203 	lsl.w	r2, r0, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	60da      	str	r2, [r3, #12]
 8002680:	e019      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6919      	ldr	r1, [r3, #16]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4613      	mov	r3, r2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	4413      	add	r3, r2
 8002692:	2207      	movs	r2, #7
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	4019      	ands	r1, r3
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	6898      	ldr	r0, [r3, #8]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4613      	mov	r3, r2
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	4413      	add	r3, r2
 80026aa:	fa00 f203 	lsl.w	r2, r0, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b10      	cmp	r3, #16
 80026bc:	d003      	beq.n	80026c6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80026c2:	2b11      	cmp	r3, #17
 80026c4:	d132      	bne.n	800272c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a1d      	ldr	r2, [pc, #116]	; (8002740 <HAL_ADC_ConfigChannel+0x1e4>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d125      	bne.n	800271c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d126      	bne.n	800272c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80026ec:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2b10      	cmp	r3, #16
 80026f4:	d11a      	bne.n	800272c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026f6:	4b13      	ldr	r3, [pc, #76]	; (8002744 <HAL_ADC_ConfigChannel+0x1e8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a13      	ldr	r2, [pc, #76]	; (8002748 <HAL_ADC_ConfigChannel+0x1ec>)
 80026fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002700:	0c9a      	lsrs	r2, r3, #18
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800270c:	e002      	b.n	8002714 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	3b01      	subs	r3, #1
 8002712:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f9      	bne.n	800270e <HAL_ADC_ConfigChannel+0x1b2>
 800271a:	e007      	b.n	800272c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	f043 0220 	orr.w	r2, r3, #32
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002734:	7bfb      	ldrb	r3, [r7, #15]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr
 8002740:	40012400 	.word	0x40012400
 8002744:	20000014 	.word	0x20000014
 8002748:	431bde83 	.word	0x431bde83

0800274c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b01      	cmp	r3, #1
 8002768:	d039      	beq.n	80027de <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 0201 	orr.w	r2, r2, #1
 8002778:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800277a:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <ADC_Enable+0x9c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a1b      	ldr	r2, [pc, #108]	; (80027ec <ADC_Enable+0xa0>)
 8002780:	fba2 2303 	umull	r2, r3, r2, r3
 8002784:	0c9b      	lsrs	r3, r3, #18
 8002786:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002788:	e002      	b.n	8002790 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	3b01      	subs	r3, #1
 800278e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f9      	bne.n	800278a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002796:	f7ff fc71 	bl	800207c <HAL_GetTick>
 800279a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800279c:	e018      	b.n	80027d0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800279e:	f7ff fc6d 	bl	800207c <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d911      	bls.n	80027d0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b0:	f043 0210 	orr.w	r2, r3, #16
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	f043 0201 	orr.w	r2, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e007      	b.n	80027e0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d1df      	bne.n	800279e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20000014 	.word	0x20000014
 80027ec:	431bde83 	.word	0x431bde83

080027f0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b01      	cmp	r3, #1
 8002808:	d127      	bne.n	800285a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0201 	bic.w	r2, r2, #1
 8002818:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800281a:	f7ff fc2f 	bl	800207c <HAL_GetTick>
 800281e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002820:	e014      	b.n	800284c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002822:	f7ff fc2b 	bl	800207c <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d90d      	bls.n	800284c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	f043 0210 	orr.w	r2, r3, #16
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	f043 0201 	orr.w	r2, r3, #1
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e007      	b.n	800285c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b01      	cmp	r3, #1
 8002858:	d0e3      	beq.n	8002822 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_ADCEx_Calibration_Start+0x1e>
 800287e:	2302      	movs	r3, #2
 8002880:	e086      	b.n	8002990 <HAL_ADCEx_Calibration_Start+0x12c>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7ff ffb0 	bl	80027f0 <ADC_ConversionStop_Disable>
 8002890:	4603      	mov	r3, r0
 8002892:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002894:	7dfb      	ldrb	r3, [r7, #23]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d175      	bne.n	8002986 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028a2:	f023 0302 	bic.w	r3, r3, #2
 80028a6:	f043 0202 	orr.w	r2, r3, #2
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80028ae:	4b3a      	ldr	r3, [pc, #232]	; (8002998 <HAL_ADCEx_Calibration_Start+0x134>)
 80028b0:	681c      	ldr	r4, [r3, #0]
 80028b2:	2002      	movs	r0, #2
 80028b4:	f002 fdd8 	bl	8005468 <HAL_RCCEx_GetPeriphCLKFreq>
 80028b8:	4603      	mov	r3, r0
 80028ba:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80028be:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80028c0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80028c2:	e002      	b.n	80028ca <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f9      	bne.n	80028c4 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff ff3b 	bl	800274c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f042 0208 	orr.w	r2, r2, #8
 80028e4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80028e6:	f7ff fbc9 	bl	800207c <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80028ec:	e014      	b.n	8002918 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80028ee:	f7ff fbc5 	bl	800207c <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b0a      	cmp	r3, #10
 80028fa:	d90d      	bls.n	8002918 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002900:	f023 0312 	bic.w	r3, r3, #18
 8002904:	f043 0210 	orr.w	r2, r3, #16
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e03b      	b.n	8002990 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1e3      	bne.n	80028ee <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f042 0204 	orr.w	r2, r2, #4
 8002934:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002936:	f7ff fba1 	bl	800207c <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800293c:	e014      	b.n	8002968 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800293e:	f7ff fb9d 	bl	800207c <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b0a      	cmp	r3, #10
 800294a:	d90d      	bls.n	8002968 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002950:	f023 0312 	bic.w	r3, r3, #18
 8002954:	f043 0210 	orr.w	r2, r3, #16
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e013      	b.n	8002990 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1e3      	bne.n	800293e <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297a:	f023 0303 	bic.w	r3, r3, #3
 800297e:	f043 0201 	orr.w	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800298e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002990:	4618      	mov	r0, r3
 8002992:	371c      	adds	r7, #28
 8002994:	46bd      	mov	sp, r7
 8002996:	bd90      	pop	{r4, r7, pc}
 8002998:	20000014 	.word	0x20000014

0800299c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
	...

080029b0 <__NVIC_SetPriorityGrouping>:
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <__NVIC_SetPriorityGrouping+0x44>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029cc:	4013      	ands	r3, r2
 80029ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029e2:	4a04      	ldr	r2, [pc, #16]	; (80029f4 <__NVIC_SetPriorityGrouping+0x44>)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	60d3      	str	r3, [r2, #12]
}
 80029e8:	bf00      	nop
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <__NVIC_GetPriorityGrouping>:
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029fc:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <__NVIC_GetPriorityGrouping+0x18>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	0a1b      	lsrs	r3, r3, #8
 8002a02:	f003 0307 	and.w	r3, r3, #7
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	e000ed00 	.word	0xe000ed00

08002a14 <__NVIC_EnableIRQ>:
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	db0b      	blt.n	8002a3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	f003 021f 	and.w	r2, r3, #31
 8002a2c:	4906      	ldr	r1, [pc, #24]	; (8002a48 <__NVIC_EnableIRQ+0x34>)
 8002a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	2001      	movs	r0, #1
 8002a36:	fa00 f202 	lsl.w	r2, r0, r2
 8002a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr
 8002a48:	e000e100 	.word	0xe000e100

08002a4c <__NVIC_SetPriority>:
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	6039      	str	r1, [r7, #0]
 8002a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	db0a      	blt.n	8002a76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	490c      	ldr	r1, [pc, #48]	; (8002a98 <__NVIC_SetPriority+0x4c>)
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	0112      	lsls	r2, r2, #4
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	440b      	add	r3, r1
 8002a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a74:	e00a      	b.n	8002a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	4908      	ldr	r1, [pc, #32]	; (8002a9c <__NVIC_SetPriority+0x50>)
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	3b04      	subs	r3, #4
 8002a84:	0112      	lsls	r2, r2, #4
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	440b      	add	r3, r1
 8002a8a:	761a      	strb	r2, [r3, #24]
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	e000e100 	.word	0xe000e100
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <NVIC_EncodePriority>:
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b089      	sub	sp, #36	; 0x24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f1c3 0307 	rsb	r3, r3, #7
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	bf28      	it	cs
 8002abe:	2304      	movcs	r3, #4
 8002ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	2b06      	cmp	r3, #6
 8002ac8:	d902      	bls.n	8002ad0 <NVIC_EncodePriority+0x30>
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	3b03      	subs	r3, #3
 8002ace:	e000      	b.n	8002ad2 <NVIC_EncodePriority+0x32>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43da      	mvns	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	401a      	ands	r2, r3
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	fa01 f303 	lsl.w	r3, r1, r3
 8002af2:	43d9      	mvns	r1, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af8:	4313      	orrs	r3, r2
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3724      	adds	r7, #36	; 0x24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <SysTick_Config>:
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b14:	d301      	bcc.n	8002b1a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002b16:	2301      	movs	r3, #1
 8002b18:	e00f      	b.n	8002b3a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b1a:	4a0a      	ldr	r2, [pc, #40]	; (8002b44 <SysTick_Config+0x40>)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b22:	210f      	movs	r1, #15
 8002b24:	f04f 30ff 	mov.w	r0, #4294967295
 8002b28:	f7ff ff90 	bl	8002a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b2c:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <SysTick_Config+0x40>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b32:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <SysTick_Config+0x40>)
 8002b34:	2207      	movs	r2, #7
 8002b36:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	e000e010 	.word	0xe000e010

08002b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7ff ff2d 	bl	80029b0 <__NVIC_SetPriorityGrouping>
}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b086      	sub	sp, #24
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	4603      	mov	r3, r0
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	607a      	str	r2, [r7, #4]
 8002b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b70:	f7ff ff42 	bl	80029f8 <__NVIC_GetPriorityGrouping>
 8002b74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	68b9      	ldr	r1, [r7, #8]
 8002b7a:	6978      	ldr	r0, [r7, #20]
 8002b7c:	f7ff ff90 	bl	8002aa0 <NVIC_EncodePriority>
 8002b80:	4602      	mov	r2, r0
 8002b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b86:	4611      	mov	r1, r2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff ff5f 	bl	8002a4c <__NVIC_SetPriority>
}
 8002b8e:	bf00      	nop
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff ff35 	bl	8002a14 <__NVIC_EnableIRQ>
}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff ffa2 	bl	8002b04 <SysTick_Config>
 8002bc0:	4603      	mov	r3, r0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e00e      	b.n	8002bfa <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	795b      	ldrb	r3, [r3, #5]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d105      	bne.n	8002bf2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7fe ffcb 	bl	8001b88 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b087      	sub	sp, #28
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002c0e:	2300      	movs	r3, #0
 8002c10:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2202      	movs	r2, #2
 8002c16:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0201 	orr.w	r2, r2, #1
 8002c26:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	e00a      	b.n	8002c44 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	441a      	add	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6812      	ldr	r2, [r2, #0]
 8002c3c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	3301      	adds	r3, #1
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d3f0      	bcc.n	8002c2e <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2201      	movs	r2, #1
 8002c58:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8002c5a:	693b      	ldr	r3, [r7, #16]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	371c      	adds	r7, #28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr
	...

08002c68 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002c82:	4b2f      	ldr	r3, [pc, #188]	; (8002d40 <HAL_FLASH_Program+0xd8>)
 8002c84:	7e1b      	ldrb	r3, [r3, #24]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_FLASH_Program+0x26>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e054      	b.n	8002d38 <HAL_FLASH_Program+0xd0>
 8002c8e:	4b2c      	ldr	r3, [pc, #176]	; (8002d40 <HAL_FLASH_Program+0xd8>)
 8002c90:	2201      	movs	r2, #1
 8002c92:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002c94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c98:	f000 f8a8 	bl	8002dec <FLASH_WaitForLastOperation>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002ca0:	7dfb      	ldrb	r3, [r7, #23]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d144      	bne.n	8002d30 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d102      	bne.n	8002cb2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002cac:	2301      	movs	r3, #1
 8002cae:	757b      	strb	r3, [r7, #21]
 8002cb0:	e007      	b.n	8002cc2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d102      	bne.n	8002cbe <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	757b      	strb	r3, [r7, #21]
 8002cbc:	e001      	b.n	8002cc2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002cbe:	2304      	movs	r3, #4
 8002cc0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	75bb      	strb	r3, [r7, #22]
 8002cc6:	e02d      	b.n	8002d24 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002cc8:	7dbb      	ldrb	r3, [r7, #22]
 8002cca:	005a      	lsls	r2, r3, #1
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	eb02 0c03 	add.w	ip, r2, r3
 8002cd2:	7dbb      	ldrb	r3, [r7, #22]
 8002cd4:	0119      	lsls	r1, r3, #4
 8002cd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cda:	f1c1 0620 	rsb	r6, r1, #32
 8002cde:	f1a1 0020 	sub.w	r0, r1, #32
 8002ce2:	fa22 f401 	lsr.w	r4, r2, r1
 8002ce6:	fa03 f606 	lsl.w	r6, r3, r6
 8002cea:	4334      	orrs	r4, r6
 8002cec:	fa23 f000 	lsr.w	r0, r3, r0
 8002cf0:	4304      	orrs	r4, r0
 8002cf2:	fa23 f501 	lsr.w	r5, r3, r1
 8002cf6:	b2a3      	uxth	r3, r4
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4660      	mov	r0, ip
 8002cfc:	f000 f85a 	bl	8002db4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002d00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d04:	f000 f872 	bl	8002dec <FLASH_WaitForLastOperation>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002d0c:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <HAL_FLASH_Program+0xdc>)
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	4a0c      	ldr	r2, [pc, #48]	; (8002d44 <HAL_FLASH_Program+0xdc>)
 8002d12:	f023 0301 	bic.w	r3, r3, #1
 8002d16:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002d18:	7dfb      	ldrb	r3, [r7, #23]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d107      	bne.n	8002d2e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002d1e:	7dbb      	ldrb	r3, [r7, #22]
 8002d20:	3301      	adds	r3, #1
 8002d22:	75bb      	strb	r3, [r7, #22]
 8002d24:	7dba      	ldrb	r2, [r7, #22]
 8002d26:	7d7b      	ldrb	r3, [r7, #21]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d3cd      	bcc.n	8002cc8 <HAL_FLASH_Program+0x60>
 8002d2c:	e000      	b.n	8002d30 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002d2e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002d30:	4b03      	ldr	r3, [pc, #12]	; (8002d40 <HAL_FLASH_Program+0xd8>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	761a      	strb	r2, [r3, #24]

  return status;
 8002d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	371c      	adds	r7, #28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d40:	200009d0 	.word	0x200009d0
 8002d44:	40022000 	.word	0x40022000

08002d48 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002d52:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <HAL_FLASH_Unlock+0x40>)
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00d      	beq.n	8002d7a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <HAL_FLASH_Unlock+0x40>)
 8002d60:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <HAL_FLASH_Unlock+0x44>)
 8002d62:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002d64:	4b08      	ldr	r3, [pc, #32]	; (8002d88 <HAL_FLASH_Unlock+0x40>)
 8002d66:	4a0a      	ldr	r2, [pc, #40]	; (8002d90 <HAL_FLASH_Unlock+0x48>)
 8002d68:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002d6a:	4b07      	ldr	r3, [pc, #28]	; (8002d88 <HAL_FLASH_Unlock+0x40>)
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40022000 	.word	0x40022000
 8002d8c:	45670123 	.word	0x45670123
 8002d90:	cdef89ab 	.word	0xcdef89ab

08002d94 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002d98:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <HAL_FLASH_Lock+0x1c>)
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	4a04      	ldr	r2, [pc, #16]	; (8002db0 <HAL_FLASH_Lock+0x1c>)
 8002d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002da2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40022000 	.word	0x40022000

08002db4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002dc0:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <FLASH_Program_HalfWord+0x30>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002dc6:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <FLASH_Program_HalfWord+0x34>)
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	4a07      	ldr	r2, [pc, #28]	; (8002de8 <FLASH_Program_HalfWord+0x34>)
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	887a      	ldrh	r2, [r7, #2]
 8002dd6:	801a      	strh	r2, [r3, #0]
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	200009d0 	.word	0x200009d0
 8002de8:	40022000 	.word	0x40022000

08002dec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002df4:	f7ff f942 	bl	800207c <HAL_GetTick>
 8002df8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002dfa:	e010      	b.n	8002e1e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e02:	d00c      	beq.n	8002e1e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d007      	beq.n	8002e1a <FLASH_WaitForLastOperation+0x2e>
 8002e0a:	f7ff f937 	bl	800207c <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d201      	bcs.n	8002e1e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e025      	b.n	8002e6a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002e1e:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <FLASH_WaitForLastOperation+0x88>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1e8      	bne.n	8002dfc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002e2a:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <FLASH_WaitForLastOperation+0x88>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0320 	and.w	r3, r3, #32
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002e36:	4b0f      	ldr	r3, [pc, #60]	; (8002e74 <FLASH_WaitForLastOperation+0x88>)
 8002e38:	2220      	movs	r2, #32
 8002e3a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002e3c:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <FLASH_WaitForLastOperation+0x88>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f003 0310 	and.w	r3, r3, #16
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10b      	bne.n	8002e60 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002e48:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <FLASH_WaitForLastOperation+0x88>)
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d105      	bne.n	8002e60 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002e54:	4b07      	ldr	r3, [pc, #28]	; (8002e74 <FLASH_WaitForLastOperation+0x88>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002e60:	f000 f80a 	bl	8002e78 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40022000 	.word	0x40022000

08002e78 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002e82:	4b23      	ldr	r3, [pc, #140]	; (8002f10 <FLASH_SetErrorCode+0x98>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d009      	beq.n	8002ea2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002e8e:	4b21      	ldr	r3, [pc, #132]	; (8002f14 <FLASH_SetErrorCode+0x9c>)
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	f043 0302 	orr.w	r3, r3, #2
 8002e96:	4a1f      	ldr	r2, [pc, #124]	; (8002f14 <FLASH_SetErrorCode+0x9c>)
 8002e98:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f043 0310 	orr.w	r3, r3, #16
 8002ea0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002ea2:	4b1b      	ldr	r3, [pc, #108]	; (8002f10 <FLASH_SetErrorCode+0x98>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d009      	beq.n	8002ec2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002eae:	4b19      	ldr	r3, [pc, #100]	; (8002f14 <FLASH_SetErrorCode+0x9c>)
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	4a17      	ldr	r2, [pc, #92]	; (8002f14 <FLASH_SetErrorCode+0x9c>)
 8002eb8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f043 0304 	orr.w	r3, r3, #4
 8002ec0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002ec2:	4b13      	ldr	r3, [pc, #76]	; (8002f10 <FLASH_SetErrorCode+0x98>)
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00b      	beq.n	8002ee6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002ece:	4b11      	ldr	r3, [pc, #68]	; (8002f14 <FLASH_SetErrorCode+0x9c>)
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f043 0304 	orr.w	r3, r3, #4
 8002ed6:	4a0f      	ldr	r2, [pc, #60]	; (8002f14 <FLASH_SetErrorCode+0x9c>)
 8002ed8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002eda:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <FLASH_SetErrorCode+0x98>)
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	4a0c      	ldr	r2, [pc, #48]	; (8002f10 <FLASH_SetErrorCode+0x98>)
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f240 1201 	movw	r2, #257	; 0x101
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d106      	bne.n	8002efe <FLASH_SetErrorCode+0x86>
 8002ef0:	4b07      	ldr	r3, [pc, #28]	; (8002f10 <FLASH_SetErrorCode+0x98>)
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	4a06      	ldr	r2, [pc, #24]	; (8002f10 <FLASH_SetErrorCode+0x98>)
 8002ef6:	f023 0301 	bic.w	r3, r3, #1
 8002efa:	61d3      	str	r3, [r2, #28]
}  
 8002efc:	e002      	b.n	8002f04 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002efe:	4a04      	ldr	r2, [pc, #16]	; (8002f10 <FLASH_SetErrorCode+0x98>)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	60d3      	str	r3, [r2, #12]
}  
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc80      	pop	{r7}
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40022000 	.word	0x40022000
 8002f14:	200009d0 	.word	0x200009d0

08002f18 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002f2a:	4b2f      	ldr	r3, [pc, #188]	; (8002fe8 <HAL_FLASHEx_Erase+0xd0>)
 8002f2c:	7e1b      	ldrb	r3, [r3, #24]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_FLASHEx_Erase+0x1e>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e053      	b.n	8002fde <HAL_FLASHEx_Erase+0xc6>
 8002f36:	4b2c      	ldr	r3, [pc, #176]	; (8002fe8 <HAL_FLASHEx_Erase+0xd0>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d116      	bne.n	8002f72 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002f44:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f48:	f7ff ff50 	bl	8002dec <FLASH_WaitForLastOperation>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d141      	bne.n	8002fd6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002f52:	2001      	movs	r0, #1
 8002f54:	f000 f84c 	bl	8002ff0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f58:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f5c:	f7ff ff46 	bl	8002dec <FLASH_WaitForLastOperation>
 8002f60:	4603      	mov	r3, r0
 8002f62:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002f64:	4b21      	ldr	r3, [pc, #132]	; (8002fec <HAL_FLASHEx_Erase+0xd4>)
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	4a20      	ldr	r2, [pc, #128]	; (8002fec <HAL_FLASHEx_Erase+0xd4>)
 8002f6a:	f023 0304 	bic.w	r3, r3, #4
 8002f6e:	6113      	str	r3, [r2, #16]
 8002f70:	e031      	b.n	8002fd6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002f72:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f76:	f7ff ff39 	bl	8002dec <FLASH_WaitForLastOperation>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d12a      	bne.n	8002fd6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	f04f 32ff 	mov.w	r2, #4294967295
 8002f86:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	e019      	b.n	8002fc4 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002f90:	68b8      	ldr	r0, [r7, #8]
 8002f92:	f000 f849 	bl	8003028 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f96:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f9a:	f7ff ff27 	bl	8002dec <FLASH_WaitForLastOperation>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002fa2:	4b12      	ldr	r3, [pc, #72]	; (8002fec <HAL_FLASHEx_Erase+0xd4>)
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	4a11      	ldr	r2, [pc, #68]	; (8002fec <HAL_FLASHEx_Erase+0xd4>)
 8002fa8:	f023 0302 	bic.w	r3, r3, #2
 8002fac:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	601a      	str	r2, [r3, #0]
            break;
 8002fba:	e00c      	b.n	8002fd6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fc2:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	029a      	lsls	r2, r3, #10
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d3dc      	bcc.n	8002f90 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002fd6:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <HAL_FLASHEx_Erase+0xd0>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	761a      	strb	r2, [r3, #24]

  return status;
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	200009d0 	.word	0x200009d0
 8002fec:	40022000 	.word	0x40022000

08002ff0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002ff8:	4b09      	ldr	r3, [pc, #36]	; (8003020 <FLASH_MassErase+0x30>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002ffe:	4b09      	ldr	r3, [pc, #36]	; (8003024 <FLASH_MassErase+0x34>)
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	4a08      	ldr	r2, [pc, #32]	; (8003024 <FLASH_MassErase+0x34>)
 8003004:	f043 0304 	orr.w	r3, r3, #4
 8003008:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800300a:	4b06      	ldr	r3, [pc, #24]	; (8003024 <FLASH_MassErase+0x34>)
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	4a05      	ldr	r2, [pc, #20]	; (8003024 <FLASH_MassErase+0x34>)
 8003010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003014:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr
 8003020:	200009d0 	.word	0x200009d0
 8003024:	40022000 	.word	0x40022000

08003028 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <FLASH_PageErase+0x38>)
 8003032:	2200      	movs	r2, #0
 8003034:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003036:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <FLASH_PageErase+0x3c>)
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	4a0a      	ldr	r2, [pc, #40]	; (8003064 <FLASH_PageErase+0x3c>)
 800303c:	f043 0302 	orr.w	r3, r3, #2
 8003040:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003042:	4a08      	ldr	r2, [pc, #32]	; (8003064 <FLASH_PageErase+0x3c>)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003048:	4b06      	ldr	r3, [pc, #24]	; (8003064 <FLASH_PageErase+0x3c>)
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	4a05      	ldr	r2, [pc, #20]	; (8003064 <FLASH_PageErase+0x3c>)
 800304e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003052:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	200009d0 	.word	0x200009d0
 8003064:	40022000 	.word	0x40022000

08003068 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003068:	b480      	push	{r7}
 800306a:	b08b      	sub	sp, #44	; 0x2c
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003072:	2300      	movs	r3, #0
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003076:	2300      	movs	r3, #0
 8003078:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800307a:	e169      	b.n	8003350 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800307c:	2201      	movs	r2, #1
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	429a      	cmp	r2, r3
 8003096:	f040 8158 	bne.w	800334a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	4a9a      	ldr	r2, [pc, #616]	; (8003308 <HAL_GPIO_Init+0x2a0>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d05e      	beq.n	8003162 <HAL_GPIO_Init+0xfa>
 80030a4:	4a98      	ldr	r2, [pc, #608]	; (8003308 <HAL_GPIO_Init+0x2a0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d875      	bhi.n	8003196 <HAL_GPIO_Init+0x12e>
 80030aa:	4a98      	ldr	r2, [pc, #608]	; (800330c <HAL_GPIO_Init+0x2a4>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d058      	beq.n	8003162 <HAL_GPIO_Init+0xfa>
 80030b0:	4a96      	ldr	r2, [pc, #600]	; (800330c <HAL_GPIO_Init+0x2a4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d86f      	bhi.n	8003196 <HAL_GPIO_Init+0x12e>
 80030b6:	4a96      	ldr	r2, [pc, #600]	; (8003310 <HAL_GPIO_Init+0x2a8>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d052      	beq.n	8003162 <HAL_GPIO_Init+0xfa>
 80030bc:	4a94      	ldr	r2, [pc, #592]	; (8003310 <HAL_GPIO_Init+0x2a8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d869      	bhi.n	8003196 <HAL_GPIO_Init+0x12e>
 80030c2:	4a94      	ldr	r2, [pc, #592]	; (8003314 <HAL_GPIO_Init+0x2ac>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d04c      	beq.n	8003162 <HAL_GPIO_Init+0xfa>
 80030c8:	4a92      	ldr	r2, [pc, #584]	; (8003314 <HAL_GPIO_Init+0x2ac>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d863      	bhi.n	8003196 <HAL_GPIO_Init+0x12e>
 80030ce:	4a92      	ldr	r2, [pc, #584]	; (8003318 <HAL_GPIO_Init+0x2b0>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d046      	beq.n	8003162 <HAL_GPIO_Init+0xfa>
 80030d4:	4a90      	ldr	r2, [pc, #576]	; (8003318 <HAL_GPIO_Init+0x2b0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d85d      	bhi.n	8003196 <HAL_GPIO_Init+0x12e>
 80030da:	2b12      	cmp	r3, #18
 80030dc:	d82a      	bhi.n	8003134 <HAL_GPIO_Init+0xcc>
 80030de:	2b12      	cmp	r3, #18
 80030e0:	d859      	bhi.n	8003196 <HAL_GPIO_Init+0x12e>
 80030e2:	a201      	add	r2, pc, #4	; (adr r2, 80030e8 <HAL_GPIO_Init+0x80>)
 80030e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e8:	08003163 	.word	0x08003163
 80030ec:	0800313d 	.word	0x0800313d
 80030f0:	0800314f 	.word	0x0800314f
 80030f4:	08003191 	.word	0x08003191
 80030f8:	08003197 	.word	0x08003197
 80030fc:	08003197 	.word	0x08003197
 8003100:	08003197 	.word	0x08003197
 8003104:	08003197 	.word	0x08003197
 8003108:	08003197 	.word	0x08003197
 800310c:	08003197 	.word	0x08003197
 8003110:	08003197 	.word	0x08003197
 8003114:	08003197 	.word	0x08003197
 8003118:	08003197 	.word	0x08003197
 800311c:	08003197 	.word	0x08003197
 8003120:	08003197 	.word	0x08003197
 8003124:	08003197 	.word	0x08003197
 8003128:	08003197 	.word	0x08003197
 800312c:	08003145 	.word	0x08003145
 8003130:	08003159 	.word	0x08003159
 8003134:	4a79      	ldr	r2, [pc, #484]	; (800331c <HAL_GPIO_Init+0x2b4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d013      	beq.n	8003162 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800313a:	e02c      	b.n	8003196 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	623b      	str	r3, [r7, #32]
          break;
 8003142:	e029      	b.n	8003198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	3304      	adds	r3, #4
 800314a:	623b      	str	r3, [r7, #32]
          break;
 800314c:	e024      	b.n	8003198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	3308      	adds	r3, #8
 8003154:	623b      	str	r3, [r7, #32]
          break;
 8003156:	e01f      	b.n	8003198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	330c      	adds	r3, #12
 800315e:	623b      	str	r3, [r7, #32]
          break;
 8003160:	e01a      	b.n	8003198 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d102      	bne.n	8003170 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800316a:	2304      	movs	r3, #4
 800316c:	623b      	str	r3, [r7, #32]
          break;
 800316e:	e013      	b.n	8003198 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d105      	bne.n	8003184 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003178:	2308      	movs	r3, #8
 800317a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	611a      	str	r2, [r3, #16]
          break;
 8003182:	e009      	b.n	8003198 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003184:	2308      	movs	r3, #8
 8003186:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	69fa      	ldr	r2, [r7, #28]
 800318c:	615a      	str	r2, [r3, #20]
          break;
 800318e:	e003      	b.n	8003198 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003190:	2300      	movs	r3, #0
 8003192:	623b      	str	r3, [r7, #32]
          break;
 8003194:	e000      	b.n	8003198 <HAL_GPIO_Init+0x130>
          break;
 8003196:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	2bff      	cmp	r3, #255	; 0xff
 800319c:	d801      	bhi.n	80031a2 <HAL_GPIO_Init+0x13a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	e001      	b.n	80031a6 <HAL_GPIO_Init+0x13e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3304      	adds	r3, #4
 80031a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	2bff      	cmp	r3, #255	; 0xff
 80031ac:	d802      	bhi.n	80031b4 <HAL_GPIO_Init+0x14c>
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	e002      	b.n	80031ba <HAL_GPIO_Init+0x152>
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	3b08      	subs	r3, #8
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	210f      	movs	r1, #15
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	fa01 f303 	lsl.w	r3, r1, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	401a      	ands	r2, r3
 80031cc:	6a39      	ldr	r1, [r7, #32]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	fa01 f303 	lsl.w	r3, r1, r3
 80031d4:	431a      	orrs	r2, r3
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 80b1 	beq.w	800334a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031e8:	4b4d      	ldr	r3, [pc, #308]	; (8003320 <HAL_GPIO_Init+0x2b8>)
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	4a4c      	ldr	r2, [pc, #304]	; (8003320 <HAL_GPIO_Init+0x2b8>)
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	6193      	str	r3, [r2, #24]
 80031f4:	4b4a      	ldr	r3, [pc, #296]	; (8003320 <HAL_GPIO_Init+0x2b8>)
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003200:	4a48      	ldr	r2, [pc, #288]	; (8003324 <HAL_GPIO_Init+0x2bc>)
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	089b      	lsrs	r3, r3, #2
 8003206:	3302      	adds	r3, #2
 8003208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800320c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	f003 0303 	and.w	r3, r3, #3
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	220f      	movs	r2, #15
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	43db      	mvns	r3, r3
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4013      	ands	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a40      	ldr	r2, [pc, #256]	; (8003328 <HAL_GPIO_Init+0x2c0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d013      	beq.n	8003254 <HAL_GPIO_Init+0x1ec>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a3f      	ldr	r2, [pc, #252]	; (800332c <HAL_GPIO_Init+0x2c4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d00d      	beq.n	8003250 <HAL_GPIO_Init+0x1e8>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a3e      	ldr	r2, [pc, #248]	; (8003330 <HAL_GPIO_Init+0x2c8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d007      	beq.n	800324c <HAL_GPIO_Init+0x1e4>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a3d      	ldr	r2, [pc, #244]	; (8003334 <HAL_GPIO_Init+0x2cc>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d101      	bne.n	8003248 <HAL_GPIO_Init+0x1e0>
 8003244:	2303      	movs	r3, #3
 8003246:	e006      	b.n	8003256 <HAL_GPIO_Init+0x1ee>
 8003248:	2304      	movs	r3, #4
 800324a:	e004      	b.n	8003256 <HAL_GPIO_Init+0x1ee>
 800324c:	2302      	movs	r3, #2
 800324e:	e002      	b.n	8003256 <HAL_GPIO_Init+0x1ee>
 8003250:	2301      	movs	r3, #1
 8003252:	e000      	b.n	8003256 <HAL_GPIO_Init+0x1ee>
 8003254:	2300      	movs	r3, #0
 8003256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003258:	f002 0203 	and.w	r2, r2, #3
 800325c:	0092      	lsls	r2, r2, #2
 800325e:	4093      	lsls	r3, r2
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4313      	orrs	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003266:	492f      	ldr	r1, [pc, #188]	; (8003324 <HAL_GPIO_Init+0x2bc>)
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	089b      	lsrs	r3, r3, #2
 800326c:	3302      	adds	r3, #2
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d006      	beq.n	800328e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003280:	4b2d      	ldr	r3, [pc, #180]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	492c      	ldr	r1, [pc, #176]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	4313      	orrs	r3, r2
 800328a:	600b      	str	r3, [r1, #0]
 800328c:	e006      	b.n	800329c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800328e:	4b2a      	ldr	r3, [pc, #168]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	43db      	mvns	r3, r3
 8003296:	4928      	ldr	r1, [pc, #160]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 8003298:	4013      	ands	r3, r2
 800329a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d006      	beq.n	80032b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032a8:	4b23      	ldr	r3, [pc, #140]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	4922      	ldr	r1, [pc, #136]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]
 80032b4:	e006      	b.n	80032c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032b6:	4b20      	ldr	r3, [pc, #128]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	43db      	mvns	r3, r3
 80032be:	491e      	ldr	r1, [pc, #120]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d006      	beq.n	80032de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032d0:	4b19      	ldr	r3, [pc, #100]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	4918      	ldr	r1, [pc, #96]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	4313      	orrs	r3, r2
 80032da:	608b      	str	r3, [r1, #8]
 80032dc:	e006      	b.n	80032ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032de:	4b16      	ldr	r3, [pc, #88]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	4914      	ldr	r1, [pc, #80]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d021      	beq.n	800333c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032f8:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	490e      	ldr	r1, [pc, #56]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	4313      	orrs	r3, r2
 8003302:	60cb      	str	r3, [r1, #12]
 8003304:	e021      	b.n	800334a <HAL_GPIO_Init+0x2e2>
 8003306:	bf00      	nop
 8003308:	10320000 	.word	0x10320000
 800330c:	10310000 	.word	0x10310000
 8003310:	10220000 	.word	0x10220000
 8003314:	10210000 	.word	0x10210000
 8003318:	10120000 	.word	0x10120000
 800331c:	10110000 	.word	0x10110000
 8003320:	40021000 	.word	0x40021000
 8003324:	40010000 	.word	0x40010000
 8003328:	40010800 	.word	0x40010800
 800332c:	40010c00 	.word	0x40010c00
 8003330:	40011000 	.word	0x40011000
 8003334:	40011400 	.word	0x40011400
 8003338:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800333c:	4b0b      	ldr	r3, [pc, #44]	; (800336c <HAL_GPIO_Init+0x304>)
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	43db      	mvns	r3, r3
 8003344:	4909      	ldr	r1, [pc, #36]	; (800336c <HAL_GPIO_Init+0x304>)
 8003346:	4013      	ands	r3, r2
 8003348:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	3301      	adds	r3, #1
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	fa22 f303 	lsr.w	r3, r2, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	f47f ae8e 	bne.w	800307c <HAL_GPIO_Init+0x14>
  }
}
 8003360:	bf00      	nop
 8003362:	bf00      	nop
 8003364:	372c      	adds	r7, #44	; 0x2c
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr
 800336c:	40010400 	.word	0x40010400

08003370 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	887b      	ldrh	r3, [r7, #2]
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003388:	2301      	movs	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
 800338c:	e001      	b.n	8003392 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800338e:	2300      	movs	r3, #0
 8003390:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003392:	7bfb      	ldrb	r3, [r7, #15]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr

0800339e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	460b      	mov	r3, r1
 80033a8:	807b      	strh	r3, [r7, #2]
 80033aa:	4613      	mov	r3, r2
 80033ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033ae:	787b      	ldrb	r3, [r7, #1]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033b4:	887a      	ldrh	r2, [r7, #2]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033ba:	e003      	b.n	80033c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033bc:	887b      	ldrh	r3, [r7, #2]
 80033be:	041a      	lsls	r2, r3, #16
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	611a      	str	r2, [r3, #16]
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr

080033ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033d0:	b08b      	sub	sp, #44	; 0x2c
 80033d2:	af06      	add	r7, sp, #24
 80033d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0fd      	b.n	80035dc <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d106      	bne.n	80033fa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f006 fed9 	bl	800a1ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2203      	movs	r2, #3
 80033fe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f003 f8dc 	bl	80065c4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	603b      	str	r3, [r7, #0]
 8003412:	687e      	ldr	r6, [r7, #4]
 8003414:	466d      	mov	r5, sp
 8003416:	f106 0410 	add.w	r4, r6, #16
 800341a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800341c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800341e:	6823      	ldr	r3, [r4, #0]
 8003420:	602b      	str	r3, [r5, #0]
 8003422:	1d33      	adds	r3, r6, #4
 8003424:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003426:	6838      	ldr	r0, [r7, #0]
 8003428:	f003 f8a6 	bl	8006578 <USB_CoreInit>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d005      	beq.n	800343e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2202      	movs	r2, #2
 8003436:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e0ce      	b.n	80035dc <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2100      	movs	r1, #0
 8003444:	4618      	mov	r0, r3
 8003446:	f003 f8d7 	bl	80065f8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800344a:	2300      	movs	r3, #0
 800344c:	73fb      	strb	r3, [r7, #15]
 800344e:	e04c      	b.n	80034ea <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	440b      	add	r3, r1
 8003460:	3301      	adds	r3, #1
 8003462:	2201      	movs	r2, #1
 8003464:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	4613      	mov	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	440b      	add	r3, r1
 8003476:	7bfa      	ldrb	r2, [r7, #15]
 8003478:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800347a:	7bfa      	ldrb	r2, [r7, #15]
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	b298      	uxth	r0, r3
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	440b      	add	r3, r1
 800348c:	3336      	adds	r3, #54	; 0x36
 800348e:	4602      	mov	r2, r0
 8003490:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003492:	7bfb      	ldrb	r3, [r7, #15]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	440b      	add	r3, r1
 80034a2:	3303      	adds	r3, #3
 80034a4:	2200      	movs	r2, #0
 80034a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034a8:	7bfa      	ldrb	r2, [r7, #15]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	440b      	add	r3, r1
 80034b6:	3338      	adds	r3, #56	; 0x38
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034bc:	7bfa      	ldrb	r2, [r7, #15]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	440b      	add	r3, r1
 80034ca:	333c      	adds	r3, #60	; 0x3c
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034d0:	7bfa      	ldrb	r2, [r7, #15]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	440b      	add	r3, r1
 80034de:	3340      	adds	r3, #64	; 0x40
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	3301      	adds	r3, #1
 80034e8:	73fb      	strb	r3, [r7, #15]
 80034ea:	7bfa      	ldrb	r2, [r7, #15]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d3ad      	bcc.n	8003450 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034f4:	2300      	movs	r3, #0
 80034f6:	73fb      	strb	r3, [r7, #15]
 80034f8:	e044      	b.n	8003584 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034fa:	7bfa      	ldrb	r2, [r7, #15]
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	440b      	add	r3, r1
 8003508:	f203 1369 	addw	r3, r3, #361	; 0x169
 800350c:	2200      	movs	r2, #0
 800350e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003510:	7bfa      	ldrb	r2, [r7, #15]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	440b      	add	r3, r1
 800351e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003522:	7bfa      	ldrb	r2, [r7, #15]
 8003524:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003526:	7bfa      	ldrb	r2, [r7, #15]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	440b      	add	r3, r1
 8003534:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003538:	2200      	movs	r2, #0
 800353a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800353c:	7bfa      	ldrb	r2, [r7, #15]
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	440b      	add	r3, r1
 800354a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003552:	7bfa      	ldrb	r2, [r7, #15]
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	440b      	add	r3, r1
 8003560:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003568:	7bfa      	ldrb	r2, [r7, #15]
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	4613      	mov	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	440b      	add	r3, r1
 8003576:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	3301      	adds	r3, #1
 8003582:	73fb      	strb	r3, [r7, #15]
 8003584:	7bfa      	ldrb	r2, [r7, #15]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	429a      	cmp	r2, r3
 800358c:	d3b5      	bcc.n	80034fa <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	687e      	ldr	r6, [r7, #4]
 8003596:	466d      	mov	r5, sp
 8003598:	f106 0410 	add.w	r4, r6, #16
 800359c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800359e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035a0:	6823      	ldr	r3, [r4, #0]
 80035a2:	602b      	str	r3, [r5, #0]
 80035a4:	1d33      	adds	r3, r6, #4
 80035a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035a8:	6838      	ldr	r0, [r7, #0]
 80035aa:	f003 f831 	bl	8006610 <USB_DevInit>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d005      	beq.n	80035c0 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e00d      	b.n	80035dc <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f004 ffcb 	bl	8008570 <USB_DevDisconnect>

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_PCD_Start+0x16>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e016      	b.n	8003628 <HAL_PCD_Start+0x44>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f002 ffc6 	bl	8006598 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800360c:	2101      	movs	r1, #1
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f007 f83f 	bl	800a692 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f004 ff9f 	bl	800855c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b088      	sub	sp, #32
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f004 ffa1 	bl	8008584 <USB_ReadInterrupts>
 8003642:	4603      	mov	r3, r0
 8003644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800364c:	d102      	bne.n	8003654 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fb61 	bl	8003d16 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f004 ff93 	bl	8008584 <USB_ReadInterrupts>
 800365e:	4603      	mov	r3, r0
 8003660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003668:	d112      	bne.n	8003690 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003672:	b29a      	uxth	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800367c:	b292      	uxth	r2, r2
 800367e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f006 fe0d 	bl	800a2a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003688:	2100      	movs	r1, #0
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f925 	bl	80038da <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f004 ff75 	bl	8008584 <USB_ReadInterrupts>
 800369a:	4603      	mov	r3, r0
 800369c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036a4:	d10b      	bne.n	80036be <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036b8:	b292      	uxth	r2, r2
 80036ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f004 ff5e 	bl	8008584 <USB_ReadInterrupts>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036d2:	d10b      	bne.n	80036ec <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036dc:	b29a      	uxth	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036e6:	b292      	uxth	r2, r2
 80036e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f004 ff47 	bl	8008584 <USB_ReadInterrupts>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003700:	d126      	bne.n	8003750 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800370a:	b29a      	uxth	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0204 	bic.w	r2, r2, #4
 8003714:	b292      	uxth	r2, r2
 8003716:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003722:	b29a      	uxth	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0208 	bic.w	r2, r2, #8
 800372c:	b292      	uxth	r2, r2
 800372e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f006 fdee 	bl	800a314 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003740:	b29a      	uxth	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800374a:	b292      	uxth	r2, r2
 800374c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f004 ff15 	bl	8008584 <USB_ReadInterrupts>
 800375a:	4603      	mov	r3, r0
 800375c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003760:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003764:	f040 8084 	bne.w	8003870 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003768:	2300      	movs	r3, #0
 800376a:	77fb      	strb	r3, [r7, #31]
 800376c:	e011      	b.n	8003792 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	461a      	mov	r2, r3
 8003774:	7ffb      	ldrb	r3, [r7, #31]
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	441a      	add	r2, r3
 800377a:	7ffb      	ldrb	r3, [r7, #31]
 800377c:	8812      	ldrh	r2, [r2, #0]
 800377e:	b292      	uxth	r2, r2
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	f107 0120 	add.w	r1, r7, #32
 8003786:	440b      	add	r3, r1
 8003788:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800378c:	7ffb      	ldrb	r3, [r7, #31]
 800378e:	3301      	adds	r3, #1
 8003790:	77fb      	strb	r3, [r7, #31]
 8003792:	7ffb      	ldrb	r3, [r7, #31]
 8003794:	2b07      	cmp	r3, #7
 8003796:	d9ea      	bls.n	800376e <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	b292      	uxth	r2, r2
 80037ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0201 	bic.w	r2, r2, #1
 80037c2:	b292      	uxth	r2, r2
 80037c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80037c8:	bf00      	nop
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0f6      	beq.n	80037ca <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ee:	b292      	uxth	r2, r2
 80037f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80037f4:	2300      	movs	r3, #0
 80037f6:	77fb      	strb	r3, [r7, #31]
 80037f8:	e010      	b.n	800381c <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80037fa:	7ffb      	ldrb	r3, [r7, #31]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6812      	ldr	r2, [r2, #0]
 8003800:	4611      	mov	r1, r2
 8003802:	7ffa      	ldrb	r2, [r7, #31]
 8003804:	0092      	lsls	r2, r2, #2
 8003806:	440a      	add	r2, r1
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	f107 0120 	add.w	r1, r7, #32
 800380e:	440b      	add	r3, r1
 8003810:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003814:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003816:	7ffb      	ldrb	r3, [r7, #31]
 8003818:	3301      	adds	r3, #1
 800381a:	77fb      	strb	r3, [r7, #31]
 800381c:	7ffb      	ldrb	r3, [r7, #31]
 800381e:	2b07      	cmp	r3, #7
 8003820:	d9eb      	bls.n	80037fa <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800382a:	b29a      	uxth	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 0208 	orr.w	r2, r2, #8
 8003834:	b292      	uxth	r2, r2
 8003836:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003842:	b29a      	uxth	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800384c:	b292      	uxth	r2, r2
 800384e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800385a:	b29a      	uxth	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f042 0204 	orr.w	r2, r2, #4
 8003864:	b292      	uxth	r2, r2
 8003866:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f006 fd38 	bl	800a2e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f004 fe85 	bl	8008584 <USB_ReadInterrupts>
 800387a:	4603      	mov	r3, r0
 800387c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003884:	d10e      	bne.n	80038a4 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800388e:	b29a      	uxth	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003898:	b292      	uxth	r2, r2
 800389a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f006 fcf1 	bl	800a286 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f004 fe6b 	bl	8008584 <USB_ReadInterrupts>
 80038ae:	4603      	mov	r3, r0
 80038b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038b8:	d10b      	bne.n	80038d2 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038cc:	b292      	uxth	r2, r2
 80038ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80038d2:	bf00      	nop
 80038d4:	3720      	adds	r7, #32
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
 80038e2:	460b      	mov	r3, r1
 80038e4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_PCD_SetAddress+0x1a>
 80038f0:	2302      	movs	r3, #2
 80038f2:	e013      	b.n	800391c <HAL_PCD_SetAddress+0x42>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	78fa      	ldrb	r2, [r7, #3]
 8003900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	78fa      	ldrb	r2, [r7, #3]
 800390a:	4611      	mov	r1, r2
 800390c:	4618      	mov	r0, r3
 800390e:	f004 fe12 	bl	8008536 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	4608      	mov	r0, r1
 800392e:	4611      	mov	r1, r2
 8003930:	461a      	mov	r2, r3
 8003932:	4603      	mov	r3, r0
 8003934:	70fb      	strb	r3, [r7, #3]
 8003936:	460b      	mov	r3, r1
 8003938:	803b      	strh	r3, [r7, #0]
 800393a:	4613      	mov	r3, r2
 800393c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800393e:	2300      	movs	r3, #0
 8003940:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003942:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003946:	2b00      	cmp	r3, #0
 8003948:	da0e      	bge.n	8003968 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800394a:	78fb      	ldrb	r3, [r7, #3]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	4413      	add	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2201      	movs	r2, #1
 8003964:	705a      	strb	r2, [r3, #1]
 8003966:	e00e      	b.n	8003986 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003968:	78fb      	ldrb	r3, [r7, #3]
 800396a:	f003 0207 	and.w	r2, r3, #7
 800396e:	4613      	mov	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	4413      	add	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003986:	78fb      	ldrb	r3, [r7, #3]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	b2da      	uxtb	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003992:	883a      	ldrh	r2, [r7, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	78ba      	ldrb	r2, [r7, #2]
 800399c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	785b      	ldrb	r3, [r3, #1]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d004      	beq.n	80039b0 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80039b0:	78bb      	ldrb	r3, [r7, #2]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d102      	bne.n	80039bc <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d101      	bne.n	80039ca <HAL_PCD_EP_Open+0xa6>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e00e      	b.n	80039e8 <HAL_PCD_EP_Open+0xc4>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68f9      	ldr	r1, [r7, #12]
 80039d8:	4618      	mov	r0, r3
 80039da:	f002 fe39 	bl	8006650 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80039e6:	7afb      	ldrb	r3, [r7, #11]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	460b      	mov	r3, r1
 80039fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	da0e      	bge.n	8003a22 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a04:	78fb      	ldrb	r3, [r7, #3]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	4413      	add	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	705a      	strb	r2, [r3, #1]
 8003a20:	e00e      	b.n	8003a40 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a22:	78fb      	ldrb	r3, [r7, #3]
 8003a24:	f003 0207 	and.w	r2, r3, #7
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	4413      	add	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d101      	bne.n	8003a5a <HAL_PCD_EP_Close+0x6a>
 8003a56:	2302      	movs	r3, #2
 8003a58:	e00e      	b.n	8003a78 <HAL_PCD_EP_Close+0x88>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68f9      	ldr	r1, [r7, #12]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f003 f95b 	bl	8006d24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a90:	7afb      	ldrb	r3, [r7, #11]
 8003a92:	f003 0207 	and.w	r2, r3, #7
 8003a96:	4613      	mov	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2200      	movs	r2, #0
 8003abe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ac0:	7afb      	ldrb	r3, [r7, #11]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003acc:	7afb      	ldrb	r3, [r7, #11]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d106      	bne.n	8003ae4 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6979      	ldr	r1, [r7, #20]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f003 fb0d 	bl	80070fc <USB_EPStartXfer>
 8003ae2:	e005      	b.n	8003af0 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6979      	ldr	r1, [r7, #20]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f003 fb06 	bl	80070fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	460b      	mov	r3, r1
 8003b04:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b06:	78fb      	ldrb	r3, [r7, #3]
 8003b08:	f003 0207 	and.w	r2, r3, #7
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	440b      	add	r3, r1
 8003b18:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003b1c:	681b      	ldr	r3, [r3, #0]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr

08003b28 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	607a      	str	r2, [r7, #4]
 8003b32:	603b      	str	r3, [r7, #0]
 8003b34:	460b      	mov	r3, r1
 8003b36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b38:	7afb      	ldrb	r3, [r7, #11]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	4613      	mov	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2201      	movs	r2, #1
 8003b72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b74:	7afb      	ldrb	r3, [r7, #11]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b80:	7afb      	ldrb	r3, [r7, #11]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6979      	ldr	r1, [r7, #20]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f003 fab3 	bl	80070fc <USB_EPStartXfer>
 8003b96:	e005      	b.n	8003ba4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6979      	ldr	r1, [r7, #20]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f003 faac 	bl	80070fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b084      	sub	sp, #16
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	f003 0207 	and.w	r2, r3, #7
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d901      	bls.n	8003bcc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e04c      	b.n	8003c66 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	da0e      	bge.n	8003bf2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	4613      	mov	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	4413      	add	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2201      	movs	r2, #1
 8003bee:	705a      	strb	r2, [r3, #1]
 8003bf0:	e00c      	b.n	8003c0c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003bf2:	78fa      	ldrb	r2, [r7, #3]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	4413      	add	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c12:	78fb      	ldrb	r3, [r7, #3]
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_PCD_EP_SetStall+0x7e>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e01c      	b.n	8003c66 <HAL_PCD_EP_SetStall+0xb8>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68f9      	ldr	r1, [r7, #12]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f004 fb7e 	bl	800833c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c40:	78fb      	ldrb	r3, [r7, #3]
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d108      	bne.n	8003c5c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003c54:	4619      	mov	r1, r3
 8003c56:	4610      	mov	r0, r2
 8003c58:	f004 fca3 	bl	80085a2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b084      	sub	sp, #16
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	460b      	mov	r3, r1
 8003c78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c7a:	78fb      	ldrb	r3, [r7, #3]
 8003c7c:	f003 020f 	and.w	r2, r3, #15
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d901      	bls.n	8003c8c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e040      	b.n	8003d0e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	da0e      	bge.n	8003cb2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	705a      	strb	r2, [r3, #1]
 8003cb0:	e00e      	b.n	8003cd0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cb2:	78fb      	ldrb	r3, [r7, #3]
 8003cb4:	f003 0207 	and.w	r2, r3, #7
 8003cb8:	4613      	mov	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cd6:	78fb      	ldrb	r3, [r7, #3]
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_PCD_EP_ClrStall+0x82>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e00e      	b.n	8003d0e <HAL_PCD_EP_ClrStall+0xa0>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68f9      	ldr	r1, [r7, #12]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f004 fb6c 	bl	80083dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b08e      	sub	sp, #56	; 0x38
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d1e:	e2df      	b.n	80042e0 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d28:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003d2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003d36:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f040 8158 	bne.w	8003ff0 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003d40:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d152      	bne.n	8003df0 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5a:	81fb      	strh	r3, [r7, #14]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	89fb      	ldrh	r3, [r7, #14]
 8003d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3328      	adds	r3, #40	; 0x28
 8003d72:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	461a      	mov	r2, r3
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	4413      	add	r3, r2
 8003d88:	3302      	adds	r3, #2
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	6812      	ldr	r2, [r2, #0]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	695a      	ldr	r2, [r3, #20]
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	441a      	add	r2, r3
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003dae:	2100      	movs	r1, #0
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f006 fa4e 	bl	800a252 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 828e 	beq.w	80042e0 <PCD_EP_ISR_Handler+0x5ca>
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f040 8289 	bne.w	80042e0 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	b292      	uxth	r2, r2
 8003de2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003dee:	e277      	b.n	80042e0 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003e00:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003e02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d034      	beq.n	8003e74 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	461a      	mov	r2, r3
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	4413      	add	r3, r2
 8003e1e:	3306      	adds	r3, #6
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6812      	ldr	r2, [r2, #0]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6818      	ldr	r0, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	f004 fbfa 	bl	8008642 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	823b      	strh	r3, [r7, #16]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	8a3a      	ldrh	r2, [r7, #16]
 8003e64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e68:	b292      	uxth	r2, r2
 8003e6a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f006 f9c3 	bl	800a1f8 <HAL_PCD_SetupStageCallback>
 8003e72:	e235      	b.n	80042e0 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e74:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f280 8231 	bge.w	80042e0 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	83bb      	strh	r3, [r7, #28]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	8bba      	ldrh	r2, [r7, #28]
 8003e94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e98:	b292      	uxth	r2, r2
 8003e9a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	4413      	add	r3, r2
 8003eb0:	3306      	adds	r3, #6
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6812      	ldr	r2, [r2, #0]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d019      	beq.n	8003f04 <PCD_EP_ISR_Handler+0x1ee>
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d015      	beq.n	8003f04 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6818      	ldr	r0, [r3, #0]
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	6959      	ldr	r1, [r3, #20]
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	f004 fbaa 	bl	8008642 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	695a      	ldr	r2, [r3, #20]
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	441a      	add	r2, r3
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003efc:	2100      	movs	r1, #0
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f006 f98c 	bl	800a21c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	61bb      	str	r3, [r7, #24]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	461a      	mov	r2, r3
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	4413      	add	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d112      	bne.n	8003f52 <PCD_EP_ISR_Handler+0x23c>
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	801a      	strh	r2, [r3, #0]
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	801a      	strh	r2, [r3, #0]
 8003f50:	e02f      	b.n	8003fb2 <PCD_EP_ISR_Handler+0x29c>
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	2b3e      	cmp	r3, #62	; 0x3e
 8003f58:	d813      	bhi.n	8003f82 <PCD_EP_ISR_Handler+0x26c>
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	085b      	lsrs	r3, r3, #1
 8003f60:	633b      	str	r3, [r7, #48]	; 0x30
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <PCD_EP_ISR_Handler+0x25e>
 8003f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f70:	3301      	adds	r3, #1
 8003f72:	633b      	str	r3, [r7, #48]	; 0x30
 8003f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	029b      	lsls	r3, r3, #10
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	801a      	strh	r2, [r3, #0]
 8003f80:	e017      	b.n	8003fb2 <PCD_EP_ISR_Handler+0x29c>
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	095b      	lsrs	r3, r3, #5
 8003f88:	633b      	str	r3, [r7, #48]	; 0x30
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	f003 031f 	and.w	r3, r3, #31
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d102      	bne.n	8003f9c <PCD_EP_ISR_Handler+0x286>
 8003f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	633b      	str	r3, [r7, #48]	; 0x30
 8003f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	029b      	lsls	r3, r3, #10
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc2:	827b      	strh	r3, [r7, #18]
 8003fc4:	8a7b      	ldrh	r3, [r7, #18]
 8003fc6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003fca:	827b      	strh	r3, [r7, #18]
 8003fcc:	8a7b      	ldrh	r3, [r7, #18]
 8003fce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003fd2:	827b      	strh	r3, [r7, #18]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	8a7b      	ldrh	r3, [r7, #18]
 8003fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	8013      	strh	r3, [r2, #0]
 8003fee:	e177      	b.n	80042e0 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004002:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004006:	2b00      	cmp	r3, #0
 8004008:	f280 80ea 	bge.w	80041e0 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	461a      	mov	r2, r3
 8004012:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	b29a      	uxth	r2, r3
 800401e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004022:	4013      	ands	r3, r2
 8004024:	853b      	strh	r3, [r7, #40]	; 0x28
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004036:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800403a:	b292      	uxth	r2, r2
 800403c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800403e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004042:	4613      	mov	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	4413      	add	r3, r2
 8004052:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	7b1b      	ldrb	r3, [r3, #12]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d122      	bne.n	80040a2 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004064:	b29b      	uxth	r3, r3
 8004066:	461a      	mov	r2, r3
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	4413      	add	r3, r2
 8004070:	3306      	adds	r3, #6
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6812      	ldr	r2, [r2, #0]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800407e:	881b      	ldrh	r3, [r3, #0]
 8004080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004084:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004086:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 8087 	beq.w	800419c <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	6959      	ldr	r1, [r3, #20]
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	88da      	ldrh	r2, [r3, #6]
 800409a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800409c:	f004 fad1 	bl	8008642 <USB_ReadPMA>
 80040a0:	e07c      	b.n	800419c <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	78db      	ldrb	r3, [r3, #3]
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d108      	bne.n	80040bc <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80040aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80040ac:	461a      	mov	r2, r3
 80040ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f923 	bl	80042fc <HAL_PCD_EP_DB_Receive>
 80040b6:	4603      	mov	r3, r0
 80040b8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80040ba:	e06f      	b.n	800419c <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	461a      	mov	r2, r3
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d6:	847b      	strh	r3, [r7, #34]	; 0x22
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	461a      	mov	r2, r3
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	441a      	add	r2, r3
 80040e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80040e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	461a      	mov	r2, r3
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	b29b      	uxth	r3, r3
 800410e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d021      	beq.n	800415a <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800411e:	b29b      	uxth	r3, r3
 8004120:	461a      	mov	r2, r3
 8004122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	4413      	add	r3, r2
 800412a:	3302      	adds	r3, #2
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	6812      	ldr	r2, [r2, #0]
 8004132:	4413      	add	r3, r2
 8004134:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800413e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004140:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004142:	2b00      	cmp	r3, #0
 8004144:	d02a      	beq.n	800419c <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6818      	ldr	r0, [r3, #0]
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	6959      	ldr	r1, [r3, #20]
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	891a      	ldrh	r2, [r3, #8]
 8004152:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004154:	f004 fa75 	bl	8008642 <USB_ReadPMA>
 8004158:	e020      	b.n	800419c <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004162:	b29b      	uxth	r3, r3
 8004164:	461a      	mov	r2, r3
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	4413      	add	r3, r2
 800416e:	3306      	adds	r3, #6
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6812      	ldr	r2, [r2, #0]
 8004176:	4413      	add	r3, r2
 8004178:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004182:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004184:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004186:	2b00      	cmp	r3, #0
 8004188:	d008      	beq.n	800419c <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6818      	ldr	r0, [r3, #0]
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	6959      	ldr	r1, [r3, #20]
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	895a      	ldrh	r2, [r3, #10]
 8004196:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004198:	f004 fa53 	bl	8008642 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	69da      	ldr	r2, [r3, #28]
 80041a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041a2:	441a      	add	r2, r3
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	695a      	ldr	r2, [r3, #20]
 80041ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041ae:	441a      	add	r2, r3
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d004      	beq.n	80041c6 <PCD_EP_ISR_Handler+0x4b0>
 80041bc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d206      	bcs.n	80041d4 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	4619      	mov	r1, r3
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f006 f825 	bl	800a21c <HAL_PCD_DataOutStageCallback>
 80041d2:	e005      	b.n	80041e0 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041da:	4618      	mov	r0, r3
 80041dc:	f002 ff8e 	bl	80070fc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80041e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80041e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d07a      	beq.n	80042e0 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80041ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	4613      	mov	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	4413      	add	r3, r2
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	b29b      	uxth	r3, r3
 8004210:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004218:	843b      	strh	r3, [r7, #32]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	441a      	add	r2, r3
 8004228:	8c3b      	ldrh	r3, [r7, #32]
 800422a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800422e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004232:	b29b      	uxth	r3, r3
 8004234:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	78db      	ldrb	r3, [r3, #3]
 800423a:	2b02      	cmp	r3, #2
 800423c:	d108      	bne.n	8004250 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8004242:	2b02      	cmp	r3, #2
 8004244:	d146      	bne.n	80042d4 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004246:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424c:	2b00      	cmp	r3, #0
 800424e:	d141      	bne.n	80042d4 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004258:	b29b      	uxth	r3, r3
 800425a:	461a      	mov	r2, r3
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	4413      	add	r3, r2
 8004264:	3302      	adds	r3, #2
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6812      	ldr	r2, [r2, #0]
 800426c:	4413      	add	r3, r2
 800426e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004278:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	699a      	ldr	r2, [r3, #24]
 800427e:	8bfb      	ldrh	r3, [r7, #30]
 8004280:	429a      	cmp	r2, r3
 8004282:	d906      	bls.n	8004292 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	699a      	ldr	r2, [r3, #24]
 8004288:	8bfb      	ldrh	r3, [r7, #30]
 800428a:	1ad2      	subs	r2, r2, r3
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	619a      	str	r2, [r3, #24]
 8004290:	e002      	b.n	8004298 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	2200      	movs	r2, #0
 8004296:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d106      	bne.n	80042ae <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	4619      	mov	r1, r3
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f005 ffd3 	bl	800a252 <HAL_PCD_DataInStageCallback>
 80042ac:	e018      	b.n	80042e0 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	695a      	ldr	r2, [r3, #20]
 80042b2:	8bfb      	ldrh	r3, [r7, #30]
 80042b4:	441a      	add	r2, r3
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	69da      	ldr	r2, [r3, #28]
 80042be:	8bfb      	ldrh	r3, [r7, #30]
 80042c0:	441a      	add	r2, r3
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042cc:	4618      	mov	r0, r3
 80042ce:	f002 ff15 	bl	80070fc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80042d2:	e005      	b.n	80042e0 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80042d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80042d6:	461a      	mov	r2, r3
 80042d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f91b 	bl	8004516 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	b21b      	sxth	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f6ff ad17 	blt.w	8003d20 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3738      	adds	r7, #56	; 0x38
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b088      	sub	sp, #32
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	4613      	mov	r3, r2
 8004308:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800430a:	88fb      	ldrh	r3, [r7, #6]
 800430c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d07e      	beq.n	8004412 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800431c:	b29b      	uxth	r3, r3
 800431e:	461a      	mov	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	4413      	add	r3, r2
 8004328:	3302      	adds	r3, #2
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	6812      	ldr	r2, [r2, #0]
 8004330:	4413      	add	r3, r2
 8004332:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800433c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	699a      	ldr	r2, [r3, #24]
 8004342:	8b7b      	ldrh	r3, [r7, #26]
 8004344:	429a      	cmp	r2, r3
 8004346:	d306      	bcc.n	8004356 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	699a      	ldr	r2, [r3, #24]
 800434c:	8b7b      	ldrh	r3, [r7, #26]
 800434e:	1ad2      	subs	r2, r2, r3
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	619a      	str	r2, [r3, #24]
 8004354:	e002      	b.n	800435c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	2200      	movs	r2, #0
 800435a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d123      	bne.n	80043ac <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	461a      	mov	r2, r3
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	b29b      	uxth	r3, r3
 8004376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800437a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437e:	833b      	strh	r3, [r7, #24]
 8004380:	8b3b      	ldrh	r3, [r7, #24]
 8004382:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004386:	833b      	strh	r3, [r7, #24]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	461a      	mov	r2, r3
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	441a      	add	r2, r3
 8004396:	8b3b      	ldrh	r3, [r7, #24]
 8004398:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800439c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80043ac:	88fb      	ldrh	r3, [r7, #6]
 80043ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d01f      	beq.n	80043f6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d0:	82fb      	strh	r3, [r7, #22]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	461a      	mov	r2, r3
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	441a      	add	r2, r3
 80043e0:	8afb      	ldrh	r3, [r7, #22]
 80043e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80043f6:	8b7b      	ldrh	r3, [r7, #26]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 8087 	beq.w	800450c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6818      	ldr	r0, [r3, #0]
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	6959      	ldr	r1, [r3, #20]
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	891a      	ldrh	r2, [r3, #8]
 800440a:	8b7b      	ldrh	r3, [r7, #26]
 800440c:	f004 f919 	bl	8008642 <USB_ReadPMA>
 8004410:	e07c      	b.n	800450c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800441a:	b29b      	uxth	r3, r3
 800441c:	461a      	mov	r2, r3
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	4413      	add	r3, r2
 8004426:	3306      	adds	r3, #6
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	6812      	ldr	r2, [r2, #0]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800443a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	699a      	ldr	r2, [r3, #24]
 8004440:	8b7b      	ldrh	r3, [r7, #26]
 8004442:	429a      	cmp	r2, r3
 8004444:	d306      	bcc.n	8004454 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	699a      	ldr	r2, [r3, #24]
 800444a:	8b7b      	ldrh	r3, [r7, #26]
 800444c:	1ad2      	subs	r2, r2, r3
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	619a      	str	r2, [r3, #24]
 8004452:	e002      	b.n	800445a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2200      	movs	r2, #0
 8004458:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d123      	bne.n	80044aa <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	461a      	mov	r2, r3
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	b29b      	uxth	r3, r3
 8004474:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447c:	83fb      	strh	r3, [r7, #30]
 800447e:	8bfb      	ldrh	r3, [r7, #30]
 8004480:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004484:	83fb      	strh	r3, [r7, #30]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	441a      	add	r2, r3
 8004494:	8bfb      	ldrh	r3, [r7, #30]
 8004496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800449a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800449e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80044aa:	88fb      	ldrh	r3, [r7, #6]
 80044ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d11f      	bne.n	80044f4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	461a      	mov	r2, r3
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	881b      	ldrh	r3, [r3, #0]
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ce:	83bb      	strh	r3, [r7, #28]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	461a      	mov	r2, r3
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	441a      	add	r2, r3
 80044de:	8bbb      	ldrh	r3, [r7, #28]
 80044e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80044f4:	8b7b      	ldrh	r3, [r7, #26]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d008      	beq.n	800450c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6818      	ldr	r0, [r3, #0]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	6959      	ldr	r1, [r3, #20]
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	895a      	ldrh	r2, [r3, #10]
 8004506:	8b7b      	ldrh	r3, [r7, #26]
 8004508:	f004 f89b 	bl	8008642 <USB_ReadPMA>
    }
  }

  return count;
 800450c:	8b7b      	ldrh	r3, [r7, #26]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3720      	adds	r7, #32
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b094      	sub	sp, #80	; 0x50
 800451a:	af00      	add	r7, sp, #0
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	4613      	mov	r3, r2
 8004522:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004524:	88fb      	ldrh	r3, [r7, #6]
 8004526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 8138 	beq.w	80047a0 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004538:	b29b      	uxth	r3, r3
 800453a:	461a      	mov	r2, r3
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	4413      	add	r3, r2
 8004544:	3302      	adds	r3, #2
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	6812      	ldr	r2, [r2, #0]
 800454c:	4413      	add	r3, r2
 800454e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004558:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	699a      	ldr	r2, [r3, #24]
 8004560:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004564:	429a      	cmp	r2, r3
 8004566:	d907      	bls.n	8004578 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	699a      	ldr	r2, [r3, #24]
 800456c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004570:	1ad2      	subs	r2, r2, r3
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	619a      	str	r2, [r3, #24]
 8004576:	e002      	b.n	800457e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2200      	movs	r2, #0
 800457c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d12c      	bne.n	80045e0 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	4619      	mov	r1, r3
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f005 fe60 	bl	800a252 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004592:	88fb      	ldrh	r3, [r7, #6]
 8004594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 823a 	beq.w	8004a12 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b8:	82fb      	strh	r3, [r7, #22]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	441a      	add	r2, r3
 80045c8:	8afb      	ldrh	r3, [r7, #22]
 80045ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045da:	b29b      	uxth	r3, r3
 80045dc:	8013      	strh	r3, [r2, #0]
 80045de:	e218      	b.n	8004a12 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80045e0:	88fb      	ldrh	r3, [r7, #6]
 80045e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d01f      	beq.n	800462a <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	461a      	mov	r2, r3
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004604:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	461a      	mov	r2, r3
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	441a      	add	r2, r3
 8004614:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800461a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800461e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004626:	b29b      	uxth	r3, r3
 8004628:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004630:	2b01      	cmp	r3, #1
 8004632:	f040 81ee 	bne.w	8004a12 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	695a      	ldr	r2, [r3, #20]
 800463a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800463e:	441a      	add	r2, r3
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	69da      	ldr	r2, [r3, #28]
 8004648:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800464c:	441a      	add	r2, r3
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	6a1a      	ldr	r2, [r3, #32]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	429a      	cmp	r2, r3
 800465c:	d309      	bcc.n	8004672 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	6a1a      	ldr	r2, [r3, #32]
 8004668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800466a:	1ad2      	subs	r2, r2, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	621a      	str	r2, [r3, #32]
 8004670:	e015      	b.n	800469e <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d107      	bne.n	800468a <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 800467a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800467e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004688:	e009      	b.n	800469e <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2200      	movs	r2, #0
 800469c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	785b      	ldrb	r3, [r3, #1]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d155      	bne.n	8004752 <HAL_PCD_EP_DB_Transmit+0x23c>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	61fb      	str	r3, [r7, #28]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	461a      	mov	r2, r3
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	4413      	add	r3, r2
 80046bc:	61fb      	str	r3, [r7, #28]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	011a      	lsls	r2, r3, #4
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	4413      	add	r3, r2
 80046c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046cc:	61bb      	str	r3, [r7, #24]
 80046ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d112      	bne.n	80046fa <HAL_PCD_EP_DB_Transmit+0x1e4>
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	b29b      	uxth	r3, r3
 80046da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046de:	b29a      	uxth	r2, r3
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	801a      	strh	r2, [r3, #0]
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	801a      	strh	r2, [r3, #0]
 80046f8:	e047      	b.n	800478a <HAL_PCD_EP_DB_Transmit+0x274>
 80046fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046fc:	2b3e      	cmp	r3, #62	; 0x3e
 80046fe:	d811      	bhi.n	8004724 <HAL_PCD_EP_DB_Transmit+0x20e>
 8004700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004702:	085b      	lsrs	r3, r3, #1
 8004704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <HAL_PCD_EP_DB_Transmit+0x200>
 8004710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004712:	3301      	adds	r3, #1
 8004714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004718:	b29b      	uxth	r3, r3
 800471a:	029b      	lsls	r3, r3, #10
 800471c:	b29a      	uxth	r2, r3
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	801a      	strh	r2, [r3, #0]
 8004722:	e032      	b.n	800478a <HAL_PCD_EP_DB_Transmit+0x274>
 8004724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800472a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800472c:	f003 031f 	and.w	r3, r3, #31
 8004730:	2b00      	cmp	r3, #0
 8004732:	d102      	bne.n	800473a <HAL_PCD_EP_DB_Transmit+0x224>
 8004734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004736:	3b01      	subs	r3, #1
 8004738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800473a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473c:	b29b      	uxth	r3, r3
 800473e:	029b      	lsls	r3, r3, #10
 8004740:	b29b      	uxth	r3, r3
 8004742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800474a:	b29a      	uxth	r2, r3
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	801a      	strh	r2, [r3, #0]
 8004750:	e01b      	b.n	800478a <HAL_PCD_EP_DB_Transmit+0x274>
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	785b      	ldrb	r3, [r3, #1]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d117      	bne.n	800478a <HAL_PCD_EP_DB_Transmit+0x274>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	627b      	str	r3, [r7, #36]	; 0x24
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004768:	b29b      	uxth	r3, r3
 800476a:	461a      	mov	r2, r3
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	4413      	add	r3, r2
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	011a      	lsls	r2, r3, #4
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	4413      	add	r3, r2
 800477c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004780:	623b      	str	r3, [r7, #32]
 8004782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004784:	b29a      	uxth	r2, r3
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6818      	ldr	r0, [r3, #0]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	6959      	ldr	r1, [r3, #20]
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	891a      	ldrh	r2, [r3, #8]
 8004796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004798:	b29b      	uxth	r3, r3
 800479a:	f003 ff0d 	bl	80085b8 <USB_WritePMA>
 800479e:	e138      	b.n	8004a12 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	461a      	mov	r2, r3
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	4413      	add	r3, r2
 80047b4:	3306      	adds	r3, #6
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	6812      	ldr	r2, [r2, #0]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047c8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	699a      	ldr	r2, [r3, #24]
 80047d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d307      	bcc.n	80047e8 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	699a      	ldr	r2, [r3, #24]
 80047dc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80047e0:	1ad2      	subs	r2, r2, r3
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	619a      	str	r2, [r3, #24]
 80047e6:	e002      	b.n	80047ee <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2200      	movs	r2, #0
 80047ec:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d12e      	bne.n	8004854 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	4619      	mov	r1, r3
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f005 fd28 	bl	800a252 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004802:	88fb      	ldrh	r3, [r7, #6]
 8004804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004808:	2b00      	cmp	r3, #0
 800480a:	f040 8102 	bne.w	8004a12 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	461a      	mov	r2, r3
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	b29b      	uxth	r3, r3
 8004820:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004828:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	461a      	mov	r2, r3
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	441a      	add	r2, r3
 800483a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800483e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004846:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800484a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800484e:	b29b      	uxth	r3, r3
 8004850:	8013      	strh	r3, [r2, #0]
 8004852:	e0de      	b.n	8004a12 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004854:	88fb      	ldrh	r3, [r7, #6]
 8004856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d11f      	bne.n	800489e <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	461a      	mov	r2, r3
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	b29b      	uxth	r3, r3
 8004870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004878:	867b      	strh	r3, [r7, #50]	; 0x32
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	441a      	add	r2, r3
 8004888:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800488a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800488e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004892:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800489a:	b29b      	uxth	r3, r3
 800489c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	f040 80b4 	bne.w	8004a12 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	695a      	ldr	r2, [r3, #20]
 80048ae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80048b2:	441a      	add	r2, r3
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	69da      	ldr	r2, [r3, #28]
 80048bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80048c0:	441a      	add	r2, r3
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	6a1a      	ldr	r2, [r3, #32]
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d309      	bcc.n	80048e6 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	6a1a      	ldr	r2, [r3, #32]
 80048dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048de:	1ad2      	subs	r2, r2, r3
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	621a      	str	r2, [r3, #32]
 80048e4:	e015      	b.n	8004912 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d107      	bne.n	80048fe <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 80048ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80048f2:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80048fc:	e009      	b.n	8004912 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2200      	movs	r2, #0
 8004908:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	643b      	str	r3, [r7, #64]	; 0x40
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	785b      	ldrb	r3, [r3, #1]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d155      	bne.n	80049cc <HAL_PCD_EP_DB_Transmit+0x4b6>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	63bb      	str	r3, [r7, #56]	; 0x38
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800492e:	b29b      	uxth	r3, r3
 8004930:	461a      	mov	r2, r3
 8004932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004934:	4413      	add	r3, r2
 8004936:	63bb      	str	r3, [r7, #56]	; 0x38
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	011a      	lsls	r2, r3, #4
 800493e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004940:	4413      	add	r3, r2
 8004942:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004946:	637b      	str	r3, [r7, #52]	; 0x34
 8004948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800494a:	2b00      	cmp	r3, #0
 800494c:	d112      	bne.n	8004974 <HAL_PCD_EP_DB_Transmit+0x45e>
 800494e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	b29b      	uxth	r3, r3
 8004954:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004958:	b29a      	uxth	r2, r3
 800495a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800495c:	801a      	strh	r2, [r3, #0]
 800495e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	b29b      	uxth	r3, r3
 8004964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800496c:	b29a      	uxth	r2, r3
 800496e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004970:	801a      	strh	r2, [r3, #0]
 8004972:	e044      	b.n	80049fe <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004976:	2b3e      	cmp	r3, #62	; 0x3e
 8004978:	d811      	bhi.n	800499e <HAL_PCD_EP_DB_Transmit+0x488>
 800497a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800497c:	085b      	lsrs	r3, r3, #1
 800497e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <HAL_PCD_EP_DB_Transmit+0x47a>
 800498a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800498c:	3301      	adds	r3, #1
 800498e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004992:	b29b      	uxth	r3, r3
 8004994:	029b      	lsls	r3, r3, #10
 8004996:	b29a      	uxth	r2, r3
 8004998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800499a:	801a      	strh	r2, [r3, #0]
 800499c:	e02f      	b.n	80049fe <HAL_PCD_EP_DB_Transmit+0x4e8>
 800499e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049a0:	095b      	lsrs	r3, r3, #5
 80049a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049a6:	f003 031f 	and.w	r3, r3, #31
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d102      	bne.n	80049b4 <HAL_PCD_EP_DB_Transmit+0x49e>
 80049ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b0:	3b01      	subs	r3, #1
 80049b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	029b      	lsls	r3, r3, #10
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c8:	801a      	strh	r2, [r3, #0]
 80049ca:	e018      	b.n	80049fe <HAL_PCD_EP_DB_Transmit+0x4e8>
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	785b      	ldrb	r3, [r3, #1]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d114      	bne.n	80049fe <HAL_PCD_EP_DB_Transmit+0x4e8>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049dc:	b29b      	uxth	r3, r3
 80049de:	461a      	mov	r2, r3
 80049e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049e2:	4413      	add	r3, r2
 80049e4:	643b      	str	r3, [r7, #64]	; 0x40
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	011a      	lsls	r2, r3, #4
 80049ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ee:	4413      	add	r3, r2
 80049f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049fc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6818      	ldr	r0, [r3, #0]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	6959      	ldr	r1, [r3, #20]
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	895a      	ldrh	r2, [r3, #10]
 8004a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	f003 fdd3 	bl	80085b8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	461a      	mov	r2, r3
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4413      	add	r3, r2
 8004a20:	881b      	ldrh	r3, [r3, #0]
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a2c:	82bb      	strh	r3, [r7, #20]
 8004a2e:	8abb      	ldrh	r3, [r7, #20]
 8004a30:	f083 0310 	eor.w	r3, r3, #16
 8004a34:	82bb      	strh	r3, [r7, #20]
 8004a36:	8abb      	ldrh	r3, [r7, #20]
 8004a38:	f083 0320 	eor.w	r3, r3, #32
 8004a3c:	82bb      	strh	r3, [r7, #20]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	461a      	mov	r2, r3
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	441a      	add	r2, r3
 8004a4c:	8abb      	ldrh	r3, [r7, #20]
 8004a4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3750      	adds	r7, #80	; 0x50
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	607b      	str	r3, [r7, #4]
 8004a76:	460b      	mov	r3, r1
 8004a78:	817b      	strh	r3, [r7, #10]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004a7e:	897b      	ldrh	r3, [r7, #10]
 8004a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00b      	beq.n	8004aa2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a8a:	897b      	ldrh	r3, [r7, #10]
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	4613      	mov	r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]
 8004aa0:	e009      	b.n	8004ab6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004aa2:	897a      	ldrh	r2, [r7, #10]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004ab6:	893b      	ldrh	r3, [r7, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d107      	bne.n	8004acc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	80da      	strh	r2, [r3, #6]
 8004aca:	e00b      	b.n	8004ae4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	0c1b      	lsrs	r3, r3, #16
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	371c      	adds	r7, #28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bc80      	pop	{r7}
 8004aee:	4770      	bx	lr

08004af0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e26c      	b.n	8004fdc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 8087 	beq.w	8004c1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b10:	4b92      	ldr	r3, [pc, #584]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f003 030c 	and.w	r3, r3, #12
 8004b18:	2b04      	cmp	r3, #4
 8004b1a:	d00c      	beq.n	8004b36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b1c:	4b8f      	ldr	r3, [pc, #572]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f003 030c 	and.w	r3, r3, #12
 8004b24:	2b08      	cmp	r3, #8
 8004b26:	d112      	bne.n	8004b4e <HAL_RCC_OscConfig+0x5e>
 8004b28:	4b8c      	ldr	r3, [pc, #560]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b34:	d10b      	bne.n	8004b4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b36:	4b89      	ldr	r3, [pc, #548]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d06c      	beq.n	8004c1c <HAL_RCC_OscConfig+0x12c>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d168      	bne.n	8004c1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e246      	b.n	8004fdc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b56:	d106      	bne.n	8004b66 <HAL_RCC_OscConfig+0x76>
 8004b58:	4b80      	ldr	r3, [pc, #512]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a7f      	ldr	r2, [pc, #508]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b62:	6013      	str	r3, [r2, #0]
 8004b64:	e02e      	b.n	8004bc4 <HAL_RCC_OscConfig+0xd4>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10c      	bne.n	8004b88 <HAL_RCC_OscConfig+0x98>
 8004b6e:	4b7b      	ldr	r3, [pc, #492]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a7a      	ldr	r2, [pc, #488]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	4b78      	ldr	r3, [pc, #480]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a77      	ldr	r2, [pc, #476]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004b80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	e01d      	b.n	8004bc4 <HAL_RCC_OscConfig+0xd4>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b90:	d10c      	bne.n	8004bac <HAL_RCC_OscConfig+0xbc>
 8004b92:	4b72      	ldr	r3, [pc, #456]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a71      	ldr	r2, [pc, #452]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	4b6f      	ldr	r3, [pc, #444]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a6e      	ldr	r2, [pc, #440]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	e00b      	b.n	8004bc4 <HAL_RCC_OscConfig+0xd4>
 8004bac:	4b6b      	ldr	r3, [pc, #428]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a6a      	ldr	r2, [pc, #424]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	4b68      	ldr	r3, [pc, #416]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a67      	ldr	r2, [pc, #412]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d013      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bcc:	f7fd fa56 	bl	800207c <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bd4:	f7fd fa52 	bl	800207c <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b64      	cmp	r3, #100	; 0x64
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e1fa      	b.n	8004fdc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004be6:	4b5d      	ldr	r3, [pc, #372]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0f0      	beq.n	8004bd4 <HAL_RCC_OscConfig+0xe4>
 8004bf2:	e014      	b.n	8004c1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf4:	f7fd fa42 	bl	800207c <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bfc:	f7fd fa3e 	bl	800207c <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b64      	cmp	r3, #100	; 0x64
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e1e6      	b.n	8004fdc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c0e:	4b53      	ldr	r3, [pc, #332]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1f0      	bne.n	8004bfc <HAL_RCC_OscConfig+0x10c>
 8004c1a:	e000      	b.n	8004c1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d063      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c2a:	4b4c      	ldr	r3, [pc, #304]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f003 030c 	and.w	r3, r3, #12
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00b      	beq.n	8004c4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c36:	4b49      	ldr	r3, [pc, #292]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f003 030c 	and.w	r3, r3, #12
 8004c3e:	2b08      	cmp	r3, #8
 8004c40:	d11c      	bne.n	8004c7c <HAL_RCC_OscConfig+0x18c>
 8004c42:	4b46      	ldr	r3, [pc, #280]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d116      	bne.n	8004c7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c4e:	4b43      	ldr	r3, [pc, #268]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d005      	beq.n	8004c66 <HAL_RCC_OscConfig+0x176>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d001      	beq.n	8004c66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e1ba      	b.n	8004fdc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c66:	4b3d      	ldr	r3, [pc, #244]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	4939      	ldr	r1, [pc, #228]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c7a:	e03a      	b.n	8004cf2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d020      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c84:	4b36      	ldr	r3, [pc, #216]	; (8004d60 <HAL_RCC_OscConfig+0x270>)
 8004c86:	2201      	movs	r2, #1
 8004c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8a:	f7fd f9f7 	bl	800207c <HAL_GetTick>
 8004c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c90:	e008      	b.n	8004ca4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c92:	f7fd f9f3 	bl	800207c <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e19b      	b.n	8004fdc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ca4:	4b2d      	ldr	r3, [pc, #180]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0f0      	beq.n	8004c92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb0:	4b2a      	ldr	r3, [pc, #168]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	4927      	ldr	r1, [pc, #156]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	600b      	str	r3, [r1, #0]
 8004cc4:	e015      	b.n	8004cf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cc6:	4b26      	ldr	r3, [pc, #152]	; (8004d60 <HAL_RCC_OscConfig+0x270>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ccc:	f7fd f9d6 	bl	800207c <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cd4:	f7fd f9d2 	bl	800207c <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e17a      	b.n	8004fdc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ce6:	4b1d      	ldr	r3, [pc, #116]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1f0      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0308 	and.w	r3, r3, #8
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d03a      	beq.n	8004d74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d019      	beq.n	8004d3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d06:	4b17      	ldr	r3, [pc, #92]	; (8004d64 <HAL_RCC_OscConfig+0x274>)
 8004d08:	2201      	movs	r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d0c:	f7fd f9b6 	bl	800207c <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d14:	f7fd f9b2 	bl	800207c <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e15a      	b.n	8004fdc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d26:	4b0d      	ldr	r3, [pc, #52]	; (8004d5c <HAL_RCC_OscConfig+0x26c>)
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0f0      	beq.n	8004d14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d32:	2001      	movs	r0, #1
 8004d34:	f000 fac4 	bl	80052c0 <RCC_Delay>
 8004d38:	e01c      	b.n	8004d74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d3a:	4b0a      	ldr	r3, [pc, #40]	; (8004d64 <HAL_RCC_OscConfig+0x274>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d40:	f7fd f99c 	bl	800207c <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d46:	e00f      	b.n	8004d68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d48:	f7fd f998 	bl	800207c <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d908      	bls.n	8004d68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e140      	b.n	8004fdc <HAL_RCC_OscConfig+0x4ec>
 8004d5a:	bf00      	nop
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	42420000 	.word	0x42420000
 8004d64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d68:	4b9e      	ldr	r3, [pc, #632]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1e9      	bne.n	8004d48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 80a6 	beq.w	8004ece <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d82:	2300      	movs	r3, #0
 8004d84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d86:	4b97      	ldr	r3, [pc, #604]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10d      	bne.n	8004dae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d92:	4b94      	ldr	r3, [pc, #592]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	4a93      	ldr	r2, [pc, #588]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d9c:	61d3      	str	r3, [r2, #28]
 8004d9e:	4b91      	ldr	r3, [pc, #580]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da6:	60bb      	str	r3, [r7, #8]
 8004da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004daa:	2301      	movs	r3, #1
 8004dac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dae:	4b8e      	ldr	r3, [pc, #568]	; (8004fe8 <HAL_RCC_OscConfig+0x4f8>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d118      	bne.n	8004dec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dba:	4b8b      	ldr	r3, [pc, #556]	; (8004fe8 <HAL_RCC_OscConfig+0x4f8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a8a      	ldr	r2, [pc, #552]	; (8004fe8 <HAL_RCC_OscConfig+0x4f8>)
 8004dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dc6:	f7fd f959 	bl	800207c <HAL_GetTick>
 8004dca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dcc:	e008      	b.n	8004de0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dce:	f7fd f955 	bl	800207c <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b64      	cmp	r3, #100	; 0x64
 8004dda:	d901      	bls.n	8004de0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e0fd      	b.n	8004fdc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de0:	4b81      	ldr	r3, [pc, #516]	; (8004fe8 <HAL_RCC_OscConfig+0x4f8>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0f0      	beq.n	8004dce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d106      	bne.n	8004e02 <HAL_RCC_OscConfig+0x312>
 8004df4:	4b7b      	ldr	r3, [pc, #492]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	4a7a      	ldr	r2, [pc, #488]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004dfa:	f043 0301 	orr.w	r3, r3, #1
 8004dfe:	6213      	str	r3, [r2, #32]
 8004e00:	e02d      	b.n	8004e5e <HAL_RCC_OscConfig+0x36e>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10c      	bne.n	8004e24 <HAL_RCC_OscConfig+0x334>
 8004e0a:	4b76      	ldr	r3, [pc, #472]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	4a75      	ldr	r2, [pc, #468]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004e10:	f023 0301 	bic.w	r3, r3, #1
 8004e14:	6213      	str	r3, [r2, #32]
 8004e16:	4b73      	ldr	r3, [pc, #460]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	4a72      	ldr	r2, [pc, #456]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004e1c:	f023 0304 	bic.w	r3, r3, #4
 8004e20:	6213      	str	r3, [r2, #32]
 8004e22:	e01c      	b.n	8004e5e <HAL_RCC_OscConfig+0x36e>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	2b05      	cmp	r3, #5
 8004e2a:	d10c      	bne.n	8004e46 <HAL_RCC_OscConfig+0x356>
 8004e2c:	4b6d      	ldr	r3, [pc, #436]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	4a6c      	ldr	r2, [pc, #432]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004e32:	f043 0304 	orr.w	r3, r3, #4
 8004e36:	6213      	str	r3, [r2, #32]
 8004e38:	4b6a      	ldr	r3, [pc, #424]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	4a69      	ldr	r2, [pc, #420]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004e3e:	f043 0301 	orr.w	r3, r3, #1
 8004e42:	6213      	str	r3, [r2, #32]
 8004e44:	e00b      	b.n	8004e5e <HAL_RCC_OscConfig+0x36e>
 8004e46:	4b67      	ldr	r3, [pc, #412]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	4a66      	ldr	r2, [pc, #408]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004e4c:	f023 0301 	bic.w	r3, r3, #1
 8004e50:	6213      	str	r3, [r2, #32]
 8004e52:	4b64      	ldr	r3, [pc, #400]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	4a63      	ldr	r2, [pc, #396]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004e58:	f023 0304 	bic.w	r3, r3, #4
 8004e5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d015      	beq.n	8004e92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e66:	f7fd f909 	bl	800207c <HAL_GetTick>
 8004e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e6c:	e00a      	b.n	8004e84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e6e:	f7fd f905 	bl	800207c <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e0ab      	b.n	8004fdc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e84:	4b57      	ldr	r3, [pc, #348]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0ee      	beq.n	8004e6e <HAL_RCC_OscConfig+0x37e>
 8004e90:	e014      	b.n	8004ebc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e92:	f7fd f8f3 	bl	800207c <HAL_GetTick>
 8004e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e98:	e00a      	b.n	8004eb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e9a:	f7fd f8ef 	bl	800207c <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d901      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e095      	b.n	8004fdc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eb0:	4b4c      	ldr	r3, [pc, #304]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1ee      	bne.n	8004e9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ebc:	7dfb      	ldrb	r3, [r7, #23]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d105      	bne.n	8004ece <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ec2:	4b48      	ldr	r3, [pc, #288]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	4a47      	ldr	r2, [pc, #284]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ecc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 8081 	beq.w	8004fda <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ed8:	4b42      	ldr	r3, [pc, #264]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f003 030c 	and.w	r3, r3, #12
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d061      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	69db      	ldr	r3, [r3, #28]
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d146      	bne.n	8004f7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eec:	4b3f      	ldr	r3, [pc, #252]	; (8004fec <HAL_RCC_OscConfig+0x4fc>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef2:	f7fd f8c3 	bl	800207c <HAL_GetTick>
 8004ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ef8:	e008      	b.n	8004f0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004efa:	f7fd f8bf 	bl	800207c <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d901      	bls.n	8004f0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e067      	b.n	8004fdc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f0c:	4b35      	ldr	r3, [pc, #212]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1f0      	bne.n	8004efa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f20:	d108      	bne.n	8004f34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f22:	4b30      	ldr	r3, [pc, #192]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	492d      	ldr	r1, [pc, #180]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f34:	4b2b      	ldr	r3, [pc, #172]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a19      	ldr	r1, [r3, #32]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	430b      	orrs	r3, r1
 8004f46:	4927      	ldr	r1, [pc, #156]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f4c:	4b27      	ldr	r3, [pc, #156]	; (8004fec <HAL_RCC_OscConfig+0x4fc>)
 8004f4e:	2201      	movs	r2, #1
 8004f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f52:	f7fd f893 	bl	800207c <HAL_GetTick>
 8004f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f58:	e008      	b.n	8004f6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f5a:	f7fd f88f 	bl	800207c <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e037      	b.n	8004fdc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f6c:	4b1d      	ldr	r3, [pc, #116]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0f0      	beq.n	8004f5a <HAL_RCC_OscConfig+0x46a>
 8004f78:	e02f      	b.n	8004fda <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f7a:	4b1c      	ldr	r3, [pc, #112]	; (8004fec <HAL_RCC_OscConfig+0x4fc>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f80:	f7fd f87c 	bl	800207c <HAL_GetTick>
 8004f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f88:	f7fd f878 	bl	800207c <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e020      	b.n	8004fdc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f9a:	4b12      	ldr	r3, [pc, #72]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1f0      	bne.n	8004f88 <HAL_RCC_OscConfig+0x498>
 8004fa6:	e018      	b.n	8004fda <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d101      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e013      	b.n	8004fdc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004fb4:	4b0b      	ldr	r3, [pc, #44]	; (8004fe4 <HAL_RCC_OscConfig+0x4f4>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d106      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d001      	beq.n	8004fda <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3718      	adds	r7, #24
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	40021000 	.word	0x40021000
 8004fe8:	40007000 	.word	0x40007000
 8004fec:	42420060 	.word	0x42420060

08004ff0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e0d0      	b.n	80051a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005004:	4b6a      	ldr	r3, [pc, #424]	; (80051b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	429a      	cmp	r2, r3
 8005010:	d910      	bls.n	8005034 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005012:	4b67      	ldr	r3, [pc, #412]	; (80051b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f023 0207 	bic.w	r2, r3, #7
 800501a:	4965      	ldr	r1, [pc, #404]	; (80051b0 <HAL_RCC_ClockConfig+0x1c0>)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	4313      	orrs	r3, r2
 8005020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005022:	4b63      	ldr	r3, [pc, #396]	; (80051b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	429a      	cmp	r2, r3
 800502e:	d001      	beq.n	8005034 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e0b8      	b.n	80051a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d020      	beq.n	8005082 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b00      	cmp	r3, #0
 800504a:	d005      	beq.n	8005058 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800504c:	4b59      	ldr	r3, [pc, #356]	; (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	4a58      	ldr	r2, [pc, #352]	; (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005052:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005056:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b00      	cmp	r3, #0
 8005062:	d005      	beq.n	8005070 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005064:	4b53      	ldr	r3, [pc, #332]	; (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	4a52      	ldr	r2, [pc, #328]	; (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 800506a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800506e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005070:	4b50      	ldr	r3, [pc, #320]	; (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	494d      	ldr	r1, [pc, #308]	; (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 800507e:	4313      	orrs	r3, r2
 8005080:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d040      	beq.n	8005110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d107      	bne.n	80050a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005096:	4b47      	ldr	r3, [pc, #284]	; (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d115      	bne.n	80050ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e07f      	b.n	80051a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d107      	bne.n	80050be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ae:	4b41      	ldr	r3, [pc, #260]	; (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d109      	bne.n	80050ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e073      	b.n	80051a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050be:	4b3d      	ldr	r3, [pc, #244]	; (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e06b      	b.n	80051a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ce:	4b39      	ldr	r3, [pc, #228]	; (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f023 0203 	bic.w	r2, r3, #3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	4936      	ldr	r1, [pc, #216]	; (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050e0:	f7fc ffcc 	bl	800207c <HAL_GetTick>
 80050e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e6:	e00a      	b.n	80050fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e8:	f7fc ffc8 	bl	800207c <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e053      	b.n	80051a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fe:	4b2d      	ldr	r3, [pc, #180]	; (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f003 020c 	and.w	r2, r3, #12
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	429a      	cmp	r2, r3
 800510e:	d1eb      	bne.n	80050e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005110:	4b27      	ldr	r3, [pc, #156]	; (80051b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d210      	bcs.n	8005140 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511e:	4b24      	ldr	r3, [pc, #144]	; (80051b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f023 0207 	bic.w	r2, r3, #7
 8005126:	4922      	ldr	r1, [pc, #136]	; (80051b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	4313      	orrs	r3, r2
 800512c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800512e:	4b20      	ldr	r3, [pc, #128]	; (80051b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0307 	and.w	r3, r3, #7
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	429a      	cmp	r2, r3
 800513a:	d001      	beq.n	8005140 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e032      	b.n	80051a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b00      	cmp	r3, #0
 800514a:	d008      	beq.n	800515e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800514c:	4b19      	ldr	r3, [pc, #100]	; (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	4916      	ldr	r1, [pc, #88]	; (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 800515a:	4313      	orrs	r3, r2
 800515c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b00      	cmp	r3, #0
 8005168:	d009      	beq.n	800517e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800516a:	4b12      	ldr	r3, [pc, #72]	; (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	490e      	ldr	r1, [pc, #56]	; (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 800517a:	4313      	orrs	r3, r2
 800517c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800517e:	f000 f821 	bl	80051c4 <HAL_RCC_GetSysClockFreq>
 8005182:	4602      	mov	r2, r0
 8005184:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	091b      	lsrs	r3, r3, #4
 800518a:	f003 030f 	and.w	r3, r3, #15
 800518e:	490a      	ldr	r1, [pc, #40]	; (80051b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005190:	5ccb      	ldrb	r3, [r1, r3]
 8005192:	fa22 f303 	lsr.w	r3, r2, r3
 8005196:	4a09      	ldr	r2, [pc, #36]	; (80051bc <HAL_RCC_ClockConfig+0x1cc>)
 8005198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800519a:	4b09      	ldr	r3, [pc, #36]	; (80051c0 <HAL_RCC_ClockConfig+0x1d0>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fc ff2a 	bl	8001ff8 <HAL_InitTick>

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	40022000 	.word	0x40022000
 80051b4:	40021000 	.word	0x40021000
 80051b8:	0800bad8 	.word	0x0800bad8
 80051bc:	20000014 	.word	0x20000014
 80051c0:	20000018 	.word	0x20000018

080051c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051c4:	b490      	push	{r4, r7}
 80051c6:	b08a      	sub	sp, #40	; 0x28
 80051c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80051ca:	4b2a      	ldr	r3, [pc, #168]	; (8005274 <HAL_RCC_GetSysClockFreq+0xb0>)
 80051cc:	1d3c      	adds	r4, r7, #4
 80051ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80051d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80051d4:	f240 2301 	movw	r3, #513	; 0x201
 80051d8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	61fb      	str	r3, [r7, #28]
 80051de:	2300      	movs	r3, #0
 80051e0:	61bb      	str	r3, [r7, #24]
 80051e2:	2300      	movs	r3, #0
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
 80051e6:	2300      	movs	r3, #0
 80051e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80051ee:	4b22      	ldr	r3, [pc, #136]	; (8005278 <HAL_RCC_GetSysClockFreq+0xb4>)
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	f003 030c 	and.w	r3, r3, #12
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	d002      	beq.n	8005204 <HAL_RCC_GetSysClockFreq+0x40>
 80051fe:	2b08      	cmp	r3, #8
 8005200:	d003      	beq.n	800520a <HAL_RCC_GetSysClockFreq+0x46>
 8005202:	e02d      	b.n	8005260 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005204:	4b1d      	ldr	r3, [pc, #116]	; (800527c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005206:	623b      	str	r3, [r7, #32]
      break;
 8005208:	e02d      	b.n	8005266 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	0c9b      	lsrs	r3, r3, #18
 800520e:	f003 030f 	and.w	r3, r3, #15
 8005212:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005216:	4413      	add	r3, r2
 8005218:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800521c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d013      	beq.n	8005250 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005228:	4b13      	ldr	r3, [pc, #76]	; (8005278 <HAL_RCC_GetSysClockFreq+0xb4>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	0c5b      	lsrs	r3, r3, #17
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005236:	4413      	add	r3, r2
 8005238:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800523c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	4a0e      	ldr	r2, [pc, #56]	; (800527c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005242:	fb02 f203 	mul.w	r2, r2, r3
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	fbb2 f3f3 	udiv	r3, r2, r3
 800524c:	627b      	str	r3, [r7, #36]	; 0x24
 800524e:	e004      	b.n	800525a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	4a0b      	ldr	r2, [pc, #44]	; (8005280 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005254:	fb02 f303 	mul.w	r3, r2, r3
 8005258:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	623b      	str	r3, [r7, #32]
      break;
 800525e:	e002      	b.n	8005266 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005260:	4b06      	ldr	r3, [pc, #24]	; (800527c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005262:	623b      	str	r3, [r7, #32]
      break;
 8005264:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005266:	6a3b      	ldr	r3, [r7, #32]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3728      	adds	r7, #40	; 0x28
 800526c:	46bd      	mov	sp, r7
 800526e:	bc90      	pop	{r4, r7}
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	0800ba70 	.word	0x0800ba70
 8005278:	40021000 	.word	0x40021000
 800527c:	007a1200 	.word	0x007a1200
 8005280:	003d0900 	.word	0x003d0900

08005284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005288:	4b02      	ldr	r3, [pc, #8]	; (8005294 <HAL_RCC_GetHCLKFreq+0x10>)
 800528a:	681b      	ldr	r3, [r3, #0]
}
 800528c:	4618      	mov	r0, r3
 800528e:	46bd      	mov	sp, r7
 8005290:	bc80      	pop	{r7}
 8005292:	4770      	bx	lr
 8005294:	20000014 	.word	0x20000014

08005298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800529c:	f7ff fff2 	bl	8005284 <HAL_RCC_GetHCLKFreq>
 80052a0:	4602      	mov	r2, r0
 80052a2:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	0adb      	lsrs	r3, r3, #11
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	4903      	ldr	r1, [pc, #12]	; (80052bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80052ae:	5ccb      	ldrb	r3, [r1, r3]
 80052b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40021000 	.word	0x40021000
 80052bc:	0800bae8 	.word	0x0800bae8

080052c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80052c8:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <RCC_Delay+0x34>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a0a      	ldr	r2, [pc, #40]	; (80052f8 <RCC_Delay+0x38>)
 80052ce:	fba2 2303 	umull	r2, r3, r2, r3
 80052d2:	0a5b      	lsrs	r3, r3, #9
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	fb02 f303 	mul.w	r3, r2, r3
 80052da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80052dc:	bf00      	nop
  }
  while (Delay --);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	1e5a      	subs	r2, r3, #1
 80052e2:	60fa      	str	r2, [r7, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1f9      	bne.n	80052dc <RCC_Delay+0x1c>
}
 80052e8:	bf00      	nop
 80052ea:	bf00      	nop
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr
 80052f4:	20000014 	.word	0x20000014
 80052f8:	10624dd3 	.word	0x10624dd3

080052fc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	613b      	str	r3, [r7, #16]
 8005308:	2300      	movs	r3, #0
 800530a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	d07d      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005318:	2300      	movs	r3, #0
 800531a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800531c:	4b4f      	ldr	r3, [pc, #316]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10d      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005328:	4b4c      	ldr	r3, [pc, #304]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800532a:	69db      	ldr	r3, [r3, #28]
 800532c:	4a4b      	ldr	r2, [pc, #300]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800532e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005332:	61d3      	str	r3, [r2, #28]
 8005334:	4b49      	ldr	r3, [pc, #292]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800533c:	60bb      	str	r3, [r7, #8]
 800533e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005340:	2301      	movs	r3, #1
 8005342:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005344:	4b46      	ldr	r3, [pc, #280]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534c:	2b00      	cmp	r3, #0
 800534e:	d118      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005350:	4b43      	ldr	r3, [pc, #268]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a42      	ldr	r2, [pc, #264]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800535a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800535c:	f7fc fe8e 	bl	800207c <HAL_GetTick>
 8005360:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005362:	e008      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005364:	f7fc fe8a 	bl	800207c <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b64      	cmp	r3, #100	; 0x64
 8005370:	d901      	bls.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e06d      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005376:	4b3a      	ldr	r3, [pc, #232]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0f0      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005382:	4b36      	ldr	r3, [pc, #216]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800538a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d02e      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	429a      	cmp	r2, r3
 800539e:	d027      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053a0:	4b2e      	ldr	r3, [pc, #184]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053aa:	4b2e      	ldr	r3, [pc, #184]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80053ac:	2201      	movs	r2, #1
 80053ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053b0:	4b2c      	ldr	r3, [pc, #176]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80053b6:	4a29      	ldr	r2, [pc, #164]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d014      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c6:	f7fc fe59 	bl	800207c <HAL_GetTick>
 80053ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053cc:	e00a      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ce:	f7fc fe55 	bl	800207c <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053dc:	4293      	cmp	r3, r2
 80053de:	d901      	bls.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e036      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053e4:	4b1d      	ldr	r3, [pc, #116]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0ee      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053f0:	4b1a      	ldr	r3, [pc, #104]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	4917      	ldr	r1, [pc, #92]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005402:	7dfb      	ldrb	r3, [r7, #23]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d105      	bne.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005408:	4b14      	ldr	r3, [pc, #80]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	4a13      	ldr	r2, [pc, #76]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800540e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005412:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d008      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005420:	4b0e      	ldr	r3, [pc, #56]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	490b      	ldr	r1, [pc, #44]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800542e:	4313      	orrs	r3, r2
 8005430:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0310 	and.w	r3, r3, #16
 800543a:	2b00      	cmp	r3, #0
 800543c:	d008      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800543e:	4b07      	ldr	r3, [pc, #28]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	4904      	ldr	r1, [pc, #16]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800544c:	4313      	orrs	r3, r2
 800544e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3718      	adds	r7, #24
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	40021000 	.word	0x40021000
 8005460:	40007000 	.word	0x40007000
 8005464:	42420440 	.word	0x42420440

08005468 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005468:	b590      	push	{r4, r7, lr}
 800546a:	b08d      	sub	sp, #52	; 0x34
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005470:	4b5a      	ldr	r3, [pc, #360]	; (80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8005472:	f107 040c 	add.w	r4, r7, #12
 8005476:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005478:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800547c:	f240 2301 	movw	r3, #513	; 0x201
 8005480:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005482:	2300      	movs	r3, #0
 8005484:	627b      	str	r3, [r7, #36]	; 0x24
 8005486:	2300      	movs	r3, #0
 8005488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800548a:	2300      	movs	r3, #0
 800548c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800548e:	2300      	movs	r3, #0
 8005490:	61fb      	str	r3, [r7, #28]
 8005492:	2300      	movs	r3, #0
 8005494:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b10      	cmp	r3, #16
 800549a:	d00a      	beq.n	80054b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b10      	cmp	r3, #16
 80054a0:	f200 8091 	bhi.w	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d04c      	beq.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d07c      	beq.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80054b0:	e089      	b.n	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80054b2:	4b4b      	ldr	r3, [pc, #300]	; (80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80054b8:	4b49      	ldr	r3, [pc, #292]	; (80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 8082 	beq.w	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	0c9b      	lsrs	r3, r3, #18
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80054d2:	4413      	add	r3, r2
 80054d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80054d8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d018      	beq.n	8005516 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80054e4:	4b3e      	ldr	r3, [pc, #248]	; (80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	0c5b      	lsrs	r3, r3, #17
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80054f2:	4413      	add	r3, r2
 80054f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00d      	beq.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005504:	4a37      	ldr	r2, [pc, #220]	; (80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	fbb2 f2f3 	udiv	r2, r2, r3
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	fb02 f303 	mul.w	r3, r2, r3
 8005512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005514:	e004      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	4a33      	ldr	r2, [pc, #204]	; (80055e8 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800551a:	fb02 f303 	mul.w	r3, r2, r3
 800551e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005520:	4b2f      	ldr	r3, [pc, #188]	; (80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005528:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800552c:	d102      	bne.n	8005534 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800552e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005530:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005532:	e04a      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8005534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005536:	005b      	lsls	r3, r3, #1
 8005538:	4a2c      	ldr	r2, [pc, #176]	; (80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800553a:	fba2 2303 	umull	r2, r3, r2, r3
 800553e:	085b      	lsrs	r3, r3, #1
 8005540:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005542:	e042      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8005544:	4b26      	ldr	r3, [pc, #152]	; (80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005554:	d108      	bne.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8005560:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005564:	62bb      	str	r3, [r7, #40]	; 0x28
 8005566:	e01f      	b.n	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800556e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005572:	d109      	bne.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8005574:	4b1a      	ldr	r3, [pc, #104]	; (80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8005580:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005584:	62bb      	str	r3, [r7, #40]	; 0x28
 8005586:	e00f      	b.n	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800558e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005592:	d11c      	bne.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8005594:	4b12      	ldr	r3, [pc, #72]	; (80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d016      	beq.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80055a0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80055a4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80055a6:	e012      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80055a8:	e011      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80055aa:	f7ff fe75 	bl	8005298 <HAL_RCC_GetPCLK2Freq>
 80055ae:	4602      	mov	r2, r0
 80055b0:	4b0b      	ldr	r3, [pc, #44]	; (80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	0b9b      	lsrs	r3, r3, #14
 80055b6:	f003 0303 	and.w	r3, r3, #3
 80055ba:	3301      	adds	r3, #1
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80055c4:	e004      	b.n	80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80055c6:	bf00      	nop
 80055c8:	e002      	b.n	80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80055ca:	bf00      	nop
 80055cc:	e000      	b.n	80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80055ce:	bf00      	nop
    }
  }
  return (frequency);
 80055d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3734      	adds	r7, #52	; 0x34
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd90      	pop	{r4, r7, pc}
 80055da:	bf00      	nop
 80055dc:	0800ba80 	.word	0x0800ba80
 80055e0:	40021000 	.word	0x40021000
 80055e4:	007a1200 	.word	0x007a1200
 80055e8:	003d0900 	.word	0x003d0900
 80055ec:	aaaaaaab 	.word	0xaaaaaaab

080055f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e076      	b.n	80056f0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	2b00      	cmp	r3, #0
 8005608:	d108      	bne.n	800561c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005612:	d009      	beq.n	8005628 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	61da      	str	r2, [r3, #28]
 800561a:	e005      	b.n	8005628 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7fc fabe 	bl	8001bc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800565e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005670:	431a      	orrs	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800567a:	431a      	orrs	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	431a      	orrs	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	431a      	orrs	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005698:	431a      	orrs	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056a2:	431a      	orrs	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ac:	ea42 0103 	orr.w	r1, r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	0c1a      	lsrs	r2, r3, #16
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f002 0204 	and.w	r2, r2, #4
 80056ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	69da      	ldr	r2, [r3, #28]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	603b      	str	r3, [r7, #0]
 8005704:	4613      	mov	r3, r2
 8005706:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005708:	2300      	movs	r3, #0
 800570a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <HAL_SPI_Transmit+0x22>
 8005716:	2302      	movs	r3, #2
 8005718:	e126      	b.n	8005968 <HAL_SPI_Transmit+0x270>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005722:	f7fc fcab 	bl	800207c <HAL_GetTick>
 8005726:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005728:	88fb      	ldrh	r3, [r7, #6]
 800572a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b01      	cmp	r3, #1
 8005736:	d002      	beq.n	800573e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005738:	2302      	movs	r3, #2
 800573a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800573c:	e10b      	b.n	8005956 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <HAL_SPI_Transmit+0x52>
 8005744:	88fb      	ldrh	r3, [r7, #6]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d102      	bne.n	8005750 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800574e:	e102      	b.n	8005956 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2203      	movs	r2, #3
 8005754:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	88fa      	ldrh	r2, [r7, #6]
 8005768:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	88fa      	ldrh	r2, [r7, #6]
 800576e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005796:	d10f      	bne.n	80057b8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057b6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c2:	2b40      	cmp	r3, #64	; 0x40
 80057c4:	d007      	beq.n	80057d6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057de:	d14b      	bne.n	8005878 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <HAL_SPI_Transmit+0xf6>
 80057e8:	8afb      	ldrh	r3, [r7, #22]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d13e      	bne.n	800586c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f2:	881a      	ldrh	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fe:	1c9a      	adds	r2, r3, #2
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005808:	b29b      	uxth	r3, r3
 800580a:	3b01      	subs	r3, #1
 800580c:	b29a      	uxth	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005812:	e02b      	b.n	800586c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b02      	cmp	r3, #2
 8005820:	d112      	bne.n	8005848 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005826:	881a      	ldrh	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005832:	1c9a      	adds	r2, r3, #2
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800583c:	b29b      	uxth	r3, r3
 800583e:	3b01      	subs	r3, #1
 8005840:	b29a      	uxth	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	86da      	strh	r2, [r3, #54]	; 0x36
 8005846:	e011      	b.n	800586c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005848:	f7fc fc18 	bl	800207c <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	429a      	cmp	r2, r3
 8005856:	d803      	bhi.n	8005860 <HAL_SPI_Transmit+0x168>
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585e:	d102      	bne.n	8005866 <HAL_SPI_Transmit+0x16e>
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d102      	bne.n	800586c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	77fb      	strb	r3, [r7, #31]
          goto error;
 800586a:	e074      	b.n	8005956 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005870:	b29b      	uxth	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1ce      	bne.n	8005814 <HAL_SPI_Transmit+0x11c>
 8005876:	e04c      	b.n	8005912 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d002      	beq.n	8005886 <HAL_SPI_Transmit+0x18e>
 8005880:	8afb      	ldrh	r3, [r7, #22]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d140      	bne.n	8005908 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	330c      	adds	r3, #12
 8005890:	7812      	ldrb	r2, [r2, #0]
 8005892:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	3b01      	subs	r3, #1
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80058ac:	e02c      	b.n	8005908 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d113      	bne.n	80058e4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	330c      	adds	r3, #12
 80058c6:	7812      	ldrb	r2, [r2, #0]
 80058c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ce:	1c5a      	adds	r2, r3, #1
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058d8:	b29b      	uxth	r3, r3
 80058da:	3b01      	subs	r3, #1
 80058dc:	b29a      	uxth	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80058e2:	e011      	b.n	8005908 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058e4:	f7fc fbca 	bl	800207c <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d803      	bhi.n	80058fc <HAL_SPI_Transmit+0x204>
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fa:	d102      	bne.n	8005902 <HAL_SPI_Transmit+0x20a>
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d102      	bne.n	8005908 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005906:	e026      	b.n	8005956 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800590c:	b29b      	uxth	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1cd      	bne.n	80058ae <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005912:	69ba      	ldr	r2, [r7, #24]
 8005914:	6839      	ldr	r1, [r7, #0]
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 f8b2 	bl	8005a80 <SPI_EndRxTxTransaction>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2220      	movs	r2, #32
 8005926:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10a      	bne.n	8005946 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005930:	2300      	movs	r3, #0
 8005932:	613b      	str	r3, [r7, #16]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	613b      	str	r3, [r7, #16]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	613b      	str	r3, [r7, #16]
 8005944:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	77fb      	strb	r3, [r7, #31]
 8005952:	e000      	b.n	8005956 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005954:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005966:	7ffb      	ldrb	r3, [r7, #31]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3720      	adds	r7, #32
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b088      	sub	sp, #32
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	603b      	str	r3, [r7, #0]
 800597c:	4613      	mov	r3, r2
 800597e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005980:	f7fc fb7c 	bl	800207c <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005988:	1a9b      	subs	r3, r3, r2
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	4413      	add	r3, r2
 800598e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005990:	f7fc fb74 	bl	800207c <HAL_GetTick>
 8005994:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005996:	4b39      	ldr	r3, [pc, #228]	; (8005a7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	015b      	lsls	r3, r3, #5
 800599c:	0d1b      	lsrs	r3, r3, #20
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	fb02 f303 	mul.w	r3, r2, r3
 80059a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059a6:	e054      	b.n	8005a52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ae:	d050      	beq.n	8005a52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80059b0:	f7fc fb64 	bl	800207c <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	69fa      	ldr	r2, [r7, #28]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d902      	bls.n	80059c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d13d      	bne.n	8005a42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059de:	d111      	bne.n	8005a04 <SPI_WaitFlagStateUntilTimeout+0x94>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059e8:	d004      	beq.n	80059f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059f2:	d107      	bne.n	8005a04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a0c:	d10f      	bne.n	8005a2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e017      	b.n	8005a72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	bf0c      	ite	eq
 8005a62:	2301      	moveq	r3, #1
 8005a64:	2300      	movne	r3, #0
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	461a      	mov	r2, r3
 8005a6a:	79fb      	ldrb	r3, [r7, #7]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d19b      	bne.n	80059a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3720      	adds	r7, #32
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20000014 	.word	0x20000014

08005a80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af02      	add	r7, sp, #8
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2200      	movs	r2, #0
 8005a94:	2180      	movs	r1, #128	; 0x80
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f7ff ff6a 	bl	8005970 <SPI_WaitFlagStateUntilTimeout>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d007      	beq.n	8005ab2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa6:	f043 0220 	orr.w	r2, r3, #32
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e000      	b.n	8005ab4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e041      	b.n	8005b52 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d106      	bne.n	8005ae8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7fc f8ac 	bl	8001c40 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	3304      	adds	r3, #4
 8005af8:	4619      	mov	r1, r3
 8005afa:	4610      	mov	r0, r2
 8005afc:	f000 fb38 	bl	8006170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
	...

08005b5c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d104      	bne.n	8005b76 <HAL_TIM_IC_Start_IT+0x1a>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	e013      	b.n	8005b9e <HAL_TIM_IC_Start_IT+0x42>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b04      	cmp	r3, #4
 8005b7a:	d104      	bne.n	8005b86 <HAL_TIM_IC_Start_IT+0x2a>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	e00b      	b.n	8005b9e <HAL_TIM_IC_Start_IT+0x42>
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b08      	cmp	r3, #8
 8005b8a:	d104      	bne.n	8005b96 <HAL_TIM_IC_Start_IT+0x3a>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	e003      	b.n	8005b9e <HAL_TIM_IC_Start_IT+0x42>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d104      	bne.n	8005bb0 <HAL_TIM_IC_Start_IT+0x54>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	e013      	b.n	8005bd8 <HAL_TIM_IC_Start_IT+0x7c>
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d104      	bne.n	8005bc0 <HAL_TIM_IC_Start_IT+0x64>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	e00b      	b.n	8005bd8 <HAL_TIM_IC_Start_IT+0x7c>
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2b08      	cmp	r3, #8
 8005bc4:	d104      	bne.n	8005bd0 <HAL_TIM_IC_Start_IT+0x74>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	e003      	b.n	8005bd8 <HAL_TIM_IC_Start_IT+0x7c>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bda:	7bfb      	ldrb	r3, [r7, #15]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d102      	bne.n	8005be6 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005be0:	7bbb      	ldrb	r3, [r7, #14]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d001      	beq.n	8005bea <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e0b3      	b.n	8005d52 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d104      	bne.n	8005bfa <HAL_TIM_IC_Start_IT+0x9e>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bf8:	e013      	b.n	8005c22 <HAL_TIM_IC_Start_IT+0xc6>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	d104      	bne.n	8005c0a <HAL_TIM_IC_Start_IT+0xae>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c08:	e00b      	b.n	8005c22 <HAL_TIM_IC_Start_IT+0xc6>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d104      	bne.n	8005c1a <HAL_TIM_IC_Start_IT+0xbe>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c18:	e003      	b.n	8005c22 <HAL_TIM_IC_Start_IT+0xc6>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d104      	bne.n	8005c32 <HAL_TIM_IC_Start_IT+0xd6>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c30:	e013      	b.n	8005c5a <HAL_TIM_IC_Start_IT+0xfe>
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b04      	cmp	r3, #4
 8005c36:	d104      	bne.n	8005c42 <HAL_TIM_IC_Start_IT+0xe6>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c40:	e00b      	b.n	8005c5a <HAL_TIM_IC_Start_IT+0xfe>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2b08      	cmp	r3, #8
 8005c46:	d104      	bne.n	8005c52 <HAL_TIM_IC_Start_IT+0xf6>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c50:	e003      	b.n	8005c5a <HAL_TIM_IC_Start_IT+0xfe>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2202      	movs	r2, #2
 8005c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b0c      	cmp	r3, #12
 8005c5e:	d841      	bhi.n	8005ce4 <HAL_TIM_IC_Start_IT+0x188>
 8005c60:	a201      	add	r2, pc, #4	; (adr r2, 8005c68 <HAL_TIM_IC_Start_IT+0x10c>)
 8005c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c66:	bf00      	nop
 8005c68:	08005c9d 	.word	0x08005c9d
 8005c6c:	08005ce5 	.word	0x08005ce5
 8005c70:	08005ce5 	.word	0x08005ce5
 8005c74:	08005ce5 	.word	0x08005ce5
 8005c78:	08005caf 	.word	0x08005caf
 8005c7c:	08005ce5 	.word	0x08005ce5
 8005c80:	08005ce5 	.word	0x08005ce5
 8005c84:	08005ce5 	.word	0x08005ce5
 8005c88:	08005cc1 	.word	0x08005cc1
 8005c8c:	08005ce5 	.word	0x08005ce5
 8005c90:	08005ce5 	.word	0x08005ce5
 8005c94:	08005ce5 	.word	0x08005ce5
 8005c98:	08005cd3 	.word	0x08005cd3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68da      	ldr	r2, [r3, #12]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0202 	orr.w	r2, r2, #2
 8005caa:	60da      	str	r2, [r3, #12]
      break;
 8005cac:	e01b      	b.n	8005ce6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68da      	ldr	r2, [r3, #12]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f042 0204 	orr.w	r2, r2, #4
 8005cbc:	60da      	str	r2, [r3, #12]
      break;
 8005cbe:	e012      	b.n	8005ce6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f042 0208 	orr.w	r2, r2, #8
 8005cce:	60da      	str	r2, [r3, #12]
      break;
 8005cd0:	e009      	b.n	8005ce6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68da      	ldr	r2, [r3, #12]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f042 0210 	orr.w	r2, r2, #16
 8005ce0:	60da      	str	r2, [r3, #12]
      break;
 8005ce2:	e000      	b.n	8005ce6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8005ce4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2201      	movs	r2, #1
 8005cec:	6839      	ldr	r1, [r7, #0]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 fbad 	bl	800644e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a18      	ldr	r2, [pc, #96]	; (8005d5c <HAL_TIM_IC_Start_IT+0x200>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d00e      	beq.n	8005d1c <HAL_TIM_IC_Start_IT+0x1c0>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d06:	d009      	beq.n	8005d1c <HAL_TIM_IC_Start_IT+0x1c0>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a14      	ldr	r2, [pc, #80]	; (8005d60 <HAL_TIM_IC_Start_IT+0x204>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d004      	beq.n	8005d1c <HAL_TIM_IC_Start_IT+0x1c0>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a13      	ldr	r2, [pc, #76]	; (8005d64 <HAL_TIM_IC_Start_IT+0x208>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d111      	bne.n	8005d40 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f003 0307 	and.w	r3, r3, #7
 8005d26:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2b06      	cmp	r3, #6
 8005d2c:	d010      	beq.n	8005d50 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f042 0201 	orr.w	r2, r2, #1
 8005d3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d3e:	e007      	b.n	8005d50 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f042 0201 	orr.w	r2, r2, #1
 8005d4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	40012c00 	.word	0x40012c00
 8005d60:	40000400 	.word	0x40000400
 8005d64:	40000800 	.word	0x40000800

08005d68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d122      	bne.n	8005dc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f003 0302 	and.w	r3, r3, #2
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d11b      	bne.n	8005dc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f06f 0202 	mvn.w	r2, #2
 8005d94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	f003 0303 	and.w	r3, r3, #3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7fa fdde 	bl	800096c <HAL_TIM_IC_CaptureCallback>
 8005db0:	e005      	b.n	8005dbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f9c1 	bl	800613a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f9c7 	bl	800614c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	f003 0304 	and.w	r3, r3, #4
 8005dce:	2b04      	cmp	r3, #4
 8005dd0:	d122      	bne.n	8005e18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f003 0304 	and.w	r3, r3, #4
 8005ddc:	2b04      	cmp	r3, #4
 8005dde:	d11b      	bne.n	8005e18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f06f 0204 	mvn.w	r2, #4
 8005de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2202      	movs	r2, #2
 8005dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7fa fdb4 	bl	800096c <HAL_TIM_IC_CaptureCallback>
 8005e04:	e005      	b.n	8005e12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f997 	bl	800613a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 f99d 	bl	800614c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	f003 0308 	and.w	r3, r3, #8
 8005e22:	2b08      	cmp	r3, #8
 8005e24:	d122      	bne.n	8005e6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f003 0308 	and.w	r3, r3, #8
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d11b      	bne.n	8005e6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f06f 0208 	mvn.w	r2, #8
 8005e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2204      	movs	r2, #4
 8005e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	f003 0303 	and.w	r3, r3, #3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7fa fd8a 	bl	800096c <HAL_TIM_IC_CaptureCallback>
 8005e58:	e005      	b.n	8005e66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f96d 	bl	800613a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 f973 	bl	800614c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	f003 0310 	and.w	r3, r3, #16
 8005e76:	2b10      	cmp	r3, #16
 8005e78:	d122      	bne.n	8005ec0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	f003 0310 	and.w	r3, r3, #16
 8005e84:	2b10      	cmp	r3, #16
 8005e86:	d11b      	bne.n	8005ec0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f06f 0210 	mvn.w	r2, #16
 8005e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2208      	movs	r2, #8
 8005e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	69db      	ldr	r3, [r3, #28]
 8005e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7fa fd60 	bl	800096c <HAL_TIM_IC_CaptureCallback>
 8005eac:	e005      	b.n	8005eba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f943 	bl	800613a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f949 	bl	800614c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d10e      	bne.n	8005eec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d107      	bne.n	8005eec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f06f 0201 	mvn.w	r2, #1
 8005ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f91e 	bl	8006128 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef6:	2b80      	cmp	r3, #128	; 0x80
 8005ef8:	d10e      	bne.n	8005f18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f04:	2b80      	cmp	r3, #128	; 0x80
 8005f06:	d107      	bne.n	8005f18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 fb27 	bl	8006566 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f22:	2b40      	cmp	r3, #64	; 0x40
 8005f24:	d10e      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f30:	2b40      	cmp	r3, #64	; 0x40
 8005f32:	d107      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f90d 	bl	800615e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f003 0320 	and.w	r3, r3, #32
 8005f4e:	2b20      	cmp	r3, #32
 8005f50:	d10e      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f003 0320 	and.w	r3, r3, #32
 8005f5c:	2b20      	cmp	r3, #32
 8005f5e:	d107      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f06f 0220 	mvn.w	r2, #32
 8005f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 faf2 	bl	8006554 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f70:	bf00      	nop
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d101      	bne.n	8005f92 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005f8e:	2302      	movs	r3, #2
 8005f90:	e082      	b.n	8006098 <HAL_TIM_IC_ConfigChannel+0x120>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d11b      	bne.n	8005fd8 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6818      	ldr	r0, [r3, #0]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	6819      	ldr	r1, [r3, #0]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f000 f940 	bl	8006234 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	699a      	ldr	r2, [r3, #24]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 020c 	bic.w	r2, r2, #12
 8005fc2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6999      	ldr	r1, [r3, #24]
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	689a      	ldr	r2, [r3, #8]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	619a      	str	r2, [r3, #24]
 8005fd6:	e05a      	b.n	800608e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b04      	cmp	r3, #4
 8005fdc:	d11c      	bne.n	8006018 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6818      	ldr	r0, [r3, #0]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	6819      	ldr	r1, [r3, #0]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f000 f97b 	bl	80062e8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	699a      	ldr	r2, [r3, #24]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006000:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6999      	ldr	r1, [r3, #24]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	021a      	lsls	r2, r3, #8
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	619a      	str	r2, [r3, #24]
 8006016:	e03a      	b.n	800608e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b08      	cmp	r3, #8
 800601c:	d11b      	bne.n	8006056 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6818      	ldr	r0, [r3, #0]
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	6819      	ldr	r1, [r3, #0]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	f000 f997 	bl	8006360 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	69da      	ldr	r2, [r3, #28]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f022 020c 	bic.w	r2, r2, #12
 8006040:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	69d9      	ldr	r1, [r3, #28]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	61da      	str	r2, [r3, #28]
 8006054:	e01b      	b.n	800608e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6818      	ldr	r0, [r3, #0]
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	6819      	ldr	r1, [r3, #0]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	f000 f9b6 	bl	80063d6 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	69da      	ldr	r2, [r3, #28]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006078:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	69d9      	ldr	r1, [r3, #28]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	021a      	lsls	r2, r3, #8
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	2b0c      	cmp	r3, #12
 80060b2:	d831      	bhi.n	8006118 <HAL_TIM_ReadCapturedValue+0x78>
 80060b4:	a201      	add	r2, pc, #4	; (adr r2, 80060bc <HAL_TIM_ReadCapturedValue+0x1c>)
 80060b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ba:	bf00      	nop
 80060bc:	080060f1 	.word	0x080060f1
 80060c0:	08006119 	.word	0x08006119
 80060c4:	08006119 	.word	0x08006119
 80060c8:	08006119 	.word	0x08006119
 80060cc:	080060fb 	.word	0x080060fb
 80060d0:	08006119 	.word	0x08006119
 80060d4:	08006119 	.word	0x08006119
 80060d8:	08006119 	.word	0x08006119
 80060dc:	08006105 	.word	0x08006105
 80060e0:	08006119 	.word	0x08006119
 80060e4:	08006119 	.word	0x08006119
 80060e8:	08006119 	.word	0x08006119
 80060ec:	0800610f 	.word	0x0800610f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f6:	60fb      	str	r3, [r7, #12]

      break;
 80060f8:	e00f      	b.n	800611a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006100:	60fb      	str	r3, [r7, #12]

      break;
 8006102:	e00a      	b.n	800611a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610a:	60fb      	str	r3, [r7, #12]

      break;
 800610c:	e005      	b.n	800611a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006114:	60fb      	str	r3, [r7, #12]

      break;
 8006116:	e000      	b.n	800611a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006118:	bf00      	nop
  }

  return tmpreg;
 800611a:	68fb      	ldr	r3, [r7, #12]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	bc80      	pop	{r7}
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop

08006128 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	bc80      	pop	{r7}
 8006138:	4770      	bx	lr

0800613a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800613a:	b480      	push	{r7}
 800613c:	b083      	sub	sp, #12
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006142:	bf00      	nop
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	bc80      	pop	{r7}
 800614a:	4770      	bx	lr

0800614c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	bc80      	pop	{r7}
 800615c:	4770      	bx	lr

0800615e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800615e:	b480      	push	{r7}
 8006160:	b083      	sub	sp, #12
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006166:	bf00      	nop
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	bc80      	pop	{r7}
 800616e:	4770      	bx	lr

08006170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a29      	ldr	r2, [pc, #164]	; (8006228 <TIM_Base_SetConfig+0xb8>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d00b      	beq.n	80061a0 <TIM_Base_SetConfig+0x30>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800618e:	d007      	beq.n	80061a0 <TIM_Base_SetConfig+0x30>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a26      	ldr	r2, [pc, #152]	; (800622c <TIM_Base_SetConfig+0xbc>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d003      	beq.n	80061a0 <TIM_Base_SetConfig+0x30>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a25      	ldr	r2, [pc, #148]	; (8006230 <TIM_Base_SetConfig+0xc0>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d108      	bne.n	80061b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a1c      	ldr	r2, [pc, #112]	; (8006228 <TIM_Base_SetConfig+0xb8>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d00b      	beq.n	80061d2 <TIM_Base_SetConfig+0x62>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c0:	d007      	beq.n	80061d2 <TIM_Base_SetConfig+0x62>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a19      	ldr	r2, [pc, #100]	; (800622c <TIM_Base_SetConfig+0xbc>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d003      	beq.n	80061d2 <TIM_Base_SetConfig+0x62>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a18      	ldr	r2, [pc, #96]	; (8006230 <TIM_Base_SetConfig+0xc0>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d108      	bne.n	80061e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a07      	ldr	r2, [pc, #28]	; (8006228 <TIM_Base_SetConfig+0xb8>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d103      	bne.n	8006218 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	691a      	ldr	r2, [r3, #16]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	615a      	str	r2, [r3, #20]
}
 800621e:	bf00      	nop
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	bc80      	pop	{r7}
 8006226:	4770      	bx	lr
 8006228:	40012c00 	.word	0x40012c00
 800622c:	40000400 	.word	0x40000400
 8006230:	40000800 	.word	0x40000800

08006234 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006234:	b480      	push	{r7}
 8006236:	b087      	sub	sp, #28
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
 8006240:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	f023 0201 	bic.w	r2, r3, #1
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	4a1f      	ldr	r2, [pc, #124]	; (80062dc <TIM_TI1_SetConfig+0xa8>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00b      	beq.n	800627a <TIM_TI1_SetConfig+0x46>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006268:	d007      	beq.n	800627a <TIM_TI1_SetConfig+0x46>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4a1c      	ldr	r2, [pc, #112]	; (80062e0 <TIM_TI1_SetConfig+0xac>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d003      	beq.n	800627a <TIM_TI1_SetConfig+0x46>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4a1b      	ldr	r2, [pc, #108]	; (80062e4 <TIM_TI1_SetConfig+0xb0>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d101      	bne.n	800627e <TIM_TI1_SetConfig+0x4a>
 800627a:	2301      	movs	r3, #1
 800627c:	e000      	b.n	8006280 <TIM_TI1_SetConfig+0x4c>
 800627e:	2300      	movs	r3, #0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d008      	beq.n	8006296 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f023 0303 	bic.w	r3, r3, #3
 800628a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4313      	orrs	r3, r2
 8006292:	617b      	str	r3, [r7, #20]
 8006294:	e003      	b.n	800629e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f043 0301 	orr.w	r3, r3, #1
 800629c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	011b      	lsls	r3, r3, #4
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	f023 030a 	bic.w	r3, r3, #10
 80062b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f003 030a 	and.w	r3, r3, #10
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	621a      	str	r2, [r3, #32]
}
 80062d2:	bf00      	nop
 80062d4:	371c      	adds	r7, #28
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bc80      	pop	{r7}
 80062da:	4770      	bx	lr
 80062dc:	40012c00 	.word	0x40012c00
 80062e0:	40000400 	.word	0x40000400
 80062e4:	40000800 	.word	0x40000800

080062e8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b087      	sub	sp, #28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
 80062f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	f023 0210 	bic.w	r2, r3, #16
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006314:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	021b      	lsls	r3, r3, #8
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4313      	orrs	r3, r2
 800631e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006326:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	031b      	lsls	r3, r3, #12
 800632c:	b29b      	uxth	r3, r3
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	4313      	orrs	r3, r2
 8006332:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800633a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	011b      	lsls	r3, r3, #4
 8006340:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	4313      	orrs	r3, r2
 8006348:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	621a      	str	r2, [r3, #32]
}
 8006356:	bf00      	nop
 8006358:	371c      	adds	r7, #28
 800635a:	46bd      	mov	sp, r7
 800635c:	bc80      	pop	{r7}
 800635e:	4770      	bx	lr

08006360 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
 800636c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f023 0303 	bic.w	r3, r3, #3
 800638c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4313      	orrs	r3, r2
 8006394:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800639c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	011b      	lsls	r3, r3, #4
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063b0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	021b      	lsls	r3, r3, #8
 80063b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	4313      	orrs	r3, r2
 80063be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	621a      	str	r2, [r3, #32]
}
 80063cc:	bf00      	nop
 80063ce:	371c      	adds	r7, #28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bc80      	pop	{r7}
 80063d4:	4770      	bx	lr

080063d6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b087      	sub	sp, #28
 80063da:	af00      	add	r7, sp, #0
 80063dc:	60f8      	str	r0, [r7, #12]
 80063de:	60b9      	str	r1, [r7, #8]
 80063e0:	607a      	str	r2, [r7, #4]
 80063e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6a1b      	ldr	r3, [r3, #32]
 80063e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	69db      	ldr	r3, [r3, #28]
 80063f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006402:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	021b      	lsls	r3, r3, #8
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	4313      	orrs	r3, r2
 800640c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006414:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	031b      	lsls	r3, r3, #12
 800641a:	b29b      	uxth	r3, r3
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	4313      	orrs	r3, r2
 8006420:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006428:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	031b      	lsls	r3, r3, #12
 800642e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	4313      	orrs	r3, r2
 8006436:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	621a      	str	r2, [r3, #32]
}
 8006444:	bf00      	nop
 8006446:	371c      	adds	r7, #28
 8006448:	46bd      	mov	sp, r7
 800644a:	bc80      	pop	{r7}
 800644c:	4770      	bx	lr

0800644e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800644e:	b480      	push	{r7}
 8006450:	b087      	sub	sp, #28
 8006452:	af00      	add	r7, sp, #0
 8006454:	60f8      	str	r0, [r7, #12]
 8006456:	60b9      	str	r1, [r7, #8]
 8006458:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	f003 031f 	and.w	r3, r3, #31
 8006460:	2201      	movs	r2, #1
 8006462:	fa02 f303 	lsl.w	r3, r2, r3
 8006466:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6a1a      	ldr	r2, [r3, #32]
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	43db      	mvns	r3, r3
 8006470:	401a      	ands	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6a1a      	ldr	r2, [r3, #32]
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f003 031f 	and.w	r3, r3, #31
 8006480:	6879      	ldr	r1, [r7, #4]
 8006482:	fa01 f303 	lsl.w	r3, r1, r3
 8006486:	431a      	orrs	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	621a      	str	r2, [r3, #32]
}
 800648c:	bf00      	nop
 800648e:	371c      	adds	r7, #28
 8006490:	46bd      	mov	sp, r7
 8006492:	bc80      	pop	{r7}
 8006494:	4770      	bx	lr
	...

08006498 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d101      	bne.n	80064b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064ac:	2302      	movs	r3, #2
 80064ae:	e046      	b.n	800653e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	4313      	orrs	r3, r2
 80064e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a16      	ldr	r2, [pc, #88]	; (8006548 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d00e      	beq.n	8006512 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064fc:	d009      	beq.n	8006512 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a12      	ldr	r2, [pc, #72]	; (800654c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d004      	beq.n	8006512 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a10      	ldr	r2, [pc, #64]	; (8006550 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d10c      	bne.n	800652c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006518:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	4313      	orrs	r3, r2
 8006522:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	bc80      	pop	{r7}
 8006546:	4770      	bx	lr
 8006548:	40012c00 	.word	0x40012c00
 800654c:	40000400 	.word	0x40000400
 8006550:	40000800 	.word	0x40000800

08006554 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	bc80      	pop	{r7}
 8006564:	4770      	bx	lr

08006566 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006566:	b480      	push	{r7}
 8006568:	b083      	sub	sp, #12
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800656e:	bf00      	nop
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	bc80      	pop	{r7}
 8006576:	4770      	bx	lr

08006578 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006578:	b084      	sub	sp, #16
 800657a:	b480      	push	{r7}
 800657c:	b083      	sub	sp, #12
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
 8006582:	f107 0014 	add.w	r0, r7, #20
 8006586:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	bc80      	pop	{r7}
 8006594:	b004      	add	sp, #16
 8006596:	4770      	bx	lr

08006598 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80065a8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80065ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	bc80      	pop	{r7}
 80065c2:	4770      	bx	lr

080065c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80065cc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80065d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80065d8:	b29a      	uxth	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	b29b      	uxth	r3, r3
 80065de:	43db      	mvns	r3, r3
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	4013      	ands	r3, r2
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bc80      	pop	{r7}
 80065f6:	4770      	bx	lr

080065f8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	460b      	mov	r3, r1
 8006602:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	bc80      	pop	{r7}
 800660e:	4770      	bx	lr

08006610 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006610:	b084      	sub	sp, #16
 8006612:	b480      	push	{r7}
 8006614:	b083      	sub	sp, #12
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
 800661a:	f107 0014 	add.w	r0, r7, #20
 800661e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	bc80      	pop	{r7}
 800664c:	b004      	add	sp, #16
 800664e:	4770      	bx	lr

08006650 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006650:	b480      	push	{r7}
 8006652:	b09b      	sub	sp, #108	; 0x6c
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800665a:	2300      	movs	r3, #0
 800665c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	b29b      	uxth	r3, r3
 800666e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006676:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	78db      	ldrb	r3, [r3, #3]
 800667e:	2b03      	cmp	r3, #3
 8006680:	d81f      	bhi.n	80066c2 <USB_ActivateEndpoint+0x72>
 8006682:	a201      	add	r2, pc, #4	; (adr r2, 8006688 <USB_ActivateEndpoint+0x38>)
 8006684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006688:	08006699 	.word	0x08006699
 800668c:	080066b5 	.word	0x080066b5
 8006690:	080066cb 	.word	0x080066cb
 8006694:	080066a7 	.word	0x080066a7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006698:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800669c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066a0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80066a4:	e012      	b.n	80066cc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80066a6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80066aa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80066ae:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80066b2:	e00b      	b.n	80066cc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80066b4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80066b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066bc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80066c0:	e004      	b.n	80066cc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80066c8:	e000      	b.n	80066cc <USB_ActivateEndpoint+0x7c>
      break;
 80066ca:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	441a      	add	r2, r3
 80066d6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80066da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4413      	add	r3, r2
 80066f8:	881b      	ldrh	r3, [r3, #0]
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006704:	b29a      	uxth	r2, r3
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	b29b      	uxth	r3, r3
 800670c:	4313      	orrs	r3, r2
 800670e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	441a      	add	r2, r3
 800671c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006720:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006724:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800672c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006730:	b29b      	uxth	r3, r3
 8006732:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	7b1b      	ldrb	r3, [r3, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	f040 8149 	bne.w	80069d0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	785b      	ldrb	r3, [r3, #1]
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 8084 	beq.w	8006850 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	617b      	str	r3, [r7, #20]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006752:	b29b      	uxth	r3, r3
 8006754:	461a      	mov	r2, r3
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	4413      	add	r3, r2
 800675a:	617b      	str	r3, [r7, #20]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	011a      	lsls	r2, r3, #4
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	4413      	add	r3, r2
 8006766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800676a:	613b      	str	r3, [r7, #16]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	88db      	ldrh	r3, [r3, #6]
 8006770:	085b      	lsrs	r3, r3, #1
 8006772:	b29b      	uxth	r3, r3
 8006774:	005b      	lsls	r3, r3, #1
 8006776:	b29a      	uxth	r2, r3
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4413      	add	r3, r2
 8006786:	881b      	ldrh	r3, [r3, #0]
 8006788:	81fb      	strh	r3, [r7, #14]
 800678a:	89fb      	ldrh	r3, [r7, #14]
 800678c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006790:	2b00      	cmp	r3, #0
 8006792:	d01b      	beq.n	80067cc <USB_ActivateEndpoint+0x17c>
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	881b      	ldrh	r3, [r3, #0]
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067aa:	81bb      	strh	r3, [r7, #12]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	441a      	add	r2, r3
 80067b6:	89bb      	ldrh	r3, [r7, #12]
 80067b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	78db      	ldrb	r3, [r3, #3]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d020      	beq.n	8006816 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ea:	813b      	strh	r3, [r7, #8]
 80067ec:	893b      	ldrh	r3, [r7, #8]
 80067ee:	f083 0320 	eor.w	r3, r3, #32
 80067f2:	813b      	strh	r3, [r7, #8]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	441a      	add	r2, r3
 80067fe:	893b      	ldrh	r3, [r7, #8]
 8006800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800680c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006810:	b29b      	uxth	r3, r3
 8006812:	8013      	strh	r3, [r2, #0]
 8006814:	e27f      	b.n	8006d16 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4413      	add	r3, r2
 8006820:	881b      	ldrh	r3, [r3, #0]
 8006822:	b29b      	uxth	r3, r3
 8006824:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800682c:	817b      	strh	r3, [r7, #10]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	441a      	add	r2, r3
 8006838:	897b      	ldrh	r3, [r7, #10]
 800683a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800683e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800684a:	b29b      	uxth	r3, r3
 800684c:	8013      	strh	r3, [r2, #0]
 800684e:	e262      	b.n	8006d16 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800685a:	b29b      	uxth	r3, r3
 800685c:	461a      	mov	r2, r3
 800685e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006860:	4413      	add	r3, r2
 8006862:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	011a      	lsls	r2, r3, #4
 800686a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686c:	4413      	add	r3, r2
 800686e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006872:	62bb      	str	r3, [r7, #40]	; 0x28
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	88db      	ldrh	r3, [r3, #6]
 8006878:	085b      	lsrs	r3, r3, #1
 800687a:	b29b      	uxth	r3, r3
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	b29a      	uxth	r2, r3
 8006880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006882:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	627b      	str	r3, [r7, #36]	; 0x24
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800688e:	b29b      	uxth	r3, r3
 8006890:	461a      	mov	r2, r3
 8006892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006894:	4413      	add	r3, r2
 8006896:	627b      	str	r3, [r7, #36]	; 0x24
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	011a      	lsls	r2, r3, #4
 800689e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a0:	4413      	add	r3, r2
 80068a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068a6:	623b      	str	r3, [r7, #32]
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d112      	bne.n	80068d6 <USB_ActivateEndpoint+0x286>
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	881b      	ldrh	r3, [r3, #0]
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	6a3b      	ldr	r3, [r7, #32]
 80068be:	801a      	strh	r2, [r3, #0]
 80068c0:	6a3b      	ldr	r3, [r7, #32]
 80068c2:	881b      	ldrh	r3, [r3, #0]
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	6a3b      	ldr	r3, [r7, #32]
 80068d2:	801a      	strh	r2, [r3, #0]
 80068d4:	e02f      	b.n	8006936 <USB_ActivateEndpoint+0x2e6>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	2b3e      	cmp	r3, #62	; 0x3e
 80068dc:	d813      	bhi.n	8006906 <USB_ActivateEndpoint+0x2b6>
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	085b      	lsrs	r3, r3, #1
 80068e4:	663b      	str	r3, [r7, #96]	; 0x60
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d002      	beq.n	80068f8 <USB_ActivateEndpoint+0x2a8>
 80068f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068f4:	3301      	adds	r3, #1
 80068f6:	663b      	str	r3, [r7, #96]	; 0x60
 80068f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	029b      	lsls	r3, r3, #10
 80068fe:	b29a      	uxth	r2, r3
 8006900:	6a3b      	ldr	r3, [r7, #32]
 8006902:	801a      	strh	r2, [r3, #0]
 8006904:	e017      	b.n	8006936 <USB_ActivateEndpoint+0x2e6>
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	095b      	lsrs	r3, r3, #5
 800690c:	663b      	str	r3, [r7, #96]	; 0x60
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	f003 031f 	and.w	r3, r3, #31
 8006916:	2b00      	cmp	r3, #0
 8006918:	d102      	bne.n	8006920 <USB_ActivateEndpoint+0x2d0>
 800691a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800691c:	3b01      	subs	r3, #1
 800691e:	663b      	str	r3, [r7, #96]	; 0x60
 8006920:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006922:	b29b      	uxth	r3, r3
 8006924:	029b      	lsls	r3, r3, #10
 8006926:	b29b      	uxth	r3, r3
 8006928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800692c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006930:	b29a      	uxth	r2, r3
 8006932:	6a3b      	ldr	r3, [r7, #32]
 8006934:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	881b      	ldrh	r3, [r3, #0]
 8006942:	83fb      	strh	r3, [r7, #30]
 8006944:	8bfb      	ldrh	r3, [r7, #30]
 8006946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d01b      	beq.n	8006986 <USB_ActivateEndpoint+0x336>
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	881b      	ldrh	r3, [r3, #0]
 800695a:	b29b      	uxth	r3, r3
 800695c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006964:	83bb      	strh	r3, [r7, #28]
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	441a      	add	r2, r3
 8006970:	8bbb      	ldrh	r3, [r7, #28]
 8006972:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006976:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800697a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800697e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006982:	b29b      	uxth	r3, r3
 8006984:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	b29b      	uxth	r3, r3
 8006994:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800699c:	837b      	strh	r3, [r7, #26]
 800699e:	8b7b      	ldrh	r3, [r7, #26]
 80069a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069a4:	837b      	strh	r3, [r7, #26]
 80069a6:	8b7b      	ldrh	r3, [r7, #26]
 80069a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069ac:	837b      	strh	r3, [r7, #26]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	441a      	add	r2, r3
 80069b8:	8b7b      	ldrh	r3, [r7, #26]
 80069ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	8013      	strh	r3, [r2, #0]
 80069ce:	e1a2      	b.n	8006d16 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	881b      	ldrh	r3, [r3, #0]
 80069dc:	b29b      	uxth	r3, r3
 80069de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	441a      	add	r2, r3
 80069f4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80069f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a00:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	461a      	mov	r2, r3
 8006a1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a1c:	4413      	add	r3, r2
 8006a1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	011a      	lsls	r2, r3, #4
 8006a26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a28:	4413      	add	r3, r2
 8006a2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a2e:	657b      	str	r3, [r7, #84]	; 0x54
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	891b      	ldrh	r3, [r3, #8]
 8006a34:	085b      	lsrs	r3, r3, #1
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a3e:	801a      	strh	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	653b      	str	r3, [r7, #80]	; 0x50
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a50:	4413      	add	r3, r2
 8006a52:	653b      	str	r3, [r7, #80]	; 0x50
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	011a      	lsls	r2, r3, #4
 8006a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	895b      	ldrh	r3, [r3, #10]
 8006a68:	085b      	lsrs	r3, r3, #1
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	005b      	lsls	r3, r3, #1
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a72:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	785b      	ldrb	r3, [r3, #1]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f040 8091 	bne.w	8006ba0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4413      	add	r3, r2
 8006a88:	881b      	ldrh	r3, [r3, #0]
 8006a8a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006a8c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d01b      	beq.n	8006ace <USB_ActivateEndpoint+0x47e>
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aac:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	441a      	add	r2, r3
 8006ab8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ac2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	881b      	ldrh	r3, [r3, #0]
 8006ada:	873b      	strh	r3, [r7, #56]	; 0x38
 8006adc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d01b      	beq.n	8006b1e <USB_ActivateEndpoint+0x4ce>
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006afc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	441a      	add	r2, r3
 8006b08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b34:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006b36:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006b38:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b3c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006b3e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006b40:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b44:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	441a      	add	r2, r3
 8006b50:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006b52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b7c:	867b      	strh	r3, [r7, #50]	; 0x32
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	441a      	add	r2, r3
 8006b88:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	8013      	strh	r3, [r2, #0]
 8006b9e:	e0ba      	b.n	8006d16 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006bb0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d01d      	beq.n	8006bf8 <USB_ActivateEndpoint+0x5a8>
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4413      	add	r3, r2
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	441a      	add	r2, r3
 8006be0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006be4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006be8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	881b      	ldrh	r3, [r3, #0]
 8006c04:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006c08:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d01d      	beq.n	8006c50 <USB_ActivateEndpoint+0x600>
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4413      	add	r3, r2
 8006c1e:	881b      	ldrh	r3, [r3, #0]
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c2a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	441a      	add	r2, r3
 8006c38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	78db      	ldrb	r3, [r3, #3]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d024      	beq.n	8006ca2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	881b      	ldrh	r3, [r3, #0]
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c6e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006c72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006c76:	f083 0320 	eor.w	r3, r3, #32
 8006c7a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	441a      	add	r2, r3
 8006c88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006c8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	8013      	strh	r3, [r2, #0]
 8006ca0:	e01d      	b.n	8006cde <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4413      	add	r3, r2
 8006cac:	881b      	ldrh	r3, [r3, #0]
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cb8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	441a      	add	r2, r3
 8006cc6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	441a      	add	r2, r3
 8006d00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006d02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006d16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	376c      	adds	r7, #108	; 0x6c
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bc80      	pop	{r7}
 8006d22:	4770      	bx	lr

08006d24 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b08d      	sub	sp, #52	; 0x34
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	7b1b      	ldrb	r3, [r3, #12]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f040 808e 	bne.w	8006e54 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	785b      	ldrb	r3, [r3, #1]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d044      	beq.n	8006dca <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4413      	add	r3, r2
 8006d4a:	881b      	ldrh	r3, [r3, #0]
 8006d4c:	81bb      	strh	r3, [r7, #12]
 8006d4e:	89bb      	ldrh	r3, [r7, #12]
 8006d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d01b      	beq.n	8006d90 <USB_DeactivateEndpoint+0x6c>
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	881b      	ldrh	r3, [r3, #0]
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d6e:	817b      	strh	r3, [r7, #10]
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	441a      	add	r2, r3
 8006d7a:	897b      	ldrh	r3, [r7, #10]
 8006d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	881b      	ldrh	r3, [r3, #0]
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006da6:	813b      	strh	r3, [r7, #8]
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	441a      	add	r2, r3
 8006db2:	893b      	ldrh	r3, [r7, #8]
 8006db4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006db8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	8013      	strh	r3, [r2, #0]
 8006dc8:	e192      	b.n	80070f0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	881b      	ldrh	r3, [r3, #0]
 8006dd6:	827b      	strh	r3, [r7, #18]
 8006dd8:	8a7b      	ldrh	r3, [r7, #18]
 8006dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d01b      	beq.n	8006e1a <USB_DeactivateEndpoint+0xf6>
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4413      	add	r3, r2
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df8:	823b      	strh	r3, [r7, #16]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	441a      	add	r2, r3
 8006e04:	8a3b      	ldrh	r3, [r7, #16]
 8006e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	881b      	ldrh	r3, [r3, #0]
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e30:	81fb      	strh	r3, [r7, #14]
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	441a      	add	r2, r3
 8006e3c:	89fb      	ldrh	r3, [r7, #14]
 8006e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	8013      	strh	r3, [r2, #0]
 8006e52:	e14d      	b.n	80070f0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	785b      	ldrb	r3, [r3, #1]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f040 80a5 	bne.w	8006fa8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4413      	add	r3, r2
 8006e68:	881b      	ldrh	r3, [r3, #0]
 8006e6a:	843b      	strh	r3, [r7, #32]
 8006e6c:	8c3b      	ldrh	r3, [r7, #32]
 8006e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d01b      	beq.n	8006eae <USB_DeactivateEndpoint+0x18a>
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4413      	add	r3, r2
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8c:	83fb      	strh	r3, [r7, #30]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	441a      	add	r2, r3
 8006e98:	8bfb      	ldrh	r3, [r7, #30]
 8006e9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ea2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	881b      	ldrh	r3, [r3, #0]
 8006eba:	83bb      	strh	r3, [r7, #28]
 8006ebc:	8bbb      	ldrh	r3, [r7, #28]
 8006ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d01b      	beq.n	8006efe <USB_DeactivateEndpoint+0x1da>
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006edc:	837b      	strh	r3, [r7, #26]
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	441a      	add	r2, r3
 8006ee8:	8b7b      	ldrh	r3, [r7, #26]
 8006eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ef6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f14:	833b      	strh	r3, [r7, #24]
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	441a      	add	r2, r3
 8006f20:	8b3b      	ldrh	r3, [r7, #24]
 8006f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f4c:	82fb      	strh	r3, [r7, #22]
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	441a      	add	r2, r3
 8006f58:	8afb      	ldrh	r3, [r7, #22]
 8006f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	881b      	ldrh	r3, [r3, #0]
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f84:	82bb      	strh	r3, [r7, #20]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	441a      	add	r2, r3
 8006f90:	8abb      	ldrh	r3, [r7, #20]
 8006f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	8013      	strh	r3, [r2, #0]
 8006fa6:	e0a3      	b.n	80070f0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	881b      	ldrh	r3, [r3, #0]
 8006fb4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006fb6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d01b      	beq.n	8006ff8 <USB_DeactivateEndpoint+0x2d4>
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	881b      	ldrh	r3, [r3, #0]
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	441a      	add	r2, r3
 8006fe2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	4413      	add	r3, r2
 8007002:	881b      	ldrh	r3, [r3, #0]
 8007004:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007006:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700c:	2b00      	cmp	r3, #0
 800700e:	d01b      	beq.n	8007048 <USB_DeactivateEndpoint+0x324>
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	b29b      	uxth	r3, r3
 800701e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007026:	853b      	strh	r3, [r7, #40]	; 0x28
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	441a      	add	r2, r3
 8007032:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800703c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007040:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007044:	b29b      	uxth	r3, r3
 8007046:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	b29b      	uxth	r3, r3
 8007056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800705a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	441a      	add	r2, r3
 800706a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800706c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007074:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800707c:	b29b      	uxth	r3, r3
 800707e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	b29b      	uxth	r3, r3
 800708e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007096:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	441a      	add	r2, r3
 80070a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	441a      	add	r2, r3
 80070da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3734      	adds	r7, #52	; 0x34
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bc80      	pop	{r7}
 80070fa:	4770      	bx	lr

080070fc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b0c4      	sub	sp, #272	; 0x110
 8007100:	af00      	add	r7, sp, #0
 8007102:	1d3b      	adds	r3, r7, #4
 8007104:	6018      	str	r0, [r3, #0]
 8007106:	463b      	mov	r3, r7
 8007108:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800710a:	463b      	mov	r3, r7
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	785b      	ldrb	r3, [r3, #1]
 8007110:	2b01      	cmp	r3, #1
 8007112:	f040 8557 	bne.w	8007bc4 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007116:	463b      	mov	r3, r7
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	699a      	ldr	r2, [r3, #24]
 800711c:	463b      	mov	r3, r7
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	429a      	cmp	r2, r3
 8007124:	d905      	bls.n	8007132 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8007126:	463b      	mov	r3, r7
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007130:	e004      	b.n	800713c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007132:	463b      	mov	r3, r7
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800713c:	463b      	mov	r3, r7
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	7b1b      	ldrb	r3, [r3, #12]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d12c      	bne.n	80071a0 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007146:	463b      	mov	r3, r7
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6959      	ldr	r1, [r3, #20]
 800714c:	463b      	mov	r3, r7
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	88da      	ldrh	r2, [r3, #6]
 8007152:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007156:	b29b      	uxth	r3, r3
 8007158:	1d38      	adds	r0, r7, #4
 800715a:	6800      	ldr	r0, [r0, #0]
 800715c:	f001 fa2c 	bl	80085b8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007160:	1d3b      	adds	r3, r7, #4
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	617b      	str	r3, [r7, #20]
 8007166:	1d3b      	adds	r3, r7, #4
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800716e:	b29b      	uxth	r3, r3
 8007170:	461a      	mov	r2, r3
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	4413      	add	r3, r2
 8007176:	617b      	str	r3, [r7, #20]
 8007178:	463b      	mov	r3, r7
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	011a      	lsls	r2, r3, #4
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	4413      	add	r3, r2
 8007184:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007188:	f107 0310 	add.w	r3, r7, #16
 800718c:	601a      	str	r2, [r3, #0]
 800718e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007192:	b29a      	uxth	r2, r3
 8007194:	f107 0310 	add.w	r3, r7, #16
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	801a      	strh	r2, [r3, #0]
 800719c:	f000 bcdd 	b.w	8007b5a <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80071a0:	463b      	mov	r3, r7
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	78db      	ldrb	r3, [r3, #3]
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	f040 8347 	bne.w	800783a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80071ac:	463b      	mov	r3, r7
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6a1a      	ldr	r2, [r3, #32]
 80071b2:	463b      	mov	r3, r7
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	f240 82eb 	bls.w	8007794 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80071be:	1d3b      	adds	r3, r7, #4
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	463b      	mov	r3, r7
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	881b      	ldrh	r3, [r3, #0]
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071d8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80071dc:	1d3b      	adds	r3, r7, #4
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	463b      	mov	r3, r7
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	441a      	add	r2, r3
 80071ea:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80071ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071f6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80071fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071fe:	b29b      	uxth	r3, r3
 8007200:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007202:	463b      	mov	r3, r7
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	6a1a      	ldr	r2, [r3, #32]
 8007208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800720c:	1ad2      	subs	r2, r2, r3
 800720e:	463b      	mov	r3, r7
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007214:	1d3b      	adds	r3, r7, #4
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	463b      	mov	r3, r7
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	4413      	add	r3, r2
 8007222:	881b      	ldrh	r3, [r3, #0]
 8007224:	b29b      	uxth	r3, r3
 8007226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722a:	2b00      	cmp	r3, #0
 800722c:	f000 8159 	beq.w	80074e2 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007230:	1d3b      	adds	r3, r7, #4
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	637b      	str	r3, [r7, #52]	; 0x34
 8007236:	463b      	mov	r3, r7
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	785b      	ldrb	r3, [r3, #1]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d164      	bne.n	800730a <USB_EPStartXfer+0x20e>
 8007240:	1d3b      	adds	r3, r7, #4
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007246:	1d3b      	adds	r3, r7, #4
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800724e:	b29b      	uxth	r3, r3
 8007250:	461a      	mov	r2, r3
 8007252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007254:	4413      	add	r3, r2
 8007256:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007258:	463b      	mov	r3, r7
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	011a      	lsls	r2, r3, #4
 8007260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007262:	4413      	add	r3, r2
 8007264:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007268:	62bb      	str	r3, [r7, #40]	; 0x28
 800726a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800726e:	2b00      	cmp	r3, #0
 8007270:	d112      	bne.n	8007298 <USB_EPStartXfer+0x19c>
 8007272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	b29b      	uxth	r3, r3
 8007278:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800727c:	b29a      	uxth	r2, r3
 800727e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007280:	801a      	strh	r2, [r3, #0]
 8007282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007284:	881b      	ldrh	r3, [r3, #0]
 8007286:	b29b      	uxth	r3, r3
 8007288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800728c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007290:	b29a      	uxth	r2, r3
 8007292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007294:	801a      	strh	r2, [r3, #0]
 8007296:	e054      	b.n	8007342 <USB_EPStartXfer+0x246>
 8007298:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800729c:	2b3e      	cmp	r3, #62	; 0x3e
 800729e:	d817      	bhi.n	80072d0 <USB_EPStartXfer+0x1d4>
 80072a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072a4:	085b      	lsrs	r3, r3, #1
 80072a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80072aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d004      	beq.n	80072c0 <USB_EPStartXfer+0x1c4>
 80072b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ba:	3301      	adds	r3, #1
 80072bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80072c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	029b      	lsls	r3, r3, #10
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072cc:	801a      	strh	r2, [r3, #0]
 80072ce:	e038      	b.n	8007342 <USB_EPStartXfer+0x246>
 80072d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072d4:	095b      	lsrs	r3, r3, #5
 80072d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80072da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072de:	f003 031f 	and.w	r3, r3, #31
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d104      	bne.n	80072f0 <USB_EPStartXfer+0x1f4>
 80072e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ea:	3b01      	subs	r3, #1
 80072ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80072f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	029b      	lsls	r3, r3, #10
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007302:	b29a      	uxth	r2, r3
 8007304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007306:	801a      	strh	r2, [r3, #0]
 8007308:	e01b      	b.n	8007342 <USB_EPStartXfer+0x246>
 800730a:	463b      	mov	r3, r7
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	785b      	ldrb	r3, [r3, #1]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d116      	bne.n	8007342 <USB_EPStartXfer+0x246>
 8007314:	1d3b      	adds	r3, r7, #4
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800731c:	b29b      	uxth	r3, r3
 800731e:	461a      	mov	r2, r3
 8007320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007322:	4413      	add	r3, r2
 8007324:	637b      	str	r3, [r7, #52]	; 0x34
 8007326:	463b      	mov	r3, r7
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	011a      	lsls	r2, r3, #4
 800732e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007330:	4413      	add	r3, r2
 8007332:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007336:	633b      	str	r3, [r7, #48]	; 0x30
 8007338:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800733c:	b29a      	uxth	r2, r3
 800733e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007340:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007342:	463b      	mov	r3, r7
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	895b      	ldrh	r3, [r3, #10]
 8007348:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800734c:	463b      	mov	r3, r7
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6959      	ldr	r1, [r3, #20]
 8007352:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007356:	b29b      	uxth	r3, r3
 8007358:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800735c:	1d38      	adds	r0, r7, #4
 800735e:	6800      	ldr	r0, [r0, #0]
 8007360:	f001 f92a 	bl	80085b8 <USB_WritePMA>
            ep->xfer_buff += len;
 8007364:	463b      	mov	r3, r7
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	695a      	ldr	r2, [r3, #20]
 800736a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800736e:	441a      	add	r2, r3
 8007370:	463b      	mov	r3, r7
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007376:	463b      	mov	r3, r7
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	6a1a      	ldr	r2, [r3, #32]
 800737c:	463b      	mov	r3, r7
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	429a      	cmp	r2, r3
 8007384:	d909      	bls.n	800739a <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8007386:	463b      	mov	r3, r7
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	6a1a      	ldr	r2, [r3, #32]
 800738c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007390:	1ad2      	subs	r2, r2, r3
 8007392:	463b      	mov	r3, r7
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	621a      	str	r2, [r3, #32]
 8007398:	e008      	b.n	80073ac <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800739a:	463b      	mov	r3, r7
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	6a1b      	ldr	r3, [r3, #32]
 80073a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80073a4:	463b      	mov	r3, r7
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2200      	movs	r2, #0
 80073aa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80073ac:	463b      	mov	r3, r7
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	785b      	ldrb	r3, [r3, #1]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d164      	bne.n	8007480 <USB_EPStartXfer+0x384>
 80073b6:	1d3b      	adds	r3, r7, #4
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	61fb      	str	r3, [r7, #28]
 80073bc:	1d3b      	adds	r3, r7, #4
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	461a      	mov	r2, r3
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	4413      	add	r3, r2
 80073cc:	61fb      	str	r3, [r7, #28]
 80073ce:	463b      	mov	r3, r7
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	011a      	lsls	r2, r3, #4
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	4413      	add	r3, r2
 80073da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80073de:	61bb      	str	r3, [r7, #24]
 80073e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d112      	bne.n	800740e <USB_EPStartXfer+0x312>
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	881b      	ldrh	r3, [r3, #0]
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	801a      	strh	r2, [r3, #0]
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	881b      	ldrh	r3, [r3, #0]
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007406:	b29a      	uxth	r2, r3
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	801a      	strh	r2, [r3, #0]
 800740c:	e057      	b.n	80074be <USB_EPStartXfer+0x3c2>
 800740e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007412:	2b3e      	cmp	r3, #62	; 0x3e
 8007414:	d817      	bhi.n	8007446 <USB_EPStartXfer+0x34a>
 8007416:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800741a:	085b      	lsrs	r3, r3, #1
 800741c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007420:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007424:	f003 0301 	and.w	r3, r3, #1
 8007428:	2b00      	cmp	r3, #0
 800742a:	d004      	beq.n	8007436 <USB_EPStartXfer+0x33a>
 800742c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007430:	3301      	adds	r3, #1
 8007432:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007436:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800743a:	b29b      	uxth	r3, r3
 800743c:	029b      	lsls	r3, r3, #10
 800743e:	b29a      	uxth	r2, r3
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	801a      	strh	r2, [r3, #0]
 8007444:	e03b      	b.n	80074be <USB_EPStartXfer+0x3c2>
 8007446:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800744a:	095b      	lsrs	r3, r3, #5
 800744c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007454:	f003 031f 	and.w	r3, r3, #31
 8007458:	2b00      	cmp	r3, #0
 800745a:	d104      	bne.n	8007466 <USB_EPStartXfer+0x36a>
 800745c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007460:	3b01      	subs	r3, #1
 8007462:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007466:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800746a:	b29b      	uxth	r3, r3
 800746c:	029b      	lsls	r3, r3, #10
 800746e:	b29b      	uxth	r3, r3
 8007470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007478:	b29a      	uxth	r2, r3
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	801a      	strh	r2, [r3, #0]
 800747e:	e01e      	b.n	80074be <USB_EPStartXfer+0x3c2>
 8007480:	463b      	mov	r3, r7
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	785b      	ldrb	r3, [r3, #1]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d119      	bne.n	80074be <USB_EPStartXfer+0x3c2>
 800748a:	1d3b      	adds	r3, r7, #4
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	627b      	str	r3, [r7, #36]	; 0x24
 8007490:	1d3b      	adds	r3, r7, #4
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007498:	b29b      	uxth	r3, r3
 800749a:	461a      	mov	r2, r3
 800749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749e:	4413      	add	r3, r2
 80074a0:	627b      	str	r3, [r7, #36]	; 0x24
 80074a2:	463b      	mov	r3, r7
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	011a      	lsls	r2, r3, #4
 80074aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ac:	4413      	add	r3, r2
 80074ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074b2:	623b      	str	r3, [r7, #32]
 80074b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80074be:	463b      	mov	r3, r7
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	891b      	ldrh	r3, [r3, #8]
 80074c4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074c8:	463b      	mov	r3, r7
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6959      	ldr	r1, [r3, #20]
 80074ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80074d8:	1d38      	adds	r0, r7, #4
 80074da:	6800      	ldr	r0, [r0, #0]
 80074dc:	f001 f86c 	bl	80085b8 <USB_WritePMA>
 80074e0:	e33b      	b.n	8007b5a <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80074e2:	463b      	mov	r3, r7
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	785b      	ldrb	r3, [r3, #1]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d164      	bne.n	80075b6 <USB_EPStartXfer+0x4ba>
 80074ec:	1d3b      	adds	r3, r7, #4
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074f2:	1d3b      	adds	r3, r7, #4
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	461a      	mov	r2, r3
 80074fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007500:	4413      	add	r3, r2
 8007502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007504:	463b      	mov	r3, r7
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	011a      	lsls	r2, r3, #4
 800750c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800750e:	4413      	add	r3, r2
 8007510:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007514:	64bb      	str	r3, [r7, #72]	; 0x48
 8007516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800751a:	2b00      	cmp	r3, #0
 800751c:	d112      	bne.n	8007544 <USB_EPStartXfer+0x448>
 800751e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007520:	881b      	ldrh	r3, [r3, #0]
 8007522:	b29b      	uxth	r3, r3
 8007524:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007528:	b29a      	uxth	r2, r3
 800752a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800752c:	801a      	strh	r2, [r3, #0]
 800752e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007530:	881b      	ldrh	r3, [r3, #0]
 8007532:	b29b      	uxth	r3, r3
 8007534:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007538:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800753c:	b29a      	uxth	r2, r3
 800753e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007540:	801a      	strh	r2, [r3, #0]
 8007542:	e057      	b.n	80075f4 <USB_EPStartXfer+0x4f8>
 8007544:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007548:	2b3e      	cmp	r3, #62	; 0x3e
 800754a:	d817      	bhi.n	800757c <USB_EPStartXfer+0x480>
 800754c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007550:	085b      	lsrs	r3, r3, #1
 8007552:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007556:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	2b00      	cmp	r3, #0
 8007560:	d004      	beq.n	800756c <USB_EPStartXfer+0x470>
 8007562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007566:	3301      	adds	r3, #1
 8007568:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800756c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007570:	b29b      	uxth	r3, r3
 8007572:	029b      	lsls	r3, r3, #10
 8007574:	b29a      	uxth	r2, r3
 8007576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007578:	801a      	strh	r2, [r3, #0]
 800757a:	e03b      	b.n	80075f4 <USB_EPStartXfer+0x4f8>
 800757c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007580:	095b      	lsrs	r3, r3, #5
 8007582:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007586:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800758a:	f003 031f 	and.w	r3, r3, #31
 800758e:	2b00      	cmp	r3, #0
 8007590:	d104      	bne.n	800759c <USB_EPStartXfer+0x4a0>
 8007592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007596:	3b01      	subs	r3, #1
 8007598:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800759c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	029b      	lsls	r3, r3, #10
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075b2:	801a      	strh	r2, [r3, #0]
 80075b4:	e01e      	b.n	80075f4 <USB_EPStartXfer+0x4f8>
 80075b6:	463b      	mov	r3, r7
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	785b      	ldrb	r3, [r3, #1]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d119      	bne.n	80075f4 <USB_EPStartXfer+0x4f8>
 80075c0:	1d3b      	adds	r3, r7, #4
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	657b      	str	r3, [r7, #84]	; 0x54
 80075c6:	1d3b      	adds	r3, r7, #4
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	461a      	mov	r2, r3
 80075d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075d4:	4413      	add	r3, r2
 80075d6:	657b      	str	r3, [r7, #84]	; 0x54
 80075d8:	463b      	mov	r3, r7
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	011a      	lsls	r2, r3, #4
 80075e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075e2:	4413      	add	r3, r2
 80075e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075e8:	653b      	str	r3, [r7, #80]	; 0x50
 80075ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80075f4:	463b      	mov	r3, r7
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	891b      	ldrh	r3, [r3, #8]
 80075fa:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075fe:	463b      	mov	r3, r7
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	6959      	ldr	r1, [r3, #20]
 8007604:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007608:	b29b      	uxth	r3, r3
 800760a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800760e:	1d38      	adds	r0, r7, #4
 8007610:	6800      	ldr	r0, [r0, #0]
 8007612:	f000 ffd1 	bl	80085b8 <USB_WritePMA>
            ep->xfer_buff += len;
 8007616:	463b      	mov	r3, r7
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	695a      	ldr	r2, [r3, #20]
 800761c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007620:	441a      	add	r2, r3
 8007622:	463b      	mov	r3, r7
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007628:	463b      	mov	r3, r7
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6a1a      	ldr	r2, [r3, #32]
 800762e:	463b      	mov	r3, r7
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	429a      	cmp	r2, r3
 8007636:	d909      	bls.n	800764c <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8007638:	463b      	mov	r3, r7
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6a1a      	ldr	r2, [r3, #32]
 800763e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007642:	1ad2      	subs	r2, r2, r3
 8007644:	463b      	mov	r3, r7
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	621a      	str	r2, [r3, #32]
 800764a:	e008      	b.n	800765e <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 800764c:	463b      	mov	r3, r7
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8007656:	463b      	mov	r3, r7
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2200      	movs	r2, #0
 800765c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800765e:	1d3b      	adds	r3, r7, #4
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	647b      	str	r3, [r7, #68]	; 0x44
 8007664:	463b      	mov	r3, r7
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	785b      	ldrb	r3, [r3, #1]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d164      	bne.n	8007738 <USB_EPStartXfer+0x63c>
 800766e:	1d3b      	adds	r3, r7, #4
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007674:	1d3b      	adds	r3, r7, #4
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800767c:	b29b      	uxth	r3, r3
 800767e:	461a      	mov	r2, r3
 8007680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007682:	4413      	add	r3, r2
 8007684:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007686:	463b      	mov	r3, r7
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	011a      	lsls	r2, r3, #4
 800768e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007690:	4413      	add	r3, r2
 8007692:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007696:	63bb      	str	r3, [r7, #56]	; 0x38
 8007698:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800769c:	2b00      	cmp	r3, #0
 800769e:	d112      	bne.n	80076c6 <USB_EPStartXfer+0x5ca>
 80076a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ae:	801a      	strh	r2, [r3, #0]
 80076b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076be:	b29a      	uxth	r2, r3
 80076c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c2:	801a      	strh	r2, [r3, #0]
 80076c4:	e054      	b.n	8007770 <USB_EPStartXfer+0x674>
 80076c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076ca:	2b3e      	cmp	r3, #62	; 0x3e
 80076cc:	d817      	bhi.n	80076fe <USB_EPStartXfer+0x602>
 80076ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076d2:	085b      	lsrs	r3, r3, #1
 80076d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80076d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076dc:	f003 0301 	and.w	r3, r3, #1
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d004      	beq.n	80076ee <USB_EPStartXfer+0x5f2>
 80076e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80076e8:	3301      	adds	r3, #1
 80076ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80076ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	029b      	lsls	r3, r3, #10
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fa:	801a      	strh	r2, [r3, #0]
 80076fc:	e038      	b.n	8007770 <USB_EPStartXfer+0x674>
 80076fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007702:	095b      	lsrs	r3, r3, #5
 8007704:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007708:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800770c:	f003 031f 	and.w	r3, r3, #31
 8007710:	2b00      	cmp	r3, #0
 8007712:	d104      	bne.n	800771e <USB_EPStartXfer+0x622>
 8007714:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007718:	3b01      	subs	r3, #1
 800771a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800771e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007722:	b29b      	uxth	r3, r3
 8007724:	029b      	lsls	r3, r3, #10
 8007726:	b29b      	uxth	r3, r3
 8007728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800772c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007730:	b29a      	uxth	r2, r3
 8007732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007734:	801a      	strh	r2, [r3, #0]
 8007736:	e01b      	b.n	8007770 <USB_EPStartXfer+0x674>
 8007738:	463b      	mov	r3, r7
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	785b      	ldrb	r3, [r3, #1]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d116      	bne.n	8007770 <USB_EPStartXfer+0x674>
 8007742:	1d3b      	adds	r3, r7, #4
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800774a:	b29b      	uxth	r3, r3
 800774c:	461a      	mov	r2, r3
 800774e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007750:	4413      	add	r3, r2
 8007752:	647b      	str	r3, [r7, #68]	; 0x44
 8007754:	463b      	mov	r3, r7
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	011a      	lsls	r2, r3, #4
 800775c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800775e:	4413      	add	r3, r2
 8007760:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007764:	643b      	str	r3, [r7, #64]	; 0x40
 8007766:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800776a:	b29a      	uxth	r2, r3
 800776c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800776e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007770:	463b      	mov	r3, r7
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	895b      	ldrh	r3, [r3, #10]
 8007776:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800777a:	463b      	mov	r3, r7
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	6959      	ldr	r1, [r3, #20]
 8007780:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007784:	b29b      	uxth	r3, r3
 8007786:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800778a:	1d38      	adds	r0, r7, #4
 800778c:	6800      	ldr	r0, [r0, #0]
 800778e:	f000 ff13 	bl	80085b8 <USB_WritePMA>
 8007792:	e1e2      	b.n	8007b5a <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007794:	463b      	mov	r3, r7
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800779e:	1d3b      	adds	r3, r7, #4
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	463b      	mov	r3, r7
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	4413      	add	r3, r2
 80077ac:	881b      	ldrh	r3, [r3, #0]
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80077b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80077bc:	1d3b      	adds	r3, r7, #4
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	463b      	mov	r3, r7
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	441a      	add	r2, r3
 80077ca:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80077ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077de:	b29b      	uxth	r3, r3
 80077e0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80077e2:	1d3b      	adds	r3, r7, #4
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	663b      	str	r3, [r7, #96]	; 0x60
 80077e8:	1d3b      	adds	r3, r7, #4
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	461a      	mov	r2, r3
 80077f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077f6:	4413      	add	r3, r2
 80077f8:	663b      	str	r3, [r7, #96]	; 0x60
 80077fa:	463b      	mov	r3, r7
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	011a      	lsls	r2, r3, #4
 8007802:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007804:	4413      	add	r3, r2
 8007806:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800780a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800780c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007810:	b29a      	uxth	r2, r3
 8007812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007814:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007816:	463b      	mov	r3, r7
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	891b      	ldrh	r3, [r3, #8]
 800781c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007820:	463b      	mov	r3, r7
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	6959      	ldr	r1, [r3, #20]
 8007826:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800782a:	b29b      	uxth	r3, r3
 800782c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007830:	1d38      	adds	r0, r7, #4
 8007832:	6800      	ldr	r0, [r0, #0]
 8007834:	f000 fec0 	bl	80085b8 <USB_WritePMA>
 8007838:	e18f      	b.n	8007b5a <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800783a:	1d3b      	adds	r3, r7, #4
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	463b      	mov	r3, r7
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	4413      	add	r3, r2
 8007848:	881b      	ldrh	r3, [r3, #0]
 800784a:	b29b      	uxth	r3, r3
 800784c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007850:	2b00      	cmp	r3, #0
 8007852:	f000 808f 	beq.w	8007974 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007856:	1d3b      	adds	r3, r7, #4
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	67bb      	str	r3, [r7, #120]	; 0x78
 800785c:	463b      	mov	r3, r7
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	785b      	ldrb	r3, [r3, #1]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d164      	bne.n	8007930 <USB_EPStartXfer+0x834>
 8007866:	1d3b      	adds	r3, r7, #4
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	673b      	str	r3, [r7, #112]	; 0x70
 800786c:	1d3b      	adds	r3, r7, #4
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007874:	b29b      	uxth	r3, r3
 8007876:	461a      	mov	r2, r3
 8007878:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800787a:	4413      	add	r3, r2
 800787c:	673b      	str	r3, [r7, #112]	; 0x70
 800787e:	463b      	mov	r3, r7
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	011a      	lsls	r2, r3, #4
 8007886:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007888:	4413      	add	r3, r2
 800788a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800788e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007890:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007894:	2b00      	cmp	r3, #0
 8007896:	d112      	bne.n	80078be <USB_EPStartXfer+0x7c2>
 8007898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	b29b      	uxth	r3, r3
 800789e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078a6:	801a      	strh	r2, [r3, #0]
 80078a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078aa:	881b      	ldrh	r3, [r3, #0]
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ba:	801a      	strh	r2, [r3, #0]
 80078bc:	e054      	b.n	8007968 <USB_EPStartXfer+0x86c>
 80078be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078c2:	2b3e      	cmp	r3, #62	; 0x3e
 80078c4:	d817      	bhi.n	80078f6 <USB_EPStartXfer+0x7fa>
 80078c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078ca:	085b      	lsrs	r3, r3, #1
 80078cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80078d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078d4:	f003 0301 	and.w	r3, r3, #1
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d004      	beq.n	80078e6 <USB_EPStartXfer+0x7ea>
 80078dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078e0:	3301      	adds	r3, #1
 80078e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80078e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	029b      	lsls	r3, r3, #10
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078f2:	801a      	strh	r2, [r3, #0]
 80078f4:	e038      	b.n	8007968 <USB_EPStartXfer+0x86c>
 80078f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078fa:	095b      	lsrs	r3, r3, #5
 80078fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007900:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007904:	f003 031f 	and.w	r3, r3, #31
 8007908:	2b00      	cmp	r3, #0
 800790a:	d104      	bne.n	8007916 <USB_EPStartXfer+0x81a>
 800790c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007910:	3b01      	subs	r3, #1
 8007912:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800791a:	b29b      	uxth	r3, r3
 800791c:	029b      	lsls	r3, r3, #10
 800791e:	b29b      	uxth	r3, r3
 8007920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007928:	b29a      	uxth	r2, r3
 800792a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800792c:	801a      	strh	r2, [r3, #0]
 800792e:	e01b      	b.n	8007968 <USB_EPStartXfer+0x86c>
 8007930:	463b      	mov	r3, r7
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	785b      	ldrb	r3, [r3, #1]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d116      	bne.n	8007968 <USB_EPStartXfer+0x86c>
 800793a:	1d3b      	adds	r3, r7, #4
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007942:	b29b      	uxth	r3, r3
 8007944:	461a      	mov	r2, r3
 8007946:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007948:	4413      	add	r3, r2
 800794a:	67bb      	str	r3, [r7, #120]	; 0x78
 800794c:	463b      	mov	r3, r7
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	011a      	lsls	r2, r3, #4
 8007954:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007956:	4413      	add	r3, r2
 8007958:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800795c:	677b      	str	r3, [r7, #116]	; 0x74
 800795e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007962:	b29a      	uxth	r2, r3
 8007964:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007966:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007968:	463b      	mov	r3, r7
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	895b      	ldrh	r3, [r3, #10]
 800796e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8007972:	e097      	b.n	8007aa4 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007974:	463b      	mov	r3, r7
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	785b      	ldrb	r3, [r3, #1]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d168      	bne.n	8007a50 <USB_EPStartXfer+0x954>
 800797e:	1d3b      	adds	r3, r7, #4
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007986:	1d3b      	adds	r3, r7, #4
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800798e:	b29b      	uxth	r3, r3
 8007990:	461a      	mov	r2, r3
 8007992:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007996:	4413      	add	r3, r2
 8007998:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800799c:	463b      	mov	r3, r7
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	011a      	lsls	r2, r3, #4
 80079a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80079a8:	4413      	add	r3, r2
 80079aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80079b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d112      	bne.n	80079de <USB_EPStartXfer+0x8e2>
 80079b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	b29b      	uxth	r3, r3
 80079be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079c6:	801a      	strh	r2, [r3, #0]
 80079c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079ca:	881b      	ldrh	r3, [r3, #0]
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079da:	801a      	strh	r2, [r3, #0]
 80079dc:	e05d      	b.n	8007a9a <USB_EPStartXfer+0x99e>
 80079de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079e2:	2b3e      	cmp	r3, #62	; 0x3e
 80079e4:	d817      	bhi.n	8007a16 <USB_EPStartXfer+0x91a>
 80079e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079ea:	085b      	lsrs	r3, r3, #1
 80079ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80079f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079f4:	f003 0301 	and.w	r3, r3, #1
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d004      	beq.n	8007a06 <USB_EPStartXfer+0x90a>
 80079fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007a00:	3301      	adds	r3, #1
 8007a02:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007a06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	029b      	lsls	r3, r3, #10
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a12:	801a      	strh	r2, [r3, #0]
 8007a14:	e041      	b.n	8007a9a <USB_EPStartXfer+0x99e>
 8007a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a1a:	095b      	lsrs	r3, r3, #5
 8007a1c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a24:	f003 031f 	and.w	r3, r3, #31
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d104      	bne.n	8007a36 <USB_EPStartXfer+0x93a>
 8007a2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007a30:	3b01      	subs	r3, #1
 8007a32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007a36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	029b      	lsls	r3, r3, #10
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a4c:	801a      	strh	r2, [r3, #0]
 8007a4e:	e024      	b.n	8007a9a <USB_EPStartXfer+0x99e>
 8007a50:	463b      	mov	r3, r7
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	785b      	ldrb	r3, [r3, #1]
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d11f      	bne.n	8007a9a <USB_EPStartXfer+0x99e>
 8007a5a:	1d3b      	adds	r3, r7, #4
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a62:	1d3b      	adds	r3, r7, #4
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a72:	4413      	add	r3, r2
 8007a74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a78:	463b      	mov	r3, r7
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	011a      	lsls	r2, r3, #4
 8007a80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a84:	4413      	add	r3, r2
 8007a86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a98:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a9a:	463b      	mov	r3, r7
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	891b      	ldrh	r3, [r3, #8]
 8007aa0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007aa4:	463b      	mov	r3, r7
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	6959      	ldr	r1, [r3, #20]
 8007aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007ab4:	1d38      	adds	r0, r7, #4
 8007ab6:	6800      	ldr	r0, [r0, #0]
 8007ab8:	f000 fd7e 	bl	80085b8 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007abc:	463b      	mov	r3, r7
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	785b      	ldrb	r3, [r3, #1]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d122      	bne.n	8007b0c <USB_EPStartXfer+0xa10>
 8007ac6:	1d3b      	adds	r3, r7, #4
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	463b      	mov	r3, r7
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	881b      	ldrh	r3, [r3, #0]
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ae0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8007ae4:	1d3b      	adds	r3, r7, #4
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	463b      	mov	r3, r7
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	441a      	add	r2, r3
 8007af2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8007af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	8013      	strh	r3, [r2, #0]
 8007b0a:	e026      	b.n	8007b5a <USB_EPStartXfer+0xa5e>
 8007b0c:	463b      	mov	r3, r7
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	785b      	ldrb	r3, [r3, #1]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d121      	bne.n	8007b5a <USB_EPStartXfer+0xa5e>
 8007b16:	1d3b      	adds	r3, r7, #4
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	463b      	mov	r3, r7
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4413      	add	r3, r2
 8007b24:	881b      	ldrh	r3, [r3, #0]
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b30:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8007b34:	1d3b      	adds	r3, r7, #4
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	463b      	mov	r3, r7
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	441a      	add	r2, r3
 8007b42:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8007b46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007b5a:	1d3b      	adds	r3, r7, #4
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	463b      	mov	r3, r7
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4413      	add	r3, r2
 8007b68:	881b      	ldrh	r3, [r3, #0]
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	f107 020e 	add.w	r2, r7, #14
 8007b70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b78:	8013      	strh	r3, [r2, #0]
 8007b7a:	f107 030e 	add.w	r3, r7, #14
 8007b7e:	f107 020e 	add.w	r2, r7, #14
 8007b82:	8812      	ldrh	r2, [r2, #0]
 8007b84:	f082 0210 	eor.w	r2, r2, #16
 8007b88:	801a      	strh	r2, [r3, #0]
 8007b8a:	f107 030e 	add.w	r3, r7, #14
 8007b8e:	f107 020e 	add.w	r2, r7, #14
 8007b92:	8812      	ldrh	r2, [r2, #0]
 8007b94:	f082 0220 	eor.w	r2, r2, #32
 8007b98:	801a      	strh	r2, [r3, #0]
 8007b9a:	1d3b      	adds	r3, r7, #4
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	463b      	mov	r3, r7
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	441a      	add	r2, r3
 8007ba8:	f107 030e 	add.w	r3, r7, #14
 8007bac:	881b      	ldrh	r3, [r3, #0]
 8007bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	8013      	strh	r3, [r2, #0]
 8007bc2:	e3b5      	b.n	8008330 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007bc4:	463b      	mov	r3, r7
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	7b1b      	ldrb	r3, [r3, #12]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f040 8090 	bne.w	8007cf0 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007bd0:	463b      	mov	r3, r7
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	699a      	ldr	r2, [r3, #24]
 8007bd6:	463b      	mov	r3, r7
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d90e      	bls.n	8007bfe <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8007be0:	463b      	mov	r3, r7
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8007bea:	463b      	mov	r3, r7
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	699a      	ldr	r2, [r3, #24]
 8007bf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bf4:	1ad2      	subs	r2, r2, r3
 8007bf6:	463b      	mov	r3, r7
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	619a      	str	r2, [r3, #24]
 8007bfc:	e008      	b.n	8007c10 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8007bfe:	463b      	mov	r3, r7
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8007c08:	463b      	mov	r3, r7
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007c10:	1d3b      	adds	r3, r7, #4
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c18:	1d3b      	adds	r3, r7, #4
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	461a      	mov	r2, r3
 8007c24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c28:	4413      	add	r3, r2
 8007c2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c2e:	463b      	mov	r3, r7
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	011a      	lsls	r2, r3, #4
 8007c36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d116      	bne.n	8007c7a <USB_EPStartXfer+0xb7e>
 8007c4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c50:	881b      	ldrh	r3, [r3, #0]
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c5e:	801a      	strh	r2, [r3, #0]
 8007c60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c64:	881b      	ldrh	r3, [r3, #0]
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c76:	801a      	strh	r2, [r3, #0]
 8007c78:	e32c      	b.n	80082d4 <USB_EPStartXfer+0x11d8>
 8007c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c7e:	2b3e      	cmp	r3, #62	; 0x3e
 8007c80:	d818      	bhi.n	8007cb4 <USB_EPStartXfer+0xbb8>
 8007c82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c86:	085b      	lsrs	r3, r3, #1
 8007c88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007c8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c90:	f003 0301 	and.w	r3, r3, #1
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d004      	beq.n	8007ca2 <USB_EPStartXfer+0xba6>
 8007c98:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007ca2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	029b      	lsls	r3, r3, #10
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007cb0:	801a      	strh	r2, [r3, #0]
 8007cb2:	e30f      	b.n	80082d4 <USB_EPStartXfer+0x11d8>
 8007cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cb8:	095b      	lsrs	r3, r3, #5
 8007cba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007cbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cc2:	f003 031f 	and.w	r3, r3, #31
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d104      	bne.n	8007cd4 <USB_EPStartXfer+0xbd8>
 8007cca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007cd4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	029b      	lsls	r3, r3, #10
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ce2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007cec:	801a      	strh	r2, [r3, #0]
 8007cee:	e2f1      	b.n	80082d4 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007cf0:	463b      	mov	r3, r7
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	78db      	ldrb	r3, [r3, #3]
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	f040 818f 	bne.w	800801a <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007cfc:	463b      	mov	r3, r7
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	785b      	ldrb	r3, [r3, #1]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d175      	bne.n	8007df2 <USB_EPStartXfer+0xcf6>
 8007d06:	1d3b      	adds	r3, r7, #4
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d0e:	1d3b      	adds	r3, r7, #4
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	461a      	mov	r2, r3
 8007d1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007d1e:	4413      	add	r3, r2
 8007d20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d24:	463b      	mov	r3, r7
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	011a      	lsls	r2, r3, #4
 8007d2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007d30:	4413      	add	r3, r2
 8007d32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d3a:	463b      	mov	r3, r7
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d116      	bne.n	8007d72 <USB_EPStartXfer+0xc76>
 8007d44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d48:	881b      	ldrh	r3, [r3, #0]
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d56:	801a      	strh	r2, [r3, #0]
 8007d58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d5c:	881b      	ldrh	r3, [r3, #0]
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d6e:	801a      	strh	r2, [r3, #0]
 8007d70:	e065      	b.n	8007e3e <USB_EPStartXfer+0xd42>
 8007d72:	463b      	mov	r3, r7
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	2b3e      	cmp	r3, #62	; 0x3e
 8007d7a:	d81a      	bhi.n	8007db2 <USB_EPStartXfer+0xcb6>
 8007d7c:	463b      	mov	r3, r7
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	085b      	lsrs	r3, r3, #1
 8007d84:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d88:	463b      	mov	r3, r7
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	f003 0301 	and.w	r3, r3, #1
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d004      	beq.n	8007da0 <USB_EPStartXfer+0xca4>
 8007d96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007da0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	029b      	lsls	r3, r3, #10
 8007da8:	b29a      	uxth	r2, r3
 8007daa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007dae:	801a      	strh	r2, [r3, #0]
 8007db0:	e045      	b.n	8007e3e <USB_EPStartXfer+0xd42>
 8007db2:	463b      	mov	r3, r7
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	095b      	lsrs	r3, r3, #5
 8007dba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007dbe:	463b      	mov	r3, r7
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	f003 031f 	and.w	r3, r3, #31
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d104      	bne.n	8007dd6 <USB_EPStartXfer+0xcda>
 8007dcc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007dd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	029b      	lsls	r3, r3, #10
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007de4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007dee:	801a      	strh	r2, [r3, #0]
 8007df0:	e025      	b.n	8007e3e <USB_EPStartXfer+0xd42>
 8007df2:	463b      	mov	r3, r7
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	785b      	ldrb	r3, [r3, #1]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d120      	bne.n	8007e3e <USB_EPStartXfer+0xd42>
 8007dfc:	1d3b      	adds	r3, r7, #4
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e04:	1d3b      	adds	r3, r7, #4
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	461a      	mov	r2, r3
 8007e10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e14:	4413      	add	r3, r2
 8007e16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e1a:	463b      	mov	r3, r7
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	011a      	lsls	r2, r3, #4
 8007e22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e26:	4413      	add	r3, r2
 8007e28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e30:	463b      	mov	r3, r7
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e3c:	801a      	strh	r2, [r3, #0]
 8007e3e:	1d3b      	adds	r3, r7, #4
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007e46:	463b      	mov	r3, r7
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	785b      	ldrb	r3, [r3, #1]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d175      	bne.n	8007f3c <USB_EPStartXfer+0xe40>
 8007e50:	1d3b      	adds	r3, r7, #4
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e58:	1d3b      	adds	r3, r7, #4
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	461a      	mov	r2, r3
 8007e64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e68:	4413      	add	r3, r2
 8007e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e6e:	463b      	mov	r3, r7
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	011a      	lsls	r2, r3, #4
 8007e76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e84:	463b      	mov	r3, r7
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d116      	bne.n	8007ebc <USB_EPStartXfer+0xdc0>
 8007e8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e92:	881b      	ldrh	r3, [r3, #0]
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ea0:	801a      	strh	r2, [r3, #0]
 8007ea2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ea6:	881b      	ldrh	r3, [r3, #0]
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eb2:	b29a      	uxth	r2, r3
 8007eb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007eb8:	801a      	strh	r2, [r3, #0]
 8007eba:	e061      	b.n	8007f80 <USB_EPStartXfer+0xe84>
 8007ebc:	463b      	mov	r3, r7
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	2b3e      	cmp	r3, #62	; 0x3e
 8007ec4:	d81a      	bhi.n	8007efc <USB_EPStartXfer+0xe00>
 8007ec6:	463b      	mov	r3, r7
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	691b      	ldr	r3, [r3, #16]
 8007ecc:	085b      	lsrs	r3, r3, #1
 8007ece:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ed2:	463b      	mov	r3, r7
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	f003 0301 	and.w	r3, r3, #1
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d004      	beq.n	8007eea <USB_EPStartXfer+0xdee>
 8007ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	029b      	lsls	r3, r3, #10
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ef8:	801a      	strh	r2, [r3, #0]
 8007efa:	e041      	b.n	8007f80 <USB_EPStartXfer+0xe84>
 8007efc:	463b      	mov	r3, r7
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	095b      	lsrs	r3, r3, #5
 8007f04:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f08:	463b      	mov	r3, r7
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	f003 031f 	and.w	r3, r3, #31
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d104      	bne.n	8007f20 <USB_EPStartXfer+0xe24>
 8007f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	029b      	lsls	r3, r3, #10
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f38:	801a      	strh	r2, [r3, #0]
 8007f3a:	e021      	b.n	8007f80 <USB_EPStartXfer+0xe84>
 8007f3c:	463b      	mov	r3, r7
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	785b      	ldrb	r3, [r3, #1]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d11c      	bne.n	8007f80 <USB_EPStartXfer+0xe84>
 8007f46:	1d3b      	adds	r3, r7, #4
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	461a      	mov	r2, r3
 8007f52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f56:	4413      	add	r3, r2
 8007f58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007f5c:	463b      	mov	r3, r7
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	011a      	lsls	r2, r3, #4
 8007f64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f68:	4413      	add	r3, r2
 8007f6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007f72:	463b      	mov	r3, r7
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f7e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007f80:	463b      	mov	r3, r7
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	69db      	ldr	r3, [r3, #28]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f000 81a4 	beq.w	80082d4 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007f8c:	1d3b      	adds	r3, r7, #4
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	463b      	mov	r3, r7
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	881b      	ldrh	r3, [r3, #0]
 8007f9c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007fa0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d005      	beq.n	8007fb8 <USB_EPStartXfer+0xebc>
 8007fac:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10d      	bne.n	8007fd4 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007fb8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f040 8187 	bne.w	80082d4 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007fc6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f040 8180 	bne.w	80082d4 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007fd4:	1d3b      	adds	r3, r7, #4
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	463b      	mov	r3, r7
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	881b      	ldrh	r3, [r3, #0]
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fee:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8007ff2:	1d3b      	adds	r3, r7, #4
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	463b      	mov	r3, r7
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	441a      	add	r2, r3
 8008000:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8008004:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008008:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800800c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008010:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008014:	b29b      	uxth	r3, r3
 8008016:	8013      	strh	r3, [r2, #0]
 8008018:	e15c      	b.n	80082d4 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800801a:	463b      	mov	r3, r7
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	78db      	ldrb	r3, [r3, #3]
 8008020:	2b01      	cmp	r3, #1
 8008022:	f040 8155 	bne.w	80082d0 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008026:	463b      	mov	r3, r7
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	699a      	ldr	r2, [r3, #24]
 800802c:	463b      	mov	r3, r7
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	429a      	cmp	r2, r3
 8008034:	d90e      	bls.n	8008054 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8008036:	463b      	mov	r3, r7
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8008040:	463b      	mov	r3, r7
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	699a      	ldr	r2, [r3, #24]
 8008046:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800804a:	1ad2      	subs	r2, r2, r3
 800804c:	463b      	mov	r3, r7
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	619a      	str	r2, [r3, #24]
 8008052:	e008      	b.n	8008066 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8008054:	463b      	mov	r3, r7
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800805e:	463b      	mov	r3, r7
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2200      	movs	r2, #0
 8008064:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008066:	463b      	mov	r3, r7
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	785b      	ldrb	r3, [r3, #1]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d16f      	bne.n	8008150 <USB_EPStartXfer+0x1054>
 8008070:	1d3b      	adds	r3, r7, #4
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008078:	1d3b      	adds	r3, r7, #4
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008080:	b29b      	uxth	r3, r3
 8008082:	461a      	mov	r2, r3
 8008084:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008088:	4413      	add	r3, r2
 800808a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800808e:	463b      	mov	r3, r7
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	011a      	lsls	r2, r3, #4
 8008096:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800809a:	4413      	add	r3, r2
 800809c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80080a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80080a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d116      	bne.n	80080da <USB_EPStartXfer+0xfde>
 80080ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80080b0:	881b      	ldrh	r3, [r3, #0]
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80080be:	801a      	strh	r2, [r3, #0]
 80080c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80080d6:	801a      	strh	r2, [r3, #0]
 80080d8:	e05f      	b.n	800819a <USB_EPStartXfer+0x109e>
 80080da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080de:	2b3e      	cmp	r3, #62	; 0x3e
 80080e0:	d818      	bhi.n	8008114 <USB_EPStartXfer+0x1018>
 80080e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080e6:	085b      	lsrs	r3, r3, #1
 80080e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80080ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080f0:	f003 0301 	and.w	r3, r3, #1
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d004      	beq.n	8008102 <USB_EPStartXfer+0x1006>
 80080f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080fc:	3301      	adds	r3, #1
 80080fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008106:	b29b      	uxth	r3, r3
 8008108:	029b      	lsls	r3, r3, #10
 800810a:	b29a      	uxth	r2, r3
 800810c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008110:	801a      	strh	r2, [r3, #0]
 8008112:	e042      	b.n	800819a <USB_EPStartXfer+0x109e>
 8008114:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008118:	095b      	lsrs	r3, r3, #5
 800811a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800811e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008122:	f003 031f 	and.w	r3, r3, #31
 8008126:	2b00      	cmp	r3, #0
 8008128:	d104      	bne.n	8008134 <USB_EPStartXfer+0x1038>
 800812a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800812e:	3b01      	subs	r3, #1
 8008130:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008138:	b29b      	uxth	r3, r3
 800813a:	029b      	lsls	r3, r3, #10
 800813c:	b29b      	uxth	r3, r3
 800813e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008146:	b29a      	uxth	r2, r3
 8008148:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800814c:	801a      	strh	r2, [r3, #0]
 800814e:	e024      	b.n	800819a <USB_EPStartXfer+0x109e>
 8008150:	463b      	mov	r3, r7
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	785b      	ldrb	r3, [r3, #1]
 8008156:	2b01      	cmp	r3, #1
 8008158:	d11f      	bne.n	800819a <USB_EPStartXfer+0x109e>
 800815a:	1d3b      	adds	r3, r7, #4
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008162:	1d3b      	adds	r3, r7, #4
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800816a:	b29b      	uxth	r3, r3
 800816c:	461a      	mov	r2, r3
 800816e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008172:	4413      	add	r3, r2
 8008174:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008178:	463b      	mov	r3, r7
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	011a      	lsls	r2, r3, #4
 8008180:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008184:	4413      	add	r3, r2
 8008186:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800818a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800818e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008192:	b29a      	uxth	r2, r3
 8008194:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008198:	801a      	strh	r2, [r3, #0]
 800819a:	1d3b      	adds	r3, r7, #4
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081a2:	463b      	mov	r3, r7
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	785b      	ldrb	r3, [r3, #1]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d16f      	bne.n	800828c <USB_EPStartXfer+0x1190>
 80081ac:	1d3b      	adds	r3, r7, #4
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80081b4:	1d3b      	adds	r3, r7, #4
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081bc:	b29b      	uxth	r3, r3
 80081be:	461a      	mov	r2, r3
 80081c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80081c4:	4413      	add	r3, r2
 80081c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80081ca:	463b      	mov	r3, r7
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	011a      	lsls	r2, r3, #4
 80081d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80081d6:	4413      	add	r3, r2
 80081d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80081e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d116      	bne.n	8008216 <USB_EPStartXfer+0x111a>
 80081e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80081ec:	881b      	ldrh	r3, [r3, #0]
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80081fa:	801a      	strh	r2, [r3, #0]
 80081fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008200:	881b      	ldrh	r3, [r3, #0]
 8008202:	b29b      	uxth	r3, r3
 8008204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800820c:	b29a      	uxth	r2, r3
 800820e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008212:	801a      	strh	r2, [r3, #0]
 8008214:	e05e      	b.n	80082d4 <USB_EPStartXfer+0x11d8>
 8008216:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800821a:	2b3e      	cmp	r3, #62	; 0x3e
 800821c:	d818      	bhi.n	8008250 <USB_EPStartXfer+0x1154>
 800821e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008222:	085b      	lsrs	r3, r3, #1
 8008224:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008228:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800822c:	f003 0301 	and.w	r3, r3, #1
 8008230:	2b00      	cmp	r3, #0
 8008232:	d004      	beq.n	800823e <USB_EPStartXfer+0x1142>
 8008234:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008238:	3301      	adds	r3, #1
 800823a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800823e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008242:	b29b      	uxth	r3, r3
 8008244:	029b      	lsls	r3, r3, #10
 8008246:	b29a      	uxth	r2, r3
 8008248:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800824c:	801a      	strh	r2, [r3, #0]
 800824e:	e041      	b.n	80082d4 <USB_EPStartXfer+0x11d8>
 8008250:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008254:	095b      	lsrs	r3, r3, #5
 8008256:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800825a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800825e:	f003 031f 	and.w	r3, r3, #31
 8008262:	2b00      	cmp	r3, #0
 8008264:	d104      	bne.n	8008270 <USB_EPStartXfer+0x1174>
 8008266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800826a:	3b01      	subs	r3, #1
 800826c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008274:	b29b      	uxth	r3, r3
 8008276:	029b      	lsls	r3, r3, #10
 8008278:	b29b      	uxth	r3, r3
 800827a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800827e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008282:	b29a      	uxth	r2, r3
 8008284:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008288:	801a      	strh	r2, [r3, #0]
 800828a:	e023      	b.n	80082d4 <USB_EPStartXfer+0x11d8>
 800828c:	463b      	mov	r3, r7
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	785b      	ldrb	r3, [r3, #1]
 8008292:	2b01      	cmp	r3, #1
 8008294:	d11e      	bne.n	80082d4 <USB_EPStartXfer+0x11d8>
 8008296:	1d3b      	adds	r3, r7, #4
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800829e:	b29b      	uxth	r3, r3
 80082a0:	461a      	mov	r2, r3
 80082a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80082a6:	4413      	add	r3, r2
 80082a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80082ac:	463b      	mov	r3, r7
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	011a      	lsls	r2, r3, #4
 80082b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80082b8:	4413      	add	r3, r2
 80082ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80082be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80082cc:	801a      	strh	r2, [r3, #0]
 80082ce:	e001      	b.n	80082d4 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e02e      	b.n	8008332 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80082d4:	1d3b      	adds	r3, r7, #4
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	463b      	mov	r3, r7
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	4413      	add	r3, r2
 80082e2:	881b      	ldrh	r3, [r3, #0]
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ee:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80082f2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80082f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80082fa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80082fe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008302:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008306:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800830a:	1d3b      	adds	r3, r7, #4
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	463b      	mov	r3, r7
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	441a      	add	r2, r3
 8008318:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800831c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800832c:	b29b      	uxth	r3, r3
 800832e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	785b      	ldrb	r3, [r3, #1]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d020      	beq.n	8008390 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	4413      	add	r3, r2
 8008358:	881b      	ldrh	r3, [r3, #0]
 800835a:	b29b      	uxth	r3, r3
 800835c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008364:	81bb      	strh	r3, [r7, #12]
 8008366:	89bb      	ldrh	r3, [r7, #12]
 8008368:	f083 0310 	eor.w	r3, r3, #16
 800836c:	81bb      	strh	r3, [r7, #12]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	441a      	add	r2, r3
 8008378:	89bb      	ldrh	r3, [r7, #12]
 800837a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800837e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800838a:	b29b      	uxth	r3, r3
 800838c:	8013      	strh	r3, [r2, #0]
 800838e:	e01f      	b.n	80083d0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4413      	add	r3, r2
 800839a:	881b      	ldrh	r3, [r3, #0]
 800839c:	b29b      	uxth	r3, r3
 800839e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083a6:	81fb      	strh	r3, [r7, #14]
 80083a8:	89fb      	ldrh	r3, [r7, #14]
 80083aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80083ae:	81fb      	strh	r3, [r7, #14]
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	441a      	add	r2, r3
 80083ba:	89fb      	ldrh	r3, [r7, #14]
 80083bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bc80      	pop	{r7}
 80083da:	4770      	bx	lr

080083dc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083dc:	b480      	push	{r7}
 80083de:	b087      	sub	sp, #28
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	7b1b      	ldrb	r3, [r3, #12]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f040 809d 	bne.w	800852a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	785b      	ldrb	r3, [r3, #1]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d04c      	beq.n	8008492 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	4413      	add	r3, r2
 8008402:	881b      	ldrh	r3, [r3, #0]
 8008404:	823b      	strh	r3, [r7, #16]
 8008406:	8a3b      	ldrh	r3, [r7, #16]
 8008408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800840c:	2b00      	cmp	r3, #0
 800840e:	d01b      	beq.n	8008448 <USB_EPClearStall+0x6c>
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	4413      	add	r3, r2
 800841a:	881b      	ldrh	r3, [r3, #0]
 800841c:	b29b      	uxth	r3, r3
 800841e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008426:	81fb      	strh	r3, [r7, #14]
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	441a      	add	r2, r3
 8008432:	89fb      	ldrh	r3, [r7, #14]
 8008434:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008438:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800843c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008440:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008444:	b29b      	uxth	r3, r3
 8008446:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	78db      	ldrb	r3, [r3, #3]
 800844c:	2b01      	cmp	r3, #1
 800844e:	d06c      	beq.n	800852a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4413      	add	r3, r2
 800845a:	881b      	ldrh	r3, [r3, #0]
 800845c:	b29b      	uxth	r3, r3
 800845e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008466:	81bb      	strh	r3, [r7, #12]
 8008468:	89bb      	ldrh	r3, [r7, #12]
 800846a:	f083 0320 	eor.w	r3, r3, #32
 800846e:	81bb      	strh	r3, [r7, #12]
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	441a      	add	r2, r3
 800847a:	89bb      	ldrh	r3, [r7, #12]
 800847c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800848c:	b29b      	uxth	r3, r3
 800848e:	8013      	strh	r3, [r2, #0]
 8008490:	e04b      	b.n	800852a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	881b      	ldrh	r3, [r3, #0]
 800849e:	82fb      	strh	r3, [r7, #22]
 80084a0:	8afb      	ldrh	r3, [r7, #22]
 80084a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d01b      	beq.n	80084e2 <USB_EPClearStall+0x106>
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	4413      	add	r3, r2
 80084b4:	881b      	ldrh	r3, [r3, #0]
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084c0:	82bb      	strh	r3, [r7, #20]
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	441a      	add	r2, r3
 80084cc:	8abb      	ldrh	r3, [r7, #20]
 80084ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084de:	b29b      	uxth	r3, r3
 80084e0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	4413      	add	r3, r2
 80084ec:	881b      	ldrh	r3, [r3, #0]
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084f8:	827b      	strh	r3, [r7, #18]
 80084fa:	8a7b      	ldrh	r3, [r7, #18]
 80084fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008500:	827b      	strh	r3, [r7, #18]
 8008502:	8a7b      	ldrh	r3, [r7, #18]
 8008504:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008508:	827b      	strh	r3, [r7, #18]
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	441a      	add	r2, r3
 8008514:	8a7b      	ldrh	r3, [r7, #18]
 8008516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800851a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800851e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008526:	b29b      	uxth	r3, r3
 8008528:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	371c      	adds	r7, #28
 8008530:	46bd      	mov	sp, r7
 8008532:	bc80      	pop	{r7}
 8008534:	4770      	bx	lr

08008536 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008536:	b480      	push	{r7}
 8008538:	b083      	sub	sp, #12
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
 800853e:	460b      	mov	r3, r1
 8008540:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008542:	78fb      	ldrb	r3, [r7, #3]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d103      	bne.n	8008550 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2280      	movs	r2, #128	; 0x80
 800854c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	370c      	adds	r7, #12
 8008556:	46bd      	mov	sp, r7
 8008558:	bc80      	pop	{r7}
 800855a:	4770      	bx	lr

0800855c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	370c      	adds	r7, #12
 800856a:	46bd      	mov	sp, r7
 800856c:	bc80      	pop	{r7}
 800856e:	4770      	bx	lr

08008570 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	370c      	adds	r7, #12
 800857e:	46bd      	mov	sp, r7
 8008580:	bc80      	pop	{r7}
 8008582:	4770      	bx	lr

08008584 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008592:	b29b      	uxth	r3, r3
 8008594:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008596:	68fb      	ldr	r3, [r7, #12]
}
 8008598:	4618      	mov	r0, r3
 800859a:	3714      	adds	r7, #20
 800859c:	46bd      	mov	sp, r7
 800859e:	bc80      	pop	{r7}
 80085a0:	4770      	bx	lr

080085a2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b083      	sub	sp, #12
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bc80      	pop	{r7}
 80085b6:	4770      	bx	lr

080085b8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b08d      	sub	sp, #52	; 0x34
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	4611      	mov	r1, r2
 80085c4:	461a      	mov	r2, r3
 80085c6:	460b      	mov	r3, r1
 80085c8:	80fb      	strh	r3, [r7, #6]
 80085ca:	4613      	mov	r3, r2
 80085cc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80085ce:	88bb      	ldrh	r3, [r7, #4]
 80085d0:	3301      	adds	r3, #1
 80085d2:	085b      	lsrs	r3, r3, #1
 80085d4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80085de:	88fb      	ldrh	r3, [r7, #6]
 80085e0:	005a      	lsls	r2, r3, #1
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	4413      	add	r3, r2
 80085e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085ea:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80085ec:	6a3b      	ldr	r3, [r7, #32]
 80085ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085f0:	e01e      	b.n	8008630 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80085f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80085f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fa:	3301      	adds	r3, #1
 80085fc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80085fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	b29b      	uxth	r3, r3
 8008604:	021b      	lsls	r3, r3, #8
 8008606:	b29b      	uxth	r3, r3
 8008608:	461a      	mov	r2, r3
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	4313      	orrs	r3, r2
 800860e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	b29a      	uxth	r2, r3
 8008614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008616:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861a:	3302      	adds	r3, #2
 800861c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800861e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008620:	3302      	adds	r3, #2
 8008622:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008626:	3301      	adds	r3, #1
 8008628:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800862a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862c:	3b01      	subs	r3, #1
 800862e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1dd      	bne.n	80085f2 <USB_WritePMA+0x3a>
  }
}
 8008636:	bf00      	nop
 8008638:	bf00      	nop
 800863a:	3734      	adds	r7, #52	; 0x34
 800863c:	46bd      	mov	sp, r7
 800863e:	bc80      	pop	{r7}
 8008640:	4770      	bx	lr

08008642 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008642:	b480      	push	{r7}
 8008644:	b08b      	sub	sp, #44	; 0x2c
 8008646:	af00      	add	r7, sp, #0
 8008648:	60f8      	str	r0, [r7, #12]
 800864a:	60b9      	str	r1, [r7, #8]
 800864c:	4611      	mov	r1, r2
 800864e:	461a      	mov	r2, r3
 8008650:	460b      	mov	r3, r1
 8008652:	80fb      	strh	r3, [r7, #6]
 8008654:	4613      	mov	r3, r2
 8008656:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008658:	88bb      	ldrh	r3, [r7, #4]
 800865a:	085b      	lsrs	r3, r3, #1
 800865c:	b29b      	uxth	r3, r3
 800865e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008668:	88fb      	ldrh	r3, [r7, #6]
 800866a:	005a      	lsls	r2, r3, #1
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	4413      	add	r3, r2
 8008670:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008674:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	627b      	str	r3, [r7, #36]	; 0x24
 800867a:	e01b      	b.n	80086b4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800867c:	6a3b      	ldr	r3, [r7, #32]
 800867e:	881b      	ldrh	r3, [r3, #0]
 8008680:	b29b      	uxth	r3, r3
 8008682:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008684:	6a3b      	ldr	r3, [r7, #32]
 8008686:	3302      	adds	r3, #2
 8008688:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	b2da      	uxtb	r2, r3
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	3301      	adds	r3, #1
 8008696:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	0a1b      	lsrs	r3, r3, #8
 800869c:	b2da      	uxtb	r2, r3
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	3301      	adds	r3, #1
 80086a6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80086a8:	6a3b      	ldr	r3, [r7, #32]
 80086aa:	3302      	adds	r3, #2
 80086ac:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80086ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b0:	3b01      	subs	r3, #1
 80086b2:	627b      	str	r3, [r7, #36]	; 0x24
 80086b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1e0      	bne.n	800867c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80086ba:	88bb      	ldrh	r3, [r7, #4]
 80086bc:	f003 0301 	and.w	r3, r3, #1
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d007      	beq.n	80086d6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80086c6:	6a3b      	ldr	r3, [r7, #32]
 80086c8:	881b      	ldrh	r3, [r3, #0]
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	b2da      	uxtb	r2, r3
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	701a      	strb	r2, [r3, #0]
  }
}
 80086d6:	bf00      	nop
 80086d8:	372c      	adds	r7, #44	; 0x2c
 80086da:	46bd      	mov	sp, r7
 80086dc:	bc80      	pop	{r7}
 80086de:	4770      	bx	lr

080086e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80086ec:	2300      	movs	r3, #0
 80086ee:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	7c1b      	ldrb	r3, [r3, #16]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d115      	bne.n	8008724 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80086f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086fc:	2202      	movs	r2, #2
 80086fe:	2181      	movs	r1, #129	; 0x81
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f001 fe8a 	bl	800a41a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2201      	movs	r2, #1
 800870a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800870c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008710:	2202      	movs	r2, #2
 8008712:	2101      	movs	r1, #1
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f001 fe80 	bl	800a41a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2201      	movs	r2, #1
 800871e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008722:	e012      	b.n	800874a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008724:	2340      	movs	r3, #64	; 0x40
 8008726:	2202      	movs	r2, #2
 8008728:	2181      	movs	r1, #129	; 0x81
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f001 fe75 	bl	800a41a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008736:	2340      	movs	r3, #64	; 0x40
 8008738:	2202      	movs	r2, #2
 800873a:	2101      	movs	r1, #1
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f001 fe6c 	bl	800a41a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2201      	movs	r2, #1
 8008746:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800874a:	2308      	movs	r3, #8
 800874c:	2203      	movs	r2, #3
 800874e:	2182      	movs	r1, #130	; 0x82
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f001 fe62 	bl	800a41a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2201      	movs	r2, #1
 800875a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800875c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008760:	f001 ff82 	bl	800a668 <USBD_static_malloc>
 8008764:	4602      	mov	r2, r0
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008772:	2b00      	cmp	r3, #0
 8008774:	d102      	bne.n	800877c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008776:	2301      	movs	r3, #1
 8008778:	73fb      	strb	r3, [r7, #15]
 800877a:	e026      	b.n	80087ca <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008782:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	2200      	movs	r2, #0
 8008792:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	2200      	movs	r2, #0
 800879a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	7c1b      	ldrb	r3, [r3, #16]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d109      	bne.n	80087ba <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087b0:	2101      	movs	r1, #1
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f001 ff22 	bl	800a5fc <USBD_LL_PrepareReceive>
 80087b8:	e007      	b.n	80087ca <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087c0:	2340      	movs	r3, #64	; 0x40
 80087c2:	2101      	movs	r1, #1
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f001 ff19 	bl	800a5fc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80087ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	460b      	mov	r3, r1
 80087de:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80087e0:	2300      	movs	r3, #0
 80087e2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80087e4:	2181      	movs	r1, #129	; 0x81
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f001 fe3d 	bl	800a466 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80087f2:	2101      	movs	r1, #1
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f001 fe36 	bl	800a466 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008802:	2182      	movs	r1, #130	; 0x82
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f001 fe2e 	bl	800a466 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00e      	beq.n	8008838 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800882a:	4618      	mov	r0, r3
 800882c:	f001 ff28 	bl	800a680 <USBD_static_free>
    pdev->pClassData = NULL;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008838:	7bfb      	ldrb	r3, [r7, #15]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b086      	sub	sp, #24
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008852:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008854:	2300      	movs	r3, #0
 8008856:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008858:	2300      	movs	r3, #0
 800885a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800885c:	2300      	movs	r3, #0
 800885e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008868:	2b00      	cmp	r3, #0
 800886a:	d039      	beq.n	80088e0 <USBD_CDC_Setup+0x9e>
 800886c:	2b20      	cmp	r3, #32
 800886e:	d17f      	bne.n	8008970 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	88db      	ldrh	r3, [r3, #6]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d029      	beq.n	80088cc <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	b25b      	sxtb	r3, r3
 800887e:	2b00      	cmp	r3, #0
 8008880:	da11      	bge.n	80088a6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	683a      	ldr	r2, [r7, #0]
 800888c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800888e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008890:	683a      	ldr	r2, [r7, #0]
 8008892:	88d2      	ldrh	r2, [r2, #6]
 8008894:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008896:	6939      	ldr	r1, [r7, #16]
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	88db      	ldrh	r3, [r3, #6]
 800889c:	461a      	mov	r2, r3
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f001 fa09 	bl	8009cb6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80088a4:	e06b      	b.n	800897e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	785a      	ldrb	r2, [r3, #1]
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	88db      	ldrh	r3, [r3, #6]
 80088b4:	b2da      	uxtb	r2, r3
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80088bc:	6939      	ldr	r1, [r7, #16]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	88db      	ldrh	r3, [r3, #6]
 80088c2:	461a      	mov	r2, r3
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f001 fa24 	bl	8009d12 <USBD_CtlPrepareRx>
      break;
 80088ca:	e058      	b.n	800897e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	683a      	ldr	r2, [r7, #0]
 80088d6:	7850      	ldrb	r0, [r2, #1]
 80088d8:	2200      	movs	r2, #0
 80088da:	6839      	ldr	r1, [r7, #0]
 80088dc:	4798      	blx	r3
      break;
 80088de:	e04e      	b.n	800897e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	785b      	ldrb	r3, [r3, #1]
 80088e4:	2b0b      	cmp	r3, #11
 80088e6:	d02e      	beq.n	8008946 <USBD_CDC_Setup+0x104>
 80088e8:	2b0b      	cmp	r3, #11
 80088ea:	dc38      	bgt.n	800895e <USBD_CDC_Setup+0x11c>
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d002      	beq.n	80088f6 <USBD_CDC_Setup+0xb4>
 80088f0:	2b0a      	cmp	r3, #10
 80088f2:	d014      	beq.n	800891e <USBD_CDC_Setup+0xdc>
 80088f4:	e033      	b.n	800895e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088fc:	2b03      	cmp	r3, #3
 80088fe:	d107      	bne.n	8008910 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008900:	f107 030c 	add.w	r3, r7, #12
 8008904:	2202      	movs	r2, #2
 8008906:	4619      	mov	r1, r3
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f001 f9d4 	bl	8009cb6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800890e:	e02e      	b.n	800896e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008910:	6839      	ldr	r1, [r7, #0]
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f001 f965 	bl	8009be2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008918:	2302      	movs	r3, #2
 800891a:	75fb      	strb	r3, [r7, #23]
          break;
 800891c:	e027      	b.n	800896e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008924:	2b03      	cmp	r3, #3
 8008926:	d107      	bne.n	8008938 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008928:	f107 030f 	add.w	r3, r7, #15
 800892c:	2201      	movs	r2, #1
 800892e:	4619      	mov	r1, r3
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f001 f9c0 	bl	8009cb6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008936:	e01a      	b.n	800896e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f001 f951 	bl	8009be2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008940:	2302      	movs	r3, #2
 8008942:	75fb      	strb	r3, [r7, #23]
          break;
 8008944:	e013      	b.n	800896e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800894c:	2b03      	cmp	r3, #3
 800894e:	d00d      	beq.n	800896c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008950:	6839      	ldr	r1, [r7, #0]
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f001 f945 	bl	8009be2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008958:	2302      	movs	r3, #2
 800895a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800895c:	e006      	b.n	800896c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800895e:	6839      	ldr	r1, [r7, #0]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f001 f93e 	bl	8009be2 <USBD_CtlError>
          ret = USBD_FAIL;
 8008966:	2302      	movs	r3, #2
 8008968:	75fb      	strb	r3, [r7, #23]
          break;
 800896a:	e000      	b.n	800896e <USBD_CDC_Setup+0x12c>
          break;
 800896c:	bf00      	nop
      }
      break;
 800896e:	e006      	b.n	800897e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f001 f935 	bl	8009be2 <USBD_CtlError>
      ret = USBD_FAIL;
 8008978:	2302      	movs	r3, #2
 800897a:	75fb      	strb	r3, [r7, #23]
      break;
 800897c:	bf00      	nop
  }

  return ret;
 800897e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008980:	4618      	mov	r0, r3
 8008982:	3718      	adds	r7, #24
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	460b      	mov	r3, r1
 8008992:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800899a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089a2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d03a      	beq.n	8008a24 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80089ae:	78fa      	ldrb	r2, [r7, #3]
 80089b0:	6879      	ldr	r1, [r7, #4]
 80089b2:	4613      	mov	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4413      	add	r3, r2
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	440b      	add	r3, r1
 80089bc:	331c      	adds	r3, #28
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d029      	beq.n	8008a18 <USBD_CDC_DataIn+0x90>
 80089c4:	78fa      	ldrb	r2, [r7, #3]
 80089c6:	6879      	ldr	r1, [r7, #4]
 80089c8:	4613      	mov	r3, r2
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	4413      	add	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	440b      	add	r3, r1
 80089d2:	331c      	adds	r3, #28
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	78f9      	ldrb	r1, [r7, #3]
 80089d8:	68b8      	ldr	r0, [r7, #8]
 80089da:	460b      	mov	r3, r1
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	440b      	add	r3, r1
 80089e0:	00db      	lsls	r3, r3, #3
 80089e2:	4403      	add	r3, r0
 80089e4:	3338      	adds	r3, #56	; 0x38
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80089ec:	fb03 f301 	mul.w	r3, r3, r1
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d110      	bne.n	8008a18 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80089f6:	78fa      	ldrb	r2, [r7, #3]
 80089f8:	6879      	ldr	r1, [r7, #4]
 80089fa:	4613      	mov	r3, r2
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4413      	add	r3, r2
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	440b      	add	r3, r1
 8008a04:	331c      	adds	r3, #28
 8008a06:	2200      	movs	r2, #0
 8008a08:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008a0a:	78f9      	ldrb	r1, [r7, #3]
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	2200      	movs	r2, #0
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f001 fdd0 	bl	800a5b6 <USBD_LL_Transmit>
 8008a16:	e003      	b.n	8008a20 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	e000      	b.n	8008a26 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008a24:	2302      	movs	r3, #2
  }
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b084      	sub	sp, #16
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	460b      	mov	r3, r1
 8008a38:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a40:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008a42:	78fb      	ldrb	r3, [r7, #3]
 8008a44:	4619      	mov	r1, r3
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f001 fdfb 	bl	800a642 <USBD_LL_GetRxDataSize>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00d      	beq.n	8008a7a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008a6c:	68fa      	ldr	r2, [r7, #12]
 8008a6e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008a72:	4611      	mov	r1, r2
 8008a74:	4798      	blx	r3

    return USBD_OK;
 8008a76:	2300      	movs	r3, #0
 8008a78:	e000      	b.n	8008a7c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008a7a:	2302      	movs	r3, #2
  }
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a92:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d015      	beq.n	8008aca <USBD_CDC_EP0_RxReady+0x46>
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008aa4:	2bff      	cmp	r3, #255	; 0xff
 8008aa6:	d010      	beq.n	8008aca <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008ab6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008abe:	b292      	uxth	r2, r2
 8008ac0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	22ff      	movs	r2, #255	; 0xff
 8008ac6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008aca:	2300      	movs	r3, #0
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2243      	movs	r2, #67	; 0x43
 8008ae0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008ae2:	4b03      	ldr	r3, [pc, #12]	; (8008af0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bc80      	pop	{r7}
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	200000a8 	.word	0x200000a8

08008af4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2243      	movs	r2, #67	; 0x43
 8008b00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008b02:	4b03      	ldr	r3, [pc, #12]	; (8008b10 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bc80      	pop	{r7}
 8008b0c:	4770      	bx	lr
 8008b0e:	bf00      	nop
 8008b10:	20000064 	.word	0x20000064

08008b14 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2243      	movs	r2, #67	; 0x43
 8008b20:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008b22:	4b03      	ldr	r3, [pc, #12]	; (8008b30 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bc80      	pop	{r7}
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	200000ec 	.word	0x200000ec

08008b34 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	220a      	movs	r2, #10
 8008b40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008b42:	4b03      	ldr	r3, [pc, #12]	; (8008b50 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bc80      	pop	{r7}
 8008b4c:	4770      	bx	lr
 8008b4e:	bf00      	nop
 8008b50:	20000020 	.word	0x20000020

08008b54 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b085      	sub	sp, #20
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008b5e:	2302      	movs	r3, #2
 8008b60:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d005      	beq.n	8008b74 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	683a      	ldr	r2, [r7, #0]
 8008b6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008b70:	2300      	movs	r3, #0
 8008b72:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bc80      	pop	{r7}
 8008b7e:	4770      	bx	lr

08008b80 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b087      	sub	sp, #28
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b94:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008b9e:	88fa      	ldrh	r2, [r7, #6]
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	371c      	adds	r7, #28
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bc80      	pop	{r7}
 8008bb0:	4770      	bx	lr

08008bb2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008bb2:	b480      	push	{r7}
 8008bb4:	b085      	sub	sp, #20
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bc2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	683a      	ldr	r2, [r7, #0]
 8008bc8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3714      	adds	r7, #20
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bc80      	pop	{r7}
 8008bd6:	4770      	bx	lr

08008bd8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008be6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d01c      	beq.n	8008c2c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d115      	bne.n	8008c28 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	2181      	movs	r1, #129	; 0x81
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f001 fcc9 	bl	800a5b6 <USBD_LL_Transmit>

      return USBD_OK;
 8008c24:	2300      	movs	r3, #0
 8008c26:	e002      	b.n	8008c2e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	e000      	b.n	8008c2e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008c2c:	2302      	movs	r3, #2
  }
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b084      	sub	sp, #16
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c44:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d017      	beq.n	8008c80 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	7c1b      	ldrb	r3, [r3, #16]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d109      	bne.n	8008c6c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c62:	2101      	movs	r1, #1
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f001 fcc9 	bl	800a5fc <USBD_LL_PrepareReceive>
 8008c6a:	e007      	b.n	8008c7c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c72:	2340      	movs	r3, #64	; 0x40
 8008c74:	2101      	movs	r1, #1
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f001 fcc0 	bl	800a5fc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	e000      	b.n	8008c82 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008c80:	2302      	movs	r3, #2
  }
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b084      	sub	sp, #16
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	60f8      	str	r0, [r7, #12]
 8008c92:	60b9      	str	r1, [r7, #8]
 8008c94:	4613      	mov	r3, r2
 8008c96:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d101      	bne.n	8008ca2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008c9e:	2302      	movs	r3, #2
 8008ca0:	e01a      	b.n	8008cd8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d003      	beq.n	8008cb4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d003      	beq.n	8008cc2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	68ba      	ldr	r2, [r7, #8]
 8008cbe:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	79fa      	ldrb	r2, [r7, #7]
 8008cce:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f001 fb2d 	bl	800a330 <USBD_LL_Init>

  return USBD_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008cea:	2300      	movs	r3, #0
 8008cec:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d006      	beq.n	8008d02 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	683a      	ldr	r2, [r7, #0]
 8008cf8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	73fb      	strb	r3, [r7, #15]
 8008d00:	e001      	b.n	8008d06 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008d02:	2302      	movs	r3, #2
 8008d04:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3714      	adds	r7, #20
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bc80      	pop	{r7}
 8008d10:	4770      	bx	lr

08008d12 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b082      	sub	sp, #8
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f001 fb62 	bl	800a3e4 <USBD_LL_Start>

  return USBD_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3708      	adds	r7, #8
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	b083      	sub	sp, #12
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bc80      	pop	{r7}
 8008d3c:	4770      	bx	lr

08008d3e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b084      	sub	sp, #16
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
 8008d46:	460b      	mov	r3, r1
 8008d48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00c      	beq.n	8008d72 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	78fa      	ldrb	r2, [r7, #3]
 8008d62:	4611      	mov	r1, r2
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	4798      	blx	r3
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d101      	bne.n	8008d72 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	460b      	mov	r3, r1
 8008d86:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	78fa      	ldrb	r2, [r7, #3]
 8008d92:	4611      	mov	r1, r2
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	4798      	blx	r3

  return USBD_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b082      	sub	sp, #8
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
 8008daa:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008db2:	6839      	ldr	r1, [r7, #0]
 8008db4:	4618      	mov	r0, r3
 8008db6:	f000 fed8 	bl	8009b6a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008dc8:	461a      	mov	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008dd6:	f003 031f 	and.w	r3, r3, #31
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d016      	beq.n	8008e0c <USBD_LL_SetupStage+0x6a>
 8008dde:	2b02      	cmp	r3, #2
 8008de0:	d81c      	bhi.n	8008e1c <USBD_LL_SetupStage+0x7a>
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d002      	beq.n	8008dec <USBD_LL_SetupStage+0x4a>
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d008      	beq.n	8008dfc <USBD_LL_SetupStage+0x5a>
 8008dea:	e017      	b.n	8008e1c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008df2:	4619      	mov	r1, r3
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f9cb 	bl	8009190 <USBD_StdDevReq>
      break;
 8008dfa:	e01a      	b.n	8008e32 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008e02:	4619      	mov	r1, r3
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fa2d 	bl	8009264 <USBD_StdItfReq>
      break;
 8008e0a:	e012      	b.n	8008e32 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008e12:	4619      	mov	r1, r3
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fa6d 	bl	80092f4 <USBD_StdEPReq>
      break;
 8008e1a:	e00a      	b.n	8008e32 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008e22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	4619      	mov	r1, r3
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f001 fb3a 	bl	800a4a4 <USBD_LL_StallEP>
      break;
 8008e30:	bf00      	nop
  }

  return USBD_OK;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b086      	sub	sp, #24
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	460b      	mov	r3, r1
 8008e46:	607a      	str	r2, [r7, #4]
 8008e48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008e4a:	7afb      	ldrb	r3, [r7, #11]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d14b      	bne.n	8008ee8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008e56:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e5e:	2b03      	cmp	r3, #3
 8008e60:	d134      	bne.n	8008ecc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	68da      	ldr	r2, [r3, #12]
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d919      	bls.n	8008ea2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	68da      	ldr	r2, [r3, #12]
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	1ad2      	subs	r2, r2, r3
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	68da      	ldr	r2, [r3, #12]
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d203      	bcs.n	8008e90 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	e002      	b.n	8008e96 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	461a      	mov	r2, r3
 8008e98:	6879      	ldr	r1, [r7, #4]
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f000 ff57 	bl	8009d4e <USBD_CtlContinueRx>
 8008ea0:	e038      	b.n	8008f14 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d00a      	beq.n	8008ec4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008eb4:	2b03      	cmp	r3, #3
 8008eb6:	d105      	bne.n	8008ec4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f000 ff54 	bl	8009d72 <USBD_CtlSendStatus>
 8008eca:	e023      	b.n	8008f14 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ed2:	2b05      	cmp	r3, #5
 8008ed4:	d11e      	bne.n	8008f14 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008ede:	2100      	movs	r1, #0
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f001 fadf 	bl	800a4a4 <USBD_LL_StallEP>
 8008ee6:	e015      	b.n	8008f14 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eee:	699b      	ldr	r3, [r3, #24]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00d      	beq.n	8008f10 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008efa:	2b03      	cmp	r3, #3
 8008efc:	d108      	bne.n	8008f10 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	7afa      	ldrb	r2, [r7, #11]
 8008f08:	4611      	mov	r1, r2
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	4798      	blx	r3
 8008f0e:	e001      	b.n	8008f14 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008f10:	2302      	movs	r3, #2
 8008f12:	e000      	b.n	8008f16 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3718      	adds	r7, #24
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b086      	sub	sp, #24
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	60f8      	str	r0, [r7, #12]
 8008f26:	460b      	mov	r3, r1
 8008f28:	607a      	str	r2, [r7, #4]
 8008f2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008f2c:	7afb      	ldrb	r3, [r7, #11]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d17f      	bne.n	8009032 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	3314      	adds	r3, #20
 8008f36:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d15c      	bne.n	8008ffc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	68da      	ldr	r2, [r3, #12]
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	691b      	ldr	r3, [r3, #16]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d915      	bls.n	8008f7a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	68da      	ldr	r2, [r3, #12]
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	1ad2      	subs	r2, r2, r3
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	461a      	mov	r2, r3
 8008f64:	6879      	ldr	r1, [r7, #4]
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	f000 fec1 	bl	8009cee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	2200      	movs	r2, #0
 8008f70:	2100      	movs	r1, #0
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	f001 fb42 	bl	800a5fc <USBD_LL_PrepareReceive>
 8008f78:	e04e      	b.n	8009018 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	6912      	ldr	r2, [r2, #16]
 8008f82:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f86:	fb02 f201 	mul.w	r2, r2, r1
 8008f8a:	1a9b      	subs	r3, r3, r2
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d11c      	bne.n	8008fca <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	689a      	ldr	r2, [r3, #8]
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d316      	bcc.n	8008fca <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	689a      	ldr	r2, [r3, #8]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d20f      	bcs.n	8008fca <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008faa:	2200      	movs	r2, #0
 8008fac:	2100      	movs	r1, #0
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f000 fe9d 	bl	8009cee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	68f8      	ldr	r0, [r7, #12]
 8008fc4:	f001 fb1a 	bl	800a5fc <USBD_LL_PrepareReceive>
 8008fc8:	e026      	b.n	8009018 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00a      	beq.n	8008fec <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008fdc:	2b03      	cmp	r3, #3
 8008fde:	d105      	bne.n	8008fec <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008fec:	2180      	movs	r1, #128	; 0x80
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	f001 fa58 	bl	800a4a4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	f000 fecf 	bl	8009d98 <USBD_CtlReceiveStatus>
 8008ffa:	e00d      	b.n	8009018 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009002:	2b04      	cmp	r3, #4
 8009004:	d004      	beq.n	8009010 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800900c:	2b00      	cmp	r3, #0
 800900e:	d103      	bne.n	8009018 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009010:	2180      	movs	r1, #128	; 0x80
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	f001 fa46 	bl	800a4a4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800901e:	2b01      	cmp	r3, #1
 8009020:	d11d      	bne.n	800905e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009022:	68f8      	ldr	r0, [r7, #12]
 8009024:	f7ff fe81 	bl	8008d2a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2200      	movs	r2, #0
 800902c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009030:	e015      	b.n	800905e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009038:	695b      	ldr	r3, [r3, #20]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00d      	beq.n	800905a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009044:	2b03      	cmp	r3, #3
 8009046:	d108      	bne.n	800905a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800904e:	695b      	ldr	r3, [r3, #20]
 8009050:	7afa      	ldrb	r2, [r7, #11]
 8009052:	4611      	mov	r1, r2
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	4798      	blx	r3
 8009058:	e001      	b.n	800905e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800905a:	2302      	movs	r3, #2
 800905c:	e000      	b.n	8009060 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800905e:	2300      	movs	r3, #0
}
 8009060:	4618      	mov	r0, r3
 8009062:	3718      	adds	r7, #24
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009070:	2340      	movs	r3, #64	; 0x40
 8009072:	2200      	movs	r2, #0
 8009074:	2100      	movs	r1, #0
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f001 f9cf 	bl	800a41a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2240      	movs	r2, #64	; 0x40
 8009088:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800908c:	2340      	movs	r3, #64	; 0x40
 800908e:	2200      	movs	r2, #0
 8009090:	2180      	movs	r1, #128	; 0x80
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f001 f9c1 	bl	800a41a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2240      	movs	r2, #64	; 0x40
 80090a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d009      	beq.n	80090e0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	6852      	ldr	r2, [r2, #4]
 80090d8:	b2d2      	uxtb	r2, r2
 80090da:	4611      	mov	r1, r2
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	4798      	blx	r3
  }

  return USBD_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80090ea:	b480      	push	{r7}
 80090ec:	b083      	sub	sp, #12
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	460b      	mov	r3, r1
 80090f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	78fa      	ldrb	r2, [r7, #3]
 80090fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	370c      	adds	r7, #12
 8009102:	46bd      	mov	sp, r7
 8009104:	bc80      	pop	{r7}
 8009106:	4770      	bx	lr

08009108 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2204      	movs	r2, #4
 8009120:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	370c      	adds	r7, #12
 800912a:	46bd      	mov	sp, r7
 800912c:	bc80      	pop	{r7}
 800912e:	4770      	bx	lr

08009130 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800913e:	2b04      	cmp	r3, #4
 8009140:	d105      	bne.n	800914e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	bc80      	pop	{r7}
 8009158:	4770      	bx	lr

0800915a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b082      	sub	sp, #8
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009168:	2b03      	cmp	r3, #3
 800916a:	d10b      	bne.n	8009184 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009172:	69db      	ldr	r3, [r3, #28]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d005      	beq.n	8009184 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800917e:	69db      	ldr	r3, [r3, #28]
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3708      	adds	r7, #8
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
	...

08009190 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800919a:	2300      	movs	r3, #0
 800919c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091a6:	2b40      	cmp	r3, #64	; 0x40
 80091a8:	d005      	beq.n	80091b6 <USBD_StdDevReq+0x26>
 80091aa:	2b40      	cmp	r3, #64	; 0x40
 80091ac:	d84f      	bhi.n	800924e <USBD_StdDevReq+0xbe>
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d009      	beq.n	80091c6 <USBD_StdDevReq+0x36>
 80091b2:	2b20      	cmp	r3, #32
 80091b4:	d14b      	bne.n	800924e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	6839      	ldr	r1, [r7, #0]
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	4798      	blx	r3
      break;
 80091c4:	e048      	b.n	8009258 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	785b      	ldrb	r3, [r3, #1]
 80091ca:	2b09      	cmp	r3, #9
 80091cc:	d839      	bhi.n	8009242 <USBD_StdDevReq+0xb2>
 80091ce:	a201      	add	r2, pc, #4	; (adr r2, 80091d4 <USBD_StdDevReq+0x44>)
 80091d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d4:	08009225 	.word	0x08009225
 80091d8:	08009239 	.word	0x08009239
 80091dc:	08009243 	.word	0x08009243
 80091e0:	0800922f 	.word	0x0800922f
 80091e4:	08009243 	.word	0x08009243
 80091e8:	08009207 	.word	0x08009207
 80091ec:	080091fd 	.word	0x080091fd
 80091f0:	08009243 	.word	0x08009243
 80091f4:	0800921b 	.word	0x0800921b
 80091f8:	08009211 	.word	0x08009211
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80091fc:	6839      	ldr	r1, [r7, #0]
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 f9dc 	bl	80095bc <USBD_GetDescriptor>
          break;
 8009204:	e022      	b.n	800924c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009206:	6839      	ldr	r1, [r7, #0]
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 fb3f 	bl	800988c <USBD_SetAddress>
          break;
 800920e:	e01d      	b.n	800924c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009210:	6839      	ldr	r1, [r7, #0]
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 fb7e 	bl	8009914 <USBD_SetConfig>
          break;
 8009218:	e018      	b.n	800924c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800921a:	6839      	ldr	r1, [r7, #0]
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 fc07 	bl	8009a30 <USBD_GetConfig>
          break;
 8009222:	e013      	b.n	800924c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fc37 	bl	8009a9a <USBD_GetStatus>
          break;
 800922c:	e00e      	b.n	800924c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800922e:	6839      	ldr	r1, [r7, #0]
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 fc65 	bl	8009b00 <USBD_SetFeature>
          break;
 8009236:	e009      	b.n	800924c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009238:	6839      	ldr	r1, [r7, #0]
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 fc74 	bl	8009b28 <USBD_ClrFeature>
          break;
 8009240:	e004      	b.n	800924c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009242:	6839      	ldr	r1, [r7, #0]
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 fccc 	bl	8009be2 <USBD_CtlError>
          break;
 800924a:	bf00      	nop
      }
      break;
 800924c:	e004      	b.n	8009258 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800924e:	6839      	ldr	r1, [r7, #0]
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 fcc6 	bl	8009be2 <USBD_CtlError>
      break;
 8009256:	bf00      	nop
  }

  return ret;
 8009258:	7bfb      	ldrb	r3, [r7, #15]
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop

08009264 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800927a:	2b40      	cmp	r3, #64	; 0x40
 800927c:	d005      	beq.n	800928a <USBD_StdItfReq+0x26>
 800927e:	2b40      	cmp	r3, #64	; 0x40
 8009280:	d82e      	bhi.n	80092e0 <USBD_StdItfReq+0x7c>
 8009282:	2b00      	cmp	r3, #0
 8009284:	d001      	beq.n	800928a <USBD_StdItfReq+0x26>
 8009286:	2b20      	cmp	r3, #32
 8009288:	d12a      	bne.n	80092e0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009290:	3b01      	subs	r3, #1
 8009292:	2b02      	cmp	r3, #2
 8009294:	d81d      	bhi.n	80092d2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	889b      	ldrh	r3, [r3, #4]
 800929a:	b2db      	uxtb	r3, r3
 800929c:	2b01      	cmp	r3, #1
 800929e:	d813      	bhi.n	80092c8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	6839      	ldr	r1, [r7, #0]
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	4798      	blx	r3
 80092ae:	4603      	mov	r3, r0
 80092b0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	88db      	ldrh	r3, [r3, #6]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d110      	bne.n	80092dc <USBD_StdItfReq+0x78>
 80092ba:	7bfb      	ldrb	r3, [r7, #15]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d10d      	bne.n	80092dc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 fd56 	bl	8009d72 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80092c6:	e009      	b.n	80092dc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80092c8:	6839      	ldr	r1, [r7, #0]
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 fc89 	bl	8009be2 <USBD_CtlError>
          break;
 80092d0:	e004      	b.n	80092dc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80092d2:	6839      	ldr	r1, [r7, #0]
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 fc84 	bl	8009be2 <USBD_CtlError>
          break;
 80092da:	e000      	b.n	80092de <USBD_StdItfReq+0x7a>
          break;
 80092dc:	bf00      	nop
      }
      break;
 80092de:	e004      	b.n	80092ea <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80092e0:	6839      	ldr	r1, [r7, #0]
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 fc7d 	bl	8009be2 <USBD_CtlError>
      break;
 80092e8:	bf00      	nop
  }

  return USBD_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3710      	adds	r7, #16
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80092fe:	2300      	movs	r3, #0
 8009300:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	889b      	ldrh	r3, [r3, #4]
 8009306:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009310:	2b40      	cmp	r3, #64	; 0x40
 8009312:	d007      	beq.n	8009324 <USBD_StdEPReq+0x30>
 8009314:	2b40      	cmp	r3, #64	; 0x40
 8009316:	f200 8146 	bhi.w	80095a6 <USBD_StdEPReq+0x2b2>
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00a      	beq.n	8009334 <USBD_StdEPReq+0x40>
 800931e:	2b20      	cmp	r3, #32
 8009320:	f040 8141 	bne.w	80095a6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	6839      	ldr	r1, [r7, #0]
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	4798      	blx	r3
      break;
 8009332:	e13d      	b.n	80095b0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800933c:	2b20      	cmp	r3, #32
 800933e:	d10a      	bne.n	8009356 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	6839      	ldr	r1, [r7, #0]
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	4798      	blx	r3
 800934e:	4603      	mov	r3, r0
 8009350:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009352:	7bfb      	ldrb	r3, [r7, #15]
 8009354:	e12d      	b.n	80095b2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	785b      	ldrb	r3, [r3, #1]
 800935a:	2b03      	cmp	r3, #3
 800935c:	d007      	beq.n	800936e <USBD_StdEPReq+0x7a>
 800935e:	2b03      	cmp	r3, #3
 8009360:	f300 811b 	bgt.w	800959a <USBD_StdEPReq+0x2a6>
 8009364:	2b00      	cmp	r3, #0
 8009366:	d072      	beq.n	800944e <USBD_StdEPReq+0x15a>
 8009368:	2b01      	cmp	r3, #1
 800936a:	d03a      	beq.n	80093e2 <USBD_StdEPReq+0xee>
 800936c:	e115      	b.n	800959a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009374:	2b02      	cmp	r3, #2
 8009376:	d002      	beq.n	800937e <USBD_StdEPReq+0x8a>
 8009378:	2b03      	cmp	r3, #3
 800937a:	d015      	beq.n	80093a8 <USBD_StdEPReq+0xb4>
 800937c:	e02b      	b.n	80093d6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800937e:	7bbb      	ldrb	r3, [r7, #14]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00c      	beq.n	800939e <USBD_StdEPReq+0xaa>
 8009384:	7bbb      	ldrb	r3, [r7, #14]
 8009386:	2b80      	cmp	r3, #128	; 0x80
 8009388:	d009      	beq.n	800939e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800938a:	7bbb      	ldrb	r3, [r7, #14]
 800938c:	4619      	mov	r1, r3
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f001 f888 	bl	800a4a4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009394:	2180      	movs	r1, #128	; 0x80
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f001 f884 	bl	800a4a4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800939c:	e020      	b.n	80093e0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800939e:	6839      	ldr	r1, [r7, #0]
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 fc1e 	bl	8009be2 <USBD_CtlError>
              break;
 80093a6:	e01b      	b.n	80093e0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	885b      	ldrh	r3, [r3, #2]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d10e      	bne.n	80093ce <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80093b0:	7bbb      	ldrb	r3, [r7, #14]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00b      	beq.n	80093ce <USBD_StdEPReq+0xda>
 80093b6:	7bbb      	ldrb	r3, [r7, #14]
 80093b8:	2b80      	cmp	r3, #128	; 0x80
 80093ba:	d008      	beq.n	80093ce <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	88db      	ldrh	r3, [r3, #6]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d104      	bne.n	80093ce <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80093c4:	7bbb      	ldrb	r3, [r7, #14]
 80093c6:	4619      	mov	r1, r3
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f001 f86b 	bl	800a4a4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 fccf 	bl	8009d72 <USBD_CtlSendStatus>

              break;
 80093d4:	e004      	b.n	80093e0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80093d6:	6839      	ldr	r1, [r7, #0]
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 fc02 	bl	8009be2 <USBD_CtlError>
              break;
 80093de:	bf00      	nop
          }
          break;
 80093e0:	e0e0      	b.n	80095a4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093e8:	2b02      	cmp	r3, #2
 80093ea:	d002      	beq.n	80093f2 <USBD_StdEPReq+0xfe>
 80093ec:	2b03      	cmp	r3, #3
 80093ee:	d015      	beq.n	800941c <USBD_StdEPReq+0x128>
 80093f0:	e026      	b.n	8009440 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093f2:	7bbb      	ldrb	r3, [r7, #14]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00c      	beq.n	8009412 <USBD_StdEPReq+0x11e>
 80093f8:	7bbb      	ldrb	r3, [r7, #14]
 80093fa:	2b80      	cmp	r3, #128	; 0x80
 80093fc:	d009      	beq.n	8009412 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80093fe:	7bbb      	ldrb	r3, [r7, #14]
 8009400:	4619      	mov	r1, r3
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f001 f84e 	bl	800a4a4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009408:	2180      	movs	r1, #128	; 0x80
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f001 f84a 	bl	800a4a4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009410:	e01c      	b.n	800944c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009412:	6839      	ldr	r1, [r7, #0]
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 fbe4 	bl	8009be2 <USBD_CtlError>
              break;
 800941a:	e017      	b.n	800944c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	885b      	ldrh	r3, [r3, #2]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d112      	bne.n	800944a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009424:	7bbb      	ldrb	r3, [r7, #14]
 8009426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800942a:	2b00      	cmp	r3, #0
 800942c:	d004      	beq.n	8009438 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800942e:	7bbb      	ldrb	r3, [r7, #14]
 8009430:	4619      	mov	r1, r3
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f001 f855 	bl	800a4e2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 fc9a 	bl	8009d72 <USBD_CtlSendStatus>
              }
              break;
 800943e:	e004      	b.n	800944a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009440:	6839      	ldr	r1, [r7, #0]
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 fbcd 	bl	8009be2 <USBD_CtlError>
              break;
 8009448:	e000      	b.n	800944c <USBD_StdEPReq+0x158>
              break;
 800944a:	bf00      	nop
          }
          break;
 800944c:	e0aa      	b.n	80095a4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009454:	2b02      	cmp	r3, #2
 8009456:	d002      	beq.n	800945e <USBD_StdEPReq+0x16a>
 8009458:	2b03      	cmp	r3, #3
 800945a:	d032      	beq.n	80094c2 <USBD_StdEPReq+0x1ce>
 800945c:	e097      	b.n	800958e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800945e:	7bbb      	ldrb	r3, [r7, #14]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d007      	beq.n	8009474 <USBD_StdEPReq+0x180>
 8009464:	7bbb      	ldrb	r3, [r7, #14]
 8009466:	2b80      	cmp	r3, #128	; 0x80
 8009468:	d004      	beq.n	8009474 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800946a:	6839      	ldr	r1, [r7, #0]
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 fbb8 	bl	8009be2 <USBD_CtlError>
                break;
 8009472:	e091      	b.n	8009598 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009474:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009478:	2b00      	cmp	r3, #0
 800947a:	da0b      	bge.n	8009494 <USBD_StdEPReq+0x1a0>
 800947c:	7bbb      	ldrb	r3, [r7, #14]
 800947e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009482:	4613      	mov	r3, r2
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	4413      	add	r3, r2
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	3310      	adds	r3, #16
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	4413      	add	r3, r2
 8009490:	3304      	adds	r3, #4
 8009492:	e00b      	b.n	80094ac <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009494:	7bbb      	ldrb	r3, [r7, #14]
 8009496:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800949a:	4613      	mov	r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	4413      	add	r3, r2
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	4413      	add	r3, r2
 80094aa:	3304      	adds	r3, #4
 80094ac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	2200      	movs	r2, #0
 80094b2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	2202      	movs	r2, #2
 80094b8:	4619      	mov	r1, r3
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fbfb 	bl	8009cb6 <USBD_CtlSendData>
              break;
 80094c0:	e06a      	b.n	8009598 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80094c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	da11      	bge.n	80094ee <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80094ca:	7bbb      	ldrb	r3, [r7, #14]
 80094cc:	f003 020f 	and.w	r2, r3, #15
 80094d0:	6879      	ldr	r1, [r7, #4]
 80094d2:	4613      	mov	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4413      	add	r3, r2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	440b      	add	r3, r1
 80094dc:	3318      	adds	r3, #24
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d117      	bne.n	8009514 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80094e4:	6839      	ldr	r1, [r7, #0]
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 fb7b 	bl	8009be2 <USBD_CtlError>
                  break;
 80094ec:	e054      	b.n	8009598 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80094ee:	7bbb      	ldrb	r3, [r7, #14]
 80094f0:	f003 020f 	and.w	r2, r3, #15
 80094f4:	6879      	ldr	r1, [r7, #4]
 80094f6:	4613      	mov	r3, r2
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	4413      	add	r3, r2
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	440b      	add	r3, r1
 8009500:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d104      	bne.n	8009514 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800950a:	6839      	ldr	r1, [r7, #0]
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 fb68 	bl	8009be2 <USBD_CtlError>
                  break;
 8009512:	e041      	b.n	8009598 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009514:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009518:	2b00      	cmp	r3, #0
 800951a:	da0b      	bge.n	8009534 <USBD_StdEPReq+0x240>
 800951c:	7bbb      	ldrb	r3, [r7, #14]
 800951e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009522:	4613      	mov	r3, r2
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	4413      	add	r3, r2
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	3310      	adds	r3, #16
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	4413      	add	r3, r2
 8009530:	3304      	adds	r3, #4
 8009532:	e00b      	b.n	800954c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009534:	7bbb      	ldrb	r3, [r7, #14]
 8009536:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800953a:	4613      	mov	r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	4413      	add	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	4413      	add	r3, r2
 800954a:	3304      	adds	r3, #4
 800954c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800954e:	7bbb      	ldrb	r3, [r7, #14]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d002      	beq.n	800955a <USBD_StdEPReq+0x266>
 8009554:	7bbb      	ldrb	r3, [r7, #14]
 8009556:	2b80      	cmp	r3, #128	; 0x80
 8009558:	d103      	bne.n	8009562 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	2200      	movs	r2, #0
 800955e:	601a      	str	r2, [r3, #0]
 8009560:	e00e      	b.n	8009580 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009562:	7bbb      	ldrb	r3, [r7, #14]
 8009564:	4619      	mov	r1, r3
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 ffda 	bl	800a520 <USBD_LL_IsStallEP>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d003      	beq.n	800957a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	2201      	movs	r2, #1
 8009576:	601a      	str	r2, [r3, #0]
 8009578:	e002      	b.n	8009580 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	2200      	movs	r2, #0
 800957e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	2202      	movs	r2, #2
 8009584:	4619      	mov	r1, r3
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 fb95 	bl	8009cb6 <USBD_CtlSendData>
              break;
 800958c:	e004      	b.n	8009598 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800958e:	6839      	ldr	r1, [r7, #0]
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 fb26 	bl	8009be2 <USBD_CtlError>
              break;
 8009596:	bf00      	nop
          }
          break;
 8009598:	e004      	b.n	80095a4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800959a:	6839      	ldr	r1, [r7, #0]
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 fb20 	bl	8009be2 <USBD_CtlError>
          break;
 80095a2:	bf00      	nop
      }
      break;
 80095a4:	e004      	b.n	80095b0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80095a6:	6839      	ldr	r1, [r7, #0]
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 fb1a 	bl	8009be2 <USBD_CtlError>
      break;
 80095ae:	bf00      	nop
  }

  return ret;
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
	...

080095bc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80095c6:	2300      	movs	r3, #0
 80095c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80095ca:	2300      	movs	r3, #0
 80095cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80095ce:	2300      	movs	r3, #0
 80095d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	885b      	ldrh	r3, [r3, #2]
 80095d6:	0a1b      	lsrs	r3, r3, #8
 80095d8:	b29b      	uxth	r3, r3
 80095da:	3b01      	subs	r3, #1
 80095dc:	2b06      	cmp	r3, #6
 80095de:	f200 8128 	bhi.w	8009832 <USBD_GetDescriptor+0x276>
 80095e2:	a201      	add	r2, pc, #4	; (adr r2, 80095e8 <USBD_GetDescriptor+0x2c>)
 80095e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e8:	08009605 	.word	0x08009605
 80095ec:	0800961d 	.word	0x0800961d
 80095f0:	0800965d 	.word	0x0800965d
 80095f4:	08009833 	.word	0x08009833
 80095f8:	08009833 	.word	0x08009833
 80095fc:	080097d3 	.word	0x080097d3
 8009600:	080097ff 	.word	0x080097ff
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	7c12      	ldrb	r2, [r2, #16]
 8009610:	f107 0108 	add.w	r1, r7, #8
 8009614:	4610      	mov	r0, r2
 8009616:	4798      	blx	r3
 8009618:	60f8      	str	r0, [r7, #12]
      break;
 800961a:	e112      	b.n	8009842 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	7c1b      	ldrb	r3, [r3, #16]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10d      	bne.n	8009640 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800962a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800962c:	f107 0208 	add.w	r2, r7, #8
 8009630:	4610      	mov	r0, r2
 8009632:	4798      	blx	r3
 8009634:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	3301      	adds	r3, #1
 800963a:	2202      	movs	r2, #2
 800963c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800963e:	e100      	b.n	8009842 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009648:	f107 0208 	add.w	r2, r7, #8
 800964c:	4610      	mov	r0, r2
 800964e:	4798      	blx	r3
 8009650:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	3301      	adds	r3, #1
 8009656:	2202      	movs	r2, #2
 8009658:	701a      	strb	r2, [r3, #0]
      break;
 800965a:	e0f2      	b.n	8009842 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	885b      	ldrh	r3, [r3, #2]
 8009660:	b2db      	uxtb	r3, r3
 8009662:	2b05      	cmp	r3, #5
 8009664:	f200 80ac 	bhi.w	80097c0 <USBD_GetDescriptor+0x204>
 8009668:	a201      	add	r2, pc, #4	; (adr r2, 8009670 <USBD_GetDescriptor+0xb4>)
 800966a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800966e:	bf00      	nop
 8009670:	08009689 	.word	0x08009689
 8009674:	080096bd 	.word	0x080096bd
 8009678:	080096f1 	.word	0x080096f1
 800967c:	08009725 	.word	0x08009725
 8009680:	08009759 	.word	0x08009759
 8009684:	0800978d 	.word	0x0800978d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00b      	beq.n	80096ac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	7c12      	ldrb	r2, [r2, #16]
 80096a0:	f107 0108 	add.w	r1, r7, #8
 80096a4:	4610      	mov	r0, r2
 80096a6:	4798      	blx	r3
 80096a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096aa:	e091      	b.n	80097d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096ac:	6839      	ldr	r1, [r7, #0]
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 fa97 	bl	8009be2 <USBD_CtlError>
            err++;
 80096b4:	7afb      	ldrb	r3, [r7, #11]
 80096b6:	3301      	adds	r3, #1
 80096b8:	72fb      	strb	r3, [r7, #11]
          break;
 80096ba:	e089      	b.n	80097d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00b      	beq.n	80096e0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	7c12      	ldrb	r2, [r2, #16]
 80096d4:	f107 0108 	add.w	r1, r7, #8
 80096d8:	4610      	mov	r0, r2
 80096da:	4798      	blx	r3
 80096dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096de:	e077      	b.n	80097d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096e0:	6839      	ldr	r1, [r7, #0]
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fa7d 	bl	8009be2 <USBD_CtlError>
            err++;
 80096e8:	7afb      	ldrb	r3, [r7, #11]
 80096ea:	3301      	adds	r3, #1
 80096ec:	72fb      	strb	r3, [r7, #11]
          break;
 80096ee:	e06f      	b.n	80097d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00b      	beq.n	8009714 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	7c12      	ldrb	r2, [r2, #16]
 8009708:	f107 0108 	add.w	r1, r7, #8
 800970c:	4610      	mov	r0, r2
 800970e:	4798      	blx	r3
 8009710:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009712:	e05d      	b.n	80097d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009714:	6839      	ldr	r1, [r7, #0]
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 fa63 	bl	8009be2 <USBD_CtlError>
            err++;
 800971c:	7afb      	ldrb	r3, [r7, #11]
 800971e:	3301      	adds	r3, #1
 8009720:	72fb      	strb	r3, [r7, #11]
          break;
 8009722:	e055      	b.n	80097d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800972a:	691b      	ldr	r3, [r3, #16]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00b      	beq.n	8009748 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009736:	691b      	ldr	r3, [r3, #16]
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	7c12      	ldrb	r2, [r2, #16]
 800973c:	f107 0108 	add.w	r1, r7, #8
 8009740:	4610      	mov	r0, r2
 8009742:	4798      	blx	r3
 8009744:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009746:	e043      	b.n	80097d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009748:	6839      	ldr	r1, [r7, #0]
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 fa49 	bl	8009be2 <USBD_CtlError>
            err++;
 8009750:	7afb      	ldrb	r3, [r7, #11]
 8009752:	3301      	adds	r3, #1
 8009754:	72fb      	strb	r3, [r7, #11]
          break;
 8009756:	e03b      	b.n	80097d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800975e:	695b      	ldr	r3, [r3, #20]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d00b      	beq.n	800977c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800976a:	695b      	ldr	r3, [r3, #20]
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	7c12      	ldrb	r2, [r2, #16]
 8009770:	f107 0108 	add.w	r1, r7, #8
 8009774:	4610      	mov	r0, r2
 8009776:	4798      	blx	r3
 8009778:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800977a:	e029      	b.n	80097d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800977c:	6839      	ldr	r1, [r7, #0]
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 fa2f 	bl	8009be2 <USBD_CtlError>
            err++;
 8009784:	7afb      	ldrb	r3, [r7, #11]
 8009786:	3301      	adds	r3, #1
 8009788:	72fb      	strb	r3, [r7, #11]
          break;
 800978a:	e021      	b.n	80097d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009792:	699b      	ldr	r3, [r3, #24]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00b      	beq.n	80097b0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800979e:	699b      	ldr	r3, [r3, #24]
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	7c12      	ldrb	r2, [r2, #16]
 80097a4:	f107 0108 	add.w	r1, r7, #8
 80097a8:	4610      	mov	r0, r2
 80097aa:	4798      	blx	r3
 80097ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097ae:	e00f      	b.n	80097d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fa15 	bl	8009be2 <USBD_CtlError>
            err++;
 80097b8:	7afb      	ldrb	r3, [r7, #11]
 80097ba:	3301      	adds	r3, #1
 80097bc:	72fb      	strb	r3, [r7, #11]
          break;
 80097be:	e007      	b.n	80097d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80097c0:	6839      	ldr	r1, [r7, #0]
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 fa0d 	bl	8009be2 <USBD_CtlError>
          err++;
 80097c8:	7afb      	ldrb	r3, [r7, #11]
 80097ca:	3301      	adds	r3, #1
 80097cc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80097ce:	e038      	b.n	8009842 <USBD_GetDescriptor+0x286>
 80097d0:	e037      	b.n	8009842 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	7c1b      	ldrb	r3, [r3, #16]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d109      	bne.n	80097ee <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097e2:	f107 0208 	add.w	r2, r7, #8
 80097e6:	4610      	mov	r0, r2
 80097e8:	4798      	blx	r3
 80097ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097ec:	e029      	b.n	8009842 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80097ee:	6839      	ldr	r1, [r7, #0]
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 f9f6 	bl	8009be2 <USBD_CtlError>
        err++;
 80097f6:	7afb      	ldrb	r3, [r7, #11]
 80097f8:	3301      	adds	r3, #1
 80097fa:	72fb      	strb	r3, [r7, #11]
      break;
 80097fc:	e021      	b.n	8009842 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	7c1b      	ldrb	r3, [r3, #16]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d10d      	bne.n	8009822 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800980c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800980e:	f107 0208 	add.w	r2, r7, #8
 8009812:	4610      	mov	r0, r2
 8009814:	4798      	blx	r3
 8009816:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	3301      	adds	r3, #1
 800981c:	2207      	movs	r2, #7
 800981e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009820:	e00f      	b.n	8009842 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009822:	6839      	ldr	r1, [r7, #0]
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 f9dc 	bl	8009be2 <USBD_CtlError>
        err++;
 800982a:	7afb      	ldrb	r3, [r7, #11]
 800982c:	3301      	adds	r3, #1
 800982e:	72fb      	strb	r3, [r7, #11]
      break;
 8009830:	e007      	b.n	8009842 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009832:	6839      	ldr	r1, [r7, #0]
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 f9d4 	bl	8009be2 <USBD_CtlError>
      err++;
 800983a:	7afb      	ldrb	r3, [r7, #11]
 800983c:	3301      	adds	r3, #1
 800983e:	72fb      	strb	r3, [r7, #11]
      break;
 8009840:	bf00      	nop
  }

  if (err != 0U)
 8009842:	7afb      	ldrb	r3, [r7, #11]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d11c      	bne.n	8009882 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009848:	893b      	ldrh	r3, [r7, #8]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d011      	beq.n	8009872 <USBD_GetDescriptor+0x2b6>
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	88db      	ldrh	r3, [r3, #6]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d00d      	beq.n	8009872 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	88da      	ldrh	r2, [r3, #6]
 800985a:	893b      	ldrh	r3, [r7, #8]
 800985c:	4293      	cmp	r3, r2
 800985e:	bf28      	it	cs
 8009860:	4613      	movcs	r3, r2
 8009862:	b29b      	uxth	r3, r3
 8009864:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009866:	893b      	ldrh	r3, [r7, #8]
 8009868:	461a      	mov	r2, r3
 800986a:	68f9      	ldr	r1, [r7, #12]
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 fa22 	bl	8009cb6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	88db      	ldrh	r3, [r3, #6]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d104      	bne.n	8009884 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 fa79 	bl	8009d72 <USBD_CtlSendStatus>
 8009880:	e000      	b.n	8009884 <USBD_GetDescriptor+0x2c8>
    return;
 8009882:	bf00      	nop
    }
  }
}
 8009884:	3710      	adds	r7, #16
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop

0800988c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	889b      	ldrh	r3, [r3, #4]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d130      	bne.n	8009900 <USBD_SetAddress+0x74>
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	88db      	ldrh	r3, [r3, #6]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d12c      	bne.n	8009900 <USBD_SetAddress+0x74>
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	885b      	ldrh	r3, [r3, #2]
 80098aa:	2b7f      	cmp	r3, #127	; 0x7f
 80098ac:	d828      	bhi.n	8009900 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	885b      	ldrh	r3, [r3, #2]
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098c0:	2b03      	cmp	r3, #3
 80098c2:	d104      	bne.n	80098ce <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80098c4:	6839      	ldr	r1, [r7, #0]
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f98b 	bl	8009be2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098cc:	e01d      	b.n	800990a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	7bfa      	ldrb	r2, [r7, #15]
 80098d2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80098d6:	7bfb      	ldrb	r3, [r7, #15]
 80098d8:	4619      	mov	r1, r3
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fe4c 	bl	800a578 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 fa46 	bl	8009d72 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80098e6:	7bfb      	ldrb	r3, [r7, #15]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d004      	beq.n	80098f6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2202      	movs	r2, #2
 80098f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098f4:	e009      	b.n	800990a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2201      	movs	r2, #1
 80098fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098fe:	e004      	b.n	800990a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009900:	6839      	ldr	r1, [r7, #0]
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 f96d 	bl	8009be2 <USBD_CtlError>
  }
}
 8009908:	bf00      	nop
 800990a:	bf00      	nop
 800990c:	3710      	adds	r7, #16
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
	...

08009914 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	885b      	ldrh	r3, [r3, #2]
 8009922:	b2da      	uxtb	r2, r3
 8009924:	4b41      	ldr	r3, [pc, #260]	; (8009a2c <USBD_SetConfig+0x118>)
 8009926:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009928:	4b40      	ldr	r3, [pc, #256]	; (8009a2c <USBD_SetConfig+0x118>)
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d904      	bls.n	800993a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009930:	6839      	ldr	r1, [r7, #0]
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 f955 	bl	8009be2 <USBD_CtlError>
 8009938:	e075      	b.n	8009a26 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009940:	2b02      	cmp	r3, #2
 8009942:	d002      	beq.n	800994a <USBD_SetConfig+0x36>
 8009944:	2b03      	cmp	r3, #3
 8009946:	d023      	beq.n	8009990 <USBD_SetConfig+0x7c>
 8009948:	e062      	b.n	8009a10 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800994a:	4b38      	ldr	r3, [pc, #224]	; (8009a2c <USBD_SetConfig+0x118>)
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d01a      	beq.n	8009988 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009952:	4b36      	ldr	r3, [pc, #216]	; (8009a2c <USBD_SetConfig+0x118>)
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	461a      	mov	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2203      	movs	r2, #3
 8009960:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009964:	4b31      	ldr	r3, [pc, #196]	; (8009a2c <USBD_SetConfig+0x118>)
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	4619      	mov	r1, r3
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f7ff f9e7 	bl	8008d3e <USBD_SetClassConfig>
 8009970:	4603      	mov	r3, r0
 8009972:	2b02      	cmp	r3, #2
 8009974:	d104      	bne.n	8009980 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009976:	6839      	ldr	r1, [r7, #0]
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f932 	bl	8009be2 <USBD_CtlError>
            return;
 800997e:	e052      	b.n	8009a26 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f9f6 	bl	8009d72 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009986:	e04e      	b.n	8009a26 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 f9f2 	bl	8009d72 <USBD_CtlSendStatus>
        break;
 800998e:	e04a      	b.n	8009a26 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009990:	4b26      	ldr	r3, [pc, #152]	; (8009a2c <USBD_SetConfig+0x118>)
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d112      	bne.n	80099be <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2202      	movs	r2, #2
 800999c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80099a0:	4b22      	ldr	r3, [pc, #136]	; (8009a2c <USBD_SetConfig+0x118>)
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	461a      	mov	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80099aa:	4b20      	ldr	r3, [pc, #128]	; (8009a2c <USBD_SetConfig+0x118>)
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	4619      	mov	r1, r3
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f7ff f9e3 	bl	8008d7c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 f9db 	bl	8009d72 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80099bc:	e033      	b.n	8009a26 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80099be:	4b1b      	ldr	r3, [pc, #108]	; (8009a2c <USBD_SetConfig+0x118>)
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	461a      	mov	r2, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d01d      	beq.n	8009a08 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	4619      	mov	r1, r3
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f7ff f9d1 	bl	8008d7c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80099da:	4b14      	ldr	r3, [pc, #80]	; (8009a2c <USBD_SetConfig+0x118>)
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	461a      	mov	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80099e4:	4b11      	ldr	r3, [pc, #68]	; (8009a2c <USBD_SetConfig+0x118>)
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	4619      	mov	r1, r3
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f7ff f9a7 	bl	8008d3e <USBD_SetClassConfig>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b02      	cmp	r3, #2
 80099f4:	d104      	bne.n	8009a00 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80099f6:	6839      	ldr	r1, [r7, #0]
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 f8f2 	bl	8009be2 <USBD_CtlError>
            return;
 80099fe:	e012      	b.n	8009a26 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 f9b6 	bl	8009d72 <USBD_CtlSendStatus>
        break;
 8009a06:	e00e      	b.n	8009a26 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 f9b2 	bl	8009d72 <USBD_CtlSendStatus>
        break;
 8009a0e:	e00a      	b.n	8009a26 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009a10:	6839      	ldr	r1, [r7, #0]
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 f8e5 	bl	8009be2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009a18:	4b04      	ldr	r3, [pc, #16]	; (8009a2c <USBD_SetConfig+0x118>)
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f7ff f9ac 	bl	8008d7c <USBD_ClrClassConfig>
        break;
 8009a24:	bf00      	nop
    }
  }
}
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	20000280 	.word	0x20000280

08009a30 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	88db      	ldrh	r3, [r3, #6]
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d004      	beq.n	8009a4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009a42:	6839      	ldr	r1, [r7, #0]
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 f8cc 	bl	8009be2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009a4a:	e022      	b.n	8009a92 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a52:	2b02      	cmp	r3, #2
 8009a54:	dc02      	bgt.n	8009a5c <USBD_GetConfig+0x2c>
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	dc03      	bgt.n	8009a62 <USBD_GetConfig+0x32>
 8009a5a:	e015      	b.n	8009a88 <USBD_GetConfig+0x58>
 8009a5c:	2b03      	cmp	r3, #3
 8009a5e:	d00b      	beq.n	8009a78 <USBD_GetConfig+0x48>
 8009a60:	e012      	b.n	8009a88 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	3308      	adds	r3, #8
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	4619      	mov	r1, r3
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 f920 	bl	8009cb6 <USBD_CtlSendData>
        break;
 8009a76:	e00c      	b.n	8009a92 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	3304      	adds	r3, #4
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	4619      	mov	r1, r3
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 f918 	bl	8009cb6 <USBD_CtlSendData>
        break;
 8009a86:	e004      	b.n	8009a92 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009a88:	6839      	ldr	r1, [r7, #0]
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 f8a9 	bl	8009be2 <USBD_CtlError>
        break;
 8009a90:	bf00      	nop
}
 8009a92:	bf00      	nop
 8009a94:	3708      	adds	r7, #8
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b082      	sub	sp, #8
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
 8009aa2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	d81e      	bhi.n	8009aee <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	88db      	ldrh	r3, [r3, #6]
 8009ab4:	2b02      	cmp	r3, #2
 8009ab6:	d004      	beq.n	8009ac2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009ab8:	6839      	ldr	r1, [r7, #0]
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 f891 	bl	8009be2 <USBD_CtlError>
        break;
 8009ac0:	e01a      	b.n	8009af8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d005      	beq.n	8009ade <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	f043 0202 	orr.w	r2, r3, #2
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	330c      	adds	r3, #12
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 f8e5 	bl	8009cb6 <USBD_CtlSendData>
      break;
 8009aec:	e004      	b.n	8009af8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009aee:	6839      	ldr	r1, [r7, #0]
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 f876 	bl	8009be2 <USBD_CtlError>
      break;
 8009af6:	bf00      	nop
  }
}
 8009af8:	bf00      	nop
 8009afa:	3708      	adds	r7, #8
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	885b      	ldrh	r3, [r3, #2]
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d106      	bne.n	8009b20 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2201      	movs	r2, #1
 8009b16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 f929 	bl	8009d72 <USBD_CtlSendStatus>
  }
}
 8009b20:	bf00      	nop
 8009b22:	3708      	adds	r7, #8
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	2b02      	cmp	r3, #2
 8009b3c:	d80b      	bhi.n	8009b56 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	885b      	ldrh	r3, [r3, #2]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d10c      	bne.n	8009b60 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 f90f 	bl	8009d72 <USBD_CtlSendStatus>
      }
      break;
 8009b54:	e004      	b.n	8009b60 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009b56:	6839      	ldr	r1, [r7, #0]
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f842 	bl	8009be2 <USBD_CtlError>
      break;
 8009b5e:	e000      	b.n	8009b62 <USBD_ClrFeature+0x3a>
      break;
 8009b60:	bf00      	nop
  }
}
 8009b62:	bf00      	nop
 8009b64:	3708      	adds	r7, #8
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009b6a:	b480      	push	{r7}
 8009b6c:	b083      	sub	sp, #12
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
 8009b72:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	781a      	ldrb	r2, [r3, #0]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	785a      	ldrb	r2, [r3, #1]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	3302      	adds	r3, #2
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	3303      	adds	r3, #3
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	021b      	lsls	r3, r3, #8
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	4413      	add	r3, r2
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	3304      	adds	r3, #4
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	b29a      	uxth	r2, r3
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	3305      	adds	r3, #5
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	021b      	lsls	r3, r3, #8
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	4413      	add	r3, r2
 8009bb6:	b29a      	uxth	r2, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	3306      	adds	r3, #6
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	b29a      	uxth	r2, r3
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	3307      	adds	r3, #7
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	021b      	lsls	r3, r3, #8
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	4413      	add	r3, r2
 8009bd2:	b29a      	uxth	r2, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	80da      	strh	r2, [r3, #6]

}
 8009bd8:	bf00      	nop
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bc80      	pop	{r7}
 8009be0:	4770      	bx	lr

08009be2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b082      	sub	sp, #8
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
 8009bea:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009bec:	2180      	movs	r1, #128	; 0x80
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 fc58 	bl	800a4a4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 fc54 	bl	800a4a4 <USBD_LL_StallEP>
}
 8009bfc:	bf00      	nop
 8009bfe:	3708      	adds	r7, #8
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b086      	sub	sp, #24
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009c10:	2300      	movs	r3, #0
 8009c12:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d032      	beq.n	8009c80 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	f000 f834 	bl	8009c88 <USBD_GetLen>
 8009c20:	4603      	mov	r3, r0
 8009c22:	3301      	adds	r3, #1
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	005b      	lsls	r3, r3, #1
 8009c28:	b29a      	uxth	r2, r3
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009c2e:	7dfb      	ldrb	r3, [r7, #23]
 8009c30:	1c5a      	adds	r2, r3, #1
 8009c32:	75fa      	strb	r2, [r7, #23]
 8009c34:	461a      	mov	r2, r3
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	4413      	add	r3, r2
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	7812      	ldrb	r2, [r2, #0]
 8009c3e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009c40:	7dfb      	ldrb	r3, [r7, #23]
 8009c42:	1c5a      	adds	r2, r3, #1
 8009c44:	75fa      	strb	r2, [r7, #23]
 8009c46:	461a      	mov	r2, r3
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	2203      	movs	r2, #3
 8009c4e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009c50:	e012      	b.n	8009c78 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	1c5a      	adds	r2, r3, #1
 8009c56:	60fa      	str	r2, [r7, #12]
 8009c58:	7dfa      	ldrb	r2, [r7, #23]
 8009c5a:	1c51      	adds	r1, r2, #1
 8009c5c:	75f9      	strb	r1, [r7, #23]
 8009c5e:	4611      	mov	r1, r2
 8009c60:	68ba      	ldr	r2, [r7, #8]
 8009c62:	440a      	add	r2, r1
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009c68:	7dfb      	ldrb	r3, [r7, #23]
 8009c6a:	1c5a      	adds	r2, r3, #1
 8009c6c:	75fa      	strb	r2, [r7, #23]
 8009c6e:	461a      	mov	r2, r3
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	4413      	add	r3, r2
 8009c74:	2200      	movs	r2, #0
 8009c76:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d1e8      	bne.n	8009c52 <USBD_GetString+0x4e>
    }
  }
}
 8009c80:	bf00      	nop
 8009c82:	3718      	adds	r7, #24
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b085      	sub	sp, #20
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009c90:	2300      	movs	r3, #0
 8009c92:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009c94:	e005      	b.n	8009ca2 <USBD_GetLen+0x1a>
  {
    len++;
 8009c96:	7bfb      	ldrb	r3, [r7, #15]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d1f5      	bne.n	8009c96 <USBD_GetLen+0xe>
  }

  return len;
 8009caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3714      	adds	r7, #20
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bc80      	pop	{r7}
 8009cb4:	4770      	bx	lr

08009cb6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b084      	sub	sp, #16
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	60f8      	str	r0, [r7, #12]
 8009cbe:	60b9      	str	r1, [r7, #8]
 8009cc0:	4613      	mov	r3, r2
 8009cc2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2202      	movs	r2, #2
 8009cc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009ccc:	88fa      	ldrh	r2, [r7, #6]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009cd2:	88fa      	ldrh	r2, [r7, #6]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009cd8:	88fb      	ldrh	r3, [r7, #6]
 8009cda:	68ba      	ldr	r2, [r7, #8]
 8009cdc:	2100      	movs	r1, #0
 8009cde:	68f8      	ldr	r0, [r7, #12]
 8009ce0:	f000 fc69 	bl	800a5b6 <USBD_LL_Transmit>

  return USBD_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b084      	sub	sp, #16
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	60f8      	str	r0, [r7, #12]
 8009cf6:	60b9      	str	r1, [r7, #8]
 8009cf8:	4613      	mov	r3, r2
 8009cfa:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009cfc:	88fb      	ldrh	r3, [r7, #6]
 8009cfe:	68ba      	ldr	r2, [r7, #8]
 8009d00:	2100      	movs	r1, #0
 8009d02:	68f8      	ldr	r0, [r7, #12]
 8009d04:	f000 fc57 	bl	800a5b6 <USBD_LL_Transmit>

  return USBD_OK;
 8009d08:	2300      	movs	r3, #0
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b084      	sub	sp, #16
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	60f8      	str	r0, [r7, #12]
 8009d1a:	60b9      	str	r1, [r7, #8]
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2203      	movs	r2, #3
 8009d24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009d28:	88fa      	ldrh	r2, [r7, #6]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009d30:	88fa      	ldrh	r2, [r7, #6]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d38:	88fb      	ldrh	r3, [r7, #6]
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	2100      	movs	r1, #0
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	f000 fc5c 	bl	800a5fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b084      	sub	sp, #16
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	60f8      	str	r0, [r7, #12]
 8009d56:	60b9      	str	r1, [r7, #8]
 8009d58:	4613      	mov	r3, r2
 8009d5a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d5c:	88fb      	ldrh	r3, [r7, #6]
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	2100      	movs	r1, #0
 8009d62:	68f8      	ldr	r0, [r7, #12]
 8009d64:	f000 fc4a 	bl	800a5fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b082      	sub	sp, #8
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2204      	movs	r2, #4
 8009d7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009d82:	2300      	movs	r3, #0
 8009d84:	2200      	movs	r2, #0
 8009d86:	2100      	movs	r1, #0
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 fc14 	bl	800a5b6 <USBD_LL_Transmit>

  return USBD_OK;
 8009d8e:	2300      	movs	r3, #0
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3708      	adds	r7, #8
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2205      	movs	r2, #5
 8009da4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009da8:	2300      	movs	r3, #0
 8009daa:	2200      	movs	r2, #0
 8009dac:	2100      	movs	r1, #0
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 fc24 	bl	800a5fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3708      	adds	r7, #8
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
	...

08009dc0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	4912      	ldr	r1, [pc, #72]	; (8009e10 <MX_USB_DEVICE_Init+0x50>)
 8009dc8:	4812      	ldr	r0, [pc, #72]	; (8009e14 <MX_USB_DEVICE_Init+0x54>)
 8009dca:	f7fe ff5e 	bl	8008c8a <USBD_Init>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d001      	beq.n	8009dd8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009dd4:	f7f7 fe5c 	bl	8001a90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009dd8:	490f      	ldr	r1, [pc, #60]	; (8009e18 <MX_USB_DEVICE_Init+0x58>)
 8009dda:	480e      	ldr	r0, [pc, #56]	; (8009e14 <MX_USB_DEVICE_Init+0x54>)
 8009ddc:	f7fe ff80 	bl	8008ce0 <USBD_RegisterClass>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d001      	beq.n	8009dea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009de6:	f7f7 fe53 	bl	8001a90 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009dea:	490c      	ldr	r1, [pc, #48]	; (8009e1c <MX_USB_DEVICE_Init+0x5c>)
 8009dec:	4809      	ldr	r0, [pc, #36]	; (8009e14 <MX_USB_DEVICE_Init+0x54>)
 8009dee:	f7fe feb1 	bl	8008b54 <USBD_CDC_RegisterInterface>
 8009df2:	4603      	mov	r3, r0
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d001      	beq.n	8009dfc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009df8:	f7f7 fe4a 	bl	8001a90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009dfc:	4805      	ldr	r0, [pc, #20]	; (8009e14 <MX_USB_DEVICE_Init+0x54>)
 8009dfe:	f7fe ff88 	bl	8008d12 <USBD_Start>
 8009e02:	4603      	mov	r3, r0
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d001      	beq.n	8009e0c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009e08:	f7f7 fe42 	bl	8001a90 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009e0c:	bf00      	nop
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	20000140 	.word	0x20000140
 8009e14:	200009f0 	.word	0x200009f0
 8009e18:	2000002c 	.word	0x2000002c
 8009e1c:	20000130 	.word	0x20000130

08009e20 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009e24:	2200      	movs	r2, #0
 8009e26:	4905      	ldr	r1, [pc, #20]	; (8009e3c <CDC_Init_FS+0x1c>)
 8009e28:	4805      	ldr	r0, [pc, #20]	; (8009e40 <CDC_Init_FS+0x20>)
 8009e2a:	f7fe fea9 	bl	8008b80 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009e2e:	4905      	ldr	r1, [pc, #20]	; (8009e44 <CDC_Init_FS+0x24>)
 8009e30:	4803      	ldr	r0, [pc, #12]	; (8009e40 <CDC_Init_FS+0x20>)
 8009e32:	f7fe febe 	bl	8008bb2 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8009e36:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	20000eb4 	.word	0x20000eb4
 8009e40:	200009f0 	.word	0x200009f0
 8009e44:	20000cb4 	.word	0x20000cb4

08009e48 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8009e4c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bc80      	pop	{r7}
 8009e54:	4770      	bx	lr
	...

08009e58 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b083      	sub	sp, #12
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	4603      	mov	r3, r0
 8009e60:	6039      	str	r1, [r7, #0]
 8009e62:	71fb      	strb	r3, [r7, #7]
 8009e64:	4613      	mov	r3, r2
 8009e66:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd)
 8009e68:	79fb      	ldrb	r3, [r7, #7]
 8009e6a:	2b23      	cmp	r3, #35	; 0x23
 8009e6c:	d84a      	bhi.n	8009f04 <CDC_Control_FS+0xac>
 8009e6e:	a201      	add	r2, pc, #4	; (adr r2, 8009e74 <CDC_Control_FS+0x1c>)
 8009e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e74:	08009f05 	.word	0x08009f05
 8009e78:	08009f05 	.word	0x08009f05
 8009e7c:	08009f05 	.word	0x08009f05
 8009e80:	08009f05 	.word	0x08009f05
 8009e84:	08009f05 	.word	0x08009f05
 8009e88:	08009f05 	.word	0x08009f05
 8009e8c:	08009f05 	.word	0x08009f05
 8009e90:	08009f05 	.word	0x08009f05
 8009e94:	08009f05 	.word	0x08009f05
 8009e98:	08009f05 	.word	0x08009f05
 8009e9c:	08009f05 	.word	0x08009f05
 8009ea0:	08009f05 	.word	0x08009f05
 8009ea4:	08009f05 	.word	0x08009f05
 8009ea8:	08009f05 	.word	0x08009f05
 8009eac:	08009f05 	.word	0x08009f05
 8009eb0:	08009f05 	.word	0x08009f05
 8009eb4:	08009f05 	.word	0x08009f05
 8009eb8:	08009f05 	.word	0x08009f05
 8009ebc:	08009f05 	.word	0x08009f05
 8009ec0:	08009f05 	.word	0x08009f05
 8009ec4:	08009f05 	.word	0x08009f05
 8009ec8:	08009f05 	.word	0x08009f05
 8009ecc:	08009f05 	.word	0x08009f05
 8009ed0:	08009f05 	.word	0x08009f05
 8009ed4:	08009f05 	.word	0x08009f05
 8009ed8:	08009f05 	.word	0x08009f05
 8009edc:	08009f05 	.word	0x08009f05
 8009ee0:	08009f05 	.word	0x08009f05
 8009ee4:	08009f05 	.word	0x08009f05
 8009ee8:	08009f05 	.word	0x08009f05
 8009eec:	08009f05 	.word	0x08009f05
 8009ef0:	08009f05 	.word	0x08009f05
 8009ef4:	08009f05 	.word	0x08009f05
 8009ef8:	08009f05 	.word	0x08009f05
 8009efc:	08009f05 	.word	0x08009f05
 8009f00:	08009f05 	.word	0x08009f05
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8009f04:	bf00      	nop
	}

	return (USBD_OK);
 8009f06:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bc80      	pop	{r7}
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop

08009f14 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009f1e:	6879      	ldr	r1, [r7, #4]
 8009f20:	4807      	ldr	r0, [pc, #28]	; (8009f40 <CDC_Receive_FS+0x2c>)
 8009f22:	f7fe fe46 	bl	8008bb2 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009f26:	4806      	ldr	r0, [pc, #24]	; (8009f40 <CDC_Receive_FS+0x2c>)
 8009f28:	f7fe fe85 	bl	8008c36 <USBD_CDC_ReceivePacket>

	runCommands(Buf, Len);
 8009f2c:	6839      	ldr	r1, [r7, #0]
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f7f6 fdac 	bl	8000a8c <runCommands>
	return (USBD_OK);
 8009f34:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3708      	adds	r7, #8
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	200009f0 	.word	0x200009f0

08009f44 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009f50:	2300      	movs	r3, #0
 8009f52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 8009f54:	4b0d      	ldr	r3, [pc, #52]	; (8009f8c <CDC_Transmit_FS+0x48>)
 8009f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f5a:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0)
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d001      	beq.n	8009f6a <CDC_Transmit_FS+0x26>
	{
		return USBD_BUSY;
 8009f66:	2301      	movs	r3, #1
 8009f68:	e00b      	b.n	8009f82 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009f6a:	887b      	ldrh	r3, [r7, #2]
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	6879      	ldr	r1, [r7, #4]
 8009f70:	4806      	ldr	r0, [pc, #24]	; (8009f8c <CDC_Transmit_FS+0x48>)
 8009f72:	f7fe fe05 	bl	8008b80 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009f76:	4805      	ldr	r0, [pc, #20]	; (8009f8c <CDC_Transmit_FS+0x48>)
 8009f78:	f7fe fe2e 	bl	8008bd8 <USBD_CDC_TransmitPacket>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3710      	adds	r7, #16
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	200009f0 	.word	0x200009f0

08009f90 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	4603      	mov	r3, r0
 8009f98:	6039      	str	r1, [r7, #0]
 8009f9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	2212      	movs	r2, #18
 8009fa0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009fa2:	4b03      	ldr	r3, [pc, #12]	; (8009fb0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	370c      	adds	r7, #12
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bc80      	pop	{r7}
 8009fac:	4770      	bx	lr
 8009fae:	bf00      	nop
 8009fb0:	2000015c 	.word	0x2000015c

08009fb4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	4603      	mov	r3, r0
 8009fbc:	6039      	str	r1, [r7, #0]
 8009fbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	2204      	movs	r2, #4
 8009fc4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009fc6:	4b03      	ldr	r3, [pc, #12]	; (8009fd4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bc80      	pop	{r7}
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	20000170 	.word	0x20000170

08009fd8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	4603      	mov	r3, r0
 8009fe0:	6039      	str	r1, [r7, #0]
 8009fe2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009fe4:	79fb      	ldrb	r3, [r7, #7]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d105      	bne.n	8009ff6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009fea:	683a      	ldr	r2, [r7, #0]
 8009fec:	4907      	ldr	r1, [pc, #28]	; (800a00c <USBD_FS_ProductStrDescriptor+0x34>)
 8009fee:	4808      	ldr	r0, [pc, #32]	; (800a010 <USBD_FS_ProductStrDescriptor+0x38>)
 8009ff0:	f7ff fe08 	bl	8009c04 <USBD_GetString>
 8009ff4:	e004      	b.n	800a000 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009ff6:	683a      	ldr	r2, [r7, #0]
 8009ff8:	4904      	ldr	r1, [pc, #16]	; (800a00c <USBD_FS_ProductStrDescriptor+0x34>)
 8009ffa:	4805      	ldr	r0, [pc, #20]	; (800a010 <USBD_FS_ProductStrDescriptor+0x38>)
 8009ffc:	f7ff fe02 	bl	8009c04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a000:	4b02      	ldr	r3, [pc, #8]	; (800a00c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a002:	4618      	mov	r0, r3
 800a004:	3708      	adds	r7, #8
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	200010b4 	.word	0x200010b4
 800a010:	0800ba90 	.word	0x0800ba90

0800a014 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	4603      	mov	r3, r0
 800a01c:	6039      	str	r1, [r7, #0]
 800a01e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a020:	683a      	ldr	r2, [r7, #0]
 800a022:	4904      	ldr	r1, [pc, #16]	; (800a034 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a024:	4804      	ldr	r0, [pc, #16]	; (800a038 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a026:	f7ff fded 	bl	8009c04 <USBD_GetString>
  return USBD_StrDesc;
 800a02a:	4b02      	ldr	r3, [pc, #8]	; (800a034 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3708      	adds	r7, #8
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	200010b4 	.word	0x200010b4
 800a038:	0800baa8 	.word	0x0800baa8

0800a03c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	4603      	mov	r3, r0
 800a044:	6039      	str	r1, [r7, #0]
 800a046:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	221a      	movs	r2, #26
 800a04c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a04e:	f000 f843 	bl	800a0d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a052:	4b02      	ldr	r3, [pc, #8]	; (800a05c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a054:	4618      	mov	r0, r3
 800a056:	3708      	adds	r7, #8
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	20000174 	.word	0x20000174

0800a060 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	4603      	mov	r3, r0
 800a068:	6039      	str	r1, [r7, #0]
 800a06a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a06c:	79fb      	ldrb	r3, [r7, #7]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d105      	bne.n	800a07e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a072:	683a      	ldr	r2, [r7, #0]
 800a074:	4907      	ldr	r1, [pc, #28]	; (800a094 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a076:	4808      	ldr	r0, [pc, #32]	; (800a098 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a078:	f7ff fdc4 	bl	8009c04 <USBD_GetString>
 800a07c:	e004      	b.n	800a088 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a07e:	683a      	ldr	r2, [r7, #0]
 800a080:	4904      	ldr	r1, [pc, #16]	; (800a094 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a082:	4805      	ldr	r0, [pc, #20]	; (800a098 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a084:	f7ff fdbe 	bl	8009c04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a088:	4b02      	ldr	r3, [pc, #8]	; (800a094 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3708      	adds	r7, #8
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	200010b4 	.word	0x200010b4
 800a098:	0800babc 	.word	0x0800babc

0800a09c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	6039      	str	r1, [r7, #0]
 800a0a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a0a8:	79fb      	ldrb	r3, [r7, #7]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d105      	bne.n	800a0ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a0ae:	683a      	ldr	r2, [r7, #0]
 800a0b0:	4907      	ldr	r1, [pc, #28]	; (800a0d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a0b2:	4808      	ldr	r0, [pc, #32]	; (800a0d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a0b4:	f7ff fda6 	bl	8009c04 <USBD_GetString>
 800a0b8:	e004      	b.n	800a0c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a0ba:	683a      	ldr	r2, [r7, #0]
 800a0bc:	4904      	ldr	r1, [pc, #16]	; (800a0d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a0be:	4805      	ldr	r0, [pc, #20]	; (800a0d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a0c0:	f7ff fda0 	bl	8009c04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0c4:	4b02      	ldr	r3, [pc, #8]	; (800a0d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3708      	adds	r7, #8
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	200010b4 	.word	0x200010b4
 800a0d4:	0800bac8 	.word	0x0800bac8

0800a0d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a0de:	4b0f      	ldr	r3, [pc, #60]	; (800a11c <Get_SerialNum+0x44>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a0e4:	4b0e      	ldr	r3, [pc, #56]	; (800a120 <Get_SerialNum+0x48>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a0ea:	4b0e      	ldr	r3, [pc, #56]	; (800a124 <Get_SerialNum+0x4c>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	4413      	add	r3, r2
 800a0f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d009      	beq.n	800a112 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a0fe:	2208      	movs	r2, #8
 800a100:	4909      	ldr	r1, [pc, #36]	; (800a128 <Get_SerialNum+0x50>)
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f000 f814 	bl	800a130 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a108:	2204      	movs	r2, #4
 800a10a:	4908      	ldr	r1, [pc, #32]	; (800a12c <Get_SerialNum+0x54>)
 800a10c:	68b8      	ldr	r0, [r7, #8]
 800a10e:	f000 f80f 	bl	800a130 <IntToUnicode>
  }
}
 800a112:	bf00      	nop
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	1ffff7e8 	.word	0x1ffff7e8
 800a120:	1ffff7ec 	.word	0x1ffff7ec
 800a124:	1ffff7f0 	.word	0x1ffff7f0
 800a128:	20000176 	.word	0x20000176
 800a12c:	20000186 	.word	0x20000186

0800a130 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a130:	b480      	push	{r7}
 800a132:	b087      	sub	sp, #28
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	4613      	mov	r3, r2
 800a13c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a13e:	2300      	movs	r3, #0
 800a140:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a142:	2300      	movs	r3, #0
 800a144:	75fb      	strb	r3, [r7, #23]
 800a146:	e027      	b.n	800a198 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	0f1b      	lsrs	r3, r3, #28
 800a14c:	2b09      	cmp	r3, #9
 800a14e:	d80b      	bhi.n	800a168 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	0f1b      	lsrs	r3, r3, #28
 800a154:	b2da      	uxtb	r2, r3
 800a156:	7dfb      	ldrb	r3, [r7, #23]
 800a158:	005b      	lsls	r3, r3, #1
 800a15a:	4619      	mov	r1, r3
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	440b      	add	r3, r1
 800a160:	3230      	adds	r2, #48	; 0x30
 800a162:	b2d2      	uxtb	r2, r2
 800a164:	701a      	strb	r2, [r3, #0]
 800a166:	e00a      	b.n	800a17e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	0f1b      	lsrs	r3, r3, #28
 800a16c:	b2da      	uxtb	r2, r3
 800a16e:	7dfb      	ldrb	r3, [r7, #23]
 800a170:	005b      	lsls	r3, r3, #1
 800a172:	4619      	mov	r1, r3
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	440b      	add	r3, r1
 800a178:	3237      	adds	r2, #55	; 0x37
 800a17a:	b2d2      	uxtb	r2, r2
 800a17c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	011b      	lsls	r3, r3, #4
 800a182:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a184:	7dfb      	ldrb	r3, [r7, #23]
 800a186:	005b      	lsls	r3, r3, #1
 800a188:	3301      	adds	r3, #1
 800a18a:	68ba      	ldr	r2, [r7, #8]
 800a18c:	4413      	add	r3, r2
 800a18e:	2200      	movs	r2, #0
 800a190:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a192:	7dfb      	ldrb	r3, [r7, #23]
 800a194:	3301      	adds	r3, #1
 800a196:	75fb      	strb	r3, [r7, #23]
 800a198:	7dfa      	ldrb	r2, [r7, #23]
 800a19a:	79fb      	ldrb	r3, [r7, #7]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d3d3      	bcc.n	800a148 <IntToUnicode+0x18>
  }
}
 800a1a0:	bf00      	nop
 800a1a2:	bf00      	nop
 800a1a4:	371c      	adds	r7, #28
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bc80      	pop	{r7}
 800a1aa:	4770      	bx	lr

0800a1ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a0d      	ldr	r2, [pc, #52]	; (800a1f0 <HAL_PCD_MspInit+0x44>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d113      	bne.n	800a1e6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a1be:	4b0d      	ldr	r3, [pc, #52]	; (800a1f4 <HAL_PCD_MspInit+0x48>)
 800a1c0:	69db      	ldr	r3, [r3, #28]
 800a1c2:	4a0c      	ldr	r2, [pc, #48]	; (800a1f4 <HAL_PCD_MspInit+0x48>)
 800a1c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a1c8:	61d3      	str	r3, [r2, #28]
 800a1ca:	4b0a      	ldr	r3, [pc, #40]	; (800a1f4 <HAL_PCD_MspInit+0x48>)
 800a1cc:	69db      	ldr	r3, [r3, #28]
 800a1ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1d2:	60fb      	str	r3, [r7, #12]
 800a1d4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	2100      	movs	r1, #0
 800a1da:	2014      	movs	r0, #20
 800a1dc:	f7f8 fcbf 	bl	8002b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a1e0:	2014      	movs	r0, #20
 800a1e2:	f7f8 fcd8 	bl	8002b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a1e6:	bf00      	nop
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	40005c00 	.word	0x40005c00
 800a1f4:	40021000 	.word	0x40021000

0800a1f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a20c:	4619      	mov	r1, r3
 800a20e:	4610      	mov	r0, r2
 800a210:	f7fe fdc7 	bl	8008da2 <USBD_LL_SetupStage>
}
 800a214:	bf00      	nop
 800a216:	3708      	adds	r7, #8
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	460b      	mov	r3, r1
 800a226:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a22e:	78fa      	ldrb	r2, [r7, #3]
 800a230:	6879      	ldr	r1, [r7, #4]
 800a232:	4613      	mov	r3, r2
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	4413      	add	r3, r2
 800a238:	00db      	lsls	r3, r3, #3
 800a23a:	440b      	add	r3, r1
 800a23c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	78fb      	ldrb	r3, [r7, #3]
 800a244:	4619      	mov	r1, r3
 800a246:	f7fe fdf9 	bl	8008e3c <USBD_LL_DataOutStage>
}
 800a24a:	bf00      	nop
 800a24c:	3708      	adds	r7, #8
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b082      	sub	sp, #8
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
 800a25a:	460b      	mov	r3, r1
 800a25c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a264:	78fa      	ldrb	r2, [r7, #3]
 800a266:	6879      	ldr	r1, [r7, #4]
 800a268:	4613      	mov	r3, r2
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	4413      	add	r3, r2
 800a26e:	00db      	lsls	r3, r3, #3
 800a270:	440b      	add	r3, r1
 800a272:	333c      	adds	r3, #60	; 0x3c
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	78fb      	ldrb	r3, [r7, #3]
 800a278:	4619      	mov	r1, r3
 800a27a:	f7fe fe50 	bl	8008f1e <USBD_LL_DataInStage>
}
 800a27e:	bf00      	nop
 800a280:	3708      	adds	r7, #8
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b082      	sub	sp, #8
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a294:	4618      	mov	r0, r3
 800a296:	f7fe ff60 	bl	800915a <USBD_LL_SOF>
}
 800a29a:	bf00      	nop
 800a29c:	3708      	adds	r7, #8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b084      	sub	sp, #16
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	2b02      	cmp	r3, #2
 800a2b4:	d001      	beq.n	800a2ba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a2b6:	f7f7 fbeb 	bl	8001a90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a2c0:	7bfa      	ldrb	r2, [r7, #15]
 800a2c2:	4611      	mov	r1, r2
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7fe ff10 	bl	80090ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f7fe fec9 	bl	8009068 <USBD_LL_Reset>
}
 800a2d6:	bf00      	nop
 800a2d8:	3710      	adds	r7, #16
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
	...

0800a2e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7fe ff0a 	bl	8009108 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	699b      	ldr	r3, [r3, #24]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d005      	beq.n	800a308 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a2fc:	4b04      	ldr	r3, [pc, #16]	; (800a310 <HAL_PCD_SuspendCallback+0x30>)
 800a2fe:	691b      	ldr	r3, [r3, #16]
 800a300:	4a03      	ldr	r2, [pc, #12]	; (800a310 <HAL_PCD_SuspendCallback+0x30>)
 800a302:	f043 0306 	orr.w	r3, r3, #6
 800a306:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a308:	bf00      	nop
 800a30a:	3708      	adds	r7, #8
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	e000ed00 	.word	0xe000ed00

0800a314 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a322:	4618      	mov	r0, r3
 800a324:	f7fe ff04 	bl	8009130 <USBD_LL_Resume>
}
 800a328:	bf00      	nop
 800a32a:	3708      	adds	r7, #8
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a338:	4a28      	ldr	r2, [pc, #160]	; (800a3dc <USBD_LL_Init+0xac>)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	4a26      	ldr	r2, [pc, #152]	; (800a3dc <USBD_LL_Init+0xac>)
 800a344:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a348:	4b24      	ldr	r3, [pc, #144]	; (800a3dc <USBD_LL_Init+0xac>)
 800a34a:	4a25      	ldr	r2, [pc, #148]	; (800a3e0 <USBD_LL_Init+0xb0>)
 800a34c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a34e:	4b23      	ldr	r3, [pc, #140]	; (800a3dc <USBD_LL_Init+0xac>)
 800a350:	2208      	movs	r2, #8
 800a352:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a354:	4b21      	ldr	r3, [pc, #132]	; (800a3dc <USBD_LL_Init+0xac>)
 800a356:	2202      	movs	r2, #2
 800a358:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a35a:	4b20      	ldr	r3, [pc, #128]	; (800a3dc <USBD_LL_Init+0xac>)
 800a35c:	2200      	movs	r2, #0
 800a35e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a360:	4b1e      	ldr	r3, [pc, #120]	; (800a3dc <USBD_LL_Init+0xac>)
 800a362:	2200      	movs	r2, #0
 800a364:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a366:	4b1d      	ldr	r3, [pc, #116]	; (800a3dc <USBD_LL_Init+0xac>)
 800a368:	2200      	movs	r2, #0
 800a36a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a36c:	481b      	ldr	r0, [pc, #108]	; (800a3dc <USBD_LL_Init+0xac>)
 800a36e:	f7f9 f82e 	bl	80033ce <HAL_PCD_Init>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d001      	beq.n	800a37c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a378:	f7f7 fb8a 	bl	8001a90 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a382:	2318      	movs	r3, #24
 800a384:	2200      	movs	r2, #0
 800a386:	2100      	movs	r1, #0
 800a388:	f7fa fb70 	bl	8004a6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a392:	2358      	movs	r3, #88	; 0x58
 800a394:	2200      	movs	r2, #0
 800a396:	2180      	movs	r1, #128	; 0x80
 800a398:	f7fa fb68 	bl	8004a6c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a3a2:	23c0      	movs	r3, #192	; 0xc0
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	2181      	movs	r1, #129	; 0x81
 800a3a8:	f7fa fb60 	bl	8004a6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a3b2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	2101      	movs	r1, #1
 800a3ba:	f7fa fb57 	bl	8004a6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a3c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	2182      	movs	r1, #130	; 0x82
 800a3cc:	f7fa fb4e 	bl	8004a6c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3708      	adds	r7, #8
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	200012b4 	.word	0x200012b4
 800a3e0:	40005c00 	.word	0x40005c00

0800a3e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7f9 f8f2 	bl	80035e4 <HAL_PCD_Start>
 800a400:	4603      	mov	r3, r0
 800a402:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a404:	7bfb      	ldrb	r3, [r7, #15]
 800a406:	4618      	mov	r0, r3
 800a408:	f000 f94e 	bl	800a6a8 <USBD_Get_USB_Status>
 800a40c:	4603      	mov	r3, r0
 800a40e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a410:	7bbb      	ldrb	r3, [r7, #14]
}
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b084      	sub	sp, #16
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
 800a422:	4608      	mov	r0, r1
 800a424:	4611      	mov	r1, r2
 800a426:	461a      	mov	r2, r3
 800a428:	4603      	mov	r3, r0
 800a42a:	70fb      	strb	r3, [r7, #3]
 800a42c:	460b      	mov	r3, r1
 800a42e:	70bb      	strb	r3, [r7, #2]
 800a430:	4613      	mov	r3, r2
 800a432:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a434:	2300      	movs	r3, #0
 800a436:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a438:	2300      	movs	r3, #0
 800a43a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a442:	78bb      	ldrb	r3, [r7, #2]
 800a444:	883a      	ldrh	r2, [r7, #0]
 800a446:	78f9      	ldrb	r1, [r7, #3]
 800a448:	f7f9 fa6c 	bl	8003924 <HAL_PCD_EP_Open>
 800a44c:	4603      	mov	r3, r0
 800a44e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a450:	7bfb      	ldrb	r3, [r7, #15]
 800a452:	4618      	mov	r0, r3
 800a454:	f000 f928 	bl	800a6a8 <USBD_Get_USB_Status>
 800a458:	4603      	mov	r3, r0
 800a45a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a45c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3710      	adds	r7, #16
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}

0800a466 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a466:	b580      	push	{r7, lr}
 800a468:	b084      	sub	sp, #16
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
 800a46e:	460b      	mov	r3, r1
 800a470:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a472:	2300      	movs	r3, #0
 800a474:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a476:	2300      	movs	r3, #0
 800a478:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a480:	78fa      	ldrb	r2, [r7, #3]
 800a482:	4611      	mov	r1, r2
 800a484:	4618      	mov	r0, r3
 800a486:	f7f9 fab3 	bl	80039f0 <HAL_PCD_EP_Close>
 800a48a:	4603      	mov	r3, r0
 800a48c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a48e:	7bfb      	ldrb	r3, [r7, #15]
 800a490:	4618      	mov	r0, r3
 800a492:	f000 f909 	bl	800a6a8 <USBD_Get_USB_Status>
 800a496:	4603      	mov	r3, r0
 800a498:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a49a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3710      	adds	r7, #16
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4be:	78fa      	ldrb	r2, [r7, #3]
 800a4c0:	4611      	mov	r1, r2
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7f9 fb73 	bl	8003bae <HAL_PCD_EP_SetStall>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4cc:	7bfb      	ldrb	r3, [r7, #15]
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f000 f8ea 	bl	800a6a8 <USBD_Get_USB_Status>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b084      	sub	sp, #16
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4fc:	78fa      	ldrb	r2, [r7, #3]
 800a4fe:	4611      	mov	r1, r2
 800a500:	4618      	mov	r0, r3
 800a502:	f7f9 fbb4 	bl	8003c6e <HAL_PCD_EP_ClrStall>
 800a506:	4603      	mov	r3, r0
 800a508:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a50a:	7bfb      	ldrb	r3, [r7, #15]
 800a50c:	4618      	mov	r0, r3
 800a50e:	f000 f8cb 	bl	800a6a8 <USBD_Get_USB_Status>
 800a512:	4603      	mov	r3, r0
 800a514:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a516:	7bbb      	ldrb	r3, [r7, #14]
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	460b      	mov	r3, r1
 800a52a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a532:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a534:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	da0c      	bge.n	800a556 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a53c:	78fb      	ldrb	r3, [r7, #3]
 800a53e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a542:	68f9      	ldr	r1, [r7, #12]
 800a544:	1c5a      	adds	r2, r3, #1
 800a546:	4613      	mov	r3, r2
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	4413      	add	r3, r2
 800a54c:	00db      	lsls	r3, r3, #3
 800a54e:	440b      	add	r3, r1
 800a550:	3302      	adds	r3, #2
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	e00b      	b.n	800a56e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a556:	78fb      	ldrb	r3, [r7, #3]
 800a558:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a55c:	68f9      	ldr	r1, [r7, #12]
 800a55e:	4613      	mov	r3, r2
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	4413      	add	r3, r2
 800a564:	00db      	lsls	r3, r3, #3
 800a566:	440b      	add	r3, r1
 800a568:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a56c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3714      	adds	r7, #20
 800a572:	46bd      	mov	sp, r7
 800a574:	bc80      	pop	{r7}
 800a576:	4770      	bx	lr

0800a578 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	460b      	mov	r3, r1
 800a582:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a584:	2300      	movs	r3, #0
 800a586:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a588:	2300      	movs	r3, #0
 800a58a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a592:	78fa      	ldrb	r2, [r7, #3]
 800a594:	4611      	mov	r1, r2
 800a596:	4618      	mov	r0, r3
 800a598:	f7f9 f99f 	bl	80038da <HAL_PCD_SetAddress>
 800a59c:	4603      	mov	r3, r0
 800a59e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5a0:	7bfb      	ldrb	r3, [r7, #15]
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f000 f880 	bl	800a6a8 <USBD_Get_USB_Status>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}

0800a5b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a5b6:	b580      	push	{r7, lr}
 800a5b8:	b086      	sub	sp, #24
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	60f8      	str	r0, [r7, #12]
 800a5be:	607a      	str	r2, [r7, #4]
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	460b      	mov	r3, r1
 800a5c4:	72fb      	strb	r3, [r7, #11]
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a5d8:	893b      	ldrh	r3, [r7, #8]
 800a5da:	7af9      	ldrb	r1, [r7, #11]
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	f7f9 faa3 	bl	8003b28 <HAL_PCD_EP_Transmit>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5e6:	7dfb      	ldrb	r3, [r7, #23]
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f000 f85d 	bl	800a6a8 <USBD_Get_USB_Status>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a5f2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3718      	adds	r7, #24
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b086      	sub	sp, #24
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	607a      	str	r2, [r7, #4]
 800a606:	461a      	mov	r2, r3
 800a608:	460b      	mov	r3, r1
 800a60a:	72fb      	strb	r3, [r7, #11]
 800a60c:	4613      	mov	r3, r2
 800a60e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a610:	2300      	movs	r3, #0
 800a612:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a614:	2300      	movs	r3, #0
 800a616:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a61e:	893b      	ldrh	r3, [r7, #8]
 800a620:	7af9      	ldrb	r1, [r7, #11]
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	f7f9 fa2c 	bl	8003a80 <HAL_PCD_EP_Receive>
 800a628:	4603      	mov	r3, r0
 800a62a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a62c:	7dfb      	ldrb	r3, [r7, #23]
 800a62e:	4618      	mov	r0, r3
 800a630:	f000 f83a 	bl	800a6a8 <USBD_Get_USB_Status>
 800a634:	4603      	mov	r3, r0
 800a636:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a638:	7dbb      	ldrb	r3, [r7, #22]
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3718      	adds	r7, #24
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b082      	sub	sp, #8
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
 800a64a:	460b      	mov	r3, r1
 800a64c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a654:	78fa      	ldrb	r2, [r7, #3]
 800a656:	4611      	mov	r1, r2
 800a658:	4618      	mov	r0, r3
 800a65a:	f7f9 fa4e 	bl	8003afa <HAL_PCD_EP_GetRxCount>
 800a65e:	4603      	mov	r3, r0
}
 800a660:	4618      	mov	r0, r3
 800a662:	3708      	adds	r7, #8
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a670:	4b02      	ldr	r3, [pc, #8]	; (800a67c <USBD_static_malloc+0x14>)
}
 800a672:	4618      	mov	r0, r3
 800a674:	370c      	adds	r7, #12
 800a676:	46bd      	mov	sp, r7
 800a678:	bc80      	pop	{r7}
 800a67a:	4770      	bx	lr
 800a67c:	20000284 	.word	0x20000284

0800a680 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]

}
 800a688:	bf00      	nop
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bc80      	pop	{r7}
 800a690:	4770      	bx	lr

0800a692 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a692:	b480      	push	{r7}
 800a694:	b083      	sub	sp, #12
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
 800a69a:	460b      	mov	r3, r1
 800a69c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a69e:	bf00      	nop
 800a6a0:	370c      	adds	r7, #12
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bc80      	pop	{r7}
 800a6a6:	4770      	bx	lr

0800a6a8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b085      	sub	sp, #20
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a6b6:	79fb      	ldrb	r3, [r7, #7]
 800a6b8:	2b03      	cmp	r3, #3
 800a6ba:	d817      	bhi.n	800a6ec <USBD_Get_USB_Status+0x44>
 800a6bc:	a201      	add	r2, pc, #4	; (adr r2, 800a6c4 <USBD_Get_USB_Status+0x1c>)
 800a6be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c2:	bf00      	nop
 800a6c4:	0800a6d5 	.word	0x0800a6d5
 800a6c8:	0800a6db 	.word	0x0800a6db
 800a6cc:	0800a6e1 	.word	0x0800a6e1
 800a6d0:	0800a6e7 	.word	0x0800a6e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a6d8:	e00b      	b.n	800a6f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a6da:	2302      	movs	r3, #2
 800a6dc:	73fb      	strb	r3, [r7, #15]
    break;
 800a6de:	e008      	b.n	800a6f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a6e4:	e005      	b.n	800a6f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a6e6:	2302      	movs	r3, #2
 800a6e8:	73fb      	strb	r3, [r7, #15]
    break;
 800a6ea:	e002      	b.n	800a6f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a6ec:	2302      	movs	r3, #2
 800a6ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a6f0:	bf00      	nop
  }
  return usb_status;
 800a6f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3714      	adds	r7, #20
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bc80      	pop	{r7}
 800a6fc:	4770      	bx	lr
 800a6fe:	bf00      	nop

0800a700 <__errno>:
 800a700:	4b01      	ldr	r3, [pc, #4]	; (800a708 <__errno+0x8>)
 800a702:	6818      	ldr	r0, [r3, #0]
 800a704:	4770      	bx	lr
 800a706:	bf00      	nop
 800a708:	20000190 	.word	0x20000190

0800a70c <__libc_init_array>:
 800a70c:	b570      	push	{r4, r5, r6, lr}
 800a70e:	2600      	movs	r6, #0
 800a710:	4d0c      	ldr	r5, [pc, #48]	; (800a744 <__libc_init_array+0x38>)
 800a712:	4c0d      	ldr	r4, [pc, #52]	; (800a748 <__libc_init_array+0x3c>)
 800a714:	1b64      	subs	r4, r4, r5
 800a716:	10a4      	asrs	r4, r4, #2
 800a718:	42a6      	cmp	r6, r4
 800a71a:	d109      	bne.n	800a730 <__libc_init_array+0x24>
 800a71c:	f001 f954 	bl	800b9c8 <_init>
 800a720:	2600      	movs	r6, #0
 800a722:	4d0a      	ldr	r5, [pc, #40]	; (800a74c <__libc_init_array+0x40>)
 800a724:	4c0a      	ldr	r4, [pc, #40]	; (800a750 <__libc_init_array+0x44>)
 800a726:	1b64      	subs	r4, r4, r5
 800a728:	10a4      	asrs	r4, r4, #2
 800a72a:	42a6      	cmp	r6, r4
 800a72c:	d105      	bne.n	800a73a <__libc_init_array+0x2e>
 800a72e:	bd70      	pop	{r4, r5, r6, pc}
 800a730:	f855 3b04 	ldr.w	r3, [r5], #4
 800a734:	4798      	blx	r3
 800a736:	3601      	adds	r6, #1
 800a738:	e7ee      	b.n	800a718 <__libc_init_array+0xc>
 800a73a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a73e:	4798      	blx	r3
 800a740:	3601      	adds	r6, #1
 800a742:	e7f2      	b.n	800a72a <__libc_init_array+0x1e>
 800a744:	0800bb88 	.word	0x0800bb88
 800a748:	0800bb88 	.word	0x0800bb88
 800a74c:	0800bb88 	.word	0x0800bb88
 800a750:	0800bb8c 	.word	0x0800bb8c

0800a754 <memcpy>:
 800a754:	440a      	add	r2, r1
 800a756:	4291      	cmp	r1, r2
 800a758:	f100 33ff 	add.w	r3, r0, #4294967295
 800a75c:	d100      	bne.n	800a760 <memcpy+0xc>
 800a75e:	4770      	bx	lr
 800a760:	b510      	push	{r4, lr}
 800a762:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a766:	4291      	cmp	r1, r2
 800a768:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a76c:	d1f9      	bne.n	800a762 <memcpy+0xe>
 800a76e:	bd10      	pop	{r4, pc}

0800a770 <memset>:
 800a770:	4603      	mov	r3, r0
 800a772:	4402      	add	r2, r0
 800a774:	4293      	cmp	r3, r2
 800a776:	d100      	bne.n	800a77a <memset+0xa>
 800a778:	4770      	bx	lr
 800a77a:	f803 1b01 	strb.w	r1, [r3], #1
 800a77e:	e7f9      	b.n	800a774 <memset+0x4>

0800a780 <iprintf>:
 800a780:	b40f      	push	{r0, r1, r2, r3}
 800a782:	4b0a      	ldr	r3, [pc, #40]	; (800a7ac <iprintf+0x2c>)
 800a784:	b513      	push	{r0, r1, r4, lr}
 800a786:	681c      	ldr	r4, [r3, #0]
 800a788:	b124      	cbz	r4, 800a794 <iprintf+0x14>
 800a78a:	69a3      	ldr	r3, [r4, #24]
 800a78c:	b913      	cbnz	r3, 800a794 <iprintf+0x14>
 800a78e:	4620      	mov	r0, r4
 800a790:	f000 f886 	bl	800a8a0 <__sinit>
 800a794:	ab05      	add	r3, sp, #20
 800a796:	4620      	mov	r0, r4
 800a798:	9a04      	ldr	r2, [sp, #16]
 800a79a:	68a1      	ldr	r1, [r4, #8]
 800a79c:	9301      	str	r3, [sp, #4]
 800a79e:	f000 fafd 	bl	800ad9c <_vfiprintf_r>
 800a7a2:	b002      	add	sp, #8
 800a7a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7a8:	b004      	add	sp, #16
 800a7aa:	4770      	bx	lr
 800a7ac:	20000190 	.word	0x20000190

0800a7b0 <siprintf>:
 800a7b0:	b40e      	push	{r1, r2, r3}
 800a7b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a7b6:	b500      	push	{lr}
 800a7b8:	b09c      	sub	sp, #112	; 0x70
 800a7ba:	ab1d      	add	r3, sp, #116	; 0x74
 800a7bc:	9002      	str	r0, [sp, #8]
 800a7be:	9006      	str	r0, [sp, #24]
 800a7c0:	9107      	str	r1, [sp, #28]
 800a7c2:	9104      	str	r1, [sp, #16]
 800a7c4:	4808      	ldr	r0, [pc, #32]	; (800a7e8 <siprintf+0x38>)
 800a7c6:	4909      	ldr	r1, [pc, #36]	; (800a7ec <siprintf+0x3c>)
 800a7c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7cc:	9105      	str	r1, [sp, #20]
 800a7ce:	6800      	ldr	r0, [r0, #0]
 800a7d0:	a902      	add	r1, sp, #8
 800a7d2:	9301      	str	r3, [sp, #4]
 800a7d4:	f000 f9ba 	bl	800ab4c <_svfiprintf_r>
 800a7d8:	2200      	movs	r2, #0
 800a7da:	9b02      	ldr	r3, [sp, #8]
 800a7dc:	701a      	strb	r2, [r3, #0]
 800a7de:	b01c      	add	sp, #112	; 0x70
 800a7e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7e4:	b003      	add	sp, #12
 800a7e6:	4770      	bx	lr
 800a7e8:	20000190 	.word	0x20000190
 800a7ec:	ffff0208 	.word	0xffff0208

0800a7f0 <std>:
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	b510      	push	{r4, lr}
 800a7f4:	4604      	mov	r4, r0
 800a7f6:	e9c0 3300 	strd	r3, r3, [r0]
 800a7fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7fe:	6083      	str	r3, [r0, #8]
 800a800:	8181      	strh	r1, [r0, #12]
 800a802:	6643      	str	r3, [r0, #100]	; 0x64
 800a804:	81c2      	strh	r2, [r0, #14]
 800a806:	6183      	str	r3, [r0, #24]
 800a808:	4619      	mov	r1, r3
 800a80a:	2208      	movs	r2, #8
 800a80c:	305c      	adds	r0, #92	; 0x5c
 800a80e:	f7ff ffaf 	bl	800a770 <memset>
 800a812:	4b05      	ldr	r3, [pc, #20]	; (800a828 <std+0x38>)
 800a814:	6224      	str	r4, [r4, #32]
 800a816:	6263      	str	r3, [r4, #36]	; 0x24
 800a818:	4b04      	ldr	r3, [pc, #16]	; (800a82c <std+0x3c>)
 800a81a:	62a3      	str	r3, [r4, #40]	; 0x28
 800a81c:	4b04      	ldr	r3, [pc, #16]	; (800a830 <std+0x40>)
 800a81e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a820:	4b04      	ldr	r3, [pc, #16]	; (800a834 <std+0x44>)
 800a822:	6323      	str	r3, [r4, #48]	; 0x30
 800a824:	bd10      	pop	{r4, pc}
 800a826:	bf00      	nop
 800a828:	0800b349 	.word	0x0800b349
 800a82c:	0800b36b 	.word	0x0800b36b
 800a830:	0800b3a3 	.word	0x0800b3a3
 800a834:	0800b3c7 	.word	0x0800b3c7

0800a838 <_cleanup_r>:
 800a838:	4901      	ldr	r1, [pc, #4]	; (800a840 <_cleanup_r+0x8>)
 800a83a:	f000 b8af 	b.w	800a99c <_fwalk_reent>
 800a83e:	bf00      	nop
 800a840:	0800b6a1 	.word	0x0800b6a1

0800a844 <__sfmoreglue>:
 800a844:	b570      	push	{r4, r5, r6, lr}
 800a846:	2568      	movs	r5, #104	; 0x68
 800a848:	1e4a      	subs	r2, r1, #1
 800a84a:	4355      	muls	r5, r2
 800a84c:	460e      	mov	r6, r1
 800a84e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a852:	f000 f8c5 	bl	800a9e0 <_malloc_r>
 800a856:	4604      	mov	r4, r0
 800a858:	b140      	cbz	r0, 800a86c <__sfmoreglue+0x28>
 800a85a:	2100      	movs	r1, #0
 800a85c:	e9c0 1600 	strd	r1, r6, [r0]
 800a860:	300c      	adds	r0, #12
 800a862:	60a0      	str	r0, [r4, #8]
 800a864:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a868:	f7ff ff82 	bl	800a770 <memset>
 800a86c:	4620      	mov	r0, r4
 800a86e:	bd70      	pop	{r4, r5, r6, pc}

0800a870 <__sfp_lock_acquire>:
 800a870:	4801      	ldr	r0, [pc, #4]	; (800a878 <__sfp_lock_acquire+0x8>)
 800a872:	f000 b8b3 	b.w	800a9dc <__retarget_lock_acquire_recursive>
 800a876:	bf00      	nop
 800a878:	200015a8 	.word	0x200015a8

0800a87c <__sfp_lock_release>:
 800a87c:	4801      	ldr	r0, [pc, #4]	; (800a884 <__sfp_lock_release+0x8>)
 800a87e:	f000 b8ae 	b.w	800a9de <__retarget_lock_release_recursive>
 800a882:	bf00      	nop
 800a884:	200015a8 	.word	0x200015a8

0800a888 <__sinit_lock_acquire>:
 800a888:	4801      	ldr	r0, [pc, #4]	; (800a890 <__sinit_lock_acquire+0x8>)
 800a88a:	f000 b8a7 	b.w	800a9dc <__retarget_lock_acquire_recursive>
 800a88e:	bf00      	nop
 800a890:	200015a3 	.word	0x200015a3

0800a894 <__sinit_lock_release>:
 800a894:	4801      	ldr	r0, [pc, #4]	; (800a89c <__sinit_lock_release+0x8>)
 800a896:	f000 b8a2 	b.w	800a9de <__retarget_lock_release_recursive>
 800a89a:	bf00      	nop
 800a89c:	200015a3 	.word	0x200015a3

0800a8a0 <__sinit>:
 800a8a0:	b510      	push	{r4, lr}
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	f7ff fff0 	bl	800a888 <__sinit_lock_acquire>
 800a8a8:	69a3      	ldr	r3, [r4, #24]
 800a8aa:	b11b      	cbz	r3, 800a8b4 <__sinit+0x14>
 800a8ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8b0:	f7ff bff0 	b.w	800a894 <__sinit_lock_release>
 800a8b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a8b8:	6523      	str	r3, [r4, #80]	; 0x50
 800a8ba:	4b13      	ldr	r3, [pc, #76]	; (800a908 <__sinit+0x68>)
 800a8bc:	4a13      	ldr	r2, [pc, #76]	; (800a90c <__sinit+0x6c>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a8c2:	42a3      	cmp	r3, r4
 800a8c4:	bf08      	it	eq
 800a8c6:	2301      	moveq	r3, #1
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	bf08      	it	eq
 800a8cc:	61a3      	streq	r3, [r4, #24]
 800a8ce:	f000 f81f 	bl	800a910 <__sfp>
 800a8d2:	6060      	str	r0, [r4, #4]
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	f000 f81b 	bl	800a910 <__sfp>
 800a8da:	60a0      	str	r0, [r4, #8]
 800a8dc:	4620      	mov	r0, r4
 800a8de:	f000 f817 	bl	800a910 <__sfp>
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	2104      	movs	r1, #4
 800a8e6:	60e0      	str	r0, [r4, #12]
 800a8e8:	6860      	ldr	r0, [r4, #4]
 800a8ea:	f7ff ff81 	bl	800a7f0 <std>
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	2109      	movs	r1, #9
 800a8f2:	68a0      	ldr	r0, [r4, #8]
 800a8f4:	f7ff ff7c 	bl	800a7f0 <std>
 800a8f8:	2202      	movs	r2, #2
 800a8fa:	2112      	movs	r1, #18
 800a8fc:	68e0      	ldr	r0, [r4, #12]
 800a8fe:	f7ff ff77 	bl	800a7f0 <std>
 800a902:	2301      	movs	r3, #1
 800a904:	61a3      	str	r3, [r4, #24]
 800a906:	e7d1      	b.n	800a8ac <__sinit+0xc>
 800a908:	0800baf0 	.word	0x0800baf0
 800a90c:	0800a839 	.word	0x0800a839

0800a910 <__sfp>:
 800a910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a912:	4607      	mov	r7, r0
 800a914:	f7ff ffac 	bl	800a870 <__sfp_lock_acquire>
 800a918:	4b1e      	ldr	r3, [pc, #120]	; (800a994 <__sfp+0x84>)
 800a91a:	681e      	ldr	r6, [r3, #0]
 800a91c:	69b3      	ldr	r3, [r6, #24]
 800a91e:	b913      	cbnz	r3, 800a926 <__sfp+0x16>
 800a920:	4630      	mov	r0, r6
 800a922:	f7ff ffbd 	bl	800a8a0 <__sinit>
 800a926:	3648      	adds	r6, #72	; 0x48
 800a928:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a92c:	3b01      	subs	r3, #1
 800a92e:	d503      	bpl.n	800a938 <__sfp+0x28>
 800a930:	6833      	ldr	r3, [r6, #0]
 800a932:	b30b      	cbz	r3, 800a978 <__sfp+0x68>
 800a934:	6836      	ldr	r6, [r6, #0]
 800a936:	e7f7      	b.n	800a928 <__sfp+0x18>
 800a938:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a93c:	b9d5      	cbnz	r5, 800a974 <__sfp+0x64>
 800a93e:	4b16      	ldr	r3, [pc, #88]	; (800a998 <__sfp+0x88>)
 800a940:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a944:	60e3      	str	r3, [r4, #12]
 800a946:	6665      	str	r5, [r4, #100]	; 0x64
 800a948:	f000 f847 	bl	800a9da <__retarget_lock_init_recursive>
 800a94c:	f7ff ff96 	bl	800a87c <__sfp_lock_release>
 800a950:	2208      	movs	r2, #8
 800a952:	4629      	mov	r1, r5
 800a954:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a958:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a95c:	6025      	str	r5, [r4, #0]
 800a95e:	61a5      	str	r5, [r4, #24]
 800a960:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a964:	f7ff ff04 	bl	800a770 <memset>
 800a968:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a96c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a970:	4620      	mov	r0, r4
 800a972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a974:	3468      	adds	r4, #104	; 0x68
 800a976:	e7d9      	b.n	800a92c <__sfp+0x1c>
 800a978:	2104      	movs	r1, #4
 800a97a:	4638      	mov	r0, r7
 800a97c:	f7ff ff62 	bl	800a844 <__sfmoreglue>
 800a980:	4604      	mov	r4, r0
 800a982:	6030      	str	r0, [r6, #0]
 800a984:	2800      	cmp	r0, #0
 800a986:	d1d5      	bne.n	800a934 <__sfp+0x24>
 800a988:	f7ff ff78 	bl	800a87c <__sfp_lock_release>
 800a98c:	230c      	movs	r3, #12
 800a98e:	603b      	str	r3, [r7, #0]
 800a990:	e7ee      	b.n	800a970 <__sfp+0x60>
 800a992:	bf00      	nop
 800a994:	0800baf0 	.word	0x0800baf0
 800a998:	ffff0001 	.word	0xffff0001

0800a99c <_fwalk_reent>:
 800a99c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9a0:	4606      	mov	r6, r0
 800a9a2:	4688      	mov	r8, r1
 800a9a4:	2700      	movs	r7, #0
 800a9a6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a9aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a9ae:	f1b9 0901 	subs.w	r9, r9, #1
 800a9b2:	d505      	bpl.n	800a9c0 <_fwalk_reent+0x24>
 800a9b4:	6824      	ldr	r4, [r4, #0]
 800a9b6:	2c00      	cmp	r4, #0
 800a9b8:	d1f7      	bne.n	800a9aa <_fwalk_reent+0xe>
 800a9ba:	4638      	mov	r0, r7
 800a9bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9c0:	89ab      	ldrh	r3, [r5, #12]
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d907      	bls.n	800a9d6 <_fwalk_reent+0x3a>
 800a9c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	d003      	beq.n	800a9d6 <_fwalk_reent+0x3a>
 800a9ce:	4629      	mov	r1, r5
 800a9d0:	4630      	mov	r0, r6
 800a9d2:	47c0      	blx	r8
 800a9d4:	4307      	orrs	r7, r0
 800a9d6:	3568      	adds	r5, #104	; 0x68
 800a9d8:	e7e9      	b.n	800a9ae <_fwalk_reent+0x12>

0800a9da <__retarget_lock_init_recursive>:
 800a9da:	4770      	bx	lr

0800a9dc <__retarget_lock_acquire_recursive>:
 800a9dc:	4770      	bx	lr

0800a9de <__retarget_lock_release_recursive>:
 800a9de:	4770      	bx	lr

0800a9e0 <_malloc_r>:
 800a9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9e2:	1ccd      	adds	r5, r1, #3
 800a9e4:	f025 0503 	bic.w	r5, r5, #3
 800a9e8:	3508      	adds	r5, #8
 800a9ea:	2d0c      	cmp	r5, #12
 800a9ec:	bf38      	it	cc
 800a9ee:	250c      	movcc	r5, #12
 800a9f0:	2d00      	cmp	r5, #0
 800a9f2:	4606      	mov	r6, r0
 800a9f4:	db01      	blt.n	800a9fa <_malloc_r+0x1a>
 800a9f6:	42a9      	cmp	r1, r5
 800a9f8:	d903      	bls.n	800aa02 <_malloc_r+0x22>
 800a9fa:	230c      	movs	r3, #12
 800a9fc:	6033      	str	r3, [r6, #0]
 800a9fe:	2000      	movs	r0, #0
 800aa00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa02:	f000 ff27 	bl	800b854 <__malloc_lock>
 800aa06:	4921      	ldr	r1, [pc, #132]	; (800aa8c <_malloc_r+0xac>)
 800aa08:	680a      	ldr	r2, [r1, #0]
 800aa0a:	4614      	mov	r4, r2
 800aa0c:	b99c      	cbnz	r4, 800aa36 <_malloc_r+0x56>
 800aa0e:	4f20      	ldr	r7, [pc, #128]	; (800aa90 <_malloc_r+0xb0>)
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	b923      	cbnz	r3, 800aa1e <_malloc_r+0x3e>
 800aa14:	4621      	mov	r1, r4
 800aa16:	4630      	mov	r0, r6
 800aa18:	f000 fc86 	bl	800b328 <_sbrk_r>
 800aa1c:	6038      	str	r0, [r7, #0]
 800aa1e:	4629      	mov	r1, r5
 800aa20:	4630      	mov	r0, r6
 800aa22:	f000 fc81 	bl	800b328 <_sbrk_r>
 800aa26:	1c43      	adds	r3, r0, #1
 800aa28:	d123      	bne.n	800aa72 <_malloc_r+0x92>
 800aa2a:	230c      	movs	r3, #12
 800aa2c:	4630      	mov	r0, r6
 800aa2e:	6033      	str	r3, [r6, #0]
 800aa30:	f000 ff16 	bl	800b860 <__malloc_unlock>
 800aa34:	e7e3      	b.n	800a9fe <_malloc_r+0x1e>
 800aa36:	6823      	ldr	r3, [r4, #0]
 800aa38:	1b5b      	subs	r3, r3, r5
 800aa3a:	d417      	bmi.n	800aa6c <_malloc_r+0x8c>
 800aa3c:	2b0b      	cmp	r3, #11
 800aa3e:	d903      	bls.n	800aa48 <_malloc_r+0x68>
 800aa40:	6023      	str	r3, [r4, #0]
 800aa42:	441c      	add	r4, r3
 800aa44:	6025      	str	r5, [r4, #0]
 800aa46:	e004      	b.n	800aa52 <_malloc_r+0x72>
 800aa48:	6863      	ldr	r3, [r4, #4]
 800aa4a:	42a2      	cmp	r2, r4
 800aa4c:	bf0c      	ite	eq
 800aa4e:	600b      	streq	r3, [r1, #0]
 800aa50:	6053      	strne	r3, [r2, #4]
 800aa52:	4630      	mov	r0, r6
 800aa54:	f000 ff04 	bl	800b860 <__malloc_unlock>
 800aa58:	f104 000b 	add.w	r0, r4, #11
 800aa5c:	1d23      	adds	r3, r4, #4
 800aa5e:	f020 0007 	bic.w	r0, r0, #7
 800aa62:	1ac2      	subs	r2, r0, r3
 800aa64:	d0cc      	beq.n	800aa00 <_malloc_r+0x20>
 800aa66:	1a1b      	subs	r3, r3, r0
 800aa68:	50a3      	str	r3, [r4, r2]
 800aa6a:	e7c9      	b.n	800aa00 <_malloc_r+0x20>
 800aa6c:	4622      	mov	r2, r4
 800aa6e:	6864      	ldr	r4, [r4, #4]
 800aa70:	e7cc      	b.n	800aa0c <_malloc_r+0x2c>
 800aa72:	1cc4      	adds	r4, r0, #3
 800aa74:	f024 0403 	bic.w	r4, r4, #3
 800aa78:	42a0      	cmp	r0, r4
 800aa7a:	d0e3      	beq.n	800aa44 <_malloc_r+0x64>
 800aa7c:	1a21      	subs	r1, r4, r0
 800aa7e:	4630      	mov	r0, r6
 800aa80:	f000 fc52 	bl	800b328 <_sbrk_r>
 800aa84:	3001      	adds	r0, #1
 800aa86:	d1dd      	bne.n	800aa44 <_malloc_r+0x64>
 800aa88:	e7cf      	b.n	800aa2a <_malloc_r+0x4a>
 800aa8a:	bf00      	nop
 800aa8c:	200004a4 	.word	0x200004a4
 800aa90:	200004a8 	.word	0x200004a8

0800aa94 <__ssputs_r>:
 800aa94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa98:	688e      	ldr	r6, [r1, #8]
 800aa9a:	4682      	mov	sl, r0
 800aa9c:	429e      	cmp	r6, r3
 800aa9e:	460c      	mov	r4, r1
 800aaa0:	4690      	mov	r8, r2
 800aaa2:	461f      	mov	r7, r3
 800aaa4:	d838      	bhi.n	800ab18 <__ssputs_r+0x84>
 800aaa6:	898a      	ldrh	r2, [r1, #12]
 800aaa8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aaac:	d032      	beq.n	800ab14 <__ssputs_r+0x80>
 800aaae:	6825      	ldr	r5, [r4, #0]
 800aab0:	6909      	ldr	r1, [r1, #16]
 800aab2:	3301      	adds	r3, #1
 800aab4:	eba5 0901 	sub.w	r9, r5, r1
 800aab8:	6965      	ldr	r5, [r4, #20]
 800aaba:	444b      	add	r3, r9
 800aabc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aac0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aac4:	106d      	asrs	r5, r5, #1
 800aac6:	429d      	cmp	r5, r3
 800aac8:	bf38      	it	cc
 800aaca:	461d      	movcc	r5, r3
 800aacc:	0553      	lsls	r3, r2, #21
 800aace:	d531      	bpl.n	800ab34 <__ssputs_r+0xa0>
 800aad0:	4629      	mov	r1, r5
 800aad2:	f7ff ff85 	bl	800a9e0 <_malloc_r>
 800aad6:	4606      	mov	r6, r0
 800aad8:	b950      	cbnz	r0, 800aaf0 <__ssputs_r+0x5c>
 800aada:	230c      	movs	r3, #12
 800aadc:	f04f 30ff 	mov.w	r0, #4294967295
 800aae0:	f8ca 3000 	str.w	r3, [sl]
 800aae4:	89a3      	ldrh	r3, [r4, #12]
 800aae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaea:	81a3      	strh	r3, [r4, #12]
 800aaec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaf0:	464a      	mov	r2, r9
 800aaf2:	6921      	ldr	r1, [r4, #16]
 800aaf4:	f7ff fe2e 	bl	800a754 <memcpy>
 800aaf8:	89a3      	ldrh	r3, [r4, #12]
 800aafa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aafe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab02:	81a3      	strh	r3, [r4, #12]
 800ab04:	6126      	str	r6, [r4, #16]
 800ab06:	444e      	add	r6, r9
 800ab08:	6026      	str	r6, [r4, #0]
 800ab0a:	463e      	mov	r6, r7
 800ab0c:	6165      	str	r5, [r4, #20]
 800ab0e:	eba5 0509 	sub.w	r5, r5, r9
 800ab12:	60a5      	str	r5, [r4, #8]
 800ab14:	42be      	cmp	r6, r7
 800ab16:	d900      	bls.n	800ab1a <__ssputs_r+0x86>
 800ab18:	463e      	mov	r6, r7
 800ab1a:	4632      	mov	r2, r6
 800ab1c:	4641      	mov	r1, r8
 800ab1e:	6820      	ldr	r0, [r4, #0]
 800ab20:	f000 fe7e 	bl	800b820 <memmove>
 800ab24:	68a3      	ldr	r3, [r4, #8]
 800ab26:	6822      	ldr	r2, [r4, #0]
 800ab28:	1b9b      	subs	r3, r3, r6
 800ab2a:	4432      	add	r2, r6
 800ab2c:	2000      	movs	r0, #0
 800ab2e:	60a3      	str	r3, [r4, #8]
 800ab30:	6022      	str	r2, [r4, #0]
 800ab32:	e7db      	b.n	800aaec <__ssputs_r+0x58>
 800ab34:	462a      	mov	r2, r5
 800ab36:	f000 fee5 	bl	800b904 <_realloc_r>
 800ab3a:	4606      	mov	r6, r0
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	d1e1      	bne.n	800ab04 <__ssputs_r+0x70>
 800ab40:	4650      	mov	r0, sl
 800ab42:	6921      	ldr	r1, [r4, #16]
 800ab44:	f000 fe92 	bl	800b86c <_free_r>
 800ab48:	e7c7      	b.n	800aada <__ssputs_r+0x46>
	...

0800ab4c <_svfiprintf_r>:
 800ab4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab50:	4698      	mov	r8, r3
 800ab52:	898b      	ldrh	r3, [r1, #12]
 800ab54:	4607      	mov	r7, r0
 800ab56:	061b      	lsls	r3, r3, #24
 800ab58:	460d      	mov	r5, r1
 800ab5a:	4614      	mov	r4, r2
 800ab5c:	b09d      	sub	sp, #116	; 0x74
 800ab5e:	d50e      	bpl.n	800ab7e <_svfiprintf_r+0x32>
 800ab60:	690b      	ldr	r3, [r1, #16]
 800ab62:	b963      	cbnz	r3, 800ab7e <_svfiprintf_r+0x32>
 800ab64:	2140      	movs	r1, #64	; 0x40
 800ab66:	f7ff ff3b 	bl	800a9e0 <_malloc_r>
 800ab6a:	6028      	str	r0, [r5, #0]
 800ab6c:	6128      	str	r0, [r5, #16]
 800ab6e:	b920      	cbnz	r0, 800ab7a <_svfiprintf_r+0x2e>
 800ab70:	230c      	movs	r3, #12
 800ab72:	603b      	str	r3, [r7, #0]
 800ab74:	f04f 30ff 	mov.w	r0, #4294967295
 800ab78:	e0d1      	b.n	800ad1e <_svfiprintf_r+0x1d2>
 800ab7a:	2340      	movs	r3, #64	; 0x40
 800ab7c:	616b      	str	r3, [r5, #20]
 800ab7e:	2300      	movs	r3, #0
 800ab80:	9309      	str	r3, [sp, #36]	; 0x24
 800ab82:	2320      	movs	r3, #32
 800ab84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab88:	2330      	movs	r3, #48	; 0x30
 800ab8a:	f04f 0901 	mov.w	r9, #1
 800ab8e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ad38 <_svfiprintf_r+0x1ec>
 800ab96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab9a:	4623      	mov	r3, r4
 800ab9c:	469a      	mov	sl, r3
 800ab9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aba2:	b10a      	cbz	r2, 800aba8 <_svfiprintf_r+0x5c>
 800aba4:	2a25      	cmp	r2, #37	; 0x25
 800aba6:	d1f9      	bne.n	800ab9c <_svfiprintf_r+0x50>
 800aba8:	ebba 0b04 	subs.w	fp, sl, r4
 800abac:	d00b      	beq.n	800abc6 <_svfiprintf_r+0x7a>
 800abae:	465b      	mov	r3, fp
 800abb0:	4622      	mov	r2, r4
 800abb2:	4629      	mov	r1, r5
 800abb4:	4638      	mov	r0, r7
 800abb6:	f7ff ff6d 	bl	800aa94 <__ssputs_r>
 800abba:	3001      	adds	r0, #1
 800abbc:	f000 80aa 	beq.w	800ad14 <_svfiprintf_r+0x1c8>
 800abc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abc2:	445a      	add	r2, fp
 800abc4:	9209      	str	r2, [sp, #36]	; 0x24
 800abc6:	f89a 3000 	ldrb.w	r3, [sl]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	f000 80a2 	beq.w	800ad14 <_svfiprintf_r+0x1c8>
 800abd0:	2300      	movs	r3, #0
 800abd2:	f04f 32ff 	mov.w	r2, #4294967295
 800abd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abda:	f10a 0a01 	add.w	sl, sl, #1
 800abde:	9304      	str	r3, [sp, #16]
 800abe0:	9307      	str	r3, [sp, #28]
 800abe2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abe6:	931a      	str	r3, [sp, #104]	; 0x68
 800abe8:	4654      	mov	r4, sl
 800abea:	2205      	movs	r2, #5
 800abec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abf0:	4851      	ldr	r0, [pc, #324]	; (800ad38 <_svfiprintf_r+0x1ec>)
 800abf2:	f000 fe07 	bl	800b804 <memchr>
 800abf6:	9a04      	ldr	r2, [sp, #16]
 800abf8:	b9d8      	cbnz	r0, 800ac32 <_svfiprintf_r+0xe6>
 800abfa:	06d0      	lsls	r0, r2, #27
 800abfc:	bf44      	itt	mi
 800abfe:	2320      	movmi	r3, #32
 800ac00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac04:	0711      	lsls	r1, r2, #28
 800ac06:	bf44      	itt	mi
 800ac08:	232b      	movmi	r3, #43	; 0x2b
 800ac0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac0e:	f89a 3000 	ldrb.w	r3, [sl]
 800ac12:	2b2a      	cmp	r3, #42	; 0x2a
 800ac14:	d015      	beq.n	800ac42 <_svfiprintf_r+0xf6>
 800ac16:	4654      	mov	r4, sl
 800ac18:	2000      	movs	r0, #0
 800ac1a:	f04f 0c0a 	mov.w	ip, #10
 800ac1e:	9a07      	ldr	r2, [sp, #28]
 800ac20:	4621      	mov	r1, r4
 800ac22:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac26:	3b30      	subs	r3, #48	; 0x30
 800ac28:	2b09      	cmp	r3, #9
 800ac2a:	d94e      	bls.n	800acca <_svfiprintf_r+0x17e>
 800ac2c:	b1b0      	cbz	r0, 800ac5c <_svfiprintf_r+0x110>
 800ac2e:	9207      	str	r2, [sp, #28]
 800ac30:	e014      	b.n	800ac5c <_svfiprintf_r+0x110>
 800ac32:	eba0 0308 	sub.w	r3, r0, r8
 800ac36:	fa09 f303 	lsl.w	r3, r9, r3
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	46a2      	mov	sl, r4
 800ac3e:	9304      	str	r3, [sp, #16]
 800ac40:	e7d2      	b.n	800abe8 <_svfiprintf_r+0x9c>
 800ac42:	9b03      	ldr	r3, [sp, #12]
 800ac44:	1d19      	adds	r1, r3, #4
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	9103      	str	r1, [sp, #12]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	bfbb      	ittet	lt
 800ac4e:	425b      	neglt	r3, r3
 800ac50:	f042 0202 	orrlt.w	r2, r2, #2
 800ac54:	9307      	strge	r3, [sp, #28]
 800ac56:	9307      	strlt	r3, [sp, #28]
 800ac58:	bfb8      	it	lt
 800ac5a:	9204      	strlt	r2, [sp, #16]
 800ac5c:	7823      	ldrb	r3, [r4, #0]
 800ac5e:	2b2e      	cmp	r3, #46	; 0x2e
 800ac60:	d10c      	bne.n	800ac7c <_svfiprintf_r+0x130>
 800ac62:	7863      	ldrb	r3, [r4, #1]
 800ac64:	2b2a      	cmp	r3, #42	; 0x2a
 800ac66:	d135      	bne.n	800acd4 <_svfiprintf_r+0x188>
 800ac68:	9b03      	ldr	r3, [sp, #12]
 800ac6a:	3402      	adds	r4, #2
 800ac6c:	1d1a      	adds	r2, r3, #4
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	9203      	str	r2, [sp, #12]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	bfb8      	it	lt
 800ac76:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac7a:	9305      	str	r3, [sp, #20]
 800ac7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ad48 <_svfiprintf_r+0x1fc>
 800ac80:	2203      	movs	r2, #3
 800ac82:	4650      	mov	r0, sl
 800ac84:	7821      	ldrb	r1, [r4, #0]
 800ac86:	f000 fdbd 	bl	800b804 <memchr>
 800ac8a:	b140      	cbz	r0, 800ac9e <_svfiprintf_r+0x152>
 800ac8c:	2340      	movs	r3, #64	; 0x40
 800ac8e:	eba0 000a 	sub.w	r0, r0, sl
 800ac92:	fa03 f000 	lsl.w	r0, r3, r0
 800ac96:	9b04      	ldr	r3, [sp, #16]
 800ac98:	3401      	adds	r4, #1
 800ac9a:	4303      	orrs	r3, r0
 800ac9c:	9304      	str	r3, [sp, #16]
 800ac9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aca2:	2206      	movs	r2, #6
 800aca4:	4825      	ldr	r0, [pc, #148]	; (800ad3c <_svfiprintf_r+0x1f0>)
 800aca6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acaa:	f000 fdab 	bl	800b804 <memchr>
 800acae:	2800      	cmp	r0, #0
 800acb0:	d038      	beq.n	800ad24 <_svfiprintf_r+0x1d8>
 800acb2:	4b23      	ldr	r3, [pc, #140]	; (800ad40 <_svfiprintf_r+0x1f4>)
 800acb4:	bb1b      	cbnz	r3, 800acfe <_svfiprintf_r+0x1b2>
 800acb6:	9b03      	ldr	r3, [sp, #12]
 800acb8:	3307      	adds	r3, #7
 800acba:	f023 0307 	bic.w	r3, r3, #7
 800acbe:	3308      	adds	r3, #8
 800acc0:	9303      	str	r3, [sp, #12]
 800acc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acc4:	4433      	add	r3, r6
 800acc6:	9309      	str	r3, [sp, #36]	; 0x24
 800acc8:	e767      	b.n	800ab9a <_svfiprintf_r+0x4e>
 800acca:	460c      	mov	r4, r1
 800accc:	2001      	movs	r0, #1
 800acce:	fb0c 3202 	mla	r2, ip, r2, r3
 800acd2:	e7a5      	b.n	800ac20 <_svfiprintf_r+0xd4>
 800acd4:	2300      	movs	r3, #0
 800acd6:	f04f 0c0a 	mov.w	ip, #10
 800acda:	4619      	mov	r1, r3
 800acdc:	3401      	adds	r4, #1
 800acde:	9305      	str	r3, [sp, #20]
 800ace0:	4620      	mov	r0, r4
 800ace2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ace6:	3a30      	subs	r2, #48	; 0x30
 800ace8:	2a09      	cmp	r2, #9
 800acea:	d903      	bls.n	800acf4 <_svfiprintf_r+0x1a8>
 800acec:	2b00      	cmp	r3, #0
 800acee:	d0c5      	beq.n	800ac7c <_svfiprintf_r+0x130>
 800acf0:	9105      	str	r1, [sp, #20]
 800acf2:	e7c3      	b.n	800ac7c <_svfiprintf_r+0x130>
 800acf4:	4604      	mov	r4, r0
 800acf6:	2301      	movs	r3, #1
 800acf8:	fb0c 2101 	mla	r1, ip, r1, r2
 800acfc:	e7f0      	b.n	800ace0 <_svfiprintf_r+0x194>
 800acfe:	ab03      	add	r3, sp, #12
 800ad00:	9300      	str	r3, [sp, #0]
 800ad02:	462a      	mov	r2, r5
 800ad04:	4638      	mov	r0, r7
 800ad06:	4b0f      	ldr	r3, [pc, #60]	; (800ad44 <_svfiprintf_r+0x1f8>)
 800ad08:	a904      	add	r1, sp, #16
 800ad0a:	f3af 8000 	nop.w
 800ad0e:	1c42      	adds	r2, r0, #1
 800ad10:	4606      	mov	r6, r0
 800ad12:	d1d6      	bne.n	800acc2 <_svfiprintf_r+0x176>
 800ad14:	89ab      	ldrh	r3, [r5, #12]
 800ad16:	065b      	lsls	r3, r3, #25
 800ad18:	f53f af2c 	bmi.w	800ab74 <_svfiprintf_r+0x28>
 800ad1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad1e:	b01d      	add	sp, #116	; 0x74
 800ad20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad24:	ab03      	add	r3, sp, #12
 800ad26:	9300      	str	r3, [sp, #0]
 800ad28:	462a      	mov	r2, r5
 800ad2a:	4638      	mov	r0, r7
 800ad2c:	4b05      	ldr	r3, [pc, #20]	; (800ad44 <_svfiprintf_r+0x1f8>)
 800ad2e:	a904      	add	r1, sp, #16
 800ad30:	f000 f9d4 	bl	800b0dc <_printf_i>
 800ad34:	e7eb      	b.n	800ad0e <_svfiprintf_r+0x1c2>
 800ad36:	bf00      	nop
 800ad38:	0800bb54 	.word	0x0800bb54
 800ad3c:	0800bb5e 	.word	0x0800bb5e
 800ad40:	00000000 	.word	0x00000000
 800ad44:	0800aa95 	.word	0x0800aa95
 800ad48:	0800bb5a 	.word	0x0800bb5a

0800ad4c <__sfputc_r>:
 800ad4c:	6893      	ldr	r3, [r2, #8]
 800ad4e:	b410      	push	{r4}
 800ad50:	3b01      	subs	r3, #1
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	6093      	str	r3, [r2, #8]
 800ad56:	da07      	bge.n	800ad68 <__sfputc_r+0x1c>
 800ad58:	6994      	ldr	r4, [r2, #24]
 800ad5a:	42a3      	cmp	r3, r4
 800ad5c:	db01      	blt.n	800ad62 <__sfputc_r+0x16>
 800ad5e:	290a      	cmp	r1, #10
 800ad60:	d102      	bne.n	800ad68 <__sfputc_r+0x1c>
 800ad62:	bc10      	pop	{r4}
 800ad64:	f000 bb34 	b.w	800b3d0 <__swbuf_r>
 800ad68:	6813      	ldr	r3, [r2, #0]
 800ad6a:	1c58      	adds	r0, r3, #1
 800ad6c:	6010      	str	r0, [r2, #0]
 800ad6e:	7019      	strb	r1, [r3, #0]
 800ad70:	4608      	mov	r0, r1
 800ad72:	bc10      	pop	{r4}
 800ad74:	4770      	bx	lr

0800ad76 <__sfputs_r>:
 800ad76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad78:	4606      	mov	r6, r0
 800ad7a:	460f      	mov	r7, r1
 800ad7c:	4614      	mov	r4, r2
 800ad7e:	18d5      	adds	r5, r2, r3
 800ad80:	42ac      	cmp	r4, r5
 800ad82:	d101      	bne.n	800ad88 <__sfputs_r+0x12>
 800ad84:	2000      	movs	r0, #0
 800ad86:	e007      	b.n	800ad98 <__sfputs_r+0x22>
 800ad88:	463a      	mov	r2, r7
 800ad8a:	4630      	mov	r0, r6
 800ad8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad90:	f7ff ffdc 	bl	800ad4c <__sfputc_r>
 800ad94:	1c43      	adds	r3, r0, #1
 800ad96:	d1f3      	bne.n	800ad80 <__sfputs_r+0xa>
 800ad98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad9c <_vfiprintf_r>:
 800ad9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada0:	460d      	mov	r5, r1
 800ada2:	4614      	mov	r4, r2
 800ada4:	4698      	mov	r8, r3
 800ada6:	4606      	mov	r6, r0
 800ada8:	b09d      	sub	sp, #116	; 0x74
 800adaa:	b118      	cbz	r0, 800adb4 <_vfiprintf_r+0x18>
 800adac:	6983      	ldr	r3, [r0, #24]
 800adae:	b90b      	cbnz	r3, 800adb4 <_vfiprintf_r+0x18>
 800adb0:	f7ff fd76 	bl	800a8a0 <__sinit>
 800adb4:	4b89      	ldr	r3, [pc, #548]	; (800afdc <_vfiprintf_r+0x240>)
 800adb6:	429d      	cmp	r5, r3
 800adb8:	d11b      	bne.n	800adf2 <_vfiprintf_r+0x56>
 800adba:	6875      	ldr	r5, [r6, #4]
 800adbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adbe:	07d9      	lsls	r1, r3, #31
 800adc0:	d405      	bmi.n	800adce <_vfiprintf_r+0x32>
 800adc2:	89ab      	ldrh	r3, [r5, #12]
 800adc4:	059a      	lsls	r2, r3, #22
 800adc6:	d402      	bmi.n	800adce <_vfiprintf_r+0x32>
 800adc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adca:	f7ff fe07 	bl	800a9dc <__retarget_lock_acquire_recursive>
 800adce:	89ab      	ldrh	r3, [r5, #12]
 800add0:	071b      	lsls	r3, r3, #28
 800add2:	d501      	bpl.n	800add8 <_vfiprintf_r+0x3c>
 800add4:	692b      	ldr	r3, [r5, #16]
 800add6:	b9eb      	cbnz	r3, 800ae14 <_vfiprintf_r+0x78>
 800add8:	4629      	mov	r1, r5
 800adda:	4630      	mov	r0, r6
 800addc:	f000 fb5c 	bl	800b498 <__swsetup_r>
 800ade0:	b1c0      	cbz	r0, 800ae14 <_vfiprintf_r+0x78>
 800ade2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ade4:	07dc      	lsls	r4, r3, #31
 800ade6:	d50e      	bpl.n	800ae06 <_vfiprintf_r+0x6a>
 800ade8:	f04f 30ff 	mov.w	r0, #4294967295
 800adec:	b01d      	add	sp, #116	; 0x74
 800adee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf2:	4b7b      	ldr	r3, [pc, #492]	; (800afe0 <_vfiprintf_r+0x244>)
 800adf4:	429d      	cmp	r5, r3
 800adf6:	d101      	bne.n	800adfc <_vfiprintf_r+0x60>
 800adf8:	68b5      	ldr	r5, [r6, #8]
 800adfa:	e7df      	b.n	800adbc <_vfiprintf_r+0x20>
 800adfc:	4b79      	ldr	r3, [pc, #484]	; (800afe4 <_vfiprintf_r+0x248>)
 800adfe:	429d      	cmp	r5, r3
 800ae00:	bf08      	it	eq
 800ae02:	68f5      	ldreq	r5, [r6, #12]
 800ae04:	e7da      	b.n	800adbc <_vfiprintf_r+0x20>
 800ae06:	89ab      	ldrh	r3, [r5, #12]
 800ae08:	0598      	lsls	r0, r3, #22
 800ae0a:	d4ed      	bmi.n	800ade8 <_vfiprintf_r+0x4c>
 800ae0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae0e:	f7ff fde6 	bl	800a9de <__retarget_lock_release_recursive>
 800ae12:	e7e9      	b.n	800ade8 <_vfiprintf_r+0x4c>
 800ae14:	2300      	movs	r3, #0
 800ae16:	9309      	str	r3, [sp, #36]	; 0x24
 800ae18:	2320      	movs	r3, #32
 800ae1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae1e:	2330      	movs	r3, #48	; 0x30
 800ae20:	f04f 0901 	mov.w	r9, #1
 800ae24:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae28:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800afe8 <_vfiprintf_r+0x24c>
 800ae2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae30:	4623      	mov	r3, r4
 800ae32:	469a      	mov	sl, r3
 800ae34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae38:	b10a      	cbz	r2, 800ae3e <_vfiprintf_r+0xa2>
 800ae3a:	2a25      	cmp	r2, #37	; 0x25
 800ae3c:	d1f9      	bne.n	800ae32 <_vfiprintf_r+0x96>
 800ae3e:	ebba 0b04 	subs.w	fp, sl, r4
 800ae42:	d00b      	beq.n	800ae5c <_vfiprintf_r+0xc0>
 800ae44:	465b      	mov	r3, fp
 800ae46:	4622      	mov	r2, r4
 800ae48:	4629      	mov	r1, r5
 800ae4a:	4630      	mov	r0, r6
 800ae4c:	f7ff ff93 	bl	800ad76 <__sfputs_r>
 800ae50:	3001      	adds	r0, #1
 800ae52:	f000 80aa 	beq.w	800afaa <_vfiprintf_r+0x20e>
 800ae56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae58:	445a      	add	r2, fp
 800ae5a:	9209      	str	r2, [sp, #36]	; 0x24
 800ae5c:	f89a 3000 	ldrb.w	r3, [sl]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f000 80a2 	beq.w	800afaa <_vfiprintf_r+0x20e>
 800ae66:	2300      	movs	r3, #0
 800ae68:	f04f 32ff 	mov.w	r2, #4294967295
 800ae6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae70:	f10a 0a01 	add.w	sl, sl, #1
 800ae74:	9304      	str	r3, [sp, #16]
 800ae76:	9307      	str	r3, [sp, #28]
 800ae78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae7c:	931a      	str	r3, [sp, #104]	; 0x68
 800ae7e:	4654      	mov	r4, sl
 800ae80:	2205      	movs	r2, #5
 800ae82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae86:	4858      	ldr	r0, [pc, #352]	; (800afe8 <_vfiprintf_r+0x24c>)
 800ae88:	f000 fcbc 	bl	800b804 <memchr>
 800ae8c:	9a04      	ldr	r2, [sp, #16]
 800ae8e:	b9d8      	cbnz	r0, 800aec8 <_vfiprintf_r+0x12c>
 800ae90:	06d1      	lsls	r1, r2, #27
 800ae92:	bf44      	itt	mi
 800ae94:	2320      	movmi	r3, #32
 800ae96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae9a:	0713      	lsls	r3, r2, #28
 800ae9c:	bf44      	itt	mi
 800ae9e:	232b      	movmi	r3, #43	; 0x2b
 800aea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aea4:	f89a 3000 	ldrb.w	r3, [sl]
 800aea8:	2b2a      	cmp	r3, #42	; 0x2a
 800aeaa:	d015      	beq.n	800aed8 <_vfiprintf_r+0x13c>
 800aeac:	4654      	mov	r4, sl
 800aeae:	2000      	movs	r0, #0
 800aeb0:	f04f 0c0a 	mov.w	ip, #10
 800aeb4:	9a07      	ldr	r2, [sp, #28]
 800aeb6:	4621      	mov	r1, r4
 800aeb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aebc:	3b30      	subs	r3, #48	; 0x30
 800aebe:	2b09      	cmp	r3, #9
 800aec0:	d94e      	bls.n	800af60 <_vfiprintf_r+0x1c4>
 800aec2:	b1b0      	cbz	r0, 800aef2 <_vfiprintf_r+0x156>
 800aec4:	9207      	str	r2, [sp, #28]
 800aec6:	e014      	b.n	800aef2 <_vfiprintf_r+0x156>
 800aec8:	eba0 0308 	sub.w	r3, r0, r8
 800aecc:	fa09 f303 	lsl.w	r3, r9, r3
 800aed0:	4313      	orrs	r3, r2
 800aed2:	46a2      	mov	sl, r4
 800aed4:	9304      	str	r3, [sp, #16]
 800aed6:	e7d2      	b.n	800ae7e <_vfiprintf_r+0xe2>
 800aed8:	9b03      	ldr	r3, [sp, #12]
 800aeda:	1d19      	adds	r1, r3, #4
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	9103      	str	r1, [sp, #12]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	bfbb      	ittet	lt
 800aee4:	425b      	neglt	r3, r3
 800aee6:	f042 0202 	orrlt.w	r2, r2, #2
 800aeea:	9307      	strge	r3, [sp, #28]
 800aeec:	9307      	strlt	r3, [sp, #28]
 800aeee:	bfb8      	it	lt
 800aef0:	9204      	strlt	r2, [sp, #16]
 800aef2:	7823      	ldrb	r3, [r4, #0]
 800aef4:	2b2e      	cmp	r3, #46	; 0x2e
 800aef6:	d10c      	bne.n	800af12 <_vfiprintf_r+0x176>
 800aef8:	7863      	ldrb	r3, [r4, #1]
 800aefa:	2b2a      	cmp	r3, #42	; 0x2a
 800aefc:	d135      	bne.n	800af6a <_vfiprintf_r+0x1ce>
 800aefe:	9b03      	ldr	r3, [sp, #12]
 800af00:	3402      	adds	r4, #2
 800af02:	1d1a      	adds	r2, r3, #4
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	9203      	str	r2, [sp, #12]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	bfb8      	it	lt
 800af0c:	f04f 33ff 	movlt.w	r3, #4294967295
 800af10:	9305      	str	r3, [sp, #20]
 800af12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aff8 <_vfiprintf_r+0x25c>
 800af16:	2203      	movs	r2, #3
 800af18:	4650      	mov	r0, sl
 800af1a:	7821      	ldrb	r1, [r4, #0]
 800af1c:	f000 fc72 	bl	800b804 <memchr>
 800af20:	b140      	cbz	r0, 800af34 <_vfiprintf_r+0x198>
 800af22:	2340      	movs	r3, #64	; 0x40
 800af24:	eba0 000a 	sub.w	r0, r0, sl
 800af28:	fa03 f000 	lsl.w	r0, r3, r0
 800af2c:	9b04      	ldr	r3, [sp, #16]
 800af2e:	3401      	adds	r4, #1
 800af30:	4303      	orrs	r3, r0
 800af32:	9304      	str	r3, [sp, #16]
 800af34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af38:	2206      	movs	r2, #6
 800af3a:	482c      	ldr	r0, [pc, #176]	; (800afec <_vfiprintf_r+0x250>)
 800af3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af40:	f000 fc60 	bl	800b804 <memchr>
 800af44:	2800      	cmp	r0, #0
 800af46:	d03f      	beq.n	800afc8 <_vfiprintf_r+0x22c>
 800af48:	4b29      	ldr	r3, [pc, #164]	; (800aff0 <_vfiprintf_r+0x254>)
 800af4a:	bb1b      	cbnz	r3, 800af94 <_vfiprintf_r+0x1f8>
 800af4c:	9b03      	ldr	r3, [sp, #12]
 800af4e:	3307      	adds	r3, #7
 800af50:	f023 0307 	bic.w	r3, r3, #7
 800af54:	3308      	adds	r3, #8
 800af56:	9303      	str	r3, [sp, #12]
 800af58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af5a:	443b      	add	r3, r7
 800af5c:	9309      	str	r3, [sp, #36]	; 0x24
 800af5e:	e767      	b.n	800ae30 <_vfiprintf_r+0x94>
 800af60:	460c      	mov	r4, r1
 800af62:	2001      	movs	r0, #1
 800af64:	fb0c 3202 	mla	r2, ip, r2, r3
 800af68:	e7a5      	b.n	800aeb6 <_vfiprintf_r+0x11a>
 800af6a:	2300      	movs	r3, #0
 800af6c:	f04f 0c0a 	mov.w	ip, #10
 800af70:	4619      	mov	r1, r3
 800af72:	3401      	adds	r4, #1
 800af74:	9305      	str	r3, [sp, #20]
 800af76:	4620      	mov	r0, r4
 800af78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af7c:	3a30      	subs	r2, #48	; 0x30
 800af7e:	2a09      	cmp	r2, #9
 800af80:	d903      	bls.n	800af8a <_vfiprintf_r+0x1ee>
 800af82:	2b00      	cmp	r3, #0
 800af84:	d0c5      	beq.n	800af12 <_vfiprintf_r+0x176>
 800af86:	9105      	str	r1, [sp, #20]
 800af88:	e7c3      	b.n	800af12 <_vfiprintf_r+0x176>
 800af8a:	4604      	mov	r4, r0
 800af8c:	2301      	movs	r3, #1
 800af8e:	fb0c 2101 	mla	r1, ip, r1, r2
 800af92:	e7f0      	b.n	800af76 <_vfiprintf_r+0x1da>
 800af94:	ab03      	add	r3, sp, #12
 800af96:	9300      	str	r3, [sp, #0]
 800af98:	462a      	mov	r2, r5
 800af9a:	4630      	mov	r0, r6
 800af9c:	4b15      	ldr	r3, [pc, #84]	; (800aff4 <_vfiprintf_r+0x258>)
 800af9e:	a904      	add	r1, sp, #16
 800afa0:	f3af 8000 	nop.w
 800afa4:	4607      	mov	r7, r0
 800afa6:	1c78      	adds	r0, r7, #1
 800afa8:	d1d6      	bne.n	800af58 <_vfiprintf_r+0x1bc>
 800afaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afac:	07d9      	lsls	r1, r3, #31
 800afae:	d405      	bmi.n	800afbc <_vfiprintf_r+0x220>
 800afb0:	89ab      	ldrh	r3, [r5, #12]
 800afb2:	059a      	lsls	r2, r3, #22
 800afb4:	d402      	bmi.n	800afbc <_vfiprintf_r+0x220>
 800afb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afb8:	f7ff fd11 	bl	800a9de <__retarget_lock_release_recursive>
 800afbc:	89ab      	ldrh	r3, [r5, #12]
 800afbe:	065b      	lsls	r3, r3, #25
 800afc0:	f53f af12 	bmi.w	800ade8 <_vfiprintf_r+0x4c>
 800afc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afc6:	e711      	b.n	800adec <_vfiprintf_r+0x50>
 800afc8:	ab03      	add	r3, sp, #12
 800afca:	9300      	str	r3, [sp, #0]
 800afcc:	462a      	mov	r2, r5
 800afce:	4630      	mov	r0, r6
 800afd0:	4b08      	ldr	r3, [pc, #32]	; (800aff4 <_vfiprintf_r+0x258>)
 800afd2:	a904      	add	r1, sp, #16
 800afd4:	f000 f882 	bl	800b0dc <_printf_i>
 800afd8:	e7e4      	b.n	800afa4 <_vfiprintf_r+0x208>
 800afda:	bf00      	nop
 800afdc:	0800bb14 	.word	0x0800bb14
 800afe0:	0800bb34 	.word	0x0800bb34
 800afe4:	0800baf4 	.word	0x0800baf4
 800afe8:	0800bb54 	.word	0x0800bb54
 800afec:	0800bb5e 	.word	0x0800bb5e
 800aff0:	00000000 	.word	0x00000000
 800aff4:	0800ad77 	.word	0x0800ad77
 800aff8:	0800bb5a 	.word	0x0800bb5a

0800affc <_printf_common>:
 800affc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b000:	4616      	mov	r6, r2
 800b002:	4699      	mov	r9, r3
 800b004:	688a      	ldr	r2, [r1, #8]
 800b006:	690b      	ldr	r3, [r1, #16]
 800b008:	4607      	mov	r7, r0
 800b00a:	4293      	cmp	r3, r2
 800b00c:	bfb8      	it	lt
 800b00e:	4613      	movlt	r3, r2
 800b010:	6033      	str	r3, [r6, #0]
 800b012:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b016:	460c      	mov	r4, r1
 800b018:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b01c:	b10a      	cbz	r2, 800b022 <_printf_common+0x26>
 800b01e:	3301      	adds	r3, #1
 800b020:	6033      	str	r3, [r6, #0]
 800b022:	6823      	ldr	r3, [r4, #0]
 800b024:	0699      	lsls	r1, r3, #26
 800b026:	bf42      	ittt	mi
 800b028:	6833      	ldrmi	r3, [r6, #0]
 800b02a:	3302      	addmi	r3, #2
 800b02c:	6033      	strmi	r3, [r6, #0]
 800b02e:	6825      	ldr	r5, [r4, #0]
 800b030:	f015 0506 	ands.w	r5, r5, #6
 800b034:	d106      	bne.n	800b044 <_printf_common+0x48>
 800b036:	f104 0a19 	add.w	sl, r4, #25
 800b03a:	68e3      	ldr	r3, [r4, #12]
 800b03c:	6832      	ldr	r2, [r6, #0]
 800b03e:	1a9b      	subs	r3, r3, r2
 800b040:	42ab      	cmp	r3, r5
 800b042:	dc28      	bgt.n	800b096 <_printf_common+0x9a>
 800b044:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b048:	1e13      	subs	r3, r2, #0
 800b04a:	6822      	ldr	r2, [r4, #0]
 800b04c:	bf18      	it	ne
 800b04e:	2301      	movne	r3, #1
 800b050:	0692      	lsls	r2, r2, #26
 800b052:	d42d      	bmi.n	800b0b0 <_printf_common+0xb4>
 800b054:	4649      	mov	r1, r9
 800b056:	4638      	mov	r0, r7
 800b058:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b05c:	47c0      	blx	r8
 800b05e:	3001      	adds	r0, #1
 800b060:	d020      	beq.n	800b0a4 <_printf_common+0xa8>
 800b062:	6823      	ldr	r3, [r4, #0]
 800b064:	68e5      	ldr	r5, [r4, #12]
 800b066:	f003 0306 	and.w	r3, r3, #6
 800b06a:	2b04      	cmp	r3, #4
 800b06c:	bf18      	it	ne
 800b06e:	2500      	movne	r5, #0
 800b070:	6832      	ldr	r2, [r6, #0]
 800b072:	f04f 0600 	mov.w	r6, #0
 800b076:	68a3      	ldr	r3, [r4, #8]
 800b078:	bf08      	it	eq
 800b07a:	1aad      	subeq	r5, r5, r2
 800b07c:	6922      	ldr	r2, [r4, #16]
 800b07e:	bf08      	it	eq
 800b080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b084:	4293      	cmp	r3, r2
 800b086:	bfc4      	itt	gt
 800b088:	1a9b      	subgt	r3, r3, r2
 800b08a:	18ed      	addgt	r5, r5, r3
 800b08c:	341a      	adds	r4, #26
 800b08e:	42b5      	cmp	r5, r6
 800b090:	d11a      	bne.n	800b0c8 <_printf_common+0xcc>
 800b092:	2000      	movs	r0, #0
 800b094:	e008      	b.n	800b0a8 <_printf_common+0xac>
 800b096:	2301      	movs	r3, #1
 800b098:	4652      	mov	r2, sl
 800b09a:	4649      	mov	r1, r9
 800b09c:	4638      	mov	r0, r7
 800b09e:	47c0      	blx	r8
 800b0a0:	3001      	adds	r0, #1
 800b0a2:	d103      	bne.n	800b0ac <_printf_common+0xb0>
 800b0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ac:	3501      	adds	r5, #1
 800b0ae:	e7c4      	b.n	800b03a <_printf_common+0x3e>
 800b0b0:	2030      	movs	r0, #48	; 0x30
 800b0b2:	18e1      	adds	r1, r4, r3
 800b0b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b0b8:	1c5a      	adds	r2, r3, #1
 800b0ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b0be:	4422      	add	r2, r4
 800b0c0:	3302      	adds	r3, #2
 800b0c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b0c6:	e7c5      	b.n	800b054 <_printf_common+0x58>
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	4622      	mov	r2, r4
 800b0cc:	4649      	mov	r1, r9
 800b0ce:	4638      	mov	r0, r7
 800b0d0:	47c0      	blx	r8
 800b0d2:	3001      	adds	r0, #1
 800b0d4:	d0e6      	beq.n	800b0a4 <_printf_common+0xa8>
 800b0d6:	3601      	adds	r6, #1
 800b0d8:	e7d9      	b.n	800b08e <_printf_common+0x92>
	...

0800b0dc <_printf_i>:
 800b0dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0e0:	460c      	mov	r4, r1
 800b0e2:	7e27      	ldrb	r7, [r4, #24]
 800b0e4:	4691      	mov	r9, r2
 800b0e6:	2f78      	cmp	r7, #120	; 0x78
 800b0e8:	4680      	mov	r8, r0
 800b0ea:	469a      	mov	sl, r3
 800b0ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b0ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b0f2:	d807      	bhi.n	800b104 <_printf_i+0x28>
 800b0f4:	2f62      	cmp	r7, #98	; 0x62
 800b0f6:	d80a      	bhi.n	800b10e <_printf_i+0x32>
 800b0f8:	2f00      	cmp	r7, #0
 800b0fa:	f000 80d9 	beq.w	800b2b0 <_printf_i+0x1d4>
 800b0fe:	2f58      	cmp	r7, #88	; 0x58
 800b100:	f000 80a4 	beq.w	800b24c <_printf_i+0x170>
 800b104:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b108:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b10c:	e03a      	b.n	800b184 <_printf_i+0xa8>
 800b10e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b112:	2b15      	cmp	r3, #21
 800b114:	d8f6      	bhi.n	800b104 <_printf_i+0x28>
 800b116:	a001      	add	r0, pc, #4	; (adr r0, 800b11c <_printf_i+0x40>)
 800b118:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b11c:	0800b175 	.word	0x0800b175
 800b120:	0800b189 	.word	0x0800b189
 800b124:	0800b105 	.word	0x0800b105
 800b128:	0800b105 	.word	0x0800b105
 800b12c:	0800b105 	.word	0x0800b105
 800b130:	0800b105 	.word	0x0800b105
 800b134:	0800b189 	.word	0x0800b189
 800b138:	0800b105 	.word	0x0800b105
 800b13c:	0800b105 	.word	0x0800b105
 800b140:	0800b105 	.word	0x0800b105
 800b144:	0800b105 	.word	0x0800b105
 800b148:	0800b297 	.word	0x0800b297
 800b14c:	0800b1b9 	.word	0x0800b1b9
 800b150:	0800b279 	.word	0x0800b279
 800b154:	0800b105 	.word	0x0800b105
 800b158:	0800b105 	.word	0x0800b105
 800b15c:	0800b2b9 	.word	0x0800b2b9
 800b160:	0800b105 	.word	0x0800b105
 800b164:	0800b1b9 	.word	0x0800b1b9
 800b168:	0800b105 	.word	0x0800b105
 800b16c:	0800b105 	.word	0x0800b105
 800b170:	0800b281 	.word	0x0800b281
 800b174:	680b      	ldr	r3, [r1, #0]
 800b176:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b17a:	1d1a      	adds	r2, r3, #4
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	600a      	str	r2, [r1, #0]
 800b180:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b184:	2301      	movs	r3, #1
 800b186:	e0a4      	b.n	800b2d2 <_printf_i+0x1f6>
 800b188:	6825      	ldr	r5, [r4, #0]
 800b18a:	6808      	ldr	r0, [r1, #0]
 800b18c:	062e      	lsls	r6, r5, #24
 800b18e:	f100 0304 	add.w	r3, r0, #4
 800b192:	d50a      	bpl.n	800b1aa <_printf_i+0xce>
 800b194:	6805      	ldr	r5, [r0, #0]
 800b196:	600b      	str	r3, [r1, #0]
 800b198:	2d00      	cmp	r5, #0
 800b19a:	da03      	bge.n	800b1a4 <_printf_i+0xc8>
 800b19c:	232d      	movs	r3, #45	; 0x2d
 800b19e:	426d      	negs	r5, r5
 800b1a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1a4:	230a      	movs	r3, #10
 800b1a6:	485e      	ldr	r0, [pc, #376]	; (800b320 <_printf_i+0x244>)
 800b1a8:	e019      	b.n	800b1de <_printf_i+0x102>
 800b1aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b1ae:	6805      	ldr	r5, [r0, #0]
 800b1b0:	600b      	str	r3, [r1, #0]
 800b1b2:	bf18      	it	ne
 800b1b4:	b22d      	sxthne	r5, r5
 800b1b6:	e7ef      	b.n	800b198 <_printf_i+0xbc>
 800b1b8:	680b      	ldr	r3, [r1, #0]
 800b1ba:	6825      	ldr	r5, [r4, #0]
 800b1bc:	1d18      	adds	r0, r3, #4
 800b1be:	6008      	str	r0, [r1, #0]
 800b1c0:	0628      	lsls	r0, r5, #24
 800b1c2:	d501      	bpl.n	800b1c8 <_printf_i+0xec>
 800b1c4:	681d      	ldr	r5, [r3, #0]
 800b1c6:	e002      	b.n	800b1ce <_printf_i+0xf2>
 800b1c8:	0669      	lsls	r1, r5, #25
 800b1ca:	d5fb      	bpl.n	800b1c4 <_printf_i+0xe8>
 800b1cc:	881d      	ldrh	r5, [r3, #0]
 800b1ce:	2f6f      	cmp	r7, #111	; 0x6f
 800b1d0:	bf0c      	ite	eq
 800b1d2:	2308      	moveq	r3, #8
 800b1d4:	230a      	movne	r3, #10
 800b1d6:	4852      	ldr	r0, [pc, #328]	; (800b320 <_printf_i+0x244>)
 800b1d8:	2100      	movs	r1, #0
 800b1da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b1de:	6866      	ldr	r6, [r4, #4]
 800b1e0:	2e00      	cmp	r6, #0
 800b1e2:	bfa8      	it	ge
 800b1e4:	6821      	ldrge	r1, [r4, #0]
 800b1e6:	60a6      	str	r6, [r4, #8]
 800b1e8:	bfa4      	itt	ge
 800b1ea:	f021 0104 	bicge.w	r1, r1, #4
 800b1ee:	6021      	strge	r1, [r4, #0]
 800b1f0:	b90d      	cbnz	r5, 800b1f6 <_printf_i+0x11a>
 800b1f2:	2e00      	cmp	r6, #0
 800b1f4:	d04d      	beq.n	800b292 <_printf_i+0x1b6>
 800b1f6:	4616      	mov	r6, r2
 800b1f8:	fbb5 f1f3 	udiv	r1, r5, r3
 800b1fc:	fb03 5711 	mls	r7, r3, r1, r5
 800b200:	5dc7      	ldrb	r7, [r0, r7]
 800b202:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b206:	462f      	mov	r7, r5
 800b208:	42bb      	cmp	r3, r7
 800b20a:	460d      	mov	r5, r1
 800b20c:	d9f4      	bls.n	800b1f8 <_printf_i+0x11c>
 800b20e:	2b08      	cmp	r3, #8
 800b210:	d10b      	bne.n	800b22a <_printf_i+0x14e>
 800b212:	6823      	ldr	r3, [r4, #0]
 800b214:	07df      	lsls	r7, r3, #31
 800b216:	d508      	bpl.n	800b22a <_printf_i+0x14e>
 800b218:	6923      	ldr	r3, [r4, #16]
 800b21a:	6861      	ldr	r1, [r4, #4]
 800b21c:	4299      	cmp	r1, r3
 800b21e:	bfde      	ittt	le
 800b220:	2330      	movle	r3, #48	; 0x30
 800b222:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b226:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b22a:	1b92      	subs	r2, r2, r6
 800b22c:	6122      	str	r2, [r4, #16]
 800b22e:	464b      	mov	r3, r9
 800b230:	4621      	mov	r1, r4
 800b232:	4640      	mov	r0, r8
 800b234:	f8cd a000 	str.w	sl, [sp]
 800b238:	aa03      	add	r2, sp, #12
 800b23a:	f7ff fedf 	bl	800affc <_printf_common>
 800b23e:	3001      	adds	r0, #1
 800b240:	d14c      	bne.n	800b2dc <_printf_i+0x200>
 800b242:	f04f 30ff 	mov.w	r0, #4294967295
 800b246:	b004      	add	sp, #16
 800b248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b24c:	4834      	ldr	r0, [pc, #208]	; (800b320 <_printf_i+0x244>)
 800b24e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b252:	680e      	ldr	r6, [r1, #0]
 800b254:	6823      	ldr	r3, [r4, #0]
 800b256:	f856 5b04 	ldr.w	r5, [r6], #4
 800b25a:	061f      	lsls	r7, r3, #24
 800b25c:	600e      	str	r6, [r1, #0]
 800b25e:	d514      	bpl.n	800b28a <_printf_i+0x1ae>
 800b260:	07d9      	lsls	r1, r3, #31
 800b262:	bf44      	itt	mi
 800b264:	f043 0320 	orrmi.w	r3, r3, #32
 800b268:	6023      	strmi	r3, [r4, #0]
 800b26a:	b91d      	cbnz	r5, 800b274 <_printf_i+0x198>
 800b26c:	6823      	ldr	r3, [r4, #0]
 800b26e:	f023 0320 	bic.w	r3, r3, #32
 800b272:	6023      	str	r3, [r4, #0]
 800b274:	2310      	movs	r3, #16
 800b276:	e7af      	b.n	800b1d8 <_printf_i+0xfc>
 800b278:	6823      	ldr	r3, [r4, #0]
 800b27a:	f043 0320 	orr.w	r3, r3, #32
 800b27e:	6023      	str	r3, [r4, #0]
 800b280:	2378      	movs	r3, #120	; 0x78
 800b282:	4828      	ldr	r0, [pc, #160]	; (800b324 <_printf_i+0x248>)
 800b284:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b288:	e7e3      	b.n	800b252 <_printf_i+0x176>
 800b28a:	065e      	lsls	r6, r3, #25
 800b28c:	bf48      	it	mi
 800b28e:	b2ad      	uxthmi	r5, r5
 800b290:	e7e6      	b.n	800b260 <_printf_i+0x184>
 800b292:	4616      	mov	r6, r2
 800b294:	e7bb      	b.n	800b20e <_printf_i+0x132>
 800b296:	680b      	ldr	r3, [r1, #0]
 800b298:	6826      	ldr	r6, [r4, #0]
 800b29a:	1d1d      	adds	r5, r3, #4
 800b29c:	6960      	ldr	r0, [r4, #20]
 800b29e:	600d      	str	r5, [r1, #0]
 800b2a0:	0635      	lsls	r5, r6, #24
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	d501      	bpl.n	800b2aa <_printf_i+0x1ce>
 800b2a6:	6018      	str	r0, [r3, #0]
 800b2a8:	e002      	b.n	800b2b0 <_printf_i+0x1d4>
 800b2aa:	0671      	lsls	r1, r6, #25
 800b2ac:	d5fb      	bpl.n	800b2a6 <_printf_i+0x1ca>
 800b2ae:	8018      	strh	r0, [r3, #0]
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	4616      	mov	r6, r2
 800b2b4:	6123      	str	r3, [r4, #16]
 800b2b6:	e7ba      	b.n	800b22e <_printf_i+0x152>
 800b2b8:	680b      	ldr	r3, [r1, #0]
 800b2ba:	1d1a      	adds	r2, r3, #4
 800b2bc:	600a      	str	r2, [r1, #0]
 800b2be:	681e      	ldr	r6, [r3, #0]
 800b2c0:	2100      	movs	r1, #0
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	6862      	ldr	r2, [r4, #4]
 800b2c6:	f000 fa9d 	bl	800b804 <memchr>
 800b2ca:	b108      	cbz	r0, 800b2d0 <_printf_i+0x1f4>
 800b2cc:	1b80      	subs	r0, r0, r6
 800b2ce:	6060      	str	r0, [r4, #4]
 800b2d0:	6863      	ldr	r3, [r4, #4]
 800b2d2:	6123      	str	r3, [r4, #16]
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2da:	e7a8      	b.n	800b22e <_printf_i+0x152>
 800b2dc:	4632      	mov	r2, r6
 800b2de:	4649      	mov	r1, r9
 800b2e0:	4640      	mov	r0, r8
 800b2e2:	6923      	ldr	r3, [r4, #16]
 800b2e4:	47d0      	blx	sl
 800b2e6:	3001      	adds	r0, #1
 800b2e8:	d0ab      	beq.n	800b242 <_printf_i+0x166>
 800b2ea:	6823      	ldr	r3, [r4, #0]
 800b2ec:	079b      	lsls	r3, r3, #30
 800b2ee:	d413      	bmi.n	800b318 <_printf_i+0x23c>
 800b2f0:	68e0      	ldr	r0, [r4, #12]
 800b2f2:	9b03      	ldr	r3, [sp, #12]
 800b2f4:	4298      	cmp	r0, r3
 800b2f6:	bfb8      	it	lt
 800b2f8:	4618      	movlt	r0, r3
 800b2fa:	e7a4      	b.n	800b246 <_printf_i+0x16a>
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	4632      	mov	r2, r6
 800b300:	4649      	mov	r1, r9
 800b302:	4640      	mov	r0, r8
 800b304:	47d0      	blx	sl
 800b306:	3001      	adds	r0, #1
 800b308:	d09b      	beq.n	800b242 <_printf_i+0x166>
 800b30a:	3501      	adds	r5, #1
 800b30c:	68e3      	ldr	r3, [r4, #12]
 800b30e:	9903      	ldr	r1, [sp, #12]
 800b310:	1a5b      	subs	r3, r3, r1
 800b312:	42ab      	cmp	r3, r5
 800b314:	dcf2      	bgt.n	800b2fc <_printf_i+0x220>
 800b316:	e7eb      	b.n	800b2f0 <_printf_i+0x214>
 800b318:	2500      	movs	r5, #0
 800b31a:	f104 0619 	add.w	r6, r4, #25
 800b31e:	e7f5      	b.n	800b30c <_printf_i+0x230>
 800b320:	0800bb65 	.word	0x0800bb65
 800b324:	0800bb76 	.word	0x0800bb76

0800b328 <_sbrk_r>:
 800b328:	b538      	push	{r3, r4, r5, lr}
 800b32a:	2300      	movs	r3, #0
 800b32c:	4d05      	ldr	r5, [pc, #20]	; (800b344 <_sbrk_r+0x1c>)
 800b32e:	4604      	mov	r4, r0
 800b330:	4608      	mov	r0, r1
 800b332:	602b      	str	r3, [r5, #0]
 800b334:	f7f6 fdc4 	bl	8001ec0 <_sbrk>
 800b338:	1c43      	adds	r3, r0, #1
 800b33a:	d102      	bne.n	800b342 <_sbrk_r+0x1a>
 800b33c:	682b      	ldr	r3, [r5, #0]
 800b33e:	b103      	cbz	r3, 800b342 <_sbrk_r+0x1a>
 800b340:	6023      	str	r3, [r4, #0]
 800b342:	bd38      	pop	{r3, r4, r5, pc}
 800b344:	200015ac 	.word	0x200015ac

0800b348 <__sread>:
 800b348:	b510      	push	{r4, lr}
 800b34a:	460c      	mov	r4, r1
 800b34c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b350:	f000 fafe 	bl	800b950 <_read_r>
 800b354:	2800      	cmp	r0, #0
 800b356:	bfab      	itete	ge
 800b358:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b35a:	89a3      	ldrhlt	r3, [r4, #12]
 800b35c:	181b      	addge	r3, r3, r0
 800b35e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b362:	bfac      	ite	ge
 800b364:	6563      	strge	r3, [r4, #84]	; 0x54
 800b366:	81a3      	strhlt	r3, [r4, #12]
 800b368:	bd10      	pop	{r4, pc}

0800b36a <__swrite>:
 800b36a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b36e:	461f      	mov	r7, r3
 800b370:	898b      	ldrh	r3, [r1, #12]
 800b372:	4605      	mov	r5, r0
 800b374:	05db      	lsls	r3, r3, #23
 800b376:	460c      	mov	r4, r1
 800b378:	4616      	mov	r6, r2
 800b37a:	d505      	bpl.n	800b388 <__swrite+0x1e>
 800b37c:	2302      	movs	r3, #2
 800b37e:	2200      	movs	r2, #0
 800b380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b384:	f000 f9c8 	bl	800b718 <_lseek_r>
 800b388:	89a3      	ldrh	r3, [r4, #12]
 800b38a:	4632      	mov	r2, r6
 800b38c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b390:	81a3      	strh	r3, [r4, #12]
 800b392:	4628      	mov	r0, r5
 800b394:	463b      	mov	r3, r7
 800b396:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b39a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b39e:	f000 b869 	b.w	800b474 <_write_r>

0800b3a2 <__sseek>:
 800b3a2:	b510      	push	{r4, lr}
 800b3a4:	460c      	mov	r4, r1
 800b3a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3aa:	f000 f9b5 	bl	800b718 <_lseek_r>
 800b3ae:	1c43      	adds	r3, r0, #1
 800b3b0:	89a3      	ldrh	r3, [r4, #12]
 800b3b2:	bf15      	itete	ne
 800b3b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3be:	81a3      	strheq	r3, [r4, #12]
 800b3c0:	bf18      	it	ne
 800b3c2:	81a3      	strhne	r3, [r4, #12]
 800b3c4:	bd10      	pop	{r4, pc}

0800b3c6 <__sclose>:
 800b3c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ca:	f000 b8d3 	b.w	800b574 <_close_r>
	...

0800b3d0 <__swbuf_r>:
 800b3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3d2:	460e      	mov	r6, r1
 800b3d4:	4614      	mov	r4, r2
 800b3d6:	4605      	mov	r5, r0
 800b3d8:	b118      	cbz	r0, 800b3e2 <__swbuf_r+0x12>
 800b3da:	6983      	ldr	r3, [r0, #24]
 800b3dc:	b90b      	cbnz	r3, 800b3e2 <__swbuf_r+0x12>
 800b3de:	f7ff fa5f 	bl	800a8a0 <__sinit>
 800b3e2:	4b21      	ldr	r3, [pc, #132]	; (800b468 <__swbuf_r+0x98>)
 800b3e4:	429c      	cmp	r4, r3
 800b3e6:	d12b      	bne.n	800b440 <__swbuf_r+0x70>
 800b3e8:	686c      	ldr	r4, [r5, #4]
 800b3ea:	69a3      	ldr	r3, [r4, #24]
 800b3ec:	60a3      	str	r3, [r4, #8]
 800b3ee:	89a3      	ldrh	r3, [r4, #12]
 800b3f0:	071a      	lsls	r2, r3, #28
 800b3f2:	d52f      	bpl.n	800b454 <__swbuf_r+0x84>
 800b3f4:	6923      	ldr	r3, [r4, #16]
 800b3f6:	b36b      	cbz	r3, 800b454 <__swbuf_r+0x84>
 800b3f8:	6923      	ldr	r3, [r4, #16]
 800b3fa:	6820      	ldr	r0, [r4, #0]
 800b3fc:	b2f6      	uxtb	r6, r6
 800b3fe:	1ac0      	subs	r0, r0, r3
 800b400:	6963      	ldr	r3, [r4, #20]
 800b402:	4637      	mov	r7, r6
 800b404:	4283      	cmp	r3, r0
 800b406:	dc04      	bgt.n	800b412 <__swbuf_r+0x42>
 800b408:	4621      	mov	r1, r4
 800b40a:	4628      	mov	r0, r5
 800b40c:	f000 f948 	bl	800b6a0 <_fflush_r>
 800b410:	bb30      	cbnz	r0, 800b460 <__swbuf_r+0x90>
 800b412:	68a3      	ldr	r3, [r4, #8]
 800b414:	3001      	adds	r0, #1
 800b416:	3b01      	subs	r3, #1
 800b418:	60a3      	str	r3, [r4, #8]
 800b41a:	6823      	ldr	r3, [r4, #0]
 800b41c:	1c5a      	adds	r2, r3, #1
 800b41e:	6022      	str	r2, [r4, #0]
 800b420:	701e      	strb	r6, [r3, #0]
 800b422:	6963      	ldr	r3, [r4, #20]
 800b424:	4283      	cmp	r3, r0
 800b426:	d004      	beq.n	800b432 <__swbuf_r+0x62>
 800b428:	89a3      	ldrh	r3, [r4, #12]
 800b42a:	07db      	lsls	r3, r3, #31
 800b42c:	d506      	bpl.n	800b43c <__swbuf_r+0x6c>
 800b42e:	2e0a      	cmp	r6, #10
 800b430:	d104      	bne.n	800b43c <__swbuf_r+0x6c>
 800b432:	4621      	mov	r1, r4
 800b434:	4628      	mov	r0, r5
 800b436:	f000 f933 	bl	800b6a0 <_fflush_r>
 800b43a:	b988      	cbnz	r0, 800b460 <__swbuf_r+0x90>
 800b43c:	4638      	mov	r0, r7
 800b43e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b440:	4b0a      	ldr	r3, [pc, #40]	; (800b46c <__swbuf_r+0x9c>)
 800b442:	429c      	cmp	r4, r3
 800b444:	d101      	bne.n	800b44a <__swbuf_r+0x7a>
 800b446:	68ac      	ldr	r4, [r5, #8]
 800b448:	e7cf      	b.n	800b3ea <__swbuf_r+0x1a>
 800b44a:	4b09      	ldr	r3, [pc, #36]	; (800b470 <__swbuf_r+0xa0>)
 800b44c:	429c      	cmp	r4, r3
 800b44e:	bf08      	it	eq
 800b450:	68ec      	ldreq	r4, [r5, #12]
 800b452:	e7ca      	b.n	800b3ea <__swbuf_r+0x1a>
 800b454:	4621      	mov	r1, r4
 800b456:	4628      	mov	r0, r5
 800b458:	f000 f81e 	bl	800b498 <__swsetup_r>
 800b45c:	2800      	cmp	r0, #0
 800b45e:	d0cb      	beq.n	800b3f8 <__swbuf_r+0x28>
 800b460:	f04f 37ff 	mov.w	r7, #4294967295
 800b464:	e7ea      	b.n	800b43c <__swbuf_r+0x6c>
 800b466:	bf00      	nop
 800b468:	0800bb14 	.word	0x0800bb14
 800b46c:	0800bb34 	.word	0x0800bb34
 800b470:	0800baf4 	.word	0x0800baf4

0800b474 <_write_r>:
 800b474:	b538      	push	{r3, r4, r5, lr}
 800b476:	4604      	mov	r4, r0
 800b478:	4608      	mov	r0, r1
 800b47a:	4611      	mov	r1, r2
 800b47c:	2200      	movs	r2, #0
 800b47e:	4d05      	ldr	r5, [pc, #20]	; (800b494 <_write_r+0x20>)
 800b480:	602a      	str	r2, [r5, #0]
 800b482:	461a      	mov	r2, r3
 800b484:	f7f5 f8f6 	bl	8000674 <_write>
 800b488:	1c43      	adds	r3, r0, #1
 800b48a:	d102      	bne.n	800b492 <_write_r+0x1e>
 800b48c:	682b      	ldr	r3, [r5, #0]
 800b48e:	b103      	cbz	r3, 800b492 <_write_r+0x1e>
 800b490:	6023      	str	r3, [r4, #0]
 800b492:	bd38      	pop	{r3, r4, r5, pc}
 800b494:	200015ac 	.word	0x200015ac

0800b498 <__swsetup_r>:
 800b498:	4b32      	ldr	r3, [pc, #200]	; (800b564 <__swsetup_r+0xcc>)
 800b49a:	b570      	push	{r4, r5, r6, lr}
 800b49c:	681d      	ldr	r5, [r3, #0]
 800b49e:	4606      	mov	r6, r0
 800b4a0:	460c      	mov	r4, r1
 800b4a2:	b125      	cbz	r5, 800b4ae <__swsetup_r+0x16>
 800b4a4:	69ab      	ldr	r3, [r5, #24]
 800b4a6:	b913      	cbnz	r3, 800b4ae <__swsetup_r+0x16>
 800b4a8:	4628      	mov	r0, r5
 800b4aa:	f7ff f9f9 	bl	800a8a0 <__sinit>
 800b4ae:	4b2e      	ldr	r3, [pc, #184]	; (800b568 <__swsetup_r+0xd0>)
 800b4b0:	429c      	cmp	r4, r3
 800b4b2:	d10f      	bne.n	800b4d4 <__swsetup_r+0x3c>
 800b4b4:	686c      	ldr	r4, [r5, #4]
 800b4b6:	89a3      	ldrh	r3, [r4, #12]
 800b4b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4bc:	0719      	lsls	r1, r3, #28
 800b4be:	d42c      	bmi.n	800b51a <__swsetup_r+0x82>
 800b4c0:	06dd      	lsls	r5, r3, #27
 800b4c2:	d411      	bmi.n	800b4e8 <__swsetup_r+0x50>
 800b4c4:	2309      	movs	r3, #9
 800b4c6:	6033      	str	r3, [r6, #0]
 800b4c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d0:	81a3      	strh	r3, [r4, #12]
 800b4d2:	e03e      	b.n	800b552 <__swsetup_r+0xba>
 800b4d4:	4b25      	ldr	r3, [pc, #148]	; (800b56c <__swsetup_r+0xd4>)
 800b4d6:	429c      	cmp	r4, r3
 800b4d8:	d101      	bne.n	800b4de <__swsetup_r+0x46>
 800b4da:	68ac      	ldr	r4, [r5, #8]
 800b4dc:	e7eb      	b.n	800b4b6 <__swsetup_r+0x1e>
 800b4de:	4b24      	ldr	r3, [pc, #144]	; (800b570 <__swsetup_r+0xd8>)
 800b4e0:	429c      	cmp	r4, r3
 800b4e2:	bf08      	it	eq
 800b4e4:	68ec      	ldreq	r4, [r5, #12]
 800b4e6:	e7e6      	b.n	800b4b6 <__swsetup_r+0x1e>
 800b4e8:	0758      	lsls	r0, r3, #29
 800b4ea:	d512      	bpl.n	800b512 <__swsetup_r+0x7a>
 800b4ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4ee:	b141      	cbz	r1, 800b502 <__swsetup_r+0x6a>
 800b4f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4f4:	4299      	cmp	r1, r3
 800b4f6:	d002      	beq.n	800b4fe <__swsetup_r+0x66>
 800b4f8:	4630      	mov	r0, r6
 800b4fa:	f000 f9b7 	bl	800b86c <_free_r>
 800b4fe:	2300      	movs	r3, #0
 800b500:	6363      	str	r3, [r4, #52]	; 0x34
 800b502:	89a3      	ldrh	r3, [r4, #12]
 800b504:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b508:	81a3      	strh	r3, [r4, #12]
 800b50a:	2300      	movs	r3, #0
 800b50c:	6063      	str	r3, [r4, #4]
 800b50e:	6923      	ldr	r3, [r4, #16]
 800b510:	6023      	str	r3, [r4, #0]
 800b512:	89a3      	ldrh	r3, [r4, #12]
 800b514:	f043 0308 	orr.w	r3, r3, #8
 800b518:	81a3      	strh	r3, [r4, #12]
 800b51a:	6923      	ldr	r3, [r4, #16]
 800b51c:	b94b      	cbnz	r3, 800b532 <__swsetup_r+0x9a>
 800b51e:	89a3      	ldrh	r3, [r4, #12]
 800b520:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b528:	d003      	beq.n	800b532 <__swsetup_r+0x9a>
 800b52a:	4621      	mov	r1, r4
 800b52c:	4630      	mov	r0, r6
 800b52e:	f000 f929 	bl	800b784 <__smakebuf_r>
 800b532:	89a0      	ldrh	r0, [r4, #12]
 800b534:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b538:	f010 0301 	ands.w	r3, r0, #1
 800b53c:	d00a      	beq.n	800b554 <__swsetup_r+0xbc>
 800b53e:	2300      	movs	r3, #0
 800b540:	60a3      	str	r3, [r4, #8]
 800b542:	6963      	ldr	r3, [r4, #20]
 800b544:	425b      	negs	r3, r3
 800b546:	61a3      	str	r3, [r4, #24]
 800b548:	6923      	ldr	r3, [r4, #16]
 800b54a:	b943      	cbnz	r3, 800b55e <__swsetup_r+0xc6>
 800b54c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b550:	d1ba      	bne.n	800b4c8 <__swsetup_r+0x30>
 800b552:	bd70      	pop	{r4, r5, r6, pc}
 800b554:	0781      	lsls	r1, r0, #30
 800b556:	bf58      	it	pl
 800b558:	6963      	ldrpl	r3, [r4, #20]
 800b55a:	60a3      	str	r3, [r4, #8]
 800b55c:	e7f4      	b.n	800b548 <__swsetup_r+0xb0>
 800b55e:	2000      	movs	r0, #0
 800b560:	e7f7      	b.n	800b552 <__swsetup_r+0xba>
 800b562:	bf00      	nop
 800b564:	20000190 	.word	0x20000190
 800b568:	0800bb14 	.word	0x0800bb14
 800b56c:	0800bb34 	.word	0x0800bb34
 800b570:	0800baf4 	.word	0x0800baf4

0800b574 <_close_r>:
 800b574:	b538      	push	{r3, r4, r5, lr}
 800b576:	2300      	movs	r3, #0
 800b578:	4d05      	ldr	r5, [pc, #20]	; (800b590 <_close_r+0x1c>)
 800b57a:	4604      	mov	r4, r0
 800b57c:	4608      	mov	r0, r1
 800b57e:	602b      	str	r3, [r5, #0]
 800b580:	f7f6 fc6d 	bl	8001e5e <_close>
 800b584:	1c43      	adds	r3, r0, #1
 800b586:	d102      	bne.n	800b58e <_close_r+0x1a>
 800b588:	682b      	ldr	r3, [r5, #0]
 800b58a:	b103      	cbz	r3, 800b58e <_close_r+0x1a>
 800b58c:	6023      	str	r3, [r4, #0]
 800b58e:	bd38      	pop	{r3, r4, r5, pc}
 800b590:	200015ac 	.word	0x200015ac

0800b594 <__sflush_r>:
 800b594:	898a      	ldrh	r2, [r1, #12]
 800b596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b59a:	4605      	mov	r5, r0
 800b59c:	0710      	lsls	r0, r2, #28
 800b59e:	460c      	mov	r4, r1
 800b5a0:	d458      	bmi.n	800b654 <__sflush_r+0xc0>
 800b5a2:	684b      	ldr	r3, [r1, #4]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	dc05      	bgt.n	800b5b4 <__sflush_r+0x20>
 800b5a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	dc02      	bgt.n	800b5b4 <__sflush_r+0x20>
 800b5ae:	2000      	movs	r0, #0
 800b5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5b6:	2e00      	cmp	r6, #0
 800b5b8:	d0f9      	beq.n	800b5ae <__sflush_r+0x1a>
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b5c0:	682f      	ldr	r7, [r5, #0]
 800b5c2:	602b      	str	r3, [r5, #0]
 800b5c4:	d032      	beq.n	800b62c <__sflush_r+0x98>
 800b5c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b5c8:	89a3      	ldrh	r3, [r4, #12]
 800b5ca:	075a      	lsls	r2, r3, #29
 800b5cc:	d505      	bpl.n	800b5da <__sflush_r+0x46>
 800b5ce:	6863      	ldr	r3, [r4, #4]
 800b5d0:	1ac0      	subs	r0, r0, r3
 800b5d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b5d4:	b10b      	cbz	r3, 800b5da <__sflush_r+0x46>
 800b5d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5d8:	1ac0      	subs	r0, r0, r3
 800b5da:	2300      	movs	r3, #0
 800b5dc:	4602      	mov	r2, r0
 800b5de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5e0:	4628      	mov	r0, r5
 800b5e2:	6a21      	ldr	r1, [r4, #32]
 800b5e4:	47b0      	blx	r6
 800b5e6:	1c43      	adds	r3, r0, #1
 800b5e8:	89a3      	ldrh	r3, [r4, #12]
 800b5ea:	d106      	bne.n	800b5fa <__sflush_r+0x66>
 800b5ec:	6829      	ldr	r1, [r5, #0]
 800b5ee:	291d      	cmp	r1, #29
 800b5f0:	d82c      	bhi.n	800b64c <__sflush_r+0xb8>
 800b5f2:	4a2a      	ldr	r2, [pc, #168]	; (800b69c <__sflush_r+0x108>)
 800b5f4:	40ca      	lsrs	r2, r1
 800b5f6:	07d6      	lsls	r6, r2, #31
 800b5f8:	d528      	bpl.n	800b64c <__sflush_r+0xb8>
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	6062      	str	r2, [r4, #4]
 800b5fe:	6922      	ldr	r2, [r4, #16]
 800b600:	04d9      	lsls	r1, r3, #19
 800b602:	6022      	str	r2, [r4, #0]
 800b604:	d504      	bpl.n	800b610 <__sflush_r+0x7c>
 800b606:	1c42      	adds	r2, r0, #1
 800b608:	d101      	bne.n	800b60e <__sflush_r+0x7a>
 800b60a:	682b      	ldr	r3, [r5, #0]
 800b60c:	b903      	cbnz	r3, 800b610 <__sflush_r+0x7c>
 800b60e:	6560      	str	r0, [r4, #84]	; 0x54
 800b610:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b612:	602f      	str	r7, [r5, #0]
 800b614:	2900      	cmp	r1, #0
 800b616:	d0ca      	beq.n	800b5ae <__sflush_r+0x1a>
 800b618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b61c:	4299      	cmp	r1, r3
 800b61e:	d002      	beq.n	800b626 <__sflush_r+0x92>
 800b620:	4628      	mov	r0, r5
 800b622:	f000 f923 	bl	800b86c <_free_r>
 800b626:	2000      	movs	r0, #0
 800b628:	6360      	str	r0, [r4, #52]	; 0x34
 800b62a:	e7c1      	b.n	800b5b0 <__sflush_r+0x1c>
 800b62c:	6a21      	ldr	r1, [r4, #32]
 800b62e:	2301      	movs	r3, #1
 800b630:	4628      	mov	r0, r5
 800b632:	47b0      	blx	r6
 800b634:	1c41      	adds	r1, r0, #1
 800b636:	d1c7      	bne.n	800b5c8 <__sflush_r+0x34>
 800b638:	682b      	ldr	r3, [r5, #0]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d0c4      	beq.n	800b5c8 <__sflush_r+0x34>
 800b63e:	2b1d      	cmp	r3, #29
 800b640:	d001      	beq.n	800b646 <__sflush_r+0xb2>
 800b642:	2b16      	cmp	r3, #22
 800b644:	d101      	bne.n	800b64a <__sflush_r+0xb6>
 800b646:	602f      	str	r7, [r5, #0]
 800b648:	e7b1      	b.n	800b5ae <__sflush_r+0x1a>
 800b64a:	89a3      	ldrh	r3, [r4, #12]
 800b64c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b650:	81a3      	strh	r3, [r4, #12]
 800b652:	e7ad      	b.n	800b5b0 <__sflush_r+0x1c>
 800b654:	690f      	ldr	r7, [r1, #16]
 800b656:	2f00      	cmp	r7, #0
 800b658:	d0a9      	beq.n	800b5ae <__sflush_r+0x1a>
 800b65a:	0793      	lsls	r3, r2, #30
 800b65c:	bf18      	it	ne
 800b65e:	2300      	movne	r3, #0
 800b660:	680e      	ldr	r6, [r1, #0]
 800b662:	bf08      	it	eq
 800b664:	694b      	ldreq	r3, [r1, #20]
 800b666:	eba6 0807 	sub.w	r8, r6, r7
 800b66a:	600f      	str	r7, [r1, #0]
 800b66c:	608b      	str	r3, [r1, #8]
 800b66e:	f1b8 0f00 	cmp.w	r8, #0
 800b672:	dd9c      	ble.n	800b5ae <__sflush_r+0x1a>
 800b674:	4643      	mov	r3, r8
 800b676:	463a      	mov	r2, r7
 800b678:	4628      	mov	r0, r5
 800b67a:	6a21      	ldr	r1, [r4, #32]
 800b67c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b67e:	47b0      	blx	r6
 800b680:	2800      	cmp	r0, #0
 800b682:	dc06      	bgt.n	800b692 <__sflush_r+0xfe>
 800b684:	89a3      	ldrh	r3, [r4, #12]
 800b686:	f04f 30ff 	mov.w	r0, #4294967295
 800b68a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b68e:	81a3      	strh	r3, [r4, #12]
 800b690:	e78e      	b.n	800b5b0 <__sflush_r+0x1c>
 800b692:	4407      	add	r7, r0
 800b694:	eba8 0800 	sub.w	r8, r8, r0
 800b698:	e7e9      	b.n	800b66e <__sflush_r+0xda>
 800b69a:	bf00      	nop
 800b69c:	20400001 	.word	0x20400001

0800b6a0 <_fflush_r>:
 800b6a0:	b538      	push	{r3, r4, r5, lr}
 800b6a2:	690b      	ldr	r3, [r1, #16]
 800b6a4:	4605      	mov	r5, r0
 800b6a6:	460c      	mov	r4, r1
 800b6a8:	b913      	cbnz	r3, 800b6b0 <_fflush_r+0x10>
 800b6aa:	2500      	movs	r5, #0
 800b6ac:	4628      	mov	r0, r5
 800b6ae:	bd38      	pop	{r3, r4, r5, pc}
 800b6b0:	b118      	cbz	r0, 800b6ba <_fflush_r+0x1a>
 800b6b2:	6983      	ldr	r3, [r0, #24]
 800b6b4:	b90b      	cbnz	r3, 800b6ba <_fflush_r+0x1a>
 800b6b6:	f7ff f8f3 	bl	800a8a0 <__sinit>
 800b6ba:	4b14      	ldr	r3, [pc, #80]	; (800b70c <_fflush_r+0x6c>)
 800b6bc:	429c      	cmp	r4, r3
 800b6be:	d11b      	bne.n	800b6f8 <_fflush_r+0x58>
 800b6c0:	686c      	ldr	r4, [r5, #4]
 800b6c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d0ef      	beq.n	800b6aa <_fflush_r+0xa>
 800b6ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b6cc:	07d0      	lsls	r0, r2, #31
 800b6ce:	d404      	bmi.n	800b6da <_fflush_r+0x3a>
 800b6d0:	0599      	lsls	r1, r3, #22
 800b6d2:	d402      	bmi.n	800b6da <_fflush_r+0x3a>
 800b6d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6d6:	f7ff f981 	bl	800a9dc <__retarget_lock_acquire_recursive>
 800b6da:	4628      	mov	r0, r5
 800b6dc:	4621      	mov	r1, r4
 800b6de:	f7ff ff59 	bl	800b594 <__sflush_r>
 800b6e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6e4:	4605      	mov	r5, r0
 800b6e6:	07da      	lsls	r2, r3, #31
 800b6e8:	d4e0      	bmi.n	800b6ac <_fflush_r+0xc>
 800b6ea:	89a3      	ldrh	r3, [r4, #12]
 800b6ec:	059b      	lsls	r3, r3, #22
 800b6ee:	d4dd      	bmi.n	800b6ac <_fflush_r+0xc>
 800b6f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6f2:	f7ff f974 	bl	800a9de <__retarget_lock_release_recursive>
 800b6f6:	e7d9      	b.n	800b6ac <_fflush_r+0xc>
 800b6f8:	4b05      	ldr	r3, [pc, #20]	; (800b710 <_fflush_r+0x70>)
 800b6fa:	429c      	cmp	r4, r3
 800b6fc:	d101      	bne.n	800b702 <_fflush_r+0x62>
 800b6fe:	68ac      	ldr	r4, [r5, #8]
 800b700:	e7df      	b.n	800b6c2 <_fflush_r+0x22>
 800b702:	4b04      	ldr	r3, [pc, #16]	; (800b714 <_fflush_r+0x74>)
 800b704:	429c      	cmp	r4, r3
 800b706:	bf08      	it	eq
 800b708:	68ec      	ldreq	r4, [r5, #12]
 800b70a:	e7da      	b.n	800b6c2 <_fflush_r+0x22>
 800b70c:	0800bb14 	.word	0x0800bb14
 800b710:	0800bb34 	.word	0x0800bb34
 800b714:	0800baf4 	.word	0x0800baf4

0800b718 <_lseek_r>:
 800b718:	b538      	push	{r3, r4, r5, lr}
 800b71a:	4604      	mov	r4, r0
 800b71c:	4608      	mov	r0, r1
 800b71e:	4611      	mov	r1, r2
 800b720:	2200      	movs	r2, #0
 800b722:	4d05      	ldr	r5, [pc, #20]	; (800b738 <_lseek_r+0x20>)
 800b724:	602a      	str	r2, [r5, #0]
 800b726:	461a      	mov	r2, r3
 800b728:	f7f6 fbbd 	bl	8001ea6 <_lseek>
 800b72c:	1c43      	adds	r3, r0, #1
 800b72e:	d102      	bne.n	800b736 <_lseek_r+0x1e>
 800b730:	682b      	ldr	r3, [r5, #0]
 800b732:	b103      	cbz	r3, 800b736 <_lseek_r+0x1e>
 800b734:	6023      	str	r3, [r4, #0]
 800b736:	bd38      	pop	{r3, r4, r5, pc}
 800b738:	200015ac 	.word	0x200015ac

0800b73c <__swhatbuf_r>:
 800b73c:	b570      	push	{r4, r5, r6, lr}
 800b73e:	460e      	mov	r6, r1
 800b740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b744:	4614      	mov	r4, r2
 800b746:	2900      	cmp	r1, #0
 800b748:	461d      	mov	r5, r3
 800b74a:	b096      	sub	sp, #88	; 0x58
 800b74c:	da07      	bge.n	800b75e <__swhatbuf_r+0x22>
 800b74e:	2300      	movs	r3, #0
 800b750:	602b      	str	r3, [r5, #0]
 800b752:	89b3      	ldrh	r3, [r6, #12]
 800b754:	061a      	lsls	r2, r3, #24
 800b756:	d410      	bmi.n	800b77a <__swhatbuf_r+0x3e>
 800b758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b75c:	e00e      	b.n	800b77c <__swhatbuf_r+0x40>
 800b75e:	466a      	mov	r2, sp
 800b760:	f000 f908 	bl	800b974 <_fstat_r>
 800b764:	2800      	cmp	r0, #0
 800b766:	dbf2      	blt.n	800b74e <__swhatbuf_r+0x12>
 800b768:	9a01      	ldr	r2, [sp, #4]
 800b76a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b76e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b772:	425a      	negs	r2, r3
 800b774:	415a      	adcs	r2, r3
 800b776:	602a      	str	r2, [r5, #0]
 800b778:	e7ee      	b.n	800b758 <__swhatbuf_r+0x1c>
 800b77a:	2340      	movs	r3, #64	; 0x40
 800b77c:	2000      	movs	r0, #0
 800b77e:	6023      	str	r3, [r4, #0]
 800b780:	b016      	add	sp, #88	; 0x58
 800b782:	bd70      	pop	{r4, r5, r6, pc}

0800b784 <__smakebuf_r>:
 800b784:	898b      	ldrh	r3, [r1, #12]
 800b786:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b788:	079d      	lsls	r5, r3, #30
 800b78a:	4606      	mov	r6, r0
 800b78c:	460c      	mov	r4, r1
 800b78e:	d507      	bpl.n	800b7a0 <__smakebuf_r+0x1c>
 800b790:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b794:	6023      	str	r3, [r4, #0]
 800b796:	6123      	str	r3, [r4, #16]
 800b798:	2301      	movs	r3, #1
 800b79a:	6163      	str	r3, [r4, #20]
 800b79c:	b002      	add	sp, #8
 800b79e:	bd70      	pop	{r4, r5, r6, pc}
 800b7a0:	466a      	mov	r2, sp
 800b7a2:	ab01      	add	r3, sp, #4
 800b7a4:	f7ff ffca 	bl	800b73c <__swhatbuf_r>
 800b7a8:	9900      	ldr	r1, [sp, #0]
 800b7aa:	4605      	mov	r5, r0
 800b7ac:	4630      	mov	r0, r6
 800b7ae:	f7ff f917 	bl	800a9e0 <_malloc_r>
 800b7b2:	b948      	cbnz	r0, 800b7c8 <__smakebuf_r+0x44>
 800b7b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7b8:	059a      	lsls	r2, r3, #22
 800b7ba:	d4ef      	bmi.n	800b79c <__smakebuf_r+0x18>
 800b7bc:	f023 0303 	bic.w	r3, r3, #3
 800b7c0:	f043 0302 	orr.w	r3, r3, #2
 800b7c4:	81a3      	strh	r3, [r4, #12]
 800b7c6:	e7e3      	b.n	800b790 <__smakebuf_r+0xc>
 800b7c8:	4b0d      	ldr	r3, [pc, #52]	; (800b800 <__smakebuf_r+0x7c>)
 800b7ca:	62b3      	str	r3, [r6, #40]	; 0x28
 800b7cc:	89a3      	ldrh	r3, [r4, #12]
 800b7ce:	6020      	str	r0, [r4, #0]
 800b7d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7d4:	81a3      	strh	r3, [r4, #12]
 800b7d6:	9b00      	ldr	r3, [sp, #0]
 800b7d8:	6120      	str	r0, [r4, #16]
 800b7da:	6163      	str	r3, [r4, #20]
 800b7dc:	9b01      	ldr	r3, [sp, #4]
 800b7de:	b15b      	cbz	r3, 800b7f8 <__smakebuf_r+0x74>
 800b7e0:	4630      	mov	r0, r6
 800b7e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7e6:	f000 f8d7 	bl	800b998 <_isatty_r>
 800b7ea:	b128      	cbz	r0, 800b7f8 <__smakebuf_r+0x74>
 800b7ec:	89a3      	ldrh	r3, [r4, #12]
 800b7ee:	f023 0303 	bic.w	r3, r3, #3
 800b7f2:	f043 0301 	orr.w	r3, r3, #1
 800b7f6:	81a3      	strh	r3, [r4, #12]
 800b7f8:	89a0      	ldrh	r0, [r4, #12]
 800b7fa:	4305      	orrs	r5, r0
 800b7fc:	81a5      	strh	r5, [r4, #12]
 800b7fe:	e7cd      	b.n	800b79c <__smakebuf_r+0x18>
 800b800:	0800a839 	.word	0x0800a839

0800b804 <memchr>:
 800b804:	4603      	mov	r3, r0
 800b806:	b510      	push	{r4, lr}
 800b808:	b2c9      	uxtb	r1, r1
 800b80a:	4402      	add	r2, r0
 800b80c:	4293      	cmp	r3, r2
 800b80e:	4618      	mov	r0, r3
 800b810:	d101      	bne.n	800b816 <memchr+0x12>
 800b812:	2000      	movs	r0, #0
 800b814:	e003      	b.n	800b81e <memchr+0x1a>
 800b816:	7804      	ldrb	r4, [r0, #0]
 800b818:	3301      	adds	r3, #1
 800b81a:	428c      	cmp	r4, r1
 800b81c:	d1f6      	bne.n	800b80c <memchr+0x8>
 800b81e:	bd10      	pop	{r4, pc}

0800b820 <memmove>:
 800b820:	4288      	cmp	r0, r1
 800b822:	b510      	push	{r4, lr}
 800b824:	eb01 0402 	add.w	r4, r1, r2
 800b828:	d902      	bls.n	800b830 <memmove+0x10>
 800b82a:	4284      	cmp	r4, r0
 800b82c:	4623      	mov	r3, r4
 800b82e:	d807      	bhi.n	800b840 <memmove+0x20>
 800b830:	1e43      	subs	r3, r0, #1
 800b832:	42a1      	cmp	r1, r4
 800b834:	d008      	beq.n	800b848 <memmove+0x28>
 800b836:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b83a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b83e:	e7f8      	b.n	800b832 <memmove+0x12>
 800b840:	4601      	mov	r1, r0
 800b842:	4402      	add	r2, r0
 800b844:	428a      	cmp	r2, r1
 800b846:	d100      	bne.n	800b84a <memmove+0x2a>
 800b848:	bd10      	pop	{r4, pc}
 800b84a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b84e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b852:	e7f7      	b.n	800b844 <memmove+0x24>

0800b854 <__malloc_lock>:
 800b854:	4801      	ldr	r0, [pc, #4]	; (800b85c <__malloc_lock+0x8>)
 800b856:	f7ff b8c1 	b.w	800a9dc <__retarget_lock_acquire_recursive>
 800b85a:	bf00      	nop
 800b85c:	200015a4 	.word	0x200015a4

0800b860 <__malloc_unlock>:
 800b860:	4801      	ldr	r0, [pc, #4]	; (800b868 <__malloc_unlock+0x8>)
 800b862:	f7ff b8bc 	b.w	800a9de <__retarget_lock_release_recursive>
 800b866:	bf00      	nop
 800b868:	200015a4 	.word	0x200015a4

0800b86c <_free_r>:
 800b86c:	b538      	push	{r3, r4, r5, lr}
 800b86e:	4605      	mov	r5, r0
 800b870:	2900      	cmp	r1, #0
 800b872:	d043      	beq.n	800b8fc <_free_r+0x90>
 800b874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b878:	1f0c      	subs	r4, r1, #4
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	bfb8      	it	lt
 800b87e:	18e4      	addlt	r4, r4, r3
 800b880:	f7ff ffe8 	bl	800b854 <__malloc_lock>
 800b884:	4a1e      	ldr	r2, [pc, #120]	; (800b900 <_free_r+0x94>)
 800b886:	6813      	ldr	r3, [r2, #0]
 800b888:	4610      	mov	r0, r2
 800b88a:	b933      	cbnz	r3, 800b89a <_free_r+0x2e>
 800b88c:	6063      	str	r3, [r4, #4]
 800b88e:	6014      	str	r4, [r2, #0]
 800b890:	4628      	mov	r0, r5
 800b892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b896:	f7ff bfe3 	b.w	800b860 <__malloc_unlock>
 800b89a:	42a3      	cmp	r3, r4
 800b89c:	d90a      	bls.n	800b8b4 <_free_r+0x48>
 800b89e:	6821      	ldr	r1, [r4, #0]
 800b8a0:	1862      	adds	r2, r4, r1
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	bf01      	itttt	eq
 800b8a6:	681a      	ldreq	r2, [r3, #0]
 800b8a8:	685b      	ldreq	r3, [r3, #4]
 800b8aa:	1852      	addeq	r2, r2, r1
 800b8ac:	6022      	streq	r2, [r4, #0]
 800b8ae:	6063      	str	r3, [r4, #4]
 800b8b0:	6004      	str	r4, [r0, #0]
 800b8b2:	e7ed      	b.n	800b890 <_free_r+0x24>
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	b10b      	cbz	r3, 800b8be <_free_r+0x52>
 800b8ba:	42a3      	cmp	r3, r4
 800b8bc:	d9fa      	bls.n	800b8b4 <_free_r+0x48>
 800b8be:	6811      	ldr	r1, [r2, #0]
 800b8c0:	1850      	adds	r0, r2, r1
 800b8c2:	42a0      	cmp	r0, r4
 800b8c4:	d10b      	bne.n	800b8de <_free_r+0x72>
 800b8c6:	6820      	ldr	r0, [r4, #0]
 800b8c8:	4401      	add	r1, r0
 800b8ca:	1850      	adds	r0, r2, r1
 800b8cc:	4283      	cmp	r3, r0
 800b8ce:	6011      	str	r1, [r2, #0]
 800b8d0:	d1de      	bne.n	800b890 <_free_r+0x24>
 800b8d2:	6818      	ldr	r0, [r3, #0]
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	4401      	add	r1, r0
 800b8d8:	6011      	str	r1, [r2, #0]
 800b8da:	6053      	str	r3, [r2, #4]
 800b8dc:	e7d8      	b.n	800b890 <_free_r+0x24>
 800b8de:	d902      	bls.n	800b8e6 <_free_r+0x7a>
 800b8e0:	230c      	movs	r3, #12
 800b8e2:	602b      	str	r3, [r5, #0]
 800b8e4:	e7d4      	b.n	800b890 <_free_r+0x24>
 800b8e6:	6820      	ldr	r0, [r4, #0]
 800b8e8:	1821      	adds	r1, r4, r0
 800b8ea:	428b      	cmp	r3, r1
 800b8ec:	bf01      	itttt	eq
 800b8ee:	6819      	ldreq	r1, [r3, #0]
 800b8f0:	685b      	ldreq	r3, [r3, #4]
 800b8f2:	1809      	addeq	r1, r1, r0
 800b8f4:	6021      	streq	r1, [r4, #0]
 800b8f6:	6063      	str	r3, [r4, #4]
 800b8f8:	6054      	str	r4, [r2, #4]
 800b8fa:	e7c9      	b.n	800b890 <_free_r+0x24>
 800b8fc:	bd38      	pop	{r3, r4, r5, pc}
 800b8fe:	bf00      	nop
 800b900:	200004a4 	.word	0x200004a4

0800b904 <_realloc_r>:
 800b904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b906:	4607      	mov	r7, r0
 800b908:	4614      	mov	r4, r2
 800b90a:	460e      	mov	r6, r1
 800b90c:	b921      	cbnz	r1, 800b918 <_realloc_r+0x14>
 800b90e:	4611      	mov	r1, r2
 800b910:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b914:	f7ff b864 	b.w	800a9e0 <_malloc_r>
 800b918:	b922      	cbnz	r2, 800b924 <_realloc_r+0x20>
 800b91a:	f7ff ffa7 	bl	800b86c <_free_r>
 800b91e:	4625      	mov	r5, r4
 800b920:	4628      	mov	r0, r5
 800b922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b924:	f000 f848 	bl	800b9b8 <_malloc_usable_size_r>
 800b928:	42a0      	cmp	r0, r4
 800b92a:	d20f      	bcs.n	800b94c <_realloc_r+0x48>
 800b92c:	4621      	mov	r1, r4
 800b92e:	4638      	mov	r0, r7
 800b930:	f7ff f856 	bl	800a9e0 <_malloc_r>
 800b934:	4605      	mov	r5, r0
 800b936:	2800      	cmp	r0, #0
 800b938:	d0f2      	beq.n	800b920 <_realloc_r+0x1c>
 800b93a:	4631      	mov	r1, r6
 800b93c:	4622      	mov	r2, r4
 800b93e:	f7fe ff09 	bl	800a754 <memcpy>
 800b942:	4631      	mov	r1, r6
 800b944:	4638      	mov	r0, r7
 800b946:	f7ff ff91 	bl	800b86c <_free_r>
 800b94a:	e7e9      	b.n	800b920 <_realloc_r+0x1c>
 800b94c:	4635      	mov	r5, r6
 800b94e:	e7e7      	b.n	800b920 <_realloc_r+0x1c>

0800b950 <_read_r>:
 800b950:	b538      	push	{r3, r4, r5, lr}
 800b952:	4604      	mov	r4, r0
 800b954:	4608      	mov	r0, r1
 800b956:	4611      	mov	r1, r2
 800b958:	2200      	movs	r2, #0
 800b95a:	4d05      	ldr	r5, [pc, #20]	; (800b970 <_read_r+0x20>)
 800b95c:	602a      	str	r2, [r5, #0]
 800b95e:	461a      	mov	r2, r3
 800b960:	f7f6 fa60 	bl	8001e24 <_read>
 800b964:	1c43      	adds	r3, r0, #1
 800b966:	d102      	bne.n	800b96e <_read_r+0x1e>
 800b968:	682b      	ldr	r3, [r5, #0]
 800b96a:	b103      	cbz	r3, 800b96e <_read_r+0x1e>
 800b96c:	6023      	str	r3, [r4, #0]
 800b96e:	bd38      	pop	{r3, r4, r5, pc}
 800b970:	200015ac 	.word	0x200015ac

0800b974 <_fstat_r>:
 800b974:	b538      	push	{r3, r4, r5, lr}
 800b976:	2300      	movs	r3, #0
 800b978:	4d06      	ldr	r5, [pc, #24]	; (800b994 <_fstat_r+0x20>)
 800b97a:	4604      	mov	r4, r0
 800b97c:	4608      	mov	r0, r1
 800b97e:	4611      	mov	r1, r2
 800b980:	602b      	str	r3, [r5, #0]
 800b982:	f7f6 fa77 	bl	8001e74 <_fstat>
 800b986:	1c43      	adds	r3, r0, #1
 800b988:	d102      	bne.n	800b990 <_fstat_r+0x1c>
 800b98a:	682b      	ldr	r3, [r5, #0]
 800b98c:	b103      	cbz	r3, 800b990 <_fstat_r+0x1c>
 800b98e:	6023      	str	r3, [r4, #0]
 800b990:	bd38      	pop	{r3, r4, r5, pc}
 800b992:	bf00      	nop
 800b994:	200015ac 	.word	0x200015ac

0800b998 <_isatty_r>:
 800b998:	b538      	push	{r3, r4, r5, lr}
 800b99a:	2300      	movs	r3, #0
 800b99c:	4d05      	ldr	r5, [pc, #20]	; (800b9b4 <_isatty_r+0x1c>)
 800b99e:	4604      	mov	r4, r0
 800b9a0:	4608      	mov	r0, r1
 800b9a2:	602b      	str	r3, [r5, #0]
 800b9a4:	f7f6 fa75 	bl	8001e92 <_isatty>
 800b9a8:	1c43      	adds	r3, r0, #1
 800b9aa:	d102      	bne.n	800b9b2 <_isatty_r+0x1a>
 800b9ac:	682b      	ldr	r3, [r5, #0]
 800b9ae:	b103      	cbz	r3, 800b9b2 <_isatty_r+0x1a>
 800b9b0:	6023      	str	r3, [r4, #0]
 800b9b2:	bd38      	pop	{r3, r4, r5, pc}
 800b9b4:	200015ac 	.word	0x200015ac

0800b9b8 <_malloc_usable_size_r>:
 800b9b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9bc:	1f18      	subs	r0, r3, #4
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	bfbc      	itt	lt
 800b9c2:	580b      	ldrlt	r3, [r1, r0]
 800b9c4:	18c0      	addlt	r0, r0, r3
 800b9c6:	4770      	bx	lr

0800b9c8 <_init>:
 800b9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ca:	bf00      	nop
 800b9cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ce:	bc08      	pop	{r3}
 800b9d0:	469e      	mov	lr, r3
 800b9d2:	4770      	bx	lr

0800b9d4 <_fini>:
 800b9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9d6:	bf00      	nop
 800b9d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9da:	bc08      	pop	{r3}
 800b9dc:	469e      	mov	lr, r3
 800b9de:	4770      	bx	lr
